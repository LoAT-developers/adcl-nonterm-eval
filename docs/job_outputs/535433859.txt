NO

Initial ITS
Start location: __init
   0: f1_0_main_Load -> f162_0_main_LT : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P0 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0 /\ -1+arg2 > 0), cost: 1
   1: f162_0_main_LT -> f162_0_main_LT : arg2'=arg2P1, arg1'=arg1P1, (1+arg1 > 0 /\ arg2-arg1 <= 0 /\ 1+arg2 > 0 /\ -arg2+arg1 > 0 /\ arg2-arg2P1 == 0 /\ -1+arg1-arg1P1 == 0), cost: 1
   2: f162_0_main_LT -> f162_0_main_LT : arg2'=arg2P2, arg1'=arg1P2, (1+arg1 > 0 /\ 1+2*arg1-arg1P2 == 0 /\ arg2-arg1 <= 0 /\ 1+arg2 > 0 /\ -arg2+arg1 == 0 /\ 2*arg1 >= 0 /\ 1+arg2-arg2P2 == 0), cost: 1
   3: __init -> f1_0_main_Load : arg2'=arg2P3, arg1'=arg1P3, TRUE, cost: 1


Applied preprocessing
Original rule:
f162_0_main_LT -> f162_0_main_LT : arg2'=arg2P1, arg1'=arg1P1, (1+arg1 > 0 /\ arg2-arg1 <= 0 /\ 1+arg2 > 0 /\ -arg2+arg1 > 0 /\ arg2-arg2P1 == 0 /\ -1+arg1-arg1P1 == 0), cost: 1
New rule:
f162_0_main_LT -> f162_0_main_LT : arg1'=-1+arg1, (1+arg2 > 0 /\ -arg2+arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f162_0_main_LT -> f162_0_main_LT : arg2'=arg2P2, arg1'=arg1P2, (1+arg1 > 0 /\ 1+2*arg1-arg1P2 == 0 /\ arg2-arg1 <= 0 /\ 1+arg2 > 0 /\ -arg2+arg1 == 0 /\ 2*arg1 >= 0 /\ 1+arg2-arg2P2 == 0), cost: 1
New rule:
f162_0_main_LT -> f162_0_main_LT : arg2'=1+arg2, arg1'=1+2*arg1, (-arg2+arg1 == 0 /\ arg1 >= 0), cost: 1

Simplified rules
Start location: __init
   0: f1_0_main_Load -> f162_0_main_LT : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P0 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0 /\ -1+arg2 > 0), cost: 1
   4: f162_0_main_LT -> f162_0_main_LT : arg1'=-1+arg1, (1+arg2 > 0 /\ -arg2+arg1 > 0), cost: 1
   5: f162_0_main_LT -> f162_0_main_LT : arg2'=1+arg2, arg1'=1+2*arg1, (-arg2+arg1 == 0 /\ arg1 >= 0), cost: 1
   3: __init -> f1_0_main_Load : arg2'=arg2P3, arg1'=arg1P3, TRUE, cost: 1


Applied acceleration
Original rule:
f162_0_main_LT -> f162_0_main_LT : arg1'=-1+arg1, (1+arg2 > 0 /\ -arg2+arg1 > 0), cost: 1
New rule:
f162_0_main_LT -> f162_0_main_LT : arg1'=arg1-n, (1-arg2+arg1-n > 0 /\ 1+arg2 > 0 /\ n >= 0), cost: n
Sub-proof via acceration calculus written to file:///tmp/tmpnam_OKAiNB.txt

Applied instantiation
Original rule:
f162_0_main_LT -> f162_0_main_LT : arg1'=arg1-n, (1-arg2+arg1-n > 0 /\ 1+arg2 > 0 /\ n >= 0), cost: n
New rule:
f162_0_main_LT -> f162_0_main_LT : arg1'=arg2, (1 > 0 /\ 1+arg2 > 0 /\ -arg2+arg1 >= 0), cost: -arg2+arg1

Applied chaining
First rule:
f162_0_main_LT -> f162_0_main_LT : arg2'=1+arg2, arg1'=1+2*arg1, (-arg2+arg1 == 0 /\ arg1 >= 0), cost: 1
Second rule:
f162_0_main_LT -> f162_0_main_LT : arg1'=arg2, (1 > 0 /\ 1+arg2 > 0 /\ -arg2+arg1 >= 0), cost: -arg2+arg1
New rule:
f162_0_main_LT -> f162_0_main_LT : arg2'=1+arg2, arg1'=1+arg2, (-arg2+arg1 == 0 /\ arg1 >= 0), cost: 1-arg2+2*arg1

Applied nonterm
Original rule:
f162_0_main_LT -> f162_0_main_LT : arg2'=1+arg2, arg1'=1+arg2, (-arg2+arg1 == 0 /\ arg1 >= 0), cost: 1-arg2+2*arg1
New rule:
f162_0_main_LT -> [3] : (arg2-arg1 >= 0 /\ -arg2+arg1 >= 0 /\ arg1 >= 0 /\ -1+n3 >= 0), cost: NONTERM
Sub-proof via acceration calculus written to file:///tmp/tmpnam_MOJEik.txt

Applied chaining
First rule:
f162_0_main_LT -> f162_0_main_LT : arg1'=arg2, (1 > 0 /\ 1+arg2 > 0 /\ -arg2+arg1 >= 0), cost: -arg2+arg1
Second rule:
f162_0_main_LT -> [3] : (arg2-arg1 >= 0 /\ -arg2+arg1 >= 0 /\ arg1 >= 0 /\ -1+n3 >= 0), cost: NONTERM
New rule:
f162_0_main_LT -> [3] : (0 >= 0 /\ 1 > 0 /\ arg2 >= 0 /\ 1+arg2 > 0 /\ -arg2+arg1 >= 0 /\ -1+n3 >= 0), cost: NONTERM

Applied chaining
First rule:
f162_0_main_LT -> f162_0_main_LT : arg1'=arg2, (1 > 0 /\ 1+arg2 > 0 /\ -arg2+arg1 >= 0), cost: -arg2+arg1
Second rule:
f162_0_main_LT -> f162_0_main_LT : arg2'=1+arg2, arg1'=1+2*arg1, (-arg2+arg1 == 0 /\ arg1 >= 0), cost: 1
New rule:
f162_0_main_LT -> f162_0_main_LT : arg2'=1+arg2, arg1'=1+2*arg2, (1+arg2 > 0 /\ -arg2+arg1 >= 0), cost: 1-arg2+arg1

Applied nonterm
Original rule:
f162_0_main_LT -> f162_0_main_LT : arg2'=1+arg2, arg1'=1+2*arg2, (1+arg2 > 0 /\ -arg2+arg1 >= 0), cost: 1-arg2+arg1
New rule:
f162_0_main_LT -> [3] : (-1+n4 >= 0 /\ 1+arg2 > 0 /\ -arg2+arg1 >= 0), cost: NONTERM
Sub-proof via acceration calculus written to file:///tmp/tmpnam_iGdIOh.txt

Applied chaining
First rule:
f162_0_main_LT -> f162_0_main_LT : arg2'=1+arg2, arg1'=1+2*arg1, (-arg2+arg1 == 0 /\ arg1 >= 0), cost: 1
Second rule:
f162_0_main_LT -> [3] : (-1+n4 >= 0 /\ 1+arg2 > 0 /\ -arg2+arg1 >= 0), cost: NONTERM
New rule:
f162_0_main_LT -> [3] : (2+arg2 > 0 /\ -arg2+2*arg1 >= 0 /\ -1+n4 >= 0 /\ -arg2+arg1 == 0 /\ arg1 >= 0), cost: NONTERM

Applied simplification
Original rule:
f162_0_main_LT -> f162_0_main_LT : arg1'=arg2, (1 > 0 /\ 1+arg2 > 0 /\ -arg2+arg1 >= 0), cost: -arg2+arg1
New rule:
f162_0_main_LT -> f162_0_main_LT : arg1'=arg2, (1+arg2 > 0 /\ -arg2+arg1 >= 0), cost: -arg2+arg1

Applied simplification
Original rule:
f162_0_main_LT -> [3] : (0 >= 0 /\ 1 > 0 /\ arg2 >= 0 /\ 1+arg2 > 0 /\ -arg2+arg1 >= 0 /\ -1+n3 >= 0), cost: NONTERM
New rule:
f162_0_main_LT -> [3] : (1+arg2 > 0 /\ -arg2+arg1 >= 0 /\ -1+n3 >= 0), cost: NONTERM

Applied simplification
Original rule:
f162_0_main_LT -> [3] : (2+arg2 > 0 /\ -arg2+2*arg1 >= 0 /\ -1+n4 >= 0 /\ -arg2+arg1 == 0 /\ arg1 >= 0), cost: NONTERM
New rule:
f162_0_main_LT -> [3] : (-1+n4 >= 0 /\ -arg2+arg1 == 0 /\ arg1 >= 0), cost: NONTERM

Applied deletion
Removed the following rules: 4

Accelerated simple loops
Start location: __init
   0: f1_0_main_Load -> f162_0_main_LT : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P0 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0 /\ -1+arg2 > 0), cost: 1
   5: f162_0_main_LT -> f162_0_main_LT : arg2'=1+arg2, arg1'=1+2*arg1, (-arg2+arg1 == 0 /\ arg1 >= 0), cost: 1
   7: f162_0_main_LT -> [3] : (arg2-arg1 >= 0 /\ -arg2+arg1 >= 0 /\ arg1 >= 0 /\ -1+n3 >= 0), cost: NONTERM
   9: f162_0_main_LT -> [3] : (-1+n4 >= 0 /\ 1+arg2 > 0 /\ -arg2+arg1 >= 0), cost: NONTERM
  11: f162_0_main_LT -> f162_0_main_LT : arg1'=arg2, (1+arg2 > 0 /\ -arg2+arg1 >= 0), cost: -arg2+arg1
  12: f162_0_main_LT -> [3] : (1+arg2 > 0 /\ -arg2+arg1 >= 0 /\ -1+n3 >= 0), cost: NONTERM
  13: f162_0_main_LT -> [3] : (-1+n4 >= 0 /\ -arg2+arg1 == 0 /\ arg1 >= 0), cost: NONTERM
   3: __init -> f1_0_main_Load : arg2'=arg2P3, arg1'=arg1P3, TRUE, cost: 1


Applied chaining
First rule:
f1_0_main_Load -> f162_0_main_LT : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P0 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0 /\ -1+arg2 > 0), cost: 1
Second rule:
f162_0_main_LT -> f162_0_main_LT : arg2'=1+arg2, arg1'=1+2*arg1, (-arg2+arg1 == 0 /\ arg1 >= 0), cost: 1
New rule:
f1_0_main_Load -> f162_0_main_LT : arg2'=1+arg1P0, arg1'=1+2*arg1P0, (arg1 > 0 /\ 1+arg1P0 > 0 /\ -1+arg2 > 0), cost: 2

Applied chaining
First rule:
f1_0_main_Load -> f162_0_main_LT : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P0 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0 /\ -1+arg2 > 0), cost: 1
Second rule:
f162_0_main_LT -> [3] : (arg2-arg1 >= 0 /\ -arg2+arg1 >= 0 /\ arg1 >= 0 /\ -1+n3 >= 0), cost: NONTERM
New rule:
f1_0_main_Load -> [3] : (arg1 > 0 /\ -1+arg2 > 0), cost: NONTERM

Applied chaining
First rule:
f1_0_main_Load -> f162_0_main_LT : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P0 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0 /\ -1+arg2 > 0), cost: 1
Second rule:
f162_0_main_LT -> [3] : (-1+n4 >= 0 /\ 1+arg2 > 0 /\ -arg2+arg1 >= 0), cost: NONTERM
New rule:
f1_0_main_Load -> [3] : (arg1 > 0 /\ -1+arg2 > 0), cost: NONTERM

Applied chaining
First rule:
f1_0_main_Load -> f162_0_main_LT : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P0 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0 /\ -1+arg2 > 0), cost: 1
Second rule:
f162_0_main_LT -> f162_0_main_LT : arg1'=arg2, (1+arg2 > 0 /\ -arg2+arg1 >= 0), cost: -arg2+arg1
New rule:
f1_0_main_Load -> f162_0_main_LT : arg2'=arg2P0, arg1'=arg2P0, (1+arg2P0 > 0 /\ -arg2P0+arg1P0 >= 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1-arg2P0+arg1P0

Applied chaining
First rule:
f1_0_main_Load -> f162_0_main_LT : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P0 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0 /\ -1+arg2 > 0), cost: 1
Second rule:
f162_0_main_LT -> [3] : (1+arg2 > 0 /\ -arg2+arg1 >= 0 /\ -1+n3 >= 0), cost: NONTERM
New rule:
f1_0_main_Load -> [3] : (arg1 > 0 /\ -1+arg2 > 0), cost: NONTERM

Applied chaining
First rule:
f1_0_main_Load -> f162_0_main_LT : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P0 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0 /\ -1+arg2 > 0), cost: 1
Second rule:
f162_0_main_LT -> [3] : (-1+n4 >= 0 /\ -arg2+arg1 == 0 /\ arg1 >= 0), cost: NONTERM
New rule:
f1_0_main_Load -> [3] : (arg1 > 0 /\ -1+arg2 > 0), cost: NONTERM

Applied deletion
Removed the following rules: 5 7 9 11 12 13

Chained accelerated rules with incoming rules
Start location: __init
   0: f1_0_main_Load -> f162_0_main_LT : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P0 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0 /\ -1+arg2 > 0), cost: 1
  14: f1_0_main_Load -> f162_0_main_LT : arg2'=1+arg1P0, arg1'=1+2*arg1P0, (arg1 > 0 /\ 1+arg1P0 > 0 /\ -1+arg2 > 0), cost: 2
  15: f1_0_main_Load -> [3] : (arg1 > 0 /\ -1+arg2 > 0), cost: NONTERM
  16: f1_0_main_Load -> f162_0_main_LT : arg2'=arg2P0, arg1'=arg2P0, (1+arg2P0 > 0 /\ -arg2P0+arg1P0 >= 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1-arg2P0+arg1P0
   3: __init -> f1_0_main_Load : arg2'=arg2P3, arg1'=arg1P3, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
  15: f1_0_main_Load -> [3] : (arg1 > 0 /\ -1+arg2 > 0), cost: NONTERM
   3: __init -> f1_0_main_Load : arg2'=arg2P3, arg1'=arg1P3, TRUE, cost: 1


Eliminating location f1_0_main_Load by chaining:

Applied chaining
First rule:
__init -> f1_0_main_Load : arg2'=arg2P3, arg1'=arg1P3, TRUE, cost: 1
Second rule:
f1_0_main_Load -> [3] : (arg1 > 0 /\ -1+arg2 > 0), cost: NONTERM
New rule:
__init -> [3] : (-1+arg2P3 > 0 /\ arg1P3 > 0), cost: NONTERM

Applied deletion
Removed the following rules: 3 15

Eliminated locations on linear paths
Start location: __init
  17: __init -> [3] : (-1+arg2P3 > 0 /\ arg1P3 > 0), cost: NONTERM


Computing asymptotic complexity
Proved nontermination of rule 17 via SMT.

Proved the following lower bound
Complexity:  Nonterm
Cpx degree: Nonterm

Solved cost: NONTERM
Rule cost:   NONTERM
Rule guard:  (-1+arg2P3 > 0 /\ arg1P3 > 0)
