WORST_CASE(Omega(0),?)

Initial ITS
Start location: __init
   0: f1_0_main_Load -> f563_0_mk_LE : arg2'=arg2P0, arg4'=arg4P0, arg1'=arg1P0, arg3'=arg3P0, (-1-arg1P0 == 0 /\ -arg3P0 == 0 /\ -arg2 == 0 /\ arg1 > 0 /\ -arg2P0 == 0 /\ -arg4P0 == 0), cost: 1
   1: f1_0_main_Load -> f563_0_mk_LE : arg2'=arg2P1, arg4'=arg4P1, arg1'=arg1P1, arg3'=arg3P1, (-arg2P1+3*x30 == 0 /\ arg2 > 0 /\ -1+3*x30-arg1P1 == 0 /\ arg1 > 0 /\ 1-arg4P1 == 0 /\ arg2-arg3P1 == 0 /\ 1+x30 > 0), cost: 1
   2: f563_0_mk_LE -> f563_0_mk_LE : arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg3'=arg3P2, (-1-arg1P2+arg1 == 0 /\ arg2 > 0 /\ -arg3P2+arg3 == 0 /\ arg4-arg4P2 == 0 /\ 1+arg3 > 0 /\ arg4-arg3 >= 0 /\ -arg2P2+arg1 == 0), cost: 1
   3: f563_0_mk_LE -> f563_0_mk_LE : arg2'=arg2P3, arg4'=arg4P3, arg1'=arg1P3, arg3'=arg3P3, (arg2 > 0 /\ arg1-arg2P3 == 0 /\ 1-arg4P3+arg4 == 0 /\ -1-arg1P3+arg1 == 0 /\ -arg3P3+arg3 == 0 /\ 1+arg3 > 0 /\ arg4-arg3 < 0 /\ 1+arg4 > 0), cost: 1
   4: __init -> f1_0_main_Load : arg2'=arg2P4, arg4'=arg4P4, arg1'=arg1P4, arg3'=arg3P4, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_Load -> f563_0_mk_LE : arg2'=arg2P0, arg4'=arg4P0, arg1'=arg1P0, arg3'=arg3P0, (-1-arg1P0 == 0 /\ -arg3P0 == 0 /\ -arg2 == 0 /\ arg1 > 0 /\ -arg2P0 == 0 /\ -arg4P0 == 0), cost: 1
New rule:
f1_0_main_Load -> f563_0_mk_LE : arg2'=0, arg4'=0, arg1'=-1, arg3'=0, (arg2 == 0 /\ arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f1_0_main_Load -> f563_0_mk_LE : arg2'=arg2P1, arg4'=arg4P1, arg1'=arg1P1, arg3'=arg3P1, (-arg2P1+3*x30 == 0 /\ arg2 > 0 /\ -1+3*x30-arg1P1 == 0 /\ arg1 > 0 /\ 1-arg4P1 == 0 /\ arg2-arg3P1 == 0 /\ 1+x30 > 0), cost: 1
New rule:
f1_0_main_Load -> f563_0_mk_LE : arg2'=3*x30, arg4'=1, arg1'=-1+3*x30, arg3'=arg2, (arg2 > 0 /\ arg1 > 0 /\ 1+x30 > 0), cost: 1

Applied preprocessing
Original rule:
f563_0_mk_LE -> f563_0_mk_LE : arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg3'=arg3P2, (-1-arg1P2+arg1 == 0 /\ arg2 > 0 /\ -arg3P2+arg3 == 0 /\ arg4-arg4P2 == 0 /\ 1+arg3 > 0 /\ arg4-arg3 >= 0 /\ -arg2P2+arg1 == 0), cost: 1
New rule:
f563_0_mk_LE -> f563_0_mk_LE : arg2'=arg1, arg1'=-1+arg1, (arg2 > 0 /\ 1+arg3 > 0 /\ arg4-arg3 >= 0), cost: 1

Applied preprocessing
Original rule:
f563_0_mk_LE -> f563_0_mk_LE : arg2'=arg2P3, arg4'=arg4P3, arg1'=arg1P3, arg3'=arg3P3, (arg2 > 0 /\ arg1-arg2P3 == 0 /\ 1-arg4P3+arg4 == 0 /\ -1-arg1P3+arg1 == 0 /\ -arg3P3+arg3 == 0 /\ 1+arg3 > 0 /\ arg4-arg3 < 0 /\ 1+arg4 > 0), cost: 1
New rule:
f563_0_mk_LE -> f563_0_mk_LE : arg2'=arg1, arg4'=1+arg4, arg1'=-1+arg1, (arg2 > 0 /\ 1+arg4 > 0 /\ -arg4+arg3 > 0), cost: 1

Simplified rules
Start location: __init
   5: f1_0_main_Load -> f563_0_mk_LE : arg2'=0, arg4'=0, arg1'=-1, arg3'=0, (arg2 == 0 /\ arg1 > 0), cost: 1
   6: f1_0_main_Load -> f563_0_mk_LE : arg2'=3*x30, arg4'=1, arg1'=-1+3*x30, arg3'=arg2, (arg2 > 0 /\ arg1 > 0 /\ 1+x30 > 0), cost: 1
   7: f563_0_mk_LE -> f563_0_mk_LE : arg2'=arg1, arg1'=-1+arg1, (arg2 > 0 /\ 1+arg3 > 0 /\ arg4-arg3 >= 0), cost: 1
   8: f563_0_mk_LE -> f563_0_mk_LE : arg2'=arg1, arg4'=1+arg4, arg1'=-1+arg1, (arg2 > 0 /\ 1+arg4 > 0 /\ -arg4+arg3 > 0), cost: 1
   4: __init -> f1_0_main_Load : arg2'=arg2P4, arg4'=arg4P4, arg1'=arg1P4, arg3'=arg3P4, TRUE, cost: 1


Applied acceleration
Original rule:
f563_0_mk_LE -> f563_0_mk_LE : arg2'=arg1, arg1'=-1+arg1, (arg2 > 0 /\ 1+arg3 > 0 /\ arg4-arg3 >= 0), cost: 1
New rule:
f563_0_mk_LE -> f563_0_mk_LE : arg2'=1+arg1-n, arg1'=arg1-n, (arg2 > 0 /\ 1+arg3 > 0 /\ arg4-arg3 >= 0 /\ -1+n >= 0 /\ 2+arg1-n > 0), cost: n
Sub-proof via acceration calculus written to file:///tmp/tmpnam_EljJFm.txt

Applied instantiation
Original rule:
f563_0_mk_LE -> f563_0_mk_LE : arg2'=1+arg1-n, arg1'=arg1-n, (arg2 > 0 /\ 1+arg3 > 0 /\ arg4-arg3 >= 0 /\ -1+n >= 0 /\ 2+arg1-n > 0), cost: n
New rule:
f563_0_mk_LE -> f563_0_mk_LE : arg2'=0, arg1'=-1, (1 > 0 /\ arg2 > 0 /\ arg1 >= 0 /\ 1+arg3 > 0 /\ arg4-arg3 >= 0), cost: 1+arg1

Applied acceleration
Original rule:
f563_0_mk_LE -> f563_0_mk_LE : arg2'=arg1, arg4'=1+arg4, arg1'=-1+arg1, (arg2 > 0 /\ 1+arg4 > 0 /\ -arg4+arg3 > 0), cost: 1
New rule:
f563_0_mk_LE -> f563_0_mk_LE : arg2'=1-n0+arg1, arg4'=n0+arg4, arg1'=-n0+arg1, (arg2 > 0 /\ -1+n0 >= 0 /\ 1-n0-arg4+arg3 > 0 /\ 2-n0+arg1 > 0 /\ 1+arg4 > 0), cost: n0
Sub-proof via acceration calculus written to file:///tmp/tmpnam_GmlMmj.txt

Applied instantiation
Original rule:
f563_0_mk_LE -> f563_0_mk_LE : arg2'=1-n0+arg1, arg4'=n0+arg4, arg1'=-n0+arg1, (arg2 > 0 /\ -1+n0 >= 0 /\ 1-n0-arg4+arg3 > 0 /\ 2-n0+arg1 > 0 /\ 1+arg4 > 0), cost: n0
New rule:
f563_0_mk_LE -> f563_0_mk_LE : arg2'=0, arg4'=1+arg4+arg1, arg1'=-1, (1 > 0 /\ arg2 > 0 /\ arg1 >= 0 /\ 1+arg4 > 0 /\ -arg4-arg1+arg3 > 0), cost: 1+arg1

Applied instantiation
Original rule:
f563_0_mk_LE -> f563_0_mk_LE : arg2'=1-n0+arg1, arg4'=n0+arg4, arg1'=-n0+arg1, (arg2 > 0 /\ -1+n0 >= 0 /\ 1-n0-arg4+arg3 > 0 /\ 2-n0+arg1 > 0 /\ 1+arg4 > 0), cost: n0
New rule:
f563_0_mk_LE -> f563_0_mk_LE : arg2'=1+arg4+arg1-arg3, arg4'=arg3, arg1'=arg4+arg1-arg3, (1 > 0 /\ -1-arg4+arg3 >= 0 /\ arg2 > 0 /\ 2+arg4+arg1-arg3 > 0 /\ 1+arg4 > 0), cost: -arg4+arg3

Applied simplification
Original rule:
f563_0_mk_LE -> f563_0_mk_LE : arg2'=0, arg1'=-1, (1 > 0 /\ arg2 > 0 /\ arg1 >= 0 /\ 1+arg3 > 0 /\ arg4-arg3 >= 0), cost: 1+arg1
New rule:
f563_0_mk_LE -> f563_0_mk_LE : arg2'=0, arg1'=-1, (arg2 > 0 /\ arg1 >= 0 /\ 1+arg3 > 0 /\ arg4-arg3 >= 0), cost: 1+arg1

Applied simplification
Original rule:
f563_0_mk_LE -> f563_0_mk_LE : arg2'=0, arg4'=1+arg4+arg1, arg1'=-1, (1 > 0 /\ arg2 > 0 /\ arg1 >= 0 /\ 1+arg4 > 0 /\ -arg4-arg1+arg3 > 0), cost: 1+arg1
New rule:
f563_0_mk_LE -> f563_0_mk_LE : arg2'=0, arg4'=1+arg4+arg1, arg1'=-1, (arg2 > 0 /\ arg1 >= 0 /\ 1+arg4 > 0 /\ -arg4-arg1+arg3 > 0), cost: 1+arg1

Applied simplification
Original rule:
f563_0_mk_LE -> f563_0_mk_LE : arg2'=1+arg4+arg1-arg3, arg4'=arg3, arg1'=arg4+arg1-arg3, (1 > 0 /\ -1-arg4+arg3 >= 0 /\ arg2 > 0 /\ 2+arg4+arg1-arg3 > 0 /\ 1+arg4 > 0), cost: -arg4+arg3
New rule:
f563_0_mk_LE -> f563_0_mk_LE : arg2'=1+arg4+arg1-arg3, arg4'=arg3, arg1'=arg4+arg1-arg3, (-1-arg4+arg3 >= 0 /\ arg2 > 0 /\ 2+arg4+arg1-arg3 > 0 /\ 1+arg4 > 0), cost: -arg4+arg3

Applied deletion
Removed the following rules: 7 8

Accelerated simple loops
Start location: __init
   5: f1_0_main_Load -> f563_0_mk_LE : arg2'=0, arg4'=0, arg1'=-1, arg3'=0, (arg2 == 0 /\ arg1 > 0), cost: 1
   6: f1_0_main_Load -> f563_0_mk_LE : arg2'=3*x30, arg4'=1, arg1'=-1+3*x30, arg3'=arg2, (arg2 > 0 /\ arg1 > 0 /\ 1+x30 > 0), cost: 1
  12: f563_0_mk_LE -> f563_0_mk_LE : arg2'=0, arg1'=-1, (arg2 > 0 /\ arg1 >= 0 /\ 1+arg3 > 0 /\ arg4-arg3 >= 0), cost: 1+arg1
  13: f563_0_mk_LE -> f563_0_mk_LE : arg2'=0, arg4'=1+arg4+arg1, arg1'=-1, (arg2 > 0 /\ arg1 >= 0 /\ 1+arg4 > 0 /\ -arg4-arg1+arg3 > 0), cost: 1+arg1
  14: f563_0_mk_LE -> f563_0_mk_LE : arg2'=1+arg4+arg1-arg3, arg4'=arg3, arg1'=arg4+arg1-arg3, (-1-arg4+arg3 >= 0 /\ arg2 > 0 /\ 2+arg4+arg1-arg3 > 0 /\ 1+arg4 > 0), cost: -arg4+arg3
   4: __init -> f1_0_main_Load : arg2'=arg2P4, arg4'=arg4P4, arg1'=arg1P4, arg3'=arg3P4, TRUE, cost: 1


Applied chaining
First rule:
f1_0_main_Load -> f563_0_mk_LE : arg2'=3*x30, arg4'=1, arg1'=-1+3*x30, arg3'=arg2, (arg2 > 0 /\ arg1 > 0 /\ 1+x30 > 0), cost: 1
Second rule:
f563_0_mk_LE -> f563_0_mk_LE : arg2'=0, arg1'=-1, (arg2 > 0 /\ arg1 >= 0 /\ 1+arg3 > 0 /\ arg4-arg3 >= 0), cost: 1+arg1
New rule:
f1_0_main_Load -> f563_0_mk_LE : arg2'=0, arg4'=1, arg1'=-1, arg3'=arg2, (3*x30 > 0 /\ arg1 > 0 /\ -1+arg2 == 0), cost: 1+3*x30

Applied chaining
First rule:
f1_0_main_Load -> f563_0_mk_LE : arg2'=3*x30, arg4'=1, arg1'=-1+3*x30, arg3'=arg2, (arg2 > 0 /\ arg1 > 0 /\ 1+x30 > 0), cost: 1
Second rule:
f563_0_mk_LE -> f563_0_mk_LE : arg2'=0, arg4'=1+arg4+arg1, arg1'=-1, (arg2 > 0 /\ arg1 >= 0 /\ 1+arg4 > 0 /\ -arg4-arg1+arg3 > 0), cost: 1+arg1
New rule:
f1_0_main_Load -> f563_0_mk_LE : arg2'=0, arg4'=1+3*x30, arg1'=-1, arg3'=arg2, (arg2-3*x30 > 0 /\ 3*x30 > 0 /\ arg1 > 0), cost: 1+3*x30

Applied chaining
First rule:
f1_0_main_Load -> f563_0_mk_LE : arg2'=3*x30, arg4'=1, arg1'=-1+3*x30, arg3'=arg2, (arg2 > 0 /\ arg1 > 0 /\ 1+x30 > 0), cost: 1
Second rule:
f563_0_mk_LE -> f563_0_mk_LE : arg2'=1+arg4+arg1-arg3, arg4'=arg3, arg1'=arg4+arg1-arg3, (-1-arg4+arg3 >= 0 /\ arg2 > 0 /\ 2+arg4+arg1-arg3 > 0 /\ 1+arg4 > 0), cost: -arg4+arg3
New rule:
f1_0_main_Load -> f563_0_mk_LE : arg2'=1-arg2+3*x30, arg4'=arg2, arg1'=-arg2+3*x30, arg3'=arg2, (-2+arg2 >= 0 /\ 2-arg2+3*x30 > 0 /\ arg1 > 0), cost: arg2

Applied deletion
Removed the following rules: 12 13 14

Chained accelerated rules with incoming rules
Start location: __init
   5: f1_0_main_Load -> f563_0_mk_LE : arg2'=0, arg4'=0, arg1'=-1, arg3'=0, (arg2 == 0 /\ arg1 > 0), cost: 1
   6: f1_0_main_Load -> f563_0_mk_LE : arg2'=3*x30, arg4'=1, arg1'=-1+3*x30, arg3'=arg2, (arg2 > 0 /\ arg1 > 0 /\ 1+x30 > 0), cost: 1
  15: f1_0_main_Load -> f563_0_mk_LE : arg2'=0, arg4'=1, arg1'=-1, arg3'=arg2, (3*x30 > 0 /\ arg1 > 0 /\ -1+arg2 == 0), cost: 1+3*x30
  16: f1_0_main_Load -> f563_0_mk_LE : arg2'=0, arg4'=1+3*x30, arg1'=-1, arg3'=arg2, (arg2-3*x30 > 0 /\ 3*x30 > 0 /\ arg1 > 0), cost: 1+3*x30
  17: f1_0_main_Load -> f563_0_mk_LE : arg2'=1-arg2+3*x30, arg4'=arg2, arg1'=-arg2+3*x30, arg3'=arg2, (-2+arg2 >= 0 /\ 2-arg2+3*x30 > 0 /\ arg1 > 0), cost: arg2
   4: __init -> f1_0_main_Load : arg2'=arg2P4, arg4'=arg4P4, arg1'=arg1P4, arg3'=arg3P4, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
  <empty>


Computing asymptotic complexity

Proved the following lower bound
Complexity:  Unknown
Cpx degree: ?

Solved cost: 0
Rule cost:   0

