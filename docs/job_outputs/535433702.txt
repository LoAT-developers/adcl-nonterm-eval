WORST_CASE(Omega(0),?)

Initial ITS
Start location: __init
   0: f1_0_main_Load -> f213_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ 1+arg3P0 > 0 /\ 1+arg2P0 > 0), cost: 1
   1: f213_0_main_LE -> f227_0_main_LE : arg2'=arg2P1, arg1'=arg1P1, arg3'=arg3P1, (arg2-arg1P1 == 0 /\ arg3-arg3P1 == 0 /\ -arg2P1+arg1 == 0 /\ -arg2+arg3 < 0), cost: 1
   2: f227_0_main_LE -> f213_0_main_LE : arg2'=arg2P2, arg1'=arg1P2, arg3'=arg3P2, (arg3-arg3P2 == 0 /\ arg2-arg1P2 == 0 /\ arg2-arg3 <= 0 /\ -1-arg2P2+arg1 == 0), cost: 1
   3: f227_0_main_LE -> f227_0_main_LE : arg2'=arg2P3, arg1'=arg1P3, arg3'=arg3P3, (-arg1P3+arg1 == 0 /\ -arg3P3+arg3 == 0 /\ -arg2+arg3 < 0 /\ -1-arg2P3+arg2 == 0), cost: 1
   4: __init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, arg3'=arg3P4, TRUE, cost: 1


Applied preprocessing
Original rule:
f213_0_main_LE -> f227_0_main_LE : arg2'=arg2P1, arg1'=arg1P1, arg3'=arg3P1, (arg2-arg1P1 == 0 /\ arg3-arg3P1 == 0 /\ -arg2P1+arg1 == 0 /\ -arg2+arg3 < 0), cost: 1
New rule:
f213_0_main_LE -> f227_0_main_LE : arg2'=arg1, arg1'=arg2, arg2-arg3 > 0, cost: 1

Applied preprocessing
Original rule:
f227_0_main_LE -> f213_0_main_LE : arg2'=arg2P2, arg1'=arg1P2, arg3'=arg3P2, (arg3-arg3P2 == 0 /\ arg2-arg1P2 == 0 /\ arg2-arg3 <= 0 /\ -1-arg2P2+arg1 == 0), cost: 1
New rule:
f227_0_main_LE -> f213_0_main_LE : arg2'=-1+arg1, arg1'=arg2, arg2-arg3 <= 0, cost: 1

Applied preprocessing
Original rule:
f227_0_main_LE -> f227_0_main_LE : arg2'=arg2P3, arg1'=arg1P3, arg3'=arg3P3, (-arg1P3+arg1 == 0 /\ -arg3P3+arg3 == 0 /\ -arg2+arg3 < 0 /\ -1-arg2P3+arg2 == 0), cost: 1
New rule:
f227_0_main_LE -> f227_0_main_LE : arg2'=-1+arg2, arg2-arg3 > 0, cost: 1

Simplified rules
Start location: __init
   0: f1_0_main_Load -> f213_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ 1+arg3P0 > 0 /\ 1+arg2P0 > 0), cost: 1
   5: f213_0_main_LE -> f227_0_main_LE : arg2'=arg1, arg1'=arg2, arg2-arg3 > 0, cost: 1
   6: f227_0_main_LE -> f213_0_main_LE : arg2'=-1+arg1, arg1'=arg2, arg2-arg3 <= 0, cost: 1
   7: f227_0_main_LE -> f227_0_main_LE : arg2'=-1+arg2, arg2-arg3 > 0, cost: 1
   4: __init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, arg3'=arg3P4, TRUE, cost: 1


Applied acceleration
Original rule:
f227_0_main_LE -> f227_0_main_LE : arg2'=-1+arg2, arg2-arg3 > 0, cost: 1
New rule:
f227_0_main_LE -> f227_0_main_LE : arg2'=-n+arg2, (n >= 0 /\ 1-n+arg2-arg3 > 0), cost: n
Sub-proof via acceration calculus written to file:///tmp/tmpnam_ICJjdn.txt

Applied instantiation
Original rule:
f227_0_main_LE -> f227_0_main_LE : arg2'=-n+arg2, (n >= 0 /\ 1-n+arg2-arg3 > 0), cost: n
New rule:
f227_0_main_LE -> f227_0_main_LE : arg2'=arg3, (1 > 0 /\ arg2-arg3 >= 0), cost: arg2-arg3

Applied simplification
Original rule:
f227_0_main_LE -> f227_0_main_LE : arg2'=arg3, (1 > 0 /\ arg2-arg3 >= 0), cost: arg2-arg3
New rule:
f227_0_main_LE -> f227_0_main_LE : arg2'=arg3, arg2-arg3 >= 0, cost: arg2-arg3

Applied deletion
Removed the following rules: 7

Accelerated simple loops
Start location: __init
   0: f1_0_main_Load -> f213_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ 1+arg3P0 > 0 /\ 1+arg2P0 > 0), cost: 1
   5: f213_0_main_LE -> f227_0_main_LE : arg2'=arg1, arg1'=arg2, arg2-arg3 > 0, cost: 1
   6: f227_0_main_LE -> f213_0_main_LE : arg2'=-1+arg1, arg1'=arg2, arg2-arg3 <= 0, cost: 1
   9: f227_0_main_LE -> f227_0_main_LE : arg2'=arg3, arg2-arg3 >= 0, cost: arg2-arg3
   4: __init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, arg3'=arg3P4, TRUE, cost: 1


Applied chaining
First rule:
f213_0_main_LE -> f227_0_main_LE : arg2'=arg1, arg1'=arg2, arg2-arg3 > 0, cost: 1
Second rule:
f227_0_main_LE -> f227_0_main_LE : arg2'=arg3, arg2-arg3 >= 0, cost: arg2-arg3
New rule:
f213_0_main_LE -> f227_0_main_LE : arg2'=arg3, arg1'=arg2, (arg1-arg3 >= 0 /\ arg2-arg3 > 0), cost: 1+arg1-arg3

Applied deletion
Removed the following rules: 9

Chained accelerated rules with incoming rules
Start location: __init
   0: f1_0_main_Load -> f213_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ 1+arg3P0 > 0 /\ 1+arg2P0 > 0), cost: 1
   5: f213_0_main_LE -> f227_0_main_LE : arg2'=arg1, arg1'=arg2, arg2-arg3 > 0, cost: 1
  10: f213_0_main_LE -> f227_0_main_LE : arg2'=arg3, arg1'=arg2, (arg1-arg3 >= 0 /\ arg2-arg3 > 0), cost: 1+arg1-arg3
   6: f227_0_main_LE -> f213_0_main_LE : arg2'=-1+arg1, arg1'=arg2, arg2-arg3 <= 0, cost: 1
   4: __init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, arg3'=arg3P4, TRUE, cost: 1


Eliminating location f1_0_main_Load by chaining:

Applied chaining
First rule:
__init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, arg3'=arg3P4, TRUE, cost: 1
Second rule:
f1_0_main_Load -> f213_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ 1+arg3P0 > 0 /\ 1+arg2P0 > 0), cost: 1
New rule:
__init -> f213_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg2P4 > 0 /\ 1+arg1P0 > 0 /\ arg1P4 > 0 /\ 1+arg3P0 > 0 /\ 1+arg2P0 > 0), cost: 2

Applied deletion
Removed the following rules: 0 4

Eliminated locations on linear paths
Start location: __init
   5: f213_0_main_LE -> f227_0_main_LE : arg2'=arg1, arg1'=arg2, arg2-arg3 > 0, cost: 1
  10: f213_0_main_LE -> f227_0_main_LE : arg2'=arg3, arg1'=arg2, (arg1-arg3 >= 0 /\ arg2-arg3 > 0), cost: 1+arg1-arg3
   6: f227_0_main_LE -> f213_0_main_LE : arg2'=-1+arg1, arg1'=arg2, arg2-arg3 <= 0, cost: 1
  11: __init -> f213_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg2P4 > 0 /\ 1+arg1P0 > 0 /\ arg1P4 > 0 /\ 1+arg3P0 > 0 /\ 1+arg2P0 > 0), cost: 2


Eliminating location f227_0_main_LE by chaining:

Applied chaining
First rule:
f213_0_main_LE -> f227_0_main_LE : arg2'=arg1, arg1'=arg2, arg2-arg3 > 0, cost: 1
Second rule:
f227_0_main_LE -> f213_0_main_LE : arg2'=-1+arg1, arg1'=arg2, arg2-arg3 <= 0, cost: 1
New rule:
f213_0_main_LE -> f213_0_main_LE : arg2'=-1+arg2, arg1'=arg1, (arg1-arg3 <= 0 /\ arg2-arg3 > 0), cost: 2

Applied chaining
First rule:
f213_0_main_LE -> f227_0_main_LE : arg2'=arg3, arg1'=arg2, (arg1-arg3 >= 0 /\ arg2-arg3 > 0), cost: 1+arg1-arg3
Second rule:
f227_0_main_LE -> f213_0_main_LE : arg2'=-1+arg1, arg1'=arg2, arg2-arg3 <= 0, cost: 1
New rule:
f213_0_main_LE -> f213_0_main_LE : arg2'=-1+arg2, arg1'=arg3, (0 <= 0 /\ arg1-arg3 >= 0 /\ arg2-arg3 > 0), cost: 2+arg1-arg3

Applied simplification
Original rule:
f213_0_main_LE -> f213_0_main_LE : arg2'=-1+arg2, arg1'=arg3, (0 <= 0 /\ arg1-arg3 >= 0 /\ arg2-arg3 > 0), cost: 2+arg1-arg3
New rule:
f213_0_main_LE -> f213_0_main_LE : arg2'=-1+arg2, arg1'=arg3, (arg1-arg3 >= 0 /\ arg2-arg3 > 0), cost: 2+arg1-arg3

Applied deletion
Removed the following rules: 5 6 10

Eliminated locations on tree-shaped paths
Start location: __init
  12: f213_0_main_LE -> f213_0_main_LE : arg2'=-1+arg2, arg1'=arg1, (arg1-arg3 <= 0 /\ arg2-arg3 > 0), cost: 2
  13: f213_0_main_LE -> f213_0_main_LE : arg2'=-1+arg2, arg1'=arg3, (arg1-arg3 >= 0 /\ arg2-arg3 > 0), cost: 2+arg1-arg3
  11: __init -> f213_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg2P4 > 0 /\ 1+arg1P0 > 0 /\ arg1P4 > 0 /\ 1+arg3P0 > 0 /\ 1+arg2P0 > 0), cost: 2


Applied simplification
Original rule:
f213_0_main_LE -> f213_0_main_LE : arg2'=-1+arg2, arg1'=arg1, (arg1-arg3 <= 0 /\ arg2-arg3 > 0), cost: 2
New rule:
f213_0_main_LE -> f213_0_main_LE : arg2'=-1+arg2, (arg1-arg3 <= 0 /\ arg2-arg3 > 0), cost: 2

Simplified simple loops
Start location: __init
  13: f213_0_main_LE -> f213_0_main_LE : arg2'=-1+arg2, arg1'=arg3, (arg1-arg3 >= 0 /\ arg2-arg3 > 0), cost: 2+arg1-arg3
  14: f213_0_main_LE -> f213_0_main_LE : arg2'=-1+arg2, (arg1-arg3 <= 0 /\ arg2-arg3 > 0), cost: 2
  11: __init -> f213_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg2P4 > 0 /\ 1+arg1P0 > 0 /\ arg1P4 > 0 /\ 1+arg3P0 > 0 /\ 1+arg2P0 > 0), cost: 2


Applied acceleration
Original rule:
f213_0_main_LE -> f213_0_main_LE : arg2'=-1+arg2, arg1'=arg3, (arg1-arg3 >= 0 /\ arg2-arg3 > 0), cost: 2+arg1-arg3
New rule:
f213_0_main_LE -> f213_0_main_LE : arg2'=arg2-n0, arg1'=arg3, (1+arg2-n0-arg3 > 0 /\ arg1-arg3 >= 0 /\ -1+n0 >= 0), cost: 2*n0
Sub-proof via acceration calculus written to file:///tmp/tmpnam_DKpeBb.txt

Applied instantiation
Original rule:
f213_0_main_LE -> f213_0_main_LE : arg2'=arg2-n0, arg1'=arg3, (1+arg2-n0-arg3 > 0 /\ arg1-arg3 >= 0 /\ -1+n0 >= 0), cost: 2*n0
New rule:
f213_0_main_LE -> f213_0_main_LE : arg2'=arg3, arg1'=arg3, (1 > 0 /\ arg1-arg3 >= 0 /\ -1+arg2-arg3 >= 0), cost: 2*arg2-2*arg3

Applied acceleration
Original rule:
f213_0_main_LE -> f213_0_main_LE : arg2'=-1+arg2, (arg1-arg3 <= 0 /\ arg2-arg3 > 0), cost: 2
New rule:
f213_0_main_LE -> f213_0_main_LE : arg2'=arg2-n1, (n1 >= 0 /\ -arg1+arg3 >= 0 /\ 1+arg2-n1-arg3 > 0), cost: 2*n1
Sub-proof via acceration calculus written to file:///tmp/tmpnam_LIOeGP.txt

Applied instantiation
Original rule:
f213_0_main_LE -> f213_0_main_LE : arg2'=arg2-n1, (n1 >= 0 /\ -arg1+arg3 >= 0 /\ 1+arg2-n1-arg3 > 0), cost: 2*n1
New rule:
f213_0_main_LE -> f213_0_main_LE : arg2'=arg3, (1 > 0 /\ -arg1+arg3 >= 0 /\ arg2-arg3 >= 0), cost: 2*arg2-2*arg3

Applied simplification
Original rule:
f213_0_main_LE -> f213_0_main_LE : arg2'=arg3, arg1'=arg3, (1 > 0 /\ arg1-arg3 >= 0 /\ -1+arg2-arg3 >= 0), cost: 2*arg2-2*arg3
New rule:
f213_0_main_LE -> f213_0_main_LE : arg2'=arg3, arg1'=arg3, (arg1-arg3 >= 0 /\ -1+arg2-arg3 >= 0), cost: 2*arg2-2*arg3

Applied simplification
Original rule:
f213_0_main_LE -> f213_0_main_LE : arg2'=arg3, (1 > 0 /\ -arg1+arg3 >= 0 /\ arg2-arg3 >= 0), cost: 2*arg2-2*arg3
New rule:
f213_0_main_LE -> f213_0_main_LE : arg2'=arg3, (-arg1+arg3 >= 0 /\ arg2-arg3 >= 0), cost: 2*arg2-2*arg3

Applied deletion
Removed the following rules: 13 14

Accelerated simple loops
Start location: __init
  17: f213_0_main_LE -> f213_0_main_LE : arg2'=arg3, arg1'=arg3, (arg1-arg3 >= 0 /\ -1+arg2-arg3 >= 0), cost: 2*arg2-2*arg3
  18: f213_0_main_LE -> f213_0_main_LE : arg2'=arg3, (-arg1+arg3 >= 0 /\ arg2-arg3 >= 0), cost: 2*arg2-2*arg3
  11: __init -> f213_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg2P4 > 0 /\ 1+arg1P0 > 0 /\ arg1P4 > 0 /\ 1+arg3P0 > 0 /\ 1+arg2P0 > 0), cost: 2


Applied chaining
First rule:
__init -> f213_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg2P4 > 0 /\ 1+arg1P0 > 0 /\ arg1P4 > 0 /\ 1+arg3P0 > 0 /\ 1+arg2P0 > 0), cost: 2
Second rule:
f213_0_main_LE -> f213_0_main_LE : arg2'=arg3, arg1'=arg3, (arg1-arg3 >= 0 /\ -1+arg2-arg3 >= 0), cost: 2*arg2-2*arg3
New rule:
__init -> f213_0_main_LE : arg2'=arg3P0, arg1'=arg3P0, arg3'=arg3P0, (-1+arg2P0-arg3P0 >= 0 /\ 1+arg3P0 > 0), cost: 2+2*arg2P0-2*arg3P0

Applied chaining
First rule:
__init -> f213_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg2P4 > 0 /\ 1+arg1P0 > 0 /\ arg1P4 > 0 /\ 1+arg3P0 > 0 /\ 1+arg2P0 > 0), cost: 2
Second rule:
f213_0_main_LE -> f213_0_main_LE : arg2'=arg3, (-arg1+arg3 >= 0 /\ arg2-arg3 >= 0), cost: 2*arg2-2*arg3
New rule:
__init -> f213_0_main_LE : arg2'=arg3P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ arg2P0-arg3P0 >= 0 /\ -arg1P0+arg3P0 >= 0), cost: 2+2*arg2P0-2*arg3P0

Applied deletion
Removed the following rules: 17 18

Chained accelerated rules with incoming rules
Start location: __init
  11: __init -> f213_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg2P4 > 0 /\ 1+arg1P0 > 0 /\ arg1P4 > 0 /\ 1+arg3P0 > 0 /\ 1+arg2P0 > 0), cost: 2
  19: __init -> f213_0_main_LE : arg2'=arg3P0, arg1'=arg3P0, arg3'=arg3P0, (-1+arg2P0-arg3P0 >= 0 /\ 1+arg3P0 > 0), cost: 2+2*arg2P0-2*arg3P0
  20: __init -> f213_0_main_LE : arg2'=arg3P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ arg2P0-arg3P0 >= 0 /\ -arg1P0+arg3P0 >= 0), cost: 2+2*arg2P0-2*arg3P0


Removed unreachable locations and irrelevant leafs
Start location: __init
  <empty>


Computing asymptotic complexity

Proved the following lower bound
Complexity:  Unknown
Cpx degree: ?

Solved cost: 0
Rule cost:   0

