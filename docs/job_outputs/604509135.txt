YES

Solver Timeout: 4
Global Timeout: 300
No parsing errors!
Init Location: 0
Transitions:
<l0, l5, true>
<l1, l2, (undef3 > ~(1)) /\ (arg2 > 0) /\ (undef1 <= arg1) /\ (arg1 > 0) /\ (undef1 > 0) /\ (undef2 > 2), par{arg1 -> undef1, arg2 -> undef2}>
<l1, l2, (undef6 > ~(1)) /\ (arg2 > 0) /\ (undef4 <= arg1) /\ ((undef5 - 1) <= arg1) /\ (arg1 > 0) /\ (undef4 > 0) /\ (undef5 > 1), par{arg1 -> undef4, arg2 -> undef5}>
<l2, l3, (undef8 <= arg2) /\ (undef9 > 0) /\ (arg1 > 0) /\ (arg2 > 0) /\ (undef8 > 0), par{arg1 -> 0, arg2 -> undef8}>
<l1, l4, (undef10 > ~(1)) /\ (arg2 > 0) /\ (arg1 > 0), par{arg1 -> undef10, arg2 -> undef11}>
<l4, l4, (arg1 > 1) /\ ((arg1 - 1) < arg1), par{arg1 -> (arg1 - 1), arg2 -> undef13}>
<l3, l3, ((undef15 + 7) <= arg2) /\ (arg2 > 6) /\ (undef15 > ~(1)) /\ (0 = arg1), par{arg1 -> 1, arg2 -> undef15}>
<l3, l3, ((undef17 - 2) <= arg2) /\ (arg2 > 0) /\ (undef17 > 2) /\ (1 = arg1), par{arg1 -> 2, arg2 -> undef17}>
<l3, l3, ((undef19 - 4) <= arg2) /\ (arg2 > 0) /\ (undef19 > 4) /\ (2 = arg1), par{arg1 -> 0, arg2 -> undef19}>
<l5, l1, true, par{arg1 -> undef20, arg2 -> undef21}>

Fresh variables:
undef1, undef2, undef3, undef4, undef5, undef6, undef8, undef9, undef10, undef11, undef13, undef15, undef17, undef19, undef20, undef21, 

Undef variables:
undef1, undef2, undef3, undef4, undef5, undef6, undef8, undef9, undef10, undef11, undef13, undef15, undef17, undef19, undef20, undef21, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l3, (undef3 > ~(1)) /\ (undef21 > 0) /\ (undef1 <= undef20) /\ (undef20 > 0) /\ (undef1 > 0) /\ (undef2 > 2) /\ (undef8 <= undef2) /\ (undef9 > 0) /\ (undef1 > 0) /\ (undef2 > 0) /\ (undef8 > 0), par{arg1 -> 0, arg2 -> undef8}>
<l0, l3, (undef6 > ~(1)) /\ (undef21 > 0) /\ (undef4 <= undef20) /\ ((undef5 - 1) <= undef20) /\ (undef20 > 0) /\ (undef4 > 0) /\ (undef5 > 1) /\ (undef8 <= undef5) /\ (undef9 > 0) /\ (undef4 > 0) /\ (undef5 > 0) /\ (undef8 > 0), par{arg1 -> 0, arg2 -> undef8}>
<l0, l4, (undef10 > ~(1)) /\ (undef21 > 0) /\ (undef20 > 0), par{arg1 -> undef10, arg2 -> undef11}>
<l3, l3, ((undef15 + 7) <= arg2) /\ (arg2 > 6) /\ (undef15 > ~(1)) /\ (0 = arg1), par{arg1 -> 1, arg2 -> undef15}>
<l3, l3, ((undef17 - 2) <= arg2) /\ (arg2 > 0) /\ (undef17 > 2) /\ (1 = arg1), par{arg1 -> 2, arg2 -> undef17}>
<l3, l3, ((undef19 - 4) <= arg2) /\ (arg2 > 0) /\ (undef19 > 4) /\ (2 = arg1), par{arg1 -> 0, arg2 -> undef19}>
<l4, l4, (arg1 > 1) /\ ((arg1 - 1) < arg1), par{arg1 -> (arg1 - 1), arg2 -> undef13}>

Fresh variables:
undef1, undef2, undef3, undef4, undef5, undef6, undef8, undef9, undef10, undef11, undef13, undef15, undef17, undef19, undef20, undef21, 

Undef variables:
undef1, undef2, undef3, undef4, undef5, undef6, undef8, undef9, undef10, undef11, undef13, undef15, undef17, undef19, undef20, undef21, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l4, l4, 2 <= arg1, {arg1 -> -1 + arg1, arg2 -> undef13, rest remain the same}>
Variables:
arg1, arg2

Graph 2:
Transitions:
<l3, l3, 0 <= undef15 /\ 7 <= arg2 /\ 7 + undef15 <= arg2 /\ arg1 = 0, {arg1 -> 1, arg2 -> undef15, rest remain the same}>
<l3, l3, 1 <= arg2 /\ undef17 <= 2 + arg2 /\ 3 <= undef17 /\ arg1 = 1, {arg1 -> 2, arg2 -> undef17, rest remain the same}>
<l3, l3, 1 <= arg2 /\ undef19 <= 4 + arg2 /\ 5 <= undef19 /\ arg1 = 2, {arg1 -> 0, arg2 -> undef19, rest remain the same}>
Variables:
arg1, arg2

Precedence: 
Graph 0

Graph 1
<l0, l4, 1 <= undef20 /\ 1 <= undef21 /\ 0 <= undef10, {arg1 -> undef10, arg2 -> undef11, rest remain the same}>

Graph 2
<l0, l3, 1 <= undef1 /\ 1 <= undef8 /\ 1 <= undef9 /\ 1 <= undef20 /\ 1 <= undef21 /\ undef1 <= undef20 /\ undef8 <= undef2 /\ 0 <= undef3 /\ 3 <= undef2, {arg1 -> 0, arg2 -> undef8, rest remain the same}>
<l0, l3, 1 <= undef4 /\ 1 <= undef8 /\ 1 <= undef9 /\ 1 <= undef20 /\ 1 <= undef21 /\ undef5 <= 1 + undef20 /\ undef4 <= undef20 /\ undef8 <= undef5 /\ 0 <= undef6 /\ 2 <= undef5, {arg1 -> 0, arg2 -> undef8, rest remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 3 , 2 )
( 4 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.000974

Checking conditional termination of SCC {l4}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000314s
[33mRanking function: [36m-2 + arg1[0m
New Graphs: 
Proving termination of subgraph 2
Checking unfeasibility...
Time used: 0.012091

Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.001038s

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.007364s
[33mPiecewise ranking function: [36mmin(-122 + 132*arg1 + 19*arg2,66 - 47*arg1 + 19*arg2)[0m
New Graphs: 
Transitions:
<l3, l3, 1 <= arg2 /\ undef17 <= 2 + arg2 /\ 3 <= undef17 /\ arg1 = 1, {arg1 -> 2, arg2 -> undef17, rest remain the same}>
<l3, l3, 1 <= arg2 /\ undef19 <= 4 + arg2 /\ 5 <= undef19 /\ arg1 = 2, {arg1 -> 0, arg2 -> undef19, rest remain the same}>
Variables:
arg1, arg2
Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000589s

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.003247s
[33mPiecewise ranking function: [36mmin(8 - 9*arg1 + arg2,-14 + 19*arg1 + arg2)[0m
New Graphs: 
Transitions:
<l3, l3, 1 <= arg2 /\ undef19 <= 4 + arg2 /\ 5 <= undef19 /\ arg1 = 2, {arg1 -> 0, arg2 -> undef19, rest remain the same}>
Variables:
arg1, arg2
Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000500s
[33mRanking function: [36m-1 + (1 / 2)*arg1[0m
New Graphs: 
[32mProgram Terminates[0m
