unknown

Initial ITS

Start location: [1]
Program variables: i n x
   0: [1] -> [2] : x'=nondet, T, cost: 1
   1: [2] -> [3] : i'=nondet1, T, cost: 1
   2: [3] -> [4] : n'=nondet2, T, cost: 1
   3: [4] -> [5] : -n+x < 0, cost: 1
   7: [4] -> [8] : -n+x >= 0, cost: 1
   4: [5] -> [6] : i'=1+i, T, cost: 1
   5: [6] -> [7] : x'=1+x, T, cost: 1
   6: [7] -> [4] : T, cost: 1

Chained Linear Paths

Start location: [1]
Program variables: i n x
   9: [1] -> [4] : i'=nondet1, n'=nondet2, x'=nondet, T, cost: 1
   7: [4] -> [8] : -n+x >= 0, cost: 1
  12: [4] -> [4] : i'=1+i, x'=1+x, -n+x < 0, cost: 1

	Eliminating location [2] by chaining:

	Applied chaining

	First rule:
	[1] -> [2] : x'=nondet, T, cost: 1
	Second rule:
	[2] -> [3] : i'=nondet1, T, cost: 1
	New rule:
	[1] -> [3] : i'=nondet1, x'=nondet, T, cost: 1
	
	Applied deletion

	Removed the following rules: 0 1
	
	Eliminating location [3] by chaining:

	Applied chaining

	First rule:
	[1] -> [3] : i'=nondet1, x'=nondet, T, cost: 1
	Second rule:
	[3] -> [4] : n'=nondet2, T, cost: 1
	New rule:
	[1] -> [4] : i'=nondet1, n'=nondet2, x'=nondet, T, cost: 1
	
	Applied deletion

	Removed the following rules: 2 8
	
	Eliminating location [5] by chaining:

	Applied chaining

	First rule:
	[4] -> [5] : -n+x < 0, cost: 1
	Second rule:
	[5] -> [6] : i'=1+i, T, cost: 1
	New rule:
	[4] -> [6] : i'=1+i, -n+x < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 3 4
	
	Eliminating location [6] by chaining:

	Applied chaining

	First rule:
	[4] -> [6] : i'=1+i, -n+x < 0, cost: 1
	Second rule:
	[6] -> [7] : x'=1+x, T, cost: 1
	New rule:
	[4] -> [7] : i'=1+i, x'=1+x, -n+x < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 5 10
	
	Eliminating location [7] by chaining:

	Applied chaining

	First rule:
	[4] -> [7] : i'=1+i, x'=1+x, -n+x < 0, cost: 1
	Second rule:
	[7] -> [4] : T, cost: 1
	New rule:
	[4] -> [4] : i'=1+i, x'=1+x, -n+x < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 6 11

Step with 9

	Trace

	9[T]
	
	Blocked

	[{}, {}]

Step with 7

	Trace

	9[T], 7[(-n+x >= 0)]
	
	Blocked

	[{}, {}, {}]

Backtrack

	Trace

	9[T]
	
	Blocked

	[{}, {7[T]}]

Step with 12

	Trace

	9[T], 12[(-n+x < 0)]
	
	Blocked

	[{}, {7[T]}, {}]

Accelerate

Start location: [1]
Program variables: i n x
   9: [1] -> [4] : i'=nondet1, n'=nondet2, x'=nondet, T, cost: 1
   7: [4] -> [8] : -n+x >= 0, cost: 1
  12: [4] -> [4] : i'=1+i, x'=1+x, -n+x < 0, cost: 1
  13: [4] -> [4] : i'=n4+i, x'=n4+x, (-1+n4 >= 0 /\ 1+n-n4-x > 0), cost: 1

	Loop Acceleration

	Original rule:
	[4] -> [4] : i'=1+i, x'=1+x, (-n+x < 0), cost: 1
	New rule:
	[4] -> [4] : i'=n4+i, x'=n4+x, (-1+n4 >= 0 /\ 1+n-n4-x > 0), cost: 1

		n-x > 0 [0]: montonic decrease yields 1+n-n4-x > 0
		
		n-x > 0 [1]: eventual increase yields (1 <= 0 /\ n-x > 0)
		
		Replacement map: {n-x > 0 -> 1+n-n4-x > 0}

	Trace

	9[T], 13[(-1+n4 >= 0 /\ 1+n-n4-x > 0)]
	
	Blocked

	[{}, {7[T]}, {12[T], 13[T]}]

Step with 7

	Trace

	9[T], 13[(-1+n4 >= 0 /\ 1+n-n4-x > 0)], 7[(-n+x >= 0)]
	
	Blocked

	[{}, {7[T]}, {12[T], 13[T]}, {}]

Backtrack

	Trace

	9[T], 13[(-1+n4 >= 0 /\ 1+n-n4-x > 0)]
	
	Blocked

	[{}, {7[T]}, {7[T], 12[T], 13[T]}]

Backtrack

	Trace

	9[T]
	
	Blocked

	[{}, {7[T], 13[T]}]

Step with 12

	Trace

	9[T], 12[(-n+x < 0)]
	
	Blocked

	[{}, {7[T], 13[T]}, {}]

Covered

	Trace

	9[T]
	
	Blocked

	[{}, {7[T], 12[T], 13[T]}]

Backtrack

	Trace

	Blocked

	[{9[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
