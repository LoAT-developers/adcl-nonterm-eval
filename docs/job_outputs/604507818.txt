unknown

Initial ITS

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5
   0: f289_0_appendNewList_Return -> f540_0_random_ArrayAccess : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, arg5'=arg5p1, (-3+arg2 > 0 /\ arg1 > 0 /\ -arg4p1+arg5 == 0 /\ -arg3p1 == 0 /\ 2+arg5-arg2 <= 0 /\ arg1p1-arg2 <= 0 /\ -arg4 == 0 /\ -3+arg1p1 > 0), cost: 1
   2: f540_0_random_ArrayAccess -> f673_0_main_InvokeMethod : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, arg4'=arg4p3, arg5'=arg5p3, (-arg3 == 0 /\ -3+arg1 > 0 /\ x51 > 0 /\ -arg5p3+arg4 == 0 /\ 3-arg1+arg1p3 <= 0 /\ x51-arg2 < 0 /\ -3+arg2p3 > 0 /\ 2-arg1+arg4 <= 0 /\ arg1p3 > 0 /\ 1+x52 > 0), cost: 1
   5: f540_0_random_ArrayAccess -> f422_0_random_ArrayAccess : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, arg4'=arg4p6, arg5'=arg5p6, (arg2p6 > 0 /\ 1+arg2 > 0 /\ x59-arg2 < 0 /\ -arg3 == 0 /\ -3+arg1 > 0 /\ x59 > 0 /\ 3+arg2p6-arg1 <= 0 /\ 2-arg1+arg4 <= 0 /\ 1+arg1p6 > 0), cost: 1
   1: f1_0_main_Load -> f540_0_random_ArrayAccess : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, arg4'=arg4p2, arg5'=arg5p2, (arg1 > 0 /\ -3+arg1p2 > 0 /\ -arg3p2 == 0 /\ -arg2p2+arg2 == 0), cost: 1
   4: f1_0_main_Load -> f422_0_random_ArrayAccess : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, arg4'=arg4p5, arg5'=arg5p5, (arg2p5 > 0 /\ 1+arg2 > 0 /\ arg2p5-arg1 <= 0 /\ arg1 > 0 /\ 1-arg1p5 == 0), cost: 1
   3: f673_0_main_InvokeMethod -> f760_0_copy_NONNULL : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, arg4'=arg4p4, arg5'=arg5p4, (-3+arg1p4 > 0 /\ arg3 > 0 /\ -3+arg2 > 0 /\ arg1p4-arg2 <= 0 /\ arg1 > 0 /\ 4+arg4-arg2 <= 0 /\ 2+arg5-arg2 <= 0 /\ arg3-arg2p4 == 0), cost: 1
   7: f760_0_copy_NONNULL -> f760_0_copy_NONNULL : arg1'=arg1p8, arg2'=arg2p8, arg3'=arg3p8, arg4'=arg4p8, arg5'=arg5p8, (arg1 > 0 /\ -arg2p8+arg2 == 0 /\ 1+arg1p8 > 0 /\ 1-arg1+arg1p8 <= 0 /\ arg2 > 0), cost: 1
   6: f422_0_random_ArrayAccess -> f422_0_random_ArrayAccess : arg1'=arg1p7, arg2'=arg2p7, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, (-1+arg1-arg1p7 == 0 /\ x37-x36 < 0 /\ 1+x41 > 0 /\ 1+x37 > 0 /\ -1+arg1 > 0 /\ arg2p7 > 0 /\ 1+x36 > 0 /\ -1 < 0 /\ arg2p7-arg2 <= 0 /\ arg2 > 0), cost: 1
   8: __init -> f1_0_main_Load : arg1'=arg1p9, arg2'=arg2p9, arg3'=arg3p9, arg4'=arg4p9, arg5'=arg5p9, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5
   0: f289_0_appendNewList_Return -> f540_0_random_ArrayAccess : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, arg5'=arg5p1, (-3+arg2 > 0 /\ arg1 > 0 /\ -arg4p1+arg5 == 0 /\ -arg3p1 == 0 /\ 2+arg5-arg2 <= 0 /\ arg1p1-arg2 <= 0 /\ -arg4 == 0 /\ -3+arg1p1 > 0), cost: 1
   5: f540_0_random_ArrayAccess -> f422_0_random_ArrayAccess : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, arg4'=arg4p6, arg5'=arg5p6, (arg2p6 > 0 /\ 1+arg2 > 0 /\ x59-arg2 < 0 /\ -arg3 == 0 /\ -3+arg1 > 0 /\ x59 > 0 /\ 3+arg2p6-arg1 <= 0 /\ 2-arg1+arg4 <= 0 /\ 1+arg1p6 > 0), cost: 1
   9: f540_0_random_ArrayAccess -> f760_0_copy_NONNULL : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, arg4'=arg4p4, arg5'=arg5p4, (-3+arg1p4 > 0 /\ arg3p3-arg2p4 == 0 /\ -arg2p3+arg1p4 <= 0 /\ -arg3 == 0 /\ -3+arg1 > 0 /\ x51 > 0 /\ -arg5p3+arg4 == 0 /\ 3-arg1+arg1p3 <= 0 /\ arg3p3 > 0 /\ x51-arg2 < 0 /\ -3+arg2p3 > 0 /\ 2-arg1+arg4 <= 0 /\ arg1p3 > 0 /\ 2+arg5p3-arg2p3 <= 0 /\ 1+x52 > 0 /\ 4-arg2p3+arg4p3 <= 0), cost: 1
   1: f1_0_main_Load -> f540_0_random_ArrayAccess : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, arg4'=arg4p2, arg5'=arg5p2, (arg1 > 0 /\ -3+arg1p2 > 0 /\ -arg3p2 == 0 /\ -arg2p2+arg2 == 0), cost: 1
   4: f1_0_main_Load -> f422_0_random_ArrayAccess : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, arg4'=arg4p5, arg5'=arg5p5, (arg2p5 > 0 /\ 1+arg2 > 0 /\ arg2p5-arg1 <= 0 /\ arg1 > 0 /\ 1-arg1p5 == 0), cost: 1
   7: f760_0_copy_NONNULL -> f760_0_copy_NONNULL : arg1'=arg1p8, arg2'=arg2p8, arg3'=arg3p8, arg4'=arg4p8, arg5'=arg5p8, (arg1 > 0 /\ -arg2p8+arg2 == 0 /\ 1+arg1p8 > 0 /\ 1-arg1+arg1p8 <= 0 /\ arg2 > 0), cost: 1
   6: f422_0_random_ArrayAccess -> f422_0_random_ArrayAccess : arg1'=arg1p7, arg2'=arg2p7, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, (-1+arg1-arg1p7 == 0 /\ x37-x36 < 0 /\ 1+x41 > 0 /\ 1+x37 > 0 /\ -1+arg1 > 0 /\ arg2p7 > 0 /\ 1+x36 > 0 /\ -1 < 0 /\ arg2p7-arg2 <= 0 /\ arg2 > 0), cost: 1
   8: __init -> f1_0_main_Load : arg1'=arg1p9, arg2'=arg2p9, arg3'=arg3p9, arg4'=arg4p9, arg5'=arg5p9, T, cost: 1

	Eliminating location f673_0_main_InvokeMethod by chaining:

	Applied chaining

	First rule:
	f540_0_random_ArrayAccess -> f673_0_main_InvokeMethod : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, arg4'=arg4p3, arg5'=arg5p3, (-arg3 == 0 /\ -3+arg1 > 0 /\ x51 > 0 /\ -arg5p3+arg4 == 0 /\ 3-arg1+arg1p3 <= 0 /\ x51-arg2 < 0 /\ -3+arg2p3 > 0 /\ 2-arg1+arg4 <= 0 /\ arg1p3 > 0 /\ 1+x52 > 0), cost: 1
	Second rule:
	f673_0_main_InvokeMethod -> f760_0_copy_NONNULL : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, arg4'=arg4p4, arg5'=arg5p4, (-3+arg1p4 > 0 /\ arg3 > 0 /\ -3+arg2 > 0 /\ arg1p4-arg2 <= 0 /\ arg1 > 0 /\ 4+arg4-arg2 <= 0 /\ 2+arg5-arg2 <= 0 /\ arg3-arg2p4 == 0), cost: 1
	New rule:
	f540_0_random_ArrayAccess -> f760_0_copy_NONNULL : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, arg4'=arg4p4, arg5'=arg5p4, (-3+arg1p4 > 0 /\ arg3p3-arg2p4 == 0 /\ -arg2p3+arg1p4 <= 0 /\ -arg3 == 0 /\ -3+arg1 > 0 /\ x51 > 0 /\ -arg5p3+arg4 == 0 /\ 3-arg1+arg1p3 <= 0 /\ arg3p3 > 0 /\ x51-arg2 < 0 /\ -3+arg2p3 > 0 /\ 2-arg1+arg4 <= 0 /\ arg1p3 > 0 /\ 2+arg5p3-arg2p3 <= 0 /\ 1+x52 > 0 /\ 4-arg2p3+arg4p3 <= 0), cost: 1
	
	Applied deletion

	Removed the following rules: 2 3

Simplified Transitions

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5
  10: f289_0_appendNewList_Return -> f540_0_random_ArrayAccess : arg1'=arg1p1, arg2'=arg2p1, arg3'=0, arg4'=arg5, arg5'=arg5p1, (-3+arg2 > 0 /\ arg1 > 0 /\ 2+arg5-arg2 <= 0 /\ arg1p1-arg2 <= 0 /\ -arg4 == 0 /\ -3+arg1p1 > 0), cost: 1
  13: f540_0_random_ArrayAccess -> f422_0_random_ArrayAccess : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, arg4'=arg4p6, arg5'=arg5p6, (arg2p6 > 0 /\ 1+arg2 > 0 /\ -arg3 == 0 /\ -3+arg1 > 0 /\ 2-arg2 <= 0 /\ 3+arg2p6-arg1 <= 0 /\ 2-arg1+arg4 <= 0 /\ 1+arg1p6 > 0), cost: 1
  16: f540_0_random_ArrayAccess -> f760_0_copy_NONNULL : arg1'=arg1p4, arg2'=arg3p3, arg3'=arg3p4, arg4'=arg4p4, arg5'=arg5p4, (-3+arg1p4 > 0 /\ 4-arg1 <= 0 /\ -arg3 == 0 /\ -3+arg1 > 0 /\ arg3p3 > 0 /\ 2-arg2 <= 0 /\ 2-arg1+arg4 <= 0), cost: 1
  11: f1_0_main_Load -> f540_0_random_ArrayAccess : arg1'=arg1p2, arg3'=0, arg4'=arg4p2, arg5'=arg5p2, (arg1 > 0 /\ -3+arg1p2 > 0), cost: 1
  12: f1_0_main_Load -> f422_0_random_ArrayAccess : arg1'=1, arg2'=arg2p5, arg3'=arg3p5, arg4'=arg4p5, arg5'=arg5p5, (arg2p5 > 0 /\ 1+arg2 > 0 /\ arg2p5-arg1 <= 0 /\ arg1 > 0), cost: 1
  15: f760_0_copy_NONNULL -> f760_0_copy_NONNULL : arg1'=arg1p8, arg3'=arg3p8, arg4'=arg4p8, arg5'=arg5p8, (arg1 > 0 /\ 1+arg1p8 > 0 /\ 1-arg1+arg1p8 <= 0 /\ arg2 > 0), cost: 1
  14: f422_0_random_ArrayAccess -> f422_0_random_ArrayAccess : arg1'=-1+arg1, arg2'=arg2p7, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, (-1+arg1 > 0 /\ arg2p7 > 0 /\ arg2p7-arg2 <= 0 /\ arg2 > 0), cost: 1
   8: __init -> f1_0_main_Load : arg1'=arg1p9, arg2'=arg2p9, arg3'=arg3p9, arg4'=arg4p9, arg5'=arg5p9, T, cost: 1

	Propagated Equalities

	Original rule:
	f289_0_appendNewList_Return -> f540_0_random_ArrayAccess : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, arg5'=arg5p1, (-3+arg2 > 0 /\ arg1 > 0 /\ -arg4p1+arg5 == 0 /\ -arg3p1 == 0 /\ 2+arg5-arg2 <= 0 /\ arg1p1-arg2 <= 0 /\ -arg4 == 0 /\ -3+arg1p1 > 0), cost: 1
	New rule:
	f289_0_appendNewList_Return -> f540_0_random_ArrayAccess : arg1'=arg1p1, arg2'=arg2p1, arg3'=0, arg4'=arg5, arg5'=arg5p1, (0 == 0 /\ -3+arg2 > 0 /\ arg1 > 0 /\ 2+arg5-arg2 <= 0 /\ arg1p1-arg2 <= 0 /\ -arg4 == 0 /\ -3+arg1p1 > 0), cost: 1
	
		propagated equality arg4p1 = arg5
		
		propagated equality arg3p1 = 0
		
	Simplified Guard

	Original rule:
	f289_0_appendNewList_Return -> f540_0_random_ArrayAccess : arg1'=arg1p1, arg2'=arg2p1, arg3'=0, arg4'=arg5, arg5'=arg5p1, (0 == 0 /\ -3+arg2 > 0 /\ arg1 > 0 /\ 2+arg5-arg2 <= 0 /\ arg1p1-arg2 <= 0 /\ -arg4 == 0 /\ -3+arg1p1 > 0), cost: 1
	New rule:
	f289_0_appendNewList_Return -> f540_0_random_ArrayAccess : arg1'=arg1p1, arg2'=arg2p1, arg3'=0, arg4'=arg5, arg5'=arg5p1, (-3+arg2 > 0 /\ arg1 > 0 /\ 2+arg5-arg2 <= 0 /\ arg1p1-arg2 <= 0 /\ -arg4 == 0 /\ -3+arg1p1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f1_0_main_Load -> f540_0_random_ArrayAccess : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, arg4'=arg4p2, arg5'=arg5p2, (arg1 > 0 /\ -3+arg1p2 > 0 /\ -arg3p2 == 0 /\ -arg2p2+arg2 == 0), cost: 1
	New rule:
	f1_0_main_Load -> f540_0_random_ArrayAccess : arg1'=arg1p2, arg2'=arg2, arg3'=0, arg4'=arg4p2, arg5'=arg5p2, (0 == 0 /\ arg1 > 0 /\ -3+arg1p2 > 0), cost: 1
	
		propagated equality arg3p2 = 0
		
		propagated equality arg2p2 = arg2
		
	Simplified Guard

	Original rule:
	f1_0_main_Load -> f540_0_random_ArrayAccess : arg1'=arg1p2, arg2'=arg2, arg3'=0, arg4'=arg4p2, arg5'=arg5p2, (0 == 0 /\ arg1 > 0 /\ -3+arg1p2 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f540_0_random_ArrayAccess : arg1'=arg1p2, arg2'=arg2, arg3'=0, arg4'=arg4p2, arg5'=arg5p2, (arg1 > 0 /\ -3+arg1p2 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f1_0_main_Load -> f540_0_random_ArrayAccess : arg1'=arg1p2, arg2'=arg2, arg3'=0, arg4'=arg4p2, arg5'=arg5p2, (arg1 > 0 /\ -3+arg1p2 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f540_0_random_ArrayAccess : arg1'=arg1p2, arg3'=0, arg4'=arg4p2, arg5'=arg5p2, (arg1 > 0 /\ -3+arg1p2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f1_0_main_Load -> f422_0_random_ArrayAccess : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, arg4'=arg4p5, arg5'=arg5p5, (arg2p5 > 0 /\ 1+arg2 > 0 /\ arg2p5-arg1 <= 0 /\ arg1 > 0 /\ 1-arg1p5 == 0), cost: 1
	New rule:
	f1_0_main_Load -> f422_0_random_ArrayAccess : arg1'=1, arg2'=arg2p5, arg3'=arg3p5, arg4'=arg4p5, arg5'=arg5p5, (0 == 0 /\ arg2p5 > 0 /\ 1+arg2 > 0 /\ arg2p5-arg1 <= 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg1p5 = 1
		
	Simplified Guard

	Original rule:
	f1_0_main_Load -> f422_0_random_ArrayAccess : arg1'=1, arg2'=arg2p5, arg3'=arg3p5, arg4'=arg4p5, arg5'=arg5p5, (0 == 0 /\ arg2p5 > 0 /\ 1+arg2 > 0 /\ arg2p5-arg1 <= 0 /\ arg1 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f422_0_random_ArrayAccess : arg1'=1, arg2'=arg2p5, arg3'=arg3p5, arg4'=arg4p5, arg5'=arg5p5, (arg2p5 > 0 /\ 1+arg2 > 0 /\ arg2p5-arg1 <= 0 /\ arg1 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	f540_0_random_ArrayAccess -> f422_0_random_ArrayAccess : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, arg4'=arg4p6, arg5'=arg5p6, (arg2p6 > 0 /\ 1+arg2 > 0 /\ x59-arg2 < 0 /\ -arg3 == 0 /\ -3+arg1 > 0 /\ x59 > 0 /\ 3+arg2p6-arg1 <= 0 /\ 2-arg1+arg4 <= 0 /\ 1+arg1p6 > 0), cost: 1
	New rule:
	f540_0_random_ArrayAccess -> f422_0_random_ArrayAccess : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, arg4'=arg4p6, arg5'=arg5p6, (arg2p6 > 0 /\ 1+arg2 > 0 /\ -arg3 == 0 /\ -3+arg1 > 0 /\ 2-arg2 <= 0 /\ 3+arg2p6-arg1 <= 0 /\ 2-arg1+arg4 <= 0 /\ 1+arg1p6 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f422_0_random_ArrayAccess -> f422_0_random_ArrayAccess : arg1'=arg1p7, arg2'=arg2p7, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, (-1+arg1-arg1p7 == 0 /\ x37-x36 < 0 /\ 1+x41 > 0 /\ 1+x37 > 0 /\ -1+arg1 > 0 /\ arg2p7 > 0 /\ 1+x36 > 0 /\ -1 < 0 /\ arg2p7-arg2 <= 0 /\ arg2 > 0), cost: 1
	New rule:
	f422_0_random_ArrayAccess -> f422_0_random_ArrayAccess : arg1'=-1+arg1, arg2'=arg2p7, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, (0 == 0 /\ x37-x36 < 0 /\ 1+x41 > 0 /\ 1+x37 > 0 /\ -1+arg1 > 0 /\ arg2p7 > 0 /\ 1+x36 > 0 /\ -1 < 0 /\ arg2p7-arg2 <= 0 /\ arg2 > 0), cost: 1
	
		propagated equality arg1p7 = -1+arg1
		
	Simplified Guard

	Original rule:
	f422_0_random_ArrayAccess -> f422_0_random_ArrayAccess : arg1'=-1+arg1, arg2'=arg2p7, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, (0 == 0 /\ x37-x36 < 0 /\ 1+x41 > 0 /\ 1+x37 > 0 /\ -1+arg1 > 0 /\ arg2p7 > 0 /\ 1+x36 > 0 /\ -1 < 0 /\ arg2p7-arg2 <= 0 /\ arg2 > 0), cost: 1
	New rule:
	f422_0_random_ArrayAccess -> f422_0_random_ArrayAccess : arg1'=-1+arg1, arg2'=arg2p7, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, (x37-x36 < 0 /\ 1+x41 > 0 /\ 1+x37 > 0 /\ -1+arg1 > 0 /\ arg2p7 > 0 /\ 1+x36 > 0 /\ arg2p7-arg2 <= 0 /\ arg2 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	f422_0_random_ArrayAccess -> f422_0_random_ArrayAccess : arg1'=-1+arg1, arg2'=arg2p7, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, (x37-x36 < 0 /\ 1+x41 > 0 /\ 1+x37 > 0 /\ -1+arg1 > 0 /\ arg2p7 > 0 /\ 1+x36 > 0 /\ arg2p7-arg2 <= 0 /\ arg2 > 0), cost: 1
	New rule:
	f422_0_random_ArrayAccess -> f422_0_random_ArrayAccess : arg1'=-1+arg1, arg2'=arg2p7, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, (-1+arg1 > 0 /\ arg2p7 > 0 /\ arg2p7-arg2 <= 0 /\ arg2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f760_0_copy_NONNULL -> f760_0_copy_NONNULL : arg1'=arg1p8, arg2'=arg2p8, arg3'=arg3p8, arg4'=arg4p8, arg5'=arg5p8, (arg1 > 0 /\ -arg2p8+arg2 == 0 /\ 1+arg1p8 > 0 /\ 1-arg1+arg1p8 <= 0 /\ arg2 > 0), cost: 1
	New rule:
	f760_0_copy_NONNULL -> f760_0_copy_NONNULL : arg1'=arg1p8, arg2'=arg2, arg3'=arg3p8, arg4'=arg4p8, arg5'=arg5p8, (0 == 0 /\ arg1 > 0 /\ 1+arg1p8 > 0 /\ 1-arg1+arg1p8 <= 0 /\ arg2 > 0), cost: 1
	
		propagated equality arg2p8 = arg2
		
	Simplified Guard

	Original rule:
	f760_0_copy_NONNULL -> f760_0_copy_NONNULL : arg1'=arg1p8, arg2'=arg2, arg3'=arg3p8, arg4'=arg4p8, arg5'=arg5p8, (0 == 0 /\ arg1 > 0 /\ 1+arg1p8 > 0 /\ 1-arg1+arg1p8 <= 0 /\ arg2 > 0), cost: 1
	New rule:
	f760_0_copy_NONNULL -> f760_0_copy_NONNULL : arg1'=arg1p8, arg2'=arg2, arg3'=arg3p8, arg4'=arg4p8, arg5'=arg5p8, (arg1 > 0 /\ 1+arg1p8 > 0 /\ 1-arg1+arg1p8 <= 0 /\ arg2 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f760_0_copy_NONNULL -> f760_0_copy_NONNULL : arg1'=arg1p8, arg2'=arg2, arg3'=arg3p8, arg4'=arg4p8, arg5'=arg5p8, (arg1 > 0 /\ 1+arg1p8 > 0 /\ 1-arg1+arg1p8 <= 0 /\ arg2 > 0), cost: 1
	New rule:
	f760_0_copy_NONNULL -> f760_0_copy_NONNULL : arg1'=arg1p8, arg3'=arg3p8, arg4'=arg4p8, arg5'=arg5p8, (arg1 > 0 /\ 1+arg1p8 > 0 /\ 1-arg1+arg1p8 <= 0 /\ arg2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f540_0_random_ArrayAccess -> f760_0_copy_NONNULL : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, arg4'=arg4p4, arg5'=arg5p4, (-3+arg1p4 > 0 /\ arg3p3-arg2p4 == 0 /\ -arg2p3+arg1p4 <= 0 /\ -arg3 == 0 /\ -3+arg1 > 0 /\ x51 > 0 /\ -arg5p3+arg4 == 0 /\ 3-arg1+arg1p3 <= 0 /\ arg3p3 > 0 /\ x51-arg2 < 0 /\ -3+arg2p3 > 0 /\ 2-arg1+arg4 <= 0 /\ arg1p3 > 0 /\ 2+arg5p3-arg2p3 <= 0 /\ 1+x52 > 0 /\ 4-arg2p3+arg4p3 <= 0), cost: 1
	New rule:
	f540_0_random_ArrayAccess -> f760_0_copy_NONNULL : arg1'=arg1p4, arg2'=arg3p3, arg3'=arg3p4, arg4'=arg4p4, arg5'=arg5p4, (0 == 0 /\ -3+arg1p4 > 0 /\ -arg2p3+arg1p4 <= 0 /\ -arg3 == 0 /\ -3+arg1 > 0 /\ x51 > 0 /\ -arg5p3+arg4 == 0 /\ 3-arg1+arg1p3 <= 0 /\ arg3p3 > 0 /\ x51-arg2 < 0 /\ -3+arg2p3 > 0 /\ 2-arg1+arg4 <= 0 /\ arg1p3 > 0 /\ 2+arg5p3-arg2p3 <= 0 /\ 1+x52 > 0 /\ 4-arg2p3+arg4p3 <= 0), cost: 1
	
		propagated equality arg2p4 = arg3p3
		
	Propagated Equalities

	Original rule:
	f540_0_random_ArrayAccess -> f760_0_copy_NONNULL : arg1'=arg1p4, arg2'=arg3p3, arg3'=arg3p4, arg4'=arg4p4, arg5'=arg5p4, (0 == 0 /\ -3+arg1p4 > 0 /\ -arg2p3+arg1p4 <= 0 /\ -arg3 == 0 /\ -3+arg1 > 0 /\ x51 > 0 /\ -arg5p3+arg4 == 0 /\ 3-arg1+arg1p3 <= 0 /\ arg3p3 > 0 /\ x51-arg2 < 0 /\ -3+arg2p3 > 0 /\ 2-arg1+arg4 <= 0 /\ arg1p3 > 0 /\ 2+arg5p3-arg2p3 <= 0 /\ 1+x52 > 0 /\ 4-arg2p3+arg4p3 <= 0), cost: 1
	New rule:
	f540_0_random_ArrayAccess -> f760_0_copy_NONNULL : arg1'=arg1p4, arg2'=arg3p3, arg3'=arg3p4, arg4'=arg4p4, arg5'=arg5p4, (0 == 0 /\ -3+arg1p4 > 0 /\ -arg2p3+arg1p4 <= 0 /\ -arg3 == 0 /\ -3+arg1 > 0 /\ x51 > 0 /\ 2-arg2p3+arg4 <= 0 /\ 3-arg1+arg1p3 <= 0 /\ arg3p3 > 0 /\ x51-arg2 < 0 /\ -3+arg2p3 > 0 /\ 2-arg1+arg4 <= 0 /\ arg1p3 > 0 /\ 1+x52 > 0 /\ 4-arg2p3+arg4p3 <= 0), cost: 1
	
		propagated equality arg5p3 = arg4
		
	Simplified Guard

	Original rule:
	f540_0_random_ArrayAccess -> f760_0_copy_NONNULL : arg1'=arg1p4, arg2'=arg3p3, arg3'=arg3p4, arg4'=arg4p4, arg5'=arg5p4, (0 == 0 /\ -3+arg1p4 > 0 /\ -arg2p3+arg1p4 <= 0 /\ -arg3 == 0 /\ -3+arg1 > 0 /\ x51 > 0 /\ 2-arg2p3+arg4 <= 0 /\ 3-arg1+arg1p3 <= 0 /\ arg3p3 > 0 /\ x51-arg2 < 0 /\ -3+arg2p3 > 0 /\ 2-arg1+arg4 <= 0 /\ arg1p3 > 0 /\ 1+x52 > 0 /\ 4-arg2p3+arg4p3 <= 0), cost: 1
	New rule:
	f540_0_random_ArrayAccess -> f760_0_copy_NONNULL : arg1'=arg1p4, arg2'=arg3p3, arg3'=arg3p4, arg4'=arg4p4, arg5'=arg5p4, (-3+arg1p4 > 0 /\ -arg2p3+arg1p4 <= 0 /\ -arg3 == 0 /\ -3+arg1 > 0 /\ x51 > 0 /\ 2-arg2p3+arg4 <= 0 /\ 3-arg1+arg1p3 <= 0 /\ arg3p3 > 0 /\ x51-arg2 < 0 /\ -3+arg2p3 > 0 /\ 2-arg1+arg4 <= 0 /\ arg1p3 > 0 /\ 1+x52 > 0 /\ 4-arg2p3+arg4p3 <= 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	f540_0_random_ArrayAccess -> f760_0_copy_NONNULL : arg1'=arg1p4, arg2'=arg3p3, arg3'=arg3p4, arg4'=arg4p4, arg5'=arg5p4, (-3+arg1p4 > 0 /\ -arg2p3+arg1p4 <= 0 /\ -arg3 == 0 /\ -3+arg1 > 0 /\ x51 > 0 /\ 2-arg2p3+arg4 <= 0 /\ 3-arg1+arg1p3 <= 0 /\ arg3p3 > 0 /\ x51-arg2 < 0 /\ -3+arg2p3 > 0 /\ 2-arg1+arg4 <= 0 /\ arg1p3 > 0 /\ 1+x52 > 0 /\ 4-arg2p3+arg4p3 <= 0), cost: 1
	New rule:
	f540_0_random_ArrayAccess -> f760_0_copy_NONNULL : arg1'=arg1p4, arg2'=arg3p3, arg3'=arg3p4, arg4'=arg4p4, arg5'=arg5p4, (-3+arg1p4 > 0 /\ 4-arg1 <= 0 /\ -arg3 == 0 /\ -3+arg1 > 0 /\ arg3p3 > 0 /\ 2-arg2 <= 0 /\ 2-arg1+arg4 <= 0), cost: 1

Step with 8

	Trace

	8[T]
	
	Blocked

	[{}, {}]

Step with 11

	Trace

	8[T], 11[(arg1 > 0 /\ -3+arg1p2 > 0)]
	
	Blocked

	[{}, {}, {}]

Step with 13

	Trace

	8[T], 11[(arg1 > 0 /\ -3+arg1p2 > 0)], 13[(arg2p6 > 0 /\ 1+arg2 > 0 /\ -arg3 == 0 /\ -3+arg1 > 0 /\ 2-arg2 <= 0 /\ 3+arg2p6-arg1 <= 0 /\ 2-arg1+arg4 <= 0 /\ 1+arg1p6 > 0)]
	
	Blocked

	[{}, {}, {}, {}]

Step with 14

	Trace

	8[T], 11[(arg1 > 0 /\ -3+arg1p2 > 0)], 13[(arg2p6 > 0 /\ 1+arg2 > 0 /\ -arg3 == 0 /\ -3+arg1 > 0 /\ 2-arg2 <= 0 /\ 3+arg2p6-arg1 <= 0 /\ 2-arg1+arg4 <= 0 /\ 1+arg1p6 > 0)], 14[(-1+arg1 > 0 /\ arg2p7 > 0 /\ arg2p7-arg2 <= 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {}, {}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5
  10: f289_0_appendNewList_Return -> f540_0_random_ArrayAccess : arg1'=arg1p1, arg2'=arg2p1, arg3'=0, arg4'=arg5, arg5'=arg5p1, (-3+arg2 > 0 /\ arg1 > 0 /\ 2+arg5-arg2 <= 0 /\ arg1p1-arg2 <= 0 /\ -arg4 == 0 /\ -3+arg1p1 > 0), cost: 1
  13: f540_0_random_ArrayAccess -> f422_0_random_ArrayAccess : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, arg4'=arg4p6, arg5'=arg5p6, (arg2p6 > 0 /\ 1+arg2 > 0 /\ -arg3 == 0 /\ -3+arg1 > 0 /\ 2-arg2 <= 0 /\ 3+arg2p6-arg1 <= 0 /\ 2-arg1+arg4 <= 0 /\ 1+arg1p6 > 0), cost: 1
  16: f540_0_random_ArrayAccess -> f760_0_copy_NONNULL : arg1'=arg1p4, arg2'=arg3p3, arg3'=arg3p4, arg4'=arg4p4, arg5'=arg5p4, (-3+arg1p4 > 0 /\ 4-arg1 <= 0 /\ -arg3 == 0 /\ -3+arg1 > 0 /\ arg3p3 > 0 /\ 2-arg2 <= 0 /\ 2-arg1+arg4 <= 0), cost: 1
  11: f1_0_main_Load -> f540_0_random_ArrayAccess : arg1'=arg1p2, arg3'=0, arg4'=arg4p2, arg5'=arg5p2, (arg1 > 0 /\ -3+arg1p2 > 0), cost: 1
  12: f1_0_main_Load -> f422_0_random_ArrayAccess : arg1'=1, arg2'=arg2p5, arg3'=arg3p5, arg4'=arg4p5, arg5'=arg5p5, (arg2p5 > 0 /\ 1+arg2 > 0 /\ arg2p5-arg1 <= 0 /\ arg1 > 0), cost: 1
  15: f760_0_copy_NONNULL -> f760_0_copy_NONNULL : arg1'=arg1p8, arg3'=arg3p8, arg4'=arg4p8, arg5'=arg5p8, (arg1 > 0 /\ 1+arg1p8 > 0 /\ 1-arg1+arg1p8 <= 0 /\ arg2 > 0), cost: 1
  14: f422_0_random_ArrayAccess -> f422_0_random_ArrayAccess : arg1'=-1+arg1, arg2'=arg2p7, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, (-1+arg1 > 0 /\ arg2p7 > 0 /\ arg2p7-arg2 <= 0 /\ arg2 > 0), cost: 1
  17: f422_0_random_ArrayAccess -> f422_0_random_ArrayAccess : arg1'=arg1-n, arg2'=arg2p7, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, (arg1-n > 0 /\ arg2p7 > 0 /\ -arg2p7+arg2 >= 0 /\ -1+n >= 0), cost: 1
   8: __init -> f1_0_main_Load : arg1'=arg1p9, arg2'=arg2p9, arg3'=arg3p9, arg4'=arg4p9, arg5'=arg5p9, T, cost: 1

	Loop Acceleration

	Original rule:
	f422_0_random_ArrayAccess -> f422_0_random_ArrayAccess : arg1'=-1+arg1, arg2'=arg2p7, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, (-1+arg1 > 0 /\ arg2p7 > 0 /\ arg2p7-arg2 <= 0 /\ arg2 > 0), cost: 1
	New rule:
	f422_0_random_ArrayAccess -> f422_0_random_ArrayAccess : arg1'=arg1-n, arg2'=arg2p7, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, (arg1-n > 0 /\ arg2p7 > 0 /\ -arg2p7+arg2 >= 0 /\ -1+n >= 0), cost: 1

		-1+arg1 > 0 [0]: montonic decrease yields arg1-n > 0
		
		-1+arg1 > 0 [1]: eventual increase yields (1 <= 0 /\ -1+arg1 > 0)
		
		arg2p7 > 0 [0]: monotonic increase yields arg2p7 > 0
		
		-arg2p7+arg2 >= 0 [0]: monotonic increase yields -arg2p7+arg2 >= 0
		
		arg2 > 0 [0]: montonic decrease yields arg2p7 > 0, dependencies: -arg2p7+arg2 >= 0
		
		arg2 > 0 [1]: eventual increase yields (-arg2p7+arg2 <= 0 /\ arg2 > 0)
		
		Replacement map: {-1+arg1 > 0 -> arg1-n > 0, arg2p7 > 0 -> arg2p7 > 0, -arg2p7+arg2 >= 0 -> -arg2p7+arg2 >= 0, arg2 > 0 -> arg2p7 > 0}

	Trace

	8[T], 11[(arg1 > 0 /\ -3+arg1p2 > 0)], 13[(arg2p6 > 0 /\ 1+arg2 > 0 /\ -arg3 == 0 /\ -3+arg1 > 0 /\ 2-arg2 <= 0 /\ 3+arg2p6-arg1 <= 0 /\ 2-arg1+arg4 <= 0 /\ 1+arg1p6 > 0)], 17[(arg1-n > 0 /\ arg2p7 > 0 /\ -arg2p7+arg2 >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {}, {}, {}, {14[T], 17[T]}]

Backtrack

	Trace

	8[T], 11[(arg1 > 0 /\ -3+arg1p2 > 0)], 13[(arg2p6 > 0 /\ 1+arg2 > 0 /\ -arg3 == 0 /\ -3+arg1 > 0 /\ 2-arg2 <= 0 /\ 3+arg2p6-arg1 <= 0 /\ 2-arg1+arg4 <= 0 /\ 1+arg1p6 > 0)]
	
	Blocked

	[{}, {}, {}, {17[T]}]

Step with 14

	Trace

	8[T], 11[(arg1 > 0 /\ -3+arg1p2 > 0)], 13[(arg2p6 > 0 /\ 1+arg2 > 0 /\ -arg3 == 0 /\ -3+arg1 > 0 /\ 2-arg2 <= 0 /\ 3+arg2p6-arg1 <= 0 /\ 2-arg1+arg4 <= 0 /\ 1+arg1p6 > 0)], 14[(-1+arg1 > 0 /\ arg2p7 > 0 /\ arg2p7-arg2 <= 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {}, {17[T]}, {}]

Covered

	Trace

	8[T], 11[(arg1 > 0 /\ -3+arg1p2 > 0)], 13[(arg2p6 > 0 /\ 1+arg2 > 0 /\ -arg3 == 0 /\ -3+arg1 > 0 /\ 2-arg2 <= 0 /\ 3+arg2p6-arg1 <= 0 /\ 2-arg1+arg4 <= 0 /\ 1+arg1p6 > 0)]
	
	Blocked

	[{}, {}, {}, {14[T], 17[T]}]

Backtrack

	Trace

	8[T], 11[(arg1 > 0 /\ -3+arg1p2 > 0)]
	
	Blocked

	[{}, {}, {13[T]}]

Step with 16

	Trace

	8[T], 11[(arg1 > 0 /\ -3+arg1p2 > 0)], 16[(-3+arg1p4 > 0 /\ 4-arg1 <= 0 /\ -arg3 == 0 /\ -3+arg1 > 0 /\ arg3p3 > 0 /\ 2-arg2 <= 0 /\ 2-arg1+arg4 <= 0)]
	
	Blocked

	[{}, {}, {13[T]}, {}]

Step with 15

	Trace

	8[T], 11[(arg1 > 0 /\ -3+arg1p2 > 0)], 16[(-3+arg1p4 > 0 /\ 4-arg1 <= 0 /\ -arg3 == 0 /\ -3+arg1 > 0 /\ arg3p3 > 0 /\ 2-arg2 <= 0 /\ 2-arg1+arg4 <= 0)], 15[(arg1 > 0 /\ 1+arg1p8 > 0 /\ 1-arg1+arg1p8 <= 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {13[T]}, {}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 15

	Trace

	8[T], 11[(arg1 > 0 /\ -3+arg1p2 > 0)], 16[(-3+arg1p4 > 0 /\ 4-arg1 <= 0 /\ -arg3 == 0 /\ -3+arg1 > 0 /\ arg3p3 > 0 /\ 2-arg2 <= 0 /\ 2-arg1+arg4 <= 0)], 15[(arg1 > 0 /\ 1+arg1p8 > 0 /\ 1-arg1+arg1p8 <= 0 /\ arg2 > 0)], 15[(arg1 > 0 /\ 1+arg1p8 > 0 /\ 1-arg1+arg1p8 <= 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {13[T]}, {}, {}, {}]

Covered

	Trace

	8[T], 11[(arg1 > 0 /\ -3+arg1p2 > 0)], 16[(-3+arg1p4 > 0 /\ 4-arg1 <= 0 /\ -arg3 == 0 /\ -3+arg1 > 0 /\ arg3p3 > 0 /\ 2-arg2 <= 0 /\ 2-arg1+arg4 <= 0)], 15[(arg1 > 0 /\ 1+arg1p8 > 0 /\ 1-arg1+arg1p8 <= 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {13[T]}, {}, {15[T]}]

Backtrack

	Trace

	8[T], 11[(arg1 > 0 /\ -3+arg1p2 > 0)], 16[(-3+arg1p4 > 0 /\ 4-arg1 <= 0 /\ -arg3 == 0 /\ -3+arg1 > 0 /\ arg3p3 > 0 /\ 2-arg2 <= 0 /\ 2-arg1+arg4 <= 0)]
	
	Blocked

	[{}, {}, {13[T]}, {15[T]}]

Backtrack

	Trace

	8[T], 11[(arg1 > 0 /\ -3+arg1p2 > 0)]
	
	Blocked

	[{}, {}, {13[T], 16[T]}]

Backtrack

	Trace

	8[T]
	
	Blocked

	[{}, {11[T]}]

Step with 12

	Trace

	8[T], 12[(arg2p5 > 0 /\ 1+arg2 > 0 /\ arg2p5-arg1 <= 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {11[T]}, {}]

Backtrack

	Trace

	8[T]
	
	Blocked

	[{}, {11[T], 12[T]}]

Backtrack

	Trace

	Blocked

	[{8[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
