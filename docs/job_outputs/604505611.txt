WORST_CASE(Omega(0),?)

Initial ITS
Start location: __init
   0: f1_0_main_Load -> f145_0_main_EQ : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P0 > 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0), cost: 1
   1: f145_0_main_EQ -> f145_0_main_EQ : arg2'=arg2P1, arg1'=arg1P1, (arg2-arg1 > 0 /\ 1+arg1-arg1P1 == 0 /\ arg2-arg2P1 == 0), cost: 1
   2: f145_0_main_EQ -> f145_0_main_EQ : arg2'=arg2P2, arg1'=arg1P2, (arg2-arg1 < 0 /\ arg1-arg1P2 == 0 /\ 1+arg2-arg2P2 == 0), cost: 1
   3: __init -> f1_0_main_Load : arg2'=arg2P3, arg1'=arg1P3, TRUE, cost: 1


Applied preprocessing
Original rule:
f145_0_main_EQ -> f145_0_main_EQ : arg2'=arg2P1, arg1'=arg1P1, (arg2-arg1 > 0 /\ 1+arg1-arg1P1 == 0 /\ arg2-arg2P1 == 0), cost: 1
New rule:
f145_0_main_EQ -> f145_0_main_EQ : arg1'=1+arg1, arg2-arg1 > 0, cost: 1

Applied preprocessing
Original rule:
f145_0_main_EQ -> f145_0_main_EQ : arg2'=arg2P2, arg1'=arg1P2, (arg2-arg1 < 0 /\ arg1-arg1P2 == 0 /\ 1+arg2-arg2P2 == 0), cost: 1
New rule:
f145_0_main_EQ -> f145_0_main_EQ : arg2'=1+arg2, -arg2+arg1 > 0, cost: 1

Simplified rules
Start location: __init
   0: f1_0_main_Load -> f145_0_main_EQ : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P0 > 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0), cost: 1
   4: f145_0_main_EQ -> f145_0_main_EQ : arg1'=1+arg1, arg2-arg1 > 0, cost: 1
   5: f145_0_main_EQ -> f145_0_main_EQ : arg2'=1+arg2, -arg2+arg1 > 0, cost: 1
   3: __init -> f1_0_main_Load : arg2'=arg2P3, arg1'=arg1P3, TRUE, cost: 1


Applied acceleration
Original rule:
f145_0_main_EQ -> f145_0_main_EQ : arg1'=1+arg1, arg2-arg1 > 0, cost: 1
New rule:
f145_0_main_EQ -> f145_0_main_EQ : arg1'=arg1+n, (n >= 0 /\ 1+arg2-arg1-n > 0), cost: n
Sub-proof via acceration calculus written to file:///tmp/tmpnam_DPaGiL.txt

Applied instantiation
Original rule:
f145_0_main_EQ -> f145_0_main_EQ : arg1'=arg1+n, (n >= 0 /\ 1+arg2-arg1-n > 0), cost: n
New rule:
f145_0_main_EQ -> f145_0_main_EQ : arg1'=arg2, (1 > 0 /\ arg2-arg1 >= 0), cost: arg2-arg1

Applied acceleration
Original rule:
f145_0_main_EQ -> f145_0_main_EQ : arg2'=1+arg2, -arg2+arg1 > 0, cost: 1
New rule:
f145_0_main_EQ -> f145_0_main_EQ : arg2'=arg2+n0, (n0 >= 0 /\ 1-arg2-n0+arg1 > 0), cost: n0
Sub-proof via acceration calculus written to file:///tmp/tmpnam_FGopFh.txt

Applied instantiation
Original rule:
f145_0_main_EQ -> f145_0_main_EQ : arg2'=arg2+n0, (n0 >= 0 /\ 1-arg2-n0+arg1 > 0), cost: n0
New rule:
f145_0_main_EQ -> f145_0_main_EQ : arg2'=arg1, (1 > 0 /\ -arg2+arg1 >= 0), cost: -arg2+arg1

Applied simplification
Original rule:
f145_0_main_EQ -> f145_0_main_EQ : arg1'=arg2, (1 > 0 /\ arg2-arg1 >= 0), cost: arg2-arg1
New rule:
f145_0_main_EQ -> f145_0_main_EQ : arg1'=arg2, arg2-arg1 >= 0, cost: arg2-arg1

Applied simplification
Original rule:
f145_0_main_EQ -> f145_0_main_EQ : arg2'=arg1, (1 > 0 /\ -arg2+arg1 >= 0), cost: -arg2+arg1
New rule:
f145_0_main_EQ -> f145_0_main_EQ : arg2'=arg1, -arg2+arg1 >= 0, cost: -arg2+arg1

Applied deletion
Removed the following rules: 4 5

Accelerated simple loops
Start location: __init
   0: f1_0_main_Load -> f145_0_main_EQ : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P0 > 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0), cost: 1
   8: f145_0_main_EQ -> f145_0_main_EQ : arg1'=arg2, arg2-arg1 >= 0, cost: arg2-arg1
   9: f145_0_main_EQ -> f145_0_main_EQ : arg2'=arg1, -arg2+arg1 >= 0, cost: -arg2+arg1
   3: __init -> f1_0_main_Load : arg2'=arg2P3, arg1'=arg1P3, TRUE, cost: 1


Applied chaining
First rule:
f1_0_main_Load -> f145_0_main_EQ : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P0 > 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0), cost: 1
Second rule:
f145_0_main_EQ -> f145_0_main_EQ : arg1'=arg2, arg2-arg1 >= 0, cost: arg2-arg1
New rule:
f1_0_main_Load -> f145_0_main_EQ : arg2'=arg2P0, arg1'=arg2P0, (arg2P0-arg1P0 >= 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0), cost: 1+arg2P0-arg1P0

Applied chaining
First rule:
f1_0_main_Load -> f145_0_main_EQ : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P0 > 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0), cost: 1
Second rule:
f145_0_main_EQ -> f145_0_main_EQ : arg2'=arg1, -arg2+arg1 >= 0, cost: -arg2+arg1
New rule:
f1_0_main_Load -> f145_0_main_EQ : arg2'=arg1P0, arg1'=arg1P0, (1+arg2P0 > 0 /\ -arg2P0+arg1P0 >= 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 1-arg2P0+arg1P0

Applied deletion
Removed the following rules: 8 9

Chained accelerated rules with incoming rules
Start location: __init
   0: f1_0_main_Load -> f145_0_main_EQ : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P0 > 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0), cost: 1
  10: f1_0_main_Load -> f145_0_main_EQ : arg2'=arg2P0, arg1'=arg2P0, (arg2P0-arg1P0 >= 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0), cost: 1+arg2P0-arg1P0
  11: f1_0_main_Load -> f145_0_main_EQ : arg2'=arg1P0, arg1'=arg1P0, (1+arg2P0 > 0 /\ -arg2P0+arg1P0 >= 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 1-arg2P0+arg1P0
   3: __init -> f1_0_main_Load : arg2'=arg2P3, arg1'=arg1P3, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
  <empty>


Computing asymptotic complexity

Proved the following lower bound
Complexity:  Unknown
Cpx degree: ?

Solved cost: 0
Rule cost:   0

