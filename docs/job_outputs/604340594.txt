YES

Solver Timeout: 4
Global Timeout: 300
Maximum number of concurrent processes: 900
*******************************************************************************************
*********************** UNPROCESSED TRANSITION SYSTEMS PER FUNCTION ***********************
*******************************************************************************************


List of LLVMGraphs + assumeNodes + staticAssertNodes [1] :

+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++
+                                                                  +
Init Location: 0
Transitions:
<l0, l1, true, seq{main__func_return_ -> 0, main_N -> 10, main_x -> 0, main_y -> 0, main_i -> 0}>
<l1, l2, true>
<l2, l23, not((main_i < main_N))>
<l2, l3, (main_i < main_N)>
<l3, l4, true, seq{main_i -> (main_i + 1), main_r -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l4, l22, not((main_r >= 0))>
<l4, l5, (main_r >= 0)>
<l5, l6, (main_r <= 3)>
<l5, l22, not((main_r <= 3))>
<l6, l9, not((main_r = 0))>
<l6, l7, (main_r = 0)>
<l7, l8, true, seq{main_x -> (main_x + 1)}>
<l8, l21, true>
<l9, l10, (main_r = 1)>
<l9, l12, not((main_r = 1))>
<l10, l11, true, seq{main_x -> (main_x - 1)}>
<l11, l20, true>
<l12, l13, (main_r = 2)>
<l12, l15, not((main_r = 2))>
<l13, l14, true, seq{main_y -> (main_y + 1)}>
<l14, l19, true>
<l15, l16, (main_r = 3)>
<l15, l18, not((main_r = 3))>
<l16, l17, true, seq{main_y -> (main_y - 1)}>
<l17, l18, true>
<l18, l19, true>
<l19, l20, true>
<l20, l21, true>
<l21, l22, true>
<l22, l2, true>
<l23, l24, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

+ Assume Nodes [0]: ++++++++++++++++++++++++++++++++++++++++++++++++
       
+ Static Assert Nodes [0]: +++++++++++++++++++++++++++++++++++++++++
       
+ After preprocess (paralelization): ++++++++++++++++++++++++++++++

Init Location: 0
Transitions:
<l0, l1, true, seq{main__func_return_ -> 0, main_N -> 10, main_x -> 0, main_y -> 0, main_i -> 0}>
<l1, l2, true>
<l2, l3, (main_i < main_N)>
<l2, l23, not((main_i < main_N))>
<l3, l25, true, seq{main_i -> (main_i + 1)}>
<l25, l26, true, seq{varCall_1 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l26, l4, true, seq{main_r -> varCall_1}>
<l4, l5, (main_r >= 0)>
<l4, l22, not((main_r >= 0))>
<l5, l6, (main_r <= 3)>
<l5, l22, not((main_r <= 3))>
<l6, l7, (main_r = 0)>
<l6, l9, not((main_r = 0))>
<l7, l8, true, seq{main_x -> (main_x + 1)}>
<l8, l21, true>
<l9, l10, (main_r = 1)>
<l9, l12, not((main_r = 1))>
<l10, l11, true, seq{main_x -> (main_x - 1)}>
<l11, l20, true>
<l12, l13, (main_r = 2)>
<l12, l15, not((main_r = 2))>
<l13, l14, true, seq{main_y -> (main_y + 1)}>
<l14, l19, true>
<l15, l16, (main_r = 3)>
<l15, l18, not((main_r = 3))>
<l16, l17, true, seq{main_y -> (main_y - 1)}>
<l17, l18, true>
<l18, l19, true>
<l19, l20, true>
<l20, l21, true>
<l21, l22, true>
<l22, l2, true>
<l23, l24, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:
24, 
Accepting locations:

Asserts:

+                                                                  +
+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++


Function Return and Parameters Information [2 functions]:
    function name: __VERIFIER_nondet_int [1 return + 0 parameters]        demangled: __VERIFIER_nondet_int
        __VERIFIER_nondet_int__func_return_      [function result] : int
    function name: main [1 return + 0 parameters]        demangled: main
        main__func_return_      [function result] : int


AST Ident Scanner Information [7 idents]:
__VERIFIER_nondet_int | function | [integer, ()] | <line: 11, col: 1> | <line: 21, col: 7>
main | function | [integer, ()] | <line: 13, col: 1>
N | local variable | integer | <line: 14, col: 5> | <line: 15, col: 2> <line: 19, col: 13>
x | local variable | integer | <line: 14, col: 5> | <line: 16, col: 5> <line: 24, col: 5> <line: 24, col: 9> <line: 26, col: 5> <line: 26, col: 9>
y | local variable | integer | <line: 14, col: 5> | <line: 17, col: 5> <line: 28, col: 5> <line: 28, col: 9> <line: 30, col: 5> <line: 30, col: 9>
i | local variable | integer | <line: 14, col: 5> | <line: 18, col: 5> <line: 19, col: 9> <line: 20, col: 3> <line: 20, col: 7>
r | local variable | integer | <line: 14, col: 5> | <line: 21, col: 3> <line: 22, col: 7> <line: 22, col: 17> <line: 23, col: 8> <line: 25, col: 16> <line: 27, col: 16> <line: 29, col: 16>

Main function: main
Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l2, (10 = 10) /\ (main_x = 0) /\ (main_y = 0) /\ (main_i = 0)>
<l2, l2, (main_i < 10) /\ (undef2 >= 0) /\ (undef2 <= 3) /\ (undef2 = 0), par{main_x -> (main_x + 1), main_i -> (main_i + 1), main_r -> undef2}>
<l2, l2, (main_i < 10) /\ (undef2 >= 0) /\ (undef2 <= 3) /\ (undef2 > 0) /\ (undef2 = 1), par{main_x -> (main_x - 1), main_i -> (main_i + 1), main_r -> undef2}>
<l2, l2, (main_i < 10) /\ (undef2 >= 0) /\ (undef2 <= 3) /\ (undef2 > 0) /\ (undef2 > 1) /\ (undef2 = 2), par{main_y -> (main_y + 1), main_i -> (main_i + 1), main_r -> undef2}>
<l2, l2, (main_i < 10) /\ (undef2 >= 0) /\ (undef2 <= 3) /\ (undef2 > 0) /\ (undef2 > 1) /\ (undef2 > 2) /\ (undef2 = 3), par{main_y -> (main_y - 1), main_i -> (main_i + 1), main_r -> undef2}>
<l2, l2, (main_i < 10) /\ (undef2 >= 0) /\ not((undef2 <= 3)), par{main_i -> (main_i + 1), main_r -> undef2}>
<l2, l2, (main_i < 10) /\ not((undef2 >= 0)), par{main_i -> (main_i + 1), main_r -> undef2}>
<l2, l24, not((main_i < 10))>

Fresh variables:
undef2, 

Undef variables:
undef2, 

Abstraction variables:

Exit nodes:
24, 
Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l2, l2, main_i <= 9 /\ undef2 = 0, {main_x -> 1 + main_x, main_i -> 1 + main_i, main_r -> undef2, rest remain the same}>
<l2, l2, main_i <= 9 /\ undef2 = 1, {main_x -> -1 + main_x, main_i -> 1 + main_i, main_r -> undef2, rest remain the same}>
<l2, l2, main_i <= 9 /\ undef2 = 2, {main_y -> 1 + main_y, main_i -> 1 + main_i, main_r -> undef2, rest remain the same}>
<l2, l2, main_i <= 9 /\ undef2 = 3, {main_y -> -1 + main_y, main_i -> 1 + main_i, main_r -> undef2, rest remain the same}>
<l2, l2, main_i <= 9 /\ 4 <= undef2, {main_i -> 1 + main_i, main_r -> undef2, rest remain the same}>
<l2, l2, 1 + undef2 <= 0 /\ main_i <= 9, {main_i -> 1 + main_i, main_r -> undef2, rest remain the same}>
Variables:
main_x, main_i, main_r, main_y

Graph 2:
Transitions:
Variables:

Precedence: 
Graph 0

Graph 1
<l0, l2, main_x = 0 /\ main_y = 0 /\ main_i = 0, {all remain the same}>

Graph 2
<l2, l24, 10 <= main_i, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 2 , 1 )
( 24 , 2 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.009827

Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.001744s
[33mRanking function: [36m9 - main_i[0m
New Graphs: 
Proving termination of subgraph 2
Analyzing SCC {l24}...
No cycles found.

[32mProgram Terminates[0m
