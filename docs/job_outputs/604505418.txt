WORST_CASE(Omega(0),?)

Initial ITS
Start location: __init
   0: f1_0_main_Load -> f1_0_main_Load\' : arg2'=arg2P0, arg1'=arg1P0, (arg2 > 0 /\ -arg1P0+arg1 == 0 /\ 1+x20 > 0 /\ arg1 > 0 /\ arg2-arg2P0 == 0), cost: 1
   1: f1_0_main_Load\' -> f134_0_test_GT : arg2'=arg2P1, arg1'=arg1P1, (arg2 > 0 /\ -100*x80+x70 >= 0 /\ arg2-arg2P1 == 0 /\ arg1 > 0 /\ 1+x70 > 0 /\ -100-100*x80+x70 < 0 /\ -100*x80-arg1P1+x70 == 0), cost: 1
   2: f134_0_test_GT -> f134_0_test_GT : arg2'=arg2P2, arg1'=arg1P2, (arg2 > 0 /\ -arg2P2+arg2 == 0 /\ arg1 > 0 /\ -1 < 0 /\ -1-arg1P2+arg1 == 0), cost: 1
   3: __init -> f1_0_main_Load : arg2'=arg2P3, arg1'=arg1P3, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_Load -> f1_0_main_Load\' : arg2'=arg2P0, arg1'=arg1P0, (arg2 > 0 /\ -arg1P0+arg1 == 0 /\ 1+x20 > 0 /\ arg1 > 0 /\ arg2-arg2P0 == 0), cost: 1
New rule:
f1_0_main_Load -> f1_0_main_Load\' : (arg2 > 0 /\ arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f1_0_main_Load\' -> f134_0_test_GT : arg2'=arg2P1, arg1'=arg1P1, (arg2 > 0 /\ -100*x80+x70 >= 0 /\ arg2-arg2P1 == 0 /\ arg1 > 0 /\ 1+x70 > 0 /\ -100-100*x80+x70 < 0 /\ -100*x80-arg1P1+x70 == 0), cost: 1
New rule:
f1_0_main_Load\' -> f134_0_test_GT : arg1'=-100*x80+x70, (arg2 > 0 /\ -100*x80+x70 >= 0 /\ 100+100*x80-x70 > 0 /\ arg1 > 0 /\ 1+x70 > 0), cost: 1

Applied preprocessing
Original rule:
f134_0_test_GT -> f134_0_test_GT : arg2'=arg2P2, arg1'=arg1P2, (arg2 > 0 /\ -arg2P2+arg2 == 0 /\ arg1 > 0 /\ -1 < 0 /\ -1-arg1P2+arg1 == 0), cost: 1
New rule:
f134_0_test_GT -> f134_0_test_GT : arg1'=-1+arg1, (arg2 > 0 /\ arg1 > 0), cost: 1

Simplified rules
Start location: __init
   4: f1_0_main_Load -> f1_0_main_Load\' : (arg2 > 0 /\ arg1 > 0), cost: 1
   5: f1_0_main_Load\' -> f134_0_test_GT : arg1'=-100*x80+x70, (arg2 > 0 /\ -100*x80+x70 >= 0 /\ 100+100*x80-x70 > 0 /\ arg1 > 0 /\ 1+x70 > 0), cost: 1
   6: f134_0_test_GT -> f134_0_test_GT : arg1'=-1+arg1, (arg2 > 0 /\ arg1 > 0), cost: 1
   3: __init -> f1_0_main_Load : arg2'=arg2P3, arg1'=arg1P3, TRUE, cost: 1


Applied acceleration
Original rule:
f134_0_test_GT -> f134_0_test_GT : arg1'=-1+arg1, (arg2 > 0 /\ arg1 > 0), cost: 1
New rule:
f134_0_test_GT -> f134_0_test_GT : arg1'=-n+arg1, (arg2 > 0 /\ 1-n+arg1 > 0 /\ n >= 0), cost: n
Sub-proof via acceration calculus written to file:///tmp/tmpnam_kjkbNb.txt

Applied instantiation
Original rule:
f134_0_test_GT -> f134_0_test_GT : arg1'=-n+arg1, (arg2 > 0 /\ 1-n+arg1 > 0 /\ n >= 0), cost: n
New rule:
f134_0_test_GT -> f134_0_test_GT : arg1'=0, (1 > 0 /\ arg2 > 0 /\ arg1 >= 0), cost: arg1

Applied simplification
Original rule:
f134_0_test_GT -> f134_0_test_GT : arg1'=0, (1 > 0 /\ arg2 > 0 /\ arg1 >= 0), cost: arg1
New rule:
f134_0_test_GT -> f134_0_test_GT : arg1'=0, (arg2 > 0 /\ arg1 >= 0), cost: arg1

Applied deletion
Removed the following rules: 6

Accelerated simple loops
Start location: __init
   4: f1_0_main_Load -> f1_0_main_Load\' : (arg2 > 0 /\ arg1 > 0), cost: 1
   5: f1_0_main_Load\' -> f134_0_test_GT : arg1'=-100*x80+x70, (arg2 > 0 /\ -100*x80+x70 >= 0 /\ 100+100*x80-x70 > 0 /\ arg1 > 0 /\ 1+x70 > 0), cost: 1
   8: f134_0_test_GT -> f134_0_test_GT : arg1'=0, (arg2 > 0 /\ arg1 >= 0), cost: arg1
   3: __init -> f1_0_main_Load : arg2'=arg2P3, arg1'=arg1P3, TRUE, cost: 1


Applied chaining
First rule:
f1_0_main_Load\' -> f134_0_test_GT : arg1'=-100*x80+x70, (arg2 > 0 /\ -100*x80+x70 >= 0 /\ 100+100*x80-x70 > 0 /\ arg1 > 0 /\ 1+x70 > 0), cost: 1
Second rule:
f134_0_test_GT -> f134_0_test_GT : arg1'=0, (arg2 > 0 /\ arg1 >= 0), cost: arg1
New rule:
f1_0_main_Load\' -> f134_0_test_GT : arg1'=0, (arg2 > 0 /\ -100*x80+x70 >= 0 /\ 100+100*x80-x70 > 0 /\ arg1 > 0 /\ 1+x70 > 0), cost: 1-100*x80+x70

Applied deletion
Removed the following rules: 8

Chained accelerated rules with incoming rules
Start location: __init
   4: f1_0_main_Load -> f1_0_main_Load\' : (arg2 > 0 /\ arg1 > 0), cost: 1
   5: f1_0_main_Load\' -> f134_0_test_GT : arg1'=-100*x80+x70, (arg2 > 0 /\ -100*x80+x70 >= 0 /\ 100+100*x80-x70 > 0 /\ arg1 > 0 /\ 1+x70 > 0), cost: 1
   9: f1_0_main_Load\' -> f134_0_test_GT : arg1'=0, (arg2 > 0 /\ -100*x80+x70 >= 0 /\ 100+100*x80-x70 > 0 /\ arg1 > 0 /\ 1+x70 > 0), cost: 1-100*x80+x70
   3: __init -> f1_0_main_Load : arg2'=arg2P3, arg1'=arg1P3, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
  <empty>


Computing asymptotic complexity

Proved the following lower bound
Complexity:  Unknown
Cpx degree: ?

Solved cost: 0
Rule cost:   0

