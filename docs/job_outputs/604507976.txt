NO

Initial ITS

Start location: __init
Program variables: arg1 arg2
   0: f1_0_main_Load -> f89_0_loop_LE : arg1'=arg1p1, arg2'=arg2p1, (-arg1p1+arg2 == 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 1
   1: f89_0_loop_LE -> f131_0_loop_LE : arg1'=arg1p2, arg2'=arg2p2, (-50+arg1 < 0 /\ -19+arg1 > 0 /\ arg1-arg1p2 == 0), cost: 1
   2: f89_0_loop_LE -> f131_0_loop_LE : arg1'=arg1p3, arg2'=arg2p3, (-50+arg1 < 0 /\ -1-arg1p3+arg1 == 0 /\ -20+arg1 < 0 /\ arg1 > 0), cost: 1
   3: f131_0_loop_LE -> f89_0_loop_LE : arg1'=arg1p4, arg2'=arg2p4, (-arg1p4+arg1 == 0 /\ -11+arg1 < 0 /\ -30+arg1 < 0), cost: 1
   4: f131_0_loop_LE -> f89_0_loop_LE : arg1'=arg1p5, arg2'=arg2p5, (-10+arg1 > 0 /\ 1+arg1-arg1p5 == 0 /\ -29+arg1 < 0), cost: 1
   5: f131_0_loop_LE -> f89_0_loop_LE : arg1'=arg1p6, arg2'=arg2p6, (-39+arg1 > 0 /\ 1-arg1p6+arg1 == 0), cost: 1
   6: f131_0_loop_LE -> f89_0_loop_LE : arg1'=arg1p7, arg2'=arg2p7, (-arg1p7+arg1 == 0 /\ -28+arg1 > 0 /\ -40+arg1 < 0), cost: 1
   7: __init -> f1_0_main_Load : arg1'=arg1p8, arg2'=arg2p8, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2
   1: f89_0_loop_LE -> f131_0_loop_LE : arg1'=arg1p2, arg2'=arg2p2, (-50+arg1 < 0 /\ -19+arg1 > 0 /\ arg1-arg1p2 == 0), cost: 1
   2: f89_0_loop_LE -> f131_0_loop_LE : arg1'=arg1p3, arg2'=arg2p3, (-50+arg1 < 0 /\ -1-arg1p3+arg1 == 0 /\ -20+arg1 < 0 /\ arg1 > 0), cost: 1
   3: f131_0_loop_LE -> f89_0_loop_LE : arg1'=arg1p4, arg2'=arg2p4, (-arg1p4+arg1 == 0 /\ -11+arg1 < 0 /\ -30+arg1 < 0), cost: 1
   4: f131_0_loop_LE -> f89_0_loop_LE : arg1'=arg1p5, arg2'=arg2p5, (-10+arg1 > 0 /\ 1+arg1-arg1p5 == 0 /\ -29+arg1 < 0), cost: 1
   5: f131_0_loop_LE -> f89_0_loop_LE : arg1'=arg1p6, arg2'=arg2p6, (-39+arg1 > 0 /\ 1-arg1p6+arg1 == 0), cost: 1
   6: f131_0_loop_LE -> f89_0_loop_LE : arg1'=arg1p7, arg2'=arg2p7, (-arg1p7+arg1 == 0 /\ -28+arg1 > 0 /\ -40+arg1 < 0), cost: 1
   8: __init -> f89_0_loop_LE : arg1'=arg1p1, arg2'=arg2p1, (-arg1p1+arg2p8 == 0 /\ 1+arg2p8 > 0 /\ arg1p8 > 0), cost: 1

	Eliminating location f1_0_main_Load by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_Load : arg1'=arg1p8, arg2'=arg2p8, T, cost: 1
	Second rule:
	f1_0_main_Load -> f89_0_loop_LE : arg1'=arg1p1, arg2'=arg2p1, (-arg1p1+arg2 == 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 1
	New rule:
	__init -> f89_0_loop_LE : arg1'=arg1p1, arg2'=arg2p1, (-arg1p1+arg2p8 == 0 /\ 1+arg2p8 > 0 /\ arg1p8 > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 7

Simplified Transitions

Start location: __init
Program variables: arg1 arg2
   9: f89_0_loop_LE -> f131_0_loop_LE : arg2'=arg2p2, (-50+arg1 < 0 /\ -19+arg1 > 0), cost: 1
  10: f89_0_loop_LE -> f131_0_loop_LE : arg1'=-1+arg1, arg2'=arg2p3, (-50+arg1 < 0 /\ -20+arg1 < 0 /\ arg1 > 0), cost: 1
  11: f131_0_loop_LE -> f89_0_loop_LE : arg2'=arg2p4, (-11+arg1 < 0 /\ -30+arg1 < 0), cost: 1
  12: f131_0_loop_LE -> f89_0_loop_LE : arg1'=1+arg1, arg2'=arg2p5, (-10+arg1 > 0 /\ -29+arg1 < 0), cost: 1
  13: f131_0_loop_LE -> f89_0_loop_LE : arg1'=1+arg1, arg2'=arg2p6, -39+arg1 > 0, cost: 1
  14: f131_0_loop_LE -> f89_0_loop_LE : arg2'=arg2p7, (-28+arg1 > 0 /\ -40+arg1 < 0), cost: 1
  15: __init -> f89_0_loop_LE : arg1'=arg2p8, arg2'=arg2p1, (1+arg2p8 > 0), cost: 1

	Propagated Equalities

	Original rule:
	f89_0_loop_LE -> f131_0_loop_LE : arg1'=arg1p2, arg2'=arg2p2, (-50+arg1 < 0 /\ -19+arg1 > 0 /\ arg1-arg1p2 == 0), cost: 1
	New rule:
	f89_0_loop_LE -> f131_0_loop_LE : arg1'=arg1, arg2'=arg2p2, (0 == 0 /\ -50+arg1 < 0 /\ -19+arg1 > 0), cost: 1
	
		propagated equality arg1p2 = arg1
		
	Simplified Guard

	Original rule:
	f89_0_loop_LE -> f131_0_loop_LE : arg1'=arg1, arg2'=arg2p2, (0 == 0 /\ -50+arg1 < 0 /\ -19+arg1 > 0), cost: 1
	New rule:
	f89_0_loop_LE -> f131_0_loop_LE : arg1'=arg1, arg2'=arg2p2, (-50+arg1 < 0 /\ -19+arg1 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f89_0_loop_LE -> f131_0_loop_LE : arg1'=arg1, arg2'=arg2p2, (-50+arg1 < 0 /\ -19+arg1 > 0), cost: 1
	New rule:
	f89_0_loop_LE -> f131_0_loop_LE : arg2'=arg2p2, (-50+arg1 < 0 /\ -19+arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f89_0_loop_LE -> f131_0_loop_LE : arg1'=arg1p3, arg2'=arg2p3, (-50+arg1 < 0 /\ -1-arg1p3+arg1 == 0 /\ -20+arg1 < 0 /\ arg1 > 0), cost: 1
	New rule:
	f89_0_loop_LE -> f131_0_loop_LE : arg1'=-1+arg1, arg2'=arg2p3, (0 == 0 /\ -50+arg1 < 0 /\ -20+arg1 < 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg1p3 = -1+arg1
		
	Simplified Guard

	Original rule:
	f89_0_loop_LE -> f131_0_loop_LE : arg1'=-1+arg1, arg2'=arg2p3, (0 == 0 /\ -50+arg1 < 0 /\ -20+arg1 < 0 /\ arg1 > 0), cost: 1
	New rule:
	f89_0_loop_LE -> f131_0_loop_LE : arg1'=-1+arg1, arg2'=arg2p3, (-50+arg1 < 0 /\ -20+arg1 < 0 /\ arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f131_0_loop_LE -> f89_0_loop_LE : arg1'=arg1p4, arg2'=arg2p4, (-arg1p4+arg1 == 0 /\ -11+arg1 < 0 /\ -30+arg1 < 0), cost: 1
	New rule:
	f131_0_loop_LE -> f89_0_loop_LE : arg1'=arg1, arg2'=arg2p4, (0 == 0 /\ -11+arg1 < 0 /\ -30+arg1 < 0), cost: 1
	
		propagated equality arg1p4 = arg1
		
	Simplified Guard

	Original rule:
	f131_0_loop_LE -> f89_0_loop_LE : arg1'=arg1, arg2'=arg2p4, (0 == 0 /\ -11+arg1 < 0 /\ -30+arg1 < 0), cost: 1
	New rule:
	f131_0_loop_LE -> f89_0_loop_LE : arg1'=arg1, arg2'=arg2p4, (-11+arg1 < 0 /\ -30+arg1 < 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f131_0_loop_LE -> f89_0_loop_LE : arg1'=arg1, arg2'=arg2p4, (-11+arg1 < 0 /\ -30+arg1 < 0), cost: 1
	New rule:
	f131_0_loop_LE -> f89_0_loop_LE : arg2'=arg2p4, (-11+arg1 < 0 /\ -30+arg1 < 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f131_0_loop_LE -> f89_0_loop_LE : arg1'=arg1p5, arg2'=arg2p5, (-10+arg1 > 0 /\ 1+arg1-arg1p5 == 0 /\ -29+arg1 < 0), cost: 1
	New rule:
	f131_0_loop_LE -> f89_0_loop_LE : arg1'=1+arg1, arg2'=arg2p5, (0 == 0 /\ -10+arg1 > 0 /\ -29+arg1 < 0), cost: 1
	
		propagated equality arg1p5 = 1+arg1
		
	Simplified Guard

	Original rule:
	f131_0_loop_LE -> f89_0_loop_LE : arg1'=1+arg1, arg2'=arg2p5, (0 == 0 /\ -10+arg1 > 0 /\ -29+arg1 < 0), cost: 1
	New rule:
	f131_0_loop_LE -> f89_0_loop_LE : arg1'=1+arg1, arg2'=arg2p5, (-10+arg1 > 0 /\ -29+arg1 < 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f131_0_loop_LE -> f89_0_loop_LE : arg1'=arg1p6, arg2'=arg2p6, (-39+arg1 > 0 /\ 1-arg1p6+arg1 == 0), cost: 1
	New rule:
	f131_0_loop_LE -> f89_0_loop_LE : arg1'=1+arg1, arg2'=arg2p6, (0 == 0 /\ -39+arg1 > 0), cost: 1
	
		propagated equality arg1p6 = 1+arg1
		
	Simplified Guard

	Original rule:
	f131_0_loop_LE -> f89_0_loop_LE : arg1'=1+arg1, arg2'=arg2p6, (0 == 0 /\ -39+arg1 > 0), cost: 1
	New rule:
	f131_0_loop_LE -> f89_0_loop_LE : arg1'=1+arg1, arg2'=arg2p6, -39+arg1 > 0, cost: 1
	
	Propagated Equalities

	Original rule:
	f131_0_loop_LE -> f89_0_loop_LE : arg1'=arg1p7, arg2'=arg2p7, (-arg1p7+arg1 == 0 /\ -28+arg1 > 0 /\ -40+arg1 < 0), cost: 1
	New rule:
	f131_0_loop_LE -> f89_0_loop_LE : arg1'=arg1, arg2'=arg2p7, (0 == 0 /\ -28+arg1 > 0 /\ -40+arg1 < 0), cost: 1
	
		propagated equality arg1p7 = arg1
		
	Simplified Guard

	Original rule:
	f131_0_loop_LE -> f89_0_loop_LE : arg1'=arg1, arg2'=arg2p7, (0 == 0 /\ -28+arg1 > 0 /\ -40+arg1 < 0), cost: 1
	New rule:
	f131_0_loop_LE -> f89_0_loop_LE : arg1'=arg1, arg2'=arg2p7, (-28+arg1 > 0 /\ -40+arg1 < 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f131_0_loop_LE -> f89_0_loop_LE : arg1'=arg1, arg2'=arg2p7, (-28+arg1 > 0 /\ -40+arg1 < 0), cost: 1
	New rule:
	f131_0_loop_LE -> f89_0_loop_LE : arg2'=arg2p7, (-28+arg1 > 0 /\ -40+arg1 < 0), cost: 1
	
	Propagated Equalities

	Original rule:
	__init -> f89_0_loop_LE : arg1'=arg1p1, arg2'=arg2p1, (-arg1p1+arg2p8 == 0 /\ 1+arg2p8 > 0 /\ arg1p8 > 0), cost: 1
	New rule:
	__init -> f89_0_loop_LE : arg1'=arg2p8, arg2'=arg2p1, (0 == 0 /\ 1+arg2p8 > 0 /\ arg1p8 > 0), cost: 1
	
		propagated equality arg1p1 = arg2p8
		
	Simplified Guard

	Original rule:
	__init -> f89_0_loop_LE : arg1'=arg2p8, arg2'=arg2p1, (0 == 0 /\ 1+arg2p8 > 0 /\ arg1p8 > 0), cost: 1
	New rule:
	__init -> f89_0_loop_LE : arg1'=arg2p8, arg2'=arg2p1, (1+arg2p8 > 0 /\ arg1p8 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	__init -> f89_0_loop_LE : arg1'=arg2p8, arg2'=arg2p1, (1+arg2p8 > 0 /\ arg1p8 > 0), cost: 1
	New rule:
	__init -> f89_0_loop_LE : arg1'=arg2p8, arg2'=arg2p1, (1+arg2p8 > 0), cost: 1

Step with 15

	Trace

	15[(1+arg2p8 > 0)]
	
	Blocked

	[{}, {}]

Step with 9

	Trace

	15[(1+arg2p8 > 0)], 9[(-50+arg1 < 0 /\ -19+arg1 > 0)]
	
	Blocked

	[{}, {}, {}]

Step with 12

	Trace

	15[(1+arg2p8 > 0)], 9[(-50+arg1 < 0 /\ -19+arg1 > 0)], 12[(-10+arg1 > 0 /\ -29+arg1 < 0)]
	
	Blocked

	[{}, {}, {11[T]}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2
   9: f89_0_loop_LE -> f131_0_loop_LE : arg2'=arg2p2, (-50+arg1 < 0 /\ -19+arg1 > 0), cost: 1
  10: f89_0_loop_LE -> f131_0_loop_LE : arg1'=-1+arg1, arg2'=arg2p3, (-50+arg1 < 0 /\ -20+arg1 < 0 /\ arg1 > 0), cost: 1
  16: f89_0_loop_LE -> f89_0_loop_LE : arg1'=arg1+n, arg2'=arg2p5, (-10+arg1 > 0 /\ -19+arg1 > 0 /\ -1+n >= 0 /\ 50-arg1 > 0 /\ 30-arg1-n > 0), cost: 1
  11: f131_0_loop_LE -> f89_0_loop_LE : arg2'=arg2p4, (-11+arg1 < 0 /\ -30+arg1 < 0), cost: 1
  12: f131_0_loop_LE -> f89_0_loop_LE : arg1'=1+arg1, arg2'=arg2p5, (-10+arg1 > 0 /\ -29+arg1 < 0), cost: 1
  13: f131_0_loop_LE -> f89_0_loop_LE : arg1'=1+arg1, arg2'=arg2p6, -39+arg1 > 0, cost: 1
  14: f131_0_loop_LE -> f89_0_loop_LE : arg2'=arg2p7, (-28+arg1 > 0 /\ -40+arg1 < 0), cost: 1
  15: __init -> f89_0_loop_LE : arg1'=arg2p8, arg2'=arg2p1, (1+arg2p8 > 0), cost: 1

	Loop Acceleration

	Original rule:
	f89_0_loop_LE -> f89_0_loop_LE : arg1'=1+arg1, arg2'=arg2p5, (-50+arg1 < 0 /\ -10+arg1 > 0 /\ -19+arg1 > 0 /\ -29+arg1 < 0), cost: 1
	New rule:
	f89_0_loop_LE -> f89_0_loop_LE : arg1'=arg1+n, arg2'=arg2p5, (-10+arg1 > 0 /\ -19+arg1 > 0 /\ -1+n >= 0 /\ 50-arg1 > 0 /\ 30-arg1-n > 0), cost: 1

		29-arg1 > 0 [0]: montonic decrease yields 30-arg1-n > 0
		
		29-arg1 > 0 [1]: eventual increase yields (1 <= 0 /\ 29-arg1 > 0)
		
		-10+arg1 > 0 [0]: monotonic increase yields -10+arg1 > 0
		
		-19+arg1 > 0 [0]: monotonic increase yields -19+arg1 > 0
		
		50-arg1 > 0 [0]: monotonic increase yields 50-arg1 > 0, dependencies: 29-arg1 > 0
		
		Replacement map: {29-arg1 > 0 -> 30-arg1-n > 0, -10+arg1 > 0 -> -10+arg1 > 0, -19+arg1 > 0 -> -19+arg1 > 0, 50-arg1 > 0 -> 50-arg1 > 0}

	Trace

	15[(1+arg2p8 > 0)], 16[(-10+arg1 > 0 /\ -19+arg1 > 0 /\ -1+n >= 0 /\ 50-arg1 > 0 /\ 30-arg1-n > 0)]
	
	Blocked

	[{}, {}, {16[T]}]

Step with 9

	Trace

	15[(1+arg2p8 > 0)], 16[(-10+arg1 > 0 /\ -19+arg1 > 0 /\ -1+n >= 0 /\ 50-arg1 > 0 /\ 30-arg1-n > 0)], 9[(-50+arg1 < 0 /\ -19+arg1 > 0)]
	
	Blocked

	[{}, {}, {16[T]}, {}]

Step with 12

	Trace

	15[(1+arg2p8 > 0)], 16[(-10+arg1 > 0 /\ -19+arg1 > 0 /\ -1+n >= 0 /\ 50-arg1 > 0 /\ 30-arg1-n > 0)], 9[(-50+arg1 < 0 /\ -19+arg1 > 0)], 12[(-10+arg1 > 0 /\ -29+arg1 < 0)]
	
	Blocked

	[{}, {}, {16[T]}, {}, {}]

Covered

	Trace

	15[(1+arg2p8 > 0)], 16[(-10+arg1 > 0 /\ -19+arg1 > 0 /\ -1+n >= 0 /\ 50-arg1 > 0 /\ 30-arg1-n > 0)], 9[(-50+arg1 < 0 /\ -19+arg1 > 0)]
	
	Blocked

	[{}, {}, {16[T]}, {12[T]}]

Step with 14

	Trace

	15[(1+arg2p8 > 0)], 16[(-10+arg1 > 0 /\ -19+arg1 > 0 /\ -1+n >= 0 /\ 50-arg1 > 0 /\ 30-arg1-n > 0)], 9[(-50+arg1 < 0 /\ -19+arg1 > 0)], 14[(-28+arg1 > 0 /\ -40+arg1 < 0)]
	
	Blocked

	[{}, {}, {16[T]}, {12[T], 13[T]}, {}]

Nonterm

Start location: __init
Program variables: arg1 arg2
   9: f89_0_loop_LE -> f131_0_loop_LE : arg2'=arg2p2, (-50+arg1 < 0 /\ -19+arg1 > 0), cost: 1
  10: f89_0_loop_LE -> f131_0_loop_LE : arg1'=-1+arg1, arg2'=arg2p3, (-50+arg1 < 0 /\ -20+arg1 < 0 /\ arg1 > 0), cost: 1
  16: f89_0_loop_LE -> f89_0_loop_LE : arg1'=arg1+n, arg2'=arg2p5, (-10+arg1 > 0 /\ -19+arg1 > 0 /\ -1+n >= 0 /\ 50-arg1 > 0 /\ 30-arg1-n > 0), cost: 1
  17: f89_0_loop_LE -> LoAT_sink : (-1+n2 >= 0 /\ -19+arg1 > 0 /\ -28+arg1 > 0 /\ 50-arg1 > 0 /\ 40-arg1 > 0), cost: NONTERM
  11: f131_0_loop_LE -> f89_0_loop_LE : arg2'=arg2p4, (-11+arg1 < 0 /\ -30+arg1 < 0), cost: 1
  12: f131_0_loop_LE -> f89_0_loop_LE : arg1'=1+arg1, arg2'=arg2p5, (-10+arg1 > 0 /\ -29+arg1 < 0), cost: 1
  13: f131_0_loop_LE -> f89_0_loop_LE : arg1'=1+arg1, arg2'=arg2p6, -39+arg1 > 0, cost: 1
  14: f131_0_loop_LE -> f89_0_loop_LE : arg2'=arg2p7, (-28+arg1 > 0 /\ -40+arg1 < 0), cost: 1
  15: __init -> f89_0_loop_LE : arg1'=arg2p8, arg2'=arg2p1, (1+arg2p8 > 0), cost: 1

	Certificate of Non-Termination

	Original rule:
	f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2p7, (-50+arg1 < 0 /\ -19+arg1 > 0 /\ -28+arg1 > 0 /\ -40+arg1 < 0), cost: 1
	New rule:
	f89_0_loop_LE -> LoAT_sink : (-1+n2 >= 0 /\ -19+arg1 > 0 /\ -28+arg1 > 0 /\ 50-arg1 > 0 /\ 40-arg1 > 0), cost: NONTERM

		-19+arg1 > 0 [0]: monotonic increase yields -19+arg1 > 0
		
		-28+arg1 > 0 [0]: monotonic increase yields -28+arg1 > 0
		
		50-arg1 > 0 [0]: monotonic increase yields 50-arg1 > 0
		
		40-arg1 > 0 [0]: monotonic increase yields 40-arg1 > 0
		
		Replacement map: {-19+arg1 > 0 -> -19+arg1 > 0, -28+arg1 > 0 -> -28+arg1 > 0, 50-arg1 > 0 -> 50-arg1 > 0, 40-arg1 > 0 -> 40-arg1 > 0}

Step with 17

	Trace

	15[(1+arg2p8 > 0)], 16[(-10+arg1 > 0 /\ -19+arg1 > 0 /\ -1+n >= 0 /\ 50-arg1 > 0 /\ 30-arg1-n > 0)], 17[(-1+n2 >= 0 /\ -19+arg1 > 0 /\ -28+arg1 > 0 /\ 50-arg1 > 0 /\ 40-arg1 > 0)]
	
	Blocked

	[{}, {}, {16[T]}, {17[T]}]

Refute

	Counterexample

	[ arg1=20 arg2=0 ] 15 [ arg1=29 arg2=0 ] 16 [ arg1=arg1 arg2=arg2 ] 17
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
