WORST_CASE(Omega(0),?)

Initial ITS
Start location: __init
   0: f1_0_main_Load -> f160_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0 /\ 1-arg2P0 == 0), cost: 1
   1: f160_0_main_LE -> f160_0_main_LE : arg2'=arg2P1, arg1'=arg1P1, (-101+arg1 < 0 /\ arg2 > 0 /\ 11+arg1-arg1P1 == 0 /\ 1+arg2-arg2P1 == 0), cost: 1
   2: f160_0_main_LE -> f160_0_main_LE : arg2'=arg2P2, arg1'=arg1P2, (-1+arg2-arg2P2 == 0 /\ arg2 > 0 /\ -10+arg1-arg1P2 == 0 /\ -100+arg1 > 0), cost: 1
   3: __init -> f1_0_main_Load : arg2'=arg2P3, arg1'=arg1P3, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_Load -> f160_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0 /\ 1-arg2P0 == 0), cost: 1
New rule:
f1_0_main_Load -> f160_0_main_LE : arg2'=1, arg1'=arg1P0, (1+arg2 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0), cost: 1

Applied preprocessing
Original rule:
f160_0_main_LE -> f160_0_main_LE : arg2'=arg2P1, arg1'=arg1P1, (-101+arg1 < 0 /\ arg2 > 0 /\ 11+arg1-arg1P1 == 0 /\ 1+arg2-arg2P1 == 0), cost: 1
New rule:
f160_0_main_LE -> f160_0_main_LE : arg2'=1+arg2, arg1'=11+arg1, (arg2 > 0 /\ 101-arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f160_0_main_LE -> f160_0_main_LE : arg2'=arg2P2, arg1'=arg1P2, (-1+arg2-arg2P2 == 0 /\ arg2 > 0 /\ -10+arg1-arg1P2 == 0 /\ -100+arg1 > 0), cost: 1
New rule:
f160_0_main_LE -> f160_0_main_LE : arg2'=-1+arg2, arg1'=-10+arg1, (arg2 > 0 /\ -100+arg1 > 0), cost: 1

Simplified rules
Start location: __init
   4: f1_0_main_Load -> f160_0_main_LE : arg2'=1, arg1'=arg1P0, (1+arg2 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0), cost: 1
   5: f160_0_main_LE -> f160_0_main_LE : arg2'=1+arg2, arg1'=11+arg1, (arg2 > 0 /\ 101-arg1 > 0), cost: 1
   6: f160_0_main_LE -> f160_0_main_LE : arg2'=-1+arg2, arg1'=-10+arg1, (arg2 > 0 /\ -100+arg1 > 0), cost: 1
   3: __init -> f1_0_main_Load : arg2'=arg2P3, arg1'=arg1P3, TRUE, cost: 1


Applied acceleration
Original rule:
f160_0_main_LE -> f160_0_main_LE : arg2'=1+arg2, arg1'=11+arg1, (arg2 > 0 /\ 101-arg1 > 0), cost: 1
New rule:
f160_0_main_LE -> f160_0_main_LE : arg2'=arg2+n, arg1'=arg1+11*n, (arg2 > 0 /\ 112-arg1-11*n > 0 /\ n >= 0), cost: n
Sub-proof via acceration calculus written to file:///tmp/tmpnam_CNKkbk.txt

Applied acceleration
Original rule:
f160_0_main_LE -> f160_0_main_LE : arg2'=-1+arg2, arg1'=-10+arg1, (arg2 > 0 /\ -100+arg1 > 0), cost: 1
New rule:
f160_0_main_LE -> f160_0_main_LE : arg2'=arg2-n0, arg1'=-10*n0+arg1, (-90-10*n0+arg1 > 0 /\ n0 >= 0 /\ 1+arg2-n0 > 0), cost: n0
Sub-proof via acceration calculus written to file:///tmp/tmpnam_hmFeNe.txt

Applied instantiation
Original rule:
f160_0_main_LE -> f160_0_main_LE : arg2'=arg2-n0, arg1'=-10*n0+arg1, (-90-10*n0+arg1 > 0 /\ n0 >= 0 /\ 1+arg2-n0 > 0), cost: n0
New rule:
f160_0_main_LE -> f160_0_main_LE : arg2'=0, arg1'=-10*arg2+arg1, (-90-10*arg2+arg1 > 0 /\ 1 > 0 /\ arg2 >= 0), cost: arg2

Applied simplification
Original rule:
f160_0_main_LE -> f160_0_main_LE : arg2'=0, arg1'=-10*arg2+arg1, (-90-10*arg2+arg1 > 0 /\ 1 > 0 /\ arg2 >= 0), cost: arg2
New rule:
f160_0_main_LE -> f160_0_main_LE : arg2'=0, arg1'=-10*arg2+arg1, (-90-10*arg2+arg1 > 0 /\ arg2 >= 0), cost: arg2

Applied deletion
Removed the following rules: 5 6

Accelerated simple loops
Start location: __init
   4: f1_0_main_Load -> f160_0_main_LE : arg2'=1, arg1'=arg1P0, (1+arg2 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0), cost: 1
   7: f160_0_main_LE -> f160_0_main_LE : arg2'=arg2+n, arg1'=arg1+11*n, (arg2 > 0 /\ 112-arg1-11*n > 0 /\ n >= 0), cost: n
   9: f160_0_main_LE -> f160_0_main_LE : arg2'=0, arg1'=-10*arg2+arg1, (-90-10*arg2+arg1 > 0 /\ arg2 >= 0), cost: arg2
   3: __init -> f1_0_main_Load : arg2'=arg2P3, arg1'=arg1P3, TRUE, cost: 1


Applied chaining
First rule:
f1_0_main_Load -> f160_0_main_LE : arg2'=1, arg1'=arg1P0, (1+arg2 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0), cost: 1
Second rule:
f160_0_main_LE -> f160_0_main_LE : arg2'=arg2+n, arg1'=arg1+11*n, (arg2 > 0 /\ 112-arg1-11*n > 0 /\ n >= 0), cost: n
New rule:
f1_0_main_Load -> f160_0_main_LE : arg2'=1+n, arg1'=arg1P0+11*n, (112-arg1P0-11*n > 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0 /\ n >= 0), cost: 1+n

Applied chaining
First rule:
f1_0_main_Load -> f160_0_main_LE : arg2'=1, arg1'=arg1P0, (1+arg2 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0), cost: 1
Second rule:
f160_0_main_LE -> f160_0_main_LE : arg2'=0, arg1'=-10*arg2+arg1, (-90-10*arg2+arg1 > 0 /\ arg2 >= 0), cost: arg2
New rule:
f1_0_main_Load -> f160_0_main_LE : arg2'=0, arg1'=-10+arg1P0, (-100+arg1P0 > 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 2

Applied deletion
Removed the following rules: 7 9

Chained accelerated rules with incoming rules
Start location: __init
   4: f1_0_main_Load -> f160_0_main_LE : arg2'=1, arg1'=arg1P0, (1+arg2 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0), cost: 1
  10: f1_0_main_Load -> f160_0_main_LE : arg2'=1+n, arg1'=arg1P0+11*n, (112-arg1P0-11*n > 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0 /\ n >= 0), cost: 1+n
  11: f1_0_main_Load -> f160_0_main_LE : arg2'=0, arg1'=-10+arg1P0, (-100+arg1P0 > 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 2
   3: __init -> f1_0_main_Load : arg2'=arg2P3, arg1'=arg1P3, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
  <empty>


Computing asymptotic complexity

Proved the following lower bound
Complexity:  Unknown
Cpx degree: ?

Solved cost: 0
Rule cost:   0

