NO

Initial ITS

Start location: l6
Program variables: __const_14^0 __const_8^0 fvalue3^0 low6^0 mid4^0 ret_binary_search7^0 tmp^0 up5^0 x2^0
   0: l0 -> l1 : __const_14^0'=__const_14^post1, __const_8^0'=__const_8^post1, fvalue3^0'=fvalue3^post1, low6^0'=low6^post1, mid4^0'=mid4^post1, ret_binary_search7^0'=ret_binary_search7^post1, tmp^0'=tmp^post1, up5^0'=up5^post1, x2^0'=x2^post1, (mid4^0-mid4^post1 == 0 /\ low6^0-low6^post1 == 0 /\ -ret_binary_search7^post1+ret_binary_search7^0 == 0 /\ __const_8^0-__const_8^post1 == 0 /\ up5^0-up5^post1 == 0 /\ -x2^post1+x2^0 == 0 /\ -fvalue3^post1+fvalue3^0 == 0 /\ tmp^0-tmp^post1 == 0 /\ -__const_14^post1+__const_14^0 == 0), cost: 1
   1: l0 -> l2 : __const_14^0'=__const_14^post2, __const_8^0'=__const_8^post2, fvalue3^0'=fvalue3^post2, low6^0'=low6^post2, mid4^0'=mid4^post2, ret_binary_search7^0'=ret_binary_search7^post2, tmp^0'=tmp^post2, up5^0'=up5^post2, x2^0'=x2^post2, (0 == 0 /\ __const_8^0-__const_8^post2 == 0 /\ x2^0-x2^post2 == 0 /\ -low6^post2+low6^0 == 0 /\ -tmp^post2+tmp^0 == 0 /\ 1+up5^post2-low6^0 == 0 /\ -__const_14^post2+__const_14^0 == 0 /\ ret_binary_search7^0-ret_binary_search7^post2 == 0 /\ mid4^0-mid4^post2 == 0), cost: 1
   2: l0 -> l1 : __const_14^0'=__const_14^post3, __const_8^0'=__const_8^post3, fvalue3^0'=fvalue3^post3, low6^0'=low6^post3, mid4^0'=mid4^post3, ret_binary_search7^0'=ret_binary_search7^post3, tmp^0'=tmp^post3, up5^0'=up5^post3, x2^0'=x2^post3, (tmp^0-tmp^post3 == 0 /\ -low6^post3+low6^0 == 0 /\ -fvalue3^post3+fvalue3^0 == 0 /\ -__const_14^post3+__const_14^0 == 0 /\ -ret_binary_search7^post3+ret_binary_search7^0 == 0 /\ mid4^0-mid4^post3 == 0 /\ up5^0-up5^post3 == 0 /\ -x2^post3+x2^0 == 0 /\ __const_8^0-__const_8^post3 == 0), cost: 1
   6: l1 -> l2 : __const_14^0'=__const_14^post7, __const_8^0'=__const_8^post7, fvalue3^0'=fvalue3^post7, low6^0'=low6^post7, mid4^0'=mid4^post7, ret_binary_search7^0'=ret_binary_search7^post7, tmp^0'=tmp^post7, up5^0'=up5^post7, x2^0'=x2^post7, (-1-mid4^0+low6^post7 == 0 /\ -x2^post7+x2^0 == 0 /\ -mid4^post7+mid4^0 == 0 /\ __const_14^0-__const_14^post7 == 0 /\ tmp^0-tmp^post7 == 0 /\ __const_8^0-__const_8^post7 == 0 /\ -fvalue3^post7+fvalue3^0 == 0 /\ up5^0-up5^post7 == 0 /\ -ret_binary_search7^post7+ret_binary_search7^0 == 0), cost: 1
   7: l1 -> l2 : __const_14^0'=__const_14^post8, __const_8^0'=__const_8^post8, fvalue3^0'=fvalue3^post8, low6^0'=low6^post8, mid4^0'=mid4^post8, ret_binary_search7^0'=ret_binary_search7^post8, tmp^0'=tmp^post8, up5^0'=up5^post8, x2^0'=x2^post8, (-__const_14^post8+__const_14^0 == 0 /\ tmp^0-tmp^post8 == 0 /\ -fvalue3^post8+fvalue3^0 == 0 /\ mid4^0-mid4^post8 == 0 /\ -x2^post8+x2^0 == 0 /\ __const_8^0-__const_8^post8 == 0 /\ -ret_binary_search7^post8+ret_binary_search7^0 == 0 /\ -low6^post8+low6^0 == 0 /\ 1-mid4^0+up5^post8 == 0), cost: 1
   5: l2 -> l3 : __const_14^0'=__const_14^post6, __const_8^0'=__const_8^post6, fvalue3^0'=fvalue3^post6, low6^0'=low6^post6, mid4^0'=mid4^post6, ret_binary_search7^0'=ret_binary_search7^post6, tmp^0'=tmp^post6, up5^0'=up5^post6, x2^0'=x2^post6, (__const_14^0-__const_14^post6 == 0 /\ -x2^post6+x2^0 == 0 /\ -up5^post6+up5^0 == 0 /\ -ret_binary_search7^post6+ret_binary_search7^0 == 0 /\ -__const_8^post6+__const_8^0 == 0 /\ tmp^0-tmp^post6 == 0 /\ low6^0-low6^post6 == 0 /\ -mid4^post6+mid4^0 == 0 /\ -fvalue3^post6+fvalue3^0 == 0), cost: 1
   3: l3 -> l4 : __const_14^0'=__const_14^post4, __const_8^0'=__const_8^post4, fvalue3^0'=fvalue3^post4, low6^0'=low6^post4, mid4^0'=mid4^post4, ret_binary_search7^0'=ret_binary_search7^post4, tmp^0'=tmp^post4, up5^0'=up5^post4, x2^0'=x2^post4, (1+up5^0-low6^0 <= 0 /\ __const_14^0-__const_14^post4 == 0 /\ up5^0-up5^post4 == 0 /\ -fvalue3^post4+fvalue3^0 == 0 /\ mid4^0-mid4^post4 == 0 /\ ret_binary_search7^post4-fvalue3^0 == 0 /\ low6^0-low6^post4 == 0 /\ -x2^post4+x2^0 == 0 /\ -ret_binary_search7^post4+tmp^post4 == 0 /\ __const_8^0-__const_8^post4 == 0), cost: 1
   4: l3 -> l0 : __const_14^0'=__const_14^post5, __const_8^0'=__const_8^post5, fvalue3^0'=fvalue3^post5, low6^0'=low6^post5, mid4^0'=mid4^post5, ret_binary_search7^0'=ret_binary_search7^post5, tmp^0'=tmp^post5, up5^0'=up5^post5, x2^0'=x2^post5, (0 == 0 /\ -x2^post5+x2^0 == 0 /\ tmp^0-tmp^post5 == 0 /\ low6^0-low6^post5 == 0 /\ -up5^0+low6^0 <= 0 /\ __const_14^0-__const_14^post5 == 0 /\ -fvalue3^post5+fvalue3^0 == 0 /\ up5^0-up5^post5 == 0 /\ -__const_8^post5+__const_8^0 == 0 /\ -ret_binary_search7^post5+ret_binary_search7^0 == 0), cost: 1
   8: l5 -> l2 : __const_14^0'=__const_14^post9, __const_8^0'=__const_8^post9, fvalue3^0'=fvalue3^post9, low6^0'=low6^post9, mid4^0'=mid4^post9, ret_binary_search7^0'=ret_binary_search7^post9, tmp^0'=tmp^post9, up5^0'=up5^post9, x2^0'=x2^post9, (mid4^0-mid4^post9 == 0 /\ -__const_14^post9+__const_14^0 == 0 /\ __const_8^0-__const_8^post9 == 0 /\ low6^post9 == 0 /\ -__const_8^0+x2^post9 == 0 /\ 1+fvalue3^post9 == 0 /\ up5^post9-__const_14^0 == 0 /\ -tmp^post9+tmp^0 == 0 /\ ret_binary_search7^0-ret_binary_search7^post9 == 0), cost: 1
   9: l6 -> l5 : __const_14^0'=__const_14^post10, __const_8^0'=__const_8^post10, fvalue3^0'=fvalue3^post10, low6^0'=low6^post10, mid4^0'=mid4^post10, ret_binary_search7^0'=ret_binary_search7^post10, tmp^0'=tmp^post10, up5^0'=up5^post10, x2^0'=x2^post10, (up5^0-up5^post10 == 0 /\ tmp^0-tmp^post10 == 0 /\ -__const_14^post10+__const_14^0 == 0 /\ mid4^0-mid4^post10 == 0 /\ -fvalue3^post10+fvalue3^0 == 0 /\ low6^0-low6^post10 == 0 /\ -x2^post10+x2^0 == 0 /\ -ret_binary_search7^post10+ret_binary_search7^0 == 0 /\ __const_8^0-__const_8^post10 == 0), cost: 1

Chained Linear Paths

Start location: l6
Program variables: __const_14^0 __const_8^0 fvalue3^0 low6^0 mid4^0 ret_binary_search7^0 tmp^0 up5^0 x2^0
   0: l0 -> l1 : __const_14^0'=__const_14^post1, __const_8^0'=__const_8^post1, fvalue3^0'=fvalue3^post1, low6^0'=low6^post1, mid4^0'=mid4^post1, ret_binary_search7^0'=ret_binary_search7^post1, tmp^0'=tmp^post1, up5^0'=up5^post1, x2^0'=x2^post1, (mid4^0-mid4^post1 == 0 /\ low6^0-low6^post1 == 0 /\ -ret_binary_search7^post1+ret_binary_search7^0 == 0 /\ __const_8^0-__const_8^post1 == 0 /\ up5^0-up5^post1 == 0 /\ -x2^post1+x2^0 == 0 /\ -fvalue3^post1+fvalue3^0 == 0 /\ tmp^0-tmp^post1 == 0 /\ -__const_14^post1+__const_14^0 == 0), cost: 1
   1: l0 -> l2 : __const_14^0'=__const_14^post2, __const_8^0'=__const_8^post2, fvalue3^0'=fvalue3^post2, low6^0'=low6^post2, mid4^0'=mid4^post2, ret_binary_search7^0'=ret_binary_search7^post2, tmp^0'=tmp^post2, up5^0'=up5^post2, x2^0'=x2^post2, (0 == 0 /\ __const_8^0-__const_8^post2 == 0 /\ x2^0-x2^post2 == 0 /\ -low6^post2+low6^0 == 0 /\ -tmp^post2+tmp^0 == 0 /\ 1+up5^post2-low6^0 == 0 /\ -__const_14^post2+__const_14^0 == 0 /\ ret_binary_search7^0-ret_binary_search7^post2 == 0 /\ mid4^0-mid4^post2 == 0), cost: 1
   2: l0 -> l1 : __const_14^0'=__const_14^post3, __const_8^0'=__const_8^post3, fvalue3^0'=fvalue3^post3, low6^0'=low6^post3, mid4^0'=mid4^post3, ret_binary_search7^0'=ret_binary_search7^post3, tmp^0'=tmp^post3, up5^0'=up5^post3, x2^0'=x2^post3, (tmp^0-tmp^post3 == 0 /\ -low6^post3+low6^0 == 0 /\ -fvalue3^post3+fvalue3^0 == 0 /\ -__const_14^post3+__const_14^0 == 0 /\ -ret_binary_search7^post3+ret_binary_search7^0 == 0 /\ mid4^0-mid4^post3 == 0 /\ up5^0-up5^post3 == 0 /\ -x2^post3+x2^0 == 0 /\ __const_8^0-__const_8^post3 == 0), cost: 1
   6: l1 -> l2 : __const_14^0'=__const_14^post7, __const_8^0'=__const_8^post7, fvalue3^0'=fvalue3^post7, low6^0'=low6^post7, mid4^0'=mid4^post7, ret_binary_search7^0'=ret_binary_search7^post7, tmp^0'=tmp^post7, up5^0'=up5^post7, x2^0'=x2^post7, (-1-mid4^0+low6^post7 == 0 /\ -x2^post7+x2^0 == 0 /\ -mid4^post7+mid4^0 == 0 /\ __const_14^0-__const_14^post7 == 0 /\ tmp^0-tmp^post7 == 0 /\ __const_8^0-__const_8^post7 == 0 /\ -fvalue3^post7+fvalue3^0 == 0 /\ up5^0-up5^post7 == 0 /\ -ret_binary_search7^post7+ret_binary_search7^0 == 0), cost: 1
   7: l1 -> l2 : __const_14^0'=__const_14^post8, __const_8^0'=__const_8^post8, fvalue3^0'=fvalue3^post8, low6^0'=low6^post8, mid4^0'=mid4^post8, ret_binary_search7^0'=ret_binary_search7^post8, tmp^0'=tmp^post8, up5^0'=up5^post8, x2^0'=x2^post8, (-__const_14^post8+__const_14^0 == 0 /\ tmp^0-tmp^post8 == 0 /\ -fvalue3^post8+fvalue3^0 == 0 /\ mid4^0-mid4^post8 == 0 /\ -x2^post8+x2^0 == 0 /\ __const_8^0-__const_8^post8 == 0 /\ -ret_binary_search7^post8+ret_binary_search7^0 == 0 /\ -low6^post8+low6^0 == 0 /\ 1-mid4^0+up5^post8 == 0), cost: 1
   5: l2 -> l3 : __const_14^0'=__const_14^post6, __const_8^0'=__const_8^post6, fvalue3^0'=fvalue3^post6, low6^0'=low6^post6, mid4^0'=mid4^post6, ret_binary_search7^0'=ret_binary_search7^post6, tmp^0'=tmp^post6, up5^0'=up5^post6, x2^0'=x2^post6, (__const_14^0-__const_14^post6 == 0 /\ -x2^post6+x2^0 == 0 /\ -up5^post6+up5^0 == 0 /\ -ret_binary_search7^post6+ret_binary_search7^0 == 0 /\ -__const_8^post6+__const_8^0 == 0 /\ tmp^0-tmp^post6 == 0 /\ low6^0-low6^post6 == 0 /\ -mid4^post6+mid4^0 == 0 /\ -fvalue3^post6+fvalue3^0 == 0), cost: 1
   3: l3 -> l4 : __const_14^0'=__const_14^post4, __const_8^0'=__const_8^post4, fvalue3^0'=fvalue3^post4, low6^0'=low6^post4, mid4^0'=mid4^post4, ret_binary_search7^0'=ret_binary_search7^post4, tmp^0'=tmp^post4, up5^0'=up5^post4, x2^0'=x2^post4, (1+up5^0-low6^0 <= 0 /\ __const_14^0-__const_14^post4 == 0 /\ up5^0-up5^post4 == 0 /\ -fvalue3^post4+fvalue3^0 == 0 /\ mid4^0-mid4^post4 == 0 /\ ret_binary_search7^post4-fvalue3^0 == 0 /\ low6^0-low6^post4 == 0 /\ -x2^post4+x2^0 == 0 /\ -ret_binary_search7^post4+tmp^post4 == 0 /\ __const_8^0-__const_8^post4 == 0), cost: 1
   4: l3 -> l0 : __const_14^0'=__const_14^post5, __const_8^0'=__const_8^post5, fvalue3^0'=fvalue3^post5, low6^0'=low6^post5, mid4^0'=mid4^post5, ret_binary_search7^0'=ret_binary_search7^post5, tmp^0'=tmp^post5, up5^0'=up5^post5, x2^0'=x2^post5, (0 == 0 /\ -x2^post5+x2^0 == 0 /\ tmp^0-tmp^post5 == 0 /\ low6^0-low6^post5 == 0 /\ -up5^0+low6^0 <= 0 /\ __const_14^0-__const_14^post5 == 0 /\ -fvalue3^post5+fvalue3^0 == 0 /\ up5^0-up5^post5 == 0 /\ -__const_8^post5+__const_8^0 == 0 /\ -ret_binary_search7^post5+ret_binary_search7^0 == 0), cost: 1
  10: l6 -> l2 : __const_14^0'=__const_14^post9, __const_8^0'=__const_8^post9, fvalue3^0'=fvalue3^post9, low6^0'=low6^post9, mid4^0'=mid4^post9, ret_binary_search7^0'=ret_binary_search7^post9, tmp^0'=tmp^post9, up5^0'=up5^post9, x2^0'=x2^post9, (-__const_8^post10+x2^post9 == 0 /\ low6^post9 == 0 /\ up5^0-up5^post10 == 0 /\ tmp^0-tmp^post10 == 0 /\ -__const_14^post10+__const_14^0 == 0 /\ mid4^0-mid4^post10 == 0 /\ 1+fvalue3^post9 == 0 /\ __const_8^post10-__const_8^post9 == 0 /\ -fvalue3^post10+fvalue3^0 == 0 /\ mid4^post10-mid4^post9 == 0 /\ low6^0-low6^post10 == 0 /\ -x2^post10+x2^0 == 0 /\ ret_binary_search7^post10-ret_binary_search7^post9 == 0 /\ -tmp^post9+tmp^post10 == 0 /\ __const_14^post10-__const_14^post9 == 0 /\ -ret_binary_search7^post10+ret_binary_search7^0 == 0 /\ __const_8^0-__const_8^post10 == 0 /\ -__const_14^post10+up5^post9 == 0), cost: 1

	Eliminating location l5 by chaining:

	Applied chaining

	First rule:
	l6 -> l5 : __const_14^0'=__const_14^post10, __const_8^0'=__const_8^post10, fvalue3^0'=fvalue3^post10, low6^0'=low6^post10, mid4^0'=mid4^post10, ret_binary_search7^0'=ret_binary_search7^post10, tmp^0'=tmp^post10, up5^0'=up5^post10, x2^0'=x2^post10, (up5^0-up5^post10 == 0 /\ tmp^0-tmp^post10 == 0 /\ -__const_14^post10+__const_14^0 == 0 /\ mid4^0-mid4^post10 == 0 /\ -fvalue3^post10+fvalue3^0 == 0 /\ low6^0-low6^post10 == 0 /\ -x2^post10+x2^0 == 0 /\ -ret_binary_search7^post10+ret_binary_search7^0 == 0 /\ __const_8^0-__const_8^post10 == 0), cost: 1
	Second rule:
	l5 -> l2 : __const_14^0'=__const_14^post9, __const_8^0'=__const_8^post9, fvalue3^0'=fvalue3^post9, low6^0'=low6^post9, mid4^0'=mid4^post9, ret_binary_search7^0'=ret_binary_search7^post9, tmp^0'=tmp^post9, up5^0'=up5^post9, x2^0'=x2^post9, (mid4^0-mid4^post9 == 0 /\ -__const_14^post9+__const_14^0 == 0 /\ __const_8^0-__const_8^post9 == 0 /\ low6^post9 == 0 /\ -__const_8^0+x2^post9 == 0 /\ 1+fvalue3^post9 == 0 /\ up5^post9-__const_14^0 == 0 /\ -tmp^post9+tmp^0 == 0 /\ ret_binary_search7^0-ret_binary_search7^post9 == 0), cost: 1
	New rule:
	l6 -> l2 : __const_14^0'=__const_14^post9, __const_8^0'=__const_8^post9, fvalue3^0'=fvalue3^post9, low6^0'=low6^post9, mid4^0'=mid4^post9, ret_binary_search7^0'=ret_binary_search7^post9, tmp^0'=tmp^post9, up5^0'=up5^post9, x2^0'=x2^post9, (-__const_8^post10+x2^post9 == 0 /\ low6^post9 == 0 /\ up5^0-up5^post10 == 0 /\ tmp^0-tmp^post10 == 0 /\ -__const_14^post10+__const_14^0 == 0 /\ mid4^0-mid4^post10 == 0 /\ 1+fvalue3^post9 == 0 /\ __const_8^post10-__const_8^post9 == 0 /\ -fvalue3^post10+fvalue3^0 == 0 /\ mid4^post10-mid4^post9 == 0 /\ low6^0-low6^post10 == 0 /\ -x2^post10+x2^0 == 0 /\ ret_binary_search7^post10-ret_binary_search7^post9 == 0 /\ -tmp^post9+tmp^post10 == 0 /\ __const_14^post10-__const_14^post9 == 0 /\ -ret_binary_search7^post10+ret_binary_search7^0 == 0 /\ __const_8^0-__const_8^post10 == 0 /\ -__const_14^post10+up5^post9 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 8 9

Simplified Transitions

Start location: l6
Program variables: __const_14^0 __const_8^0 fvalue3^0 low6^0 mid4^0 ret_binary_search7^0 tmp^0 up5^0 x2^0
  11: l0 -> l1 : T, cost: 1
  12: l0 -> l2 : fvalue3^0'=fvalue3^post2, up5^0'=-1+low6^0, T, cost: 1
  13: l0 -> l1 : T, cost: 1
  17: l1 -> l2 : low6^0'=1+mid4^0, T, cost: 1
  18: l1 -> l2 : up5^0'=-1+mid4^0, T, cost: 1
  16: l2 -> l3 : T, cost: 1
  14: l3 -> l4 : ret_binary_search7^0'=fvalue3^0, tmp^0'=fvalue3^0, 1+up5^0-low6^0 <= 0, cost: 1
  15: l3 -> l0 : mid4^0'=mid4^post5, -up5^0+low6^0 <= 0, cost: 1
  19: l6 -> l2 : fvalue3^0'=-1, low6^0'=0, up5^0'=__const_14^0, x2^0'=__const_8^0, T, cost: 1

	Propagated Equalities

	Original rule:
	l0 -> l1 : __const_14^0'=__const_14^post1, __const_8^0'=__const_8^post1, fvalue3^0'=fvalue3^post1, low6^0'=low6^post1, mid4^0'=mid4^post1, ret_binary_search7^0'=ret_binary_search7^post1, tmp^0'=tmp^post1, up5^0'=up5^post1, x2^0'=x2^post1, (mid4^0-mid4^post1 == 0 /\ low6^0-low6^post1 == 0 /\ -ret_binary_search7^post1+ret_binary_search7^0 == 0 /\ __const_8^0-__const_8^post1 == 0 /\ up5^0-up5^post1 == 0 /\ -x2^post1+x2^0 == 0 /\ -fvalue3^post1+fvalue3^0 == 0 /\ tmp^0-tmp^post1 == 0 /\ -__const_14^post1+__const_14^0 == 0), cost: 1
	New rule:
	l0 -> l1 : __const_14^0'=__const_14^0, __const_8^0'=__const_8^0, fvalue3^0'=fvalue3^0, low6^0'=low6^0, mid4^0'=mid4^0, ret_binary_search7^0'=ret_binary_search7^0, tmp^0'=tmp^0, up5^0'=up5^0, x2^0'=x2^0, 0 == 0, cost: 1
	
		propagated equality mid4^post1 = mid4^0
		
		propagated equality low6^post1 = low6^0
		
		propagated equality ret_binary_search7^post1 = ret_binary_search7^0
		
		propagated equality __const_8^post1 = __const_8^0
		
		propagated equality up5^post1 = up5^0
		
		propagated equality x2^post1 = x2^0
		
		propagated equality fvalue3^post1 = fvalue3^0
		
		propagated equality tmp^post1 = tmp^0
		
		propagated equality __const_14^post1 = __const_14^0
		
	Simplified Guard

	Original rule:
	l0 -> l1 : __const_14^0'=__const_14^0, __const_8^0'=__const_8^0, fvalue3^0'=fvalue3^0, low6^0'=low6^0, mid4^0'=mid4^0, ret_binary_search7^0'=ret_binary_search7^0, tmp^0'=tmp^0, up5^0'=up5^0, x2^0'=x2^0, 0 == 0, cost: 1
	New rule:
	l0 -> l1 : __const_14^0'=__const_14^0, __const_8^0'=__const_8^0, fvalue3^0'=fvalue3^0, low6^0'=low6^0, mid4^0'=mid4^0, ret_binary_search7^0'=ret_binary_search7^0, tmp^0'=tmp^0, up5^0'=up5^0, x2^0'=x2^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l1 : __const_14^0'=__const_14^0, __const_8^0'=__const_8^0, fvalue3^0'=fvalue3^0, low6^0'=low6^0, mid4^0'=mid4^0, ret_binary_search7^0'=ret_binary_search7^0, tmp^0'=tmp^0, up5^0'=up5^0, x2^0'=x2^0, T, cost: 1
	New rule:
	l0 -> l1 : T, cost: 1
	
	Propagated Equalities

	Original rule:
	l0 -> l2 : __const_14^0'=__const_14^post2, __const_8^0'=__const_8^post2, fvalue3^0'=fvalue3^post2, low6^0'=low6^post2, mid4^0'=mid4^post2, ret_binary_search7^0'=ret_binary_search7^post2, tmp^0'=tmp^post2, up5^0'=up5^post2, x2^0'=x2^post2, (0 == 0 /\ __const_8^0-__const_8^post2 == 0 /\ x2^0-x2^post2 == 0 /\ -low6^post2+low6^0 == 0 /\ -tmp^post2+tmp^0 == 0 /\ 1+up5^post2-low6^0 == 0 /\ -__const_14^post2+__const_14^0 == 0 /\ ret_binary_search7^0-ret_binary_search7^post2 == 0 /\ mid4^0-mid4^post2 == 0), cost: 1
	New rule:
	l0 -> l2 : __const_14^0'=__const_14^0, __const_8^0'=__const_8^0, fvalue3^0'=fvalue3^post2, low6^0'=low6^0, mid4^0'=mid4^0, ret_binary_search7^0'=ret_binary_search7^0, tmp^0'=tmp^0, up5^0'=-1+low6^0, x2^0'=x2^0, 0 == 0, cost: 1
	
		propagated equality __const_8^post2 = __const_8^0
		
		propagated equality x2^post2 = x2^0
		
		propagated equality low6^post2 = low6^0
		
		propagated equality tmp^post2 = tmp^0
		
		propagated equality up5^post2 = -1+low6^0
		
		propagated equality __const_14^post2 = __const_14^0
		
		propagated equality ret_binary_search7^post2 = ret_binary_search7^0
		
		propagated equality mid4^post2 = mid4^0
		
	Simplified Guard

	Original rule:
	l0 -> l2 : __const_14^0'=__const_14^0, __const_8^0'=__const_8^0, fvalue3^0'=fvalue3^post2, low6^0'=low6^0, mid4^0'=mid4^0, ret_binary_search7^0'=ret_binary_search7^0, tmp^0'=tmp^0, up5^0'=-1+low6^0, x2^0'=x2^0, 0 == 0, cost: 1
	New rule:
	l0 -> l2 : __const_14^0'=__const_14^0, __const_8^0'=__const_8^0, fvalue3^0'=fvalue3^post2, low6^0'=low6^0, mid4^0'=mid4^0, ret_binary_search7^0'=ret_binary_search7^0, tmp^0'=tmp^0, up5^0'=-1+low6^0, x2^0'=x2^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l2 : __const_14^0'=__const_14^0, __const_8^0'=__const_8^0, fvalue3^0'=fvalue3^post2, low6^0'=low6^0, mid4^0'=mid4^0, ret_binary_search7^0'=ret_binary_search7^0, tmp^0'=tmp^0, up5^0'=-1+low6^0, x2^0'=x2^0, T, cost: 1
	New rule:
	l0 -> l2 : fvalue3^0'=fvalue3^post2, up5^0'=-1+low6^0, T, cost: 1
	
	Propagated Equalities

	Original rule:
	l0 -> l1 : __const_14^0'=__const_14^post3, __const_8^0'=__const_8^post3, fvalue3^0'=fvalue3^post3, low6^0'=low6^post3, mid4^0'=mid4^post3, ret_binary_search7^0'=ret_binary_search7^post3, tmp^0'=tmp^post3, up5^0'=up5^post3, x2^0'=x2^post3, (tmp^0-tmp^post3 == 0 /\ -low6^post3+low6^0 == 0 /\ -fvalue3^post3+fvalue3^0 == 0 /\ -__const_14^post3+__const_14^0 == 0 /\ -ret_binary_search7^post3+ret_binary_search7^0 == 0 /\ mid4^0-mid4^post3 == 0 /\ up5^0-up5^post3 == 0 /\ -x2^post3+x2^0 == 0 /\ __const_8^0-__const_8^post3 == 0), cost: 1
	New rule:
	l0 -> l1 : __const_14^0'=__const_14^0, __const_8^0'=__const_8^0, fvalue3^0'=fvalue3^0, low6^0'=low6^0, mid4^0'=mid4^0, ret_binary_search7^0'=ret_binary_search7^0, tmp^0'=tmp^0, up5^0'=up5^0, x2^0'=x2^0, 0 == 0, cost: 1
	
		propagated equality tmp^post3 = tmp^0
		
		propagated equality low6^post3 = low6^0
		
		propagated equality fvalue3^post3 = fvalue3^0
		
		propagated equality __const_14^post3 = __const_14^0
		
		propagated equality ret_binary_search7^post3 = ret_binary_search7^0
		
		propagated equality mid4^post3 = mid4^0
		
		propagated equality up5^post3 = up5^0
		
		propagated equality x2^post3 = x2^0
		
		propagated equality __const_8^post3 = __const_8^0
		
	Simplified Guard

	Original rule:
	l0 -> l1 : __const_14^0'=__const_14^0, __const_8^0'=__const_8^0, fvalue3^0'=fvalue3^0, low6^0'=low6^0, mid4^0'=mid4^0, ret_binary_search7^0'=ret_binary_search7^0, tmp^0'=tmp^0, up5^0'=up5^0, x2^0'=x2^0, 0 == 0, cost: 1
	New rule:
	l0 -> l1 : __const_14^0'=__const_14^0, __const_8^0'=__const_8^0, fvalue3^0'=fvalue3^0, low6^0'=low6^0, mid4^0'=mid4^0, ret_binary_search7^0'=ret_binary_search7^0, tmp^0'=tmp^0, up5^0'=up5^0, x2^0'=x2^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l1 : __const_14^0'=__const_14^0, __const_8^0'=__const_8^0, fvalue3^0'=fvalue3^0, low6^0'=low6^0, mid4^0'=mid4^0, ret_binary_search7^0'=ret_binary_search7^0, tmp^0'=tmp^0, up5^0'=up5^0, x2^0'=x2^0, T, cost: 1
	New rule:
	l0 -> l1 : T, cost: 1
	
	Propagated Equalities

	Original rule:
	l3 -> l4 : __const_14^0'=__const_14^post4, __const_8^0'=__const_8^post4, fvalue3^0'=fvalue3^post4, low6^0'=low6^post4, mid4^0'=mid4^post4, ret_binary_search7^0'=ret_binary_search7^post4, tmp^0'=tmp^post4, up5^0'=up5^post4, x2^0'=x2^post4, (1+up5^0-low6^0 <= 0 /\ __const_14^0-__const_14^post4 == 0 /\ up5^0-up5^post4 == 0 /\ -fvalue3^post4+fvalue3^0 == 0 /\ mid4^0-mid4^post4 == 0 /\ ret_binary_search7^post4-fvalue3^0 == 0 /\ low6^0-low6^post4 == 0 /\ -x2^post4+x2^0 == 0 /\ -ret_binary_search7^post4+tmp^post4 == 0 /\ __const_8^0-__const_8^post4 == 0), cost: 1
	New rule:
	l3 -> l4 : __const_14^0'=__const_14^0, __const_8^0'=__const_8^0, fvalue3^0'=fvalue3^0, low6^0'=low6^0, mid4^0'=mid4^0, ret_binary_search7^0'=fvalue3^0, tmp^0'=fvalue3^0, up5^0'=up5^0, x2^0'=x2^0, (0 == 0 /\ 1+up5^0-low6^0 <= 0), cost: 1
	
		propagated equality __const_14^post4 = __const_14^0
		
		propagated equality up5^post4 = up5^0
		
		propagated equality fvalue3^post4 = fvalue3^0
		
		propagated equality mid4^post4 = mid4^0
		
		propagated equality ret_binary_search7^post4 = fvalue3^0
		
		propagated equality low6^post4 = low6^0
		
		propagated equality x2^post4 = x2^0
		
		propagated equality tmp^post4 = fvalue3^0
		
		propagated equality __const_8^post4 = __const_8^0
		
	Simplified Guard

	Original rule:
	l3 -> l4 : __const_14^0'=__const_14^0, __const_8^0'=__const_8^0, fvalue3^0'=fvalue3^0, low6^0'=low6^0, mid4^0'=mid4^0, ret_binary_search7^0'=fvalue3^0, tmp^0'=fvalue3^0, up5^0'=up5^0, x2^0'=x2^0, (0 == 0 /\ 1+up5^0-low6^0 <= 0), cost: 1
	New rule:
	l3 -> l4 : __const_14^0'=__const_14^0, __const_8^0'=__const_8^0, fvalue3^0'=fvalue3^0, low6^0'=low6^0, mid4^0'=mid4^0, ret_binary_search7^0'=fvalue3^0, tmp^0'=fvalue3^0, up5^0'=up5^0, x2^0'=x2^0, 1+up5^0-low6^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l3 -> l4 : __const_14^0'=__const_14^0, __const_8^0'=__const_8^0, fvalue3^0'=fvalue3^0, low6^0'=low6^0, mid4^0'=mid4^0, ret_binary_search7^0'=fvalue3^0, tmp^0'=fvalue3^0, up5^0'=up5^0, x2^0'=x2^0, 1+up5^0-low6^0 <= 0, cost: 1
	New rule:
	l3 -> l4 : ret_binary_search7^0'=fvalue3^0, tmp^0'=fvalue3^0, 1+up5^0-low6^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l3 -> l0 : __const_14^0'=__const_14^post5, __const_8^0'=__const_8^post5, fvalue3^0'=fvalue3^post5, low6^0'=low6^post5, mid4^0'=mid4^post5, ret_binary_search7^0'=ret_binary_search7^post5, tmp^0'=tmp^post5, up5^0'=up5^post5, x2^0'=x2^post5, (0 == 0 /\ -x2^post5+x2^0 == 0 /\ tmp^0-tmp^post5 == 0 /\ low6^0-low6^post5 == 0 /\ -up5^0+low6^0 <= 0 /\ __const_14^0-__const_14^post5 == 0 /\ -fvalue3^post5+fvalue3^0 == 0 /\ up5^0-up5^post5 == 0 /\ -__const_8^post5+__const_8^0 == 0 /\ -ret_binary_search7^post5+ret_binary_search7^0 == 0), cost: 1
	New rule:
	l3 -> l0 : __const_14^0'=__const_14^0, __const_8^0'=__const_8^0, fvalue3^0'=fvalue3^0, low6^0'=low6^0, mid4^0'=mid4^post5, ret_binary_search7^0'=ret_binary_search7^0, tmp^0'=tmp^0, up5^0'=up5^0, x2^0'=x2^0, (0 == 0 /\ -up5^0+low6^0 <= 0), cost: 1
	
		propagated equality x2^post5 = x2^0
		
		propagated equality tmp^post5 = tmp^0
		
		propagated equality low6^post5 = low6^0
		
		propagated equality __const_14^post5 = __const_14^0
		
		propagated equality fvalue3^post5 = fvalue3^0
		
		propagated equality up5^post5 = up5^0
		
		propagated equality __const_8^post5 = __const_8^0
		
		propagated equality ret_binary_search7^post5 = ret_binary_search7^0
		
	Simplified Guard

	Original rule:
	l3 -> l0 : __const_14^0'=__const_14^0, __const_8^0'=__const_8^0, fvalue3^0'=fvalue3^0, low6^0'=low6^0, mid4^0'=mid4^post5, ret_binary_search7^0'=ret_binary_search7^0, tmp^0'=tmp^0, up5^0'=up5^0, x2^0'=x2^0, (0 == 0 /\ -up5^0+low6^0 <= 0), cost: 1
	New rule:
	l3 -> l0 : __const_14^0'=__const_14^0, __const_8^0'=__const_8^0, fvalue3^0'=fvalue3^0, low6^0'=low6^0, mid4^0'=mid4^post5, ret_binary_search7^0'=ret_binary_search7^0, tmp^0'=tmp^0, up5^0'=up5^0, x2^0'=x2^0, -up5^0+low6^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l3 -> l0 : __const_14^0'=__const_14^0, __const_8^0'=__const_8^0, fvalue3^0'=fvalue3^0, low6^0'=low6^0, mid4^0'=mid4^post5, ret_binary_search7^0'=ret_binary_search7^0, tmp^0'=tmp^0, up5^0'=up5^0, x2^0'=x2^0, -up5^0+low6^0 <= 0, cost: 1
	New rule:
	l3 -> l0 : mid4^0'=mid4^post5, -up5^0+low6^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l2 -> l3 : __const_14^0'=__const_14^post6, __const_8^0'=__const_8^post6, fvalue3^0'=fvalue3^post6, low6^0'=low6^post6, mid4^0'=mid4^post6, ret_binary_search7^0'=ret_binary_search7^post6, tmp^0'=tmp^post6, up5^0'=up5^post6, x2^0'=x2^post6, (__const_14^0-__const_14^post6 == 0 /\ -x2^post6+x2^0 == 0 /\ -up5^post6+up5^0 == 0 /\ -ret_binary_search7^post6+ret_binary_search7^0 == 0 /\ -__const_8^post6+__const_8^0 == 0 /\ tmp^0-tmp^post6 == 0 /\ low6^0-low6^post6 == 0 /\ -mid4^post6+mid4^0 == 0 /\ -fvalue3^post6+fvalue3^0 == 0), cost: 1
	New rule:
	l2 -> l3 : __const_14^0'=__const_14^0, __const_8^0'=__const_8^0, fvalue3^0'=fvalue3^0, low6^0'=low6^0, mid4^0'=mid4^0, ret_binary_search7^0'=ret_binary_search7^0, tmp^0'=tmp^0, up5^0'=up5^0, x2^0'=x2^0, 0 == 0, cost: 1
	
		propagated equality __const_14^post6 = __const_14^0
		
		propagated equality x2^post6 = x2^0
		
		propagated equality up5^post6 = up5^0
		
		propagated equality ret_binary_search7^post6 = ret_binary_search7^0
		
		propagated equality __const_8^post6 = __const_8^0
		
		propagated equality tmp^post6 = tmp^0
		
		propagated equality low6^post6 = low6^0
		
		propagated equality mid4^post6 = mid4^0
		
		propagated equality fvalue3^post6 = fvalue3^0
		
	Simplified Guard

	Original rule:
	l2 -> l3 : __const_14^0'=__const_14^0, __const_8^0'=__const_8^0, fvalue3^0'=fvalue3^0, low6^0'=low6^0, mid4^0'=mid4^0, ret_binary_search7^0'=ret_binary_search7^0, tmp^0'=tmp^0, up5^0'=up5^0, x2^0'=x2^0, 0 == 0, cost: 1
	New rule:
	l2 -> l3 : __const_14^0'=__const_14^0, __const_8^0'=__const_8^0, fvalue3^0'=fvalue3^0, low6^0'=low6^0, mid4^0'=mid4^0, ret_binary_search7^0'=ret_binary_search7^0, tmp^0'=tmp^0, up5^0'=up5^0, x2^0'=x2^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l2 -> l3 : __const_14^0'=__const_14^0, __const_8^0'=__const_8^0, fvalue3^0'=fvalue3^0, low6^0'=low6^0, mid4^0'=mid4^0, ret_binary_search7^0'=ret_binary_search7^0, tmp^0'=tmp^0, up5^0'=up5^0, x2^0'=x2^0, T, cost: 1
	New rule:
	l2 -> l3 : T, cost: 1
	
	Propagated Equalities

	Original rule:
	l1 -> l2 : __const_14^0'=__const_14^post7, __const_8^0'=__const_8^post7, fvalue3^0'=fvalue3^post7, low6^0'=low6^post7, mid4^0'=mid4^post7, ret_binary_search7^0'=ret_binary_search7^post7, tmp^0'=tmp^post7, up5^0'=up5^post7, x2^0'=x2^post7, (-1-mid4^0+low6^post7 == 0 /\ -x2^post7+x2^0 == 0 /\ -mid4^post7+mid4^0 == 0 /\ __const_14^0-__const_14^post7 == 0 /\ tmp^0-tmp^post7 == 0 /\ __const_8^0-__const_8^post7 == 0 /\ -fvalue3^post7+fvalue3^0 == 0 /\ up5^0-up5^post7 == 0 /\ -ret_binary_search7^post7+ret_binary_search7^0 == 0), cost: 1
	New rule:
	l1 -> l2 : __const_14^0'=__const_14^0, __const_8^0'=__const_8^0, fvalue3^0'=fvalue3^0, low6^0'=1+mid4^0, mid4^0'=mid4^0, ret_binary_search7^0'=ret_binary_search7^0, tmp^0'=tmp^0, up5^0'=up5^0, x2^0'=x2^0, 0 == 0, cost: 1
	
		propagated equality low6^post7 = 1+mid4^0
		
		propagated equality x2^post7 = x2^0
		
		propagated equality mid4^post7 = mid4^0
		
		propagated equality __const_14^post7 = __const_14^0
		
		propagated equality tmp^post7 = tmp^0
		
		propagated equality __const_8^post7 = __const_8^0
		
		propagated equality fvalue3^post7 = fvalue3^0
		
		propagated equality up5^post7 = up5^0
		
		propagated equality ret_binary_search7^post7 = ret_binary_search7^0
		
	Simplified Guard

	Original rule:
	l1 -> l2 : __const_14^0'=__const_14^0, __const_8^0'=__const_8^0, fvalue3^0'=fvalue3^0, low6^0'=1+mid4^0, mid4^0'=mid4^0, ret_binary_search7^0'=ret_binary_search7^0, tmp^0'=tmp^0, up5^0'=up5^0, x2^0'=x2^0, 0 == 0, cost: 1
	New rule:
	l1 -> l2 : __const_14^0'=__const_14^0, __const_8^0'=__const_8^0, fvalue3^0'=fvalue3^0, low6^0'=1+mid4^0, mid4^0'=mid4^0, ret_binary_search7^0'=ret_binary_search7^0, tmp^0'=tmp^0, up5^0'=up5^0, x2^0'=x2^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l1 -> l2 : __const_14^0'=__const_14^0, __const_8^0'=__const_8^0, fvalue3^0'=fvalue3^0, low6^0'=1+mid4^0, mid4^0'=mid4^0, ret_binary_search7^0'=ret_binary_search7^0, tmp^0'=tmp^0, up5^0'=up5^0, x2^0'=x2^0, T, cost: 1
	New rule:
	l1 -> l2 : low6^0'=1+mid4^0, T, cost: 1
	
	Propagated Equalities

	Original rule:
	l1 -> l2 : __const_14^0'=__const_14^post8, __const_8^0'=__const_8^post8, fvalue3^0'=fvalue3^post8, low6^0'=low6^post8, mid4^0'=mid4^post8, ret_binary_search7^0'=ret_binary_search7^post8, tmp^0'=tmp^post8, up5^0'=up5^post8, x2^0'=x2^post8, (-__const_14^post8+__const_14^0 == 0 /\ tmp^0-tmp^post8 == 0 /\ -fvalue3^post8+fvalue3^0 == 0 /\ mid4^0-mid4^post8 == 0 /\ -x2^post8+x2^0 == 0 /\ __const_8^0-__const_8^post8 == 0 /\ -ret_binary_search7^post8+ret_binary_search7^0 == 0 /\ -low6^post8+low6^0 == 0 /\ 1-mid4^0+up5^post8 == 0), cost: 1
	New rule:
	l1 -> l2 : __const_14^0'=__const_14^0, __const_8^0'=__const_8^0, fvalue3^0'=fvalue3^0, low6^0'=low6^0, mid4^0'=mid4^0, ret_binary_search7^0'=ret_binary_search7^0, tmp^0'=tmp^0, up5^0'=-1+mid4^0, x2^0'=x2^0, 0 == 0, cost: 1
	
		propagated equality __const_14^post8 = __const_14^0
		
		propagated equality tmp^post8 = tmp^0
		
		propagated equality fvalue3^post8 = fvalue3^0
		
		propagated equality mid4^post8 = mid4^0
		
		propagated equality x2^post8 = x2^0
		
		propagated equality __const_8^post8 = __const_8^0
		
		propagated equality ret_binary_search7^post8 = ret_binary_search7^0
		
		propagated equality low6^post8 = low6^0
		
		propagated equality up5^post8 = -1+mid4^0
		
	Simplified Guard

	Original rule:
	l1 -> l2 : __const_14^0'=__const_14^0, __const_8^0'=__const_8^0, fvalue3^0'=fvalue3^0, low6^0'=low6^0, mid4^0'=mid4^0, ret_binary_search7^0'=ret_binary_search7^0, tmp^0'=tmp^0, up5^0'=-1+mid4^0, x2^0'=x2^0, 0 == 0, cost: 1
	New rule:
	l1 -> l2 : __const_14^0'=__const_14^0, __const_8^0'=__const_8^0, fvalue3^0'=fvalue3^0, low6^0'=low6^0, mid4^0'=mid4^0, ret_binary_search7^0'=ret_binary_search7^0, tmp^0'=tmp^0, up5^0'=-1+mid4^0, x2^0'=x2^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l1 -> l2 : __const_14^0'=__const_14^0, __const_8^0'=__const_8^0, fvalue3^0'=fvalue3^0, low6^0'=low6^0, mid4^0'=mid4^0, ret_binary_search7^0'=ret_binary_search7^0, tmp^0'=tmp^0, up5^0'=-1+mid4^0, x2^0'=x2^0, T, cost: 1
	New rule:
	l1 -> l2 : up5^0'=-1+mid4^0, T, cost: 1
	
	Propagated Equalities

	Original rule:
	l6 -> l2 : __const_14^0'=__const_14^post9, __const_8^0'=__const_8^post9, fvalue3^0'=fvalue3^post9, low6^0'=low6^post9, mid4^0'=mid4^post9, ret_binary_search7^0'=ret_binary_search7^post9, tmp^0'=tmp^post9, up5^0'=up5^post9, x2^0'=x2^post9, (-__const_8^post10+x2^post9 == 0 /\ low6^post9 == 0 /\ up5^0-up5^post10 == 0 /\ tmp^0-tmp^post10 == 0 /\ -__const_14^post10+__const_14^0 == 0 /\ mid4^0-mid4^post10 == 0 /\ 1+fvalue3^post9 == 0 /\ __const_8^post10-__const_8^post9 == 0 /\ -fvalue3^post10+fvalue3^0 == 0 /\ mid4^post10-mid4^post9 == 0 /\ low6^0-low6^post10 == 0 /\ -x2^post10+x2^0 == 0 /\ ret_binary_search7^post10-ret_binary_search7^post9 == 0 /\ -tmp^post9+tmp^post10 == 0 /\ __const_14^post10-__const_14^post9 == 0 /\ -ret_binary_search7^post10+ret_binary_search7^0 == 0 /\ __const_8^0-__const_8^post10 == 0 /\ -__const_14^post10+up5^post9 == 0), cost: 1
	New rule:
	l6 -> l2 : __const_14^0'=__const_14^post10, __const_8^0'=__const_8^post10, fvalue3^0'=-1, low6^0'=0, mid4^0'=mid4^post10, ret_binary_search7^0'=ret_binary_search7^post10, tmp^0'=tmp^post10, up5^0'=__const_14^post10, x2^0'=__const_8^post10, (0 == 0 /\ up5^0-up5^post10 == 0 /\ tmp^0-tmp^post10 == 0 /\ -__const_14^post10+__const_14^0 == 0 /\ mid4^0-mid4^post10 == 0 /\ -fvalue3^post10+fvalue3^0 == 0 /\ low6^0-low6^post10 == 0 /\ -x2^post10+x2^0 == 0 /\ -ret_binary_search7^post10+ret_binary_search7^0 == 0 /\ __const_8^0-__const_8^post10 == 0), cost: 1
	
		propagated equality x2^post9 = __const_8^post10
		
		propagated equality low6^post9 = 0
		
		propagated equality fvalue3^post9 = -1
		
		propagated equality __const_8^post9 = __const_8^post10
		
		propagated equality mid4^post9 = mid4^post10
		
		propagated equality ret_binary_search7^post9 = ret_binary_search7^post10
		
		propagated equality tmp^post9 = tmp^post10
		
		propagated equality __const_14^post9 = __const_14^post10
		
		propagated equality up5^post9 = __const_14^post10
		
	Propagated Equalities

	Original rule:
	l6 -> l2 : __const_14^0'=__const_14^post10, __const_8^0'=__const_8^post10, fvalue3^0'=-1, low6^0'=0, mid4^0'=mid4^post10, ret_binary_search7^0'=ret_binary_search7^post10, tmp^0'=tmp^post10, up5^0'=__const_14^post10, x2^0'=__const_8^post10, (0 == 0 /\ up5^0-up5^post10 == 0 /\ tmp^0-tmp^post10 == 0 /\ -__const_14^post10+__const_14^0 == 0 /\ mid4^0-mid4^post10 == 0 /\ -fvalue3^post10+fvalue3^0 == 0 /\ low6^0-low6^post10 == 0 /\ -x2^post10+x2^0 == 0 /\ -ret_binary_search7^post10+ret_binary_search7^0 == 0 /\ __const_8^0-__const_8^post10 == 0), cost: 1
	New rule:
	l6 -> l2 : __const_14^0'=__const_14^0, __const_8^0'=__const_8^0, fvalue3^0'=-1, low6^0'=0, mid4^0'=mid4^0, ret_binary_search7^0'=ret_binary_search7^0, tmp^0'=tmp^0, up5^0'=__const_14^0, x2^0'=__const_8^0, 0 == 0, cost: 1
	
		propagated equality up5^post10 = up5^0
		
		propagated equality tmp^post10 = tmp^0
		
		propagated equality __const_14^post10 = __const_14^0
		
		propagated equality mid4^post10 = mid4^0
		
		propagated equality fvalue3^post10 = fvalue3^0
		
		propagated equality low6^post10 = low6^0
		
		propagated equality x2^post10 = x2^0
		
		propagated equality ret_binary_search7^post10 = ret_binary_search7^0
		
		propagated equality __const_8^post10 = __const_8^0
		
	Simplified Guard

	Original rule:
	l6 -> l2 : __const_14^0'=__const_14^0, __const_8^0'=__const_8^0, fvalue3^0'=-1, low6^0'=0, mid4^0'=mid4^0, ret_binary_search7^0'=ret_binary_search7^0, tmp^0'=tmp^0, up5^0'=__const_14^0, x2^0'=__const_8^0, 0 == 0, cost: 1
	New rule:
	l6 -> l2 : __const_14^0'=__const_14^0, __const_8^0'=__const_8^0, fvalue3^0'=-1, low6^0'=0, mid4^0'=mid4^0, ret_binary_search7^0'=ret_binary_search7^0, tmp^0'=tmp^0, up5^0'=__const_14^0, x2^0'=__const_8^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l6 -> l2 : __const_14^0'=__const_14^0, __const_8^0'=__const_8^0, fvalue3^0'=-1, low6^0'=0, mid4^0'=mid4^0, ret_binary_search7^0'=ret_binary_search7^0, tmp^0'=tmp^0, up5^0'=__const_14^0, x2^0'=__const_8^0, T, cost: 1
	New rule:
	l6 -> l2 : fvalue3^0'=-1, low6^0'=0, up5^0'=__const_14^0, x2^0'=__const_8^0, T, cost: 1

Step with 19

	Trace

	19[T]
	
	Blocked

	[{}, {}]

Step with 16

	Trace

	19[T], 16[T]
	
	Blocked

	[{}, {}, {}]

Step with 14

	Trace

	19[T], 16[T], 14[(1+up5^0-low6^0 <= 0)]
	
	Blocked

	[{}, {}, {}, {}]

Backtrack

	Trace

	19[T], 16[T]
	
	Blocked

	[{}, {}, {14[T]}]

Step with 15

	Trace

	19[T], 16[T], 15[(-up5^0+low6^0 <= 0)]
	
	Blocked

	[{}, {}, {14[T]}, {}]

Step with 11

	Trace

	19[T], 16[T], 15[(-up5^0+low6^0 <= 0)], 11[T]
	
	Blocked

	[{}, {}, {14[T]}, {}, {}]

Step with 17

	Trace

	19[T], 16[T], 15[(-up5^0+low6^0 <= 0)], 11[T], 17[T]
	
	Blocked

	[{}, {}, {14[T]}, {}, {}, {}]

Nonterm

Start location: l6
Program variables: __const_14^0 __const_8^0 fvalue3^0 low6^0 mid4^0 ret_binary_search7^0 tmp^0 up5^0 x2^0
  11: l0 -> l1 : T, cost: 1
  12: l0 -> l2 : fvalue3^0'=fvalue3^post2, up5^0'=-1+low6^0, T, cost: 1
  13: l0 -> l1 : T, cost: 1
  17: l1 -> l2 : low6^0'=1+mid4^0, T, cost: 1
  18: l1 -> l2 : up5^0'=-1+mid4^0, T, cost: 1
  16: l2 -> l3 : T, cost: 1
  20: l2 -> LoAT_sink : (up5^0-low6^0 >= 0 /\ 1+mid4^post51-low6^0 <= 0), cost: NONTERM
  14: l3 -> l4 : ret_binary_search7^0'=fvalue3^0, tmp^0'=fvalue3^0, 1+up5^0-low6^0 <= 0, cost: 1
  15: l3 -> l0 : mid4^0'=mid4^post5, -up5^0+low6^0 <= 0, cost: 1
  19: l6 -> l2 : fvalue3^0'=-1, low6^0'=0, up5^0'=__const_14^0, x2^0'=__const_8^0, T, cost: 1

	Certificate of Non-Termination

	Original rule:
	l2 -> l2 : low6^0'=1+mid4^post51, mid4^0'=mid4^post51, -up5^0+low6^0 <= 0, cost: 1
	New rule:
	l2 -> LoAT_sink : (up5^0-low6^0 >= 0 /\ 1+mid4^post51-low6^0 <= 0), cost: NONTERM

		up5^0-low6^0 >= 0 [0]: eventual decrease yields (up5^0-low6^0 >= 0 /\ -1+up5^0-mid4^post51 >= 0)
		
		up5^0-low6^0 >= 0 [1]: eventual increase yields (up5^0-low6^0 >= 0 /\ 1+mid4^post51-low6^0 <= 0)
		
		Replacement map: {up5^0-low6^0 >= 0 -> (up5^0-low6^0 >= 0 /\ 1+mid4^post51-low6^0 <= 0)}

Step with 20

	Trace

	19[T], 20[(up5^0-low6^0 >= 0 /\ 1+mid4^post51-low6^0 <= 0)]
	
	Blocked

	[{}, {}, {20[T]}]

Refute

	Counterexample

	[ __const_14^0=0 __const_8^0=0 fvalue3^0=-1 low6^0=0 mid4^0=0 ret_binary_search7^0=0 tmp^0=0 up5^0=0 x2^0=0 ] 19 [ __const_14^0=0 __const_8^0=0 fvalue3^0=fvalue3^0 low6^0=low6^0 mid4^0=0 ret_binary_search7^0=0 tmp^0=0 up5^0=up5^0 x2^0=x2^0 ] 20
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
