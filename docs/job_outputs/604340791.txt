YES

Solver Timeout: 4
Global Timeout: 300
Maximum number of concurrent processes: 900
*******************************************************************************************
*********************** UNPROCESSED TRANSITION SYSTEMS PER FUNCTION ***********************
*******************************************************************************************


List of LLVMGraphs + assumeNodes + staticAssertNodes [1] :

+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++
+                                                                  +
Init Location: 0
Transitions:
<l0, l1, true, seq{main__func_return_ -> 0, main_n -> Â¿functionCall(__VERIFIER_nondet_int), main_m -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l1, l13, not((main_n >= 0))>
<l1, l2, (main_n >= 0)>
<l2, l3, (main_m > 0)>
<l2, l13, not((main_m > 0))>
<l3, l4, true, seq{main_v1 -> main_n, main_v2 -> 0}>
<l4, l5, true>
<l5, l12, not((main_v1 > 0))>
<l5, l6, (main_v1 > 0)>
<l6, l7, (main_v2 < main_m)>
<l6, l9, not((main_v2 < main_m))>
<l7, l8, true, seq{main_v2 -> (main_v2 + 1), main_v1 -> (main_v1 - 1)}>
<l8, l11, true>
<l9, l10, true, seq{main_v2 -> 0}>
<l10, l11, true>
<l11, l5, true>
<l12, l13, true>
<l13, l14, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

+ Assume Nodes [0]: ++++++++++++++++++++++++++++++++++++++++++++++++
       
+ Static Assert Nodes [0]: +++++++++++++++++++++++++++++++++++++++++
       
+ After preprocess (paralelization): ++++++++++++++++++++++++++++++

Init Location: 0
Transitions:
<l0, l15, true, seq{main__func_return_ -> 0}>
<l15, l16, true, seq{varCall_1 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l16, l17, true, seq{main_n -> varCall_1}>
<l17, l18, true, seq{varCall_2 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l18, l1, true, seq{main_m -> varCall_2}>
<l1, l2, (main_n >= 0)>
<l1, l13, not((main_n >= 0))>
<l2, l3, (main_m > 0)>
<l2, l13, not((main_m > 0))>
<l3, l4, true, seq{main_v1 -> main_n, main_v2 -> 0}>
<l4, l5, true>
<l5, l6, (main_v1 > 0)>
<l5, l12, not((main_v1 > 0))>
<l6, l7, (main_v2 < main_m)>
<l6, l9, not((main_v2 < main_m))>
<l7, l8, true, seq{main_v2 -> (main_v2 + 1), main_v1 -> (main_v1 - 1)}>
<l8, l11, true>
<l9, l10, true, seq{main_v2 -> 0}>
<l10, l11, true>
<l11, l5, true>
<l12, l13, true>
<l13, l14, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:
14, 
Accepting locations:

Asserts:

+                                                                  +
+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++


Function Return and Parameters Information [2 functions]:
    function name: __VERIFIER_nondet_int [1 return + 0 parameters]        demangled: __VERIFIER_nondet_int
        __VERIFIER_nondet_int__func_return_      [function result] : int
    function name: main [1 return + 0 parameters]        demangled: main
        main__func_return_      [function result] : int


AST Ident Scanner Information [6 idents]:
__VERIFIER_nondet_int | function | [integer, ()] | <line: 11, col: 1> | <line: 15, col: 6> <line: 16, col: 6>
main | function | [integer, ()] | <line: 13, col: 1>
m | local variable | integer | <line: 14, col: 5> | <line: 16, col: 2> <line: 17, col: 16> <line: 21, col: 13>
n | local variable | integer | <line: 14, col: 5> | <line: 15, col: 2> <line: 17, col: 6> <line: 18, col: 8>
v1 | local variable | integer | <line: 14, col: 5> | <line: 18, col: 3> <line: 20, col: 10> <line: 23, col: 5> <line: 23, col: 10>
v2 | local variable | integer | <line: 14, col: 5> | <line: 19, col: 3> <line: 21, col: 8> <line: 22, col: 5> <line: 22, col: 10> <line: 25, col: 5>

Main function: main
Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l5, (main_m = undef4) /\ (undef3 >= 0) /\ (undef4 > 0), par{main_v1 -> undef3, main_v2 -> 0}>
<l0, l14, (main_m = undef4) /\ (undef3 >= 0) /\ not((undef4 > 0))>
<l0, l14, (main_m = undef4) /\ not((undef3 >= 0))>
<l5, l5, (main_v1 > 0) /\ (main_v2 < main_m), par{main_v1 -> (main_v1 - 1), main_v2 -> (main_v2 + 1)}>
<l5, l5, (main_v1 > 0) /\ not((main_v2 < main_m)), par{main_v2 -> 0}>
<l5, l14, not((main_v1 > 0))>

Fresh variables:
undef3, undef4, 

Undef variables:
undef3, undef4, 

Abstraction variables:

Exit nodes:
14, 
Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l5, l5, 1 + main_v2 <= main_m /\ 1 <= main_v1, {main_v1 -> -1 + main_v1, main_v2 -> 1 + main_v2, rest remain the same}>
<l5, l5, main_m <= main_v2 /\ 1 <= main_v1, {main_v2 -> 0, rest remain the same}>
Variables:
main_m, main_v1, main_v2

Graph 2:
Transitions:
Variables:

Precedence: 
Graph 0

Graph 1
<l0, l5, 0 <= undef3 /\ 1 <= undef4 /\ main_m = undef4, {main_v1 -> undef3, main_v2 -> 0, rest remain the same}>

Graph 2
<l0, l14, 0 <= undef3 /\ undef4 <= 0 /\ main_m = undef4, {all remain the same}>
<l0, l14, 1 + undef3 <= 0 /\ main_m = undef4, {all remain the same}>
<l5, l14, main_v1 <= 0, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 5 , 1 )
( 14 , 2 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.003661

Checking conditional termination of SCC {l5}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000822s
[33mRanking function: [36m-1 + main_v1[0m
New Graphs: 
Transitions:
<l5, l5, main_m <= main_v2 /\ 1 <= main_v1, {main_v2 -> 0, rest remain the same}>
Variables:
main_m, main_v1, main_v2
Checking conditional termination of SCC {l5}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000482s

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.001334s
[18575 : 18577]
[18575 : 18578]
Successful child: 18577
[ Invariant Graph ]
[33mStrengthening and disabling transitions...[0m

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l5, l5, 1 <= main_m /\ 1 + main_v2 <= main_m /\ 1 <= main_v1 /\ 0 <= 1 + main_v1 + main_v2, {main_v1 -> -1 + main_v1, main_v2 -> 1 + main_v2, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l5, l5, main_m <= main_v2 /\ 1 <= main_m /\ 1 <= main_v1 /\ 0 <= 1 + main_v1 + main_v2, {main_v2 -> 0, rest remain the same}>
[ Termination Graph ]
[33mStrengthening and disabling transitions...[0m

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l5, l5, main_m <= main_v2 /\ 1 <= main_m /\ 1 <= main_v1 /\ 0 <= 1 + main_v1 + main_v2, {main_v2 -> 0, rest remain the same}>
[33mRanking function: [36m-main_m + main_v2[0m
New Graphs: 
INVARIANTS: 
5: 1 <= main_m , 0 <= 1 + main_v1 + main_v2 , 
Quasi-INVARIANTS to narrow Graph: 
5: 
Proving termination of subgraph 2
Analyzing SCC {l14}...
No cycles found.

[32mProgram Terminates[0m
