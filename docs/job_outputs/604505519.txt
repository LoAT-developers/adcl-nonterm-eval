WORST_CASE(Omega(0),?)

Initial ITS
Start location: __init
   0: f1_0_main_Load -> f362_0_gt_LE : arg5'=arg5P0, arg2'=arg2P0, arg4'=arg4P0, arg1'=arg1P0, arg3'=arg3P0, (-arg3P0+arg1P0 == 0 /\ arg1P0-arg5P0 == 0 /\ 1+arg2 > 0 /\ 1+arg2P0 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0 /\ arg2P0-arg4P0 == 0), cost: 1
   1: f362_0_gt_LE -> f362_0_gt_LE : arg5'=arg5P1, arg2'=arg2P1, arg4'=arg4P1, arg1'=arg1P1, arg3'=arg3P1, (-arg1P1+arg1 == 0 /\ -1-arg5P1+arg3 == 0 /\ arg2-arg2P1 == 0 /\ arg4 > 0 /\ -arg5+arg3 == 0 /\ -1-arg3P1+arg3 == 0 /\ arg3 > 0 /\ -1-arg4P1+arg4 == 0), cost: 1
   2: f362_0_gt_LE -> f362_0_gt_LE : arg5'=arg5P2, arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg3'=arg3P2, (1-arg2P2+arg2 == 0 /\ -arg4 == 0 /\ arg1-arg5P2 == 0 /\ arg1-arg1P2 == 0 /\ -arg5+arg3 == 0 /\ -arg3P2+arg1 == 0 /\ 1+arg2-arg4P2 == 0 /\ arg3 > 0), cost: 1
   3: __init -> f1_0_main_Load : arg5'=arg5P3, arg2'=arg2P3, arg4'=arg4P3, arg1'=arg1P3, arg3'=arg3P3, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_Load -> f362_0_gt_LE : arg5'=arg5P0, arg2'=arg2P0, arg4'=arg4P0, arg1'=arg1P0, arg3'=arg3P0, (-arg3P0+arg1P0 == 0 /\ arg1P0-arg5P0 == 0 /\ 1+arg2 > 0 /\ 1+arg2P0 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0 /\ arg2P0-arg4P0 == 0), cost: 1
New rule:
f1_0_main_Load -> f362_0_gt_LE : arg5'=arg5P0, arg2'=arg4P0, arg4'=arg4P0, arg1'=arg5P0, arg3'=arg5P0, (1+arg2 > 0 /\ 1+arg5P0 > 0 /\ arg1 > 0 /\ 1+arg4P0 > 0), cost: 1

Applied preprocessing
Original rule:
f362_0_gt_LE -> f362_0_gt_LE : arg5'=arg5P1, arg2'=arg2P1, arg4'=arg4P1, arg1'=arg1P1, arg3'=arg3P1, (-arg1P1+arg1 == 0 /\ -1-arg5P1+arg3 == 0 /\ arg2-arg2P1 == 0 /\ arg4 > 0 /\ -arg5+arg3 == 0 /\ -1-arg3P1+arg3 == 0 /\ arg3 > 0 /\ -1-arg4P1+arg4 == 0), cost: 1
New rule:
f362_0_gt_LE -> f362_0_gt_LE : arg5'=-1+arg3, arg4'=-1+arg4, arg3'=-1+arg3, (arg4 > 0 /\ -arg5+arg3 == 0 /\ arg3 > 0), cost: 1

Applied preprocessing
Original rule:
f362_0_gt_LE -> f362_0_gt_LE : arg5'=arg5P2, arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg3'=arg3P2, (1-arg2P2+arg2 == 0 /\ -arg4 == 0 /\ arg1-arg5P2 == 0 /\ arg1-arg1P2 == 0 /\ -arg5+arg3 == 0 /\ -arg3P2+arg1 == 0 /\ 1+arg2-arg4P2 == 0 /\ arg3 > 0), cost: 1
New rule:
f362_0_gt_LE -> f362_0_gt_LE : arg5'=arg1, arg2'=1+arg2, arg4'=1+arg2, arg3'=arg1, (arg4 == 0 /\ -arg5+arg3 == 0 /\ arg3 > 0), cost: 1

Simplified rules
Start location: __init
   4: f1_0_main_Load -> f362_0_gt_LE : arg5'=arg5P0, arg2'=arg4P0, arg4'=arg4P0, arg1'=arg5P0, arg3'=arg5P0, (1+arg2 > 0 /\ 1+arg5P0 > 0 /\ arg1 > 0 /\ 1+arg4P0 > 0), cost: 1
   5: f362_0_gt_LE -> f362_0_gt_LE : arg5'=-1+arg3, arg4'=-1+arg4, arg3'=-1+arg3, (arg4 > 0 /\ -arg5+arg3 == 0 /\ arg3 > 0), cost: 1
   6: f362_0_gt_LE -> f362_0_gt_LE : arg5'=arg1, arg2'=1+arg2, arg4'=1+arg2, arg3'=arg1, (arg4 == 0 /\ -arg5+arg3 == 0 /\ arg3 > 0), cost: 1
   3: __init -> f1_0_main_Load : arg5'=arg5P3, arg2'=arg2P3, arg4'=arg4P3, arg1'=arg1P3, arg3'=arg3P3, TRUE, cost: 1


Applied acceleration
Original rule:
f362_0_gt_LE -> f362_0_gt_LE : arg5'=-1+arg3, arg4'=-1+arg4, arg3'=-1+arg3, (arg4 > 0 /\ -arg5+arg3 == 0 /\ arg3 > 0), cost: 1
New rule:
f362_0_gt_LE -> f362_0_gt_LE : arg5'=arg3-n, arg4'=arg4-n, arg3'=arg3-n, (-1+n >= 0 /\ arg5-arg3 >= 0 /\ 1+arg3-n > 0 /\ -arg5+arg3 >= 0 /\ 1+arg4-n > 0), cost: n
Sub-proof via acceration calculus written to file:///tmp/tmpnam_nnfcjB.txt

Applied instantiation
Original rule:
f362_0_gt_LE -> f362_0_gt_LE : arg5'=arg3-n, arg4'=arg4-n, arg3'=arg3-n, (-1+n >= 0 /\ arg5-arg3 >= 0 /\ 1+arg3-n > 0 /\ -arg5+arg3 >= 0 /\ 1+arg4-n > 0), cost: n
New rule:
f362_0_gt_LE -> f362_0_gt_LE : arg5'=-arg4+arg3, arg4'=0, arg3'=-arg4+arg3, (1 > 0 /\ -1+arg4 >= 0 /\ arg5-arg3 >= 0 /\ -arg5+arg3 >= 0 /\ 1-arg4+arg3 > 0), cost: arg4

Applied instantiation
Original rule:
f362_0_gt_LE -> f362_0_gt_LE : arg5'=arg3-n, arg4'=arg4-n, arg3'=arg3-n, (-1+n >= 0 /\ arg5-arg3 >= 0 /\ 1+arg3-n > 0 /\ -arg5+arg3 >= 0 /\ 1+arg4-n > 0), cost: n
New rule:
f362_0_gt_LE -> f362_0_gt_LE : arg5'=0, arg4'=arg4-arg3, arg3'=0, (1 > 0 /\ arg5-arg3 >= 0 /\ -1+arg3 >= 0 /\ -arg5+arg3 >= 0 /\ 1+arg4-arg3 > 0), cost: arg3

Applied acceleration
Original rule:
f362_0_gt_LE -> f362_0_gt_LE : arg5'=arg1, arg2'=1+arg2, arg4'=1+arg2, arg3'=arg1, (arg4 == 0 /\ -arg5+arg3 == 0 /\ arg3 > 0), cost: 1
New rule:
f362_0_gt_LE -> f362_0_gt_LE : arg5'=arg1, arg2'=arg2+n0, arg4'=arg2+n0, arg3'=arg1, (-arg4 >= 0 /\ arg5-arg3 >= 0 /\ arg4 >= 0 /\ -arg5+arg3 >= 0 /\ -1-arg2+arg4 <= 0 /\ 1-arg2-n0 >= 0 /\ arg1 > 0 /\ arg3 > 0 /\ -1+n0 >= 0), cost: n0
Sub-proof via acceration calculus written to file:///tmp/tmpnam_gKdcPk.txt

Applied instantiation
Original rule:
f362_0_gt_LE -> f362_0_gt_LE : arg5'=arg1, arg2'=arg2+n0, arg4'=arg2+n0, arg3'=arg1, (-arg4 >= 0 /\ arg5-arg3 >= 0 /\ arg4 >= 0 /\ -arg5+arg3 >= 0 /\ -1-arg2+arg4 <= 0 /\ 1-arg2-n0 >= 0 /\ arg1 > 0 /\ arg3 > 0 /\ -1+n0 >= 0), cost: n0
New rule:
f362_0_gt_LE -> f362_0_gt_LE : arg5'=arg1, arg2'=1, arg4'=1, arg3'=arg1, (0 >= 0 /\ -arg4 >= 0 /\ arg5-arg3 >= 0 /\ arg4 >= 0 /\ -arg5+arg3 >= 0 /\ -1-arg2+arg4 <= 0 /\ -arg2 >= 0 /\ arg1 > 0 /\ arg3 > 0), cost: 1-arg2

Applied simplification
Original rule:
f362_0_gt_LE -> f362_0_gt_LE : arg5'=-arg4+arg3, arg4'=0, arg3'=-arg4+arg3, (1 > 0 /\ -1+arg4 >= 0 /\ arg5-arg3 >= 0 /\ -arg5+arg3 >= 0 /\ 1-arg4+arg3 > 0), cost: arg4
New rule:
f362_0_gt_LE -> f362_0_gt_LE : arg5'=-arg4+arg3, arg4'=0, arg3'=-arg4+arg3, (-1+arg4 >= 0 /\ arg5-arg3 >= 0 /\ -arg5+arg3 >= 0 /\ 1-arg4+arg3 > 0), cost: arg4

Applied simplification
Original rule:
f362_0_gt_LE -> f362_0_gt_LE : arg5'=0, arg4'=arg4-arg3, arg3'=0, (1 > 0 /\ arg5-arg3 >= 0 /\ -1+arg3 >= 0 /\ -arg5+arg3 >= 0 /\ 1+arg4-arg3 > 0), cost: arg3
New rule:
f362_0_gt_LE -> f362_0_gt_LE : arg5'=0, arg4'=arg4-arg3, arg3'=0, (arg5-arg3 >= 0 /\ -1+arg3 >= 0 /\ -arg5+arg3 >= 0 /\ 1+arg4-arg3 > 0), cost: arg3

Applied simplification
Original rule:
f362_0_gt_LE -> f362_0_gt_LE : arg5'=arg1, arg2'=1, arg4'=1, arg3'=arg1, (0 >= 0 /\ -arg4 >= 0 /\ arg5-arg3 >= 0 /\ arg4 >= 0 /\ -arg5+arg3 >= 0 /\ -1-arg2+arg4 <= 0 /\ -arg2 >= 0 /\ arg1 > 0 /\ arg3 > 0), cost: 1-arg2
New rule:
f362_0_gt_LE -> f362_0_gt_LE : arg5'=arg1, arg2'=1, arg4'=1, arg3'=arg1, (arg5-arg3 >= 0 /\ arg4 <= 0 /\ arg4 >= 0 /\ -arg5+arg3 >= 0 /\ -1-arg2+arg4 <= 0 /\ -arg2 >= 0 /\ arg1 > 0 /\ arg3 > 0), cost: 1-arg2

Applied deletion
Removed the following rules: 5 6

Accelerated simple loops
Start location: __init
   4: f1_0_main_Load -> f362_0_gt_LE : arg5'=arg5P0, arg2'=arg4P0, arg4'=arg4P0, arg1'=arg5P0, arg3'=arg5P0, (1+arg2 > 0 /\ 1+arg5P0 > 0 /\ arg1 > 0 /\ 1+arg4P0 > 0), cost: 1
  10: f362_0_gt_LE -> f362_0_gt_LE : arg5'=-arg4+arg3, arg4'=0, arg3'=-arg4+arg3, (-1+arg4 >= 0 /\ arg5-arg3 >= 0 /\ -arg5+arg3 >= 0 /\ 1-arg4+arg3 > 0), cost: arg4
  11: f362_0_gt_LE -> f362_0_gt_LE : arg5'=0, arg4'=arg4-arg3, arg3'=0, (arg5-arg3 >= 0 /\ -1+arg3 >= 0 /\ -arg5+arg3 >= 0 /\ 1+arg4-arg3 > 0), cost: arg3
  12: f362_0_gt_LE -> f362_0_gt_LE : arg5'=arg1, arg2'=1, arg4'=1, arg3'=arg1, (arg5-arg3 >= 0 /\ arg4 <= 0 /\ arg4 >= 0 /\ -arg5+arg3 >= 0 /\ -1-arg2+arg4 <= 0 /\ -arg2 >= 0 /\ arg1 > 0 /\ arg3 > 0), cost: 1-arg2
   3: __init -> f1_0_main_Load : arg5'=arg5P3, arg2'=arg2P3, arg4'=arg4P3, arg1'=arg1P3, arg3'=arg3P3, TRUE, cost: 1


Applied chaining
First rule:
f1_0_main_Load -> f362_0_gt_LE : arg5'=arg5P0, arg2'=arg4P0, arg4'=arg4P0, arg1'=arg5P0, arg3'=arg5P0, (1+arg2 > 0 /\ 1+arg5P0 > 0 /\ arg1 > 0 /\ 1+arg4P0 > 0), cost: 1
Second rule:
f362_0_gt_LE -> f362_0_gt_LE : arg5'=-arg4+arg3, arg4'=0, arg3'=-arg4+arg3, (-1+arg4 >= 0 /\ arg5-arg3 >= 0 /\ -arg5+arg3 >= 0 /\ 1-arg4+arg3 > 0), cost: arg4
New rule:
f1_0_main_Load -> f362_0_gt_LE : arg5'=-arg4P0+arg5P0, arg2'=arg4P0, arg4'=0, arg1'=arg5P0, arg3'=-arg4P0+arg5P0, (-1+arg4P0 >= 0 /\ 1+arg2 > 0 /\ 1-arg4P0+arg5P0 > 0 /\ arg1 > 0), cost: 1+arg4P0

Applied chaining
First rule:
f1_0_main_Load -> f362_0_gt_LE : arg5'=arg5P0, arg2'=arg4P0, arg4'=arg4P0, arg1'=arg5P0, arg3'=arg5P0, (1+arg2 > 0 /\ 1+arg5P0 > 0 /\ arg1 > 0 /\ 1+arg4P0 > 0), cost: 1
Second rule:
f362_0_gt_LE -> f362_0_gt_LE : arg5'=0, arg4'=arg4-arg3, arg3'=0, (arg5-arg3 >= 0 /\ -1+arg3 >= 0 /\ -arg5+arg3 >= 0 /\ 1+arg4-arg3 > 0), cost: arg3
New rule:
f1_0_main_Load -> f362_0_gt_LE : arg5'=0, arg2'=arg4P0, arg4'=arg4P0-arg5P0, arg1'=arg5P0, arg3'=0, (-1+arg5P0 >= 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ 1+arg4P0-arg5P0 > 0), cost: 1+arg5P0

Applied chaining
First rule:
f1_0_main_Load -> f362_0_gt_LE : arg5'=arg5P0, arg2'=arg4P0, arg4'=arg4P0, arg1'=arg5P0, arg3'=arg5P0, (1+arg2 > 0 /\ 1+arg5P0 > 0 /\ arg1 > 0 /\ 1+arg4P0 > 0), cost: 1
Second rule:
f362_0_gt_LE -> f362_0_gt_LE : arg5'=arg1, arg2'=1, arg4'=1, arg3'=arg1, (arg5-arg3 >= 0 /\ arg4 <= 0 /\ arg4 >= 0 /\ -arg5+arg3 >= 0 /\ -1-arg2+arg4 <= 0 /\ -arg2 >= 0 /\ arg1 > 0 /\ arg3 > 0), cost: 1-arg2
New rule:
f1_0_main_Load -> f362_0_gt_LE : arg5'=arg5P0, arg2'=1, arg4'=1, arg1'=arg5P0, arg3'=arg5P0, (1+arg2 > 0 /\ arg1 > 0 /\ arg5P0 > 0), cost: 2

Applied deletion
Removed the following rules: 10 11 12

Chained accelerated rules with incoming rules
Start location: __init
   4: f1_0_main_Load -> f362_0_gt_LE : arg5'=arg5P0, arg2'=arg4P0, arg4'=arg4P0, arg1'=arg5P0, arg3'=arg5P0, (1+arg2 > 0 /\ 1+arg5P0 > 0 /\ arg1 > 0 /\ 1+arg4P0 > 0), cost: 1
  13: f1_0_main_Load -> f362_0_gt_LE : arg5'=-arg4P0+arg5P0, arg2'=arg4P0, arg4'=0, arg1'=arg5P0, arg3'=-arg4P0+arg5P0, (-1+arg4P0 >= 0 /\ 1+arg2 > 0 /\ 1-arg4P0+arg5P0 > 0 /\ arg1 > 0), cost: 1+arg4P0
  14: f1_0_main_Load -> f362_0_gt_LE : arg5'=0, arg2'=arg4P0, arg4'=arg4P0-arg5P0, arg1'=arg5P0, arg3'=0, (-1+arg5P0 >= 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ 1+arg4P0-arg5P0 > 0), cost: 1+arg5P0
  15: f1_0_main_Load -> f362_0_gt_LE : arg5'=arg5P0, arg2'=1, arg4'=1, arg1'=arg5P0, arg3'=arg5P0, (1+arg2 > 0 /\ arg1 > 0 /\ arg5P0 > 0), cost: 2
   3: __init -> f1_0_main_Load : arg5'=arg5P3, arg2'=arg2P3, arg4'=arg4P3, arg1'=arg1P3, arg3'=arg3P3, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
  <empty>


Computing asymptotic complexity

Proved the following lower bound
Complexity:  Unknown
Cpx degree: ?

Solved cost: 0
Rule cost:   0

