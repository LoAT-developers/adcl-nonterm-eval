unknown

Initial ITS

Start location: [1]
Program variables: tmp x xtmp y
   0: [1] -> [2] : x'=nondet, T, cost: 1
   1: [2] -> [3] : y'=nondet1, T, cost: 1
   2: [3] -> [4] : (y > 0 /\ x > 0), cost: 1
  30: [3] -> [26] : (y <= 0 \/ x <= 0), cost: 1
   3: [4] -> [5] : tmp'=y, T, cost: 1
   4: [5] -> [6] : xtmp'=x, T, cost: 1
   5: [6] -> [8] : y == 0, cost: 1
   8: [6] -> [10] : (y < 0 \/ y > 0), cost: 1
  14: [7] -> [15] : xtmp > 0, cost: 1
  21: [7] -> [20] : xtmp <= 0, cost: 1
   6: [8] -> [9] : y'=y, T, cost: 1
   7: [9] -> [7] : T, cost: 1
   9: [10] -> [12] : y < 0, cost: 1
  12: [10] -> [11] : y >= 0, cost: 1
  13: [11] -> [7] : T, cost: 1
  10: [12] -> [13] : xtmp'=-xtmp, T, cost: 1
  11: [13] -> [11] : T, cost: 1
  28: [14] -> [25] : x'=tmp, T, cost: 1
  15: [15] -> [16] : xtmp-y >= 0, cost: 1
  18: [15] -> [18] : xtmp-y < 0, cost: 1
  16: [16] -> [17] : xtmp'=xtmp-y, T, cost: 1
  17: [17] -> [15] : T, cost: 1
  19: [18] -> [19] : y'=xtmp, T, cost: 1
  20: [19] -> [14] : T, cost: 1
  22: [20] -> [21] : xtmp < 0, cost: 1
  25: [20] -> [23] : xtmp >= 0, cost: 1
  23: [21] -> [22] : xtmp'=xtmp-y, T, cost: 1
  24: [22] -> [20] : T, cost: 1
  26: [23] -> [24] : y'=xtmp, T, cost: 1
  27: [24] -> [14] : T, cost: 1
  29: [25] -> [3] : T, cost: 1

Chained Linear Paths

Start location: [1]
Program variables: tmp x xtmp y
  31: [1] -> [3] : x'=nondet, y'=nondet1, T, cost: 1
  30: [3] -> [26] : (y <= 0 \/ x <= 0), cost: 1
  33: [3] -> [6] : tmp'=y, xtmp'=x, (y > 0 /\ x > 0), cost: 1
   8: [6] -> [10] : (y < 0 \/ y > 0), cost: 1
  35: [6] -> [7] : y'=y, y == 0, cost: 1
  14: [7] -> [15] : xtmp > 0, cost: 1
  21: [7] -> [20] : xtmp <= 0, cost: 1
  12: [10] -> [11] : y >= 0, cost: 1
  46: [10] -> [11] : xtmp'=-xtmp, y < 0, cost: 1
  13: [11] -> [7] : T, cost: 1
  40: [14] -> [3] : x'=tmp, T, cost: 1
  38: [15] -> [15] : xtmp'=xtmp-y, xtmp-y >= 0, cost: 1
  39: [15] -> [14] : y'=xtmp, xtmp-y < 0, cost: 1
  43: [20] -> [20] : xtmp'=xtmp-y, xtmp < 0, cost: 1
  44: [20] -> [14] : y'=xtmp, xtmp >= 0, cost: 1

	Eliminating location [2] by chaining:

	Applied chaining

	First rule:
	[1] -> [2] : x'=nondet, T, cost: 1
	Second rule:
	[2] -> [3] : y'=nondet1, T, cost: 1
	New rule:
	[1] -> [3] : x'=nondet, y'=nondet1, T, cost: 1
	
	Applied deletion

	Removed the following rules: 0 1
	
	Eliminating location [4] by chaining:

	Applied chaining

	First rule:
	[3] -> [4] : (y > 0 /\ x > 0), cost: 1
	Second rule:
	[4] -> [5] : tmp'=y, T, cost: 1
	New rule:
	[3] -> [5] : tmp'=y, (y > 0 /\ x > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 2 3
	
	Eliminating location [5] by chaining:

	Applied chaining

	First rule:
	[3] -> [5] : tmp'=y, (y > 0 /\ x > 0), cost: 1
	Second rule:
	[5] -> [6] : xtmp'=x, T, cost: 1
	New rule:
	[3] -> [6] : tmp'=y, xtmp'=x, (y > 0 /\ x > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 4 32
	
	Eliminating location [8] by chaining:

	Applied chaining

	First rule:
	[6] -> [8] : y == 0, cost: 1
	Second rule:
	[8] -> [9] : y'=y, T, cost: 1
	New rule:
	[6] -> [9] : y'=y, y == 0, cost: 1
	
	Applied deletion

	Removed the following rules: 5 6
	
	Eliminating location [9] by chaining:

	Applied chaining

	First rule:
	[6] -> [9] : y'=y, y == 0, cost: 1
	Second rule:
	[9] -> [7] : T, cost: 1
	New rule:
	[6] -> [7] : y'=y, y == 0, cost: 1
	
	Applied deletion

	Removed the following rules: 7 34
	
	Eliminating location [16] by chaining:

	Applied chaining

	First rule:
	[15] -> [16] : xtmp-y >= 0, cost: 1
	Second rule:
	[16] -> [17] : xtmp'=xtmp-y, T, cost: 1
	New rule:
	[15] -> [17] : xtmp'=xtmp-y, xtmp-y >= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 15 16
	
	Eliminating location [18] by chaining:

	Applied chaining

	First rule:
	[15] -> [18] : xtmp-y < 0, cost: 1
	Second rule:
	[18] -> [19] : y'=xtmp, T, cost: 1
	New rule:
	[15] -> [19] : y'=xtmp, xtmp-y < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 18 19
	
	Eliminating location [17] by chaining:

	Applied chaining

	First rule:
	[15] -> [17] : xtmp'=xtmp-y, xtmp-y >= 0, cost: 1
	Second rule:
	[17] -> [15] : T, cost: 1
	New rule:
	[15] -> [15] : xtmp'=xtmp-y, xtmp-y >= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 17 36
	
	Eliminating location [19] by chaining:

	Applied chaining

	First rule:
	[15] -> [19] : y'=xtmp, xtmp-y < 0, cost: 1
	Second rule:
	[19] -> [14] : T, cost: 1
	New rule:
	[15] -> [14] : y'=xtmp, xtmp-y < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 20 37
	
	Eliminating location [25] by chaining:

	Applied chaining

	First rule:
	[14] -> [25] : x'=tmp, T, cost: 1
	Second rule:
	[25] -> [3] : T, cost: 1
	New rule:
	[14] -> [3] : x'=tmp, T, cost: 1
	
	Applied deletion

	Removed the following rules: 28 29
	
	Eliminating location [21] by chaining:

	Applied chaining

	First rule:
	[20] -> [21] : xtmp < 0, cost: 1
	Second rule:
	[21] -> [22] : xtmp'=xtmp-y, T, cost: 1
	New rule:
	[20] -> [22] : xtmp'=xtmp-y, xtmp < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 22 23
	
	Eliminating location [23] by chaining:

	Applied chaining

	First rule:
	[20] -> [23] : xtmp >= 0, cost: 1
	Second rule:
	[23] -> [24] : y'=xtmp, T, cost: 1
	New rule:
	[20] -> [24] : y'=xtmp, xtmp >= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 25 26
	
	Eliminating location [22] by chaining:

	Applied chaining

	First rule:
	[20] -> [22] : xtmp'=xtmp-y, xtmp < 0, cost: 1
	Second rule:
	[22] -> [20] : T, cost: 1
	New rule:
	[20] -> [20] : xtmp'=xtmp-y, xtmp < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 24 41
	
	Eliminating location [24] by chaining:

	Applied chaining

	First rule:
	[20] -> [24] : y'=xtmp, xtmp >= 0, cost: 1
	Second rule:
	[24] -> [14] : T, cost: 1
	New rule:
	[20] -> [14] : y'=xtmp, xtmp >= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 27 42
	
	Eliminating location [12] by chaining:

	Applied chaining

	First rule:
	[10] -> [12] : y < 0, cost: 1
	Second rule:
	[12] -> [13] : xtmp'=-xtmp, T, cost: 1
	New rule:
	[10] -> [13] : xtmp'=-xtmp, y < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 9 10
	
	Eliminating location [13] by chaining:

	Applied chaining

	First rule:
	[10] -> [13] : xtmp'=-xtmp, y < 0, cost: 1
	Second rule:
	[13] -> [11] : T, cost: 1
	New rule:
	[10] -> [11] : xtmp'=-xtmp, y < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 11 45

Simplified Transitions

Start location: [1]
Program variables: tmp x xtmp y
  31: [1] -> [3] : x'=nondet, y'=nondet1, T, cost: 1
  30: [3] -> [26] : (y <= 0 \/ x <= 0), cost: 1
  33: [3] -> [6] : tmp'=y, xtmp'=x, (y > 0 /\ x > 0), cost: 1
   8: [6] -> [10] : (y < 0 \/ y > 0), cost: 1
  47: [6] -> [7] : y == 0, cost: 1
  14: [7] -> [15] : xtmp > 0, cost: 1
  21: [7] -> [20] : xtmp <= 0, cost: 1
  12: [10] -> [11] : y >= 0, cost: 1
  46: [10] -> [11] : xtmp'=-xtmp, y < 0, cost: 1
  13: [11] -> [7] : T, cost: 1
  40: [14] -> [3] : x'=tmp, T, cost: 1
  38: [15] -> [15] : xtmp'=xtmp-y, xtmp-y >= 0, cost: 1
  39: [15] -> [14] : y'=xtmp, xtmp-y < 0, cost: 1
  43: [20] -> [20] : xtmp'=xtmp-y, xtmp < 0, cost: 1
  44: [20] -> [14] : y'=xtmp, xtmp >= 0, cost: 1

	Removed Trivial Updates

	Original rule:
	[6] -> [7] : y'=y, y == 0, cost: 1
	New rule:
	[6] -> [7] : y == 0, cost: 1

Step with 31

	Trace

	31[T]
	
	Blocked

	[{}, {}]

Step with 30

	Trace

	31[T], 30[(y <= 0)]
	
	Blocked

	[{}, {}, {}]

Backtrack

	Trace

	31[T]
	
	Blocked

	[{}, {30[y <= 0]}]

Step with 30

	Trace

	31[T], 30[(x <= 0)]
	
	Blocked

	[{}, {30[y <= 0]}, {}]

Backtrack

	Trace

	31[T]
	
	Blocked

	[{}, {30[(y <= 0 /\ x <= 0)]}]

Step with 33

	Trace

	31[T], 33[(y > 0 /\ x > 0)]
	
	Blocked

	[{}, {30[T]}, {}]

Step with 8

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)]
	
	Blocked

	[{}, {30[T]}, {}, {}]

Step with 12

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)]
	
	Blocked

	[{}, {30[T]}, {}, {}, {}]

Step with 13

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)], 13[T]
	
	Blocked

	[{}, {30[T]}, {}, {}, {}, {}]

Step with 14

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)], 13[T], 14[(xtmp > 0)]
	
	Blocked

	[{}, {30[T]}, {}, {}, {}, {}, {}]

Step with 38

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)], 13[T], 14[(xtmp > 0)], 38[(xtmp-y >= 0)]
	
	Blocked

	[{}, {30[T]}, {}, {}, {}, {}, {}, {}]

Accelerate

Start location: [1]
Program variables: tmp x xtmp y
  31: [1] -> [3] : x'=nondet, y'=nondet1, T, cost: 1
  30: [3] -> [26] : (y <= 0 \/ x <= 0), cost: 1
  33: [3] -> [6] : tmp'=y, xtmp'=x, (y > 0 /\ x > 0), cost: 1
   8: [6] -> [10] : (y < 0 \/ y > 0), cost: 1
  47: [6] -> [7] : y == 0, cost: 1
  14: [7] -> [15] : xtmp > 0, cost: 1
  21: [7] -> [20] : xtmp <= 0, cost: 1
  12: [10] -> [11] : y >= 0, cost: 1
  46: [10] -> [11] : xtmp'=-xtmp, y < 0, cost: 1
  13: [11] -> [7] : T, cost: 1
  40: [14] -> [3] : x'=tmp, T, cost: 1
  38: [15] -> [15] : xtmp'=xtmp-y, xtmp-y >= 0, cost: 1
  39: [15] -> [14] : y'=xtmp, xtmp-y < 0, cost: 1
  48: [15] -> LoAT_sink : (xtmp-y >= 0 /\ y <= 0), cost: NONTERM
  49: [15] -> [15] : xtmp'=-n*y+xtmp, (-1+n >= 0 /\ xtmp-(-1+n)*y-y >= 0 /\ xtmp-y >= 0), cost: 1
  43: [20] -> [20] : xtmp'=xtmp-y, xtmp < 0, cost: 1
  44: [20] -> [14] : y'=xtmp, xtmp >= 0, cost: 1

	Certificate of Non-Termination

	Original rule:
	[15] -> [15] : xtmp'=xtmp-y, (xtmp-y >= 0), cost: 1
	New rule:
	[15] -> LoAT_sink : (xtmp-y >= 0 /\ y <= 0), cost: NONTERM

		xtmp-y >= 0 [0]: eventual decrease yields (xtmp-(-1+n)*y-y >= 0 /\ xtmp-y >= 0)
		
		xtmp-y >= 0 [1]: eventual increase yields (xtmp-y >= 0 /\ y <= 0)
		
		Replacement map: {xtmp-y >= 0 -> (xtmp-y >= 0 /\ y <= 0)}

	Loop Acceleration

	Original rule:
	[15] -> [15] : xtmp'=xtmp-y, (xtmp-y >= 0), cost: 1
	New rule:
	[15] -> [15] : xtmp'=-n*y+xtmp, (-1+n >= 0 /\ xtmp-(-1+n)*y-y >= 0 /\ xtmp-y >= 0), cost: 1

		xtmp-y >= 0 [0]: eventual decrease yields (xtmp-(-1+n)*y-y >= 0 /\ xtmp-y >= 0)
		
		xtmp-y >= 0 [1]: eventual increase yields (xtmp-y >= 0 /\ y <= 0)
		
		Replacement map: {xtmp-y >= 0 -> (xtmp-(-1+n)*y-y >= 0 /\ xtmp-y >= 0)}

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)], 13[T], 14[(xtmp > 0)], 49[(-1+n >= 0 /\ xtmp-(-1+n)*y-y >= 0 /\ xtmp-y >= 0)]
	
	Blocked

	[{}, {30[T]}, {}, {}, {}, {}, {}, {38[T], 49[T]}]

Step with 39

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)], 13[T], 14[(xtmp > 0)], 49[(-1+n >= 0 /\ xtmp-(-1+n)*y-y >= 0 /\ xtmp-y >= 0)], 39[(xtmp-y < 0)]
	
	Blocked

	[{}, {30[T]}, {}, {}, {}, {}, {}, {38[T], 48[T], 49[T]}, {}]

Step with 40

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)], 13[T], 14[(xtmp > 0)], 49[(-1+n >= 0 /\ xtmp-(-1+n)*y-y >= 0 /\ xtmp-y >= 0)], 39[(xtmp-y < 0)], 40[T]
	
	Blocked

	[{}, {30[T]}, {}, {}, {}, {}, {}, {38[T], 48[T], 49[T]}, {}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 33

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)], 13[T], 14[(xtmp > 0)], 49[(-1+n >= 0 /\ xtmp-(-1+n)*y-y >= 0 /\ xtmp-y >= 0)], 39[(xtmp-y < 0)], 40[T], 33[(y > 0 /\ x > 0)]
	
	Blocked

	[{}, {30[T]}, {}, {}, {}, {}, {}, {38[T], 48[T], 49[T]}, {}, {}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 8

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)], 13[T], 14[(xtmp > 0)], 49[(-1+n >= 0 /\ xtmp-(-1+n)*y-y >= 0 /\ xtmp-y >= 0)], 39[(xtmp-y < 0)], 40[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)]
	
	Blocked

	[{}, {30[T]}, {}, {}, {}, {}, {}, {38[T], 48[T], 49[T]}, {}, {}, {}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 12

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)], 13[T], 14[(xtmp > 0)], 49[(-1+n >= 0 /\ xtmp-(-1+n)*y-y >= 0 /\ xtmp-y >= 0)], 39[(xtmp-y < 0)], 40[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)]
	
	Blocked

	[{}, {30[T]}, {}, {}, {}, {}, {}, {38[T], 48[T], 49[T]}, {}, {}, {}, {}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 13

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)], 13[T], 14[(xtmp > 0)], 49[(-1+n >= 0 /\ xtmp-(-1+n)*y-y >= 0 /\ xtmp-y >= 0)], 39[(xtmp-y < 0)], 40[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)], 13[T]
	
	Blocked

	[{}, {30[T]}, {}, {}, {}, {}, {}, {38[T], 48[T], 49[T]}, {}, {}, {}, {}, {}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 14

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)], 13[T], 14[(xtmp > 0)], 49[(-1+n >= 0 /\ xtmp-(-1+n)*y-y >= 0 /\ xtmp-y >= 0)], 39[(xtmp-y < 0)], 40[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)], 13[T], 14[(xtmp > 0)]
	
	Blocked

	[{}, {30[T]}, {}, {}, {}, {}, {}, {38[T], 48[T], 49[T]}, {}, {}, {}, {}, {}, {}, {}]

Accelerate and Drop

Start location: [1]
Program variables: tmp x xtmp y
  31: [1] -> [3] : x'=nondet, y'=nondet1, T, cost: 1
  30: [3] -> [26] : (y <= 0 \/ x <= 0), cost: 1
  33: [3] -> [6] : tmp'=y, xtmp'=x, (y > 0 /\ x > 0), cost: 1
   8: [6] -> [10] : (y < 0 \/ y > 0), cost: 1
  47: [6] -> [7] : y == 0, cost: 1
  14: [7] -> [15] : xtmp > 0, cost: 1
  21: [7] -> [20] : xtmp <= 0, cost: 1
  12: [10] -> [11] : y >= 0, cost: 1
  46: [10] -> [11] : xtmp'=-xtmp, y < 0, cost: 1
  13: [11] -> [7] : T, cost: 1
  40: [14] -> [3] : x'=tmp, T, cost: 1
  38: [15] -> [15] : xtmp'=xtmp-y, xtmp-y >= 0, cost: 1
  39: [15] -> [14] : y'=xtmp, xtmp-y < 0, cost: 1
  48: [15] -> LoAT_sink : (xtmp-y >= 0 /\ y <= 0), cost: NONTERM
  49: [15] -> [15] : xtmp'=-n*y+xtmp, (-1+n >= 0 /\ xtmp-(-1+n)*y-y >= 0 /\ xtmp-y >= 0), cost: 1
  50: [15] -> [15] : x'=xtmp, y'=tmp, (tmp > 0 /\ tmp >= 0 /\ xtmp > 0 /\ xtmp >= 0 /\ xtmp-y < 0 /\ tmp-xtmp < 0), cost: 1
  43: [20] -> [20] : xtmp'=xtmp-y, xtmp < 0, cost: 1
  44: [20] -> [14] : y'=xtmp, xtmp >= 0, cost: 1

	unrolling

	Original rule:
	[15] -> [15] : tmp'=xtmp, x'=tmp, xtmp'=tmp, y'=xtmp, (tmp > 0 /\ xtmp > 0 /\ xtmp >= 0 /\ xtmp-y < 0), cost: 1
	New rule:
	[15] -> [15] : tmp'=tmp, x'=xtmp, xtmp'=xtmp, y'=tmp, (tmp > 0 /\ tmp >= 0 /\ xtmp > 0 /\ xtmp >= 0 /\ xtmp-y < 0 /\ tmp-xtmp < 0), cost: 1
	rule cannot be iterated more than once
	
	Removed Trivial Updates

	Original rule:
	[15] -> [15] : tmp'=tmp, x'=xtmp, xtmp'=xtmp, y'=tmp, (tmp > 0 /\ tmp >= 0 /\ xtmp > 0 /\ xtmp >= 0 /\ xtmp-y < 0 /\ tmp-xtmp < 0), cost: 1
	New rule:
	[15] -> [15] : x'=xtmp, y'=tmp, (tmp > 0 /\ tmp >= 0 /\ xtmp > 0 /\ xtmp >= 0 /\ xtmp-y < 0 /\ tmp-xtmp < 0), cost: 1

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)], 13[T], 14[(xtmp > 0)], 49[(-1+n >= 0 /\ xtmp-(-1+n)*y-y >= 0 /\ xtmp-y >= 0)]
	
	Blocked

	[{}, {30[T]}, {}, {}, {}, {}, {}, {38[T], 48[T], 49[T]}]

Step with 39

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)], 13[T], 14[(xtmp > 0)], 49[(-1+n >= 0 /\ xtmp-(-1+n)*y-y >= 0 /\ xtmp-y >= 0)], 39[(xtmp-y < 0)]
	
	Blocked

	[{}, {30[T]}, {}, {}, {}, {}, {}, {38[T], 48[T], 49[T]}, {}]

Step with 40

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)], 13[T], 14[(xtmp > 0)], 49[(-1+n >= 0 /\ xtmp-(-1+n)*y-y >= 0 /\ xtmp-y >= 0)], 39[(xtmp-y < 0)], 40[T]
	
	Blocked

	[{}, {30[T]}, {}, {}, {}, {}, {}, {38[T], 48[T], 49[T]}, {}, {}]

Step with 33

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)], 13[T], 14[(xtmp > 0)], 49[(-1+n >= 0 /\ xtmp-(-1+n)*y-y >= 0 /\ xtmp-y >= 0)], 39[(xtmp-y < 0)], 40[T], 33[(y > 0 /\ x > 0)]
	
	Blocked

	[{}, {30[T]}, {}, {}, {}, {}, {}, {38[T], 48[T], 49[T]}, {}, {}, {}]

Step with 8

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)], 13[T], 14[(xtmp > 0)], 49[(-1+n >= 0 /\ xtmp-(-1+n)*y-y >= 0 /\ xtmp-y >= 0)], 39[(xtmp-y < 0)], 40[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)]
	
	Blocked

	[{}, {30[T]}, {}, {}, {}, {}, {}, {38[T], 48[T], 49[T]}, {}, {}, {}, {}]

Covered

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)], 13[T], 14[(xtmp > 0)], 49[(-1+n >= 0 /\ xtmp-(-1+n)*y-y >= 0 /\ xtmp-y >= 0)], 39[(xtmp-y < 0)], 40[T], 33[(y > 0 /\ x > 0)]
	
	Blocked

	[{}, {30[T]}, {}, {}, {}, {}, {}, {38[T], 48[T], 49[T]}, {}, {}, {8[y > 0]}]

Backtrack

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)], 13[T], 14[(xtmp > 0)], 49[(-1+n >= 0 /\ xtmp-(-1+n)*y-y >= 0 /\ xtmp-y >= 0)], 39[(xtmp-y < 0)], 40[T]
	
	Blocked

	[{}, {30[T]}, {}, {}, {}, {}, {}, {38[T], 48[T], 49[T]}, {}, {33[T]}]

Step with 30

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)], 13[T], 14[(xtmp > 0)], 49[(-1+n >= 0 /\ xtmp-(-1+n)*y-y >= 0 /\ xtmp-y >= 0)], 39[(xtmp-y < 0)], 40[T], 30[(y <= 0)]
	
	Blocked

	[{}, {30[T]}, {}, {}, {}, {}, {}, {38[T], 48[T], 49[T]}, {}, {33[T]}, {}]

Backtrack

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)], 13[T], 14[(xtmp > 0)], 49[(-1+n >= 0 /\ xtmp-(-1+n)*y-y >= 0 /\ xtmp-y >= 0)], 39[(xtmp-y < 0)], 40[T]
	
	Blocked

	[{}, {30[T]}, {}, {}, {}, {}, {}, {38[T], 48[T], 49[T]}, {}, {30[y <= 0], 33[T]}]

Backtrack

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)], 13[T], 14[(xtmp > 0)], 49[(-1+n >= 0 /\ xtmp-(-1+n)*y-y >= 0 /\ xtmp-y >= 0)], 39[(xtmp-y < 0)]
	
	Blocked

	[{}, {30[T]}, {}, {}, {}, {}, {}, {38[T], 48[T], 49[T]}, {40[T]}]

Backtrack

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)], 13[T], 14[(xtmp > 0)], 49[(-1+n >= 0 /\ xtmp-(-1+n)*y-y >= 0 /\ xtmp-y >= 0)]
	
	Blocked

	[{}, {30[T]}, {}, {}, {}, {}, {}, {38[T], 39[T], 48[T], 49[T]}]

Backtrack

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)], 13[T], 14[(xtmp > 0)]
	
	Blocked

	[{}, {30[T]}, {}, {}, {}, {}, {49[T]}]

Step with 39

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)], 13[T], 14[(xtmp > 0)], 39[(xtmp-y < 0)]
	
	Blocked

	[{}, {30[T]}, {}, {}, {}, {}, {49[T]}, {}]

Step with 40

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)], 13[T], 14[(xtmp > 0)], 39[(xtmp-y < 0)], 40[T]
	
	Blocked

	[{}, {30[T]}, {}, {}, {}, {}, {49[T]}, {}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 33

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)], 13[T], 14[(xtmp > 0)], 39[(xtmp-y < 0)], 40[T], 33[(y > 0 /\ x > 0)]
	
	Blocked

	[{}, {30[T]}, {}, {}, {}, {}, {49[T]}, {}, {30[T]}, {}]

Accelerate and Drop

Start location: [1]
Program variables: tmp x xtmp y
  31: [1] -> [3] : x'=nondet, y'=nondet1, T, cost: 1
  30: [3] -> [26] : (y <= 0 \/ x <= 0), cost: 1
  33: [3] -> [6] : tmp'=y, xtmp'=x, (y > 0 /\ x > 0), cost: 1
   8: [6] -> [10] : (y < 0 \/ y > 0), cost: 1
  47: [6] -> [7] : y == 0, cost: 1
  51: [6] -> [6] : x'=xtmp, y'=tmp, (tmp > 0 /\ xtmp > 0 /\ xtmp >= 0 /\ xtmp-y < 0 /\ tmp-xtmp < 0 /\ y > 0 /\ y >= 0), cost: 1
  14: [7] -> [15] : xtmp > 0, cost: 1
  21: [7] -> [20] : xtmp <= 0, cost: 1
  12: [10] -> [11] : y >= 0, cost: 1
  46: [10] -> [11] : xtmp'=-xtmp, y < 0, cost: 1
  13: [11] -> [7] : T, cost: 1
  40: [14] -> [3] : x'=tmp, T, cost: 1
  38: [15] -> [15] : xtmp'=xtmp-y, xtmp-y >= 0, cost: 1
  39: [15] -> [14] : y'=xtmp, xtmp-y < 0, cost: 1
  48: [15] -> LoAT_sink : (xtmp-y >= 0 /\ y <= 0), cost: NONTERM
  49: [15] -> [15] : xtmp'=-n*y+xtmp, (-1+n >= 0 /\ xtmp-(-1+n)*y-y >= 0 /\ xtmp-y >= 0), cost: 1
  50: [15] -> [15] : x'=xtmp, y'=tmp, (tmp > 0 /\ tmp >= 0 /\ xtmp > 0 /\ xtmp >= 0 /\ xtmp-y < 0 /\ tmp-xtmp < 0), cost: 1
  43: [20] -> [20] : xtmp'=xtmp-y, xtmp < 0, cost: 1
  44: [20] -> [14] : y'=xtmp, xtmp >= 0, cost: 1

	unrolling

	Original rule:
	[6] -> [6] : tmp'=xtmp, x'=tmp, xtmp'=tmp, y'=xtmp, (tmp > 0 /\ xtmp > 0 /\ xtmp-y < 0 /\ y > 0 /\ y >= 0), cost: 1
	New rule:
	[6] -> [6] : tmp'=tmp, x'=xtmp, xtmp'=xtmp, y'=tmp, (tmp > 0 /\ xtmp > 0 /\ xtmp >= 0 /\ xtmp-y < 0 /\ tmp-xtmp < 0 /\ y > 0 /\ y >= 0), cost: 1
	rule cannot be iterated more than once
	
	Removed Trivial Updates

	Original rule:
	[6] -> [6] : tmp'=tmp, x'=xtmp, xtmp'=xtmp, y'=tmp, (tmp > 0 /\ xtmp > 0 /\ xtmp >= 0 /\ xtmp-y < 0 /\ tmp-xtmp < 0 /\ y > 0 /\ y >= 0), cost: 1
	New rule:
	[6] -> [6] : x'=xtmp, y'=tmp, (tmp > 0 /\ xtmp > 0 /\ xtmp >= 0 /\ xtmp-y < 0 /\ tmp-xtmp < 0 /\ y > 0 /\ y >= 0), cost: 1

	Trace

	31[T], 33[(y > 0 /\ x > 0)]
	
	Blocked

	[{}, {30[T]}, {}]

Step with 8

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)]
	
	Blocked

	[{}, {30[T]}, {}, {}]

Step with 12

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)]
	
	Blocked

	[{}, {30[T]}, {}, {}, {}]

Step with 13

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)], 13[T]
	
	Blocked

	[{}, {30[T]}, {}, {}, {}, {}]

Step with 14

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)], 13[T], 14[(xtmp > 0)]
	
	Blocked

	[{}, {30[T]}, {}, {}, {}, {}, {}]

Step with 39

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)], 13[T], 14[(xtmp > 0)], 39[(xtmp-y < 0)]
	
	Blocked

	[{}, {30[T]}, {}, {}, {}, {}, {48[T]}, {}]

Step with 40

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)], 13[T], 14[(xtmp > 0)], 39[(xtmp-y < 0)], 40[T]
	
	Blocked

	[{}, {30[T]}, {}, {}, {}, {}, {48[T]}, {}, {}]

Covered

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)], 13[T], 14[(xtmp > 0)], 39[(xtmp-y < 0)]
	
	Blocked

	[{}, {30[T]}, {}, {}, {}, {}, {48[T]}, {40[T]}]

Backtrack

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)], 13[T], 14[(xtmp > 0)]
	
	Blocked

	[{}, {30[T]}, {}, {}, {}, {}, {39[T], 48[T]}]

Step with 49

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)], 13[T], 14[(xtmp > 0)], 49[(-1+n >= 0 /\ xtmp-(-1+n)*y-y >= 0 /\ xtmp-y >= 0)]
	
	Blocked

	[{}, {30[T]}, {}, {}, {}, {}, {39[T], 48[T]}, {49[T]}]

Step with 38

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)], 13[T], 14[(xtmp > 0)], 49[(-1+n >= 0 /\ xtmp-(-1+n)*y-y >= 0 /\ xtmp-y >= 0)], 38[(xtmp-y >= 0)]
	
	Blocked

	[{}, {30[T]}, {}, {}, {}, {}, {39[T], 48[T]}, {48[T], 49[T], 50[T]}, {}]

Covered

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)], 13[T], 14[(xtmp > 0)], 49[(-1+n >= 0 /\ xtmp-(-1+n)*y-y >= 0 /\ xtmp-y >= 0)]
	
	Blocked

	[{}, {30[T]}, {}, {}, {}, {}, {39[T], 48[T]}, {38[T], 48[T], 49[T], 50[T]}]

Step with 39

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)], 13[T], 14[(xtmp > 0)], 49[(-1+n >= 0 /\ xtmp-(-1+n)*y-y >= 0 /\ xtmp-y >= 0)], 39[(xtmp-y < 0)]
	
	Blocked

	[{}, {30[T]}, {}, {}, {}, {}, {39[T], 48[T]}, {38[T], 48[T], 49[T], 50[T]}, {}]

Step with 40

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)], 13[T], 14[(xtmp > 0)], 49[(-1+n >= 0 /\ xtmp-(-1+n)*y-y >= 0 /\ xtmp-y >= 0)], 39[(xtmp-y < 0)], 40[T]
	
	Blocked

	[{}, {30[T]}, {}, {}, {}, {}, {39[T], 48[T]}, {38[T], 48[T], 49[T], 50[T]}, {}, {}]

Covered

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)], 13[T], 14[(xtmp > 0)], 49[(-1+n >= 0 /\ xtmp-(-1+n)*y-y >= 0 /\ xtmp-y >= 0)], 39[(xtmp-y < 0)]
	
	Blocked

	[{}, {30[T]}, {}, {}, {}, {}, {39[T], 48[T]}, {38[T], 48[T], 49[T], 50[T]}, {40[T]}]

Backtrack

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)], 13[T], 14[(xtmp > 0)], 49[(-1+n >= 0 /\ xtmp-(-1+n)*y-y >= 0 /\ xtmp-y >= 0)]
	
	Blocked

	[{}, {30[T]}, {}, {}, {}, {}, {39[T], 48[T]}, {38[T], 39[T], 48[T], 49[T], 50[T]}]

Backtrack

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)], 13[T], 14[(xtmp > 0)]
	
	Blocked

	[{}, {30[T]}, {}, {}, {}, {}, {39[T], 48[T], 49[T]}]

Step with 38

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)], 13[T], 14[(xtmp > 0)], 38[(xtmp-y >= 0)]
	
	Blocked

	[{}, {30[T]}, {}, {}, {}, {}, {39[T], 48[T], 49[T], 50[T]}, {}]

Covered

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)], 13[T], 14[(xtmp > 0)]
	
	Blocked

	[{}, {30[T]}, {}, {}, {}, {}, {38[T], 39[T], 48[T], 49[T], 50[T]}]

Backtrack

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)], 13[T]
	
	Blocked

	[{}, {30[T]}, {}, {}, {}, {14[T]}]

Backtrack

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)], 12[(y >= 0)]
	
	Blocked

	[{}, {30[T]}, {}, {}, {13[T]}]

Backtrack

	Trace

	31[T], 33[(y > 0 /\ x > 0)], 8[(y > 0)]
	
	Blocked

	[{}, {30[T]}, {}, {12[T]}]

Backtrack

	Trace

	31[T], 33[(y > 0 /\ x > 0)]
	
	Blocked

	[{}, {30[T]}, {8[y > 0]}]

Backtrack

	Trace

	31[T]
	
	Blocked

	[{}, {30[T], 33[T]}]

Backtrack

	Trace

	Blocked

	[{31[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
