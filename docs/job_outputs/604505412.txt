WORST_CASE(Omega(0),?)

Initial ITS
Start location: __init
   0: f1_0_main_ConstantStackPush -> f99_0_loop_aux_LE : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (10*arg2-arg3P0 == 0 /\ -arg2P0 == 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ -arg1P0 == 0), cost: 1
   1: f99_0_loop_aux_LE -> f128_0_loop_aux_EQ : arg2'=arg2P1, arg1'=arg1P1, arg3'=arg3P1, (-10+arg3 < 0 /\ -1+arg3 > 0 /\ -arg2P1+arg3 == 0 /\ arg1-arg1P1 == 0 /\ arg2-arg3P1 == 0), cost: 1
   2: f99_0_loop_aux_LE -> f128_0_loop_aux_EQ : arg2'=arg2P2, arg1'=arg1P2, arg3'=arg3P2, (-10+arg3 > 0 /\ arg2-arg3P2 == 0 /\ -arg2P2+arg3 == 0 /\ -arg1P2+arg1 == 0), cost: 1
   4: f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=arg2P4, arg1'=arg1P4, arg3'=arg3P4, (-2+arg1 < 0 /\ 1-arg1P4 == 0 /\ 1-arg3 == 0 /\ 1-arg2P4 == 0 /\ 2-arg3P4 == 0), cost: 1
   5: f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=arg2P5, arg1'=arg1P5, arg3'=arg3P5, (-2+arg1 < 0 /\ 10-arg3 == 0 /\ 9-arg3P5 == 0 /\ -arg1P5 == 0 /\ -arg2P5 == 0), cost: 1
   3: f128_0_loop_aux_EQ -> f99_0_loop_aux_LE : arg2'=arg2P3, arg1'=arg1P3, arg3'=arg3P3, (-2+arg1 < 0 /\ -arg1P3 == 0 /\ -arg3 == 0 /\ -1+arg2-arg3P3 == 0 /\ -arg2P3 == 0 /\ -1+arg2 > 0), cost: 1
   6: f128_0_loop_aux_EQ -> f99_0_loop_aux_LE : arg2'=arg2P6, arg1'=arg1P6, arg3'=arg3P6, (-2+arg1 < 0 /\ 1-arg2P6 == 0 /\ 1-arg3 == 0 /\ -1+arg2 > 0 /\ 1-arg1P6 == 0 /\ 1+arg2-arg3P6 == 0), cost: 1
   7: __init -> f1_0_main_ConstantStackPush : arg2'=arg2P7, arg1'=arg1P7, arg3'=arg3P7, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_ConstantStackPush -> f99_0_loop_aux_LE : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (10*arg2-arg3P0 == 0 /\ -arg2P0 == 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ -arg1P0 == 0), cost: 1
New rule:
f1_0_main_ConstantStackPush -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=10*arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f99_0_loop_aux_LE -> f128_0_loop_aux_EQ : arg2'=arg2P1, arg1'=arg1P1, arg3'=arg3P1, (-10+arg3 < 0 /\ -1+arg3 > 0 /\ -arg2P1+arg3 == 0 /\ arg1-arg1P1 == 0 /\ arg2-arg3P1 == 0), cost: 1
New rule:
f99_0_loop_aux_LE -> f128_0_loop_aux_EQ : arg2'=arg3, arg3'=arg2, (-1+arg3 > 0 /\ 10-arg3 > 0), cost: 1

Applied preprocessing
Original rule:
f99_0_loop_aux_LE -> f128_0_loop_aux_EQ : arg2'=arg2P2, arg1'=arg1P2, arg3'=arg3P2, (-10+arg3 > 0 /\ arg2-arg3P2 == 0 /\ -arg2P2+arg3 == 0 /\ -arg1P2+arg1 == 0), cost: 1
New rule:
f99_0_loop_aux_LE -> f128_0_loop_aux_EQ : arg2'=arg3, arg3'=arg2, -10+arg3 > 0, cost: 1

Applied preprocessing
Original rule:
f128_0_loop_aux_EQ -> f99_0_loop_aux_LE : arg2'=arg2P3, arg1'=arg1P3, arg3'=arg3P3, (-2+arg1 < 0 /\ -arg1P3 == 0 /\ -arg3 == 0 /\ -1+arg2-arg3P3 == 0 /\ -arg2P3 == 0 /\ -1+arg2 > 0), cost: 1
New rule:
f128_0_loop_aux_EQ -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=-1+arg2, (2-arg1 > 0 /\ -1+arg2 > 0 /\ arg3 == 0), cost: 1

Applied preprocessing
Original rule:
f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=arg2P4, arg1'=arg1P4, arg3'=arg3P4, (-2+arg1 < 0 /\ 1-arg1P4 == 0 /\ 1-arg3 == 0 /\ 1-arg2P4 == 0 /\ 2-arg3P4 == 0), cost: 1
New rule:
f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=1, arg1'=1, arg3'=2, (-1+arg3 == 0 /\ 2-arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=arg2P5, arg1'=arg1P5, arg3'=arg3P5, (-2+arg1 < 0 /\ 10-arg3 == 0 /\ 9-arg3P5 == 0 /\ -arg1P5 == 0 /\ -arg2P5 == 0), cost: 1
New rule:
f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=9, (-10+arg3 == 0 /\ 2-arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f128_0_loop_aux_EQ -> f99_0_loop_aux_LE : arg2'=arg2P6, arg1'=arg1P6, arg3'=arg3P6, (-2+arg1 < 0 /\ 1-arg2P6 == 0 /\ 1-arg3 == 0 /\ -1+arg2 > 0 /\ 1-arg1P6 == 0 /\ 1+arg2-arg3P6 == 0), cost: 1
New rule:
f128_0_loop_aux_EQ -> f99_0_loop_aux_LE : arg2'=1, arg1'=1, arg3'=1+arg2, (-1+arg3 == 0 /\ 2-arg1 > 0 /\ -1+arg2 > 0), cost: 1

Simplified rules
Start location: __init
   8: f1_0_main_ConstantStackPush -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=10*arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
   9: f99_0_loop_aux_LE -> f128_0_loop_aux_EQ : arg2'=arg3, arg3'=arg2, (-1+arg3 > 0 /\ 10-arg3 > 0), cost: 1
  10: f99_0_loop_aux_LE -> f128_0_loop_aux_EQ : arg2'=arg3, arg3'=arg2, -10+arg3 > 0, cost: 1
  12: f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=1, arg1'=1, arg3'=2, (-1+arg3 == 0 /\ 2-arg1 > 0), cost: 1
  13: f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=9, (-10+arg3 == 0 /\ 2-arg1 > 0), cost: 1
  11: f128_0_loop_aux_EQ -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=-1+arg2, (2-arg1 > 0 /\ -1+arg2 > 0 /\ arg3 == 0), cost: 1
  14: f128_0_loop_aux_EQ -> f99_0_loop_aux_LE : arg2'=1, arg1'=1, arg3'=1+arg2, (-1+arg3 == 0 /\ 2-arg1 > 0 /\ -1+arg2 > 0), cost: 1
   7: __init -> f1_0_main_ConstantStackPush : arg2'=arg2P7, arg1'=arg1P7, arg3'=arg3P7, TRUE, cost: 1


Accelerated simple loops
Start location: __init
   8: f1_0_main_ConstantStackPush -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=10*arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
   9: f99_0_loop_aux_LE -> f128_0_loop_aux_EQ : arg2'=arg3, arg3'=arg2, (-1+arg3 > 0 /\ 10-arg3 > 0), cost: 1
  10: f99_0_loop_aux_LE -> f128_0_loop_aux_EQ : arg2'=arg3, arg3'=arg2, -10+arg3 > 0, cost: 1
  12: f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=1, arg1'=1, arg3'=2, (-1+arg3 == 0 /\ 2-arg1 > 0), cost: 1
  13: f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=9, (-10+arg3 == 0 /\ 2-arg1 > 0), cost: 1
  11: f128_0_loop_aux_EQ -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=-1+arg2, (2-arg1 > 0 /\ -1+arg2 > 0 /\ arg3 == 0), cost: 1
  14: f128_0_loop_aux_EQ -> f99_0_loop_aux_LE : arg2'=1, arg1'=1, arg3'=1+arg2, (-1+arg3 == 0 /\ 2-arg1 > 0 /\ -1+arg2 > 0), cost: 1
   7: __init -> f1_0_main_ConstantStackPush : arg2'=arg2P7, arg1'=arg1P7, arg3'=arg3P7, TRUE, cost: 1


Applied chaining
First rule:
f128_0_loop_aux_EQ -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=-1+arg2, (2-arg1 > 0 /\ -1+arg2 > 0 /\ arg3 == 0), cost: 1
Second rule:
f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=1, arg1'=1, arg3'=2, (-1+arg3 == 0 /\ 2-arg1 > 0), cost: 1
New rule:
f128_0_loop_aux_EQ -> f99_0_loop_aux_LE : arg2'=1, arg1'=1, arg3'=2, (-2+arg2 == 0 /\ 2-arg1 > 0 /\ arg3 == 0), cost: 2

Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=10*arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
Second rule:
f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=9, (-10+arg3 == 0 /\ 2-arg1 > 0), cost: 1
New rule:
f1_0_main_ConstantStackPush -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=9, (arg1 > 0 /\ -1+arg2 == 0), cost: 2

Applied chaining
First rule:
f128_0_loop_aux_EQ -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=-1+arg2, (2-arg1 > 0 /\ -1+arg2 > 0 /\ arg3 == 0), cost: 1
Second rule:
f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=9, (-10+arg3 == 0 /\ 2-arg1 > 0), cost: 1
New rule:
f128_0_loop_aux_EQ -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=9, (-11+arg2 == 0 /\ 2-arg1 > 0 /\ arg3 == 0), cost: 2

Applied chaining
First rule:
f128_0_loop_aux_EQ -> f99_0_loop_aux_LE : arg2'=1, arg1'=1, arg3'=1+arg2, (-1+arg3 == 0 /\ 2-arg1 > 0 /\ -1+arg2 > 0), cost: 1
Second rule:
f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=9, (-10+arg3 == 0 /\ 2-arg1 > 0), cost: 1
New rule:
f128_0_loop_aux_EQ -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=9, (-9+arg2 == 0 /\ -1+arg3 == 0 /\ 2-arg1 > 0), cost: 2

Applied deletion
Removed the following rules: 12 13

Chained accelerated rules with incoming rules
Start location: __init
   8: f1_0_main_ConstantStackPush -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=10*arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
  16: f1_0_main_ConstantStackPush -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=9, (arg1 > 0 /\ -1+arg2 == 0), cost: 2
   9: f99_0_loop_aux_LE -> f128_0_loop_aux_EQ : arg2'=arg3, arg3'=arg2, (-1+arg3 > 0 /\ 10-arg3 > 0), cost: 1
  10: f99_0_loop_aux_LE -> f128_0_loop_aux_EQ : arg2'=arg3, arg3'=arg2, -10+arg3 > 0, cost: 1
  11: f128_0_loop_aux_EQ -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=-1+arg2, (2-arg1 > 0 /\ -1+arg2 > 0 /\ arg3 == 0), cost: 1
  14: f128_0_loop_aux_EQ -> f99_0_loop_aux_LE : arg2'=1, arg1'=1, arg3'=1+arg2, (-1+arg3 == 0 /\ 2-arg1 > 0 /\ -1+arg2 > 0), cost: 1
  15: f128_0_loop_aux_EQ -> f99_0_loop_aux_LE : arg2'=1, arg1'=1, arg3'=2, (-2+arg2 == 0 /\ 2-arg1 > 0 /\ arg3 == 0), cost: 2
  17: f128_0_loop_aux_EQ -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=9, (-11+arg2 == 0 /\ 2-arg1 > 0 /\ arg3 == 0), cost: 2
  18: f128_0_loop_aux_EQ -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=9, (-9+arg2 == 0 /\ -1+arg3 == 0 /\ 2-arg1 > 0), cost: 2
   7: __init -> f1_0_main_ConstantStackPush : arg2'=arg2P7, arg1'=arg1P7, arg3'=arg3P7, TRUE, cost: 1


Eliminating location f1_0_main_ConstantStackPush by chaining:

Applied chaining
First rule:
__init -> f1_0_main_ConstantStackPush : arg2'=arg2P7, arg1'=arg1P7, arg3'=arg3P7, TRUE, cost: 1
Second rule:
f1_0_main_ConstantStackPush -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=10*arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
New rule:
__init -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=10*arg2P7, (arg1P7 > 0 /\ 1+arg2P7 > 0), cost: 2

Applied chaining
First rule:
__init -> f1_0_main_ConstantStackPush : arg2'=arg2P7, arg1'=arg1P7, arg3'=arg3P7, TRUE, cost: 1
Second rule:
f1_0_main_ConstantStackPush -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=9, (arg1 > 0 /\ -1+arg2 == 0), cost: 2
New rule:
__init -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=9, (arg1P7 > 0 /\ -1+arg2P7 == 0), cost: 3

Applied deletion
Removed the following rules: 7 8 16

Eliminating location f128_0_loop_aux_EQ by chaining:

Applied chaining
First rule:
f99_0_loop_aux_LE -> f128_0_loop_aux_EQ : arg2'=arg3, arg3'=arg2, (-1+arg3 > 0 /\ 10-arg3 > 0), cost: 1
Second rule:
f128_0_loop_aux_EQ -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=-1+arg2, (2-arg1 > 0 /\ -1+arg2 > 0 /\ arg3 == 0), cost: 1
New rule:
f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=-1+arg3, (arg2 == 0 /\ -1+arg3 > 0 /\ 10-arg3 > 0 /\ 2-arg1 > 0), cost: 2

Applied chaining
First rule:
f99_0_loop_aux_LE -> f128_0_loop_aux_EQ : arg2'=arg3, arg3'=arg2, (-1+arg3 > 0 /\ 10-arg3 > 0), cost: 1
Second rule:
f128_0_loop_aux_EQ -> f99_0_loop_aux_LE : arg2'=1, arg1'=1, arg3'=1+arg2, (-1+arg3 == 0 /\ 2-arg1 > 0 /\ -1+arg2 > 0), cost: 1
New rule:
f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=1, arg1'=1, arg3'=1+arg3, (-1+arg3 > 0 /\ 10-arg3 > 0 /\ 2-arg1 > 0 /\ -1+arg2 == 0), cost: 2

Applied chaining
First rule:
f99_0_loop_aux_LE -> f128_0_loop_aux_EQ : arg2'=arg3, arg3'=arg2, (-1+arg3 > 0 /\ 10-arg3 > 0), cost: 1
Second rule:
f128_0_loop_aux_EQ -> f99_0_loop_aux_LE : arg2'=1, arg1'=1, arg3'=2, (-2+arg2 == 0 /\ 2-arg1 > 0 /\ arg3 == 0), cost: 2
New rule:
f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=1, arg1'=1, arg3'=2, (arg2 == 0 /\ -1+arg3 > 0 /\ 10-arg3 > 0 /\ 2-arg1 > 0 /\ -2+arg3 == 0), cost: 3

Applied simplification
Original rule:
f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=1, arg1'=1, arg3'=2, (arg2 == 0 /\ -1+arg3 > 0 /\ 10-arg3 > 0 /\ 2-arg1 > 0 /\ -2+arg3 == 0), cost: 3
New rule:
f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=1, arg1'=1, arg3'=2, (arg2 == 0 /\ 2-arg1 > 0 /\ -2+arg3 == 0), cost: 3

Applied chaining
First rule:
f99_0_loop_aux_LE -> f128_0_loop_aux_EQ : arg2'=arg3, arg3'=arg2, (-1+arg3 > 0 /\ 10-arg3 > 0), cost: 1
Second rule:
f128_0_loop_aux_EQ -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=9, (-9+arg2 == 0 /\ -1+arg3 == 0 /\ 2-arg1 > 0), cost: 2
New rule:
f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=9, (-1+arg3 > 0 /\ -9+arg3 == 0 /\ 10-arg3 > 0 /\ 2-arg1 > 0 /\ -1+arg2 == 0), cost: 3

Applied simplification
Original rule:
f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=9, (-1+arg3 > 0 /\ -9+arg3 == 0 /\ 10-arg3 > 0 /\ 2-arg1 > 0 /\ -1+arg2 == 0), cost: 3
New rule:
f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=9, (-9+arg3 == 0 /\ 2-arg1 > 0 /\ -1+arg2 == 0), cost: 3

Applied chaining
First rule:
f99_0_loop_aux_LE -> f128_0_loop_aux_EQ : arg2'=arg3, arg3'=arg2, -10+arg3 > 0, cost: 1
Second rule:
f128_0_loop_aux_EQ -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=-1+arg2, (2-arg1 > 0 /\ -1+arg2 > 0 /\ arg3 == 0), cost: 1
New rule:
f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=-1+arg3, (-10+arg3 > 0 /\ arg2 == 0 /\ -1+arg3 > 0 /\ 2-arg1 > 0), cost: 2

Applied simplification
Original rule:
f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=-1+arg3, (-10+arg3 > 0 /\ arg2 == 0 /\ -1+arg3 > 0 /\ 2-arg1 > 0), cost: 2
New rule:
f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=-1+arg3, (-10+arg3 > 0 /\ arg2 == 0 /\ 2-arg1 > 0), cost: 2

Applied chaining
First rule:
f99_0_loop_aux_LE -> f128_0_loop_aux_EQ : arg2'=arg3, arg3'=arg2, -10+arg3 > 0, cost: 1
Second rule:
f128_0_loop_aux_EQ -> f99_0_loop_aux_LE : arg2'=1, arg1'=1, arg3'=1+arg2, (-1+arg3 == 0 /\ 2-arg1 > 0 /\ -1+arg2 > 0), cost: 1
New rule:
f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=1, arg1'=1, arg3'=1+arg3, (-10+arg3 > 0 /\ -1+arg3 > 0 /\ 2-arg1 > 0 /\ -1+arg2 == 0), cost: 2

Applied simplification
Original rule:
f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=1, arg1'=1, arg3'=1+arg3, (-10+arg3 > 0 /\ -1+arg3 > 0 /\ 2-arg1 > 0 /\ -1+arg2 == 0), cost: 2
New rule:
f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=1, arg1'=1, arg3'=1+arg3, (-10+arg3 > 0 /\ 2-arg1 > 0 /\ -1+arg2 == 0), cost: 2

Applied chaining
First rule:
f99_0_loop_aux_LE -> f128_0_loop_aux_EQ : arg2'=arg3, arg3'=arg2, -10+arg3 > 0, cost: 1
Second rule:
f128_0_loop_aux_EQ -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=9, (-11+arg2 == 0 /\ 2-arg1 > 0 /\ arg3 == 0), cost: 2
New rule:
f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=9, (-10+arg3 > 0 /\ arg2 == 0 /\ 2-arg1 > 0 /\ -11+arg3 == 0), cost: 3

Applied simplification
Original rule:
f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=9, (-10+arg3 > 0 /\ arg2 == 0 /\ 2-arg1 > 0 /\ -11+arg3 == 0), cost: 3
New rule:
f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=9, (arg2 == 0 /\ 2-arg1 > 0 /\ -11+arg3 == 0), cost: 3

Applied deletion
Removed the following rules: 9 10 11 14 15 17 18

Eliminated locations on tree-shaped paths
Start location: __init
  21: f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=-1+arg3, (arg2 == 0 /\ -1+arg3 > 0 /\ 10-arg3 > 0 /\ 2-arg1 > 0), cost: 2
  22: f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=1, arg1'=1, arg3'=1+arg3, (-1+arg3 > 0 /\ 10-arg3 > 0 /\ 2-arg1 > 0 /\ -1+arg2 == 0), cost: 2
  23: f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=1, arg1'=1, arg3'=2, (arg2 == 0 /\ 2-arg1 > 0 /\ -2+arg3 == 0), cost: 3
  24: f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=9, (-9+arg3 == 0 /\ 2-arg1 > 0 /\ -1+arg2 == 0), cost: 3
  25: f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=-1+arg3, (-10+arg3 > 0 /\ arg2 == 0 /\ 2-arg1 > 0), cost: 2
  26: f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=1, arg1'=1, arg3'=1+arg3, (-10+arg3 > 0 /\ 2-arg1 > 0 /\ -1+arg2 == 0), cost: 2
  27: f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=9, (arg2 == 0 /\ 2-arg1 > 0 /\ -11+arg3 == 0), cost: 3
  19: __init -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=10*arg2P7, (arg1P7 > 0 /\ 1+arg2P7 > 0), cost: 2
  20: __init -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=9, (arg1P7 > 0 /\ -1+arg2P7 == 0), cost: 3


Applied pruning (of leafs and parallel rules):
Start location: __init
  21: f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=-1+arg3, (arg2 == 0 /\ -1+arg3 > 0 /\ 10-arg3 > 0 /\ 2-arg1 > 0), cost: 2
  22: f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=1, arg1'=1, arg3'=1+arg3, (-1+arg3 > 0 /\ 10-arg3 > 0 /\ 2-arg1 > 0 /\ -1+arg2 == 0), cost: 2
  23: f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=1, arg1'=1, arg3'=2, (arg2 == 0 /\ 2-arg1 > 0 /\ -2+arg3 == 0), cost: 3
  24: f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=9, (-9+arg3 == 0 /\ 2-arg1 > 0 /\ -1+arg2 == 0), cost: 3
  25: f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=-1+arg3, (-10+arg3 > 0 /\ arg2 == 0 /\ 2-arg1 > 0), cost: 2
  19: __init -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=10*arg2P7, (arg1P7 > 0 /\ 1+arg2P7 > 0), cost: 2
  20: __init -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=9, (arg1P7 > 0 /\ -1+arg2P7 == 0), cost: 3


Applied acceleration
Original rule:
f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=-1+arg3, (arg2 == 0 /\ -1+arg3 > 0 /\ 10-arg3 > 0 /\ 2-arg1 > 0), cost: 2
New rule:
f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=-n1+arg3, (arg2 >= 0 /\ -n1+arg3 > 0 /\ -1+n1 >= 0 /\ -arg2 >= 0 /\ 10-arg3 > 0 /\ 2-arg1 > 0), cost: 2*n1
Sub-proof via acceration calculus written to file:///tmp/tmpnam_BblbLP.txt

Applied instantiation
Original rule:
f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=-n1+arg3, (arg2 >= 0 /\ -n1+arg3 > 0 /\ -1+n1 >= 0 /\ -arg2 >= 0 /\ 10-arg3 > 0 /\ 2-arg1 > 0), cost: 2*n1
New rule:
f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=1, (1 > 0 /\ arg2 >= 0 /\ -arg2 >= 0 /\ 10-arg3 > 0 /\ 2-arg1 > 0 /\ -2+arg3 >= 0), cost: -2+2*arg3

Applied acceleration
Original rule:
f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=1, arg1'=1, arg3'=1+arg3, (-1+arg3 > 0 /\ 10-arg3 > 0 /\ 2-arg1 > 0 /\ -1+arg2 == 0), cost: 2
New rule:
f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=1, arg1'=1, arg3'=n2+arg3, (-1+arg3 > 0 /\ -1+n2 >= 0 /\ 2-arg1 > 0 /\ 1-arg2 >= 0 /\ -1+arg2 >= 0 /\ 11-n2-arg3 > 0), cost: 2*n2
Sub-proof via acceration calculus written to file:///tmp/tmpnam_InlAfO.txt

Applied instantiation
Original rule:
f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=1, arg1'=1, arg3'=n2+arg3, (-1+arg3 > 0 /\ -1+n2 >= 0 /\ 2-arg1 > 0 /\ 1-arg2 >= 0 /\ -1+arg2 >= 0 /\ 11-n2-arg3 > 0), cost: 2*n2
New rule:
f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=1, arg1'=1, arg3'=10, (9-arg3 >= 0 /\ 1 > 0 /\ -1+arg3 > 0 /\ 2-arg1 > 0 /\ 1-arg2 >= 0 /\ -1+arg2 >= 0), cost: 20-2*arg3

Applied acceleration
Original rule:
f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=-1+arg3, (-10+arg3 > 0 /\ arg2 == 0 /\ 2-arg1 > 0), cost: 2
New rule:
f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=-n5+arg3, (arg2 >= 0 /\ -1+n5 >= 0 /\ -arg2 >= 0 /\ 2-arg1 > 0 /\ -9-n5+arg3 > 0), cost: 2*n5
Sub-proof via acceration calculus written to file:///tmp/tmpnam_EGlkaO.txt

Applied instantiation
Original rule:
f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=-n5+arg3, (arg2 >= 0 /\ -1+n5 >= 0 /\ -arg2 >= 0 /\ 2-arg1 > 0 /\ -9-n5+arg3 > 0), cost: 2*n5
New rule:
f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=10, (1 > 0 /\ arg2 >= 0 /\ -arg2 >= 0 /\ 2-arg1 > 0 /\ -11+arg3 >= 0), cost: -20+2*arg3

Applied simplification
Original rule:
f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=1, (1 > 0 /\ arg2 >= 0 /\ -arg2 >= 0 /\ 10-arg3 > 0 /\ 2-arg1 > 0 /\ -2+arg3 >= 0), cost: -2+2*arg3
New rule:
f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=1, (arg2 <= 0 /\ arg2 >= 0 /\ 10-arg3 > 0 /\ 2-arg1 > 0 /\ -2+arg3 >= 0), cost: -2+2*arg3

Applied simplification
Original rule:
f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=1, arg1'=1, arg3'=10, (9-arg3 >= 0 /\ 1 > 0 /\ -1+arg3 > 0 /\ 2-arg1 > 0 /\ 1-arg2 >= 0 /\ -1+arg2 >= 0), cost: 20-2*arg3
New rule:
f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=1, arg1'=1, arg3'=10, (-1+arg3 > 0 /\ -9+arg3 <= 0 /\ 2-arg1 > 0 /\ -1+arg2 <= 0 /\ -1+arg2 >= 0), cost: 20-2*arg3

Applied simplification
Original rule:
f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=10, (1 > 0 /\ arg2 >= 0 /\ -arg2 >= 0 /\ 2-arg1 > 0 /\ -11+arg3 >= 0), cost: -20+2*arg3
New rule:
f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=10, (arg2 <= 0 /\ arg2 >= 0 /\ 2-arg1 > 0 /\ -11+arg3 >= 0), cost: -20+2*arg3

Applied deletion
Removed the following rules: 21 22 25

Accelerated simple loops
Start location: __init
  23: f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=1, arg1'=1, arg3'=2, (arg2 == 0 /\ 2-arg1 > 0 /\ -2+arg3 == 0), cost: 3
  24: f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=9, (-9+arg3 == 0 /\ 2-arg1 > 0 /\ -1+arg2 == 0), cost: 3
  31: f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=1, (arg2 <= 0 /\ arg2 >= 0 /\ 10-arg3 > 0 /\ 2-arg1 > 0 /\ -2+arg3 >= 0), cost: -2+2*arg3
  32: f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=1, arg1'=1, arg3'=10, (-1+arg3 > 0 /\ -9+arg3 <= 0 /\ 2-arg1 > 0 /\ -1+arg2 <= 0 /\ -1+arg2 >= 0), cost: 20-2*arg3
  33: f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=10, (arg2 <= 0 /\ arg2 >= 0 /\ 2-arg1 > 0 /\ -11+arg3 >= 0), cost: -20+2*arg3
  19: __init -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=10*arg2P7, (arg1P7 > 0 /\ 1+arg2P7 > 0), cost: 2
  20: __init -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=9, (arg1P7 > 0 /\ -1+arg2P7 == 0), cost: 3


Applied chaining
First rule:
__init -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=9, (arg1P7 > 0 /\ -1+arg2P7 == 0), cost: 3
Second rule:
f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=1, (arg2 <= 0 /\ arg2 >= 0 /\ 10-arg3 > 0 /\ 2-arg1 > 0 /\ -2+arg3 >= 0), cost: -2+2*arg3
New rule:
__init -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=1, (0 == 0 /\ 1 > 0 /\ 2 > 0 /\ 7 >= 0), cost: 19

Applied chaining
First rule:
__init -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=10*arg2P7, (arg1P7 > 0 /\ 1+arg2P7 > 0), cost: 2
Second rule:
f99_0_loop_aux_LE -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=10, (arg2 <= 0 /\ arg2 >= 0 /\ 2-arg1 > 0 /\ -11+arg3 >= 0), cost: -20+2*arg3
New rule:
__init -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=10, -2+arg2P7 >= 0, cost: -18+20*arg2P7

Applied deletion
Removed the following rules: 23 24 31 32 33

Chained accelerated rules with incoming rules
Start location: __init
  19: __init -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=10*arg2P7, (arg1P7 > 0 /\ 1+arg2P7 > 0), cost: 2
  20: __init -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=9, (arg1P7 > 0 /\ -1+arg2P7 == 0), cost: 3
  34: __init -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=1, (0 == 0 /\ 1 > 0 /\ 2 > 0 /\ 7 >= 0), cost: 19
  35: __init -> f99_0_loop_aux_LE : arg2'=0, arg1'=0, arg3'=10, -2+arg2P7 >= 0, cost: -18+20*arg2P7


Removed unreachable locations and irrelevant leafs
Start location: __init
  <empty>


Computing asymptotic complexity

Proved the following lower bound
Complexity:  Unknown
Cpx degree: ?

Solved cost: 0
Rule cost:   0

