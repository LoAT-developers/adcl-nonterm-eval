unknown

Initial ITS

Start location: [1]
Program variables: x y z
   0: [1] -> [2] : x'=nondet, T, cost: 1
   1: [2] -> [3] : y'=nondet1, T, cost: 1
   2: [3] -> [4] : z'=nondet2, T, cost: 1
   3: [4] -> [6] : -z+2*y >= 0, cost: 1
   9: [4] -> [5] : -z+2*y < 0, cost: 1
   4: [6] -> [7] : (-1+z == 0 /\ x >= 0), cost: 1
   7: [6] -> [9] : (-1+z < 0 \/ -1+z > 0 \/ x < 0), cost: 1
   5: [7] -> [8] : x'=-1-2*y+x, T, cost: 1
   6: [8] -> [6] : T, cost: 1
   8: [9] -> [5] : T, cost: 1

Chained Linear Paths

Start location: [1]
Program variables: x y z
  11: [1] -> [4] : x'=nondet, y'=nondet1, z'=nondet2, T, cost: 1
   3: [4] -> [6] : -z+2*y >= 0, cost: 1
   9: [4] -> [5] : -z+2*y < 0, cost: 1
  13: [6] -> [5] : (-1+z < 0 \/ -1+z > 0 \/ x < 0), cost: 1
  14: [6] -> [6] : x'=-1-2*y+x, (-1+z == 0 /\ x >= 0), cost: 1

	Eliminating location [2] by chaining:

	Applied chaining

	First rule:
	[1] -> [2] : x'=nondet, T, cost: 1
	Second rule:
	[2] -> [3] : y'=nondet1, T, cost: 1
	New rule:
	[1] -> [3] : x'=nondet, y'=nondet1, T, cost: 1
	
	Applied deletion

	Removed the following rules: 0 1
	
	Eliminating location [3] by chaining:

	Applied chaining

	First rule:
	[1] -> [3] : x'=nondet, y'=nondet1, T, cost: 1
	Second rule:
	[3] -> [4] : z'=nondet2, T, cost: 1
	New rule:
	[1] -> [4] : x'=nondet, y'=nondet1, z'=nondet2, T, cost: 1
	
	Applied deletion

	Removed the following rules: 2 10
	
	Eliminating location [7] by chaining:

	Applied chaining

	First rule:
	[6] -> [7] : (-1+z == 0 /\ x >= 0), cost: 1
	Second rule:
	[7] -> [8] : x'=-1-2*y+x, T, cost: 1
	New rule:
	[6] -> [8] : x'=-1-2*y+x, (-1+z == 0 /\ x >= 0), cost: 1
	
	Applied deletion

	Removed the following rules: 4 5
	
	Eliminating location [9] by chaining:

	Applied chaining

	First rule:
	[6] -> [9] : (-1+z < 0 \/ -1+z > 0 \/ x < 0), cost: 1
	Second rule:
	[9] -> [5] : T, cost: 1
	New rule:
	[6] -> [5] : (-1+z < 0 \/ -1+z > 0 \/ x < 0), cost: 1
	
	Applied deletion

	Removed the following rules: 7 8
	
	Eliminating location [8] by chaining:

	Applied chaining

	First rule:
	[6] -> [8] : x'=-1-2*y+x, (-1+z == 0 /\ x >= 0), cost: 1
	Second rule:
	[8] -> [6] : T, cost: 1
	New rule:
	[6] -> [6] : x'=-1-2*y+x, (-1+z == 0 /\ x >= 0), cost: 1
	
	Applied deletion

	Removed the following rules: 6 12

Step with 11

	Trace

	11[T]
	
	Blocked

	[{}, {}]

Step with 3

	Trace

	11[T], 3[(-z+2*y >= 0)]
	
	Blocked

	[{}, {}, {}]

Step with 13

	Trace

	11[T], 3[(-z+2*y >= 0)], 13[(-1+z > 0)]
	
	Blocked

	[{}, {}, {}, {}]

Backtrack

	Trace

	11[T], 3[(-z+2*y >= 0)]
	
	Blocked

	[{}, {}, {13[-1+z > 0]}]

Step with 13

	Trace

	11[T], 3[(-z+2*y >= 0)], 13[(-1+z < 0)]
	
	Blocked

	[{}, {}, {13[-1+z > 0]}, {}]

Backtrack

	Trace

	11[T], 3[(-z+2*y >= 0)]
	
	Blocked

	[{}, {}, {13[(-1+z < 0 /\ -1+z > 0)]}]

Step with 13

	Trace

	11[T], 3[(-z+2*y >= 0)], 13[(x < 0)]
	
	Blocked

	[{}, {}, {13[(-1+z < 0 /\ -1+z > 0)]}, {}]

Backtrack

	Trace

	11[T], 3[(-z+2*y >= 0)]
	
	Blocked

	[{}, {}, {13[(-1+z < 0 /\ -1+z > 0 /\ x < 0)]}]

Step with 14

	Trace

	11[T], 3[(-z+2*y >= 0)], 14[(-1+z == 0 /\ x >= 0)]
	
	Blocked

	[{}, {}, {13[T]}, {}]

Accelerate

Start location: [1]
Program variables: x y z
  11: [1] -> [4] : x'=nondet, y'=nondet1, z'=nondet2, T, cost: 1
   3: [4] -> [6] : -z+2*y >= 0, cost: 1
   9: [4] -> [5] : -z+2*y < 0, cost: 1
  13: [6] -> [5] : (-1+z < 0 \/ -1+z > 0 \/ x < 0), cost: 1
  14: [6] -> [6] : x'=-1-2*y+x, (-1+z == 0 /\ x >= 0), cost: 1
  15: [6] -> LoAT_sink : (1-z >= 0 /\ -1+z >= 0 /\ 1+2*y <= 0 /\ x >= 0), cost: NONTERM
  16: [6] -> [6] : x'=-n-2*n*y+x, (1-z >= 0 /\ -1+z >= 0 /\ -1+n >= 0 /\ 1-2*(-1+n)*y-n+x >= 0 /\ x >= 0), cost: 1

	Certificate of Non-Termination

	Original rule:
	[6] -> [6] : x'=-1-2*y+x, (-1+z == 0 /\ x >= 0), cost: 1
	New rule:
	[6] -> LoAT_sink : (1-z >= 0 /\ -1+z >= 0 /\ 1+2*y <= 0 /\ x >= 0), cost: NONTERM

		1-z >= 0 [0]: monotonic increase yields 1-z >= 0
		
		-1+z >= 0 [0]: monotonic increase yields -1+z >= 0
		
		x >= 0 [0]: eventual decrease yields (1-2*(-1+n)*y-n+x >= 0 /\ x >= 0)
		
		x >= 0 [1]: eventual increase yields (1+2*y <= 0 /\ x >= 0)
		
		Replacement map: {1-z >= 0 -> 1-z >= 0, -1+z >= 0 -> -1+z >= 0, x >= 0 -> (1+2*y <= 0 /\ x >= 0)}

	Loop Acceleration

	Original rule:
	[6] -> [6] : x'=-1-2*y+x, (-1+z == 0 /\ x >= 0), cost: 1
	New rule:
	[6] -> [6] : x'=-n-2*n*y+x, (1-z >= 0 /\ -1+z >= 0 /\ -1+n >= 0 /\ 1-2*(-1+n)*y-n+x >= 0 /\ x >= 0), cost: 1

		1-z >= 0 [0]: monotonic increase yields 1-z >= 0
		
		-1+z >= 0 [0]: monotonic increase yields -1+z >= 0
		
		x >= 0 [0]: eventual decrease yields (1-2*(-1+n)*y-n+x >= 0 /\ x >= 0)
		
		x >= 0 [1]: eventual increase yields (1+2*y <= 0 /\ x >= 0)
		
		Replacement map: {1-z >= 0 -> 1-z >= 0, -1+z >= 0 -> -1+z >= 0, x >= 0 -> (1-2*(-1+n)*y-n+x >= 0 /\ x >= 0)}

	Trace

	11[T], 3[(-z+2*y >= 0)], 16[(1-z >= 0 /\ -1+z >= 0 /\ -1+n >= 0 /\ 1-2*(-1+n)*y-n+x >= 0 /\ x >= 0)]
	
	Blocked

	[{}, {}, {13[T]}, {14[T], 16[T]}]

Step with 13

	Trace

	11[T], 3[(-z+2*y >= 0)], 16[(1-z >= 0 /\ -1+z >= 0 /\ -1+n >= 0 /\ 1-2*(-1+n)*y-n+x >= 0 /\ x >= 0)], 13[(x < 0)]
	
	Blocked

	[{}, {}, {13[T]}, {14[T], 15[T], 16[T]}, {}]

Backtrack

	Trace

	11[T], 3[(-z+2*y >= 0)], 16[(1-z >= 0 /\ -1+z >= 0 /\ -1+n >= 0 /\ 1-2*(-1+n)*y-n+x >= 0 /\ x >= 0)]
	
	Blocked

	[{}, {}, {13[T]}, {13[x < 0], 14[T], 15[T], 16[T]}]

Backtrack

	Trace

	11[T], 3[(-z+2*y >= 0)]
	
	Blocked

	[{}, {}, {13[T], 16[T]}]

Step with 14

	Trace

	11[T], 3[(-z+2*y >= 0)], 14[(-1+z == 0 /\ x >= 0)]
	
	Blocked

	[{}, {}, {13[T], 16[T]}, {}]

Covered

	Trace

	11[T], 3[(-z+2*y >= 0)]
	
	Blocked

	[{}, {}, {13[T], 14[T], 16[T]}]

Backtrack

	Trace

	11[T]
	
	Blocked

	[{}, {3[T]}]

Step with 9

	Trace

	11[T], 9[(-z+2*y < 0)]
	
	Blocked

	[{}, {3[T]}, {}]

Backtrack

	Trace

	11[T]
	
	Blocked

	[{}, {3[T], 9[T]}]

Backtrack

	Trace

	Blocked

	[{11[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
