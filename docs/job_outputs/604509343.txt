NO

Solver Timeout: 4
Global Timeout: 300
No parsing errors!
Init Location: 0
Transitions:
<l0, l3, true>
<l1, l2, (arg1 > 0) /\ (arg2 > ~(1)), par{arg1 -> arg2, arg2 -> 20}>
<l2, l2, (0 = arg1) /\ (0 = arg2), par{arg1 -> 0, arg2 -> 0}>
<l2, l2, (arg2 > arg1) /\ (arg2 > 0) /\ (arg1 > 0), par{arg1 -> (arg1 + 1)}>
<l2, l2, (arg1 > 0) /\ (arg1 = arg2), par{arg1 -> 0, arg2 -> (arg1 - 1)}>
<l2, l2, (arg2 > 0) /\ (0 = arg1), par{arg1 -> 1}>
<l3, l1, true, par{arg1 -> undef11, arg2 -> undef12}>

Fresh variables:
undef11, undef12, 

Undef variables:
undef11, undef12, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l2, (arg1 = undef12) /\ (arg2 = 20) /\ (undef11 > 0) /\ (undef12 > ~(1))>
<l2, l2, (0 = arg1) /\ (0 = arg2), par{arg1 -> 0, arg2 -> 0}>
<l2, l2, (arg2 > arg1) /\ (arg2 > 0) /\ (arg1 > 0), par{arg1 -> (arg1 + 1)}>
<l2, l2, (arg1 > 0) /\ (arg1 = arg2), par{arg1 -> 0, arg2 -> (arg1 - 1)}>
<l2, l2, (arg2 > 0) /\ (0 = arg1), par{arg1 -> 1}>

Fresh variables:
undef11, undef12, 

Undef variables:
undef11, undef12, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l2, l2, arg1 = 0 /\ arg2 = 0, {arg1 -> 0, arg2 -> 0, rest remain the same}>
<l2, l2, 1 + arg1 <= arg2 /\ 1 <= arg1 /\ 1 <= arg2, {arg1 -> 1 + arg1, rest remain the same}>
<l2, l2, 1 <= arg1 /\ arg1 = arg2, {arg1 -> 0, arg2 -> -1 + arg1, rest remain the same}>
<l2, l2, 1 <= arg2 /\ arg1 = 0, {arg1 -> 1, rest remain the same}>
Variables:
arg1, arg2

Precedence: 
Graph 0

Graph 1
<l0, l2, 0 <= undef12 /\ 1 <= undef11 /\ arg1 = undef12 /\ arg2 = 20, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 2 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.180836

Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.001455s
[33mRanking function: [36m-1 + arg2[0m
New Graphs: 
Transitions:
<l2, l2, arg1 = 0 /\ arg2 = 0, {arg1 -> 0, arg2 -> 0, rest remain the same}>
<l2, l2, 1 + arg1 <= arg2 /\ 1 <= arg1 /\ 1 <= arg2, {arg1 -> 1 + arg1, rest remain the same}>
<l2, l2, 1 <= arg2 /\ arg1 = 0, {arg1 -> 1, rest remain the same}>
Variables:
arg1, arg2
Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000628s
[33mRanking function: [36m-5 - arg1 + 3*arg2[0m
New Graphs: 
Transitions:
<l2, l2, arg1 = 0 /\ arg2 = 0, {arg1 -> 0, arg2 -> 0, rest remain the same}>
<l2, l2, 1 <= arg2 /\ arg1 = 0, {arg1 -> 1, rest remain the same}>
Variables:
arg1, arg2
Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000432s
[33mRanking function: [36m-1 - arg1 + arg2[0m
New Graphs: 
Transitions:
<l2, l2, arg1 = 0 /\ arg2 = 0, {arg1 -> 0, arg2 -> 0, rest remain the same}>
Variables:
arg1, arg2
Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000206s

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000593s
Trying to remove transition: <l2, l2, arg1 = 0 /\ arg2 = 0, {arg1 -> 0, arg2 -> 0, rest remain the same}>
Solving with 1 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 0.001601s
Time used: 0.001532
Solving with 1 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 0.005617s
Time used: 0.00543
Improving Solution with cost 1 ...

LOG: CALL solveNonLinearGetNextSolution

LOG: RETURN solveNonLinearGetNextSolution - Elapsed time: 0.179352s
Time used: 0.179348

LOG: SAT solveNonLinear - Elapsed time: 0.184968s
Cost: 1; Total time: 0.184778
[31mFailed at location 2: 1 + arg2 <= arg1[0m
Before Improving: 
[36mQuasi-invariant at l2: 1 + arg2 <= arg1[0m
Optimizing invariants...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.003186s
Remaining time after improvement: 0.999072
[33mTermination implied by a set of quasi-invariant(s):[0m
[36mQuasi-invariant at l2: 1 + arg2 <= arg1[0m
[ Invariant Graph ]
[33mStrengthening and disabling transitions...[0m

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
It's unfeasible. Removing transition: 
<l2, l2, arg1 = 0 /\ arg2 = 0, {arg1 -> 0, arg2 -> 0, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
It's unfeasible. Removing transition: 
<l2, l2, 1 + arg1 <= arg2 /\ 1 <= arg1 /\ 1 <= arg2, {arg1 -> 1 + arg1, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
It's unfeasible. Removing transition: 
<l2, l2, 1 <= arg1 /\ arg1 = arg2, {arg1 -> 0, arg2 -> -1 + arg1, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
It's unfeasible. Removing transition: 
<l2, l2, 1 <= arg2 /\ arg1 = 0, {arg1 -> 1, rest remain the same}>
[ Termination Graph ]
[33mStrengthening and disabling transitions...[0m
> It's unfeasible. Removing transition: 
<l2, l2, arg1 = 0 /\ arg2 = 0, {arg1 -> 0, arg2 -> 0, rest remain the same}>
New Graphs: 
Calling Safety with literal 1 + arg2 <= arg1 and entry <l0, l2, 0 <= undef12 /\ 1 <= undef11 /\ arg1 = undef12 /\ arg2 = 20, {all remain the same}>

LOG: CALL check - Post:1 + arg2 <= arg1 - Process 1
* Exit transition: <l0, l2, 0 <= undef12 /\ 1 <= undef11 /\ arg1 = undef12 /\ arg2 = 20, {all remain the same}>
* Postcondition  : 1 + arg2 <= arg1

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000329s
[31m> Postcondition is not implied![0m

LOG: RETURN check - Elapsed time: 0.000374s
INVARIANTS: 
2: 
Quasi-INVARIANTS to narrow Graph: 
2: 1 + arg2 <= arg1 , 
Narrowing transition: 
<l2, l2, arg1 = 0 /\ arg2 = 0, {arg1 -> 0, arg2 -> 0, rest remain the same}>

LOG: Narrow transition size 1
Narrowing transition: 
<l2, l2, 1 + arg1 <= arg2 /\ 1 <= arg1 /\ 1 <= arg2, {arg1 -> 1 + arg1, rest remain the same}>

LOG: Narrow transition size 1
Narrowing transition: 
<l2, l2, 1 <= arg1 /\ arg1 = arg2, {arg1 -> 0, arg2 -> -1 + arg1, rest remain the same}>

LOG: Narrow transition size 1
Narrowing transition: 
<l2, l2, 1 <= arg2 /\ arg1 = 0, {arg1 -> 1, rest remain the same}>

LOG: Narrow transition size 1
invGraph after Narrowing: 
Transitions:
<l2, l2, arg1 <= arg2 /\ arg1 = 0 /\ arg2 = 0, {arg1 -> 0, arg2 -> 0, rest remain the same}>
<l2, l2, 1 + arg1 <= arg2 /\ 1 <= arg1 /\ 1 <= arg2, {arg1 -> 1 + arg1, rest remain the same}>
<l2, l2, 1 <= arg1 /\ arg1 = arg2, {arg1 -> 0, arg2 -> -1 + arg1, rest remain the same}>
<l2, l2, arg1 <= arg2 /\ 1 <= arg2 /\ arg1 = 0, {arg1 -> 1, rest remain the same}>
Variables:
arg1, arg2
Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000936s
[33mRanking function: [36m-1 + arg2[0m
New Graphs: 
Transitions:
<l2, l2, arg1 <= arg2 /\ arg1 = 0 /\ arg2 = 0, {arg1 -> 0, arg2 -> 0, rest remain the same}>
<l2, l2, 1 + arg1 <= arg2 /\ 1 <= arg1 /\ 1 <= arg2, {arg1 -> 1 + arg1, rest remain the same}>
<l2, l2, arg1 <= arg2 /\ 1 <= arg2 /\ arg1 = 0, {arg1 -> 1, rest remain the same}>
Variables:
arg1, arg2
Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000748s
[33mRanking function: [36m-1 - arg1 + arg2[0m
New Graphs: 
Transitions:
<l2, l2, arg1 <= arg2 /\ arg1 = 0 /\ arg2 = 0, {arg1 -> 0, arg2 -> 0, rest remain the same}>
Variables:
arg1, arg2
Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000248s

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000718s
Trying to remove transition: <l2, l2, arg1 <= arg2 /\ arg1 = 0 /\ arg2 = 0, {arg1 -> 0, arg2 -> 0, rest remain the same}>
Solving with 1 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 0.001729s
Time used: 0.001659
Solving with 1 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 0.624370s
Time used: 0.624233
Solving with 2 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 4.005527s
Time used: 4.00045
Solving with 3 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 1.007514s
Time used: 1.00041
Solving with 1 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 0.220999s
Time used: 0.214262

Proving non-termination of subgraph 1
Transitions:
<l2, l2, arg1 <= arg2 /\ arg1 = 0 /\ arg2 = 0, {arg1 -> 0, arg2 -> 0, rest remain the same}>
<l2, l2, 1 + arg1 <= arg2 /\ 1 <= arg1 /\ 1 <= arg2, {arg1 -> 1 + arg1, rest remain the same}>
<l2, l2, 1 <= arg1 /\ arg1 = arg2, {arg1 -> 0, arg2 -> -1 + arg1, rest remain the same}>
<l2, l2, arg1 <= arg2 /\ 1 <= arg2 /\ arg1 = 0, {arg1 -> 1, rest remain the same}>
Variables:
arg1, arg2

Checking conditional non-termination of SCC {l2}...
EXIT TRANSITIONS:
<l2, end, 1 <= arg1 /\ 1 + arg2 <= arg1 /\ 1 <= arg2, {all remain the same}>
<l2, end, arg2 <= 0 /\ 1 <= arg1 /\ 1 + arg2 <= arg1, {all remain the same}>
<l2, end, arg1 <= 0 /\ 1 + arg2 <= arg1 /\ 1 + arg2 <= 0, {all remain the same}>
<l2, end, 1 + arg1 <= 0 /\ 1 + arg1 <= arg2 /\ 1 <= arg2, {all remain the same}>
<l2, end, 1 + arg1 <= 0 /\ 1 + arg1 <= arg2 /\ arg2 = 0, {all remain the same}>
<l2, end, arg1 <= arg2 /\ 1 + arg1 <= 0 /\ 1 + arg2 <= 0, {all remain the same}>

Solving with 1 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 0.009696s
Time used: 0.009539
Improving Solution with cost 3 ...

LOG: CALL solveNonLinearGetNextSolution

LOG: RETURN solveNonLinearGetNextSolution - Elapsed time: 0.264760s
Time used: 0.264751

LOG: SAT solveNonLinear - Elapsed time: 0.274456s
Cost: 3; Total time: 0.27429
[33mNon-termination implied by a set of quasi-invariant(s):[0m
[36mQuasi-invariant at l2: 0 <= arg1[0m

[33mStrengthening and disabling EXIT transitions...[0m
Closed exits from l2: 3
Strengthening exit transition (result): 
<l2, end, 1 <= arg1 /\ 1 + arg2 <= arg1 /\ 1 <= arg2, {all remain the same}>
Strengthening exit transition (result): 
<l2, end, arg2 <= 0 /\ 1 <= arg1 /\ 1 + arg2 <= arg1, {all remain the same}>
Strengthening exit transition (result): 
<l2, end, 1 + arg2 <= arg1 /\ 1 + arg2 <= 0 /\ arg1 = 0, {all remain the same}>

[33mStrengthening and disabling transitions...[0m

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l2, l2, arg1 <= arg2 /\ arg1 = 0 /\ arg2 = 0, {arg1 -> 0, arg2 -> 0, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l2, l2, 1 + arg1 <= arg2 /\ 1 <= arg1 /\ 1 <= arg2, {arg1 -> 1 + arg1, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l2, l2, 1 <= arg1 /\ arg1 = arg2, {arg1 -> 0, arg2 -> -1 + arg1, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l2, l2, arg1 <= arg2 /\ 1 <= arg2 /\ arg1 = 0, {arg1 -> 1, rest remain the same}>

Checking conditional non-termination of SCC {l2}...
EXIT TRANSITIONS:
<l2, end, 1 <= arg1 /\ 1 + arg2 <= arg1 /\ 1 <= arg2, {all remain the same}>
<l2, end, arg2 <= 0 /\ 1 <= arg1 /\ 1 + arg2 <= arg1, {all remain the same}>
<l2, end, 1 + arg2 <= arg1 /\ 1 + arg2 <= 0 /\ arg1 = 0, {all remain the same}>

Solving with 1 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 0.005970s
Time used: 0.005834
Improving Solution with cost 1 ...

LOG: CALL solveNonLinearGetNextSolution

LOG: RETURN solveNonLinearGetNextSolution - Elapsed time: 0.008761s
Time used: 0.00876

LOG: SAT solveNonLinear - Elapsed time: 0.014731s
Cost: 1; Total time: 0.014594
[31mFailed at location 2: arg1 <= arg2[0m
Before Improving: 
[36mQuasi-invariant at l2: arg1 <= arg2[0m
Optimizing invariants...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.002677s
Remaining time after improvement: 0.999018
[33mNon-termination implied by a set of quasi-invariant(s):[0m
[36mQuasi-invariant at l2: arg1 <= arg2[0m

[33mStrengthening and disabling EXIT transitions...[0m
Closed exits from l2: 3

[33mStrengthening and disabling transitions...[0m

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l2, l2, arg1 <= arg2 /\ arg1 = 0 /\ arg2 = 0, {arg1 -> 0, arg2 -> 0, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l2, l2, 1 + arg1 <= arg2 /\ 1 <= arg1 /\ 1 <= arg2, {arg1 -> 1 + arg1, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l2, l2, 1 <= arg1 /\ arg1 = arg2, {arg1 -> 0, arg2 -> -1 + arg1, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l2, l2, arg1 <= arg2 /\ 1 <= arg2 /\ arg1 = 0, {arg1 -> 1, rest remain the same}>

Calling reachability with...
Transition: <l2, end, true, {all remain the same}>
Conditions: 0 <= arg1, arg1 <= arg2, 
OPEN EXITS: 
<l2, end, arg1 <= arg2 /\ 0 <= arg1, {all remain the same}>

--- Reachability graph ---
> Graph without transitions.

Calling reachability with...
Transition: <l0, l2, 0 <= undef12 /\ 1 <= undef11 /\ arg1 = undef12 /\ arg2 = 20, {all remain the same}>
Conditions: arg1 <= arg2, 0 <= arg1, 
OPEN EXITS: 
<l0, l2, arg1 <= arg2 /\ 0 <= arg1 /\ 0 <= undef12 /\ 1 <= undef11 /\ arg1 = undef12 /\ arg2 = 20, {all remain the same}>

[32m> Conditions are reachable![0m

[32mProgram does NOT terminate[0m
