NO

Initial ITS
Start location: __init
   0: f1_0_main_Load -> f32_0_increase_GE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2 > 0 /\ arg1 > 0 /\ arg2-arg1P0 == 0), cost: 1
   1: f32_0_increase_GE -> f32_0_increase_GE : arg2'=arg2P1, arg1'=arg1P1, (1 > 0 /\ 1+arg1 > 0 /\ 1+arg1-arg1P1 == 0 /\ -10+arg1 < 0), cost: 1
   2: f32_0_increase_GE -> f95_0_increase_aux_LE : arg2'=arg2P2, arg1'=arg1P2, (-10+arg1 < 0 /\ arg1-arg1P2 == 0), cost: 1
   3: f95_0_increase_aux_LE -> f95_0_increase_aux_LE : arg2'=arg2P3, arg1'=arg1P3, (1 > 0 /\ -5+arg1 > 0 /\ 1-arg1P3+arg1 == 0), cost: 1
   4: __init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_Load -> f32_0_increase_GE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2 > 0 /\ arg1 > 0 /\ arg2-arg1P0 == 0), cost: 1
New rule:
f1_0_main_Load -> f32_0_increase_GE : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f32_0_increase_GE -> f32_0_increase_GE : arg2'=arg2P1, arg1'=arg1P1, (1 > 0 /\ 1+arg1 > 0 /\ 1+arg1-arg1P1 == 0 /\ -10+arg1 < 0), cost: 1
New rule:
f32_0_increase_GE -> f32_0_increase_GE : arg2'=arg2P1, arg1'=1+arg1, (10-arg1 > 0 /\ 1+arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f32_0_increase_GE -> f95_0_increase_aux_LE : arg2'=arg2P2, arg1'=arg1P2, (-10+arg1 < 0 /\ arg1-arg1P2 == 0), cost: 1
New rule:
f32_0_increase_GE -> f95_0_increase_aux_LE : arg2'=arg2P2, 10-arg1 > 0, cost: 1

Applied preprocessing
Original rule:
f95_0_increase_aux_LE -> f95_0_increase_aux_LE : arg2'=arg2P3, arg1'=arg1P3, (1 > 0 /\ -5+arg1 > 0 /\ 1-arg1P3+arg1 == 0), cost: 1
New rule:
f95_0_increase_aux_LE -> f95_0_increase_aux_LE : arg2'=arg2P3, arg1'=1+arg1, -5+arg1 > 0, cost: 1

Simplified rules
Start location: __init
   5: f1_0_main_Load -> f32_0_increase_GE : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
   6: f32_0_increase_GE -> f32_0_increase_GE : arg2'=arg2P1, arg1'=1+arg1, (10-arg1 > 0 /\ 1+arg1 > 0), cost: 1
   7: f32_0_increase_GE -> f95_0_increase_aux_LE : arg2'=arg2P2, 10-arg1 > 0, cost: 1
   8: f95_0_increase_aux_LE -> f95_0_increase_aux_LE : arg2'=arg2P3, arg1'=1+arg1, -5+arg1 > 0, cost: 1
   4: __init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, TRUE, cost: 1


Applied acceleration
Original rule:
f32_0_increase_GE -> f32_0_increase_GE : arg2'=arg2P1, arg1'=1+arg1, (10-arg1 > 0 /\ 1+arg1 > 0), cost: 1
New rule:
f32_0_increase_GE -> f32_0_increase_GE : arg2'=arg2P1, arg1'=n+arg1, (1+arg1 > 0 /\ -1+n >= 0 /\ 11-n-arg1 > 0), cost: n
Sub-proof via acceration calculus written to file:///tmp/tmpnam_MkpDdD.txt

Applied instantiation
Original rule:
f32_0_increase_GE -> f32_0_increase_GE : arg2'=arg2P1, arg1'=n+arg1, (1+arg1 > 0 /\ -1+n >= 0 /\ 11-n-arg1 > 0), cost: n
New rule:
f32_0_increase_GE -> f32_0_increase_GE : arg2'=arg2P1, arg1'=10, (1 > 0 /\ 1+arg1 > 0 /\ 9-arg1 >= 0), cost: 10-arg1

Applied simplification
Original rule:
f32_0_increase_GE -> f32_0_increase_GE : arg2'=arg2P1, arg1'=10, (1 > 0 /\ 1+arg1 > 0 /\ 9-arg1 >= 0), cost: 10-arg1
New rule:
f32_0_increase_GE -> f32_0_increase_GE : arg2'=arg2P1, arg1'=10, (-9+arg1 <= 0 /\ 1+arg1 > 0), cost: 10-arg1

Applied deletion
Removed the following rules: 6

Applied nonterm
Original rule:
f95_0_increase_aux_LE -> f95_0_increase_aux_LE : arg2'=arg2P3, arg1'=1+arg1, -5+arg1 > 0, cost: 1
New rule:
f95_0_increase_aux_LE -> [5] : (-5+arg1 > 0 /\ -1+n0 >= 0), cost: NONTERM
Sub-proof via acceration calculus written to file:///tmp/tmpnam_EOliok.txt

Applied deletion
Removed the following rules: 8

Accelerated simple loops
Start location: __init
   5: f1_0_main_Load -> f32_0_increase_GE : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
   7: f32_0_increase_GE -> f95_0_increase_aux_LE : arg2'=arg2P2, 10-arg1 > 0, cost: 1
  10: f32_0_increase_GE -> f32_0_increase_GE : arg2'=arg2P1, arg1'=10, (-9+arg1 <= 0 /\ 1+arg1 > 0), cost: 10-arg1
  11: f95_0_increase_aux_LE -> [5] : (-5+arg1 > 0 /\ -1+n0 >= 0), cost: NONTERM
   4: __init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, TRUE, cost: 1


Applied chaining
First rule:
f1_0_main_Load -> f32_0_increase_GE : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
Second rule:
f32_0_increase_GE -> f32_0_increase_GE : arg2'=arg2P1, arg1'=10, (-9+arg1 <= 0 /\ 1+arg1 > 0), cost: 10-arg1
New rule:
f1_0_main_Load -> f32_0_increase_GE : arg2'=arg2P1, arg1'=10, (-9+arg2 <= 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 11-arg2

Applied deletion
Removed the following rules: 10

Applied chaining
First rule:
f32_0_increase_GE -> f95_0_increase_aux_LE : arg2'=arg2P2, 10-arg1 > 0, cost: 1
Second rule:
f95_0_increase_aux_LE -> [5] : (-5+arg1 > 0 /\ -1+n0 >= 0), cost: NONTERM
New rule:
f32_0_increase_GE -> [5] : (10-arg1 > 0 /\ -5+arg1 > 0), cost: NONTERM

Applied deletion
Removed the following rules: 11

Chained accelerated rules with incoming rules
Start location: __init
   5: f1_0_main_Load -> f32_0_increase_GE : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
  12: f1_0_main_Load -> f32_0_increase_GE : arg2'=arg2P1, arg1'=10, (-9+arg2 <= 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 11-arg2
   7: f32_0_increase_GE -> f95_0_increase_aux_LE : arg2'=arg2P2, 10-arg1 > 0, cost: 1
  13: f32_0_increase_GE -> [5] : (10-arg1 > 0 /\ -5+arg1 > 0), cost: NONTERM
   4: __init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
   5: f1_0_main_Load -> f32_0_increase_GE : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
  12: f1_0_main_Load -> f32_0_increase_GE : arg2'=arg2P1, arg1'=10, (-9+arg2 <= 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 11-arg2
  13: f32_0_increase_GE -> [5] : (10-arg1 > 0 /\ -5+arg1 > 0), cost: NONTERM
   4: __init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, TRUE, cost: 1


Eliminating location f1_0_main_Load by chaining:

Applied chaining
First rule:
__init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, TRUE, cost: 1
Second rule:
f1_0_main_Load -> f32_0_increase_GE : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
New rule:
__init -> f32_0_increase_GE : arg2'=arg2P0, arg1'=arg2P4, (1+arg2P4 > 0 /\ arg1P4 > 0), cost: 2

Applied chaining
First rule:
__init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, TRUE, cost: 1
Second rule:
f1_0_main_Load -> f32_0_increase_GE : arg2'=arg2P1, arg1'=10, (-9+arg2 <= 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 11-arg2
New rule:
__init -> f32_0_increase_GE : arg2'=arg2P1, arg1'=10, (1+arg2P4 > 0 /\ -9+arg2P4 <= 0 /\ arg1P4 > 0), cost: 12-arg2P4

Applied deletion
Removed the following rules: 4 5 12

Eliminated locations on tree-shaped paths
Start location: __init
  13: f32_0_increase_GE -> [5] : (10-arg1 > 0 /\ -5+arg1 > 0), cost: NONTERM
  14: __init -> f32_0_increase_GE : arg2'=arg2P0, arg1'=arg2P4, (1+arg2P4 > 0 /\ arg1P4 > 0), cost: 2
  15: __init -> f32_0_increase_GE : arg2'=arg2P1, arg1'=10, (1+arg2P4 > 0 /\ -9+arg2P4 <= 0 /\ arg1P4 > 0), cost: 12-arg2P4


Eliminating location f32_0_increase_GE by chaining:

Applied chaining
First rule:
__init -> f32_0_increase_GE : arg2'=arg2P0, arg1'=arg2P4, (1+arg2P4 > 0 /\ arg1P4 > 0), cost: 2
Second rule:
f32_0_increase_GE -> [5] : (10-arg1 > 0 /\ -5+arg1 > 0), cost: NONTERM
New rule:
__init -> [5] : (1+arg2P4 > 0 /\ 10-arg2P4 > 0 /\ -5+arg2P4 > 0 /\ arg1P4 > 0), cost: NONTERM

Applied simplification
Original rule:
__init -> [5] : (1+arg2P4 > 0 /\ 10-arg2P4 > 0 /\ -5+arg2P4 > 0 /\ arg1P4 > 0), cost: NONTERM
New rule:
__init -> [5] : (10-arg2P4 > 0 /\ -5+arg2P4 > 0 /\ arg1P4 > 0), cost: NONTERM

Applied partial deletion
Original rule:
__init -> f32_0_increase_GE : arg2'=arg2P1, arg1'=10, (1+arg2P4 > 0 /\ -9+arg2P4 <= 0 /\ arg1P4 > 0), cost: 12-arg2P4
New rule:
__init -> [6] : (1+arg2P4 > 0 /\ -9+arg2P4 <= 0 /\ arg1P4 > 0), cost: 12-arg2P4

Applied deletion
Removed the following rules: 13 14 15

Eliminated locations on tree-shaped paths
Start location: __init
  16: __init -> [5] : (10-arg2P4 > 0 /\ -5+arg2P4 > 0 /\ arg1P4 > 0), cost: NONTERM
  17: __init -> [6] : (1+arg2P4 > 0 /\ -9+arg2P4 <= 0 /\ arg1P4 > 0), cost: 12-arg2P4


Computing asymptotic complexity
Proved nontermination of rule 16 via SMT.

Proved the following lower bound
Complexity:  Nonterm
Cpx degree: Nonterm

Solved cost: NONTERM
Rule cost:   NONTERM
Rule guard:  (10-arg2P4 > 0 /\ -5+arg2P4 > 0 /\ arg1P4 > 0)
