unknown

Initial ITS

Start location: l4
Program variables: result_4^0 x_5^0
   0: l0 -> l1 : result_4^0'=result_4^post1, x_5^0'=x_5^post1, (-x_5^0 <= 0 /\ -result_4^post1+result_4^0 == 0 /\ -1+x_5^post1-x_5^0 == 0), cost: 1
   1: l0 -> l1 : result_4^0'=result_4^post2, x_5^0'=x_5^post2, (1+x_5^0 <= 0 /\ -x_5^post2+x_5^0 == 0 /\ result_4^0-result_4^post2 == 0), cost: 1
   3: l1 -> l3 : result_4^0'=result_4^post4, x_5^0'=x_5^post4, (0 == 0 /\ -x_5^post4+x_5^0 == 0), cost: 1
   2: l2 -> l0 : result_4^0'=result_4^post3, x_5^0'=x_5^post3, (x_5^0-x_5^post3 == 0 /\ result_4^0-result_4^post3 == 0), cost: 1
   4: l4 -> l2 : result_4^0'=result_4^post5, x_5^0'=x_5^post5, (-x_5^post5+x_5^0 == 0 /\ result_4^0-result_4^post5 == 0), cost: 1

Chained Linear Paths

Start location: l4
Program variables: result_4^0 x_5^0
   0: l0 -> l1 : result_4^0'=result_4^post1, x_5^0'=x_5^post1, (-x_5^0 <= 0 /\ -result_4^post1+result_4^0 == 0 /\ -1+x_5^post1-x_5^0 == 0), cost: 1
   1: l0 -> l1 : result_4^0'=result_4^post2, x_5^0'=x_5^post2, (1+x_5^0 <= 0 /\ -x_5^post2+x_5^0 == 0 /\ result_4^0-result_4^post2 == 0), cost: 1
   3: l1 -> l3 : result_4^0'=result_4^post4, x_5^0'=x_5^post4, (0 == 0 /\ -x_5^post4+x_5^0 == 0), cost: 1
   5: l4 -> l0 : result_4^0'=result_4^post3, x_5^0'=x_5^post3, (-x_5^post5+x_5^0 == 0 /\ -result_4^post3+result_4^post5 == 0 /\ x_5^post5-x_5^post3 == 0 /\ result_4^0-result_4^post5 == 0), cost: 1

	Eliminating location l2 by chaining:

	Applied chaining

	First rule:
	l4 -> l2 : result_4^0'=result_4^post5, x_5^0'=x_5^post5, (-x_5^post5+x_5^0 == 0 /\ result_4^0-result_4^post5 == 0), cost: 1
	Second rule:
	l2 -> l0 : result_4^0'=result_4^post3, x_5^0'=x_5^post3, (x_5^0-x_5^post3 == 0 /\ result_4^0-result_4^post3 == 0), cost: 1
	New rule:
	l4 -> l0 : result_4^0'=result_4^post3, x_5^0'=x_5^post3, (-x_5^post5+x_5^0 == 0 /\ -result_4^post3+result_4^post5 == 0 /\ x_5^post5-x_5^post3 == 0 /\ result_4^0-result_4^post5 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 2 4

Simplified Transitions

Start location: l4
Program variables: result_4^0 x_5^0
   6: l0 -> l1 : x_5^0'=1+x_5^0, -x_5^0 <= 0, cost: 1
   7: l0 -> l1 : 1+x_5^0 <= 0, cost: 1
   8: l1 -> l3 : result_4^0'=result_4^post4, T, cost: 1
   9: l4 -> l0 : T, cost: 1

	Propagated Equalities

	Original rule:
	l0 -> l1 : result_4^0'=result_4^post1, x_5^0'=x_5^post1, (-x_5^0 <= 0 /\ -result_4^post1+result_4^0 == 0 /\ -1+x_5^post1-x_5^0 == 0), cost: 1
	New rule:
	l0 -> l1 : result_4^0'=result_4^0, x_5^0'=1+x_5^0, (0 == 0 /\ -x_5^0 <= 0), cost: 1
	
		propagated equality result_4^post1 = result_4^0
		
		propagated equality x_5^post1 = 1+x_5^0
		
	Simplified Guard

	Original rule:
	l0 -> l1 : result_4^0'=result_4^0, x_5^0'=1+x_5^0, (0 == 0 /\ -x_5^0 <= 0), cost: 1
	New rule:
	l0 -> l1 : result_4^0'=result_4^0, x_5^0'=1+x_5^0, -x_5^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l1 : result_4^0'=result_4^0, x_5^0'=1+x_5^0, -x_5^0 <= 0, cost: 1
	New rule:
	l0 -> l1 : x_5^0'=1+x_5^0, -x_5^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l0 -> l1 : result_4^0'=result_4^post2, x_5^0'=x_5^post2, (1+x_5^0 <= 0 /\ -x_5^post2+x_5^0 == 0 /\ result_4^0-result_4^post2 == 0), cost: 1
	New rule:
	l0 -> l1 : result_4^0'=result_4^0, x_5^0'=x_5^0, (0 == 0 /\ 1+x_5^0 <= 0), cost: 1
	
		propagated equality x_5^post2 = x_5^0
		
		propagated equality result_4^post2 = result_4^0
		
	Simplified Guard

	Original rule:
	l0 -> l1 : result_4^0'=result_4^0, x_5^0'=x_5^0, (0 == 0 /\ 1+x_5^0 <= 0), cost: 1
	New rule:
	l0 -> l1 : result_4^0'=result_4^0, x_5^0'=x_5^0, 1+x_5^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l1 : result_4^0'=result_4^0, x_5^0'=x_5^0, 1+x_5^0 <= 0, cost: 1
	New rule:
	l0 -> l1 : 1+x_5^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l1 -> l3 : result_4^0'=result_4^post4, x_5^0'=x_5^post4, (0 == 0 /\ -x_5^post4+x_5^0 == 0), cost: 1
	New rule:
	l1 -> l3 : result_4^0'=result_4^post4, x_5^0'=x_5^0, 0 == 0, cost: 1
	
		propagated equality x_5^post4 = x_5^0
		
	Simplified Guard

	Original rule:
	l1 -> l3 : result_4^0'=result_4^post4, x_5^0'=x_5^0, 0 == 0, cost: 1
	New rule:
	l1 -> l3 : result_4^0'=result_4^post4, x_5^0'=x_5^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l1 -> l3 : result_4^0'=result_4^post4, x_5^0'=x_5^0, T, cost: 1
	New rule:
	l1 -> l3 : result_4^0'=result_4^post4, T, cost: 1
	
	Propagated Equalities

	Original rule:
	l4 -> l0 : result_4^0'=result_4^post3, x_5^0'=x_5^post3, (-x_5^post5+x_5^0 == 0 /\ -result_4^post3+result_4^post5 == 0 /\ x_5^post5-x_5^post3 == 0 /\ result_4^0-result_4^post5 == 0), cost: 1
	New rule:
	l4 -> l0 : result_4^0'=result_4^post5, x_5^0'=x_5^post5, (0 == 0 /\ -x_5^post5+x_5^0 == 0 /\ result_4^0-result_4^post5 == 0), cost: 1
	
		propagated equality result_4^post3 = result_4^post5
		
		propagated equality x_5^post3 = x_5^post5
		
	Propagated Equalities

	Original rule:
	l4 -> l0 : result_4^0'=result_4^post5, x_5^0'=x_5^post5, (0 == 0 /\ -x_5^post5+x_5^0 == 0 /\ result_4^0-result_4^post5 == 0), cost: 1
	New rule:
	l4 -> l0 : result_4^0'=result_4^0, x_5^0'=x_5^0, 0 == 0, cost: 1
	
		propagated equality x_5^post5 = x_5^0
		
		propagated equality result_4^post5 = result_4^0
		
	Simplified Guard

	Original rule:
	l4 -> l0 : result_4^0'=result_4^0, x_5^0'=x_5^0, 0 == 0, cost: 1
	New rule:
	l4 -> l0 : result_4^0'=result_4^0, x_5^0'=x_5^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l4 -> l0 : result_4^0'=result_4^0, x_5^0'=x_5^0, T, cost: 1
	New rule:
	l4 -> l0 : T, cost: 1

Step with 9

	Trace

	9[T]
	
	Blocked

	[{}, {}]

Step with 6

	Trace

	9[T], 6[(-x_5^0 <= 0)]
	
	Blocked

	[{}, {}, {}]

Step with 8

	Trace

	9[T], 6[(-x_5^0 <= 0)], 8[T]
	
	Blocked

	[{}, {}, {}, {}]

Backtrack

	Trace

	9[T], 6[(-x_5^0 <= 0)]
	
	Blocked

	[{}, {}, {8[T]}]

Backtrack

	Trace

	9[T]
	
	Blocked

	[{}, {6[T]}]

Step with 7

	Trace

	9[T], 7[(1+x_5^0 <= 0)]
	
	Blocked

	[{}, {6[T]}, {}]

Step with 8

	Trace

	9[T], 7[(1+x_5^0 <= 0)], 8[T]
	
	Blocked

	[{}, {6[T]}, {}, {}]

Backtrack

	Trace

	9[T], 7[(1+x_5^0 <= 0)]
	
	Blocked

	[{}, {6[T]}, {8[T]}]

Backtrack

	Trace

	9[T]
	
	Blocked

	[{}, {6[T], 7[T]}]

Backtrack

	Trace

	Blocked

	[{9[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
