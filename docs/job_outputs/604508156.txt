unknown

Initial ITS

Start location: __init
Program variables: arg1
   0: f1_0_main_ConstantStackPush -> f149_0_doSum_LT : arg1'=arg1p1, 10-arg1p1 == 0, cost: 1
   1: f149_0_doSum_LT -> f163_0_factorial_GT : arg1'=arg1p2, (1+arg1 > 0 /\ -arg1p2+arg1 == 0), cost: 1
   2: f149_0_doSum_LT -> f149_0_doSum_LT : arg1'=arg1p3, (1+arg1 > 0 /\ -1-arg1p3+arg1 == 0), cost: 1
   3: f163_0_factorial_GT -> f163_0_factorial_GT : arg1'=arg1p4, (-1-arg1p4+arg1 == 0 /\ -1 < 0 /\ arg1 > 0), cost: 1
   4: __init -> f1_0_main_ConstantStackPush : arg1'=arg1p5, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1
   1: f149_0_doSum_LT -> f163_0_factorial_GT : arg1'=arg1p2, (1+arg1 > 0 /\ -arg1p2+arg1 == 0), cost: 1
   2: f149_0_doSum_LT -> f149_0_doSum_LT : arg1'=arg1p3, (1+arg1 > 0 /\ -1-arg1p3+arg1 == 0), cost: 1
   3: f163_0_factorial_GT -> f163_0_factorial_GT : arg1'=arg1p4, (-1-arg1p4+arg1 == 0 /\ -1 < 0 /\ arg1 > 0), cost: 1
   5: __init -> f149_0_doSum_LT : arg1'=arg1p1, 10-arg1p1 == 0, cost: 1

	Eliminating location f1_0_main_ConstantStackPush by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_ConstantStackPush : arg1'=arg1p5, T, cost: 1
	Second rule:
	f1_0_main_ConstantStackPush -> f149_0_doSum_LT : arg1'=arg1p1, 10-arg1p1 == 0, cost: 1
	New rule:
	__init -> f149_0_doSum_LT : arg1'=arg1p1, 10-arg1p1 == 0, cost: 1
	
	Applied deletion

	Removed the following rules: 0 4

Simplified Transitions

Start location: __init
Program variables: arg1
   6: f149_0_doSum_LT -> f163_0_factorial_GT : 1+arg1 > 0, cost: 1
   7: f149_0_doSum_LT -> f149_0_doSum_LT : arg1'=-1+arg1, 1+arg1 > 0, cost: 1
   8: f163_0_factorial_GT -> f163_0_factorial_GT : arg1'=-1+arg1, arg1 > 0, cost: 1
   9: __init -> f149_0_doSum_LT : arg1'=10, T, cost: 1

	Propagated Equalities

	Original rule:
	f149_0_doSum_LT -> f163_0_factorial_GT : arg1'=arg1p2, (1+arg1 > 0 /\ -arg1p2+arg1 == 0), cost: 1
	New rule:
	f149_0_doSum_LT -> f163_0_factorial_GT : arg1'=arg1, (0 == 0 /\ 1+arg1 > 0), cost: 1
	
		propagated equality arg1p2 = arg1
		
	Simplified Guard

	Original rule:
	f149_0_doSum_LT -> f163_0_factorial_GT : arg1'=arg1, (0 == 0 /\ 1+arg1 > 0), cost: 1
	New rule:
	f149_0_doSum_LT -> f163_0_factorial_GT : arg1'=arg1, 1+arg1 > 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	f149_0_doSum_LT -> f163_0_factorial_GT : arg1'=arg1, 1+arg1 > 0, cost: 1
	New rule:
	f149_0_doSum_LT -> f163_0_factorial_GT : 1+arg1 > 0, cost: 1
	
	Propagated Equalities

	Original rule:
	f149_0_doSum_LT -> f149_0_doSum_LT : arg1'=arg1p3, (1+arg1 > 0 /\ -1-arg1p3+arg1 == 0), cost: 1
	New rule:
	f149_0_doSum_LT -> f149_0_doSum_LT : arg1'=-1+arg1, (0 == 0 /\ 1+arg1 > 0), cost: 1
	
		propagated equality arg1p3 = -1+arg1
		
	Simplified Guard

	Original rule:
	f149_0_doSum_LT -> f149_0_doSum_LT : arg1'=-1+arg1, (0 == 0 /\ 1+arg1 > 0), cost: 1
	New rule:
	f149_0_doSum_LT -> f149_0_doSum_LT : arg1'=-1+arg1, 1+arg1 > 0, cost: 1
	
	Propagated Equalities

	Original rule:
	f163_0_factorial_GT -> f163_0_factorial_GT : arg1'=arg1p4, (-1-arg1p4+arg1 == 0 /\ -1 < 0 /\ arg1 > 0), cost: 1
	New rule:
	f163_0_factorial_GT -> f163_0_factorial_GT : arg1'=-1+arg1, (0 == 0 /\ -1 < 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg1p4 = -1+arg1
		
	Simplified Guard

	Original rule:
	f163_0_factorial_GT -> f163_0_factorial_GT : arg1'=-1+arg1, (0 == 0 /\ -1 < 0 /\ arg1 > 0), cost: 1
	New rule:
	f163_0_factorial_GT -> f163_0_factorial_GT : arg1'=-1+arg1, arg1 > 0, cost: 1
	
	Propagated Equalities

	Original rule:
	__init -> f149_0_doSum_LT : arg1'=arg1p1, 10-arg1p1 == 0, cost: 1
	New rule:
	__init -> f149_0_doSum_LT : arg1'=10, 0 == 0, cost: 1
	
		propagated equality arg1p1 = 10
		
	Simplified Guard

	Original rule:
	__init -> f149_0_doSum_LT : arg1'=10, 0 == 0, cost: 1
	New rule:
	__init -> f149_0_doSum_LT : arg1'=10, T, cost: 1

Step with 9

	Trace

	9[T]
	
	Blocked

	[{}, {}]

Step with 6

	Trace

	9[T], 6[(1+arg1 > 0)]
	
	Blocked

	[{}, {}, {}]

Step with 8

	Trace

	9[T], 6[(1+arg1 > 0)], 8[(arg1 > 0)]
	
	Blocked

	[{}, {}, {}, {}]

Accelerate

Start location: __init
Program variables: arg1
   6: f149_0_doSum_LT -> f163_0_factorial_GT : 1+arg1 > 0, cost: 1
   7: f149_0_doSum_LT -> f149_0_doSum_LT : arg1'=-1+arg1, 1+arg1 > 0, cost: 1
   8: f163_0_factorial_GT -> f163_0_factorial_GT : arg1'=-1+arg1, arg1 > 0, cost: 1
  10: f163_0_factorial_GT -> f163_0_factorial_GT : arg1'=-n+arg1, (-1+n >= 0 /\ 1-n+arg1 > 0), cost: 1
   9: __init -> f149_0_doSum_LT : arg1'=10, T, cost: 1

	Loop Acceleration

	Original rule:
	f163_0_factorial_GT -> f163_0_factorial_GT : arg1'=-1+arg1, (arg1 > 0), cost: 1
	New rule:
	f163_0_factorial_GT -> f163_0_factorial_GT : arg1'=-n+arg1, (-1+n >= 0 /\ 1-n+arg1 > 0), cost: 1

		arg1 > 0 [0]: montonic decrease yields 1-n+arg1 > 0
		
		arg1 > 0 [1]: eventual increase yields (1 <= 0 /\ arg1 > 0)
		
		Replacement map: {arg1 > 0 -> 1-n+arg1 > 0}

	Trace

	9[T], 6[(1+arg1 > 0)], 10[(-1+n >= 0 /\ 1-n+arg1 > 0)]
	
	Blocked

	[{}, {}, {}, {8[T], 10[T]}]

Backtrack

	Trace

	9[T], 6[(1+arg1 > 0)]
	
	Blocked

	[{}, {}, {10[T]}]

Step with 8

	Trace

	9[T], 6[(1+arg1 > 0)], 8[(arg1 > 0)]
	
	Blocked

	[{}, {}, {10[T]}, {}]

Covered

	Trace

	9[T], 6[(1+arg1 > 0)]
	
	Blocked

	[{}, {}, {8[T], 10[T]}]

Backtrack

	Trace

	9[T]
	
	Blocked

	[{}, {6[T]}]

Step with 7

	Trace

	9[T], 7[(1+arg1 > 0)]
	
	Blocked

	[{}, {6[T]}, {}]

Accelerate

Start location: __init
Program variables: arg1
   6: f149_0_doSum_LT -> f163_0_factorial_GT : 1+arg1 > 0, cost: 1
   7: f149_0_doSum_LT -> f149_0_doSum_LT : arg1'=-1+arg1, 1+arg1 > 0, cost: 1
  11: f149_0_doSum_LT -> f149_0_doSum_LT : arg1'=-n2+arg1, (-1+n2 >= 0 /\ 2-n2+arg1 > 0), cost: 1
   8: f163_0_factorial_GT -> f163_0_factorial_GT : arg1'=-1+arg1, arg1 > 0, cost: 1
  10: f163_0_factorial_GT -> f163_0_factorial_GT : arg1'=-n+arg1, (-1+n >= 0 /\ 1-n+arg1 > 0), cost: 1
   9: __init -> f149_0_doSum_LT : arg1'=10, T, cost: 1

	Loop Acceleration

	Original rule:
	f149_0_doSum_LT -> f149_0_doSum_LT : arg1'=-1+arg1, (1+arg1 > 0), cost: 1
	New rule:
	f149_0_doSum_LT -> f149_0_doSum_LT : arg1'=-n2+arg1, (-1+n2 >= 0 /\ 2-n2+arg1 > 0), cost: 1

		1+arg1 > 0 [0]: montonic decrease yields 2-n2+arg1 > 0
		
		1+arg1 > 0 [1]: eventual increase yields (1 <= 0 /\ 1+arg1 > 0)
		
		Replacement map: {1+arg1 > 0 -> 2-n2+arg1 > 0}

	Trace

	9[T], 11[(-1+n2 >= 0 /\ 2-n2+arg1 > 0)]
	
	Blocked

	[{}, {6[T]}, {7[T], 11[T]}]

Step with 6

	Trace

	9[T], 11[(-1+n2 >= 0 /\ 2-n2+arg1 > 0)], 6[(1+arg1 > 0)]
	
	Blocked

	[{}, {6[T]}, {7[T], 11[T]}, {}]

Step with 8

	Trace

	9[T], 11[(-1+n2 >= 0 /\ 2-n2+arg1 > 0)], 6[(1+arg1 > 0)], 8[(arg1 > 0)]
	
	Blocked

	[{}, {6[T]}, {7[T], 11[T]}, {}, {}]

Covered

	Trace

	9[T], 11[(-1+n2 >= 0 /\ 2-n2+arg1 > 0)], 6[(1+arg1 > 0)]
	
	Blocked

	[{}, {6[T]}, {7[T], 11[T]}, {8[T]}]

Step with 10

	Trace

	9[T], 11[(-1+n2 >= 0 /\ 2-n2+arg1 > 0)], 6[(1+arg1 > 0)], 10[(-1+n >= 0 /\ 1-n+arg1 > 0)]
	
	Blocked

	[{}, {6[T]}, {7[T], 11[T]}, {8[T]}, {10[T]}]

Step with 8

	Trace

	9[T], 11[(-1+n2 >= 0 /\ 2-n2+arg1 > 0)], 6[(1+arg1 > 0)], 10[(-1+n >= 0 /\ 1-n+arg1 > 0)], 8[(arg1 > 0)]
	
	Blocked

	[{}, {6[T]}, {7[T], 11[T]}, {8[T]}, {10[T]}, {}]

Covered

	Trace

	9[T], 11[(-1+n2 >= 0 /\ 2-n2+arg1 > 0)], 6[(1+arg1 > 0)], 10[(-1+n >= 0 /\ 1-n+arg1 > 0)]
	
	Blocked

	[{}, {6[T]}, {7[T], 11[T]}, {8[T]}, {8[T], 10[T]}]

Backtrack

	Trace

	9[T], 11[(-1+n2 >= 0 /\ 2-n2+arg1 > 0)], 6[(1+arg1 > 0)]
	
	Blocked

	[{}, {6[T]}, {7[T], 11[T]}, {8[T], 10[T]}]

Backtrack

	Trace

	9[T], 11[(-1+n2 >= 0 /\ 2-n2+arg1 > 0)]
	
	Blocked

	[{}, {6[T]}, {6[T], 7[T], 11[T]}]

Backtrack

	Trace

	9[T]
	
	Blocked

	[{}, {6[T], 11[T]}]

Step with 7

	Trace

	9[T], 7[(1+arg1 > 0)]
	
	Blocked

	[{}, {6[T], 11[T]}, {}]

Covered

	Trace

	9[T]
	
	Blocked

	[{}, {6[T], 7[T], 11[T]}]

Backtrack

	Trace

	Blocked

	[{9[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
