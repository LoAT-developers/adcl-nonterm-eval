WORST_CASE(Omega(0),?)

Initial ITS
Start location: __init
   0: f1_0_main_ConstantStackPush -> f64_0_main_LT : arg1'=arg1P0, 3-arg1P0 == 0, cost: 1
   1: f64_0_main_LT -> f64_0_main_LT : arg1'=arg1P1, (-5+arg1 > 0 /\ 3-arg1P1+arg1 == 0), cost: 1
   2: f64_0_main_LT -> f64_0_main_LT : arg1'=arg1P2, (-2+arg1 > 0 /\ -11+arg1 < 0 /\ -6+arg1 < 0 /\ 1-arg1P2+arg1 == 0), cost: 1
   3: __init -> f1_0_main_ConstantStackPush : arg1'=arg1P3, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_ConstantStackPush -> f64_0_main_LT : arg1'=arg1P0, 3-arg1P0 == 0, cost: 1
New rule:
f1_0_main_ConstantStackPush -> f64_0_main_LT : arg1'=3, TRUE, cost: 1

Applied preprocessing
Original rule:
f64_0_main_LT -> f64_0_main_LT : arg1'=arg1P1, (-5+arg1 > 0 /\ 3-arg1P1+arg1 == 0), cost: 1
New rule:
f64_0_main_LT -> f64_0_main_LT : arg1'=3+arg1, -5+arg1 > 0, cost: 1

Applied preprocessing
Original rule:
f64_0_main_LT -> f64_0_main_LT : arg1'=arg1P2, (-2+arg1 > 0 /\ -11+arg1 < 0 /\ -6+arg1 < 0 /\ 1-arg1P2+arg1 == 0), cost: 1
New rule:
f64_0_main_LT -> f64_0_main_LT : arg1'=1+arg1, (-2+arg1 > 0 /\ 6-arg1 > 0), cost: 1

Simplified rules
Start location: __init
   4: f1_0_main_ConstantStackPush -> f64_0_main_LT : arg1'=3, TRUE, cost: 1
   5: f64_0_main_LT -> f64_0_main_LT : arg1'=3+arg1, -5+arg1 > 0, cost: 1
   6: f64_0_main_LT -> f64_0_main_LT : arg1'=1+arg1, (-2+arg1 > 0 /\ 6-arg1 > 0), cost: 1
   3: __init -> f1_0_main_ConstantStackPush : arg1'=arg1P3, TRUE, cost: 1


Applied nonterm
Original rule:
f64_0_main_LT -> f64_0_main_LT : arg1'=3+arg1, -5+arg1 > 0, cost: 1
New rule:
f64_0_main_LT -> [3] : (n >= 0 /\ -5+arg1 > 0), cost: NONTERM
Sub-proof via acceration calculus written to file:///tmp/tmpnam_COmiDK.txt

Applied acceleration
Original rule:
f64_0_main_LT -> f64_0_main_LT : arg1'=1+arg1, (-2+arg1 > 0 /\ 6-arg1 > 0), cost: 1
New rule:
f64_0_main_LT -> f64_0_main_LT : arg1'=n0+arg1, (-2+arg1 > 0 /\ n0 >= 0 /\ 7-n0-arg1 > 0), cost: n0
Sub-proof via acceration calculus written to file:///tmp/tmpnam_kDgELB.txt

Applied instantiation
Original rule:
f64_0_main_LT -> f64_0_main_LT : arg1'=n0+arg1, (-2+arg1 > 0 /\ n0 >= 0 /\ 7-n0-arg1 > 0), cost: n0
New rule:
f64_0_main_LT -> f64_0_main_LT : arg1'=6, (-2+arg1 > 0 /\ 1 > 0 /\ 6-arg1 >= 0), cost: 6-arg1

Applied simplification
Original rule:
f64_0_main_LT -> f64_0_main_LT : arg1'=6, (-2+arg1 > 0 /\ 1 > 0 /\ 6-arg1 >= 0), cost: 6-arg1
New rule:
f64_0_main_LT -> f64_0_main_LT : arg1'=6, (-2+arg1 > 0 /\ -6+arg1 <= 0), cost: 6-arg1

Applied deletion
Removed the following rules: 5 6

Accelerated simple loops
Start location: __init
   4: f1_0_main_ConstantStackPush -> f64_0_main_LT : arg1'=3, TRUE, cost: 1
   7: f64_0_main_LT -> [3] : (n >= 0 /\ -5+arg1 > 0), cost: NONTERM
   9: f64_0_main_LT -> f64_0_main_LT : arg1'=6, (-2+arg1 > 0 /\ -6+arg1 <= 0), cost: 6-arg1
   3: __init -> f1_0_main_ConstantStackPush : arg1'=arg1P3, TRUE, cost: 1


Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f64_0_main_LT : arg1'=3, TRUE, cost: 1
Second rule:
f64_0_main_LT -> f64_0_main_LT : arg1'=6, (-2+arg1 > 0 /\ -6+arg1 <= 0), cost: 6-arg1
New rule:
f1_0_main_ConstantStackPush -> f64_0_main_LT : arg1'=6, (-3 <= 0 /\ 1 > 0), cost: 4

Applied deletion
Removed the following rules: 7 9

Chained accelerated rules with incoming rules
Start location: __init
   4: f1_0_main_ConstantStackPush -> f64_0_main_LT : arg1'=3, TRUE, cost: 1
  10: f1_0_main_ConstantStackPush -> f64_0_main_LT : arg1'=6, (-3 <= 0 /\ 1 > 0), cost: 4
   3: __init -> f1_0_main_ConstantStackPush : arg1'=arg1P3, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
  <empty>


Computing asymptotic complexity

Proved the following lower bound
Complexity:  Unknown
Cpx degree: ?

Solved cost: 0
Rule cost:   0

