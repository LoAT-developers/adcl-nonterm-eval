unknown

Initial ITS

Start location: l4
Program variables: p^0 y^0
   0: l0 -> l1 : p^0'=p^post1, y^0'=y^post1, (-1+p^post1 == 0 /\ -y^post1+y^0 == 0 /\ y^0 <= 0), cost: 1
   1: l0 -> l2 : p^0'=p^post2, y^0'=y^post2, (1-y^0 <= 0 /\ p^0-p^post2 == 0 /\ 1+y^post2-y^0 == 0), cost: 1
   2: l2 -> l0 : p^0'=p^post3, y^0'=y^post3, (y^0-y^post3 == 0 /\ -p^post3+p^0 == 0), cost: 1
   3: l3 -> l2 : p^0'=p^post4, y^0'=y^post4, (p^post4 == 0 /\ -y^post4+y^0 == 0), cost: 1
   4: l4 -> l3 : p^0'=p^post5, y^0'=y^post5, (-y^post5+y^0 == 0 /\ p^0-p^post5 == 0), cost: 1

Chained Linear Paths

Start location: l4
Program variables: p^0 y^0
   0: l0 -> l1 : p^0'=p^post1, y^0'=y^post1, (-1+p^post1 == 0 /\ -y^post1+y^0 == 0 /\ y^0 <= 0), cost: 1
   1: l0 -> l2 : p^0'=p^post2, y^0'=y^post2, (1-y^0 <= 0 /\ p^0-p^post2 == 0 /\ 1+y^post2-y^0 == 0), cost: 1
   2: l2 -> l0 : p^0'=p^post3, y^0'=y^post3, (y^0-y^post3 == 0 /\ -p^post3+p^0 == 0), cost: 1
   5: l4 -> l2 : p^0'=p^post4, y^0'=y^post4, (p^post4 == 0 /\ -y^post5+y^0 == 0 /\ p^0-p^post5 == 0 /\ y^post5-y^post4 == 0), cost: 1

	Eliminating location l3 by chaining:

	Applied chaining

	First rule:
	l4 -> l3 : p^0'=p^post5, y^0'=y^post5, (-y^post5+y^0 == 0 /\ p^0-p^post5 == 0), cost: 1
	Second rule:
	l3 -> l2 : p^0'=p^post4, y^0'=y^post4, (p^post4 == 0 /\ -y^post4+y^0 == 0), cost: 1
	New rule:
	l4 -> l2 : p^0'=p^post4, y^0'=y^post4, (p^post4 == 0 /\ -y^post5+y^0 == 0 /\ p^0-p^post5 == 0 /\ y^post5-y^post4 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 3 4

Simplified Transitions

Start location: l4
Program variables: p^0 y^0
   6: l0 -> l1 : p^0'=1, y^0 <= 0, cost: 1
   7: l0 -> l2 : y^0'=-1+y^0, 1-y^0 <= 0, cost: 1
   8: l2 -> l0 : T, cost: 1
   9: l4 -> l2 : p^0'=0, T, cost: 1

	Propagated Equalities

	Original rule:
	l0 -> l1 : p^0'=p^post1, y^0'=y^post1, (-1+p^post1 == 0 /\ -y^post1+y^0 == 0 /\ y^0 <= 0), cost: 1
	New rule:
	l0 -> l1 : p^0'=1, y^0'=y^0, (0 == 0 /\ y^0 <= 0), cost: 1
	
		propagated equality p^post1 = 1
		
		propagated equality y^post1 = y^0
		
	Simplified Guard

	Original rule:
	l0 -> l1 : p^0'=1, y^0'=y^0, (0 == 0 /\ y^0 <= 0), cost: 1
	New rule:
	l0 -> l1 : p^0'=1, y^0'=y^0, y^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l1 : p^0'=1, y^0'=y^0, y^0 <= 0, cost: 1
	New rule:
	l0 -> l1 : p^0'=1, y^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l0 -> l2 : p^0'=p^post2, y^0'=y^post2, (1-y^0 <= 0 /\ p^0-p^post2 == 0 /\ 1+y^post2-y^0 == 0), cost: 1
	New rule:
	l0 -> l2 : p^0'=p^0, y^0'=-1+y^0, (0 == 0 /\ 1-y^0 <= 0), cost: 1
	
		propagated equality p^post2 = p^0
		
		propagated equality y^post2 = -1+y^0
		
	Simplified Guard

	Original rule:
	l0 -> l2 : p^0'=p^0, y^0'=-1+y^0, (0 == 0 /\ 1-y^0 <= 0), cost: 1
	New rule:
	l0 -> l2 : p^0'=p^0, y^0'=-1+y^0, 1-y^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l2 : p^0'=p^0, y^0'=-1+y^0, 1-y^0 <= 0, cost: 1
	New rule:
	l0 -> l2 : y^0'=-1+y^0, 1-y^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l2 -> l0 : p^0'=p^post3, y^0'=y^post3, (y^0-y^post3 == 0 /\ -p^post3+p^0 == 0), cost: 1
	New rule:
	l2 -> l0 : p^0'=p^0, y^0'=y^0, 0 == 0, cost: 1
	
		propagated equality y^post3 = y^0
		
		propagated equality p^post3 = p^0
		
	Simplified Guard

	Original rule:
	l2 -> l0 : p^0'=p^0, y^0'=y^0, 0 == 0, cost: 1
	New rule:
	l2 -> l0 : p^0'=p^0, y^0'=y^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l2 -> l0 : p^0'=p^0, y^0'=y^0, T, cost: 1
	New rule:
	l2 -> l0 : T, cost: 1
	
	Propagated Equalities

	Original rule:
	l4 -> l2 : p^0'=p^post4, y^0'=y^post4, (p^post4 == 0 /\ -y^post5+y^0 == 0 /\ p^0-p^post5 == 0 /\ y^post5-y^post4 == 0), cost: 1
	New rule:
	l4 -> l2 : p^0'=0, y^0'=y^post5, (0 == 0 /\ -y^post5+y^0 == 0 /\ p^0-p^post5 == 0), cost: 1
	
		propagated equality p^post4 = 0
		
		propagated equality y^post4 = y^post5
		
	Propagated Equalities

	Original rule:
	l4 -> l2 : p^0'=0, y^0'=y^post5, (0 == 0 /\ -y^post5+y^0 == 0 /\ p^0-p^post5 == 0), cost: 1
	New rule:
	l4 -> l2 : p^0'=0, y^0'=y^0, 0 == 0, cost: 1
	
		propagated equality y^post5 = y^0
		
		propagated equality p^post5 = p^0
		
	Simplified Guard

	Original rule:
	l4 -> l2 : p^0'=0, y^0'=y^0, 0 == 0, cost: 1
	New rule:
	l4 -> l2 : p^0'=0, y^0'=y^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l4 -> l2 : p^0'=0, y^0'=y^0, T, cost: 1
	New rule:
	l4 -> l2 : p^0'=0, T, cost: 1

Step with 9

	Trace

	9[T]
	
	Blocked

	[{}, {}]

Step with 8

	Trace

	9[T], 8[T]
	
	Blocked

	[{}, {}, {}]

Step with 6

	Trace

	9[T], 8[T], 6[(y^0 <= 0)]
	
	Blocked

	[{}, {}, {}, {}]

Backtrack

	Trace

	9[T], 8[T]
	
	Blocked

	[{}, {}, {6[T]}]

Step with 7

	Trace

	9[T], 8[T], 7[(1-y^0 <= 0)]
	
	Blocked

	[{}, {}, {6[T]}, {}]

Accelerate

Start location: l4
Program variables: p^0 y^0
   6: l0 -> l1 : p^0'=1, y^0 <= 0, cost: 1
   7: l0 -> l2 : y^0'=-1+y^0, 1-y^0 <= 0, cost: 1
   8: l2 -> l0 : T, cost: 1
  10: l2 -> l2 : y^0'=y^0-n, (y^0-n >= 0 /\ -1+n >= 0), cost: 1
   9: l4 -> l2 : p^0'=0, T, cost: 1

	Loop Acceleration

	Original rule:
	l2 -> l2 : y^0'=-1+y^0, 1-y^0 <= 0, cost: 1
	New rule:
	l2 -> l2 : y^0'=y^0-n, (y^0-n >= 0 /\ -1+n >= 0), cost: 1

		-1+y^0 >= 0 [0]: montonic decrease yields y^0-n >= 0
		
		-1+y^0 >= 0 [1]: eventual increase yields (1 <= 0 /\ -1+y^0 >= 0)
		
		Replacement map: {-1+y^0 >= 0 -> y^0-n >= 0}

	Trace

	9[T], 10[(y^0-n >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {}, {10[T]}]

Step with 8

	Trace

	9[T], 10[(y^0-n >= 0 /\ -1+n >= 0)], 8[T]
	
	Blocked

	[{}, {}, {10[T]}, {}]

Step with 7

	Trace

	9[T], 10[(y^0-n >= 0 /\ -1+n >= 0)], 8[T], 7[(1-y^0 <= 0)]
	
	Blocked

	[{}, {}, {10[T]}, {}, {}]

Covered

	Trace

	9[T], 10[(y^0-n >= 0 /\ -1+n >= 0)], 8[T]
	
	Blocked

	[{}, {}, {10[T]}, {7[T]}]

Step with 6

	Trace

	9[T], 10[(y^0-n >= 0 /\ -1+n >= 0)], 8[T], 6[(y^0 <= 0)]
	
	Blocked

	[{}, {}, {10[T]}, {7[T]}, {}]

Backtrack

	Trace

	9[T], 10[(y^0-n >= 0 /\ -1+n >= 0)], 8[T]
	
	Blocked

	[{}, {}, {10[T]}, {6[T], 7[T]}]

Backtrack

	Trace

	9[T], 10[(y^0-n >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {}, {8[T], 10[T]}]

Backtrack

	Trace

	9[T]
	
	Blocked

	[{}, {10[T]}]

Step with 8

	Trace

	9[T], 8[T]
	
	Blocked

	[{}, {10[T]}, {}]

Step with 6

	Trace

	9[T], 8[T], 6[(y^0 <= 0)]
	
	Blocked

	[{}, {10[T]}, {}, {}]

Backtrack

	Trace

	9[T], 8[T]
	
	Blocked

	[{}, {10[T]}, {6[T]}]

Step with 7

	Trace

	9[T], 8[T], 7[(1-y^0 <= 0)]
	
	Blocked

	[{}, {10[T]}, {6[T]}, {}]

Covered

	Trace

	9[T], 8[T]
	
	Blocked

	[{}, {10[T]}, {6[T], 7[T]}]

Backtrack

	Trace

	9[T]
	
	Blocked

	[{}, {8[T], 10[T]}]

Backtrack

	Trace

	Blocked

	[{9[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
