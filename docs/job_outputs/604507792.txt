NO

Initial ITS

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5
   0: f1_0_main_Load -> f104_0_factorial_EQ : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, arg5'=arg5p1, (arg1p1 > 0 /\ 1-arg4p1 == 0 /\ 1+arg2 > 0 /\ 1-arg3p1 == 0 /\ arg2-arg5p1 == 0 /\ 1-arg2p1 == 0 /\ arg1p1-arg1 <= 0 /\ arg1 > 0), cost: 1
   1: f104_0_factorial_EQ -> f104_0_factorial_EQ : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, arg4'=arg4p2, arg5'=arg5p2, (arg5-arg3 > 0 /\ -arg4+arg3 == 0 /\ arg2*arg3-arg3p2 == 0 /\ arg5-arg5p2 == 0 /\ arg2 > 0 /\ arg1p2-arg1 <= 0 /\ 1-arg2p2+arg2 == 0 /\ arg1p2 > 0 /\ arg3 > 0 /\ arg2*arg3-arg4p2 == 0 /\ arg1 > 0), cost: 1
   2: f104_0_factorial_EQ -> f104_0_factorial_EQ : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, arg4'=arg4p3, arg5'=arg5p3, (arg5-arg3 < 0 /\ -arg4+arg3 == 0 /\ arg1p3 > 0 /\ arg2 > 0 /\ arg2*arg3-arg3p3 == 0 /\ 1+arg2-arg2p3 == 0 /\ arg1p3-arg1 <= 0 /\ -arg4p3+arg2*arg3 == 0 /\ arg5-arg5p3 == 0 /\ arg3 > 0 /\ arg1 > 0), cost: 1
   3: __init -> f1_0_main_Load : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, arg4'=arg4p4, arg5'=arg5p4, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5
   1: f104_0_factorial_EQ -> f104_0_factorial_EQ : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, arg4'=arg4p2, arg5'=arg5p2, (arg5-arg3 > 0 /\ -arg4+arg3 == 0 /\ arg2*arg3-arg3p2 == 0 /\ arg5-arg5p2 == 0 /\ arg2 > 0 /\ arg1p2-arg1 <= 0 /\ 1-arg2p2+arg2 == 0 /\ arg1p2 > 0 /\ arg3 > 0 /\ arg2*arg3-arg4p2 == 0 /\ arg1 > 0), cost: 1
   2: f104_0_factorial_EQ -> f104_0_factorial_EQ : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, arg4'=arg4p3, arg5'=arg5p3, (arg5-arg3 < 0 /\ -arg4+arg3 == 0 /\ arg1p3 > 0 /\ arg2 > 0 /\ arg2*arg3-arg3p3 == 0 /\ 1+arg2-arg2p3 == 0 /\ arg1p3-arg1 <= 0 /\ -arg4p3+arg2*arg3 == 0 /\ arg5-arg5p3 == 0 /\ arg3 > 0 /\ arg1 > 0), cost: 1
   4: __init -> f104_0_factorial_EQ : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, arg5'=arg5p1, (arg1p1 > 0 /\ arg2p4-arg5p1 == 0 /\ 1-arg4p1 == 0 /\ arg1p1-arg1p4 <= 0 /\ 1+arg2p4 > 0 /\ 1-arg3p1 == 0 /\ 1-arg2p1 == 0 /\ arg1p4 > 0), cost: 1

	Eliminating location f1_0_main_Load by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_Load : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, arg4'=arg4p4, arg5'=arg5p4, T, cost: 1
	Second rule:
	f1_0_main_Load -> f104_0_factorial_EQ : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, arg5'=arg5p1, (arg1p1 > 0 /\ 1-arg4p1 == 0 /\ 1+arg2 > 0 /\ 1-arg3p1 == 0 /\ arg2-arg5p1 == 0 /\ 1-arg2p1 == 0 /\ arg1p1-arg1 <= 0 /\ arg1 > 0), cost: 1
	New rule:
	__init -> f104_0_factorial_EQ : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, arg5'=arg5p1, (arg1p1 > 0 /\ arg2p4-arg5p1 == 0 /\ 1-arg4p1 == 0 /\ arg1p1-arg1p4 <= 0 /\ 1+arg2p4 > 0 /\ 1-arg3p1 == 0 /\ 1-arg2p1 == 0 /\ arg1p4 > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 3

Simplified Transitions

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5
   5: f104_0_factorial_EQ -> f104_0_factorial_EQ : arg1'=arg1p2, arg2'=1+arg2, arg3'=arg2*arg3, arg4'=arg2*arg3, (arg5-arg3 > 0 /\ -arg4+arg3 == 0 /\ arg2 > 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg3 > 0 /\ arg1 > 0), cost: 1
   6: f104_0_factorial_EQ -> f104_0_factorial_EQ : arg1'=arg1p3, arg2'=1+arg2, arg3'=arg2*arg3, arg4'=arg2*arg3, (arg5-arg3 < 0 /\ -arg4+arg3 == 0 /\ arg1p3 > 0 /\ arg2 > 0 /\ arg1p3-arg1 <= 0 /\ arg3 > 0 /\ arg1 > 0), cost: 1
   7: __init -> f104_0_factorial_EQ : arg1'=arg1p1, arg2'=1, arg3'=1, arg4'=1, arg5'=arg2p4, (arg1p1 > 0 /\ 1+arg2p4 > 0), cost: 1

	Propagated Equalities

	Original rule:
	f104_0_factorial_EQ -> f104_0_factorial_EQ : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, arg4'=arg4p2, arg5'=arg5p2, (arg5-arg3 > 0 /\ -arg4+arg3 == 0 /\ arg2*arg3-arg3p2 == 0 /\ arg5-arg5p2 == 0 /\ arg2 > 0 /\ arg1p2-arg1 <= 0 /\ 1-arg2p2+arg2 == 0 /\ arg1p2 > 0 /\ arg3 > 0 /\ arg2*arg3-arg4p2 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f104_0_factorial_EQ -> f104_0_factorial_EQ : arg1'=arg1p2, arg2'=1+arg2, arg3'=arg2*arg3, arg4'=arg2*arg3, arg5'=arg5, (0 == 0 /\ arg5-arg3 > 0 /\ -arg4+arg3 == 0 /\ arg2 > 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg3 > 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg3p2 = arg2*arg3
		
		propagated equality arg5p2 = arg5
		
		propagated equality arg2p2 = 1+arg2
		
		propagated equality arg4p2 = arg2*arg3
		
	Simplified Guard

	Original rule:
	f104_0_factorial_EQ -> f104_0_factorial_EQ : arg1'=arg1p2, arg2'=1+arg2, arg3'=arg2*arg3, arg4'=arg2*arg3, arg5'=arg5, (0 == 0 /\ arg5-arg3 > 0 /\ -arg4+arg3 == 0 /\ arg2 > 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg3 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f104_0_factorial_EQ -> f104_0_factorial_EQ : arg1'=arg1p2, arg2'=1+arg2, arg3'=arg2*arg3, arg4'=arg2*arg3, arg5'=arg5, (arg5-arg3 > 0 /\ -arg4+arg3 == 0 /\ arg2 > 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg3 > 0 /\ arg1 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f104_0_factorial_EQ -> f104_0_factorial_EQ : arg1'=arg1p2, arg2'=1+arg2, arg3'=arg2*arg3, arg4'=arg2*arg3, arg5'=arg5, (arg5-arg3 > 0 /\ -arg4+arg3 == 0 /\ arg2 > 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg3 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f104_0_factorial_EQ -> f104_0_factorial_EQ : arg1'=arg1p2, arg2'=1+arg2, arg3'=arg2*arg3, arg4'=arg2*arg3, (arg5-arg3 > 0 /\ -arg4+arg3 == 0 /\ arg2 > 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg3 > 0 /\ arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f104_0_factorial_EQ -> f104_0_factorial_EQ : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, arg4'=arg4p3, arg5'=arg5p3, (arg5-arg3 < 0 /\ -arg4+arg3 == 0 /\ arg1p3 > 0 /\ arg2 > 0 /\ arg2*arg3-arg3p3 == 0 /\ 1+arg2-arg2p3 == 0 /\ arg1p3-arg1 <= 0 /\ -arg4p3+arg2*arg3 == 0 /\ arg5-arg5p3 == 0 /\ arg3 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f104_0_factorial_EQ -> f104_0_factorial_EQ : arg1'=arg1p3, arg2'=1+arg2, arg3'=arg2*arg3, arg4'=arg2*arg3, arg5'=arg5, (0 == 0 /\ arg5-arg3 < 0 /\ -arg4+arg3 == 0 /\ arg1p3 > 0 /\ arg2 > 0 /\ arg1p3-arg1 <= 0 /\ arg3 > 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg3p3 = arg2*arg3
		
		propagated equality arg2p3 = 1+arg2
		
		propagated equality arg4p3 = arg2*arg3
		
		propagated equality arg5p3 = arg5
		
	Simplified Guard

	Original rule:
	f104_0_factorial_EQ -> f104_0_factorial_EQ : arg1'=arg1p3, arg2'=1+arg2, arg3'=arg2*arg3, arg4'=arg2*arg3, arg5'=arg5, (0 == 0 /\ arg5-arg3 < 0 /\ -arg4+arg3 == 0 /\ arg1p3 > 0 /\ arg2 > 0 /\ arg1p3-arg1 <= 0 /\ arg3 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f104_0_factorial_EQ -> f104_0_factorial_EQ : arg1'=arg1p3, arg2'=1+arg2, arg3'=arg2*arg3, arg4'=arg2*arg3, arg5'=arg5, (arg5-arg3 < 0 /\ -arg4+arg3 == 0 /\ arg1p3 > 0 /\ arg2 > 0 /\ arg1p3-arg1 <= 0 /\ arg3 > 0 /\ arg1 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f104_0_factorial_EQ -> f104_0_factorial_EQ : arg1'=arg1p3, arg2'=1+arg2, arg3'=arg2*arg3, arg4'=arg2*arg3, arg5'=arg5, (arg5-arg3 < 0 /\ -arg4+arg3 == 0 /\ arg1p3 > 0 /\ arg2 > 0 /\ arg1p3-arg1 <= 0 /\ arg3 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f104_0_factorial_EQ -> f104_0_factorial_EQ : arg1'=arg1p3, arg2'=1+arg2, arg3'=arg2*arg3, arg4'=arg2*arg3, (arg5-arg3 < 0 /\ -arg4+arg3 == 0 /\ arg1p3 > 0 /\ arg2 > 0 /\ arg1p3-arg1 <= 0 /\ arg3 > 0 /\ arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	__init -> f104_0_factorial_EQ : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, arg5'=arg5p1, (arg1p1 > 0 /\ arg2p4-arg5p1 == 0 /\ 1-arg4p1 == 0 /\ arg1p1-arg1p4 <= 0 /\ 1+arg2p4 > 0 /\ 1-arg3p1 == 0 /\ 1-arg2p1 == 0 /\ arg1p4 > 0), cost: 1
	New rule:
	__init -> f104_0_factorial_EQ : arg1'=arg1p1, arg2'=1, arg3'=1, arg4'=1, arg5'=arg2p4, (0 == 0 /\ arg1p1 > 0 /\ arg1p1-arg1p4 <= 0 /\ 1+arg2p4 > 0 /\ arg1p4 > 0), cost: 1
	
		propagated equality arg5p1 = arg2p4
		
		propagated equality arg4p1 = 1
		
		propagated equality arg3p1 = 1
		
		propagated equality arg2p1 = 1
		
	Simplified Guard

	Original rule:
	__init -> f104_0_factorial_EQ : arg1'=arg1p1, arg2'=1, arg3'=1, arg4'=1, arg5'=arg2p4, (0 == 0 /\ arg1p1 > 0 /\ arg1p1-arg1p4 <= 0 /\ 1+arg2p4 > 0 /\ arg1p4 > 0), cost: 1
	New rule:
	__init -> f104_0_factorial_EQ : arg1'=arg1p1, arg2'=1, arg3'=1, arg4'=1, arg5'=arg2p4, (arg1p1 > 0 /\ arg1p1-arg1p4 <= 0 /\ 1+arg2p4 > 0 /\ arg1p4 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	__init -> f104_0_factorial_EQ : arg1'=arg1p1, arg2'=1, arg3'=1, arg4'=1, arg5'=arg2p4, (arg1p1 > 0 /\ arg1p1-arg1p4 <= 0 /\ 1+arg2p4 > 0 /\ arg1p4 > 0), cost: 1
	New rule:
	__init -> f104_0_factorial_EQ : arg1'=arg1p1, arg2'=1, arg3'=1, arg4'=1, arg5'=arg2p4, (arg1p1 > 0 /\ 1+arg2p4 > 0), cost: 1

Step with 7

	Trace

	7[(arg1p1 > 0 /\ 1+arg2p4 > 0)]
	
	Blocked

	[{}, {}]

Step with 5

	Trace

	7[(arg1p1 > 0 /\ 1+arg2p4 > 0)], 5[(arg5-arg3 > 0 /\ -arg4+arg3 == 0 /\ arg2 > 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg3 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 5

	Trace

	7[(arg1p1 > 0 /\ 1+arg2p4 > 0)], 5[(arg5-arg3 > 0 /\ -arg4+arg3 == 0 /\ arg2 > 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg3 > 0 /\ arg1 > 0)], 5[(arg5-arg3 > 0 /\ -arg4+arg3 == 0 /\ arg2 > 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg3 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {}, {}]

Covered

	Trace

	7[(arg1p1 > 0 /\ 1+arg2p4 > 0)], 5[(arg5-arg3 > 0 /\ -arg4+arg3 == 0 /\ arg2 > 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg3 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {5[T]}]

Backtrack

	Trace

	7[(arg1p1 > 0 /\ 1+arg2p4 > 0)]
	
	Blocked

	[{}, {5[T]}]

Step with 6

	Trace

	7[(arg1p1 > 0 /\ 1+arg2p4 > 0)], 6[(arg5-arg3 < 0 /\ -arg4+arg3 == 0 /\ arg1p3 > 0 /\ arg2 > 0 /\ arg1p3-arg1 <= 0 /\ arg3 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {5[T]}, {}]

Nonterm

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5
   5: f104_0_factorial_EQ -> f104_0_factorial_EQ : arg1'=arg1p2, arg2'=1+arg2, arg3'=arg2*arg3, arg4'=arg2*arg3, (arg5-arg3 > 0 /\ -arg4+arg3 == 0 /\ arg2 > 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg3 > 0 /\ arg1 > 0), cost: 1
   6: f104_0_factorial_EQ -> f104_0_factorial_EQ : arg1'=arg1p3, arg2'=1+arg2, arg3'=arg2*arg3, arg4'=arg2*arg3, (arg5-arg3 < 0 /\ -arg4+arg3 == 0 /\ arg1p3 > 0 /\ arg2 > 0 /\ arg1p3-arg1 <= 0 /\ arg3 > 0 /\ arg1 > 0), cost: 1
   8: f104_0_factorial_EQ -> LoAT_sink : (-arg4+arg3 >= 0 /\ -arg5+arg3 > 0 /\ arg1p3 > 0 /\ arg2 > 0 /\ arg4-arg3 >= 0 /\ -arg1p3+arg1 <= 0 /\ -arg1p3+arg1 >= 0 /\ arg3 > 0 /\ arg1 > 0), cost: NONTERM
   7: __init -> f104_0_factorial_EQ : arg1'=arg1p1, arg2'=1, arg3'=1, arg4'=1, arg5'=arg2p4, (arg1p1 > 0 /\ 1+arg2p4 > 0), cost: 1

	Certificate of Non-Termination

	Original rule:
	f104_0_factorial_EQ -> f104_0_factorial_EQ : arg1'=arg1p3, arg2'=1+arg2, arg3'=arg2*arg3, arg4'=arg2*arg3, (arg5-arg3 < 0 /\ -arg4+arg3 == 0 /\ arg1p3 > 0 /\ arg2 > 0 /\ arg1p3-arg1 <= 0 /\ arg3 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f104_0_factorial_EQ -> LoAT_sink : (-arg4+arg3 >= 0 /\ -arg5+arg3 > 0 /\ arg1p3 > 0 /\ arg2 > 0 /\ arg4-arg3 >= 0 /\ -arg1p3+arg1 <= 0 /\ -arg1p3+arg1 >= 0 /\ arg3 > 0 /\ arg1 > 0), cost: NONTERM

		-arg4+arg3 >= 0 [0]: monotonic increase yields -arg4+arg3 >= 0
		
		-arg5+arg3 > 0 [0]: monotonic increase yields -arg5+arg3 > 0, dependencies: arg2 > 0 arg3 > 0
		
		-arg5+arg3 > 0 [1]: eventual increase yields (-arg5+arg3 > 0 /\ -arg2*arg3+arg3 <= 0), dependencies: arg2 > 0 arg3 > 0
		
		arg1p3 > 0 [0]: monotonic increase yields arg1p3 > 0
		
		arg2 > 0 [0]: monotonic increase yields arg2 > 0
		
		arg4-arg3 >= 0 [0]: monotonic increase yields arg4-arg3 >= 0
		
		-arg1p3+arg1 >= 0 [0]: monotonic increase yields -arg1p3+arg1 >= 0
		
		arg3 > 0 [0]: monotonic increase yields arg3 > 0, dependencies: arg2 > 0
		
		arg1 > 0 [0]: eventual increase yields (-arg1p3+arg1 <= 0 /\ arg1 > 0)
		
		Replacement map: {-arg4+arg3 >= 0 -> -arg4+arg3 >= 0, -arg5+arg3 > 0 -> -arg5+arg3 > 0, arg1p3 > 0 -> arg1p3 > 0, arg2 > 0 -> arg2 > 0, arg4-arg3 >= 0 -> arg4-arg3 >= 0, -arg1p3+arg1 >= 0 -> -arg1p3+arg1 >= 0, arg3 > 0 -> arg3 > 0, arg1 > 0 -> (-arg1p3+arg1 <= 0 /\ arg1 > 0)}

Step with 8

	Trace

	7[(arg1p1 > 0 /\ 1+arg2p4 > 0)], 8[(-arg4+arg3 >= 0 /\ -arg5+arg3 > 0 /\ arg1p3 > 0 /\ arg2 > 0 /\ arg4-arg3 >= 0 /\ -arg1p3+arg1 <= 0 /\ -arg1p3+arg1 >= 0 /\ arg3 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {5[T]}, {8[T]}]

Refute

	Counterexample

	[ arg1=1 arg2=1 arg3=1 arg4=1 arg5=0 ] 7 [ arg1=arg1 arg2=arg2 arg3=arg3 arg4=arg4 arg5=arg5 ] 8
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
