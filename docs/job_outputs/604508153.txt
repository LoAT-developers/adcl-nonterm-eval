unknown

Initial ITS

Start location: __init
Program variables: arg1 arg2
   0: f1_0_main_Load -> f168_0_main_EQ : arg1'=arg1p1, arg2'=arg2p1, (arg1p1 > 0 /\ arg2p1 > 0 /\ arg1 > 0 /\ 1+arg2 > 0), cost: 1
   1: f168_0_main_EQ -> f168_0_main_EQ : arg1'=arg1p2, arg2'=arg2p2, (-arg1+arg2 > 0 /\ arg1 > 0 /\ arg1-arg1p2 == 0 /\ arg2 > 0 /\ -arg2p2-arg1+arg2 == 0), cost: 1
   2: f168_0_main_EQ -> f168_0_main_EQ : arg1'=arg1p3, arg2'=arg2p3, (-arg1+arg2 < 0 /\ -arg1p3+arg1-arg2 == 0 /\ arg2-arg2p3 == 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
   3: __init -> f1_0_main_Load : arg1'=arg1p4, arg2'=arg2p4, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2
   1: f168_0_main_EQ -> f168_0_main_EQ : arg1'=arg1p2, arg2'=arg2p2, (-arg1+arg2 > 0 /\ arg1 > 0 /\ arg1-arg1p2 == 0 /\ arg2 > 0 /\ -arg2p2-arg1+arg2 == 0), cost: 1
   2: f168_0_main_EQ -> f168_0_main_EQ : arg1'=arg1p3, arg2'=arg2p3, (-arg1+arg2 < 0 /\ -arg1p3+arg1-arg2 == 0 /\ arg2-arg2p3 == 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
   4: __init -> f168_0_main_EQ : arg1'=arg1p1, arg2'=arg2p1, (1+arg2p4 > 0 /\ arg1p4 > 0 /\ arg1p1 > 0 /\ arg2p1 > 0), cost: 1

	Eliminating location f1_0_main_Load by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_Load : arg1'=arg1p4, arg2'=arg2p4, T, cost: 1
	Second rule:
	f1_0_main_Load -> f168_0_main_EQ : arg1'=arg1p1, arg2'=arg2p1, (arg1p1 > 0 /\ arg2p1 > 0 /\ arg1 > 0 /\ 1+arg2 > 0), cost: 1
	New rule:
	__init -> f168_0_main_EQ : arg1'=arg1p1, arg2'=arg2p1, (1+arg2p4 > 0 /\ arg1p4 > 0 /\ arg1p1 > 0 /\ arg2p1 > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 3

Simplified Transitions

Start location: __init
Program variables: arg1 arg2
   5: f168_0_main_EQ -> f168_0_main_EQ : arg2'=-arg1+arg2, (-arg1+arg2 > 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
   6: f168_0_main_EQ -> f168_0_main_EQ : arg1'=arg1-arg2, (-arg1+arg2 < 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
   7: __init -> f168_0_main_EQ : arg1'=arg1p1, arg2'=arg2p1, (arg1p1 > 0 /\ arg2p1 > 0), cost: 1

	Propagated Equalities

	Original rule:
	f168_0_main_EQ -> f168_0_main_EQ : arg1'=arg1p2, arg2'=arg2p2, (-arg1+arg2 > 0 /\ arg1 > 0 /\ arg1-arg1p2 == 0 /\ arg2 > 0 /\ -arg2p2-arg1+arg2 == 0), cost: 1
	New rule:
	f168_0_main_EQ -> f168_0_main_EQ : arg1'=arg1, arg2'=-arg1+arg2, (0 == 0 /\ -arg1+arg2 > 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
	
		propagated equality arg1p2 = arg1
		
		propagated equality arg2p2 = -arg1+arg2
		
	Simplified Guard

	Original rule:
	f168_0_main_EQ -> f168_0_main_EQ : arg1'=arg1, arg2'=-arg1+arg2, (0 == 0 /\ -arg1+arg2 > 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
	New rule:
	f168_0_main_EQ -> f168_0_main_EQ : arg1'=arg1, arg2'=-arg1+arg2, (-arg1+arg2 > 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f168_0_main_EQ -> f168_0_main_EQ : arg1'=arg1, arg2'=-arg1+arg2, (-arg1+arg2 > 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
	New rule:
	f168_0_main_EQ -> f168_0_main_EQ : arg2'=-arg1+arg2, (-arg1+arg2 > 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f168_0_main_EQ -> f168_0_main_EQ : arg1'=arg1p3, arg2'=arg2p3, (-arg1+arg2 < 0 /\ -arg1p3+arg1-arg2 == 0 /\ arg2-arg2p3 == 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
	New rule:
	f168_0_main_EQ -> f168_0_main_EQ : arg1'=arg1-arg2, arg2'=arg2, (0 == 0 /\ -arg1+arg2 < 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
	
		propagated equality arg1p3 = arg1-arg2
		
		propagated equality arg2p3 = arg2
		
	Simplified Guard

	Original rule:
	f168_0_main_EQ -> f168_0_main_EQ : arg1'=arg1-arg2, arg2'=arg2, (0 == 0 /\ -arg1+arg2 < 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
	New rule:
	f168_0_main_EQ -> f168_0_main_EQ : arg1'=arg1-arg2, arg2'=arg2, (-arg1+arg2 < 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f168_0_main_EQ -> f168_0_main_EQ : arg1'=arg1-arg2, arg2'=arg2, (-arg1+arg2 < 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
	New rule:
	f168_0_main_EQ -> f168_0_main_EQ : arg1'=arg1-arg2, (-arg1+arg2 < 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	__init -> f168_0_main_EQ : arg1'=arg1p1, arg2'=arg2p1, (1+arg2p4 > 0 /\ arg1p4 > 0 /\ arg1p1 > 0 /\ arg2p1 > 0), cost: 1
	New rule:
	__init -> f168_0_main_EQ : arg1'=arg1p1, arg2'=arg2p1, (arg1p1 > 0 /\ arg2p1 > 0), cost: 1

Step with 7

	Trace

	7[(arg1p1 > 0 /\ arg2p1 > 0)]
	
	Blocked

	[{}, {}]

Step with 5

	Trace

	7[(arg1p1 > 0 /\ arg2p1 > 0)], 5[(-arg1+arg2 > 0 /\ arg1 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2
   5: f168_0_main_EQ -> f168_0_main_EQ : arg2'=-arg1+arg2, (-arg1+arg2 > 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
   6: f168_0_main_EQ -> f168_0_main_EQ : arg1'=arg1-arg2, (-arg1+arg2 < 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
   8: f168_0_main_EQ -> f168_0_main_EQ : arg2'=-arg1*n+arg2, (-arg1*(-1+n)+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ -arg1*(-1+n)-arg1+arg2 > 0), cost: 1
   7: __init -> f168_0_main_EQ : arg1'=arg1p1, arg2'=arg2p1, (arg1p1 > 0 /\ arg2p1 > 0), cost: 1

	Loop Acceleration

	Original rule:
	f168_0_main_EQ -> f168_0_main_EQ : arg2'=-arg1+arg2, (-arg1+arg2 > 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
	New rule:
	f168_0_main_EQ -> f168_0_main_EQ : arg2'=-arg1*n+arg2, (-arg1*(-1+n)+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ -arg1*(-1+n)-arg1+arg2 > 0), cost: 1

		-arg1+arg2 > 0 [0]: montonic decrease yields -arg1*(-1+n)-arg1+arg2 > 0, dependencies: arg1 > 0
		
		-arg1+arg2 > 0 [1]: eventual decrease yields (-arg1+arg2 > 0 /\ -arg1*(-1+n)-arg1+arg2 > 0), dependencies: arg1 > 0
		
		-arg1+arg2 > 0 [2]: eventual increase yields (-arg1+arg2 > 0 /\ arg1 <= 0), dependencies: arg1 > 0
		
		arg1 > 0 [0]: monotonic increase yields arg1 > 0
		
		arg2 > 0 [0]: montonic decrease yields -arg1*(-1+n)+arg2 > 0, dependencies: arg1 > 0
		
		arg2 > 0 [1]: eventual increase yields (arg1 <= 0 /\ arg2 > 0), dependencies: arg1 > 0
		
		Replacement map: {-arg1+arg2 > 0 -> -arg1*(-1+n)-arg1+arg2 > 0, arg1 > 0 -> arg1 > 0, arg2 > 0 -> -arg1*(-1+n)+arg2 > 0}

	Trace

	7[(arg1p1 > 0 /\ arg2p1 > 0)], 8[(-arg1*(-1+n)+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ -arg1*(-1+n)-arg1+arg2 > 0)]
	
	Blocked

	[{}, {}, {5[T], 8[T]}]

Step with 6

	Trace

	7[(arg1p1 > 0 /\ arg2p1 > 0)], 8[(-arg1*(-1+n)+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ -arg1*(-1+n)-arg1+arg2 > 0)], 6[(-arg1+arg2 < 0 /\ arg1 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {5[T], 8[T]}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2
   5: f168_0_main_EQ -> f168_0_main_EQ : arg2'=-arg1+arg2, (-arg1+arg2 > 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
   6: f168_0_main_EQ -> f168_0_main_EQ : arg1'=arg1-arg2, (-arg1+arg2 < 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
   8: f168_0_main_EQ -> f168_0_main_EQ : arg2'=-arg1*n+arg2, (-arg1*(-1+n)+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ -arg1*(-1+n)-arg1+arg2 > 0), cost: 1
   9: f168_0_main_EQ -> f168_0_main_EQ : arg1'=arg1-n2*arg2, (arg1-(-1+n2)*arg2-arg2 > 0 /\ arg1-(-1+n2)*arg2 > 0 /\ -1+n2 >= 0 /\ arg2 > 0), cost: 1
   7: __init -> f168_0_main_EQ : arg1'=arg1p1, arg2'=arg2p1, (arg1p1 > 0 /\ arg2p1 > 0), cost: 1

	Loop Acceleration

	Original rule:
	f168_0_main_EQ -> f168_0_main_EQ : arg1'=arg1-arg2, (-arg1+arg2 < 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
	New rule:
	f168_0_main_EQ -> f168_0_main_EQ : arg1'=arg1-n2*arg2, (arg1-(-1+n2)*arg2-arg2 > 0 /\ arg1-(-1+n2)*arg2 > 0 /\ -1+n2 >= 0 /\ arg2 > 0), cost: 1

		arg1-arg2 > 0 [0]: montonic decrease yields arg1-(-1+n2)*arg2-arg2 > 0, dependencies: arg1 > 0
		
		arg1-arg2 > 0 [1]: eventual decrease yields (arg1-(-1+n2)*arg2-arg2 > 0 /\ arg1-arg2 > 0), dependencies: arg2 > 0
		
		arg1-arg2 > 0 [2]: eventual increase yields (arg1-arg2 > 0 /\ arg2 <= 0), dependencies: arg2 > 0
		
		arg1 > 0 [0]: montonic decrease yields arg1-(-1+n2)*arg2 > 0, dependencies: arg2 > 0
		
		arg1 > 0 [1]: eventual decrease yields (arg1-(-1+n2)*arg2 > 0 /\ arg1 > 0), dependencies: arg2 > 0
		
		arg1 > 0 [2]: eventual increase yields (arg1 > 0 /\ arg2 <= 0), dependencies: arg2 > 0
		
		arg2 > 0 [0]: monotonic increase yields arg2 > 0
		
		Replacement map: {arg1-arg2 > 0 -> arg1-(-1+n2)*arg2-arg2 > 0, arg1 > 0 -> arg1-(-1+n2)*arg2 > 0, arg2 > 0 -> arg2 > 0}

	Trace

	7[(arg1p1 > 0 /\ arg2p1 > 0)], 8[(-arg1*(-1+n)+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ -arg1*(-1+n)-arg1+arg2 > 0)], 9[(arg1-(-1+n2)*arg2-arg2 > 0 /\ arg1-(-1+n2)*arg2 > 0 /\ -1+n2 >= 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {5[T], 8[T]}, {6[T], 9[T]}]

Acceleration Failed

marked recursive suffix as redundant

Step with 5

	Trace

	7[(arg1p1 > 0 /\ arg2p1 > 0)], 8[(-arg1*(-1+n)+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ -arg1*(-1+n)-arg1+arg2 > 0)], 9[(arg1-(-1+n2)*arg2-arg2 > 0 /\ arg1-(-1+n2)*arg2 > 0 /\ -1+n2 >= 0 /\ arg2 > 0)], 5[(-arg1+arg2 > 0 /\ arg1 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {5[T], 8[T]}, {6[T], 9[T]}, {}]

Covered

	Trace

	7[(arg1p1 > 0 /\ arg2p1 > 0)], 8[(-arg1*(-1+n)+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ -arg1*(-1+n)-arg1+arg2 > 0)], 9[(arg1-(-1+n2)*arg2-arg2 > 0 /\ arg1-(-1+n2)*arg2 > 0 /\ -1+n2 >= 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {5[T], 8[T]}, {5[T], 6[T], 9[T]}]

Step with 8

	Trace

	7[(arg1p1 > 0 /\ arg2p1 > 0)], 8[(-arg1*(-1+n)+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ -arg1*(-1+n)-arg1+arg2 > 0)], 9[(arg1-(-1+n2)*arg2-arg2 > 0 /\ arg1-(-1+n2)*arg2 > 0 /\ -1+n2 >= 0 /\ arg2 > 0)], 8[(-arg1*(-1+n)+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ -arg1*(-1+n)-arg1+arg2 > 0)]
	
	Blocked

	[{}, {}, {5[T], 8[T]}, {5[T], 6[T], 9[T]}, {8[T]}]

Acceleration Failed

marked recursive suffix as redundant

Acceleration Failed

marked recursive suffix as redundant

Step with 9

	Trace

	7[(arg1p1 > 0 /\ arg2p1 > 0)], 8[(-arg1*(-1+n)+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ -arg1*(-1+n)-arg1+arg2 > 0)], 9[(arg1-(-1+n2)*arg2-arg2 > 0 /\ arg1-(-1+n2)*arg2 > 0 /\ -1+n2 >= 0 /\ arg2 > 0)], 8[(-arg1*(-1+n)+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ -arg1*(-1+n)-arg1+arg2 > 0)], 9[(arg1-(-1+n2)*arg2-arg2 > 0 /\ arg1-(-1+n2)*arg2 > 0 /\ -1+n2 >= 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {5[T], 8[T]}, {5[T], 6[T], 9[T]}, {8[T]}, {9[T]}]

Acceleration Failed

marked recursive suffix as redundant

Covered

	Trace

	7[(arg1p1 > 0 /\ arg2p1 > 0)], 8[(-arg1*(-1+n)+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ -arg1*(-1+n)-arg1+arg2 > 0)], 9[(arg1-(-1+n2)*arg2-arg2 > 0 /\ arg1-(-1+n2)*arg2 > 0 /\ -1+n2 >= 0 /\ arg2 > 0)], 8[(-arg1*(-1+n)+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ -arg1*(-1+n)-arg1+arg2 > 0)]
	
	Blocked

	[{}, {}, {5[T], 8[T]}, {5[T], 6[T], 9[T]}, {8[T], 9[T]}]

Step with 5

	Trace

	7[(arg1p1 > 0 /\ arg2p1 > 0)], 8[(-arg1*(-1+n)+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ -arg1*(-1+n)-arg1+arg2 > 0)], 9[(arg1-(-1+n2)*arg2-arg2 > 0 /\ arg1-(-1+n2)*arg2 > 0 /\ -1+n2 >= 0 /\ arg2 > 0)], 8[(-arg1*(-1+n)+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ -arg1*(-1+n)-arg1+arg2 > 0)], 5[(-arg1+arg2 > 0 /\ arg1 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {5[T], 8[T]}, {5[T], 6[T], 9[T]}, {8[T], 9[T]}, {}]

Covered

	Trace

	7[(arg1p1 > 0 /\ arg2p1 > 0)], 8[(-arg1*(-1+n)+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ -arg1*(-1+n)-arg1+arg2 > 0)], 9[(arg1-(-1+n2)*arg2-arg2 > 0 /\ arg1-(-1+n2)*arg2 > 0 /\ -1+n2 >= 0 /\ arg2 > 0)], 8[(-arg1*(-1+n)+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ -arg1*(-1+n)-arg1+arg2 > 0)]
	
	Blocked

	[{}, {}, {5[T], 8[T]}, {5[T], 6[T], 9[T]}, {5[T], 8[T], 9[T]}]

Step with 6

	Trace

	7[(arg1p1 > 0 /\ arg2p1 > 0)], 8[(-arg1*(-1+n)+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ -arg1*(-1+n)-arg1+arg2 > 0)], 9[(arg1-(-1+n2)*arg2-arg2 > 0 /\ arg1-(-1+n2)*arg2 > 0 /\ -1+n2 >= 0 /\ arg2 > 0)], 8[(-arg1*(-1+n)+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ -arg1*(-1+n)-arg1+arg2 > 0)], 6[(-arg1+arg2 < 0 /\ arg1 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {5[T], 8[T]}, {5[T], 6[T], 9[T]}, {5[T], 8[T], 9[T]}, {}]

Covered

	Trace

	7[(arg1p1 > 0 /\ arg2p1 > 0)], 8[(-arg1*(-1+n)+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ -arg1*(-1+n)-arg1+arg2 > 0)], 9[(arg1-(-1+n2)*arg2-arg2 > 0 /\ arg1-(-1+n2)*arg2 > 0 /\ -1+n2 >= 0 /\ arg2 > 0)], 8[(-arg1*(-1+n)+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ -arg1*(-1+n)-arg1+arg2 > 0)]
	
	Blocked

	[{}, {}, {5[T], 8[T]}, {5[T], 6[T], 9[T]}, {5[T], 6[T], 8[T], 9[T]}]

Backtrack

	Trace

	7[(arg1p1 > 0 /\ arg2p1 > 0)], 8[(-arg1*(-1+n)+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ -arg1*(-1+n)-arg1+arg2 > 0)], 9[(arg1-(-1+n2)*arg2-arg2 > 0 /\ arg1-(-1+n2)*arg2 > 0 /\ -1+n2 >= 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {5[T], 8[T]}, {5[T], 6[T], 8[T], 9[T]}]

Backtrack

	Trace

	7[(arg1p1 > 0 /\ arg2p1 > 0)], 8[(-arg1*(-1+n)+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ -arg1*(-1+n)-arg1+arg2 > 0)]
	
	Blocked

	[{}, {}, {5[T], 8[T], 9[T]}]

Step with 6

	Trace

	7[(arg1p1 > 0 /\ arg2p1 > 0)], 8[(-arg1*(-1+n)+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ -arg1*(-1+n)-arg1+arg2 > 0)], 6[(-arg1+arg2 < 0 /\ arg1 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {5[T], 8[T], 9[T]}, {}]

Covered

	Trace

	7[(arg1p1 > 0 /\ arg2p1 > 0)], 8[(-arg1*(-1+n)+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ -arg1*(-1+n)-arg1+arg2 > 0)]
	
	Blocked

	[{}, {}, {5[T], 6[T], 8[T], 9[T]}]

Backtrack

	Trace

	7[(arg1p1 > 0 /\ arg2p1 > 0)]
	
	Blocked

	[{}, {8[T]}]

Step with 6

	Trace

	7[(arg1p1 > 0 /\ arg2p1 > 0)], 6[(-arg1+arg2 < 0 /\ arg1 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {8[T]}, {}]

Covered

	Trace

	7[(arg1p1 > 0 /\ arg2p1 > 0)]
	
	Blocked

	[{}, {6[T], 8[T]}]

Step with 9

	Trace

	7[(arg1p1 > 0 /\ arg2p1 > 0)], 9[(arg1-(-1+n2)*arg2-arg2 > 0 /\ arg1-(-1+n2)*arg2 > 0 /\ -1+n2 >= 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {6[T], 8[T]}, {9[T]}]

Step with 5

	Trace

	7[(arg1p1 > 0 /\ arg2p1 > 0)], 9[(arg1-(-1+n2)*arg2-arg2 > 0 /\ arg1-(-1+n2)*arg2 > 0 /\ -1+n2 >= 0 /\ arg2 > 0)], 5[(-arg1+arg2 > 0 /\ arg1 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {6[T], 8[T]}, {9[T]}, {}]

Covered

	Trace

	7[(arg1p1 > 0 /\ arg2p1 > 0)], 9[(arg1-(-1+n2)*arg2-arg2 > 0 /\ arg1-(-1+n2)*arg2 > 0 /\ -1+n2 >= 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {6[T], 8[T]}, {5[T], 9[T]}]

Step with 6

	Trace

	7[(arg1p1 > 0 /\ arg2p1 > 0)], 9[(arg1-(-1+n2)*arg2-arg2 > 0 /\ arg1-(-1+n2)*arg2 > 0 /\ -1+n2 >= 0 /\ arg2 > 0)], 6[(-arg1+arg2 < 0 /\ arg1 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {6[T], 8[T]}, {5[T], 9[T]}, {}]

Covered

	Trace

	7[(arg1p1 > 0 /\ arg2p1 > 0)], 9[(arg1-(-1+n2)*arg2-arg2 > 0 /\ arg1-(-1+n2)*arg2 > 0 /\ -1+n2 >= 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {6[T], 8[T]}, {5[T], 6[T], 9[T]}]

Step with 8

	Trace

	7[(arg1p1 > 0 /\ arg2p1 > 0)], 9[(arg1-(-1+n2)*arg2-arg2 > 0 /\ arg1-(-1+n2)*arg2 > 0 /\ -1+n2 >= 0 /\ arg2 > 0)], 8[(-arg1*(-1+n)+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ -arg1*(-1+n)-arg1+arg2 > 0)]
	
	Blocked

	[{}, {6[T], 8[T]}, {5[T], 6[T], 9[T]}, {8[T]}]

Step with 9

	Trace

	7[(arg1p1 > 0 /\ arg2p1 > 0)], 9[(arg1-(-1+n2)*arg2-arg2 > 0 /\ arg1-(-1+n2)*arg2 > 0 /\ -1+n2 >= 0 /\ arg2 > 0)], 8[(-arg1*(-1+n)+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ -arg1*(-1+n)-arg1+arg2 > 0)], 9[(arg1-(-1+n2)*arg2-arg2 > 0 /\ arg1-(-1+n2)*arg2 > 0 /\ -1+n2 >= 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {6[T], 8[T]}, {5[T], 6[T], 9[T]}, {8[T]}, {9[T]}]

Step with 5

	Trace

	7[(arg1p1 > 0 /\ arg2p1 > 0)], 9[(arg1-(-1+n2)*arg2-arg2 > 0 /\ arg1-(-1+n2)*arg2 > 0 /\ -1+n2 >= 0 /\ arg2 > 0)], 8[(-arg1*(-1+n)+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ -arg1*(-1+n)-arg1+arg2 > 0)], 9[(arg1-(-1+n2)*arg2-arg2 > 0 /\ arg1-(-1+n2)*arg2 > 0 /\ -1+n2 >= 0 /\ arg2 > 0)], 5[(-arg1+arg2 > 0 /\ arg1 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {6[T], 8[T]}, {5[T], 6[T], 9[T]}, {8[T]}, {9[T]}, {}]

Covered

	Trace

	7[(arg1p1 > 0 /\ arg2p1 > 0)], 9[(arg1-(-1+n2)*arg2-arg2 > 0 /\ arg1-(-1+n2)*arg2 > 0 /\ -1+n2 >= 0 /\ arg2 > 0)], 8[(-arg1*(-1+n)+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ -arg1*(-1+n)-arg1+arg2 > 0)], 9[(arg1-(-1+n2)*arg2-arg2 > 0 /\ arg1-(-1+n2)*arg2 > 0 /\ -1+n2 >= 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {6[T], 8[T]}, {5[T], 6[T], 9[T]}, {8[T]}, {5[T], 9[T]}]

Step with 6

	Trace

	7[(arg1p1 > 0 /\ arg2p1 > 0)], 9[(arg1-(-1+n2)*arg2-arg2 > 0 /\ arg1-(-1+n2)*arg2 > 0 /\ -1+n2 >= 0 /\ arg2 > 0)], 8[(-arg1*(-1+n)+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ -arg1*(-1+n)-arg1+arg2 > 0)], 9[(arg1-(-1+n2)*arg2-arg2 > 0 /\ arg1-(-1+n2)*arg2 > 0 /\ -1+n2 >= 0 /\ arg2 > 0)], 6[(-arg1+arg2 < 0 /\ arg1 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {6[T], 8[T]}, {5[T], 6[T], 9[T]}, {8[T]}, {5[T], 9[T]}, {}]

Covered

	Trace

	7[(arg1p1 > 0 /\ arg2p1 > 0)], 9[(arg1-(-1+n2)*arg2-arg2 > 0 /\ arg1-(-1+n2)*arg2 > 0 /\ -1+n2 >= 0 /\ arg2 > 0)], 8[(-arg1*(-1+n)+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ -arg1*(-1+n)-arg1+arg2 > 0)], 9[(arg1-(-1+n2)*arg2-arg2 > 0 /\ arg1-(-1+n2)*arg2 > 0 /\ -1+n2 >= 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {6[T], 8[T]}, {5[T], 6[T], 9[T]}, {8[T]}, {5[T], 6[T], 9[T]}]

Step with 8

	Trace

	7[(arg1p1 > 0 /\ arg2p1 > 0)], 9[(arg1-(-1+n2)*arg2-arg2 > 0 /\ arg1-(-1+n2)*arg2 > 0 /\ -1+n2 >= 0 /\ arg2 > 0)], 8[(-arg1*(-1+n)+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ -arg1*(-1+n)-arg1+arg2 > 0)], 9[(arg1-(-1+n2)*arg2-arg2 > 0 /\ arg1-(-1+n2)*arg2 > 0 /\ -1+n2 >= 0 /\ arg2 > 0)], 8[(-arg1*(-1+n)+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ -arg1*(-1+n)-arg1+arg2 > 0)]
	
	Blocked

	[{}, {6[T], 8[T]}, {5[T], 6[T], 9[T]}, {8[T]}, {5[T], 6[T], 9[T]}, {8[T]}]

Covered

	Trace

	7[(arg1p1 > 0 /\ arg2p1 > 0)], 9[(arg1-(-1+n2)*arg2-arg2 > 0 /\ arg1-(-1+n2)*arg2 > 0 /\ -1+n2 >= 0 /\ arg2 > 0)], 8[(-arg1*(-1+n)+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ -arg1*(-1+n)-arg1+arg2 > 0)], 9[(arg1-(-1+n2)*arg2-arg2 > 0 /\ arg1-(-1+n2)*arg2 > 0 /\ -1+n2 >= 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {6[T], 8[T]}, {5[T], 6[T], 9[T]}, {8[T]}, {5[T], 6[T], 8[T], 9[T]}]

Backtrack

	Trace

	7[(arg1p1 > 0 /\ arg2p1 > 0)], 9[(arg1-(-1+n2)*arg2-arg2 > 0 /\ arg1-(-1+n2)*arg2 > 0 /\ -1+n2 >= 0 /\ arg2 > 0)], 8[(-arg1*(-1+n)+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ -arg1*(-1+n)-arg1+arg2 > 0)]
	
	Blocked

	[{}, {6[T], 8[T]}, {5[T], 6[T], 9[T]}, {8[T], 9[T]}]

Step with 5

	Trace

	7[(arg1p1 > 0 /\ arg2p1 > 0)], 9[(arg1-(-1+n2)*arg2-arg2 > 0 /\ arg1-(-1+n2)*arg2 > 0 /\ -1+n2 >= 0 /\ arg2 > 0)], 8[(-arg1*(-1+n)+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ -arg1*(-1+n)-arg1+arg2 > 0)], 5[(-arg1+arg2 > 0 /\ arg1 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {6[T], 8[T]}, {5[T], 6[T], 9[T]}, {8[T], 9[T]}, {}]

Covered

	Trace

	7[(arg1p1 > 0 /\ arg2p1 > 0)], 9[(arg1-(-1+n2)*arg2-arg2 > 0 /\ arg1-(-1+n2)*arg2 > 0 /\ -1+n2 >= 0 /\ arg2 > 0)], 8[(-arg1*(-1+n)+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ -arg1*(-1+n)-arg1+arg2 > 0)]
	
	Blocked

	[{}, {6[T], 8[T]}, {5[T], 6[T], 9[T]}, {5[T], 8[T], 9[T]}]

Step with 6

	Trace

	7[(arg1p1 > 0 /\ arg2p1 > 0)], 9[(arg1-(-1+n2)*arg2-arg2 > 0 /\ arg1-(-1+n2)*arg2 > 0 /\ -1+n2 >= 0 /\ arg2 > 0)], 8[(-arg1*(-1+n)+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ -arg1*(-1+n)-arg1+arg2 > 0)], 6[(-arg1+arg2 < 0 /\ arg1 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {6[T], 8[T]}, {5[T], 6[T], 9[T]}, {5[T], 8[T], 9[T]}, {}]

Covered

	Trace

	7[(arg1p1 > 0 /\ arg2p1 > 0)], 9[(arg1-(-1+n2)*arg2-arg2 > 0 /\ arg1-(-1+n2)*arg2 > 0 /\ -1+n2 >= 0 /\ arg2 > 0)], 8[(-arg1*(-1+n)+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ -arg1*(-1+n)-arg1+arg2 > 0)]
	
	Blocked

	[{}, {6[T], 8[T]}, {5[T], 6[T], 9[T]}, {5[T], 6[T], 8[T], 9[T]}]

Backtrack

	Trace

	7[(arg1p1 > 0 /\ arg2p1 > 0)], 9[(arg1-(-1+n2)*arg2-arg2 > 0 /\ arg1-(-1+n2)*arg2 > 0 /\ -1+n2 >= 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {6[T], 8[T]}, {5[T], 6[T], 8[T], 9[T]}]

Backtrack

	Trace

	7[(arg1p1 > 0 /\ arg2p1 > 0)]
	
	Blocked

	[{}, {6[T], 8[T], 9[T]}]

Step with 5

	Trace

	7[(arg1p1 > 0 /\ arg2p1 > 0)], 5[(-arg1+arg2 > 0 /\ arg1 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {6[T], 8[T], 9[T]}, {}]

Covered

	Trace

	7[(arg1p1 > 0 /\ arg2p1 > 0)]
	
	Blocked

	[{}, {5[T], 6[T], 8[T], 9[T]}]

Backtrack

	Trace

	Blocked

	[{7[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
