WORST_CASE(Omega(0),?)

Initial ITS
Start location: __init
   0: f1_0_main_Load -> f302_0_createList_GE : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (1-arg3P0 == 0 /\ arg2 > 0 /\ 1+arg1P0 > 0 /\ arg1 > 0 /\ arg2-arg2P0 == 0), cost: 1
   1: f1_0_main_Load -> f502_0_main_InvokeMethod : arg2'=arg2P1, arg1'=arg1P1, arg3'=arg3P1, (arg2 > 0 /\ 1+x80 > 0 /\ arg1P1 > 0 /\ arg1 > 0 /\ arg1P1-arg1 <= 0 /\ -2+arg2P1 > 0), cost: 1
   2: f1_0_main_Load -> f502_0_main_InvokeMethod : arg2'=arg2P2, arg1'=arg1P2, arg3'=arg3P2, (1+x140 > 0 /\ 1+arg1-arg2P2 >= 0 /\ arg2 > 0 /\ -arg1P2+arg1 >= 0 /\ arg1P2 > 0 /\ -1+arg2P2 > 0 /\ arg1 > 0), cost: 1
   3: f302_0_createList_GE -> f302_0_createList_GE : arg2'=arg2P3, arg1'=arg1P3, arg3'=arg3P3, (1+arg1 > 0 /\ 1-arg3P3+arg3 == 0 /\ 1+arg2 > 0 /\ -arg2P3+arg2 == 0 /\ arg3 > 0 /\ -1-arg1P3+arg1 == 0 /\ -1 < 0 /\ -arg2+arg3 < 0), cost: 1
   4: f502_0_main_InvokeMethod -> f571_0_sumList_NONNULL : arg2'=arg2P4, arg1'=arg1P4, arg3'=arg3P4, (-arg3P4+arg3 == 0 /\ arg2 > 0 /\ x180 > 0 /\ -1+arg3 > 0 /\ 1-arg2+arg2P4 <= 0 /\ arg1 > 0 /\ arg1P4 > 0 /\ 1+arg2P4 > 0 /\ -arg2+arg1P4 <= 0), cost: 1
   5: f571_0_sumList_NONNULL -> f571_0_sumList_NONNULL : arg2'=arg2P5, arg1'=arg1P5, arg3'=arg3P5, (-2+arg1 > 0 /\ arg2 > 0 /\ 1-arg2+arg2P5 <= 0 /\ 1+arg2P5 > 0 /\ 2-arg1+arg1P5 <= 0 /\ -arg3P5+arg3 == 0 /\ -1+arg3 > 0 /\ -arg2+arg1P5 <= 0 /\ 3-arg1+arg2P5 <= 0 /\ arg1P5 > 0), cost: 1
   6: __init -> f1_0_main_Load : arg2'=arg2P6, arg1'=arg1P6, arg3'=arg3P6, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_Load -> f302_0_createList_GE : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (1-arg3P0 == 0 /\ arg2 > 0 /\ 1+arg1P0 > 0 /\ arg1 > 0 /\ arg2-arg2P0 == 0), cost: 1
New rule:
f1_0_main_Load -> f302_0_createList_GE : arg1'=arg1P0, arg3'=1, (arg2 > 0 /\ 1+arg1P0 > 0 /\ arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f1_0_main_Load -> f502_0_main_InvokeMethod : arg2'=arg2P1, arg1'=arg1P1, arg3'=arg3P1, (arg2 > 0 /\ 1+x80 > 0 /\ arg1P1 > 0 /\ arg1 > 0 /\ arg1P1-arg1 <= 0 /\ -2+arg2P1 > 0), cost: 1
New rule:
f1_0_main_Load -> f502_0_main_InvokeMethod : arg2'=arg2P1, arg1'=arg1P1, arg3'=arg3P1, (arg2 > 0 /\ arg1P1 > 0 /\ arg1P1-arg1 <= 0 /\ -2+arg2P1 > 0), cost: 1

Applied preprocessing
Original rule:
f1_0_main_Load -> f502_0_main_InvokeMethod : arg2'=arg2P2, arg1'=arg1P2, arg3'=arg3P2, (1+x140 > 0 /\ 1+arg1-arg2P2 >= 0 /\ arg2 > 0 /\ -arg1P2+arg1 >= 0 /\ arg1P2 > 0 /\ -1+arg2P2 > 0 /\ arg1 > 0), cost: 1
New rule:
f1_0_main_Load -> f502_0_main_InvokeMethod : arg2'=arg2P2, arg1'=arg1P2, arg3'=arg3P2, (1+arg1-arg2P2 >= 0 /\ arg2 > 0 /\ -arg1P2+arg1 >= 0 /\ arg1P2 > 0 /\ -1+arg2P2 > 0), cost: 1

Applied preprocessing
Original rule:
f302_0_createList_GE -> f302_0_createList_GE : arg2'=arg2P3, arg1'=arg1P3, arg3'=arg3P3, (1+arg1 > 0 /\ 1-arg3P3+arg3 == 0 /\ 1+arg2 > 0 /\ -arg2P3+arg2 == 0 /\ arg3 > 0 /\ -1-arg1P3+arg1 == 0 /\ -1 < 0 /\ -arg2+arg3 < 0), cost: 1
New rule:
f302_0_createList_GE -> f302_0_createList_GE : arg1'=-1+arg1, arg3'=1+arg3, (1+arg1 > 0 /\ arg2-arg3 > 0 /\ arg3 > 0), cost: 1

Applied preprocessing
Original rule:
f502_0_main_InvokeMethod -> f571_0_sumList_NONNULL : arg2'=arg2P4, arg1'=arg1P4, arg3'=arg3P4, (-arg3P4+arg3 == 0 /\ arg2 > 0 /\ x180 > 0 /\ -1+arg3 > 0 /\ 1-arg2+arg2P4 <= 0 /\ arg1 > 0 /\ arg1P4 > 0 /\ 1+arg2P4 > 0 /\ -arg2+arg1P4 <= 0), cost: 1
New rule:
f502_0_main_InvokeMethod -> f571_0_sumList_NONNULL : arg2'=arg2P4, arg1'=arg1P4, (-1+arg3 > 0 /\ 1-arg2+arg2P4 <= 0 /\ arg1 > 0 /\ arg1P4 > 0 /\ 1+arg2P4 > 0 /\ -arg2+arg1P4 <= 0), cost: 1

Applied preprocessing
Original rule:
f571_0_sumList_NONNULL -> f571_0_sumList_NONNULL : arg2'=arg2P5, arg1'=arg1P5, arg3'=arg3P5, (-2+arg1 > 0 /\ arg2 > 0 /\ 1-arg2+arg2P5 <= 0 /\ 1+arg2P5 > 0 /\ 2-arg1+arg1P5 <= 0 /\ -arg3P5+arg3 == 0 /\ -1+arg3 > 0 /\ -arg2+arg1P5 <= 0 /\ 3-arg1+arg2P5 <= 0 /\ arg1P5 > 0), cost: 1
New rule:
f571_0_sumList_NONNULL -> f571_0_sumList_NONNULL : arg2'=arg2P5, arg1'=arg1P5, (1-arg2+arg2P5 <= 0 /\ 1+arg2P5 > 0 /\ 2-arg1+arg1P5 <= 0 /\ -1+arg3 > 0 /\ -arg2+arg1P5 <= 0 /\ 3-arg1+arg2P5 <= 0 /\ arg1P5 > 0), cost: 1

Simplified rules
Start location: __init
   7: f1_0_main_Load -> f302_0_createList_GE : arg1'=arg1P0, arg3'=1, (arg2 > 0 /\ 1+arg1P0 > 0 /\ arg1 > 0), cost: 1
   8: f1_0_main_Load -> f502_0_main_InvokeMethod : arg2'=arg2P1, arg1'=arg1P1, arg3'=arg3P1, (arg2 > 0 /\ arg1P1 > 0 /\ arg1P1-arg1 <= 0 /\ -2+arg2P1 > 0), cost: 1
   9: f1_0_main_Load -> f502_0_main_InvokeMethod : arg2'=arg2P2, arg1'=arg1P2, arg3'=arg3P2, (1+arg1-arg2P2 >= 0 /\ arg2 > 0 /\ -arg1P2+arg1 >= 0 /\ arg1P2 > 0 /\ -1+arg2P2 > 0), cost: 1
  10: f302_0_createList_GE -> f302_0_createList_GE : arg1'=-1+arg1, arg3'=1+arg3, (1+arg1 > 0 /\ arg2-arg3 > 0 /\ arg3 > 0), cost: 1
  11: f502_0_main_InvokeMethod -> f571_0_sumList_NONNULL : arg2'=arg2P4, arg1'=arg1P4, (-1+arg3 > 0 /\ 1-arg2+arg2P4 <= 0 /\ arg1 > 0 /\ arg1P4 > 0 /\ 1+arg2P4 > 0 /\ -arg2+arg1P4 <= 0), cost: 1
  12: f571_0_sumList_NONNULL -> f571_0_sumList_NONNULL : arg2'=arg2P5, arg1'=arg1P5, (1-arg2+arg2P5 <= 0 /\ 1+arg2P5 > 0 /\ 2-arg1+arg1P5 <= 0 /\ -1+arg3 > 0 /\ -arg2+arg1P5 <= 0 /\ 3-arg1+arg2P5 <= 0 /\ arg1P5 > 0), cost: 1
   6: __init -> f1_0_main_Load : arg2'=arg2P6, arg1'=arg1P6, arg3'=arg3P6, TRUE, cost: 1


Applied acceleration
Original rule:
f302_0_createList_GE -> f302_0_createList_GE : arg1'=-1+arg1, arg3'=1+arg3, (1+arg1 > 0 /\ arg2-arg3 > 0 /\ arg3 > 0), cost: 1
New rule:
f302_0_createList_GE -> f302_0_createList_GE : arg1'=-n+arg1, arg3'=n+arg3, (1+arg2-n-arg3 > 0 /\ n >= 0 /\ 2-n+arg1 > 0 /\ arg3 > 0), cost: n
Sub-proof via acceration calculus written to file:///tmp/tmpnam_JPNIko.txt

Applied instantiation
Original rule:
f302_0_createList_GE -> f302_0_createList_GE : arg1'=-n+arg1, arg3'=n+arg3, (1+arg2-n-arg3 > 0 /\ n >= 0 /\ 2-n+arg1 > 0 /\ arg3 > 0), cost: n
New rule:
f302_0_createList_GE -> f302_0_createList_GE : arg1'=-1, arg3'=1+arg1+arg3, (1 > 0 /\ arg2-arg1-arg3 > 0 /\ 1+arg1 >= 0 /\ arg3 > 0), cost: 1+arg1

Applied instantiation
Original rule:
f302_0_createList_GE -> f302_0_createList_GE : arg1'=-n+arg1, arg3'=n+arg3, (1+arg2-n-arg3 > 0 /\ n >= 0 /\ 2-n+arg1 > 0 /\ arg3 > 0), cost: n
New rule:
f302_0_createList_GE -> f302_0_createList_GE : arg1'=-arg2+arg1+arg3, arg3'=arg2, (1 > 0 /\ 2-arg2+arg1+arg3 > 0 /\ arg2-arg3 >= 0 /\ arg3 > 0), cost: arg2-arg3

Applied simplification
Original rule:
f302_0_createList_GE -> f302_0_createList_GE : arg1'=-1, arg3'=1+arg1+arg3, (1 > 0 /\ arg2-arg1-arg3 > 0 /\ 1+arg1 >= 0 /\ arg3 > 0), cost: 1+arg1
New rule:
f302_0_createList_GE -> f302_0_createList_GE : arg1'=-1, arg3'=1+arg1+arg3, (arg2-arg1-arg3 > 0 /\ 1+arg1 >= 0 /\ arg3 > 0), cost: 1+arg1

Applied simplification
Original rule:
f302_0_createList_GE -> f302_0_createList_GE : arg1'=-arg2+arg1+arg3, arg3'=arg2, (1 > 0 /\ 2-arg2+arg1+arg3 > 0 /\ arg2-arg3 >= 0 /\ arg3 > 0), cost: arg2-arg3
New rule:
f302_0_createList_GE -> f302_0_createList_GE : arg1'=-arg2+arg1+arg3, arg3'=arg2, (2-arg2+arg1+arg3 > 0 /\ arg2-arg3 >= 0 /\ arg3 > 0), cost: arg2-arg3

Applied deletion
Removed the following rules: 10

Accelerated simple loops
Start location: __init
   7: f1_0_main_Load -> f302_0_createList_GE : arg1'=arg1P0, arg3'=1, (arg2 > 0 /\ 1+arg1P0 > 0 /\ arg1 > 0), cost: 1
   8: f1_0_main_Load -> f502_0_main_InvokeMethod : arg2'=arg2P1, arg1'=arg1P1, arg3'=arg3P1, (arg2 > 0 /\ arg1P1 > 0 /\ arg1P1-arg1 <= 0 /\ -2+arg2P1 > 0), cost: 1
   9: f1_0_main_Load -> f502_0_main_InvokeMethod : arg2'=arg2P2, arg1'=arg1P2, arg3'=arg3P2, (1+arg1-arg2P2 >= 0 /\ arg2 > 0 /\ -arg1P2+arg1 >= 0 /\ arg1P2 > 0 /\ -1+arg2P2 > 0), cost: 1
  15: f302_0_createList_GE -> f302_0_createList_GE : arg1'=-1, arg3'=1+arg1+arg3, (arg2-arg1-arg3 > 0 /\ 1+arg1 >= 0 /\ arg3 > 0), cost: 1+arg1
  16: f302_0_createList_GE -> f302_0_createList_GE : arg1'=-arg2+arg1+arg3, arg3'=arg2, (2-arg2+arg1+arg3 > 0 /\ arg2-arg3 >= 0 /\ arg3 > 0), cost: arg2-arg3
  11: f502_0_main_InvokeMethod -> f571_0_sumList_NONNULL : arg2'=arg2P4, arg1'=arg1P4, (-1+arg3 > 0 /\ 1-arg2+arg2P4 <= 0 /\ arg1 > 0 /\ arg1P4 > 0 /\ 1+arg2P4 > 0 /\ -arg2+arg1P4 <= 0), cost: 1
  12: f571_0_sumList_NONNULL -> f571_0_sumList_NONNULL : arg2'=arg2P5, arg1'=arg1P5, (1-arg2+arg2P5 <= 0 /\ 1+arg2P5 > 0 /\ 2-arg1+arg1P5 <= 0 /\ -1+arg3 > 0 /\ -arg2+arg1P5 <= 0 /\ 3-arg1+arg2P5 <= 0 /\ arg1P5 > 0), cost: 1
   6: __init -> f1_0_main_Load : arg2'=arg2P6, arg1'=arg1P6, arg3'=arg3P6, TRUE, cost: 1


Applied chaining
First rule:
f1_0_main_Load -> f302_0_createList_GE : arg1'=arg1P0, arg3'=1, (arg2 > 0 /\ 1+arg1P0 > 0 /\ arg1 > 0), cost: 1
Second rule:
f302_0_createList_GE -> f302_0_createList_GE : arg1'=-1, arg3'=1+arg1+arg3, (arg2-arg1-arg3 > 0 /\ 1+arg1 >= 0 /\ arg3 > 0), cost: 1+arg1
New rule:
f1_0_main_Load -> f302_0_createList_GE : arg1'=-1, arg3'=2+arg1P0, (1+arg1P0 > 0 /\ -1+arg2-arg1P0 > 0 /\ arg1 > 0), cost: 2+arg1P0

Applied chaining
First rule:
f1_0_main_Load -> f302_0_createList_GE : arg1'=arg1P0, arg3'=1, (arg2 > 0 /\ 1+arg1P0 > 0 /\ arg1 > 0), cost: 1
Second rule:
f302_0_createList_GE -> f302_0_createList_GE : arg1'=-arg2+arg1+arg3, arg3'=arg2, (2-arg2+arg1+arg3 > 0 /\ arg2-arg3 >= 0 /\ arg3 > 0), cost: arg2-arg3
New rule:
f1_0_main_Load -> f302_0_createList_GE : arg1'=1-arg2+arg1P0, arg3'=arg2, (3-arg2+arg1P0 > 0 /\ 1+arg1P0 > 0 /\ arg1 > 0 /\ -1+arg2 >= 0), cost: arg2

Applied deletion
Removed the following rules: 15 16

Applied chaining
First rule:
f502_0_main_InvokeMethod -> f571_0_sumList_NONNULL : arg2'=arg2P4, arg1'=arg1P4, (-1+arg3 > 0 /\ 1-arg2+arg2P4 <= 0 /\ arg1 > 0 /\ arg1P4 > 0 /\ 1+arg2P4 > 0 /\ -arg2+arg1P4 <= 0), cost: 1
Second rule:
f571_0_sumList_NONNULL -> f571_0_sumList_NONNULL : arg2'=arg2P5, arg1'=arg1P5, (1-arg2+arg2P5 <= 0 /\ 1+arg2P5 > 0 /\ 2-arg1+arg1P5 <= 0 /\ -1+arg3 > 0 /\ -arg2+arg1P5 <= 0 /\ 3-arg1+arg2P5 <= 0 /\ arg1P5 > 0), cost: 1
New rule:
f502_0_main_InvokeMethod -> f571_0_sumList_NONNULL : arg2'=arg2P5, arg1'=arg1P5, (1+arg2P5 > 0 /\ 3-arg2+arg2P5 <= 0 /\ -1+arg3 > 0 /\ arg1 > 0 /\ 2-arg2+arg1P5 <= 0 /\ arg1P5 > 0), cost: 2

Applied deletion
Removed the following rules: 12

Chained accelerated rules with incoming rules
Start location: __init
   7: f1_0_main_Load -> f302_0_createList_GE : arg1'=arg1P0, arg3'=1, (arg2 > 0 /\ 1+arg1P0 > 0 /\ arg1 > 0), cost: 1
   8: f1_0_main_Load -> f502_0_main_InvokeMethod : arg2'=arg2P1, arg1'=arg1P1, arg3'=arg3P1, (arg2 > 0 /\ arg1P1 > 0 /\ arg1P1-arg1 <= 0 /\ -2+arg2P1 > 0), cost: 1
   9: f1_0_main_Load -> f502_0_main_InvokeMethod : arg2'=arg2P2, arg1'=arg1P2, arg3'=arg3P2, (1+arg1-arg2P2 >= 0 /\ arg2 > 0 /\ -arg1P2+arg1 >= 0 /\ arg1P2 > 0 /\ -1+arg2P2 > 0), cost: 1
  17: f1_0_main_Load -> f302_0_createList_GE : arg1'=-1, arg3'=2+arg1P0, (1+arg1P0 > 0 /\ -1+arg2-arg1P0 > 0 /\ arg1 > 0), cost: 2+arg1P0
  18: f1_0_main_Load -> f302_0_createList_GE : arg1'=1-arg2+arg1P0, arg3'=arg2, (3-arg2+arg1P0 > 0 /\ 1+arg1P0 > 0 /\ arg1 > 0 /\ -1+arg2 >= 0), cost: arg2
  11: f502_0_main_InvokeMethod -> f571_0_sumList_NONNULL : arg2'=arg2P4, arg1'=arg1P4, (-1+arg3 > 0 /\ 1-arg2+arg2P4 <= 0 /\ arg1 > 0 /\ arg1P4 > 0 /\ 1+arg2P4 > 0 /\ -arg2+arg1P4 <= 0), cost: 1
  19: f502_0_main_InvokeMethod -> f571_0_sumList_NONNULL : arg2'=arg2P5, arg1'=arg1P5, (1+arg2P5 > 0 /\ 3-arg2+arg2P5 <= 0 /\ -1+arg3 > 0 /\ arg1 > 0 /\ 2-arg2+arg1P5 <= 0 /\ arg1P5 > 0), cost: 2
   6: __init -> f1_0_main_Load : arg2'=arg2P6, arg1'=arg1P6, arg3'=arg3P6, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
  <empty>


Computing asymptotic complexity

Proved the following lower bound
Complexity:  Unknown
Cpx degree: ?

Solved cost: 0
Rule cost:   0

