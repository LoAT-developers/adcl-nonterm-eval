NO

Initial ITS
Start location: __init
   0: f1_0_main_ConstantStackPush -> f51_0_main_GE : arg2'=arg2P0, arg1'=arg1P0, (-arg1P0 == 0 /\ 100-arg2P0 == 0), cost: 1
   1: f51_0_main_GE -> f51_0_main_GE : arg2'=arg2P1, arg1'=arg1P1, (arg2-arg1 > 0 /\ 1+arg1-arg1P1 == 0 /\ 1+arg2-arg2P1 == 0), cost: 1
   2: __init -> f1_0_main_ConstantStackPush : arg2'=arg2P2, arg1'=arg1P2, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_ConstantStackPush -> f51_0_main_GE : arg2'=arg2P0, arg1'=arg1P0, (-arg1P0 == 0 /\ 100-arg2P0 == 0), cost: 1
New rule:
f1_0_main_ConstantStackPush -> f51_0_main_GE : arg2'=100, arg1'=0, TRUE, cost: 1

Applied preprocessing
Original rule:
f51_0_main_GE -> f51_0_main_GE : arg2'=arg2P1, arg1'=arg1P1, (arg2-arg1 > 0 /\ 1+arg1-arg1P1 == 0 /\ 1+arg2-arg2P1 == 0), cost: 1
New rule:
f51_0_main_GE -> f51_0_main_GE : arg2'=1+arg2, arg1'=1+arg1, arg2-arg1 > 0, cost: 1

Simplified rules
Start location: __init
   3: f1_0_main_ConstantStackPush -> f51_0_main_GE : arg2'=100, arg1'=0, TRUE, cost: 1
   4: f51_0_main_GE -> f51_0_main_GE : arg2'=1+arg2, arg1'=1+arg1, arg2-arg1 > 0, cost: 1
   2: __init -> f1_0_main_ConstantStackPush : arg2'=arg2P2, arg1'=arg1P2, TRUE, cost: 1


Applied nonterm
Original rule:
f51_0_main_GE -> f51_0_main_GE : arg2'=1+arg2, arg1'=1+arg1, arg2-arg1 > 0, cost: 1
New rule:
f51_0_main_GE -> [3] : (arg2-arg1 > 0 /\ n >= 0), cost: NONTERM
Sub-proof via acceration calculus written to file:///tmp/tmpnam_nFaClc.txt

Applied deletion
Removed the following rules: 4

Accelerated simple loops
Start location: __init
   3: f1_0_main_ConstantStackPush -> f51_0_main_GE : arg2'=100, arg1'=0, TRUE, cost: 1
   5: f51_0_main_GE -> [3] : (arg2-arg1 > 0 /\ n >= 0), cost: NONTERM
   2: __init -> f1_0_main_ConstantStackPush : arg2'=arg2P2, arg1'=arg1P2, TRUE, cost: 1


Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f51_0_main_GE : arg2'=100, arg1'=0, TRUE, cost: 1
Second rule:
f51_0_main_GE -> [3] : (arg2-arg1 > 0 /\ n >= 0), cost: NONTERM
New rule:
f1_0_main_ConstantStackPush -> [3] : 100 > 0, cost: NONTERM

Applied deletion
Removed the following rules: 5

Chained accelerated rules with incoming rules
Start location: __init
   3: f1_0_main_ConstantStackPush -> f51_0_main_GE : arg2'=100, arg1'=0, TRUE, cost: 1
   6: f1_0_main_ConstantStackPush -> [3] : 100 > 0, cost: NONTERM
   2: __init -> f1_0_main_ConstantStackPush : arg2'=arg2P2, arg1'=arg1P2, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
   6: f1_0_main_ConstantStackPush -> [3] : 100 > 0, cost: NONTERM
   2: __init -> f1_0_main_ConstantStackPush : arg2'=arg2P2, arg1'=arg1P2, TRUE, cost: 1


Eliminating location f1_0_main_ConstantStackPush by chaining:

Applied chaining
First rule:
__init -> f1_0_main_ConstantStackPush : arg2'=arg2P2, arg1'=arg1P2, TRUE, cost: 1
Second rule:
f1_0_main_ConstantStackPush -> [3] : 100 > 0, cost: NONTERM
New rule:
__init -> [3] : 100 > 0, cost: NONTERM

Applied deletion
Removed the following rules: 2 6

Eliminated locations on linear paths
Start location: __init
   7: __init -> [3] : 100 > 0, cost: NONTERM


Computing asymptotic complexity
Proved nontermination of rule 7 via SMT.

Proved the following lower bound
Complexity:  Nonterm
Cpx degree: Nonterm

Solved cost: NONTERM
Rule cost:   NONTERM
Rule guard:  100 > 0
