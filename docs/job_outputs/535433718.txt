NO

Initial ITS
Start location: __init
   0: f1_0_main_Load -> f50_0_increase_GE : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (arg2-arg1P0 == 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 1
   1: f50_0_increase_GE -> f79_0_increase_LE : arg2'=arg2P1, arg1'=arg1P1, arg3'=arg3P1, (arg1-arg3P1 == 0 /\ -10+arg1 < 0 /\ arg1-arg1P1 == 0 /\ -arg2P1+arg1 == 0), cost: 1
   2: f79_0_increase_LE -> f50_0_increase_GE : arg2'=arg2P2, arg1'=arg1P2, arg3'=arg3P2, (-arg3 == 0 /\ -arg2 == 0 /\ 1-arg1P2+arg1 == 0), cost: 1
   3: f79_0_increase_LE -> f79_0_increase_LE : arg2'=arg2P3, arg1'=arg1P3, arg3'=arg3P3, (1-arg2P3+arg2 == 0 /\ arg2 > 0 /\ -arg1P3+arg1 == 0 /\ arg2-arg3 == 0 /\ 1+arg2-arg3P3 == 0), cost: 1
   4: __init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, arg3'=arg3P4, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_Load -> f50_0_increase_GE : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (arg2-arg1P0 == 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 1
New rule:
f1_0_main_Load -> f50_0_increase_GE : arg2'=arg2P0, arg1'=arg2, arg3'=arg3P0, (1+arg2 > 0 /\ arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f50_0_increase_GE -> f79_0_increase_LE : arg2'=arg2P1, arg1'=arg1P1, arg3'=arg3P1, (arg1-arg3P1 == 0 /\ -10+arg1 < 0 /\ arg1-arg1P1 == 0 /\ -arg2P1+arg1 == 0), cost: 1
New rule:
f50_0_increase_GE -> f79_0_increase_LE : arg2'=arg1, arg3'=arg1, 10-arg1 > 0, cost: 1

Applied preprocessing
Original rule:
f79_0_increase_LE -> f50_0_increase_GE : arg2'=arg2P2, arg1'=arg1P2, arg3'=arg3P2, (-arg3 == 0 /\ -arg2 == 0 /\ 1-arg1P2+arg1 == 0), cost: 1
New rule:
f79_0_increase_LE -> f50_0_increase_GE : arg2'=arg2P2, arg1'=1+arg1, arg3'=arg3P2, (arg2 == 0 /\ arg3 == 0), cost: 1

Applied preprocessing
Original rule:
f79_0_increase_LE -> f79_0_increase_LE : arg2'=arg2P3, arg1'=arg1P3, arg3'=arg3P3, (1-arg2P3+arg2 == 0 /\ arg2 > 0 /\ -arg1P3+arg1 == 0 /\ arg2-arg3 == 0 /\ 1+arg2-arg3P3 == 0), cost: 1
New rule:
f79_0_increase_LE -> f79_0_increase_LE : arg2'=1+arg2, arg3'=1+arg2, (arg2 > 0 /\ arg2-arg3 == 0), cost: 1

Simplified rules
Start location: __init
   5: f1_0_main_Load -> f50_0_increase_GE : arg2'=arg2P0, arg1'=arg2, arg3'=arg3P0, (1+arg2 > 0 /\ arg1 > 0), cost: 1
   6: f50_0_increase_GE -> f79_0_increase_LE : arg2'=arg1, arg3'=arg1, 10-arg1 > 0, cost: 1
   7: f79_0_increase_LE -> f50_0_increase_GE : arg2'=arg2P2, arg1'=1+arg1, arg3'=arg3P2, (arg2 == 0 /\ arg3 == 0), cost: 1
   8: f79_0_increase_LE -> f79_0_increase_LE : arg2'=1+arg2, arg3'=1+arg2, (arg2 > 0 /\ arg2-arg3 == 0), cost: 1
   4: __init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, arg3'=arg3P4, TRUE, cost: 1


Applied nonterm
Original rule:
f79_0_increase_LE -> f79_0_increase_LE : arg2'=1+arg2, arg3'=1+arg2, (arg2 > 0 /\ arg2-arg3 == 0), cost: 1
New rule:
f79_0_increase_LE -> [4] : (arg2 > 0 /\ arg2-arg3 >= 0 /\ -arg2+arg3 >= 0 /\ -1+n >= 0), cost: NONTERM
Sub-proof via acceration calculus written to file:///tmp/tmpnam_gooONi.txt

Applied deletion
Removed the following rules: 8

Accelerated simple loops
Start location: __init
   5: f1_0_main_Load -> f50_0_increase_GE : arg2'=arg2P0, arg1'=arg2, arg3'=arg3P0, (1+arg2 > 0 /\ arg1 > 0), cost: 1
   6: f50_0_increase_GE -> f79_0_increase_LE : arg2'=arg1, arg3'=arg1, 10-arg1 > 0, cost: 1
   7: f79_0_increase_LE -> f50_0_increase_GE : arg2'=arg2P2, arg1'=1+arg1, arg3'=arg3P2, (arg2 == 0 /\ arg3 == 0), cost: 1
   9: f79_0_increase_LE -> [4] : (arg2 > 0 /\ arg2-arg3 >= 0 /\ -arg2+arg3 >= 0 /\ -1+n >= 0), cost: NONTERM
   4: __init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, arg3'=arg3P4, TRUE, cost: 1


Applied chaining
First rule:
f50_0_increase_GE -> f79_0_increase_LE : arg2'=arg1, arg3'=arg1, 10-arg1 > 0, cost: 1
Second rule:
f79_0_increase_LE -> [4] : (arg2 > 0 /\ arg2-arg3 >= 0 /\ -arg2+arg3 >= 0 /\ -1+n >= 0), cost: NONTERM
New rule:
f50_0_increase_GE -> [4] : (10-arg1 > 0 /\ arg1 > 0), cost: NONTERM

Applied deletion
Removed the following rules: 9

Chained accelerated rules with incoming rules
Start location: __init
   5: f1_0_main_Load -> f50_0_increase_GE : arg2'=arg2P0, arg1'=arg2, arg3'=arg3P0, (1+arg2 > 0 /\ arg1 > 0), cost: 1
   6: f50_0_increase_GE -> f79_0_increase_LE : arg2'=arg1, arg3'=arg1, 10-arg1 > 0, cost: 1
  10: f50_0_increase_GE -> [4] : (10-arg1 > 0 /\ arg1 > 0), cost: NONTERM
   7: f79_0_increase_LE -> f50_0_increase_GE : arg2'=arg2P2, arg1'=1+arg1, arg3'=arg3P2, (arg2 == 0 /\ arg3 == 0), cost: 1
   4: __init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, arg3'=arg3P4, TRUE, cost: 1


Eliminating location f1_0_main_Load by chaining:

Applied chaining
First rule:
__init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, arg3'=arg3P4, TRUE, cost: 1
Second rule:
f1_0_main_Load -> f50_0_increase_GE : arg2'=arg2P0, arg1'=arg2, arg3'=arg3P0, (1+arg2 > 0 /\ arg1 > 0), cost: 1
New rule:
__init -> f50_0_increase_GE : arg2'=arg2P0, arg1'=arg2P4, arg3'=arg3P0, (1+arg2P4 > 0 /\ arg1P4 > 0), cost: 2

Applied deletion
Removed the following rules: 4 5

Eliminating location f79_0_increase_LE by chaining:

Applied chaining
First rule:
f50_0_increase_GE -> f79_0_increase_LE : arg2'=arg1, arg3'=arg1, 10-arg1 > 0, cost: 1
Second rule:
f79_0_increase_LE -> f50_0_increase_GE : arg2'=arg2P2, arg1'=1+arg1, arg3'=arg3P2, (arg2 == 0 /\ arg3 == 0), cost: 1
New rule:
f50_0_increase_GE -> f50_0_increase_GE : arg2'=arg2P2, arg1'=1+arg1, arg3'=arg3P2, (10-arg1 > 0 /\ arg1 == 0), cost: 2

Applied simplification
Original rule:
f50_0_increase_GE -> f50_0_increase_GE : arg2'=arg2P2, arg1'=1+arg1, arg3'=arg3P2, (10-arg1 > 0 /\ arg1 == 0), cost: 2
New rule:
f50_0_increase_GE -> f50_0_increase_GE : arg2'=arg2P2, arg1'=1+arg1, arg3'=arg3P2, arg1 == 0, cost: 2

Applied deletion
Removed the following rules: 6 7

Eliminated locations on linear paths
Start location: __init
  10: f50_0_increase_GE -> [4] : (10-arg1 > 0 /\ arg1 > 0), cost: NONTERM
  12: f50_0_increase_GE -> f50_0_increase_GE : arg2'=arg2P2, arg1'=1+arg1, arg3'=arg3P2, arg1 == 0, cost: 2
  11: __init -> f50_0_increase_GE : arg2'=arg2P0, arg1'=arg2P4, arg3'=arg3P0, (1+arg2P4 > 0 /\ arg1P4 > 0), cost: 2


Accelerated simple loops
Start location: __init
  10: f50_0_increase_GE -> [4] : (10-arg1 > 0 /\ arg1 > 0), cost: NONTERM
  12: f50_0_increase_GE -> f50_0_increase_GE : arg2'=arg2P2, arg1'=1+arg1, arg3'=arg3P2, arg1 == 0, cost: 2
  11: __init -> f50_0_increase_GE : arg2'=arg2P0, arg1'=arg2P4, arg3'=arg3P0, (1+arg2P4 > 0 /\ arg1P4 > 0), cost: 2


Applied chaining
First rule:
__init -> f50_0_increase_GE : arg2'=arg2P0, arg1'=arg2P4, arg3'=arg3P0, (1+arg2P4 > 0 /\ arg1P4 > 0), cost: 2
Second rule:
f50_0_increase_GE -> f50_0_increase_GE : arg2'=arg2P2, arg1'=1+arg1, arg3'=arg3P2, arg1 == 0, cost: 2
New rule:
__init -> f50_0_increase_GE : arg2'=arg2P2, arg1'=1, arg3'=arg3P2, 1 > 0, cost: 4

Applied deletion
Removed the following rules: 12

Chained accelerated rules with incoming rules
Start location: __init
  10: f50_0_increase_GE -> [4] : (10-arg1 > 0 /\ arg1 > 0), cost: NONTERM
  11: __init -> f50_0_increase_GE : arg2'=arg2P0, arg1'=arg2P4, arg3'=arg3P0, (1+arg2P4 > 0 /\ arg1P4 > 0), cost: 2
  13: __init -> f50_0_increase_GE : arg2'=arg2P2, arg1'=1, arg3'=arg3P2, 1 > 0, cost: 4


Eliminating location f50_0_increase_GE by chaining:

Applied chaining
First rule:
__init -> f50_0_increase_GE : arg2'=arg2P0, arg1'=arg2P4, arg3'=arg3P0, (1+arg2P4 > 0 /\ arg1P4 > 0), cost: 2
Second rule:
f50_0_increase_GE -> [4] : (10-arg1 > 0 /\ arg1 > 0), cost: NONTERM
New rule:
__init -> [4] : (1+arg2P4 > 0 /\ arg2P4 > 0 /\ 10-arg2P4 > 0 /\ arg1P4 > 0), cost: NONTERM

Applied simplification
Original rule:
__init -> [4] : (1+arg2P4 > 0 /\ arg2P4 > 0 /\ 10-arg2P4 > 0 /\ arg1P4 > 0), cost: NONTERM
New rule:
__init -> [4] : (arg2P4 > 0 /\ 10-arg2P4 > 0 /\ arg1P4 > 0), cost: NONTERM

Applied chaining
First rule:
__init -> f50_0_increase_GE : arg2'=arg2P2, arg1'=1, arg3'=arg3P2, 1 > 0, cost: 4
Second rule:
f50_0_increase_GE -> [4] : (10-arg1 > 0 /\ arg1 > 0), cost: NONTERM
New rule:
__init -> [4] : (1 > 0 /\ 9 > 0), cost: NONTERM

Applied deletion
Removed the following rules: 10 11 13

Eliminated locations on tree-shaped paths
Start location: __init
  14: __init -> [4] : (arg2P4 > 0 /\ 10-arg2P4 > 0 /\ arg1P4 > 0), cost: NONTERM
  15: __init -> [4] : (1 > 0 /\ 9 > 0), cost: NONTERM


Computing asymptotic complexity
Proved nontermination of rule 14 via SMT.

Proved the following lower bound
Complexity:  Nonterm
Cpx degree: Nonterm

Solved cost: NONTERM
Rule cost:   NONTERM
Rule guard:  (arg2P4 > 0 /\ 10-arg2P4 > 0 /\ arg1P4 > 0)
