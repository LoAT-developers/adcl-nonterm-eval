unknown

Initial ITS

Start location: __init
Program variables: arg1 arg2
   0: f171_0_createList_Return -> f231_0_random_ArrayAccess : arg1'=arg1p1, arg2'=arg2p1, arg1 > 0, cost: 1
   4: f231_0_random_ArrayAccess -> f352_0_appE_GT : arg1'=arg1p5, arg2'=arg2p5, (-1+arg1 > 0 /\ arg1p5 > 0), cost: 1
   1: f1_0_main_Load -> f231_0_random_ArrayAccess : arg1'=arg1p2, arg2'=arg2p2, (arg2-arg1p2 == 0 /\ arg1 > 0), cost: 1
   2: f1_0_main_Load -> f197_0_createList_LE : arg1'=arg1p3, arg2'=arg2p3, (1+arg1p3 > 0 /\ arg1 > 0 /\ 1+arg2 > 0), cost: 1
   3: f197_0_createList_LE -> f197_0_createList_LE : arg1'=arg1p4, arg2'=arg2p4, (arg1 > 0 /\ -1-arg1p4+arg1 == 0), cost: 1
   5: f352_0_appE_GT -> f352_0_appE_GT : arg1'=arg1p6, arg2'=arg2p6, (-1-arg1p6+arg1 == 0 /\ arg1 > 0), cost: 1
   6: __init -> f1_0_main_Load : arg1'=arg1p7, arg2'=arg2p7, T, cost: 1

Simplified Transitions

Start location: __init
Program variables: arg1 arg2
   0: f171_0_createList_Return -> f231_0_random_ArrayAccess : arg1'=arg1p1, arg2'=arg2p1, arg1 > 0, cost: 1
   4: f231_0_random_ArrayAccess -> f352_0_appE_GT : arg1'=arg1p5, arg2'=arg2p5, (-1+arg1 > 0 /\ arg1p5 > 0), cost: 1
   2: f1_0_main_Load -> f197_0_createList_LE : arg1'=arg1p3, arg2'=arg2p3, (1+arg1p3 > 0 /\ arg1 > 0 /\ 1+arg2 > 0), cost: 1
   7: f1_0_main_Load -> f231_0_random_ArrayAccess : arg1'=arg2, arg2'=arg2p2, arg1 > 0, cost: 1
   8: f197_0_createList_LE -> f197_0_createList_LE : arg1'=-1+arg1, arg2'=arg2p4, arg1 > 0, cost: 1
   9: f352_0_appE_GT -> f352_0_appE_GT : arg1'=-1+arg1, arg2'=arg2p6, arg1 > 0, cost: 1
   6: __init -> f1_0_main_Load : arg1'=arg1p7, arg2'=arg2p7, T, cost: 1

	Propagated Equalities

	Original rule:
	f1_0_main_Load -> f231_0_random_ArrayAccess : arg1'=arg1p2, arg2'=arg2p2, (arg2-arg1p2 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f231_0_random_ArrayAccess : arg1'=arg2, arg2'=arg2p2, (0 == 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg1p2 = arg2
		
	Simplified Guard

	Original rule:
	f1_0_main_Load -> f231_0_random_ArrayAccess : arg1'=arg2, arg2'=arg2p2, (0 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f231_0_random_ArrayAccess : arg1'=arg2, arg2'=arg2p2, arg1 > 0, cost: 1
	
	Propagated Equalities

	Original rule:
	f197_0_createList_LE -> f197_0_createList_LE : arg1'=arg1p4, arg2'=arg2p4, (arg1 > 0 /\ -1-arg1p4+arg1 == 0), cost: 1
	New rule:
	f197_0_createList_LE -> f197_0_createList_LE : arg1'=-1+arg1, arg2'=arg2p4, (0 == 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg1p4 = -1+arg1
		
	Simplified Guard

	Original rule:
	f197_0_createList_LE -> f197_0_createList_LE : arg1'=-1+arg1, arg2'=arg2p4, (0 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f197_0_createList_LE -> f197_0_createList_LE : arg1'=-1+arg1, arg2'=arg2p4, arg1 > 0, cost: 1
	
	Propagated Equalities

	Original rule:
	f352_0_appE_GT -> f352_0_appE_GT : arg1'=arg1p6, arg2'=arg2p6, (-1-arg1p6+arg1 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f352_0_appE_GT -> f352_0_appE_GT : arg1'=-1+arg1, arg2'=arg2p6, (0 == 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg1p6 = -1+arg1
		
	Simplified Guard

	Original rule:
	f352_0_appE_GT -> f352_0_appE_GT : arg1'=-1+arg1, arg2'=arg2p6, (0 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f352_0_appE_GT -> f352_0_appE_GT : arg1'=-1+arg1, arg2'=arg2p6, arg1 > 0, cost: 1

Step with 6

	Trace

	6[T]
	
	Blocked

	[{}, {}]

Step with 2

	Trace

	6[T], 2[(1+arg1p3 > 0 /\ arg1 > 0 /\ 1+arg2 > 0)]
	
	Blocked

	[{}, {}, {}]

Step with 8

	Trace

	6[T], 2[(1+arg1p3 > 0 /\ arg1 > 0 /\ 1+arg2 > 0)], 8[(arg1 > 0)]
	
	Blocked

	[{}, {}, {}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2
   0: f171_0_createList_Return -> f231_0_random_ArrayAccess : arg1'=arg1p1, arg2'=arg2p1, arg1 > 0, cost: 1
   4: f231_0_random_ArrayAccess -> f352_0_appE_GT : arg1'=arg1p5, arg2'=arg2p5, (-1+arg1 > 0 /\ arg1p5 > 0), cost: 1
   2: f1_0_main_Load -> f197_0_createList_LE : arg1'=arg1p3, arg2'=arg2p3, (1+arg1p3 > 0 /\ arg1 > 0 /\ 1+arg2 > 0), cost: 1
   7: f1_0_main_Load -> f231_0_random_ArrayAccess : arg1'=arg2, arg2'=arg2p2, arg1 > 0, cost: 1
   8: f197_0_createList_LE -> f197_0_createList_LE : arg1'=-1+arg1, arg2'=arg2p4, arg1 > 0, cost: 1
  10: f197_0_createList_LE -> f197_0_createList_LE : arg1'=-n+arg1, arg2'=arg2p4, (-1+n >= 0 /\ 1-n+arg1 > 0), cost: 1
   9: f352_0_appE_GT -> f352_0_appE_GT : arg1'=-1+arg1, arg2'=arg2p6, arg1 > 0, cost: 1
   6: __init -> f1_0_main_Load : arg1'=arg1p7, arg2'=arg2p7, T, cost: 1

	Loop Acceleration

	Original rule:
	f197_0_createList_LE -> f197_0_createList_LE : arg1'=-1+arg1, arg2'=arg2p4, (arg1 > 0), cost: 1
	New rule:
	f197_0_createList_LE -> f197_0_createList_LE : arg1'=-n+arg1, arg2'=arg2p4, (-1+n >= 0 /\ 1-n+arg1 > 0), cost: 1

		arg1 > 0 [0]: montonic decrease yields 1-n+arg1 > 0
		
		arg1 > 0 [1]: eventual increase yields (1 <= 0 /\ arg1 > 0)
		
		Replacement map: {arg1 > 0 -> 1-n+arg1 > 0}

	Trace

	6[T], 2[(1+arg1p3 > 0 /\ arg1 > 0 /\ 1+arg2 > 0)], 10[(-1+n >= 0 /\ 1-n+arg1 > 0)]
	
	Blocked

	[{}, {}, {}, {8[T], 10[T]}]

Backtrack

	Trace

	6[T], 2[(1+arg1p3 > 0 /\ arg1 > 0 /\ 1+arg2 > 0)]
	
	Blocked

	[{}, {}, {10[T]}]

Step with 8

	Trace

	6[T], 2[(1+arg1p3 > 0 /\ arg1 > 0 /\ 1+arg2 > 0)], 8[(arg1 > 0)]
	
	Blocked

	[{}, {}, {10[T]}, {}]

Covered

	Trace

	6[T], 2[(1+arg1p3 > 0 /\ arg1 > 0 /\ 1+arg2 > 0)]
	
	Blocked

	[{}, {}, {8[T], 10[T]}]

Backtrack

	Trace

	6[T]
	
	Blocked

	[{}, {2[T]}]

Step with 7

	Trace

	6[T], 7[(arg1 > 0)]
	
	Blocked

	[{}, {2[T]}, {}]

Step with 4

	Trace

	6[T], 7[(arg1 > 0)], 4[(-1+arg1 > 0 /\ arg1p5 > 0)]
	
	Blocked

	[{}, {2[T]}, {}, {}]

Step with 9

	Trace

	6[T], 7[(arg1 > 0)], 4[(-1+arg1 > 0 /\ arg1p5 > 0)], 9[(arg1 > 0)]
	
	Blocked

	[{}, {2[T]}, {}, {}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2
   0: f171_0_createList_Return -> f231_0_random_ArrayAccess : arg1'=arg1p1, arg2'=arg2p1, arg1 > 0, cost: 1
   4: f231_0_random_ArrayAccess -> f352_0_appE_GT : arg1'=arg1p5, arg2'=arg2p5, (-1+arg1 > 0 /\ arg1p5 > 0), cost: 1
   2: f1_0_main_Load -> f197_0_createList_LE : arg1'=arg1p3, arg2'=arg2p3, (1+arg1p3 > 0 /\ arg1 > 0 /\ 1+arg2 > 0), cost: 1
   7: f1_0_main_Load -> f231_0_random_ArrayAccess : arg1'=arg2, arg2'=arg2p2, arg1 > 0, cost: 1
   8: f197_0_createList_LE -> f197_0_createList_LE : arg1'=-1+arg1, arg2'=arg2p4, arg1 > 0, cost: 1
  10: f197_0_createList_LE -> f197_0_createList_LE : arg1'=-n+arg1, arg2'=arg2p4, (-1+n >= 0 /\ 1-n+arg1 > 0), cost: 1
   9: f352_0_appE_GT -> f352_0_appE_GT : arg1'=-1+arg1, arg2'=arg2p6, arg1 > 0, cost: 1
  11: f352_0_appE_GT -> f352_0_appE_GT : arg1'=-n2+arg1, arg2'=arg2p6, (-1+n2 >= 0 /\ 1-n2+arg1 > 0), cost: 1
   6: __init -> f1_0_main_Load : arg1'=arg1p7, arg2'=arg2p7, T, cost: 1

	Loop Acceleration

	Original rule:
	f352_0_appE_GT -> f352_0_appE_GT : arg1'=-1+arg1, arg2'=arg2p6, (arg1 > 0), cost: 1
	New rule:
	f352_0_appE_GT -> f352_0_appE_GT : arg1'=-n2+arg1, arg2'=arg2p6, (-1+n2 >= 0 /\ 1-n2+arg1 > 0), cost: 1

		arg1 > 0 [0]: montonic decrease yields 1-n2+arg1 > 0
		
		arg1 > 0 [1]: eventual increase yields (1 <= 0 /\ arg1 > 0)
		
		Replacement map: {arg1 > 0 -> 1-n2+arg1 > 0}

	Trace

	6[T], 7[(arg1 > 0)], 4[(-1+arg1 > 0 /\ arg1p5 > 0)], 11[(-1+n2 >= 0 /\ 1-n2+arg1 > 0)]
	
	Blocked

	[{}, {2[T]}, {}, {}, {9[T], 11[T]}]

Backtrack

	Trace

	6[T], 7[(arg1 > 0)], 4[(-1+arg1 > 0 /\ arg1p5 > 0)]
	
	Blocked

	[{}, {2[T]}, {}, {11[T]}]

Step with 9

	Trace

	6[T], 7[(arg1 > 0)], 4[(-1+arg1 > 0 /\ arg1p5 > 0)], 9[(arg1 > 0)]
	
	Blocked

	[{}, {2[T]}, {}, {11[T]}, {}]

Covered

	Trace

	6[T], 7[(arg1 > 0)], 4[(-1+arg1 > 0 /\ arg1p5 > 0)]
	
	Blocked

	[{}, {2[T]}, {}, {9[T], 11[T]}]

Backtrack

	Trace

	6[T], 7[(arg1 > 0)]
	
	Blocked

	[{}, {2[T]}, {4[T]}]

Backtrack

	Trace

	6[T]
	
	Blocked

	[{}, {2[T], 7[T]}]

Backtrack

	Trace

	Blocked

	[{6[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
