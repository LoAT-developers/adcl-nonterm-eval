NO

Initial ITS

Start location: l5
Program variables: x^0 y^0
   0: l0 -> l1 : x^0'=x^post1, y^0'=y^post1, (y^0-y^post1 == 0 /\ -x^post1+x^0 == 0), cost: 1
   1: l1 -> l3 : x^0'=x^post2, y^0'=y^post2, (-y^post2+y^0 == 0 /\ 1-x^0 <= 0 /\ x^0-x^post2 == 0), cost: 1
   2: l3 -> l4 : x^0'=x^post3, y^0'=y^post3, (1+y^0 <= 0 /\ -x^post3+x^0 == 0 /\ y^0-y^post3 == 0), cost: 1
   3: l3 -> l4 : x^0'=x^post4, y^0'=y^post4, (-x^post4+x^0 == 0 /\ y^0-y^post4 == 0 /\ 1-y^0 <= 0), cost: 1
   4: l4 -> l2 : x^0'=x^post5, y^0'=y^post5, (-y^0-x^0+x^post5 == 0 /\ -y^post5+y^0 == 0), cost: 1
   5: l2 -> l1 : x^0'=x^post6, y^0'=y^post6, (y^0-y^post6 == 0 /\ -x^post6+x^0 == 0), cost: 1
   6: l5 -> l0 : x^0'=x^post7, y^0'=y^post7, (-x^post7+x^0 == 0 /\ y^0-y^post7 == 0), cost: 1

Chained Linear Paths

Start location: l5
Program variables: x^0 y^0
   1: l1 -> l3 : x^0'=x^post2, y^0'=y^post2, (-y^post2+y^0 == 0 /\ 1-x^0 <= 0 /\ x^0-x^post2 == 0), cost: 1
   2: l3 -> l4 : x^0'=x^post3, y^0'=y^post3, (1+y^0 <= 0 /\ -x^post3+x^0 == 0 /\ y^0-y^post3 == 0), cost: 1
   3: l3 -> l4 : x^0'=x^post4, y^0'=y^post4, (-x^post4+x^0 == 0 /\ y^0-y^post4 == 0 /\ 1-y^0 <= 0), cost: 1
   8: l4 -> l1 : x^0'=x^post6, y^0'=y^post6, (-x^post6+x^post5 == 0 /\ y^post5-y^post6 == 0 /\ -y^0-x^0+x^post5 == 0 /\ -y^post5+y^0 == 0), cost: 1
   7: l5 -> l1 : x^0'=x^post1, y^0'=y^post1, (y^post7-y^post1 == 0 /\ x^post7-x^post1 == 0 /\ -x^post7+x^0 == 0 /\ y^0-y^post7 == 0), cost: 1

	Eliminating location l0 by chaining:

	Applied chaining

	First rule:
	l5 -> l0 : x^0'=x^post7, y^0'=y^post7, (-x^post7+x^0 == 0 /\ y^0-y^post7 == 0), cost: 1
	Second rule:
	l0 -> l1 : x^0'=x^post1, y^0'=y^post1, (y^0-y^post1 == 0 /\ -x^post1+x^0 == 0), cost: 1
	New rule:
	l5 -> l1 : x^0'=x^post1, y^0'=y^post1, (y^post7-y^post1 == 0 /\ x^post7-x^post1 == 0 /\ -x^post7+x^0 == 0 /\ y^0-y^post7 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 6
	
	Eliminating location l2 by chaining:

	Applied chaining

	First rule:
	l4 -> l2 : x^0'=x^post5, y^0'=y^post5, (-y^0-x^0+x^post5 == 0 /\ -y^post5+y^0 == 0), cost: 1
	Second rule:
	l2 -> l1 : x^0'=x^post6, y^0'=y^post6, (y^0-y^post6 == 0 /\ -x^post6+x^0 == 0), cost: 1
	New rule:
	l4 -> l1 : x^0'=x^post6, y^0'=y^post6, (-x^post6+x^post5 == 0 /\ y^post5-y^post6 == 0 /\ -y^0-x^0+x^post5 == 0 /\ -y^post5+y^0 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 4 5

Simplified Transitions

Start location: l5
Program variables: x^0 y^0
   9: l1 -> l3 : 1-x^0 <= 0, cost: 1
  10: l3 -> l4 : 1+y^0 <= 0, cost: 1
  11: l3 -> l4 : 1-y^0 <= 0, cost: 1
  13: l4 -> l1 : x^0'=y^0+x^0, T, cost: 1
  12: l5 -> l1 : T, cost: 1

	Propagated Equalities

	Original rule:
	l1 -> l3 : x^0'=x^post2, y^0'=y^post2, (-y^post2+y^0 == 0 /\ 1-x^0 <= 0 /\ x^0-x^post2 == 0), cost: 1
	New rule:
	l1 -> l3 : x^0'=x^0, y^0'=y^0, (0 == 0 /\ 1-x^0 <= 0), cost: 1
	
		propagated equality y^post2 = y^0
		
		propagated equality x^post2 = x^0
		
	Simplified Guard

	Original rule:
	l1 -> l3 : x^0'=x^0, y^0'=y^0, (0 == 0 /\ 1-x^0 <= 0), cost: 1
	New rule:
	l1 -> l3 : x^0'=x^0, y^0'=y^0, 1-x^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l1 -> l3 : x^0'=x^0, y^0'=y^0, 1-x^0 <= 0, cost: 1
	New rule:
	l1 -> l3 : 1-x^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l3 -> l4 : x^0'=x^post3, y^0'=y^post3, (1+y^0 <= 0 /\ -x^post3+x^0 == 0 /\ y^0-y^post3 == 0), cost: 1
	New rule:
	l3 -> l4 : x^0'=x^0, y^0'=y^0, (0 == 0 /\ 1+y^0 <= 0), cost: 1
	
		propagated equality x^post3 = x^0
		
		propagated equality y^post3 = y^0
		
	Simplified Guard

	Original rule:
	l3 -> l4 : x^0'=x^0, y^0'=y^0, (0 == 0 /\ 1+y^0 <= 0), cost: 1
	New rule:
	l3 -> l4 : x^0'=x^0, y^0'=y^0, 1+y^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l3 -> l4 : x^0'=x^0, y^0'=y^0, 1+y^0 <= 0, cost: 1
	New rule:
	l3 -> l4 : 1+y^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l3 -> l4 : x^0'=x^post4, y^0'=y^post4, (-x^post4+x^0 == 0 /\ y^0-y^post4 == 0 /\ 1-y^0 <= 0), cost: 1
	New rule:
	l3 -> l4 : x^0'=x^0, y^0'=y^0, (0 == 0 /\ 1-y^0 <= 0), cost: 1
	
		propagated equality x^post4 = x^0
		
		propagated equality y^post4 = y^0
		
	Simplified Guard

	Original rule:
	l3 -> l4 : x^0'=x^0, y^0'=y^0, (0 == 0 /\ 1-y^0 <= 0), cost: 1
	New rule:
	l3 -> l4 : x^0'=x^0, y^0'=y^0, 1-y^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l3 -> l4 : x^0'=x^0, y^0'=y^0, 1-y^0 <= 0, cost: 1
	New rule:
	l3 -> l4 : 1-y^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l5 -> l1 : x^0'=x^post1, y^0'=y^post1, (y^post7-y^post1 == 0 /\ x^post7-x^post1 == 0 /\ -x^post7+x^0 == 0 /\ y^0-y^post7 == 0), cost: 1
	New rule:
	l5 -> l1 : x^0'=x^post7, y^0'=y^post7, (0 == 0 /\ -x^post7+x^0 == 0 /\ y^0-y^post7 == 0), cost: 1
	
		propagated equality y^post1 = y^post7
		
		propagated equality x^post1 = x^post7
		
	Propagated Equalities

	Original rule:
	l5 -> l1 : x^0'=x^post7, y^0'=y^post7, (0 == 0 /\ -x^post7+x^0 == 0 /\ y^0-y^post7 == 0), cost: 1
	New rule:
	l5 -> l1 : x^0'=x^0, y^0'=y^0, 0 == 0, cost: 1
	
		propagated equality x^post7 = x^0
		
		propagated equality y^post7 = y^0
		
	Simplified Guard

	Original rule:
	l5 -> l1 : x^0'=x^0, y^0'=y^0, 0 == 0, cost: 1
	New rule:
	l5 -> l1 : x^0'=x^0, y^0'=y^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l5 -> l1 : x^0'=x^0, y^0'=y^0, T, cost: 1
	New rule:
	l5 -> l1 : T, cost: 1
	
	Propagated Equalities

	Original rule:
	l4 -> l1 : x^0'=x^post6, y^0'=y^post6, (-x^post6+x^post5 == 0 /\ y^post5-y^post6 == 0 /\ -y^0-x^0+x^post5 == 0 /\ -y^post5+y^0 == 0), cost: 1
	New rule:
	l4 -> l1 : x^0'=x^post5, y^0'=y^post5, (0 == 0 /\ -y^0-x^0+x^post5 == 0 /\ -y^post5+y^0 == 0), cost: 1
	
		propagated equality x^post6 = x^post5
		
		propagated equality y^post6 = y^post5
		
	Propagated Equalities

	Original rule:
	l4 -> l1 : x^0'=x^post5, y^0'=y^post5, (0 == 0 /\ -y^0-x^0+x^post5 == 0 /\ -y^post5+y^0 == 0), cost: 1
	New rule:
	l4 -> l1 : x^0'=y^0+x^0, y^0'=y^0, 0 == 0, cost: 1
	
		propagated equality x^post5 = y^0+x^0
		
		propagated equality y^post5 = y^0
		
	Simplified Guard

	Original rule:
	l4 -> l1 : x^0'=y^0+x^0, y^0'=y^0, 0 == 0, cost: 1
	New rule:
	l4 -> l1 : x^0'=y^0+x^0, y^0'=y^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l4 -> l1 : x^0'=y^0+x^0, y^0'=y^0, T, cost: 1
	New rule:
	l4 -> l1 : x^0'=y^0+x^0, T, cost: 1

Step with 12

	Trace

	12[T]
	
	Blocked

	[{}, {}]

Step with 9

	Trace

	12[T], 9[(1-x^0 <= 0)]
	
	Blocked

	[{}, {}, {}]

Step with 10

	Trace

	12[T], 9[(1-x^0 <= 0)], 10[(1+y^0 <= 0)]
	
	Blocked

	[{}, {}, {}, {}]

Step with 13

	Trace

	12[T], 9[(1-x^0 <= 0)], 10[(1+y^0 <= 0)], 13[T]
	
	Blocked

	[{}, {}, {}, {}, {}]

Accelerate

Start location: l5
Program variables: x^0 y^0
   9: l1 -> l3 : 1-x^0 <= 0, cost: 1
  14: l1 -> l1 : x^0'=n*y^0+x^0, (-1+n >= 0 /\ -1+x^0+(-1+n)*y^0 >= 0 /\ -1-y^0 >= 0), cost: 1
  10: l3 -> l4 : 1+y^0 <= 0, cost: 1
  11: l3 -> l4 : 1-y^0 <= 0, cost: 1
  13: l4 -> l1 : x^0'=y^0+x^0, T, cost: 1
  12: l5 -> l1 : T, cost: 1

	Loop Acceleration

	Original rule:
	l1 -> l1 : x^0'=y^0+x^0, (1-x^0 <= 0 /\ 1+y^0 <= 0), cost: 1
	New rule:
	l1 -> l1 : x^0'=n*y^0+x^0, (-1+n >= 0 /\ -1+x^0+(-1+n)*y^0 >= 0 /\ -1-y^0 >= 0), cost: 1

		-1+x^0 >= 0 [0]: montonic decrease yields -1+x^0+(-1+n)*y^0 >= 0, dependencies: -1-y^0 >= 0
		
		-1+x^0 >= 0 [1]: eventual decrease yields (-1+x^0+(-1+n)*y^0 >= 0 /\ -1+x^0 >= 0), dependencies: -1-y^0 >= 0
		
		-1+x^0 >= 0 [2]: eventual increase yields (-1+x^0 >= 0 /\ -y^0 <= 0), dependencies: -1-y^0 >= 0
		
		-1-y^0 >= 0 [0]: monotonic increase yields -1-y^0 >= 0
		
		Replacement map: {-1+x^0 >= 0 -> -1+x^0+(-1+n)*y^0 >= 0, -1-y^0 >= 0 -> -1-y^0 >= 0}

	Trace

	12[T], 14[(-1+n >= 0 /\ -1+x^0+(-1+n)*y^0 >= 0 /\ -1-y^0 >= 0)]
	
	Blocked

	[{}, {}, {14[T]}]

Step with 9

	Trace

	12[T], 14[(-1+n >= 0 /\ -1+x^0+(-1+n)*y^0 >= 0 /\ -1-y^0 >= 0)], 9[(1-x^0 <= 0)]
	
	Blocked

	[{}, {}, {14[T]}, {}]

Step with 10

	Trace

	12[T], 14[(-1+n >= 0 /\ -1+x^0+(-1+n)*y^0 >= 0 /\ -1-y^0 >= 0)], 9[(1-x^0 <= 0)], 10[(1+y^0 <= 0)]
	
	Blocked

	[{}, {}, {14[T]}, {}, {}]

Step with 13

	Trace

	12[T], 14[(-1+n >= 0 /\ -1+x^0+(-1+n)*y^0 >= 0 /\ -1-y^0 >= 0)], 9[(1-x^0 <= 0)], 10[(1+y^0 <= 0)], 13[T]
	
	Blocked

	[{}, {}, {14[T]}, {}, {}, {}]

Covered

	Trace

	12[T], 14[(-1+n >= 0 /\ -1+x^0+(-1+n)*y^0 >= 0 /\ -1-y^0 >= 0)], 9[(1-x^0 <= 0)], 10[(1+y^0 <= 0)]
	
	Blocked

	[{}, {}, {14[T]}, {}, {13[T]}]

Backtrack

	Trace

	12[T], 14[(-1+n >= 0 /\ -1+x^0+(-1+n)*y^0 >= 0 /\ -1-y^0 >= 0)], 9[(1-x^0 <= 0)]
	
	Blocked

	[{}, {}, {14[T]}, {10[T]}]

Backtrack

	Trace

	12[T], 14[(-1+n >= 0 /\ -1+x^0+(-1+n)*y^0 >= 0 /\ -1-y^0 >= 0)]
	
	Blocked

	[{}, {}, {9[T], 14[T]}]

Backtrack

	Trace

	12[T]
	
	Blocked

	[{}, {14[T]}]

Step with 9

	Trace

	12[T], 9[(1-x^0 <= 0)]
	
	Blocked

	[{}, {14[T]}, {}]

Step with 10

	Trace

	12[T], 9[(1-x^0 <= 0)], 10[(1+y^0 <= 0)]
	
	Blocked

	[{}, {14[T]}, {}, {}]

Step with 13

	Trace

	12[T], 9[(1-x^0 <= 0)], 10[(1+y^0 <= 0)], 13[T]
	
	Blocked

	[{}, {14[T]}, {}, {}, {}]

Covered

	Trace

	12[T], 9[(1-x^0 <= 0)], 10[(1+y^0 <= 0)]
	
	Blocked

	[{}, {14[T]}, {}, {13[T]}]

Backtrack

	Trace

	12[T], 9[(1-x^0 <= 0)]
	
	Blocked

	[{}, {14[T]}, {10[T]}]

Step with 11

	Trace

	12[T], 9[(1-x^0 <= 0)], 11[(1-y^0 <= 0)]
	
	Blocked

	[{}, {14[T]}, {10[T]}, {}]

Step with 13

	Trace

	12[T], 9[(1-x^0 <= 0)], 11[(1-y^0 <= 0)], 13[T]
	
	Blocked

	[{}, {14[T]}, {10[T]}, {}, {}]

Nonterm

Start location: l5
Program variables: x^0 y^0
   9: l1 -> l3 : 1-x^0 <= 0, cost: 1
  14: l1 -> l1 : x^0'=n*y^0+x^0, (-1+n >= 0 /\ -1+x^0+(-1+n)*y^0 >= 0 /\ -1-y^0 >= 0), cost: 1
  15: l1 -> LoAT_sink : (-1+x^0 >= 0 /\ -1+y^0 >= 0 /\ -1+n2 >= 0), cost: NONTERM
  16: l1 -> l1 : x^0'=y^0*n2+x^0, (-1+x^0 >= 0 /\ -1+y^0 >= 0 /\ -1+n2 >= 0), cost: 1
  10: l3 -> l4 : 1+y^0 <= 0, cost: 1
  11: l3 -> l4 : 1-y^0 <= 0, cost: 1
  13: l4 -> l1 : x^0'=y^0+x^0, T, cost: 1
  12: l5 -> l1 : T, cost: 1

	Certificate of Non-Termination

	Original rule:
	l1 -> l1 : x^0'=y^0+x^0, (1-x^0 <= 0 /\ 1-y^0 <= 0), cost: 1
	New rule:
	l1 -> LoAT_sink : (-1+x^0 >= 0 /\ -1+y^0 >= 0 /\ -1+n2 >= 0), cost: NONTERM

		-1+x^0 >= 0 [0]: monotonic increase yields -1+x^0 >= 0, dependencies: -1+y^0 >= 0
		
		-1+x^0 >= 0 [1]: eventual decrease yields (-1+x^0 >= 0 /\ -1+x^0+y^0*(-1+n2) >= 0), dependencies: -1+y^0 >= 0
		
		-1+x^0 >= 0 [2]: eventual increase yields (-1+x^0 >= 0 /\ -y^0 <= 0), dependencies: -1+y^0 >= 0
		
		-1+y^0 >= 0 [0]: monotonic increase yields -1+y^0 >= 0
		
		Replacement map: {-1+x^0 >= 0 -> -1+x^0 >= 0, -1+y^0 >= 0 -> -1+y^0 >= 0}

	Loop Acceleration

	Original rule:
	l1 -> l1 : x^0'=y^0+x^0, (1-x^0 <= 0 /\ 1-y^0 <= 0), cost: 1
	New rule:
	l1 -> l1 : x^0'=y^0*n2+x^0, (-1+x^0 >= 0 /\ -1+y^0 >= 0 /\ -1+n2 >= 0), cost: 1

		-1+x^0 >= 0 [0]: monotonic increase yields -1+x^0 >= 0, dependencies: -1+y^0 >= 0
		
		-1+x^0 >= 0 [1]: eventual decrease yields (-1+x^0 >= 0 /\ -1+x^0+y^0*(-1+n2) >= 0), dependencies: -1+y^0 >= 0
		
		-1+x^0 >= 0 [2]: eventual increase yields (-1+x^0 >= 0 /\ -y^0 <= 0), dependencies: -1+y^0 >= 0
		
		-1+y^0 >= 0 [0]: monotonic increase yields -1+y^0 >= 0
		
		Replacement map: {-1+x^0 >= 0 -> -1+x^0 >= 0, -1+y^0 >= 0 -> -1+y^0 >= 0}

Step with 15

	Trace

	12[T], 15[(-1+x^0 >= 0 /\ -1+y^0 >= 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {14[T]}, {15[T]}]

Refute

	Counterexample

	[ x^0=2 y^0=1 ] 12 [ x^0=2 y^0=1 ] 15
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
