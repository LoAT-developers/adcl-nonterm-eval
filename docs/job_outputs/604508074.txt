unknown

Initial ITS

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5
   0: f1_0_main_Load -> f293_0_loop_LT : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, arg5'=arg5p1, (-arg1p1 == 0 /\ -arg4p1 == 0 /\ -arg3p1 == 0 /\ arg1 > 0 /\ -arg2p1 == 0 /\ -arg5p1 == 0 /\ -arg2 == 0), cost: 1
   1: f1_0_main_Load -> f293_0_loop_LT : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, arg4'=arg4p2, arg5'=arg5p2, (-arg2p2 == 0 /\ 1-arg4p2 == 0 /\ arg1 > 0 /\ -arg3p2 == 0 /\ 1+arg1p2 > 0 /\ 1-arg5p2 == 0 /\ 1-arg2 == 0), cost: 1
   2: f1_0_main_Load -> f293_0_loop_LT : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, arg4'=arg4p3, arg5'=arg5p3, (1+arg3p3 > 0 /\ 2-arg4p3 == 0 /\ -arg2p3 == 0 /\ 1+arg1p3 > 0 /\ 2-arg5p3 == 0 /\ 2-arg2 == 0 /\ arg1 > 0), cost: 1
   3: f1_0_main_Load -> f293_0_loop_LT : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, arg4'=arg4p4, arg5'=arg5p4, (-2+arg2 > 0 /\ 1+arg2p4 > 0 /\ -arg4p4+arg2 == 0 /\ 1+x10 > 0 /\ -arg2p4-arg3p4+x10 == 0 /\ 1+arg1p4 > 0 /\ arg1 > 0 /\ 3-arg5p4 == 0), cost: 1
   4: f293_0_loop_LT -> f293_0_loop_LT : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, arg4'=arg4p5, arg5'=arg5p5, (arg4-arg4p5 == 0 /\ 1 > 0 /\ arg5-arg5p5 == 0 /\ arg1-arg2 == 0 /\ -arg4+arg5 >= 0 /\ 1-arg1p5+arg1 == 0 /\ 1+arg1-arg2p5 == 0 /\ 9-arg3p5-arg1 == 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ arg3 > 0), cost: 1
   5: f293_0_loop_LT -> f293_0_loop_LT : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, arg4'=arg4p6, arg5'=arg5p6, (9-arg3p6-x19-arg1 == 0 /\ 1+arg5 > 0 /\ arg1-arg2 == 0 /\ -arg4+arg5 < 0 /\ arg4-arg4p6 == 0 /\ 1+x19+arg1-arg2p6 == 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ x19+arg1 >= 0 /\ arg3 > 0 /\ 1+x19-arg1p6+arg1 == 0 /\ 1+arg5-arg5p6 == 0 /\ 1+x19 > 0), cost: 1
   6: __init -> f1_0_main_Load : arg1'=arg1p7, arg2'=arg2p7, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, T, cost: 1

Simplified Transitions

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5
   7: f1_0_main_Load -> f293_0_loop_LT : arg1'=0, arg2'=0, arg3'=0, arg4'=0, arg5'=0, (arg1 > 0 /\ -arg2 == 0), cost: 1
   8: f1_0_main_Load -> f293_0_loop_LT : arg1'=arg1p2, arg2'=0, arg3'=0, arg4'=1, arg5'=1, (arg1 > 0 /\ 1+arg1p2 > 0 /\ 1-arg2 == 0), cost: 1
   9: f1_0_main_Load -> f293_0_loop_LT : arg1'=arg1p3, arg2'=0, arg3'=arg3p3, arg4'=2, arg5'=2, (1+arg3p3 > 0 /\ 1+arg1p3 > 0 /\ 2-arg2 == 0 /\ arg1 > 0), cost: 1
  10: f1_0_main_Load -> f293_0_loop_LT : arg1'=arg1p4, arg2'=-arg3p4+x10, arg3'=arg3p4, arg4'=arg2, arg5'=3, (-2+arg2 > 0 /\ 1-arg3p4+x10 > 0 /\ 1+x10 > 0 /\ 1+arg1p4 > 0 /\ arg1 > 0), cost: 1
  11: f293_0_loop_LT -> f293_0_loop_LT : arg1'=1+arg1, arg2'=1+arg1, arg3'=9-arg1, (arg1-arg2 == 0 /\ -arg4+arg5 >= 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ arg3 > 0), cost: 1
  12: f293_0_loop_LT -> f293_0_loop_LT : arg1'=1+x19+arg1, arg2'=1+x19+arg1, arg3'=9-x19-arg1, arg5'=1+arg5, (1+arg5 > 0 /\ arg1-arg2 == 0 /\ -arg4+arg5 < 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ x19+arg1 >= 0 /\ arg3 > 0 /\ 1+x19 > 0), cost: 1
   6: __init -> f1_0_main_Load : arg1'=arg1p7, arg2'=arg2p7, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, T, cost: 1

	Propagated Equalities

	Original rule:
	f1_0_main_Load -> f293_0_loop_LT : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, arg5'=arg5p1, (-arg1p1 == 0 /\ -arg4p1 == 0 /\ -arg3p1 == 0 /\ arg1 > 0 /\ -arg2p1 == 0 /\ -arg5p1 == 0 /\ -arg2 == 0), cost: 1
	New rule:
	f1_0_main_Load -> f293_0_loop_LT : arg1'=0, arg2'=0, arg3'=0, arg4'=0, arg5'=0, (0 == 0 /\ arg1 > 0 /\ -arg2 == 0), cost: 1
	
		propagated equality arg1p1 = 0
		
		propagated equality arg4p1 = 0
		
		propagated equality arg3p1 = 0
		
		propagated equality arg2p1 = 0
		
		propagated equality arg5p1 = 0
		
	Simplified Guard

	Original rule:
	f1_0_main_Load -> f293_0_loop_LT : arg1'=0, arg2'=0, arg3'=0, arg4'=0, arg5'=0, (0 == 0 /\ arg1 > 0 /\ -arg2 == 0), cost: 1
	New rule:
	f1_0_main_Load -> f293_0_loop_LT : arg1'=0, arg2'=0, arg3'=0, arg4'=0, arg5'=0, (arg1 > 0 /\ -arg2 == 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f1_0_main_Load -> f293_0_loop_LT : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, arg4'=arg4p2, arg5'=arg5p2, (-arg2p2 == 0 /\ 1-arg4p2 == 0 /\ arg1 > 0 /\ -arg3p2 == 0 /\ 1+arg1p2 > 0 /\ 1-arg5p2 == 0 /\ 1-arg2 == 0), cost: 1
	New rule:
	f1_0_main_Load -> f293_0_loop_LT : arg1'=arg1p2, arg2'=0, arg3'=0, arg4'=1, arg5'=1, (0 == 0 /\ arg1 > 0 /\ 1+arg1p2 > 0 /\ 1-arg2 == 0), cost: 1
	
		propagated equality arg2p2 = 0
		
		propagated equality arg4p2 = 1
		
		propagated equality arg3p2 = 0
		
		propagated equality arg5p2 = 1
		
	Simplified Guard

	Original rule:
	f1_0_main_Load -> f293_0_loop_LT : arg1'=arg1p2, arg2'=0, arg3'=0, arg4'=1, arg5'=1, (0 == 0 /\ arg1 > 0 /\ 1+arg1p2 > 0 /\ 1-arg2 == 0), cost: 1
	New rule:
	f1_0_main_Load -> f293_0_loop_LT : arg1'=arg1p2, arg2'=0, arg3'=0, arg4'=1, arg5'=1, (arg1 > 0 /\ 1+arg1p2 > 0 /\ 1-arg2 == 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f1_0_main_Load -> f293_0_loop_LT : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, arg4'=arg4p3, arg5'=arg5p3, (1+arg3p3 > 0 /\ 2-arg4p3 == 0 /\ -arg2p3 == 0 /\ 1+arg1p3 > 0 /\ 2-arg5p3 == 0 /\ 2-arg2 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f293_0_loop_LT : arg1'=arg1p3, arg2'=0, arg3'=arg3p3, arg4'=2, arg5'=2, (0 == 0 /\ 1+arg3p3 > 0 /\ 1+arg1p3 > 0 /\ 2-arg2 == 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg4p3 = 2
		
		propagated equality arg2p3 = 0
		
		propagated equality arg5p3 = 2
		
	Simplified Guard

	Original rule:
	f1_0_main_Load -> f293_0_loop_LT : arg1'=arg1p3, arg2'=0, arg3'=arg3p3, arg4'=2, arg5'=2, (0 == 0 /\ 1+arg3p3 > 0 /\ 1+arg1p3 > 0 /\ 2-arg2 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f293_0_loop_LT : arg1'=arg1p3, arg2'=0, arg3'=arg3p3, arg4'=2, arg5'=2, (1+arg3p3 > 0 /\ 1+arg1p3 > 0 /\ 2-arg2 == 0 /\ arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f1_0_main_Load -> f293_0_loop_LT : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, arg4'=arg4p4, arg5'=arg5p4, (-2+arg2 > 0 /\ 1+arg2p4 > 0 /\ -arg4p4+arg2 == 0 /\ 1+x10 > 0 /\ -arg2p4-arg3p4+x10 == 0 /\ 1+arg1p4 > 0 /\ arg1 > 0 /\ 3-arg5p4 == 0), cost: 1
	New rule:
	f1_0_main_Load -> f293_0_loop_LT : arg1'=arg1p4, arg2'=-arg3p4+x10, arg3'=arg3p4, arg4'=arg2, arg5'=3, (0 == 0 /\ -2+arg2 > 0 /\ 1-arg3p4+x10 > 0 /\ 1+x10 > 0 /\ 1+arg1p4 > 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg4p4 = arg2
		
		propagated equality arg2p4 = -arg3p4+x10
		
		propagated equality arg5p4 = 3
		
	Simplified Guard

	Original rule:
	f1_0_main_Load -> f293_0_loop_LT : arg1'=arg1p4, arg2'=-arg3p4+x10, arg3'=arg3p4, arg4'=arg2, arg5'=3, (0 == 0 /\ -2+arg2 > 0 /\ 1-arg3p4+x10 > 0 /\ 1+x10 > 0 /\ 1+arg1p4 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f293_0_loop_LT : arg1'=arg1p4, arg2'=-arg3p4+x10, arg3'=arg3p4, arg4'=arg2, arg5'=3, (-2+arg2 > 0 /\ 1-arg3p4+x10 > 0 /\ 1+x10 > 0 /\ 1+arg1p4 > 0 /\ arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f293_0_loop_LT -> f293_0_loop_LT : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, arg4'=arg4p5, arg5'=arg5p5, (arg4-arg4p5 == 0 /\ 1 > 0 /\ arg5-arg5p5 == 0 /\ arg1-arg2 == 0 /\ -arg4+arg5 >= 0 /\ 1-arg1p5+arg1 == 0 /\ 1+arg1-arg2p5 == 0 /\ 9-arg3p5-arg1 == 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ arg3 > 0), cost: 1
	New rule:
	f293_0_loop_LT -> f293_0_loop_LT : arg1'=1+arg1, arg2'=1+arg1, arg3'=9-arg1, arg4'=arg4, arg5'=arg5, (0 == 0 /\ 1 > 0 /\ arg1-arg2 == 0 /\ -arg4+arg5 >= 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ arg3 > 0), cost: 1
	
		propagated equality arg4p5 = arg4
		
		propagated equality arg5p5 = arg5
		
		propagated equality arg1p5 = 1+arg1
		
		propagated equality arg2p5 = 1+arg1
		
		propagated equality arg3p5 = 9-arg1
		
	Simplified Guard

	Original rule:
	f293_0_loop_LT -> f293_0_loop_LT : arg1'=1+arg1, arg2'=1+arg1, arg3'=9-arg1, arg4'=arg4, arg5'=arg5, (0 == 0 /\ 1 > 0 /\ arg1-arg2 == 0 /\ -arg4+arg5 >= 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ arg3 > 0), cost: 1
	New rule:
	f293_0_loop_LT -> f293_0_loop_LT : arg1'=1+arg1, arg2'=1+arg1, arg3'=9-arg1, arg4'=arg4, arg5'=arg5, (arg1-arg2 == 0 /\ -arg4+arg5 >= 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ arg3 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f293_0_loop_LT -> f293_0_loop_LT : arg1'=1+arg1, arg2'=1+arg1, arg3'=9-arg1, arg4'=arg4, arg5'=arg5, (arg1-arg2 == 0 /\ -arg4+arg5 >= 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ arg3 > 0), cost: 1
	New rule:
	f293_0_loop_LT -> f293_0_loop_LT : arg1'=1+arg1, arg2'=1+arg1, arg3'=9-arg1, (arg1-arg2 == 0 /\ -arg4+arg5 >= 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ arg3 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f293_0_loop_LT -> f293_0_loop_LT : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, arg4'=arg4p6, arg5'=arg5p6, (9-arg3p6-x19-arg1 == 0 /\ 1+arg5 > 0 /\ arg1-arg2 == 0 /\ -arg4+arg5 < 0 /\ arg4-arg4p6 == 0 /\ 1+x19+arg1-arg2p6 == 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ x19+arg1 >= 0 /\ arg3 > 0 /\ 1+x19-arg1p6+arg1 == 0 /\ 1+arg5-arg5p6 == 0 /\ 1+x19 > 0), cost: 1
	New rule:
	f293_0_loop_LT -> f293_0_loop_LT : arg1'=1+x19+arg1, arg2'=1+x19+arg1, arg3'=9-x19-arg1, arg4'=arg4, arg5'=1+arg5, (0 == 0 /\ 1+arg5 > 0 /\ arg1-arg2 == 0 /\ -arg4+arg5 < 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ x19+arg1 >= 0 /\ arg3 > 0 /\ 1+x19 > 0), cost: 1
	
		propagated equality arg3p6 = 9-x19-arg1
		
		propagated equality arg4p6 = arg4
		
		propagated equality arg2p6 = 1+x19+arg1
		
		propagated equality arg1p6 = 1+x19+arg1
		
		propagated equality arg5p6 = 1+arg5
		
	Simplified Guard

	Original rule:
	f293_0_loop_LT -> f293_0_loop_LT : arg1'=1+x19+arg1, arg2'=1+x19+arg1, arg3'=9-x19-arg1, arg4'=arg4, arg5'=1+arg5, (0 == 0 /\ 1+arg5 > 0 /\ arg1-arg2 == 0 /\ -arg4+arg5 < 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ x19+arg1 >= 0 /\ arg3 > 0 /\ 1+x19 > 0), cost: 1
	New rule:
	f293_0_loop_LT -> f293_0_loop_LT : arg1'=1+x19+arg1, arg2'=1+x19+arg1, arg3'=9-x19-arg1, arg4'=arg4, arg5'=1+arg5, (1+arg5 > 0 /\ arg1-arg2 == 0 /\ -arg4+arg5 < 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ x19+arg1 >= 0 /\ arg3 > 0 /\ 1+x19 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f293_0_loop_LT -> f293_0_loop_LT : arg1'=1+x19+arg1, arg2'=1+x19+arg1, arg3'=9-x19-arg1, arg4'=arg4, arg5'=1+arg5, (1+arg5 > 0 /\ arg1-arg2 == 0 /\ -arg4+arg5 < 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ x19+arg1 >= 0 /\ arg3 > 0 /\ 1+x19 > 0), cost: 1
	New rule:
	f293_0_loop_LT -> f293_0_loop_LT : arg1'=1+x19+arg1, arg2'=1+x19+arg1, arg3'=9-x19-arg1, arg5'=1+arg5, (1+arg5 > 0 /\ arg1-arg2 == 0 /\ -arg4+arg5 < 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ x19+arg1 >= 0 /\ arg3 > 0 /\ 1+x19 > 0), cost: 1

Step with 6

	Trace

	6[T]
	
	Blocked

	[{}, {}]

Step with 7

	Trace

	6[T], 7[(arg1 > 0 /\ -arg2 == 0)]
	
	Blocked

	[{}, {}, {}]

Backtrack

	Trace

	6[T]
	
	Blocked

	[{}, {7[T]}]

Step with 8

	Trace

	6[T], 8[(arg1 > 0 /\ 1+arg1p2 > 0 /\ 1-arg2 == 0)]
	
	Blocked

	[{}, {7[T]}, {}]

Backtrack

	Trace

	6[T]
	
	Blocked

	[{}, {7[T], 8[T]}]

Step with 9

	Trace

	6[T], 9[(1+arg3p3 > 0 /\ 1+arg1p3 > 0 /\ 2-arg2 == 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {7[T], 8[T]}, {}]

Step with 11

	Trace

	6[T], 9[(1+arg3p3 > 0 /\ 1+arg1p3 > 0 /\ 2-arg2 == 0 /\ arg1 > 0)], 11[(arg1-arg2 == 0 /\ -arg4+arg5 >= 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ arg3 > 0)]
	
	Blocked

	[{}, {7[T], 8[T]}, {}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5
   7: f1_0_main_Load -> f293_0_loop_LT : arg1'=0, arg2'=0, arg3'=0, arg4'=0, arg5'=0, (arg1 > 0 /\ -arg2 == 0), cost: 1
   8: f1_0_main_Load -> f293_0_loop_LT : arg1'=arg1p2, arg2'=0, arg3'=0, arg4'=1, arg5'=1, (arg1 > 0 /\ 1+arg1p2 > 0 /\ 1-arg2 == 0), cost: 1
   9: f1_0_main_Load -> f293_0_loop_LT : arg1'=arg1p3, arg2'=0, arg3'=arg3p3, arg4'=2, arg5'=2, (1+arg3p3 > 0 /\ 1+arg1p3 > 0 /\ 2-arg2 == 0 /\ arg1 > 0), cost: 1
  10: f1_0_main_Load -> f293_0_loop_LT : arg1'=arg1p4, arg2'=-arg3p4+x10, arg3'=arg3p4, arg4'=arg2, arg5'=3, (-2+arg2 > 0 /\ 1-arg3p4+x10 > 0 /\ 1+x10 > 0 /\ 1+arg1p4 > 0 /\ arg1 > 0), cost: 1
  11: f293_0_loop_LT -> f293_0_loop_LT : arg1'=1+arg1, arg2'=1+arg1, arg3'=9-arg1, (arg1-arg2 == 0 /\ -arg4+arg5 >= 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ arg3 > 0), cost: 1
  12: f293_0_loop_LT -> f293_0_loop_LT : arg1'=1+x19+arg1, arg2'=1+x19+arg1, arg3'=9-x19-arg1, arg5'=1+arg5, (1+arg5 > 0 /\ arg1-arg2 == 0 /\ -arg4+arg5 < 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ x19+arg1 >= 0 /\ arg3 > 0 /\ 1+x19 > 0), cost: 1
  13: f293_0_loop_LT -> f293_0_loop_LT : arg1'=arg1+n, arg2'=arg1+n, arg3'=10-arg1-n, (arg1-arg2 >= 0 /\ 11-arg1-n > 0 /\ -arg4+arg5 >= 0 /\ -1+n >= 0 /\ -arg1+arg2 >= 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ arg3 > 0), cost: 1
   6: __init -> f1_0_main_Load : arg1'=arg1p7, arg2'=arg2p7, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, T, cost: 1

	Loop Acceleration

	Original rule:
	f293_0_loop_LT -> f293_0_loop_LT : arg1'=1+arg1, arg2'=1+arg1, arg3'=9-arg1, (arg1-arg2 == 0 /\ -arg4+arg5 >= 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ arg3 > 0), cost: 1
	New rule:
	f293_0_loop_LT -> f293_0_loop_LT : arg1'=arg1+n, arg2'=arg1+n, arg3'=10-arg1-n, (arg1-arg2 >= 0 /\ 11-arg1-n > 0 /\ -arg4+arg5 >= 0 /\ -1+n >= 0 /\ -arg1+arg2 >= 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ arg3 > 0), cost: 1

		arg1-arg2 >= 0 [0]: monotonic increase yields arg1-arg2 >= 0
		
		-arg4+arg5 >= 0 [0]: monotonic increase yields -arg4+arg5 >= 0
		
		-arg1+arg2 >= 0 [0]: monotonic increase yields -arg1+arg2 >= 0
		
		1+arg4 > 0 [0]: monotonic increase yields 1+arg4 > 0
		
		1+arg1 > 0 [0]: monotonic increase yields 1+arg1 > 0
		
		arg3 > 0 [0]: eventual decrease yields (11-arg1-n > 0 /\ arg3 > 0)
		
		Replacement map: {arg1-arg2 >= 0 -> arg1-arg2 >= 0, -arg4+arg5 >= 0 -> -arg4+arg5 >= 0, -arg1+arg2 >= 0 -> -arg1+arg2 >= 0, 1+arg4 > 0 -> 1+arg4 > 0, 1+arg1 > 0 -> 1+arg1 > 0, arg3 > 0 -> (11-arg1-n > 0 /\ arg3 > 0)}

	Trace

	6[T], 9[(1+arg3p3 > 0 /\ 1+arg1p3 > 0 /\ 2-arg2 == 0 /\ arg1 > 0)], 13[(arg1-arg2 >= 0 /\ 11-arg1-n > 0 /\ -arg4+arg5 >= 0 /\ -1+n >= 0 /\ -arg1+arg2 >= 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ arg3 > 0)]
	
	Blocked

	[{}, {7[T], 8[T]}, {}, {11[T], 13[T]}]

Backtrack

	Trace

	6[T], 9[(1+arg3p3 > 0 /\ 1+arg1p3 > 0 /\ 2-arg2 == 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {7[T], 8[T]}, {13[T]}]

Step with 11

	Trace

	6[T], 9[(1+arg3p3 > 0 /\ 1+arg1p3 > 0 /\ 2-arg2 == 0 /\ arg1 > 0)], 11[(arg1-arg2 == 0 /\ -arg4+arg5 >= 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ arg3 > 0)]
	
	Blocked

	[{}, {7[T], 8[T]}, {13[T]}, {}]

Covered

	Trace

	6[T], 9[(1+arg3p3 > 0 /\ 1+arg1p3 > 0 /\ 2-arg2 == 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {7[T], 8[T]}, {11[T], 13[T]}]

Backtrack

	Trace

	6[T]
	
	Blocked

	[{}, {7[T], 8[T], 9[T]}]

Step with 10

	Trace

	6[T], 10[(-2+arg2 > 0 /\ 1-arg3p4+x10 > 0 /\ 1+x10 > 0 /\ 1+arg1p4 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {7[T], 8[T], 9[T]}, {}]

Step with 11

	Trace

	6[T], 10[(-2+arg2 > 0 /\ 1-arg3p4+x10 > 0 /\ 1+x10 > 0 /\ 1+arg1p4 > 0 /\ arg1 > 0)], 11[(arg1-arg2 == 0 /\ -arg4+arg5 >= 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ arg3 > 0)]
	
	Blocked

	[{}, {7[T], 8[T], 9[T]}, {}, {}]

Covered

	Trace

	6[T], 10[(-2+arg2 > 0 /\ 1-arg3p4+x10 > 0 /\ 1+x10 > 0 /\ 1+arg1p4 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {7[T], 8[T], 9[T]}, {11[T]}]

Step with 12

	Trace

	6[T], 10[(-2+arg2 > 0 /\ 1-arg3p4+x10 > 0 /\ 1+x10 > 0 /\ 1+arg1p4 > 0 /\ arg1 > 0)], 12[(1+arg5 > 0 /\ arg1-arg2 == 0 /\ -arg4+arg5 < 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ x19+arg1 >= 0 /\ arg3 > 0 /\ 1+x19 > 0)]
	
	Blocked

	[{}, {7[T], 8[T], 9[T]}, {11[T]}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5
   7: f1_0_main_Load -> f293_0_loop_LT : arg1'=0, arg2'=0, arg3'=0, arg4'=0, arg5'=0, (arg1 > 0 /\ -arg2 == 0), cost: 1
   8: f1_0_main_Load -> f293_0_loop_LT : arg1'=arg1p2, arg2'=0, arg3'=0, arg4'=1, arg5'=1, (arg1 > 0 /\ 1+arg1p2 > 0 /\ 1-arg2 == 0), cost: 1
   9: f1_0_main_Load -> f293_0_loop_LT : arg1'=arg1p3, arg2'=0, arg3'=arg3p3, arg4'=2, arg5'=2, (1+arg3p3 > 0 /\ 1+arg1p3 > 0 /\ 2-arg2 == 0 /\ arg1 > 0), cost: 1
  10: f1_0_main_Load -> f293_0_loop_LT : arg1'=arg1p4, arg2'=-arg3p4+x10, arg3'=arg3p4, arg4'=arg2, arg5'=3, (-2+arg2 > 0 /\ 1-arg3p4+x10 > 0 /\ 1+x10 > 0 /\ 1+arg1p4 > 0 /\ arg1 > 0), cost: 1
  11: f293_0_loop_LT -> f293_0_loop_LT : arg1'=1+arg1, arg2'=1+arg1, arg3'=9-arg1, (arg1-arg2 == 0 /\ -arg4+arg5 >= 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ arg3 > 0), cost: 1
  12: f293_0_loop_LT -> f293_0_loop_LT : arg1'=1+x19+arg1, arg2'=1+x19+arg1, arg3'=9-x19-arg1, arg5'=1+arg5, (1+arg5 > 0 /\ arg1-arg2 == 0 /\ -arg4+arg5 < 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ x19+arg1 >= 0 /\ arg3 > 0 /\ 1+x19 > 0), cost: 1
  13: f293_0_loop_LT -> f293_0_loop_LT : arg1'=arg1+n, arg2'=arg1+n, arg3'=10-arg1-n, (arg1-arg2 >= 0 /\ 11-arg1-n > 0 /\ -arg4+arg5 >= 0 /\ -1+n >= 0 /\ -arg1+arg2 >= 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ arg3 > 0), cost: 1
  14: f293_0_loop_LT -> f293_0_loop_LT : arg1'=n2+arg1+x19*n2, arg2'=x19+x19*(-1+n2)+n2+arg1, arg3'=10-x19-x19*(-1+n2)-n2-arg1, arg5'=arg5+n2, (-1+n2 >= 0 /\ 1+arg5 > 0 /\ arg1-arg2 >= 0 /\ -1+x19+x19*(-1+n2)+n2+arg1 >= 0 /\ -arg1+arg2 >= 0 /\ 11-x19-x19*(-2+n2)-n2-arg1 > 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ x19+arg1 >= 0 /\ 1+arg4-arg5-n2 > 0 /\ arg3 > 0 /\ 1+x19 > 0), cost: 1
   6: __init -> f1_0_main_Load : arg1'=arg1p7, arg2'=arg2p7, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, T, cost: 1

	Loop Acceleration

	Original rule:
	f293_0_loop_LT -> f293_0_loop_LT : arg1'=1+x19+arg1, arg2'=1+x19+arg1, arg3'=9-x19-arg1, arg5'=1+arg5, (1+arg5 > 0 /\ arg1-arg2 == 0 /\ -arg4+arg5 < 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ x19+arg1 >= 0 /\ arg3 > 0 /\ 1+x19 > 0), cost: 1
	New rule:
	f293_0_loop_LT -> f293_0_loop_LT : arg1'=n2+arg1+x19*n2, arg2'=x19+x19*(-1+n2)+n2+arg1, arg3'=10-x19-x19*(-1+n2)-n2-arg1, arg5'=arg5+n2, (-1+n2 >= 0 /\ 1+arg5 > 0 /\ arg1-arg2 >= 0 /\ -1+x19+x19*(-1+n2)+n2+arg1 >= 0 /\ -arg1+arg2 >= 0 /\ 11-x19-x19*(-2+n2)-n2-arg1 > 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ x19+arg1 >= 0 /\ 1+arg4-arg5-n2 > 0 /\ arg3 > 0 /\ 1+x19 > 0), cost: 1

		arg4-arg5 > 0 [0]: montonic decrease yields 1+arg4-arg5-n2 > 0
		
		arg4-arg5 > 0 [1]: eventual increase yields (arg4-arg5 > 0 /\ 1 <= 0)
		
		1+arg5 > 0 [0]: monotonic increase yields 1+arg5 > 0
		
		arg1-arg2 >= 0 [0]: monotonic increase yields arg1-arg2 >= 0
		
		-arg1+arg2 >= 0 [0]: monotonic increase yields -arg1+arg2 >= 0
		
		1+arg4 > 0 [0]: monotonic increase yields 1+arg4 > 0, dependencies: arg4-arg5 > 0 1+arg5 > 0
		
		1+arg1 > 0 [0]: monotonic increase yields 1+arg1 > 0, dependencies: x19+arg1 >= 0
		
		1+arg1 > 0 [1]: eventual decrease yields (1+arg1 > 0 /\ x19*(-1+n2)+n2+arg1 > 0), dependencies: 1+x19 > 0
		
		1+arg1 > 0 [2]: eventual increase yields (1+arg1 > 0 /\ -1-x19 <= 0), dependencies: 1+x19 > 0
		
		x19+arg1 >= 0 [0]: monotonic increase yields x19+arg1 >= 0, dependencies: 1+arg1 > 0 1+x19 > 0
		
		x19+arg1 >= 0 [1]: montonic decrease yields -1+x19+x19*(-1+n2)+n2+arg1 >= 0, dependencies: 1+arg1 > 0
		
		x19+arg1 >= 0 [2]: eventual decrease yields (-1+x19+x19*(-1+n2)+n2+arg1 >= 0 /\ x19+arg1 >= 0), dependencies: 1+x19 > 0
		
		x19+arg1 >= 0 [3]: eventual increase yields (x19+arg1 >= 0 /\ -1-x19 <= 0), dependencies: 1+x19 > 0
		
		arg3 > 0 [0]: eventual decrease yields (11-x19-x19*(-2+n2)-n2-arg1 > 0 /\ arg3 > 0), dependencies: 1+x19 > 0
		
		1+x19 > 0 [0]: monotonic increase yields 1+x19 > 0
		
		Replacement map: {arg4-arg5 > 0 -> 1+arg4-arg5-n2 > 0, 1+arg5 > 0 -> 1+arg5 > 0, arg1-arg2 >= 0 -> arg1-arg2 >= 0, -arg1+arg2 >= 0 -> -arg1+arg2 >= 0, 1+arg4 > 0 -> 1+arg4 > 0, 1+arg1 > 0 -> 1+arg1 > 0, x19+arg1 >= 0 -> (-1+x19+x19*(-1+n2)+n2+arg1 >= 0 /\ x19+arg1 >= 0), arg3 > 0 -> (11-x19-x19*(-2+n2)-n2-arg1 > 0 /\ arg3 > 0), 1+x19 > 0 -> 1+x19 > 0}

	Trace

	6[T], 10[(-2+arg2 > 0 /\ 1-arg3p4+x10 > 0 /\ 1+x10 > 0 /\ 1+arg1p4 > 0 /\ arg1 > 0)], 14[(-1+n2 >= 0 /\ 1+arg5 > 0 /\ arg1-arg2 >= 0 /\ -1+x19+x19*(-1+n2)+n2+arg1 >= 0 /\ -arg1+arg2 >= 0 /\ 11-x19-x19*(-2+n2)-n2-arg1 > 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ x19+arg1 >= 0 /\ 1+arg4-arg5-n2 > 0 /\ arg3 > 0 /\ 1+x19 > 0)]
	
	Blocked

	[{}, {7[T], 8[T], 9[T]}, {11[T]}, {12[T], 14[T]}]

Step with 11

	Trace

	6[T], 10[(-2+arg2 > 0 /\ 1-arg3p4+x10 > 0 /\ 1+x10 > 0 /\ 1+arg1p4 > 0 /\ arg1 > 0)], 14[(-1+n2 >= 0 /\ 1+arg5 > 0 /\ arg1-arg2 >= 0 /\ -1+x19+x19*(-1+n2)+n2+arg1 >= 0 /\ -arg1+arg2 >= 0 /\ 11-x19-x19*(-2+n2)-n2-arg1 > 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ x19+arg1 >= 0 /\ 1+arg4-arg5-n2 > 0 /\ arg3 > 0 /\ 1+x19 > 0)], 11[(arg1-arg2 == 0 /\ -arg4+arg5 >= 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ arg3 > 0)]
	
	Blocked

	[{}, {7[T], 8[T], 9[T]}, {11[T]}, {12[T], 14[T]}, {}]

Covered

	Trace

	6[T], 10[(-2+arg2 > 0 /\ 1-arg3p4+x10 > 0 /\ 1+x10 > 0 /\ 1+arg1p4 > 0 /\ arg1 > 0)], 14[(-1+n2 >= 0 /\ 1+arg5 > 0 /\ arg1-arg2 >= 0 /\ -1+x19+x19*(-1+n2)+n2+arg1 >= 0 /\ -arg1+arg2 >= 0 /\ 11-x19-x19*(-2+n2)-n2-arg1 > 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ x19+arg1 >= 0 /\ 1+arg4-arg5-n2 > 0 /\ arg3 > 0 /\ 1+x19 > 0)]
	
	Blocked

	[{}, {7[T], 8[T], 9[T]}, {11[T]}, {11[T], 12[T], 14[T]}]

Step with 13

	Trace

	6[T], 10[(-2+arg2 > 0 /\ 1-arg3p4+x10 > 0 /\ 1+x10 > 0 /\ 1+arg1p4 > 0 /\ arg1 > 0)], 14[(-1+n2 >= 0 /\ 1+arg5 > 0 /\ arg1-arg2 >= 0 /\ -1+x19+x19*(-1+n2)+n2+arg1 >= 0 /\ -arg1+arg2 >= 0 /\ 11-x19-x19*(-2+n2)-n2-arg1 > 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ x19+arg1 >= 0 /\ 1+arg4-arg5-n2 > 0 /\ arg3 > 0 /\ 1+x19 > 0)], 13[(arg1-arg2 >= 0 /\ 11-arg1-n > 0 /\ -arg4+arg5 >= 0 /\ -1+n >= 0 /\ -arg1+arg2 >= 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ arg3 > 0)]
	
	Blocked

	[{}, {7[T], 8[T], 9[T]}, {11[T]}, {11[T], 12[T], 14[T]}, {13[T]}]

Acceleration Failed

marked recursive suffix as redundant

Step with 11

	Trace

	6[T], 10[(-2+arg2 > 0 /\ 1-arg3p4+x10 > 0 /\ 1+x10 > 0 /\ 1+arg1p4 > 0 /\ arg1 > 0)], 14[(-1+n2 >= 0 /\ 1+arg5 > 0 /\ arg1-arg2 >= 0 /\ -1+x19+x19*(-1+n2)+n2+arg1 >= 0 /\ -arg1+arg2 >= 0 /\ 11-x19-x19*(-2+n2)-n2-arg1 > 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ x19+arg1 >= 0 /\ 1+arg4-arg5-n2 > 0 /\ arg3 > 0 /\ 1+x19 > 0)], 13[(arg1-arg2 >= 0 /\ 11-arg1-n > 0 /\ -arg4+arg5 >= 0 /\ -1+n >= 0 /\ -arg1+arg2 >= 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ arg3 > 0)], 11[(arg1-arg2 == 0 /\ -arg4+arg5 >= 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ arg3 > 0)]
	
	Blocked

	[{}, {7[T], 8[T], 9[T]}, {11[T]}, {11[T], 12[T], 14[T]}, {13[T], 14[T]}, {}]

Covered

	Trace

	6[T], 10[(-2+arg2 > 0 /\ 1-arg3p4+x10 > 0 /\ 1+x10 > 0 /\ 1+arg1p4 > 0 /\ arg1 > 0)], 14[(-1+n2 >= 0 /\ 1+arg5 > 0 /\ arg1-arg2 >= 0 /\ -1+x19+x19*(-1+n2)+n2+arg1 >= 0 /\ -arg1+arg2 >= 0 /\ 11-x19-x19*(-2+n2)-n2-arg1 > 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ x19+arg1 >= 0 /\ 1+arg4-arg5-n2 > 0 /\ arg3 > 0 /\ 1+x19 > 0)], 13[(arg1-arg2 >= 0 /\ 11-arg1-n > 0 /\ -arg4+arg5 >= 0 /\ -1+n >= 0 /\ -arg1+arg2 >= 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ arg3 > 0)]
	
	Blocked

	[{}, {7[T], 8[T], 9[T]}, {11[T]}, {11[T], 12[T], 14[T]}, {11[T], 13[T], 14[T]}]

Backtrack

	Trace

	6[T], 10[(-2+arg2 > 0 /\ 1-arg3p4+x10 > 0 /\ 1+x10 > 0 /\ 1+arg1p4 > 0 /\ arg1 > 0)], 14[(-1+n2 >= 0 /\ 1+arg5 > 0 /\ arg1-arg2 >= 0 /\ -1+x19+x19*(-1+n2)+n2+arg1 >= 0 /\ -arg1+arg2 >= 0 /\ 11-x19-x19*(-2+n2)-n2-arg1 > 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ x19+arg1 >= 0 /\ 1+arg4-arg5-n2 > 0 /\ arg3 > 0 /\ 1+x19 > 0)]
	
	Blocked

	[{}, {7[T], 8[T], 9[T]}, {11[T]}, {11[T], 12[T], 13[T], 14[T]}]

Backtrack

	Trace

	6[T], 10[(-2+arg2 > 0 /\ 1-arg3p4+x10 > 0 /\ 1+x10 > 0 /\ 1+arg1p4 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {7[T], 8[T], 9[T]}, {11[T], 14[T]}]

Step with 12

	Trace

	6[T], 10[(-2+arg2 > 0 /\ 1-arg3p4+x10 > 0 /\ 1+x10 > 0 /\ 1+arg1p4 > 0 /\ arg1 > 0)], 12[(1+arg5 > 0 /\ arg1-arg2 == 0 /\ -arg4+arg5 < 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ x19+arg1 >= 0 /\ arg3 > 0 /\ 1+x19 > 0)]
	
	Blocked

	[{}, {7[T], 8[T], 9[T]}, {11[T], 14[T]}, {}]

Covered

	Trace

	6[T], 10[(-2+arg2 > 0 /\ 1-arg3p4+x10 > 0 /\ 1+x10 > 0 /\ 1+arg1p4 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {7[T], 8[T], 9[T]}, {11[T], 12[T], 14[T]}]

Step with 13

	Trace

	6[T], 10[(-2+arg2 > 0 /\ 1-arg3p4+x10 > 0 /\ 1+x10 > 0 /\ 1+arg1p4 > 0 /\ arg1 > 0)], 13[(arg1-arg2 >= 0 /\ 11-arg1-n > 0 /\ -arg4+arg5 >= 0 /\ -1+n >= 0 /\ -arg1+arg2 >= 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ arg3 > 0)]
	
	Blocked

	[{}, {7[T], 8[T], 9[T]}, {11[T], 12[T], 14[T]}, {13[T]}]

Step with 11

	Trace

	6[T], 10[(-2+arg2 > 0 /\ 1-arg3p4+x10 > 0 /\ 1+x10 > 0 /\ 1+arg1p4 > 0 /\ arg1 > 0)], 13[(arg1-arg2 >= 0 /\ 11-arg1-n > 0 /\ -arg4+arg5 >= 0 /\ -1+n >= 0 /\ -arg1+arg2 >= 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ arg3 > 0)], 11[(arg1-arg2 == 0 /\ -arg4+arg5 >= 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ arg3 > 0)]
	
	Blocked

	[{}, {7[T], 8[T], 9[T]}, {11[T], 12[T], 14[T]}, {13[T], 14[T]}, {}]

Covered

	Trace

	6[T], 10[(-2+arg2 > 0 /\ 1-arg3p4+x10 > 0 /\ 1+x10 > 0 /\ 1+arg1p4 > 0 /\ arg1 > 0)], 13[(arg1-arg2 >= 0 /\ 11-arg1-n > 0 /\ -arg4+arg5 >= 0 /\ -1+n >= 0 /\ -arg1+arg2 >= 0 /\ 1+arg4 > 0 /\ 1+arg1 > 0 /\ arg3 > 0)]
	
	Blocked

	[{}, {7[T], 8[T], 9[T]}, {11[T], 12[T], 14[T]}, {11[T], 13[T], 14[T]}]

Backtrack

	Trace

	6[T], 10[(-2+arg2 > 0 /\ 1-arg3p4+x10 > 0 /\ 1+x10 > 0 /\ 1+arg1p4 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {7[T], 8[T], 9[T]}, {11[T], 12[T], 13[T], 14[T]}]

Backtrack

	Trace

	6[T]
	
	Blocked

	[{}, {7[T], 8[T], 9[T], 10[T]}]

Backtrack

	Trace

	Blocked

	[{6[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
