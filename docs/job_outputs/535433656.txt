WORST_CASE(Omega(0),?)

Initial ITS
Start location: __init
   0: f1_0_main_ConstantStackPush -> f108_0_add_GT : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (-arg2P0 == 0 /\ -arg3P0 == 0 /\ -arg1P0 == 0), cost: 1
   1: f108_0_add_GT -> f108_0_add_GT : arg2'=arg2P1, arg1'=arg1P1, arg3'=arg3P1, (1+arg1 > 0 /\ arg2+arg1-arg1P1 == 0 /\ -1001+arg2 < 0 /\ 1+arg2 > 0 /\ arg2-arg3 == 0 /\ 1+arg2-arg2P1 == 0 /\ 1+arg2-arg3P1 == 0), cost: 1
   2: f108_0_add_GT -> f208_0_add_GT : arg2'=arg2P2, arg1'=arg1P2, arg3'=arg3P2, (-1000+arg2 > 0 /\ -arg3P2 == 0 /\ arg2-arg3 == 0 /\ -arg2P2 == 0 /\ -arg1P2 == 0), cost: 1
   3: f208_0_add_GT -> f208_0_add_GT : arg2'=arg2P3, arg1'=arg1P3, arg3'=arg3P3, (1+arg1 > 0 /\ 2-arg2P3+arg2 == 0 /\ -1001+arg2 < 0 /\ 1+arg2 > 0 /\ arg2-arg1P3+arg1 == 0 /\ arg2-arg3 == 0 /\ 2+arg2-arg3P3 == 0), cost: 1
   4: f208_0_add_GT -> f311_0_add_GT : arg2'=arg2P4, arg1'=arg1P4, arg3'=arg3P4, (-1000+arg2 > 0 /\ -arg1P4 == 0 /\ arg2-arg3 == 0 /\ -arg3P4 == 0 /\ -arg2P4 == 0), cost: 1
   5: f311_0_add_GT -> f311_0_add_GT : arg2'=arg2P5, arg1'=arg1P5, arg3'=arg3P5, (1+arg1 > 0 /\ -1001+arg2 < 0 /\ 1+arg2 > 0 /\ 3+arg2-arg3P5 == 0 /\ arg2-arg3 == 0 /\ arg2-arg1P5+arg1 == 0 /\ 3-arg2P5+arg2 == 0), cost: 1
   6: __init -> f1_0_main_ConstantStackPush : arg2'=arg2P6, arg1'=arg1P6, arg3'=arg3P6, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_ConstantStackPush -> f108_0_add_GT : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (-arg2P0 == 0 /\ -arg3P0 == 0 /\ -arg1P0 == 0), cost: 1
New rule:
f1_0_main_ConstantStackPush -> f108_0_add_GT : arg2'=0, arg1'=0, arg3'=0, TRUE, cost: 1

Applied preprocessing
Original rule:
f108_0_add_GT -> f108_0_add_GT : arg2'=arg2P1, arg1'=arg1P1, arg3'=arg3P1, (1+arg1 > 0 /\ arg2+arg1-arg1P1 == 0 /\ -1001+arg2 < 0 /\ 1+arg2 > 0 /\ arg2-arg3 == 0 /\ 1+arg2-arg2P1 == 0 /\ 1+arg2-arg3P1 == 0), cost: 1
New rule:
f108_0_add_GT -> f108_0_add_GT : arg2'=1+arg2, arg1'=arg2+arg1, arg3'=1+arg2, (1+arg1 > 0 /\ 1+arg2 > 0 /\ arg2-arg3 == 0 /\ 1001-arg2 > 0), cost: 1

Applied preprocessing
Original rule:
f108_0_add_GT -> f208_0_add_GT : arg2'=arg2P2, arg1'=arg1P2, arg3'=arg3P2, (-1000+arg2 > 0 /\ -arg3P2 == 0 /\ arg2-arg3 == 0 /\ -arg2P2 == 0 /\ -arg1P2 == 0), cost: 1
New rule:
f108_0_add_GT -> f208_0_add_GT : arg2'=0, arg1'=0, arg3'=0, (-1000+arg2 > 0 /\ arg2-arg3 == 0), cost: 1

Applied preprocessing
Original rule:
f208_0_add_GT -> f208_0_add_GT : arg2'=arg2P3, arg1'=arg1P3, arg3'=arg3P3, (1+arg1 > 0 /\ 2-arg2P3+arg2 == 0 /\ -1001+arg2 < 0 /\ 1+arg2 > 0 /\ arg2-arg1P3+arg1 == 0 /\ arg2-arg3 == 0 /\ 2+arg2-arg3P3 == 0), cost: 1
New rule:
f208_0_add_GT -> f208_0_add_GT : arg2'=2+arg2, arg1'=arg2+arg1, arg3'=2+arg2, (1+arg1 > 0 /\ 1+arg2 > 0 /\ arg2-arg3 == 0 /\ 1001-arg2 > 0), cost: 1

Applied preprocessing
Original rule:
f208_0_add_GT -> f311_0_add_GT : arg2'=arg2P4, arg1'=arg1P4, arg3'=arg3P4, (-1000+arg2 > 0 /\ -arg1P4 == 0 /\ arg2-arg3 == 0 /\ -arg3P4 == 0 /\ -arg2P4 == 0), cost: 1
New rule:
f208_0_add_GT -> f311_0_add_GT : arg2'=0, arg1'=0, arg3'=0, (-1000+arg2 > 0 /\ arg2-arg3 == 0), cost: 1

Applied preprocessing
Original rule:
f311_0_add_GT -> f311_0_add_GT : arg2'=arg2P5, arg1'=arg1P5, arg3'=arg3P5, (1+arg1 > 0 /\ -1001+arg2 < 0 /\ 1+arg2 > 0 /\ 3+arg2-arg3P5 == 0 /\ arg2-arg3 == 0 /\ arg2-arg1P5+arg1 == 0 /\ 3-arg2P5+arg2 == 0), cost: 1
New rule:
f311_0_add_GT -> f311_0_add_GT : arg2'=3+arg2, arg1'=arg2+arg1, arg3'=3+arg2, (1+arg1 > 0 /\ 1+arg2 > 0 /\ arg2-arg3 == 0 /\ 1001-arg2 > 0), cost: 1

Simplified rules
Start location: __init
   7: f1_0_main_ConstantStackPush -> f108_0_add_GT : arg2'=0, arg1'=0, arg3'=0, TRUE, cost: 1
   8: f108_0_add_GT -> f108_0_add_GT : arg2'=1+arg2, arg1'=arg2+arg1, arg3'=1+arg2, (1+arg1 > 0 /\ 1+arg2 > 0 /\ arg2-arg3 == 0 /\ 1001-arg2 > 0), cost: 1
   9: f108_0_add_GT -> f208_0_add_GT : arg2'=0, arg1'=0, arg3'=0, (-1000+arg2 > 0 /\ arg2-arg3 == 0), cost: 1
  10: f208_0_add_GT -> f208_0_add_GT : arg2'=2+arg2, arg1'=arg2+arg1, arg3'=2+arg2, (1+arg1 > 0 /\ 1+arg2 > 0 /\ arg2-arg3 == 0 /\ 1001-arg2 > 0), cost: 1
  11: f208_0_add_GT -> f311_0_add_GT : arg2'=0, arg1'=0, arg3'=0, (-1000+arg2 > 0 /\ arg2-arg3 == 0), cost: 1
  12: f311_0_add_GT -> f311_0_add_GT : arg2'=3+arg2, arg1'=arg2+arg1, arg3'=3+arg2, (1+arg1 > 0 /\ 1+arg2 > 0 /\ arg2-arg3 == 0 /\ 1001-arg2 > 0), cost: 1
   6: __init -> f1_0_main_ConstantStackPush : arg2'=arg2P6, arg1'=arg1P6, arg3'=arg3P6, TRUE, cost: 1


Applied acceleration
Original rule:
f108_0_add_GT -> f108_0_add_GT : arg2'=1+arg2, arg1'=arg2+arg1, arg3'=1+arg2, (1+arg1 > 0 /\ 1+arg2 > 0 /\ arg2-arg3 == 0 /\ 1001-arg2 > 0), cost: 1
New rule:
f108_0_add_GT -> f108_0_add_GT : arg2'=arg2+n, arg1'=arg2*n+1/2*n^2+arg1-1/2*n, arg3'=arg2+n, (1+arg1 > 0 /\ 1+arg2 > 0 /\ -1+n >= 0 /\ arg2-arg3 >= 0 /\ 1002-arg2-n > 0 /\ -arg2+arg3 >= 0), cost: n
Sub-proof via acceration calculus written to file:///tmp/tmpnam_hJMbdJ.txt

Applied instantiation
Original rule:
f108_0_add_GT -> f108_0_add_GT : arg2'=arg2+n, arg1'=arg2*n+1/2*n^2+arg1-1/2*n, arg3'=arg2+n, (1+arg1 > 0 /\ 1+arg2 > 0 /\ -1+n >= 0 /\ arg2-arg3 >= 0 /\ 1002-arg2-n > 0 /\ -arg2+arg3 >= 0), cost: n
New rule:
f108_0_add_GT -> f108_0_add_GT : arg2'=1001, arg1'=-1001/2+1/2*(-1001+arg2)^2+1/2*arg2-arg2*(-1001+arg2)+arg1, arg3'=1001, (1000-arg2 >= 0 /\ 1 > 0 /\ 1+arg1 > 0 /\ 1+arg2 > 0 /\ arg2-arg3 >= 0 /\ -arg2+arg3 >= 0), cost: 1001-arg2

Applied simplification
Original rule:
f108_0_add_GT -> f108_0_add_GT : arg2'=1001, arg1'=-1001/2+1/2*(-1001+arg2)^2+1/2*arg2-arg2*(-1001+arg2)+arg1, arg3'=1001, (1000-arg2 >= 0 /\ 1 > 0 /\ 1+arg1 > 0 /\ 1+arg2 > 0 /\ arg2-arg3 >= 0 /\ -arg2+arg3 >= 0), cost: 1001-arg2
New rule:
f108_0_add_GT -> f108_0_add_GT : arg2'=1001, arg1'=-1001/2+1/2*(-1001+arg2)^2+1/2*arg2-arg2*(-1001+arg2)+arg1, arg3'=1001, (-1000+arg2 <= 0 /\ 1+arg1 > 0 /\ 1+arg2 > 0 /\ arg2-arg3 >= 0 /\ -arg2+arg3 >= 0), cost: 1001-arg2

Applied deletion
Removed the following rules: 8

Applied acceleration
Original rule:
f208_0_add_GT -> f208_0_add_GT : arg2'=2+arg2, arg1'=arg2+arg1, arg3'=2+arg2, (1+arg1 > 0 /\ 1+arg2 > 0 /\ arg2-arg3 == 0 /\ 1001-arg2 > 0), cost: 1
New rule:
f208_0_add_GT -> f208_0_add_GT : arg2'=arg2+2*n0, arg1'=arg2*n0-n0+n0^2+arg1, arg3'=arg2+2*n0, (1+arg1 > 0 /\ 1003-arg2-2*n0 > 0 /\ 1+arg2 > 0 /\ -1+n0 >= 0 /\ arg2-arg3 >= 0 /\ -arg2+arg3 >= 0), cost: n0
Sub-proof via acceration calculus written to file:///tmp/tmpnam_jdblCD.txt

Applied deletion
Removed the following rules: 10

Applied acceleration
Original rule:
f311_0_add_GT -> f311_0_add_GT : arg2'=3+arg2, arg1'=arg2+arg1, arg3'=3+arg2, (1+arg1 > 0 /\ 1+arg2 > 0 /\ arg2-arg3 == 0 /\ 1001-arg2 > 0), cost: 1
New rule:
f311_0_add_GT -> f311_0_add_GT : arg2'=arg2+3*n1, arg1'=arg1-3/2*n1+3/2*n1^2+arg2*n1, arg3'=arg2+3*n1, (1+arg1 > 0 /\ 1004-arg2-3*n1 > 0 /\ 1+arg2 > 0 /\ -1+n1 >= 0 /\ arg2-arg3 >= 0 /\ -arg2+arg3 >= 0), cost: n1
Sub-proof via acceration calculus written to file:///tmp/tmpnam_CbfOAk.txt

Applied deletion
Removed the following rules: 12

Accelerated simple loops
Start location: __init
   7: f1_0_main_ConstantStackPush -> f108_0_add_GT : arg2'=0, arg1'=0, arg3'=0, TRUE, cost: 1
   9: f108_0_add_GT -> f208_0_add_GT : arg2'=0, arg1'=0, arg3'=0, (-1000+arg2 > 0 /\ arg2-arg3 == 0), cost: 1
  14: f108_0_add_GT -> f108_0_add_GT : arg2'=1001, arg1'=-1001/2+1/2*(-1001+arg2)^2+1/2*arg2-arg2*(-1001+arg2)+arg1, arg3'=1001, (-1000+arg2 <= 0 /\ 1+arg1 > 0 /\ 1+arg2 > 0 /\ arg2-arg3 >= 0 /\ -arg2+arg3 >= 0), cost: 1001-arg2
  11: f208_0_add_GT -> f311_0_add_GT : arg2'=0, arg1'=0, arg3'=0, (-1000+arg2 > 0 /\ arg2-arg3 == 0), cost: 1
  15: f208_0_add_GT -> f208_0_add_GT : arg2'=arg2+2*n0, arg1'=arg2*n0-n0+n0^2+arg1, arg3'=arg2+2*n0, (1+arg1 > 0 /\ 1003-arg2-2*n0 > 0 /\ 1+arg2 > 0 /\ -1+n0 >= 0 /\ arg2-arg3 >= 0 /\ -arg2+arg3 >= 0), cost: n0
  16: f311_0_add_GT -> f311_0_add_GT : arg2'=arg2+3*n1, arg1'=arg1-3/2*n1+3/2*n1^2+arg2*n1, arg3'=arg2+3*n1, (1+arg1 > 0 /\ 1004-arg2-3*n1 > 0 /\ 1+arg2 > 0 /\ -1+n1 >= 0 /\ arg2-arg3 >= 0 /\ -arg2+arg3 >= 0), cost: n1
   6: __init -> f1_0_main_ConstantStackPush : arg2'=arg2P6, arg1'=arg1P6, arg3'=arg3P6, TRUE, cost: 1


Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f108_0_add_GT : arg2'=0, arg1'=0, arg3'=0, TRUE, cost: 1
Second rule:
f108_0_add_GT -> f108_0_add_GT : arg2'=1001, arg1'=-1001/2+1/2*(-1001+arg2)^2+1/2*arg2-arg2*(-1001+arg2)+arg1, arg3'=1001, (-1000+arg2 <= 0 /\ 1+arg1 > 0 /\ 1+arg2 > 0 /\ arg2-arg3 >= 0 /\ -arg2+arg3 >= 0), cost: 1001-arg2
New rule:
f1_0_main_ConstantStackPush -> f108_0_add_GT : arg2'=1001, arg1'=500500, arg3'=1001, (0 == 0 /\ -1000 <= 0), cost: 1002

Applied deletion
Removed the following rules: 14

Applied chaining
First rule:
f108_0_add_GT -> f208_0_add_GT : arg2'=0, arg1'=0, arg3'=0, (-1000+arg2 > 0 /\ arg2-arg3 == 0), cost: 1
Second rule:
f208_0_add_GT -> f208_0_add_GT : arg2'=arg2+2*n0, arg1'=arg2*n0-n0+n0^2+arg1, arg3'=arg2+2*n0, (1+arg1 > 0 /\ 1003-arg2-2*n0 > 0 /\ 1+arg2 > 0 /\ -1+n0 >= 0 /\ arg2-arg3 >= 0 /\ -arg2+arg3 >= 0), cost: n0
New rule:
f108_0_add_GT -> f208_0_add_GT : arg2'=2*n0, arg1'=-n0+n0^2, arg3'=2*n0, (-1000+arg2 > 0 /\ 1003-2*n0 > 0 /\ -1+n0 >= 0 /\ arg2-arg3 == 0), cost: 1+n0

Applied deletion
Removed the following rules: 15

Applied chaining
First rule:
f208_0_add_GT -> f311_0_add_GT : arg2'=0, arg1'=0, arg3'=0, (-1000+arg2 > 0 /\ arg2-arg3 == 0), cost: 1
Second rule:
f311_0_add_GT -> f311_0_add_GT : arg2'=arg2+3*n1, arg1'=arg1-3/2*n1+3/2*n1^2+arg2*n1, arg3'=arg2+3*n1, (1+arg1 > 0 /\ 1004-arg2-3*n1 > 0 /\ 1+arg2 > 0 /\ -1+n1 >= 0 /\ arg2-arg3 >= 0 /\ -arg2+arg3 >= 0), cost: n1
New rule:
f208_0_add_GT -> f311_0_add_GT : arg2'=3*n1, arg1'=-3/2*n1+3/2*n1^2, arg3'=3*n1, (-1000+arg2 > 0 /\ 1004-3*n1 > 0 /\ -1+n1 >= 0 /\ arg2-arg3 == 0), cost: 1+n1

Applied deletion
Removed the following rules: 16

Chained accelerated rules with incoming rules
Start location: __init
   7: f1_0_main_ConstantStackPush -> f108_0_add_GT : arg2'=0, arg1'=0, arg3'=0, TRUE, cost: 1
  17: f1_0_main_ConstantStackPush -> f108_0_add_GT : arg2'=1001, arg1'=500500, arg3'=1001, (0 == 0 /\ -1000 <= 0), cost: 1002
   9: f108_0_add_GT -> f208_0_add_GT : arg2'=0, arg1'=0, arg3'=0, (-1000+arg2 > 0 /\ arg2-arg3 == 0), cost: 1
  18: f108_0_add_GT -> f208_0_add_GT : arg2'=2*n0, arg1'=-n0+n0^2, arg3'=2*n0, (-1000+arg2 > 0 /\ 1003-2*n0 > 0 /\ -1+n0 >= 0 /\ arg2-arg3 == 0), cost: 1+n0
  11: f208_0_add_GT -> f311_0_add_GT : arg2'=0, arg1'=0, arg3'=0, (-1000+arg2 > 0 /\ arg2-arg3 == 0), cost: 1
  19: f208_0_add_GT -> f311_0_add_GT : arg2'=3*n1, arg1'=-3/2*n1+3/2*n1^2, arg3'=3*n1, (-1000+arg2 > 0 /\ 1004-3*n1 > 0 /\ -1+n1 >= 0 /\ arg2-arg3 == 0), cost: 1+n1
   6: __init -> f1_0_main_ConstantStackPush : arg2'=arg2P6, arg1'=arg1P6, arg3'=arg3P6, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
  <empty>


Computing asymptotic complexity

Proved the following lower bound
Complexity:  Unknown
Cpx degree: ?

Solved cost: 0
Rule cost:   0

