WORST_CASE(Omega(0),?)

Initial ITS
Start location: __init
   0: f1_0_main_Load -> f180_0_ack_GT : arg2'=arg2P0, arg1'=arg1P0, (-arg1P0 == 0 /\ -arg2 == 0 /\ arg1 > 0 /\ -arg2P0 == 0), cost: 1
   1: f1_0_main_Load -> f180_0_ack_GT : arg2'=arg2P1, arg1'=arg1P1, (-arg1P1 == 0 /\ 1+arg2P1 > 0 /\ arg1 > 0 /\ 1-arg2 == 0), cost: 1
   2: f1_0_main_Load -> f180_0_ack_GT : arg2'=arg2P2, arg1'=arg1P2, (1+arg1P2 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ 1+arg2P2 > 0), cost: 1
   3: f180_0_ack_GT -> f180_0_ack_GT : arg2'=arg2P3, arg1'=arg1P3, (-1+arg2-arg2P3 == 0 /\ arg2 > 0 /\ 1-arg1P3 == 0 /\ -arg1 == 0 /\ -1 < 0), cost: 1
   4: f180_0_ack_GT -> f180_0_ack_GT : arg2'=arg2P4, arg1'=arg1P4, (arg2-arg2P4 == 0 /\ arg2 > 0 /\ arg1 > 0 /\ -1+arg1-arg1P4 == 0 /\ -1 < 0), cost: 1
   5: f180_0_ack_GT -> f180_0_ack_GT : arg2'=arg2P5, arg1'=arg1P5, (arg2 > 0 /\ arg1P5 > 0 /\ arg1 > 0 /\ -1+arg2-arg2P5 == 0 /\ -1 < 0), cost: 1
   6: __init -> f1_0_main_Load : arg2'=arg2P6, arg1'=arg1P6, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_Load -> f180_0_ack_GT : arg2'=arg2P0, arg1'=arg1P0, (-arg1P0 == 0 /\ -arg2 == 0 /\ arg1 > 0 /\ -arg2P0 == 0), cost: 1
New rule:
f1_0_main_Load -> f180_0_ack_GT : arg2'=0, arg1'=0, (arg2 == 0 /\ arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f1_0_main_Load -> f180_0_ack_GT : arg2'=arg2P1, arg1'=arg1P1, (-arg1P1 == 0 /\ 1+arg2P1 > 0 /\ arg1 > 0 /\ 1-arg2 == 0), cost: 1
New rule:
f1_0_main_Load -> f180_0_ack_GT : arg2'=arg2P1, arg1'=0, (1+arg2P1 > 0 /\ arg1 > 0 /\ -1+arg2 == 0), cost: 1

Applied preprocessing
Original rule:
f180_0_ack_GT -> f180_0_ack_GT : arg2'=arg2P3, arg1'=arg1P3, (-1+arg2-arg2P3 == 0 /\ arg2 > 0 /\ 1-arg1P3 == 0 /\ -arg1 == 0 /\ -1 < 0), cost: 1
New rule:
f180_0_ack_GT -> f180_0_ack_GT : arg2'=-1+arg2, arg1'=1, (arg2 > 0 /\ arg1 == 0), cost: 1

Applied preprocessing
Original rule:
f180_0_ack_GT -> f180_0_ack_GT : arg2'=arg2P4, arg1'=arg1P4, (arg2-arg2P4 == 0 /\ arg2 > 0 /\ arg1 > 0 /\ -1+arg1-arg1P4 == 0 /\ -1 < 0), cost: 1
New rule:
f180_0_ack_GT -> f180_0_ack_GT : arg1'=-1+arg1, (arg2 > 0 /\ arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f180_0_ack_GT -> f180_0_ack_GT : arg2'=arg2P5, arg1'=arg1P5, (arg2 > 0 /\ arg1P5 > 0 /\ arg1 > 0 /\ -1+arg2-arg2P5 == 0 /\ -1 < 0), cost: 1
New rule:
f180_0_ack_GT -> f180_0_ack_GT : arg2'=-1+arg2, arg1'=arg1P5, (arg2 > 0 /\ arg1P5 > 0 /\ arg1 > 0), cost: 1

Simplified rules
Start location: __init
   2: f1_0_main_Load -> f180_0_ack_GT : arg2'=arg2P2, arg1'=arg1P2, (1+arg1P2 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ 1+arg2P2 > 0), cost: 1
   7: f1_0_main_Load -> f180_0_ack_GT : arg2'=0, arg1'=0, (arg2 == 0 /\ arg1 > 0), cost: 1
   8: f1_0_main_Load -> f180_0_ack_GT : arg2'=arg2P1, arg1'=0, (1+arg2P1 > 0 /\ arg1 > 0 /\ -1+arg2 == 0), cost: 1
   9: f180_0_ack_GT -> f180_0_ack_GT : arg2'=-1+arg2, arg1'=1, (arg2 > 0 /\ arg1 == 0), cost: 1
  10: f180_0_ack_GT -> f180_0_ack_GT : arg1'=-1+arg1, (arg2 > 0 /\ arg1 > 0), cost: 1
  11: f180_0_ack_GT -> f180_0_ack_GT : arg2'=-1+arg2, arg1'=arg1P5, (arg2 > 0 /\ arg1P5 > 0 /\ arg1 > 0), cost: 1
   6: __init -> f1_0_main_Load : arg2'=arg2P6, arg1'=arg1P6, TRUE, cost: 1


Applied acceleration
Original rule:
f180_0_ack_GT -> f180_0_ack_GT : arg1'=-1+arg1, (arg2 > 0 /\ arg1 > 0), cost: 1
New rule:
f180_0_ack_GT -> f180_0_ack_GT : arg1'=arg1-n0, (arg2 > 0 /\ 1+arg1-n0 > 0 /\ n0 >= 0), cost: n0
Sub-proof via acceration calculus written to file:///tmp/tmpnam_MPIaPN.txt

Applied instantiation
Original rule:
f180_0_ack_GT -> f180_0_ack_GT : arg1'=arg1-n0, (arg2 > 0 /\ 1+arg1-n0 > 0 /\ n0 >= 0), cost: n0
New rule:
f180_0_ack_GT -> f180_0_ack_GT : arg1'=0, (1 > 0 /\ arg2 > 0 /\ arg1 >= 0), cost: arg1

Applied acceleration
Original rule:
f180_0_ack_GT -> f180_0_ack_GT : arg2'=-1+arg2, arg1'=arg1P5, (arg2 > 0 /\ arg1P5 > 0 /\ arg1 > 0), cost: 1
New rule:
f180_0_ack_GT -> f180_0_ack_GT : arg2'=arg2-n1, arg1'=arg1P5, (-1+n1 >= 0 /\ arg1P5 > 0 /\ arg1 > 0 /\ 1+arg2-n1 > 0), cost: n1
Sub-proof via acceration calculus written to file:///tmp/tmpnam_khAAno.txt

Applied instantiation
Original rule:
f180_0_ack_GT -> f180_0_ack_GT : arg2'=arg2-n1, arg1'=arg1P5, (-1+n1 >= 0 /\ arg1P5 > 0 /\ arg1 > 0 /\ 1+arg2-n1 > 0), cost: n1
New rule:
f180_0_ack_GT -> f180_0_ack_GT : arg2'=0, arg1'=arg1P5, (1 > 0 /\ arg1P5 > 0 /\ arg1 > 0 /\ -1+arg2 >= 0), cost: arg2

Applied simplification
Original rule:
f180_0_ack_GT -> f180_0_ack_GT : arg1'=0, (1 > 0 /\ arg2 > 0 /\ arg1 >= 0), cost: arg1
New rule:
f180_0_ack_GT -> f180_0_ack_GT : arg1'=0, (arg2 > 0 /\ arg1 >= 0), cost: arg1

Applied simplification
Original rule:
f180_0_ack_GT -> f180_0_ack_GT : arg2'=0, arg1'=arg1P5, (1 > 0 /\ arg1P5 > 0 /\ arg1 > 0 /\ -1+arg2 >= 0), cost: arg2
New rule:
f180_0_ack_GT -> f180_0_ack_GT : arg2'=0, arg1'=arg1P5, (arg1P5 > 0 /\ arg1 > 0 /\ -1+arg2 >= 0), cost: arg2

Applied deletion
Removed the following rules: 10 11

Accelerated simple loops
Start location: __init
   2: f1_0_main_Load -> f180_0_ack_GT : arg2'=arg2P2, arg1'=arg1P2, (1+arg1P2 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ 1+arg2P2 > 0), cost: 1
   7: f1_0_main_Load -> f180_0_ack_GT : arg2'=0, arg1'=0, (arg2 == 0 /\ arg1 > 0), cost: 1
   8: f1_0_main_Load -> f180_0_ack_GT : arg2'=arg2P1, arg1'=0, (1+arg2P1 > 0 /\ arg1 > 0 /\ -1+arg2 == 0), cost: 1
   9: f180_0_ack_GT -> f180_0_ack_GT : arg2'=-1+arg2, arg1'=1, (arg2 > 0 /\ arg1 == 0), cost: 1
  14: f180_0_ack_GT -> f180_0_ack_GT : arg1'=0, (arg2 > 0 /\ arg1 >= 0), cost: arg1
  15: f180_0_ack_GT -> f180_0_ack_GT : arg2'=0, arg1'=arg1P5, (arg1P5 > 0 /\ arg1 > 0 /\ -1+arg2 >= 0), cost: arg2
   6: __init -> f1_0_main_Load : arg2'=arg2P6, arg1'=arg1P6, TRUE, cost: 1


Applied chaining
First rule:
f1_0_main_Load -> f180_0_ack_GT : arg2'=arg2P2, arg1'=arg1P2, (1+arg1P2 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ 1+arg2P2 > 0), cost: 1
Second rule:
f180_0_ack_GT -> f180_0_ack_GT : arg2'=-1+arg2, arg1'=1, (arg2 > 0 /\ arg1 == 0), cost: 1
New rule:
f1_0_main_Load -> f180_0_ack_GT : arg2'=-1+arg2P2, arg1'=1, (arg2P2 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 2

Applied chaining
First rule:
f1_0_main_Load -> f180_0_ack_GT : arg2'=arg2P1, arg1'=0, (1+arg2P1 > 0 /\ arg1 > 0 /\ -1+arg2 == 0), cost: 1
Second rule:
f180_0_ack_GT -> f180_0_ack_GT : arg2'=-1+arg2, arg1'=1, (arg2 > 0 /\ arg1 == 0), cost: 1
New rule:
f1_0_main_Load -> f180_0_ack_GT : arg2'=-1+arg2P1, arg1'=1, (arg1 > 0 /\ -1+arg2 == 0 /\ arg2P1 > 0), cost: 2

Applied chaining
First rule:
f1_0_main_Load -> f180_0_ack_GT : arg2'=arg2P2, arg1'=arg1P2, (1+arg1P2 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ 1+arg2P2 > 0), cost: 1
Second rule:
f180_0_ack_GT -> f180_0_ack_GT : arg1'=0, (arg2 > 0 /\ arg1 >= 0), cost: arg1
New rule:
f1_0_main_Load -> f180_0_ack_GT : arg2'=arg2P2, arg1'=0, (arg2P2 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ arg1P2 >= 0), cost: 1+arg1P2

Applied chaining
First rule:
f1_0_main_Load -> f180_0_ack_GT : arg2'=arg2P1, arg1'=0, (1+arg2P1 > 0 /\ arg1 > 0 /\ -1+arg2 == 0), cost: 1
Second rule:
f180_0_ack_GT -> f180_0_ack_GT : arg1'=0, (arg2 > 0 /\ arg1 >= 0), cost: arg1
New rule:
f1_0_main_Load -> f180_0_ack_GT : arg2'=arg2P1, arg1'=0, (arg1 > 0 /\ -1+arg2 == 0 /\ arg2P1 > 0), cost: 1

Applied chaining
First rule:
f1_0_main_Load -> f180_0_ack_GT : arg2'=arg2P2, arg1'=arg1P2, (1+arg1P2 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ 1+arg2P2 > 0), cost: 1
Second rule:
f180_0_ack_GT -> f180_0_ack_GT : arg2'=0, arg1'=arg1P5, (arg1P5 > 0 /\ arg1 > 0 /\ -1+arg2 >= 0), cost: arg2
New rule:
f1_0_main_Load -> f180_0_ack_GT : arg2'=0, arg1'=arg1P5, (-1+arg2P2 >= 0 /\ arg1P5 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1+arg2P2

Applied deletion
Removed the following rules: 9 14 15

Chained accelerated rules with incoming rules
Start location: __init
   2: f1_0_main_Load -> f180_0_ack_GT : arg2'=arg2P2, arg1'=arg1P2, (1+arg1P2 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ 1+arg2P2 > 0), cost: 1
   7: f1_0_main_Load -> f180_0_ack_GT : arg2'=0, arg1'=0, (arg2 == 0 /\ arg1 > 0), cost: 1
   8: f1_0_main_Load -> f180_0_ack_GT : arg2'=arg2P1, arg1'=0, (1+arg2P1 > 0 /\ arg1 > 0 /\ -1+arg2 == 0), cost: 1
  16: f1_0_main_Load -> f180_0_ack_GT : arg2'=-1+arg2P2, arg1'=1, (arg2P2 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 2
  17: f1_0_main_Load -> f180_0_ack_GT : arg2'=-1+arg2P1, arg1'=1, (arg1 > 0 /\ -1+arg2 == 0 /\ arg2P1 > 0), cost: 2
  18: f1_0_main_Load -> f180_0_ack_GT : arg2'=arg2P2, arg1'=0, (arg2P2 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ arg1P2 >= 0), cost: 1+arg1P2
  19: f1_0_main_Load -> f180_0_ack_GT : arg2'=arg2P1, arg1'=0, (arg1 > 0 /\ -1+arg2 == 0 /\ arg2P1 > 0), cost: 1
  20: f1_0_main_Load -> f180_0_ack_GT : arg2'=0, arg1'=arg1P5, (-1+arg2P2 >= 0 /\ arg1P5 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1+arg2P2
   6: __init -> f1_0_main_Load : arg2'=arg2P6, arg1'=arg1P6, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
  <empty>


Computing asymptotic complexity

Proved the following lower bound
Complexity:  Unknown
Cpx degree: ?

Solved cost: 0
Rule cost:   0

