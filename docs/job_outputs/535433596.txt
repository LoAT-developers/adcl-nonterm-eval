WORST_CASE(Omega(0),?)

Initial ITS
Start location: __init
   0: f1_0_main_Load -> f127_0_times_NE : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ 1+arg2P0 > 0), cost: 1
   1: f127_0_times_NE -> f127_0_times_NE : arg2'=arg2P1, arg1'=arg1P1, arg3'=arg3P1, (arg2 > 0 /\ -1+arg2-arg2P1 == 0 /\ arg1-arg1P1 == 0 /\ -1 < 0), cost: 1
   2: f127_0_times_NE -> f469_0_times_InvokeMethod : arg2'=arg2P2, arg1'=arg1P2, arg3'=arg3P2, (arg1-arg3P2 == 0 /\ 1-arg2 == 0 /\ -arg2P2 == 0 /\ 1-arg1P2 == 0), cost: 1
   3: f127_0_times_NE -> f469_0_times_InvokeMethod : arg2'=arg2P3, arg1'=arg1P3, arg3'=arg3P3, (arg2 > 0 /\ -arg3P3 == 0 /\ -arg2P3 == 0 /\ -arg1 == 0 /\ arg2-arg1P3 == 0 /\ -1 < 0), cost: 1
   4: f127_0_times_NE -> f469_0_times_InvokeMethod : arg2'=arg2P4, arg1'=arg1P4, arg3'=arg3P4, (arg2 > 0 /\ arg1-arg3P4 == 0 /\ -1 < 0 /\ arg2-arg1P4 == 0), cost: 1
   5: f127_0_times_NE -> f469_0_times_InvokeMethod : arg2'=arg2P5, arg1'=arg1P5, arg3'=arg3P5, (arg2 > 0 /\ arg2-arg1P5 == 0 /\ -arg1 == 0 /\ -arg3P5 == 0 /\ -1 < 0), cost: 1
   7: f469_0_times_InvokeMethod -> f484_0_plus_LE : arg2'=arg2P7, arg1'=arg1P7, arg3'=arg3P7, (-arg2P7+arg3 == 0 /\ arg1 > 0 /\ -arg1P7+arg2 == 0), cost: 1
   6: f218_0_times_Return -> f469_0_times_InvokeMethod : arg2'=arg2P6, arg1'=arg1P6, arg3'=arg3P6, (arg3-arg2P6 == 0 /\ -arg1P6+arg1 == 0 /\ arg2-arg3P6 == 0), cost: 1
   8: f484_0_plus_LE -> f484_0_plus_LE : arg2'=arg2P8, arg1'=arg1P8, arg3'=arg3P8, (arg2 > 0 /\ arg1-arg1P8 == 0 /\ -1+arg2-arg2P8 == 0 /\ -1 < 0), cost: 1
   9: f484_0_plus_LE -> f484_0_plus_LE : arg2'=arg2P9, arg1'=arg1P9, arg3'=arg3P9, (arg2-arg2P9 == 0 /\ arg1 > 0 /\ -1+arg2 < 0 /\ -1+arg1-arg1P9 == 0 /\ -1 < 0), cost: 1
  10: __init -> f1_0_main_Load : arg2'=arg2P10, arg1'=arg1P10, arg3'=arg3P10, TRUE, cost: 1


Removed unreachable rules and leafs
Start location: __init
   0: f1_0_main_Load -> f127_0_times_NE : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ 1+arg2P0 > 0), cost: 1
   1: f127_0_times_NE -> f127_0_times_NE : arg2'=arg2P1, arg1'=arg1P1, arg3'=arg3P1, (arg2 > 0 /\ -1+arg2-arg2P1 == 0 /\ arg1-arg1P1 == 0 /\ -1 < 0), cost: 1
   2: f127_0_times_NE -> f469_0_times_InvokeMethod : arg2'=arg2P2, arg1'=arg1P2, arg3'=arg3P2, (arg1-arg3P2 == 0 /\ 1-arg2 == 0 /\ -arg2P2 == 0 /\ 1-arg1P2 == 0), cost: 1
   3: f127_0_times_NE -> f469_0_times_InvokeMethod : arg2'=arg2P3, arg1'=arg1P3, arg3'=arg3P3, (arg2 > 0 /\ -arg3P3 == 0 /\ -arg2P3 == 0 /\ -arg1 == 0 /\ arg2-arg1P3 == 0 /\ -1 < 0), cost: 1
   4: f127_0_times_NE -> f469_0_times_InvokeMethod : arg2'=arg2P4, arg1'=arg1P4, arg3'=arg3P4, (arg2 > 0 /\ arg1-arg3P4 == 0 /\ -1 < 0 /\ arg2-arg1P4 == 0), cost: 1
   5: f127_0_times_NE -> f469_0_times_InvokeMethod : arg2'=arg2P5, arg1'=arg1P5, arg3'=arg3P5, (arg2 > 0 /\ arg2-arg1P5 == 0 /\ -arg1 == 0 /\ -arg3P5 == 0 /\ -1 < 0), cost: 1
   7: f469_0_times_InvokeMethod -> f484_0_plus_LE : arg2'=arg2P7, arg1'=arg1P7, arg3'=arg3P7, (-arg2P7+arg3 == 0 /\ arg1 > 0 /\ -arg1P7+arg2 == 0), cost: 1
   8: f484_0_plus_LE -> f484_0_plus_LE : arg2'=arg2P8, arg1'=arg1P8, arg3'=arg3P8, (arg2 > 0 /\ arg1-arg1P8 == 0 /\ -1+arg2-arg2P8 == 0 /\ -1 < 0), cost: 1
   9: f484_0_plus_LE -> f484_0_plus_LE : arg2'=arg2P9, arg1'=arg1P9, arg3'=arg3P9, (arg2-arg2P9 == 0 /\ arg1 > 0 /\ -1+arg2 < 0 /\ -1+arg1-arg1P9 == 0 /\ -1 < 0), cost: 1
  10: __init -> f1_0_main_Load : arg2'=arg2P10, arg1'=arg1P10, arg3'=arg3P10, TRUE, cost: 1


Applied preprocessing
Original rule:
f127_0_times_NE -> f127_0_times_NE : arg2'=arg2P1, arg1'=arg1P1, arg3'=arg3P1, (arg2 > 0 /\ -1+arg2-arg2P1 == 0 /\ arg1-arg1P1 == 0 /\ -1 < 0), cost: 1
New rule:
f127_0_times_NE -> f127_0_times_NE : arg2'=-1+arg2, arg3'=arg3P1, arg2 > 0, cost: 1

Applied preprocessing
Original rule:
f127_0_times_NE -> f469_0_times_InvokeMethod : arg2'=arg2P2, arg1'=arg1P2, arg3'=arg3P2, (arg1-arg3P2 == 0 /\ 1-arg2 == 0 /\ -arg2P2 == 0 /\ 1-arg1P2 == 0), cost: 1
New rule:
f127_0_times_NE -> f469_0_times_InvokeMethod : arg2'=0, arg1'=1, arg3'=arg1, -1+arg2 == 0, cost: 1

Applied preprocessing
Original rule:
f127_0_times_NE -> f469_0_times_InvokeMethod : arg2'=arg2P3, arg1'=arg1P3, arg3'=arg3P3, (arg2 > 0 /\ -arg3P3 == 0 /\ -arg2P3 == 0 /\ -arg1 == 0 /\ arg2-arg1P3 == 0 /\ -1 < 0), cost: 1
New rule:
f127_0_times_NE -> f469_0_times_InvokeMethod : arg2'=0, arg1'=arg2, arg3'=0, (arg2 > 0 /\ arg1 == 0), cost: 1

Applied preprocessing
Original rule:
f127_0_times_NE -> f469_0_times_InvokeMethod : arg2'=arg2P4, arg1'=arg1P4, arg3'=arg3P4, (arg2 > 0 /\ arg1-arg3P4 == 0 /\ -1 < 0 /\ arg2-arg1P4 == 0), cost: 1
New rule:
f127_0_times_NE -> f469_0_times_InvokeMethod : arg2'=arg2P4, arg1'=arg2, arg3'=arg1, arg2 > 0, cost: 1

Applied preprocessing
Original rule:
f127_0_times_NE -> f469_0_times_InvokeMethod : arg2'=arg2P5, arg1'=arg1P5, arg3'=arg3P5, (arg2 > 0 /\ arg2-arg1P5 == 0 /\ -arg1 == 0 /\ -arg3P5 == 0 /\ -1 < 0), cost: 1
New rule:
f127_0_times_NE -> f469_0_times_InvokeMethod : arg2'=arg2P5, arg1'=arg2, arg3'=0, (arg2 > 0 /\ arg1 == 0), cost: 1

Applied preprocessing
Original rule:
f469_0_times_InvokeMethod -> f484_0_plus_LE : arg2'=arg2P7, arg1'=arg1P7, arg3'=arg3P7, (-arg2P7+arg3 == 0 /\ arg1 > 0 /\ -arg1P7+arg2 == 0), cost: 1
New rule:
f469_0_times_InvokeMethod -> f484_0_plus_LE : arg2'=arg3, arg1'=arg2, arg3'=arg3P7, arg1 > 0, cost: 1

Applied preprocessing
Original rule:
f484_0_plus_LE -> f484_0_plus_LE : arg2'=arg2P8, arg1'=arg1P8, arg3'=arg3P8, (arg2 > 0 /\ arg1-arg1P8 == 0 /\ -1+arg2-arg2P8 == 0 /\ -1 < 0), cost: 1
New rule:
f484_0_plus_LE -> f484_0_plus_LE : arg2'=-1+arg2, arg3'=arg3P8, arg2 > 0, cost: 1

Applied preprocessing
Original rule:
f484_0_plus_LE -> f484_0_plus_LE : arg2'=arg2P9, arg1'=arg1P9, arg3'=arg3P9, (arg2-arg2P9 == 0 /\ arg1 > 0 /\ -1+arg2 < 0 /\ -1+arg1-arg1P9 == 0 /\ -1 < 0), cost: 1
New rule:
f484_0_plus_LE -> f484_0_plus_LE : arg1'=-1+arg1, arg3'=arg3P9, (arg1 > 0 /\ 1-arg2 > 0), cost: 1

Simplified rules
Start location: __init
   0: f1_0_main_Load -> f127_0_times_NE : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ 1+arg2P0 > 0), cost: 1
  11: f127_0_times_NE -> f127_0_times_NE : arg2'=-1+arg2, arg3'=arg3P1, arg2 > 0, cost: 1
  12: f127_0_times_NE -> f469_0_times_InvokeMethod : arg2'=0, arg1'=1, arg3'=arg1, -1+arg2 == 0, cost: 1
  13: f127_0_times_NE -> f469_0_times_InvokeMethod : arg2'=0, arg1'=arg2, arg3'=0, (arg2 > 0 /\ arg1 == 0), cost: 1
  14: f127_0_times_NE -> f469_0_times_InvokeMethod : arg2'=arg2P4, arg1'=arg2, arg3'=arg1, arg2 > 0, cost: 1
  15: f127_0_times_NE -> f469_0_times_InvokeMethod : arg2'=arg2P5, arg1'=arg2, arg3'=0, (arg2 > 0 /\ arg1 == 0), cost: 1
  16: f469_0_times_InvokeMethod -> f484_0_plus_LE : arg2'=arg3, arg1'=arg2, arg3'=arg3P7, arg1 > 0, cost: 1
  17: f484_0_plus_LE -> f484_0_plus_LE : arg2'=-1+arg2, arg3'=arg3P8, arg2 > 0, cost: 1
  18: f484_0_plus_LE -> f484_0_plus_LE : arg1'=-1+arg1, arg3'=arg3P9, (arg1 > 0 /\ 1-arg2 > 0), cost: 1
  10: __init -> f1_0_main_Load : arg2'=arg2P10, arg1'=arg1P10, arg3'=arg3P10, TRUE, cost: 1


Applied acceleration
Original rule:
f127_0_times_NE -> f127_0_times_NE : arg2'=-1+arg2, arg3'=arg3P1, arg2 > 0, cost: 1
New rule:
f127_0_times_NE -> f127_0_times_NE : arg2'=arg2-n, arg3'=arg3P1, (1+arg2-n > 0 /\ -1+n >= 0), cost: n
Sub-proof via acceration calculus written to file:///tmp/tmpnam_mIlNem.txt

Applied instantiation
Original rule:
f127_0_times_NE -> f127_0_times_NE : arg2'=arg2-n, arg3'=arg3P1, (1+arg2-n > 0 /\ -1+n >= 0), cost: n
New rule:
f127_0_times_NE -> f127_0_times_NE : arg2'=0, arg3'=arg3P1, (1 > 0 /\ -1+arg2 >= 0), cost: arg2

Applied simplification
Original rule:
f127_0_times_NE -> f127_0_times_NE : arg2'=0, arg3'=arg3P1, (1 > 0 /\ -1+arg2 >= 0), cost: arg2
New rule:
f127_0_times_NE -> f127_0_times_NE : arg2'=0, arg3'=arg3P1, -1+arg2 >= 0, cost: arg2

Applied deletion
Removed the following rules: 11

Applied acceleration
Original rule:
f484_0_plus_LE -> f484_0_plus_LE : arg2'=-1+arg2, arg3'=arg3P8, arg2 > 0, cost: 1
New rule:
f484_0_plus_LE -> f484_0_plus_LE : arg2'=arg2-n0, arg3'=arg3P8, (-1+n0 >= 0 /\ 1+arg2-n0 > 0), cost: n0
Sub-proof via acceration calculus written to file:///tmp/tmpnam_CEDjBD.txt

Applied instantiation
Original rule:
f484_0_plus_LE -> f484_0_plus_LE : arg2'=arg2-n0, arg3'=arg3P8, (-1+n0 >= 0 /\ 1+arg2-n0 > 0), cost: n0
New rule:
f484_0_plus_LE -> f484_0_plus_LE : arg2'=0, arg3'=arg3P8, (1 > 0 /\ -1+arg2 >= 0), cost: arg2

Applied acceleration
Original rule:
f484_0_plus_LE -> f484_0_plus_LE : arg1'=-1+arg1, arg3'=arg3P9, (arg1 > 0 /\ 1-arg2 > 0), cost: 1
New rule:
f484_0_plus_LE -> f484_0_plus_LE : arg1'=-n1+arg1, arg3'=arg3P9, (-1+n1 >= 0 /\ 1-arg2 > 0 /\ 1-n1+arg1 > 0), cost: n1
Sub-proof via acceration calculus written to file:///tmp/tmpnam_lcaAdK.txt

Applied instantiation
Original rule:
f484_0_plus_LE -> f484_0_plus_LE : arg1'=-n1+arg1, arg3'=arg3P9, (-1+n1 >= 0 /\ 1-arg2 > 0 /\ 1-n1+arg1 > 0), cost: n1
New rule:
f484_0_plus_LE -> f484_0_plus_LE : arg1'=0, arg3'=arg3P9, (1 > 0 /\ 1-arg2 > 0 /\ -1+arg1 >= 0), cost: arg1

Applied simplification
Original rule:
f484_0_plus_LE -> f484_0_plus_LE : arg2'=0, arg3'=arg3P8, (1 > 0 /\ -1+arg2 >= 0), cost: arg2
New rule:
f484_0_plus_LE -> f484_0_plus_LE : arg2'=0, arg3'=arg3P8, -1+arg2 >= 0, cost: arg2

Applied simplification
Original rule:
f484_0_plus_LE -> f484_0_plus_LE : arg1'=0, arg3'=arg3P9, (1 > 0 /\ 1-arg2 > 0 /\ -1+arg1 >= 0), cost: arg1
New rule:
f484_0_plus_LE -> f484_0_plus_LE : arg1'=0, arg3'=arg3P9, (1-arg2 > 0 /\ -1+arg1 >= 0), cost: arg1

Applied deletion
Removed the following rules: 17 18

Accelerated simple loops
Start location: __init
   0: f1_0_main_Load -> f127_0_times_NE : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ 1+arg2P0 > 0), cost: 1
  12: f127_0_times_NE -> f469_0_times_InvokeMethod : arg2'=0, arg1'=1, arg3'=arg1, -1+arg2 == 0, cost: 1
  13: f127_0_times_NE -> f469_0_times_InvokeMethod : arg2'=0, arg1'=arg2, arg3'=0, (arg2 > 0 /\ arg1 == 0), cost: 1
  14: f127_0_times_NE -> f469_0_times_InvokeMethod : arg2'=arg2P4, arg1'=arg2, arg3'=arg1, arg2 > 0, cost: 1
  15: f127_0_times_NE -> f469_0_times_InvokeMethod : arg2'=arg2P5, arg1'=arg2, arg3'=0, (arg2 > 0 /\ arg1 == 0), cost: 1
  20: f127_0_times_NE -> f127_0_times_NE : arg2'=0, arg3'=arg3P1, -1+arg2 >= 0, cost: arg2
  16: f469_0_times_InvokeMethod -> f484_0_plus_LE : arg2'=arg3, arg1'=arg2, arg3'=arg3P7, arg1 > 0, cost: 1
  23: f484_0_plus_LE -> f484_0_plus_LE : arg2'=0, arg3'=arg3P8, -1+arg2 >= 0, cost: arg2
  24: f484_0_plus_LE -> f484_0_plus_LE : arg1'=0, arg3'=arg3P9, (1-arg2 > 0 /\ -1+arg1 >= 0), cost: arg1
  10: __init -> f1_0_main_Load : arg2'=arg2P10, arg1'=arg1P10, arg3'=arg3P10, TRUE, cost: 1


Applied chaining
First rule:
f1_0_main_Load -> f127_0_times_NE : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ 1+arg2P0 > 0), cost: 1
Second rule:
f127_0_times_NE -> f127_0_times_NE : arg2'=0, arg3'=arg3P1, -1+arg2 >= 0, cost: arg2
New rule:
f1_0_main_Load -> f127_0_times_NE : arg2'=0, arg1'=arg1P0, arg3'=arg3P1, (-1+arg2P0 >= 0 /\ 1+arg1P0 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1+arg2P0

Applied deletion
Removed the following rules: 20

Applied chaining
First rule:
f469_0_times_InvokeMethod -> f484_0_plus_LE : arg2'=arg3, arg1'=arg2, arg3'=arg3P7, arg1 > 0, cost: 1
Second rule:
f484_0_plus_LE -> f484_0_plus_LE : arg2'=0, arg3'=arg3P8, -1+arg2 >= 0, cost: arg2
New rule:
f469_0_times_InvokeMethod -> f484_0_plus_LE : arg2'=0, arg1'=arg2, arg3'=arg3P8, (-1+arg3 >= 0 /\ arg1 > 0), cost: 1+arg3

Applied chaining
First rule:
f469_0_times_InvokeMethod -> f484_0_plus_LE : arg2'=arg3, arg1'=arg2, arg3'=arg3P7, arg1 > 0, cost: 1
Second rule:
f484_0_plus_LE -> f484_0_plus_LE : arg1'=0, arg3'=arg3P9, (1-arg2 > 0 /\ -1+arg1 >= 0), cost: arg1
New rule:
f469_0_times_InvokeMethod -> f484_0_plus_LE : arg2'=arg3, arg1'=0, arg3'=arg3P9, (1-arg3 > 0 /\ arg1 > 0 /\ -1+arg2 >= 0), cost: 1+arg2

Applied deletion
Removed the following rules: 23 24

Chained accelerated rules with incoming rules
Start location: __init
   0: f1_0_main_Load -> f127_0_times_NE : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ 1+arg2P0 > 0), cost: 1
  25: f1_0_main_Load -> f127_0_times_NE : arg2'=0, arg1'=arg1P0, arg3'=arg3P1, (-1+arg2P0 >= 0 /\ 1+arg1P0 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1+arg2P0
  12: f127_0_times_NE -> f469_0_times_InvokeMethod : arg2'=0, arg1'=1, arg3'=arg1, -1+arg2 == 0, cost: 1
  13: f127_0_times_NE -> f469_0_times_InvokeMethod : arg2'=0, arg1'=arg2, arg3'=0, (arg2 > 0 /\ arg1 == 0), cost: 1
  14: f127_0_times_NE -> f469_0_times_InvokeMethod : arg2'=arg2P4, arg1'=arg2, arg3'=arg1, arg2 > 0, cost: 1
  15: f127_0_times_NE -> f469_0_times_InvokeMethod : arg2'=arg2P5, arg1'=arg2, arg3'=0, (arg2 > 0 /\ arg1 == 0), cost: 1
  16: f469_0_times_InvokeMethod -> f484_0_plus_LE : arg2'=arg3, arg1'=arg2, arg3'=arg3P7, arg1 > 0, cost: 1
  26: f469_0_times_InvokeMethod -> f484_0_plus_LE : arg2'=0, arg1'=arg2, arg3'=arg3P8, (-1+arg3 >= 0 /\ arg1 > 0), cost: 1+arg3
  27: f469_0_times_InvokeMethod -> f484_0_plus_LE : arg2'=arg3, arg1'=0, arg3'=arg3P9, (1-arg3 > 0 /\ arg1 > 0 /\ -1+arg2 >= 0), cost: 1+arg2
  10: __init -> f1_0_main_Load : arg2'=arg2P10, arg1'=arg1P10, arg3'=arg3P10, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
  <empty>


Computing asymptotic complexity

Proved the following lower bound
Complexity:  Unknown
Cpx degree: ?

Solved cost: 0
Rule cost:   0

