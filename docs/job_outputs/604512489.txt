unknown

Initial ITS

Start location: [1]
Program variables: tmp x xtmp y
   0: [1] -> [2] : x'=nondet, T, cost: 1
   1: [2] -> [3] : y'=nondet1, T, cost: 1
   2: [3] -> [4] : (y > 0 /\ x > 0), cost: 1
  12: [3] -> [12] : (y <= 0 \/ x <= 0), cost: 1
   3: [4] -> [5] : tmp'=y, T, cost: 1
   4: [5] -> [6] : xtmp'=x, T, cost: 1
   5: [6] -> [7] : (xtmp-y >= 0 /\ y > 0), cost: 1
   8: [6] -> [9] : (xtmp-y < 0 \/ y <= 0), cost: 1
   6: [7] -> [8] : xtmp'=xtmp-y, T, cost: 1
   7: [8] -> [6] : T, cost: 1
   9: [9] -> [10] : y'=xtmp, T, cost: 1
  10: [10] -> [11] : x'=tmp, T, cost: 1
  11: [11] -> [3] : T, cost: 1

Chained Linear Paths

Start location: [1]
Program variables: tmp x xtmp y
  13: [1] -> [3] : x'=nondet, y'=nondet1, T, cost: 1
  12: [3] -> [12] : (y <= 0 \/ x <= 0), cost: 1
  15: [3] -> [6] : tmp'=y, xtmp'=x, (y > 0 /\ x > 0), cost: 1
  18: [6] -> [6] : xtmp'=xtmp-y, (xtmp-y >= 0 /\ y > 0), cost: 1
  20: [6] -> [3] : x'=tmp, y'=xtmp, (xtmp-y < 0 \/ y <= 0), cost: 1

	Eliminating location [2] by chaining:

	Applied chaining

	First rule:
	[1] -> [2] : x'=nondet, T, cost: 1
	Second rule:
	[2] -> [3] : y'=nondet1, T, cost: 1
	New rule:
	[1] -> [3] : x'=nondet, y'=nondet1, T, cost: 1
	
	Applied deletion

	Removed the following rules: 0 1
	
	Eliminating location [4] by chaining:

	Applied chaining

	First rule:
	[3] -> [4] : (y > 0 /\ x > 0), cost: 1
	Second rule:
	[4] -> [5] : tmp'=y, T, cost: 1
	New rule:
	[3] -> [5] : tmp'=y, (y > 0 /\ x > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 2 3
	
	Eliminating location [5] by chaining:

	Applied chaining

	First rule:
	[3] -> [5] : tmp'=y, (y > 0 /\ x > 0), cost: 1
	Second rule:
	[5] -> [6] : xtmp'=x, T, cost: 1
	New rule:
	[3] -> [6] : tmp'=y, xtmp'=x, (y > 0 /\ x > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 4 14
	
	Eliminating location [7] by chaining:

	Applied chaining

	First rule:
	[6] -> [7] : (xtmp-y >= 0 /\ y > 0), cost: 1
	Second rule:
	[7] -> [8] : xtmp'=xtmp-y, T, cost: 1
	New rule:
	[6] -> [8] : xtmp'=xtmp-y, (xtmp-y >= 0 /\ y > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 5 6
	
	Eliminating location [9] by chaining:

	Applied chaining

	First rule:
	[6] -> [9] : (xtmp-y < 0 \/ y <= 0), cost: 1
	Second rule:
	[9] -> [10] : y'=xtmp, T, cost: 1
	New rule:
	[6] -> [10] : y'=xtmp, (xtmp-y < 0 \/ y <= 0), cost: 1
	
	Applied deletion

	Removed the following rules: 8 9
	
	Eliminating location [8] by chaining:

	Applied chaining

	First rule:
	[6] -> [8] : xtmp'=xtmp-y, (xtmp-y >= 0 /\ y > 0), cost: 1
	Second rule:
	[8] -> [6] : T, cost: 1
	New rule:
	[6] -> [6] : xtmp'=xtmp-y, (xtmp-y >= 0 /\ y > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 7 16
	
	Eliminating location [10] by chaining:

	Applied chaining

	First rule:
	[6] -> [10] : y'=xtmp, (xtmp-y < 0 \/ y <= 0), cost: 1
	Second rule:
	[10] -> [11] : x'=tmp, T, cost: 1
	New rule:
	[6] -> [11] : x'=tmp, y'=xtmp, (xtmp-y < 0 \/ y <= 0), cost: 1
	
	Applied deletion

	Removed the following rules: 10 17
	
	Eliminating location [11] by chaining:

	Applied chaining

	First rule:
	[6] -> [11] : x'=tmp, y'=xtmp, (xtmp-y < 0 \/ y <= 0), cost: 1
	Second rule:
	[11] -> [3] : T, cost: 1
	New rule:
	[6] -> [3] : x'=tmp, y'=xtmp, (xtmp-y < 0 \/ y <= 0), cost: 1
	
	Applied deletion

	Removed the following rules: 11 19

Step with 13

	Trace

	13[T]
	
	Blocked

	[{}, {}]

Step with 12

	Trace

	13[T], 12[(y <= 0)]
	
	Blocked

	[{}, {}, {}]

Backtrack

	Trace

	13[T]
	
	Blocked

	[{}, {12[y <= 0]}]

Step with 12

	Trace

	13[T], 12[(x <= 0)]
	
	Blocked

	[{}, {12[y <= 0]}, {}]

Backtrack

	Trace

	13[T]
	
	Blocked

	[{}, {12[(y <= 0 /\ x <= 0)]}]

Step with 15

	Trace

	13[T], 15[(y > 0 /\ x > 0)]
	
	Blocked

	[{}, {12[T]}, {}]

Step with 18

	Trace

	13[T], 15[(y > 0 /\ x > 0)], 18[(xtmp-y >= 0 /\ y > 0)]
	
	Blocked

	[{}, {12[T]}, {}, {}]

Accelerate

Start location: [1]
Program variables: tmp x xtmp y
  13: [1] -> [3] : x'=nondet, y'=nondet1, T, cost: 1
  12: [3] -> [12] : (y <= 0 \/ x <= 0), cost: 1
  15: [3] -> [6] : tmp'=y, xtmp'=x, (y > 0 /\ x > 0), cost: 1
  18: [6] -> [6] : xtmp'=xtmp-y, (xtmp-y >= 0 /\ y > 0), cost: 1
  20: [6] -> [3] : x'=tmp, y'=xtmp, (xtmp-y < 0 \/ y <= 0), cost: 1
  21: [6] -> [6] : xtmp'=-n*y+xtmp, (-1+n >= 0 /\ -(-1+n)*y+xtmp-y >= 0 /\ y > 0), cost: 1

	Loop Acceleration

	Original rule:
	[6] -> [6] : xtmp'=xtmp-y, (xtmp-y >= 0 /\ y > 0), cost: 1
	New rule:
	[6] -> [6] : xtmp'=-n*y+xtmp, (-1+n >= 0 /\ -(-1+n)*y+xtmp-y >= 0 /\ y > 0), cost: 1

		xtmp-y >= 0 [0]: montonic decrease yields -(-1+n)*y+xtmp-y >= 0, dependencies: y > 0
		
		xtmp-y >= 0 [1]: eventual decrease yields (xtmp-y >= 0 /\ -(-1+n)*y+xtmp-y >= 0), dependencies: y > 0
		
		xtmp-y >= 0 [2]: eventual increase yields (xtmp-y >= 0 /\ y <= 0), dependencies: y > 0
		
		y > 0 [0]: monotonic increase yields y > 0
		
		Replacement map: {xtmp-y >= 0 -> -(-1+n)*y+xtmp-y >= 0, y > 0 -> y > 0}

	Trace

	13[T], 15[(y > 0 /\ x > 0)], 21[(-1+n >= 0 /\ -(-1+n)*y+xtmp-y >= 0 /\ y > 0)]
	
	Blocked

	[{}, {12[T]}, {}, {18[T], 21[T]}]

Step with 20

	Trace

	13[T], 15[(y > 0 /\ x > 0)], 21[(-1+n >= 0 /\ -(-1+n)*y+xtmp-y >= 0 /\ y > 0)], 20[(xtmp-y < 0)]
	
	Blocked

	[{}, {12[T]}, {}, {18[T], 21[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 15

	Trace

	13[T], 15[(y > 0 /\ x > 0)], 21[(-1+n >= 0 /\ -(-1+n)*y+xtmp-y >= 0 /\ y > 0)], 20[(xtmp-y < 0)], 15[(y > 0 /\ x > 0)]
	
	Blocked

	[{}, {12[T]}, {}, {18[T], 21[T]}, {}, {}]

Accelerate and Drop

Start location: [1]
Program variables: tmp x xtmp y
  13: [1] -> [3] : x'=nondet, y'=nondet1, T, cost: 1
  12: [3] -> [12] : (y <= 0 \/ x <= 0), cost: 1
  15: [3] -> [6] : tmp'=y, xtmp'=x, (y > 0 /\ x > 0), cost: 1
  18: [6] -> [6] : xtmp'=xtmp-y, (xtmp-y >= 0 /\ y > 0), cost: 1
  20: [6] -> [3] : x'=tmp, y'=xtmp, (xtmp-y < 0 \/ y <= 0), cost: 1
  21: [6] -> [6] : xtmp'=-n*y+xtmp, (-1+n >= 0 /\ -(-1+n)*y+xtmp-y >= 0 /\ y > 0), cost: 1
  22: [6] -> [6] : x'=xtmp, y'=tmp, (tmp > 0 /\ xtmp > 0 /\ xtmp-y < 0 /\ tmp-xtmp < 0), cost: 1

	unrolling

	Original rule:
	[6] -> [6] : tmp'=xtmp, x'=tmp, xtmp'=tmp, y'=xtmp, (tmp > 0 /\ xtmp > 0 /\ xtmp-y < 0), cost: 1
	New rule:
	[6] -> [6] : tmp'=tmp, x'=xtmp, xtmp'=xtmp, y'=tmp, (tmp > 0 /\ xtmp > 0 /\ xtmp-y < 0 /\ tmp-xtmp < 0), cost: 1
	rule cannot be iterated more than once
	
	Removed Trivial Updates

	Original rule:
	[6] -> [6] : tmp'=tmp, x'=xtmp, xtmp'=xtmp, y'=tmp, (tmp > 0 /\ xtmp > 0 /\ xtmp-y < 0 /\ tmp-xtmp < 0), cost: 1
	New rule:
	[6] -> [6] : x'=xtmp, y'=tmp, (tmp > 0 /\ xtmp > 0 /\ xtmp-y < 0 /\ tmp-xtmp < 0), cost: 1

	Trace

	13[T], 15[(y > 0 /\ x > 0)], 21[(-1+n >= 0 /\ -(-1+n)*y+xtmp-y >= 0 /\ y > 0)]
	
	Blocked

	[{}, {12[T]}, {}, {18[T], 21[T]}]

Step with 20

	Trace

	13[T], 15[(y > 0 /\ x > 0)], 21[(-1+n >= 0 /\ -(-1+n)*y+xtmp-y >= 0 /\ y > 0)], 20[(xtmp-y < 0)]
	
	Blocked

	[{}, {12[T]}, {}, {18[T], 21[T]}, {}]

Covered

	Trace

	13[T], 15[(y > 0 /\ x > 0)], 21[(-1+n >= 0 /\ -(-1+n)*y+xtmp-y >= 0 /\ y > 0)]
	
	Blocked

	[{}, {12[T]}, {}, {18[T], 20[xtmp-y < 0], 21[T]}]

Backtrack

	Trace

	13[T], 15[(y > 0 /\ x > 0)]
	
	Blocked

	[{}, {12[T]}, {21[T]}]

Step with 20

	Trace

	13[T], 15[(y > 0 /\ x > 0)], 20[(xtmp-y < 0)]
	
	Blocked

	[{}, {12[T]}, {21[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 15

	Trace

	13[T], 15[(y > 0 /\ x > 0)], 20[(xtmp-y < 0)], 15[(y > 0 /\ x > 0)]
	
	Blocked

	[{}, {12[T]}, {21[T]}, {}, {}]

Covered

	Trace

	13[T], 15[(y > 0 /\ x > 0)], 20[(xtmp-y < 0)]
	
	Blocked

	[{}, {12[T]}, {21[T]}, {15[T]}]

Backtrack

	Trace

	13[T], 15[(y > 0 /\ x > 0)]
	
	Blocked

	[{}, {12[T]}, {20[xtmp-y < 0], 21[T]}]

Step with 18

	Trace

	13[T], 15[(y > 0 /\ x > 0)], 18[(xtmp-y >= 0 /\ y > 0)]
	
	Blocked

	[{}, {12[T]}, {20[T], 21[T], 22[T]}, {}]

Covered

	Trace

	13[T], 15[(y > 0 /\ x > 0)]
	
	Blocked

	[{}, {12[T]}, {18[T], 20[T], 21[T], 22[T]}]

Backtrack

	Trace

	13[T]
	
	Blocked

	[{}, {12[T], 15[T]}]

Backtrack

	Trace

	Blocked

	[{13[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
