unknown

Initial ITS

Start location: __init
Program variables: arg1 arg2
   0: f1_0_main_Load -> f1_0_main_Load\' : arg1'=arg1p1, arg2'=arg2p1, (1+x2 > 0 /\ arg1-arg1p1 == 0 /\ arg1 > 0 /\ arg2-arg2p1 == 0 /\ arg2 > 0), cost: 1
   1: f1_0_main_Load\' -> f126_0_test_LE : arg1'=arg1p2, arg2'=arg2p2, (x6-100*x7 >= 0 /\ arg1 > 0 /\ x6-100*x7-arg1p2 == 0 /\ 1+x6 > 0 /\ arg2 > 0 /\ -100+x6-100*x7 < 0), cost: 1
   2: f126_0_test_LE -> f126_0_test_LE : arg1'=arg1p3, arg2'=arg2p3, (arg1 > 0 /\ -1+arg1-arg1p3 == 0), cost: 1
   3: __init -> f1_0_main_Load : arg1'=arg1p4, arg2'=arg2p4, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2
   2: f126_0_test_LE -> f126_0_test_LE : arg1'=arg1p3, arg2'=arg2p3, (arg1 > 0 /\ -1+arg1-arg1p3 == 0), cost: 1
   5: __init -> f126_0_test_LE : arg1'=arg1p2, arg2'=arg2p2, (arg1p4-arg1p1 == 0 /\ x6-100*x7 >= 0 /\ arg1p4 > 0 /\ 1+x2 > 0 /\ arg2p4-arg2p1 == 0 /\ arg2p4 > 0 /\ x6-100*x7-arg1p2 == 0 /\ arg1p1 > 0 /\ 1+x6 > 0 /\ -100+x6-100*x7 < 0 /\ arg2p1 > 0), cost: 1

	Eliminating location f1_0_main_Load by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_Load : arg1'=arg1p4, arg2'=arg2p4, T, cost: 1
	Second rule:
	f1_0_main_Load -> f1_0_main_Load\' : arg1'=arg1p1, arg2'=arg2p1, (1+x2 > 0 /\ arg1-arg1p1 == 0 /\ arg1 > 0 /\ arg2-arg2p1 == 0 /\ arg2 > 0), cost: 1
	New rule:
	__init -> f1_0_main_Load\' : arg1'=arg1p1, arg2'=arg2p1, (arg1p4-arg1p1 == 0 /\ arg1p4 > 0 /\ 1+x2 > 0 /\ arg2p4-arg2p1 == 0 /\ arg2p4 > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 3
	
	Eliminating location f1_0_main_Load\' by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_Load\' : arg1'=arg1p1, arg2'=arg2p1, (arg1p4-arg1p1 == 0 /\ arg1p4 > 0 /\ 1+x2 > 0 /\ arg2p4-arg2p1 == 0 /\ arg2p4 > 0), cost: 1
	Second rule:
	f1_0_main_Load\' -> f126_0_test_LE : arg1'=arg1p2, arg2'=arg2p2, (x6-100*x7 >= 0 /\ arg1 > 0 /\ x6-100*x7-arg1p2 == 0 /\ 1+x6 > 0 /\ arg2 > 0 /\ -100+x6-100*x7 < 0), cost: 1
	New rule:
	__init -> f126_0_test_LE : arg1'=arg1p2, arg2'=arg2p2, (arg1p4-arg1p1 == 0 /\ x6-100*x7 >= 0 /\ arg1p4 > 0 /\ 1+x2 > 0 /\ arg2p4-arg2p1 == 0 /\ arg2p4 > 0 /\ x6-100*x7-arg1p2 == 0 /\ arg1p1 > 0 /\ 1+x6 > 0 /\ -100+x6-100*x7 < 0 /\ arg2p1 > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 1 4

Simplified Transitions

Start location: __init
Program variables: arg1 arg2
   6: f126_0_test_LE -> f126_0_test_LE : arg1'=-1+arg1, arg2'=arg2p3, arg1 > 0, cost: 1
   7: __init -> f126_0_test_LE : arg1'=x6-100*x7, arg2'=arg2p2, (x6-100*x7 >= 0 /\ 1+x6 > 0 /\ -100+x6-100*x7 < 0), cost: 1

	Propagated Equalities

	Original rule:
	f126_0_test_LE -> f126_0_test_LE : arg1'=arg1p3, arg2'=arg2p3, (arg1 > 0 /\ -1+arg1-arg1p3 == 0), cost: 1
	New rule:
	f126_0_test_LE -> f126_0_test_LE : arg1'=-1+arg1, arg2'=arg2p3, (0 == 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg1p3 = -1+arg1
		
	Simplified Guard

	Original rule:
	f126_0_test_LE -> f126_0_test_LE : arg1'=-1+arg1, arg2'=arg2p3, (0 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f126_0_test_LE -> f126_0_test_LE : arg1'=-1+arg1, arg2'=arg2p3, arg1 > 0, cost: 1
	
	Propagated Equalities

	Original rule:
	__init -> f126_0_test_LE : arg1'=arg1p2, arg2'=arg2p2, (arg1p4-arg1p1 == 0 /\ x6-100*x7 >= 0 /\ arg1p4 > 0 /\ 1+x2 > 0 /\ arg2p4-arg2p1 == 0 /\ arg2p4 > 0 /\ x6-100*x7-arg1p2 == 0 /\ arg1p1 > 0 /\ 1+x6 > 0 /\ -100+x6-100*x7 < 0 /\ arg2p1 > 0), cost: 1
	New rule:
	__init -> f126_0_test_LE : arg1'=x6-100*x7, arg2'=arg2p2, (0 == 0 /\ arg1p4-arg1p1 == 0 /\ x6-100*x7 >= 0 /\ arg1p4 > 0 /\ 1+x2 > 0 /\ arg2p4-arg2p1 == 0 /\ arg2p4 > 0 /\ arg1p1 > 0 /\ 1+x6 > 0 /\ -100+x6-100*x7 < 0 /\ arg2p1 > 0), cost: 1
	
		propagated equality arg1p2 = x6-100*x7
		
	Propagated Equalities

	Original rule:
	__init -> f126_0_test_LE : arg1'=x6-100*x7, arg2'=arg2p2, (0 == 0 /\ arg1p4-arg1p1 == 0 /\ x6-100*x7 >= 0 /\ arg1p4 > 0 /\ 1+x2 > 0 /\ arg2p4-arg2p1 == 0 /\ arg2p4 > 0 /\ arg1p1 > 0 /\ 1+x6 > 0 /\ -100+x6-100*x7 < 0 /\ arg2p1 > 0), cost: 1
	New rule:
	__init -> f126_0_test_LE : arg1'=x6-100*x7, arg2'=arg2p2, (0 == 0 /\ x6-100*x7 >= 0 /\ arg1p4 > 0 /\ 1+x2 > 0 /\ arg2p4 > 0 /\ 1+x6 > 0 /\ -100+x6-100*x7 < 0), cost: 1
	
		propagated equality arg1p1 = arg1p4
		
		propagated equality arg2p1 = arg2p4
		
	Simplified Guard

	Original rule:
	__init -> f126_0_test_LE : arg1'=x6-100*x7, arg2'=arg2p2, (0 == 0 /\ x6-100*x7 >= 0 /\ arg1p4 > 0 /\ 1+x2 > 0 /\ arg2p4 > 0 /\ 1+x6 > 0 /\ -100+x6-100*x7 < 0), cost: 1
	New rule:
	__init -> f126_0_test_LE : arg1'=x6-100*x7, arg2'=arg2p2, (x6-100*x7 >= 0 /\ arg1p4 > 0 /\ 1+x2 > 0 /\ arg2p4 > 0 /\ 1+x6 > 0 /\ -100+x6-100*x7 < 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	__init -> f126_0_test_LE : arg1'=x6-100*x7, arg2'=arg2p2, (x6-100*x7 >= 0 /\ arg1p4 > 0 /\ 1+x2 > 0 /\ arg2p4 > 0 /\ 1+x6 > 0 /\ -100+x6-100*x7 < 0), cost: 1
	New rule:
	__init -> f126_0_test_LE : arg1'=x6-100*x7, arg2'=arg2p2, (x6-100*x7 >= 0 /\ 1+x6 > 0 /\ -100+x6-100*x7 < 0), cost: 1

Step with 7

	Trace

	7[(x6-100*x7 >= 0 /\ 1+x6 > 0 /\ -100+x6-100*x7 < 0)]
	
	Blocked

	[{}, {}]

Step with 6

	Trace

	7[(x6-100*x7 >= 0 /\ 1+x6 > 0 /\ -100+x6-100*x7 < 0)], 6[(arg1 > 0)]
	
	Blocked

	[{}, {}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2
   6: f126_0_test_LE -> f126_0_test_LE : arg1'=-1+arg1, arg2'=arg2p3, arg1 > 0, cost: 1
   8: f126_0_test_LE -> f126_0_test_LE : arg1'=-n+arg1, arg2'=arg2p3, (1-n+arg1 > 0 /\ -1+n >= 0), cost: 1
   7: __init -> f126_0_test_LE : arg1'=x6-100*x7, arg2'=arg2p2, (x6-100*x7 >= 0 /\ 1+x6 > 0 /\ -100+x6-100*x7 < 0), cost: 1

	Loop Acceleration

	Original rule:
	f126_0_test_LE -> f126_0_test_LE : arg1'=-1+arg1, arg2'=arg2p3, (arg1 > 0), cost: 1
	New rule:
	f126_0_test_LE -> f126_0_test_LE : arg1'=-n+arg1, arg2'=arg2p3, (1-n+arg1 > 0 /\ -1+n >= 0), cost: 1

		arg1 > 0 [0]: montonic decrease yields 1-n+arg1 > 0
		
		arg1 > 0 [1]: eventual increase yields (1 <= 0 /\ arg1 > 0)
		
		Replacement map: {arg1 > 0 -> 1-n+arg1 > 0}

	Trace

	7[(x6-100*x7 >= 0 /\ 1+x6 > 0 /\ -100+x6-100*x7 < 0)], 8[(1-n+arg1 > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {}, {6[T], 8[T]}]

Backtrack

	Trace

	7[(x6-100*x7 >= 0 /\ 1+x6 > 0 /\ -100+x6-100*x7 < 0)]
	
	Blocked

	[{}, {8[T]}]

Step with 6

	Trace

	7[(x6-100*x7 >= 0 /\ 1+x6 > 0 /\ -100+x6-100*x7 < 0)], 6[(arg1 > 0)]
	
	Blocked

	[{}, {8[T]}, {}]

Covered

	Trace

	7[(x6-100*x7 >= 0 /\ 1+x6 > 0 /\ -100+x6-100*x7 < 0)]
	
	Blocked

	[{}, {6[T], 8[T]}]

Backtrack

	Trace

	Blocked

	[{7[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
