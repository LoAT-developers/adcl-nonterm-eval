YES

Solver Timeout: 4
Global Timeout: 300
Maximum number of concurrent processes: 900
*******************************************************************************************
*********************** UNPROCESSED TRANSITION SYSTEMS PER FUNCTION ***********************
*******************************************************************************************


List of LLVMGraphs + assumeNodes + staticAssertNodes [1] :

+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++
+                                                                  +
Init Location: 0
Transitions:
<l0, l1, true, seq{main__func_return_ -> 0, main_MAX -> 1000, main_a -> 1, main_b -> 1, main_c -> 1}>
<l1, l2, true>
<l2, l12, (((main_a * main_a) * main_a) = (((main_b * main_b) * main_b) + ((main_c * main_c) * main_c)))>
<l2, l3, not((((main_a * main_a) * main_a) = (((main_b * main_b) * main_b) + ((main_c * main_c) * main_c))))>
<l3, l12, not((main_c <= main_MAX))>
<l3, l4, (main_c <= main_MAX)>
<l4, l5, true, seq{main_a -> (main_a + 1)}>
<l5, l6, (main_a > main_MAX)>
<l5, l8, not((main_a > main_MAX))>
<l6, l7, true, seq{main_a -> 1, main_b -> (main_b + 1)}>
<l7, l8, true>
<l8, l9, (main_b > main_MAX)>
<l8, l11, not((main_b > main_MAX))>
<l9, l10, true, seq{main_b -> 1, main_c -> (main_c + 1)}>
<l10, l11, true>
<l11, l2, true>
<l12, l13, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

+ Assume Nodes [0]: ++++++++++++++++++++++++++++++++++++++++++++++++
       
+ Static Assert Nodes [0]: +++++++++++++++++++++++++++++++++++++++++
       
+ After preprocess (paralelization): ++++++++++++++++++++++++++++++

Init Location: 0
Transitions:
<l0, l1, true, seq{main__func_return_ -> 0, main_MAX -> 1000, main_a -> 1, main_b -> 1, main_c -> 1}>
<l1, l2, true>
<l2, l12, (((main_a * main_a) * main_a) = (((main_b * main_b) * main_b) + ((main_c * main_c) * main_c)))>
<l2, l3, not((((main_a * main_a) * main_a) = (((main_b * main_b) * main_b) + ((main_c * main_c) * main_c))))>
<l3, l4, (main_c <= main_MAX)>
<l3, l12, not((main_c <= main_MAX))>
<l4, l5, true, seq{main_a -> (main_a + 1)}>
<l5, l6, (main_a > main_MAX)>
<l5, l8, not((main_a > main_MAX))>
<l6, l7, true, seq{main_a -> 1, main_b -> (main_b + 1)}>
<l7, l8, true>
<l8, l9, (main_b > main_MAX)>
<l8, l11, not((main_b > main_MAX))>
<l9, l10, true, seq{main_b -> 1, main_c -> (main_c + 1)}>
<l10, l11, true>
<l11, l2, true>
<l12, l13, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:
13, 
Accepting locations:

Asserts:

+                                                                  +
+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++


Function Return and Parameters Information [1 functions]:
    function name: main [1 return + 0 parameters]        demangled: main
        main__func_return_      [function result] : int


AST Ident Scanner Information [6 idents]:
__VERIFIER_nondet_int | function | [integer, ()] | <line: 3, col: 1>
main | function | [integer, ()] | <line: 5, col: 1>
MAX | local variable | integer | <line: 6, col: 5> | <line: 8, col: 5> <line: 12, col: 51> <line: 14, col: 15> <line: 18, col: 15>
a | local variable | integer | <line: 7, col: 5> | <line: 9, col: 5> <line: 12, col: 14> <line: 12, col: 16> <line: 12, col: 18> <line: 13, col: 9> <line: 13, col: 13> <line: 14, col: 13> <line: 15, col: 13>
b | local variable | integer | <line: 7, col: 5> | <line: 10, col: 5> <line: 12, col: 26> <line: 12, col: 28> <line: 12, col: 30> <line: 16, col: 13> <line: 16, col: 17> <line: 18, col: 13> <line: 19, col: 13>
c | local variable | integer | <line: 7, col: 5> | <line: 11, col: 5> <line: 12, col: 34> <line: 12, col: 36> <line: 12, col: 38> <line: 12, col: 46> <line: 20, col: 13> <line: 20, col: 17>

Main function: main
Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l2, (1000 = 1000) /\ (main_a = 1) /\ (main_b = 1) /\ (main_c = 1)>
<l2, l13, true>
<l2, l2, (main_c <= 1000) /\ ((main_a + 1) > 1000) /\ ((main_b + 1) > 1000), par{main_a -> 1, main_b -> 1, main_c -> (main_c + 1)}>
<l2, l2, (main_c <= 1000) /\ ((main_a + 1) > 1000) /\ not(((main_b + 1) > 1000)), par{main_a -> 1, main_b -> (main_b + 1)}>
<l2, l2, (main_c <= 1000) /\ not(((main_a + 1) > 1000)) /\ (main_b > 1000), par{main_a -> (main_a + 1), main_b -> 1, main_c -> (main_c + 1)}>
<l2, l2, (main_c <= 1000) /\ not(((main_a + 1) > 1000)) /\ not((main_b > 1000)), par{main_a -> (main_a + 1)}>
<l2, l13, not((main_c <= 1000))>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:
13, 
Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l2, l2, 1000 <= main_a /\ 1000 <= main_b /\ main_c <= 1000, {main_a -> 1, main_b -> 1, main_c -> 1 + main_c, rest remain the same}>
<l2, l2, 1000 <= main_a /\ main_c <= 1000 /\ main_b <= 999, {main_a -> 1, main_b -> 1 + main_b, rest remain the same}>
<l2, l2, main_c <= 1000 /\ main_a <= 999 /\ 1001 <= main_b, {main_a -> 1 + main_a, main_b -> 1, main_c -> 1 + main_c, rest remain the same}>
<l2, l2, main_b <= 1000 /\ main_c <= 1000 /\ main_a <= 999, {main_a -> 1 + main_a, rest remain the same}>
Variables:
main_a, main_b, main_c

Graph 2:
Transitions:
Variables:

Precedence: 
Graph 0

Graph 1
<l0, l2, main_a = 1 /\ main_b = 1 /\ main_c = 1, {all remain the same}>

Graph 2
<l2, l13, true, {all remain the same}>
<l2, l13, 1001 <= main_c, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 2 , 1 )
( 13 , 2 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Detected abstraction incompatible with non-termination check.
Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 4.10059

Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.004277s
[33mRanking function: [36m1000 - main_c[0m
New Graphs: 
Transitions:
<l2, l2, 1000 <= main_a /\ main_c <= 1000 /\ main_b <= 999, {main_a -> 1, main_b -> 1 + main_b, rest remain the same}>
<l2, l2, main_b <= 1000 /\ main_c <= 1000 /\ main_a <= 999, {main_a -> 1 + main_a, rest remain the same}>
Variables:
main_a, main_b, main_c
Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000649s
[33mRanking function: [36m2997000 - 3000*main_b[0m
New Graphs: 
Transitions:
<l2, l2, main_b <= 1000 /\ main_c <= 1000 /\ main_a <= 999, {main_a -> 1 + main_a, rest remain the same}>
Variables:
main_a, main_b, main_c
Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000368s
[33mRanking function: [36m999 - main_a[0m
New Graphs: 
Proving termination of subgraph 2
Analyzing SCC {l13}...
No cycles found.

[32mProgram Terminates[0m
