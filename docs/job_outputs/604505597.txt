WORST_CASE(Omega(0),?)

Initial ITS
Start location: __init
   0: f1_0_main_New -> f83_0_doSum_NONNULL : arg5'=arg5P0, arg2'=arg2P0, arg4'=arg4P0, arg1'=arg1P0, arg6'=arg6P0, arg3'=arg3P0, -3+arg1P0 > 0, cost: 1
   1: f83_0_doSum_NONNULL -> f160_0_factorial_GT : arg5'=arg5P1, arg2'=arg2P1, arg4'=arg4P1, arg1'=arg1P1, arg6'=arg6P1, arg3'=arg3P1, (arg1P1-arg1 <= 0 /\ arg1P1 > 0 /\ 1-arg2P1 == 0 /\ 1+arg6P1-arg1 <= 0 /\ 1-arg4P1 == 0 /\ 1-arg3P1 == 0 /\ arg1 > 0 /\ 2+arg5P1-arg1 <= 0 /\ 1+arg6P1 > 0), cost: 1
   2: f160_0_factorial_GT -> f83_0_doSum_NONNULL : arg5'=arg5P2, arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg6'=arg6P2, arg3'=arg3P2, (arg2 > 0 /\ arg5-arg3 < 0 /\ 1+arg6 > 0 /\ arg1 > 0 /\ -1+arg1-arg1P2 >= 0 /\ 1+arg1P2 > 0 /\ 2+arg5-arg1 <= 0 /\ arg6-arg1P2 >= 0 /\ -arg4+arg3 == 0), cost: 1
   3: f160_0_factorial_GT -> f160_0_factorial_GT : arg5'=arg5P3, arg2'=arg2P3, arg4'=arg4P3, arg1'=arg1P3, arg6'=arg6P3, arg3'=arg3P3, (1-arg3P3+arg3 == 0 /\ arg2 > 0 /\ arg5-arg3 >= 0 /\ -arg1+arg1P3 <= 0 /\ arg5-arg5P3 == 0 /\ 1-arg4P3+arg3 == 0 /\ -arg2P3+arg2*arg3 == 0 /\ 1+arg6 > 0 /\ arg1 > 0 /\ 1+arg6P3-arg1 <= 0 /\ 1+arg6P3 > 0 /\ arg3 > 0 /\ arg1P3 > 0 /\ arg6P3-arg6 <= 0 /\ 2+arg5-arg1 <= 0 /\ -arg4+arg3 == 0), cost: 1
   4: __init -> f1_0_main_New : arg5'=arg5P4, arg2'=arg2P4, arg4'=arg4P4, arg1'=arg1P4, arg6'=arg6P4, arg3'=arg3P4, TRUE, cost: 1


Applied preprocessing
Original rule:
f83_0_doSum_NONNULL -> f160_0_factorial_GT : arg5'=arg5P1, arg2'=arg2P1, arg4'=arg4P1, arg1'=arg1P1, arg6'=arg6P1, arg3'=arg3P1, (arg1P1-arg1 <= 0 /\ arg1P1 > 0 /\ 1-arg2P1 == 0 /\ 1+arg6P1-arg1 <= 0 /\ 1-arg4P1 == 0 /\ 1-arg3P1 == 0 /\ arg1 > 0 /\ 2+arg5P1-arg1 <= 0 /\ 1+arg6P1 > 0), cost: 1
New rule:
f83_0_doSum_NONNULL -> f160_0_factorial_GT : arg5'=arg5P1, arg2'=1, arg4'=1, arg1'=arg1P1, arg6'=arg6P1, arg3'=1, (arg1P1-arg1 <= 0 /\ arg1P1 > 0 /\ 1+arg6P1-arg1 <= 0 /\ 2+arg5P1-arg1 <= 0 /\ 1+arg6P1 > 0), cost: 1

Applied preprocessing
Original rule:
f160_0_factorial_GT -> f83_0_doSum_NONNULL : arg5'=arg5P2, arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg6'=arg6P2, arg3'=arg3P2, (arg2 > 0 /\ arg5-arg3 < 0 /\ 1+arg6 > 0 /\ arg1 > 0 /\ -1+arg1-arg1P2 >= 0 /\ 1+arg1P2 > 0 /\ 2+arg5-arg1 <= 0 /\ arg6-arg1P2 >= 0 /\ -arg4+arg3 == 0), cost: 1
New rule:
f160_0_factorial_GT -> f83_0_doSum_NONNULL : arg5'=arg5P2, arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg6'=arg6P2, arg3'=arg3P2, (arg2 > 0 /\ -arg5+arg3 > 0 /\ -1+arg1-arg1P2 >= 0 /\ 1+arg1P2 > 0 /\ 2+arg5-arg1 <= 0 /\ arg6-arg1P2 >= 0 /\ -arg4+arg3 == 0), cost: 1

Applied preprocessing
Original rule:
f160_0_factorial_GT -> f160_0_factorial_GT : arg5'=arg5P3, arg2'=arg2P3, arg4'=arg4P3, arg1'=arg1P3, arg6'=arg6P3, arg3'=arg3P3, (1-arg3P3+arg3 == 0 /\ arg2 > 0 /\ arg5-arg3 >= 0 /\ -arg1+arg1P3 <= 0 /\ arg5-arg5P3 == 0 /\ 1-arg4P3+arg3 == 0 /\ -arg2P3+arg2*arg3 == 0 /\ 1+arg6 > 0 /\ arg1 > 0 /\ 1+arg6P3-arg1 <= 0 /\ 1+arg6P3 > 0 /\ arg3 > 0 /\ arg1P3 > 0 /\ arg6P3-arg6 <= 0 /\ 2+arg5-arg1 <= 0 /\ -arg4+arg3 == 0), cost: 1
New rule:
f160_0_factorial_GT -> f160_0_factorial_GT : arg2'=arg2*arg3, arg4'=1+arg3, arg1'=arg1P3, arg6'=arg6P3, arg3'=1+arg3, (arg2 > 0 /\ arg5-arg3 >= 0 /\ -arg1+arg1P3 <= 0 /\ 1+arg6P3-arg1 <= 0 /\ 1+arg6P3 > 0 /\ arg3 > 0 /\ arg1P3 > 0 /\ arg6P3-arg6 <= 0 /\ 2+arg5-arg1 <= 0 /\ -arg4+arg3 == 0), cost: 1

Simplified rules
Start location: __init
   0: f1_0_main_New -> f83_0_doSum_NONNULL : arg5'=arg5P0, arg2'=arg2P0, arg4'=arg4P0, arg1'=arg1P0, arg6'=arg6P0, arg3'=arg3P0, -3+arg1P0 > 0, cost: 1
   5: f83_0_doSum_NONNULL -> f160_0_factorial_GT : arg5'=arg5P1, arg2'=1, arg4'=1, arg1'=arg1P1, arg6'=arg6P1, arg3'=1, (arg1P1-arg1 <= 0 /\ arg1P1 > 0 /\ 1+arg6P1-arg1 <= 0 /\ 2+arg5P1-arg1 <= 0 /\ 1+arg6P1 > 0), cost: 1
   6: f160_0_factorial_GT -> f83_0_doSum_NONNULL : arg5'=arg5P2, arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg6'=arg6P2, arg3'=arg3P2, (arg2 > 0 /\ -arg5+arg3 > 0 /\ -1+arg1-arg1P2 >= 0 /\ 1+arg1P2 > 0 /\ 2+arg5-arg1 <= 0 /\ arg6-arg1P2 >= 0 /\ -arg4+arg3 == 0), cost: 1
   7: f160_0_factorial_GT -> f160_0_factorial_GT : arg2'=arg2*arg3, arg4'=1+arg3, arg1'=arg1P3, arg6'=arg6P3, arg3'=1+arg3, (arg2 > 0 /\ arg5-arg3 >= 0 /\ -arg1+arg1P3 <= 0 /\ 1+arg6P3-arg1 <= 0 /\ 1+arg6P3 > 0 /\ arg3 > 0 /\ arg1P3 > 0 /\ arg6P3-arg6 <= 0 /\ 2+arg5-arg1 <= 0 /\ -arg4+arg3 == 0), cost: 1
   4: __init -> f1_0_main_New : arg5'=arg5P4, arg2'=arg2P4, arg4'=arg4P4, arg1'=arg1P4, arg6'=arg6P4, arg3'=arg3P4, TRUE, cost: 1


Accelerated simple loops
Start location: __init
   0: f1_0_main_New -> f83_0_doSum_NONNULL : arg5'=arg5P0, arg2'=arg2P0, arg4'=arg4P0, arg1'=arg1P0, arg6'=arg6P0, arg3'=arg3P0, -3+arg1P0 > 0, cost: 1
   5: f83_0_doSum_NONNULL -> f160_0_factorial_GT : arg5'=arg5P1, arg2'=1, arg4'=1, arg1'=arg1P1, arg6'=arg6P1, arg3'=1, (arg1P1-arg1 <= 0 /\ arg1P1 > 0 /\ 1+arg6P1-arg1 <= 0 /\ 2+arg5P1-arg1 <= 0 /\ 1+arg6P1 > 0), cost: 1
   6: f160_0_factorial_GT -> f83_0_doSum_NONNULL : arg5'=arg5P2, arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg6'=arg6P2, arg3'=arg3P2, (arg2 > 0 /\ -arg5+arg3 > 0 /\ -1+arg1-arg1P2 >= 0 /\ 1+arg1P2 > 0 /\ 2+arg5-arg1 <= 0 /\ arg6-arg1P2 >= 0 /\ -arg4+arg3 == 0), cost: 1
   7: f160_0_factorial_GT -> f160_0_factorial_GT : arg2'=arg2*arg3, arg4'=1+arg3, arg1'=arg1P3, arg6'=arg6P3, arg3'=1+arg3, (arg2 > 0 /\ arg5-arg3 >= 0 /\ -arg1+arg1P3 <= 0 /\ 1+arg6P3-arg1 <= 0 /\ 1+arg6P3 > 0 /\ arg3 > 0 /\ arg1P3 > 0 /\ arg6P3-arg6 <= 0 /\ 2+arg5-arg1 <= 0 /\ -arg4+arg3 == 0), cost: 1
   4: __init -> f1_0_main_New : arg5'=arg5P4, arg2'=arg2P4, arg4'=arg4P4, arg1'=arg1P4, arg6'=arg6P4, arg3'=arg3P4, TRUE, cost: 1


Applied chaining
First rule:
f83_0_doSum_NONNULL -> f160_0_factorial_GT : arg5'=arg5P1, arg2'=1, arg4'=1, arg1'=arg1P1, arg6'=arg6P1, arg3'=1, (arg1P1-arg1 <= 0 /\ arg1P1 > 0 /\ 1+arg6P1-arg1 <= 0 /\ 2+arg5P1-arg1 <= 0 /\ 1+arg6P1 > 0), cost: 1
Second rule:
f160_0_factorial_GT -> f160_0_factorial_GT : arg2'=arg2*arg3, arg4'=1+arg3, arg1'=arg1P3, arg6'=arg6P3, arg3'=1+arg3, (arg2 > 0 /\ arg5-arg3 >= 0 /\ -arg1+arg1P3 <= 0 /\ 1+arg6P3-arg1 <= 0 /\ 1+arg6P3 > 0 /\ arg3 > 0 /\ arg1P3 > 0 /\ arg6P3-arg6 <= 0 /\ 2+arg5-arg1 <= 0 /\ -arg4+arg3 == 0), cost: 1
New rule:
f83_0_doSum_NONNULL -> f160_0_factorial_GT : arg5'=arg5P1, arg2'=1, arg4'=2, arg1'=arg1P3, arg6'=arg6P3, arg3'=2, (-arg1+arg1P3 <= 0 /\ 1+arg6P3-arg1 <= 0 /\ 1+arg6P3 > 0 /\ 2+arg5P1-arg1 <= 0 /\ arg1P3 > 0 /\ -1+arg5P1 >= 0), cost: 2

Applied deletion
Removed the following rules: 7

Chained accelerated rules with incoming rules
Start location: __init
   0: f1_0_main_New -> f83_0_doSum_NONNULL : arg5'=arg5P0, arg2'=arg2P0, arg4'=arg4P0, arg1'=arg1P0, arg6'=arg6P0, arg3'=arg3P0, -3+arg1P0 > 0, cost: 1
   5: f83_0_doSum_NONNULL -> f160_0_factorial_GT : arg5'=arg5P1, arg2'=1, arg4'=1, arg1'=arg1P1, arg6'=arg6P1, arg3'=1, (arg1P1-arg1 <= 0 /\ arg1P1 > 0 /\ 1+arg6P1-arg1 <= 0 /\ 2+arg5P1-arg1 <= 0 /\ 1+arg6P1 > 0), cost: 1
   8: f83_0_doSum_NONNULL -> f160_0_factorial_GT : arg5'=arg5P1, arg2'=1, arg4'=2, arg1'=arg1P3, arg6'=arg6P3, arg3'=2, (-arg1+arg1P3 <= 0 /\ 1+arg6P3-arg1 <= 0 /\ 1+arg6P3 > 0 /\ 2+arg5P1-arg1 <= 0 /\ arg1P3 > 0 /\ -1+arg5P1 >= 0), cost: 2
   6: f160_0_factorial_GT -> f83_0_doSum_NONNULL : arg5'=arg5P2, arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg6'=arg6P2, arg3'=arg3P2, (arg2 > 0 /\ -arg5+arg3 > 0 /\ -1+arg1-arg1P2 >= 0 /\ 1+arg1P2 > 0 /\ 2+arg5-arg1 <= 0 /\ arg6-arg1P2 >= 0 /\ -arg4+arg3 == 0), cost: 1
   4: __init -> f1_0_main_New : arg5'=arg5P4, arg2'=arg2P4, arg4'=arg4P4, arg1'=arg1P4, arg6'=arg6P4, arg3'=arg3P4, TRUE, cost: 1


Eliminating location f1_0_main_New by chaining:

Applied chaining
First rule:
__init -> f1_0_main_New : arg5'=arg5P4, arg2'=arg2P4, arg4'=arg4P4, arg1'=arg1P4, arg6'=arg6P4, arg3'=arg3P4, TRUE, cost: 1
Second rule:
f1_0_main_New -> f83_0_doSum_NONNULL : arg5'=arg5P0, arg2'=arg2P0, arg4'=arg4P0, arg1'=arg1P0, arg6'=arg6P0, arg3'=arg3P0, -3+arg1P0 > 0, cost: 1
New rule:
__init -> f83_0_doSum_NONNULL : arg5'=arg5P0, arg2'=arg2P0, arg4'=arg4P0, arg1'=arg1P0, arg6'=arg6P0, arg3'=arg3P0, -3+arg1P0 > 0, cost: 2

Applied deletion
Removed the following rules: 0 4

Eliminated locations on linear paths
Start location: __init
   5: f83_0_doSum_NONNULL -> f160_0_factorial_GT : arg5'=arg5P1, arg2'=1, arg4'=1, arg1'=arg1P1, arg6'=arg6P1, arg3'=1, (arg1P1-arg1 <= 0 /\ arg1P1 > 0 /\ 1+arg6P1-arg1 <= 0 /\ 2+arg5P1-arg1 <= 0 /\ 1+arg6P1 > 0), cost: 1
   8: f83_0_doSum_NONNULL -> f160_0_factorial_GT : arg5'=arg5P1, arg2'=1, arg4'=2, arg1'=arg1P3, arg6'=arg6P3, arg3'=2, (-arg1+arg1P3 <= 0 /\ 1+arg6P3-arg1 <= 0 /\ 1+arg6P3 > 0 /\ 2+arg5P1-arg1 <= 0 /\ arg1P3 > 0 /\ -1+arg5P1 >= 0), cost: 2
   6: f160_0_factorial_GT -> f83_0_doSum_NONNULL : arg5'=arg5P2, arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg6'=arg6P2, arg3'=arg3P2, (arg2 > 0 /\ -arg5+arg3 > 0 /\ -1+arg1-arg1P2 >= 0 /\ 1+arg1P2 > 0 /\ 2+arg5-arg1 <= 0 /\ arg6-arg1P2 >= 0 /\ -arg4+arg3 == 0), cost: 1
   9: __init -> f83_0_doSum_NONNULL : arg5'=arg5P0, arg2'=arg2P0, arg4'=arg4P0, arg1'=arg1P0, arg6'=arg6P0, arg3'=arg3P0, -3+arg1P0 > 0, cost: 2


Eliminating location f160_0_factorial_GT by chaining:

Applied chaining
First rule:
f83_0_doSum_NONNULL -> f160_0_factorial_GT : arg5'=arg5P1, arg2'=1, arg4'=1, arg1'=arg1P1, arg6'=arg6P1, arg3'=1, (arg1P1-arg1 <= 0 /\ arg1P1 > 0 /\ 1+arg6P1-arg1 <= 0 /\ 2+arg5P1-arg1 <= 0 /\ 1+arg6P1 > 0), cost: 1
Second rule:
f160_0_factorial_GT -> f83_0_doSum_NONNULL : arg5'=arg5P2, arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg6'=arg6P2, arg3'=arg3P2, (arg2 > 0 /\ -arg5+arg3 > 0 /\ -1+arg1-arg1P2 >= 0 /\ 1+arg1P2 > 0 /\ 2+arg5-arg1 <= 0 /\ arg6-arg1P2 >= 0 /\ -arg4+arg3 == 0), cost: 1
New rule:
f83_0_doSum_NONNULL -> f83_0_doSum_NONNULL : arg5'=arg5P2, arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg6'=arg6P2, arg3'=arg3P2, (0 == 0 /\ arg1P1-arg1 <= 0 /\ 1 > 0 /\ -1+arg1P1-arg1P2 >= 0 /\ arg1P1 > 0 /\ 1+arg6P1-arg1 <= 0 /\ arg6P1-arg1P2 >= 0 /\ 2+arg5P1-arg1 <= 0 /\ 1+arg1P2 > 0 /\ 1+arg6P1 > 0 /\ 1-arg5P1 > 0 /\ 2+arg5P1-arg1P1 <= 0), cost: 2

Applied simplification
Original rule:
f83_0_doSum_NONNULL -> f83_0_doSum_NONNULL : arg5'=arg5P2, arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg6'=arg6P2, arg3'=arg3P2, (0 == 0 /\ arg1P1-arg1 <= 0 /\ 1 > 0 /\ -1+arg1P1-arg1P2 >= 0 /\ arg1P1 > 0 /\ 1+arg6P1-arg1 <= 0 /\ arg6P1-arg1P2 >= 0 /\ 2+arg5P1-arg1 <= 0 /\ 1+arg1P2 > 0 /\ 1+arg6P1 > 0 /\ 1-arg5P1 > 0 /\ 2+arg5P1-arg1P1 <= 0), cost: 2
New rule:
f83_0_doSum_NONNULL -> f83_0_doSum_NONNULL : arg5'=arg5P2, arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg6'=arg6P2, arg3'=arg3P2, (arg1P1-arg1 <= 0 /\ -1+arg1P1-arg1P2 >= 0 /\ 1+arg6P1-arg1 <= 0 /\ arg6P1-arg1P2 >= 0 /\ 1+arg1P2 > 0 /\ 1-arg5P1 > 0 /\ 2+arg5P1-arg1P1 <= 0), cost: 2

Applied chaining
First rule:
f83_0_doSum_NONNULL -> f160_0_factorial_GT : arg5'=arg5P1, arg2'=1, arg4'=2, arg1'=arg1P3, arg6'=arg6P3, arg3'=2, (-arg1+arg1P3 <= 0 /\ 1+arg6P3-arg1 <= 0 /\ 1+arg6P3 > 0 /\ 2+arg5P1-arg1 <= 0 /\ arg1P3 > 0 /\ -1+arg5P1 >= 0), cost: 2
Second rule:
f160_0_factorial_GT -> f83_0_doSum_NONNULL : arg5'=arg5P2, arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg6'=arg6P2, arg3'=arg3P2, (arg2 > 0 /\ -arg5+arg3 > 0 /\ -1+arg1-arg1P2 >= 0 /\ 1+arg1P2 > 0 /\ 2+arg5-arg1 <= 0 /\ arg6-arg1P2 >= 0 /\ -arg4+arg3 == 0), cost: 1
New rule:
f83_0_doSum_NONNULL -> f83_0_doSum_NONNULL : arg5'=arg5P2, arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg6'=arg6P2, arg3'=arg3P2, (0 == 0 /\ 2+arg5P1-arg1P3 <= 0 /\ 1 > 0 /\ -arg1+arg1P3 <= 0 /\ arg6P3-arg1P2 >= 0 /\ 1+arg6P3-arg1 <= 0 /\ 2-arg5P1 > 0 /\ 1+arg6P3 > 0 /\ 2+arg5P1-arg1 <= 0 /\ 1+arg1P2 > 0 /\ -1+arg1P3-arg1P2 >= 0 /\ arg1P3 > 0 /\ -1+arg5P1 >= 0), cost: 3

Applied simplification
Original rule:
f83_0_doSum_NONNULL -> f83_0_doSum_NONNULL : arg5'=arg5P2, arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg6'=arg6P2, arg3'=arg3P2, (0 == 0 /\ 2+arg5P1-arg1P3 <= 0 /\ 1 > 0 /\ -arg1+arg1P3 <= 0 /\ arg6P3-arg1P2 >= 0 /\ 1+arg6P3-arg1 <= 0 /\ 2-arg5P1 > 0 /\ 1+arg6P3 > 0 /\ 2+arg5P1-arg1 <= 0 /\ 1+arg1P2 > 0 /\ -1+arg1P3-arg1P2 >= 0 /\ arg1P3 > 0 /\ -1+arg5P1 >= 0), cost: 3
New rule:
f83_0_doSum_NONNULL -> f83_0_doSum_NONNULL : arg5'=arg5P2, arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg6'=arg6P2, arg3'=arg3P2, (2+arg5P1-arg1P3 <= 0 /\ -arg1+arg1P3 <= 0 /\ arg6P3-arg1P2 >= 0 /\ 1+arg6P3-arg1 <= 0 /\ 2-arg5P1 > 0 /\ 1+arg1P2 > 0 /\ -1+arg1P3-arg1P2 >= 0 /\ -1+arg5P1 >= 0), cost: 3

Applied deletion
Removed the following rules: 5 6 8

Eliminated locations on tree-shaped paths
Start location: __init
  10: f83_0_doSum_NONNULL -> f83_0_doSum_NONNULL : arg5'=arg5P2, arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg6'=arg6P2, arg3'=arg3P2, (arg1P1-arg1 <= 0 /\ -1+arg1P1-arg1P2 >= 0 /\ 1+arg6P1-arg1 <= 0 /\ arg6P1-arg1P2 >= 0 /\ 1+arg1P2 > 0 /\ 1-arg5P1 > 0 /\ 2+arg5P1-arg1P1 <= 0), cost: 2
  11: f83_0_doSum_NONNULL -> f83_0_doSum_NONNULL : arg5'=arg5P2, arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg6'=arg6P2, arg3'=arg3P2, (2+arg5P1-arg1P3 <= 0 /\ -arg1+arg1P3 <= 0 /\ arg6P3-arg1P2 >= 0 /\ 1+arg6P3-arg1 <= 0 /\ 2-arg5P1 > 0 /\ 1+arg1P2 > 0 /\ -1+arg1P3-arg1P2 >= 0 /\ -1+arg5P1 >= 0), cost: 3
   9: __init -> f83_0_doSum_NONNULL : arg5'=arg5P0, arg2'=arg2P0, arg4'=arg4P0, arg1'=arg1P0, arg6'=arg6P0, arg3'=arg3P0, -3+arg1P0 > 0, cost: 2


Applied simplification
Original rule:
f83_0_doSum_NONNULL -> f83_0_doSum_NONNULL : arg5'=arg5P2, arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg6'=arg6P2, arg3'=arg3P2, (arg1P1-arg1 <= 0 /\ -1+arg1P1-arg1P2 >= 0 /\ 1+arg6P1-arg1 <= 0 /\ arg6P1-arg1P2 >= 0 /\ 1+arg1P2 > 0 /\ 1-arg5P1 > 0 /\ 2+arg5P1-arg1P1 <= 0), cost: 2
New rule:
f83_0_doSum_NONNULL -> f83_0_doSum_NONNULL : arg5'=arg5P2, arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg6'=arg6P2, arg3'=arg3P2, (1-arg1+arg1P2 <= 0 /\ 1+arg1P2 > 0), cost: 2

Applied simplification
Original rule:
f83_0_doSum_NONNULL -> f83_0_doSum_NONNULL : arg5'=arg5P2, arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg6'=arg6P2, arg3'=arg3P2, (2+arg5P1-arg1P3 <= 0 /\ -arg1+arg1P3 <= 0 /\ arg6P3-arg1P2 >= 0 /\ 1+arg6P3-arg1 <= 0 /\ 2-arg5P1 > 0 /\ 1+arg1P2 > 0 /\ -1+arg1P3-arg1P2 >= 0 /\ -1+arg5P1 >= 0), cost: 3
New rule:
f83_0_doSum_NONNULL -> f83_0_doSum_NONNULL : arg5'=arg5P2, arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg6'=arg6P2, arg3'=arg3P2, (1-arg1+arg1P2 <= 0 /\ 3-arg1 <= 0 /\ 1+arg1P2 > 0), cost: 3

Simplified simple loops
Start location: __init
  12: f83_0_doSum_NONNULL -> f83_0_doSum_NONNULL : arg5'=arg5P2, arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg6'=arg6P2, arg3'=arg3P2, (1-arg1+arg1P2 <= 0 /\ 1+arg1P2 > 0), cost: 2
  13: f83_0_doSum_NONNULL -> f83_0_doSum_NONNULL : arg5'=arg5P2, arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg6'=arg6P2, arg3'=arg3P2, (1-arg1+arg1P2 <= 0 /\ 3-arg1 <= 0 /\ 1+arg1P2 > 0), cost: 3
   9: __init -> f83_0_doSum_NONNULL : arg5'=arg5P0, arg2'=arg2P0, arg4'=arg4P0, arg1'=arg1P0, arg6'=arg6P0, arg3'=arg3P0, -3+arg1P0 > 0, cost: 2


Accelerated simple loops
Start location: __init
  12: f83_0_doSum_NONNULL -> f83_0_doSum_NONNULL : arg5'=arg5P2, arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg6'=arg6P2, arg3'=arg3P2, (1-arg1+arg1P2 <= 0 /\ 1+arg1P2 > 0), cost: 2
  13: f83_0_doSum_NONNULL -> f83_0_doSum_NONNULL : arg5'=arg5P2, arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg6'=arg6P2, arg3'=arg3P2, (1-arg1+arg1P2 <= 0 /\ 3-arg1 <= 0 /\ 1+arg1P2 > 0), cost: 3
   9: __init -> f83_0_doSum_NONNULL : arg5'=arg5P0, arg2'=arg2P0, arg4'=arg4P0, arg1'=arg1P0, arg6'=arg6P0, arg3'=arg3P0, -3+arg1P0 > 0, cost: 2


Applied chaining
First rule:
__init -> f83_0_doSum_NONNULL : arg5'=arg5P0, arg2'=arg2P0, arg4'=arg4P0, arg1'=arg1P0, arg6'=arg6P0, arg3'=arg3P0, -3+arg1P0 > 0, cost: 2
Second rule:
f83_0_doSum_NONNULL -> f83_0_doSum_NONNULL : arg5'=arg5P2, arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg6'=arg6P2, arg3'=arg3P2, (1-arg1+arg1P2 <= 0 /\ 1+arg1P2 > 0), cost: 2
New rule:
__init -> f83_0_doSum_NONNULL : arg5'=arg5P2, arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg6'=arg6P2, arg3'=arg3P2, 1+arg1P2 > 0, cost: 4

Applied chaining
First rule:
__init -> f83_0_doSum_NONNULL : arg5'=arg5P0, arg2'=arg2P0, arg4'=arg4P0, arg1'=arg1P0, arg6'=arg6P0, arg3'=arg3P0, -3+arg1P0 > 0, cost: 2
Second rule:
f83_0_doSum_NONNULL -> f83_0_doSum_NONNULL : arg5'=arg5P2, arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg6'=arg6P2, arg3'=arg3P2, (1-arg1+arg1P2 <= 0 /\ 3-arg1 <= 0 /\ 1+arg1P2 > 0), cost: 3
New rule:
__init -> f83_0_doSum_NONNULL : arg5'=arg5P2, arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg6'=arg6P2, arg3'=arg3P2, 1+arg1P2 > 0, cost: 5

Applied deletion
Removed the following rules: 12 13

Chained accelerated rules with incoming rules
Start location: __init
   9: __init -> f83_0_doSum_NONNULL : arg5'=arg5P0, arg2'=arg2P0, arg4'=arg4P0, arg1'=arg1P0, arg6'=arg6P0, arg3'=arg3P0, -3+arg1P0 > 0, cost: 2
  14: __init -> f83_0_doSum_NONNULL : arg5'=arg5P2, arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg6'=arg6P2, arg3'=arg3P2, 1+arg1P2 > 0, cost: 4
  15: __init -> f83_0_doSum_NONNULL : arg5'=arg5P2, arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg6'=arg6P2, arg3'=arg3P2, 1+arg1P2 > 0, cost: 5


Removed unreachable locations and irrelevant leafs
Start location: __init
  <empty>


Computing asymptotic complexity

Proved the following lower bound
Complexity:  Unknown
Cpx degree: ?

Solved cost: 0
Rule cost:   0

