YES

Solver Timeout: 4
Global Timeout: 300
Maximum number of concurrent processes: 900
*******************************************************************************************
*********************** UNPROCESSED TRANSITION SYSTEMS PER FUNCTION ***********************
*******************************************************************************************


List of LLVMGraphs + assumeNodes + staticAssertNodes [1] :

+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++
+                                                                  +
Init Location: 0
Transitions:
<l0, l1, true, seq{main__func_return_ -> 0, main_i -> Â¿functionCall(__VERIFIER_nondet_int), main_x -> 0, main_y -> 0}>
<l1, l2, (main_i > 10)>
<l1, l4, not((main_i > 10))>
<l2, l3, true, seq{main_x -> 1}>
<l3, l6, true>
<l4, l5, true, seq{main_y -> 1}>
<l5, l6, true>
<l6, l7, true>
<l7, l9, not((main_x = main_y))>
<l7, l8, (main_x = main_y)>
<l8, l7, true>
<l9, l10, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

+ Assume Nodes [0]: ++++++++++++++++++++++++++++++++++++++++++++++++
       
+ Static Assert Nodes [0]: +++++++++++++++++++++++++++++++++++++++++
       
+ After preprocess (paralelization): ++++++++++++++++++++++++++++++

Init Location: 0
Transitions:
<l0, l11, true, seq{main__func_return_ -> 0}>
<l11, l12, true, seq{varCall_1 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l12, l1, true, seq{main_i -> varCall_1, main_x -> 0, main_y -> 0}>
<l1, l2, (main_i > 10)>
<l1, l4, not((main_i > 10))>
<l2, l3, true, seq{main_x -> 1}>
<l3, l6, true>
<l4, l5, true, seq{main_y -> 1}>
<l5, l6, true>
<l6, l7, true>
<l7, l8, (main_x = main_y)>
<l7, l9, not((main_x = main_y))>
<l8, l7, true>
<l9, l10, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:
10, 
Accepting locations:

Asserts:

+                                                                  +
+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++


Function Return and Parameters Information [2 functions]:
    function name: __VERIFIER_nondet_int [1 return + 0 parameters]        demangled: __VERIFIER_nondet_int
        __VERIFIER_nondet_int__func_return_      [function result] : int
    function name: main [1 return + 0 parameters]        demangled: main
        main__func_return_      [function result] : int


AST Ident Scanner Information [5 idents]:
__VERIFIER_nondet_int | function | [integer, ()] | <line: 3, col: 1> | <line: 9, col: 9>
main | function | [integer, ()] | <line: 5, col: 1>
i | local variable | integer | <line: 6, col: 5> | <line: 9, col: 5> <line: 13, col: 9>
x | local variable | integer | <line: 7, col: 5> | <line: 10, col: 5> <line: 14, col: 9> <line: 18, col: 12>
y | local variable | integer | <line: 8, col: 5> | <line: 11, col: 5> <line: 16, col: 9> <line: 18, col: 17>

Main function: main
Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l7, (undef2 > 10), par{main_x -> 1, main_y -> 0}>
<l0, l7, not((undef2 > 10)), par{main_x -> 0, main_y -> 1}>
<l7, l7, (main_x = main_y)>
<l7, l10, (main_x < main_y)>
<l7, l10, (main_x > main_y)>

Fresh variables:
undef2, 

Undef variables:
undef2, 

Abstraction variables:

Exit nodes:
10, 
Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l7, l7, main_x = main_y, {all remain the same}>
Variables:
main_x, main_y

Graph 2:
Transitions:
Variables:

Precedence: 
Graph 0

Graph 1
<l0, l7, 11 <= undef2, {main_x -> 1, main_y -> 0, rest remain the same}>
<l0, l7, undef2 <= 10, {main_x -> 0, main_y -> 1, rest remain the same}>

Graph 2
<l7, l10, 1 + main_x <= main_y, {all remain the same}>
<l7, l10, 1 + main_y <= main_x, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 7 , 1 )
( 10 , 2 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.001702

> No variable changes in termination graph.
Checking conditional unfeasibility...
Calling Safety with literal 1 + main_x <= main_y and entry <l7, l7, main_x <= main_y, {all remain the same}>

LOG: CALL check - Post:1 + main_x <= main_y - Process 1
* Exit transition: <l7, l7, main_x <= main_y, {all remain the same}>
* Postcondition  : 1 + main_x <= main_y
Postcodition moved up: 1 + main_x <= main_y

LOG: Try proving POST

LOG: Postcondition implied
[32m> Postcondition implied![0m

LOG: RETURN check - Elapsed time: 0.000543s
Proving termination of subgraph 2
Analyzing SCC {l10}...
No cycles found.

[32mProgram Terminates[0m
