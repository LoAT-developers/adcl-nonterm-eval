unknown

Initial ITS

Start location: [1]
Program variables: i j
   0: [1] -> [2] : i'=0, T, cost: 1
   1: [2] -> [3] : j'=3, T, cost: 1
   2: [3] -> [4] : -10+i < 0, cost: 1
  10: [3] -> [10] : -10+i >= 0, cost: 1
   3: [4] -> [5] : -12+j < 0, cost: 1
   7: [4] -> [8] : -12+j >= 0, cost: 1
   4: [5] -> [6] : j'=-1+j, T, cost: 1
   5: [6] -> [7] : j'=2+j, T, cost: 1
   6: [7] -> [4] : T, cost: 1
   8: [8] -> [9] : i'=1+i, T, cost: 1
   9: [9] -> [3] : T, cost: 1

Chained Linear Paths

Start location: [1]
Program variables: i j
  11: [1] -> [3] : i'=0, j'=3, T, cost: 1
   2: [3] -> [4] : -10+i < 0, cost: 1
  10: [3] -> [10] : -10+i >= 0, cost: 1
  15: [4] -> [3] : i'=1+i, -12+j >= 0, cost: 1
  16: [4] -> [4] : j'=1+j, -12+j < 0, cost: 1

	Eliminating location [2] by chaining:

	Applied chaining

	First rule:
	[1] -> [2] : i'=0, T, cost: 1
	Second rule:
	[2] -> [3] : j'=3, T, cost: 1
	New rule:
	[1] -> [3] : i'=0, j'=3, T, cost: 1
	
	Applied deletion

	Removed the following rules: 0 1
	
	Eliminating location [5] by chaining:

	Applied chaining

	First rule:
	[4] -> [5] : -12+j < 0, cost: 1
	Second rule:
	[5] -> [6] : j'=-1+j, T, cost: 1
	New rule:
	[4] -> [6] : j'=-1+j, -12+j < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 3 4
	
	Eliminating location [8] by chaining:

	Applied chaining

	First rule:
	[4] -> [8] : -12+j >= 0, cost: 1
	Second rule:
	[8] -> [9] : i'=1+i, T, cost: 1
	New rule:
	[4] -> [9] : i'=1+i, -12+j >= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 7 8
	
	Eliminating location [6] by chaining:

	Applied chaining

	First rule:
	[4] -> [6] : j'=-1+j, -12+j < 0, cost: 1
	Second rule:
	[6] -> [7] : j'=2+j, T, cost: 1
	New rule:
	[4] -> [7] : j'=1+j, -12+j < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 5 12
	
	Eliminating location [9] by chaining:

	Applied chaining

	First rule:
	[4] -> [9] : i'=1+i, -12+j >= 0, cost: 1
	Second rule:
	[9] -> [3] : T, cost: 1
	New rule:
	[4] -> [3] : i'=1+i, -12+j >= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 9 13
	
	Eliminating location [7] by chaining:

	Applied chaining

	First rule:
	[4] -> [7] : j'=1+j, -12+j < 0, cost: 1
	Second rule:
	[7] -> [4] : T, cost: 1
	New rule:
	[4] -> [4] : j'=1+j, -12+j < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 6 14

Step with 11

	Trace

	11[T]
	
	Blocked

	[{}, {}]

Step with 2

	Trace

	11[T], 2[(-10+i < 0)]
	
	Blocked

	[{}, {10[T]}, {}]

Step with 16

	Trace

	11[T], 2[(-10+i < 0)], 16[(-12+j < 0)]
	
	Blocked

	[{}, {10[T]}, {15[T]}, {}]

Accelerate

Start location: [1]
Program variables: i j
  11: [1] -> [3] : i'=0, j'=3, T, cost: 1
   2: [3] -> [4] : -10+i < 0, cost: 1
  10: [3] -> [10] : -10+i >= 0, cost: 1
  15: [4] -> [3] : i'=1+i, -12+j >= 0, cost: 1
  16: [4] -> [4] : j'=1+j, -12+j < 0, cost: 1
  17: [4] -> [4] : j'=n+j, (13-n-j > 0 /\ -1+n >= 0), cost: 1

	Loop Acceleration

	Original rule:
	[4] -> [4] : j'=1+j, (-12+j < 0), cost: 1
	New rule:
	[4] -> [4] : j'=n+j, (13-n-j > 0 /\ -1+n >= 0), cost: 1

		12-j > 0 [0]: montonic decrease yields 13-n-j > 0
		
		12-j > 0 [1]: eventual increase yields (1 <= 0 /\ 12-j > 0)
		
		Replacement map: {12-j > 0 -> 13-n-j > 0}

	Trace

	11[T], 2[(-10+i < 0)], 17[(13-n-j > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {10[T]}, {15[T]}, {16[T], 17[T]}]

Step with 15

	Trace

	11[T], 2[(-10+i < 0)], 17[(13-n-j > 0 /\ -1+n >= 0)], 15[(-12+j >= 0)]
	
	Blocked

	[{}, {10[T]}, {15[T]}, {16[T], 17[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 2

	Trace

	11[T], 2[(-10+i < 0)], 17[(13-n-j > 0 /\ -1+n >= 0)], 15[(-12+j >= 0)], 2[(-10+i < 0)]
	
	Blocked

	[{}, {10[T]}, {15[T]}, {16[T], 17[T]}, {}, {}]

Accelerate

Start location: [1]
Program variables: i j
  11: [1] -> [3] : i'=0, j'=3, T, cost: 1
   2: [3] -> [4] : -10+i < 0, cost: 1
  10: [3] -> [10] : -10+i >= 0, cost: 1
  15: [4] -> [3] : i'=1+i, -12+j >= 0, cost: 1
  16: [4] -> [4] : j'=1+j, -12+j < 0, cost: 1
  17: [4] -> [4] : j'=n+j, (13-n-j > 0 /\ -1+n >= 0), cost: 1
  18: [4] -> [4] : i'=i+n2, (10-i-n2 > 0 /\ -1+n2 >= 0 /\ -12+j >= 0), cost: 1

	Loop Acceleration

	Original rule:
	[4] -> [4] : i'=1+i, (-9+i < 0 /\ -12+j >= 0), cost: 1
	New rule:
	[4] -> [4] : i'=i+n2, (10-i-n2 > 0 /\ -1+n2 >= 0 /\ -12+j >= 0), cost: 1

		9-i > 0 [0]: montonic decrease yields 10-i-n2 > 0
		
		9-i > 0 [1]: eventual increase yields (1 <= 0 /\ 9-i > 0)
		
		-12+j >= 0 [0]: monotonic increase yields -12+j >= 0
		
		Replacement map: {9-i > 0 -> 10-i-n2 > 0, -12+j >= 0 -> -12+j >= 0}

	Trace

	11[T], 2[(-10+i < 0)], 17[(13-n-j > 0 /\ -1+n >= 0)], 18[(10-i-n2 > 0 /\ -1+n2 >= 0 /\ -12+j >= 0)]
	
	Blocked

	[{}, {10[T]}, {15[T]}, {16[T], 17[T]}, {18[T]}]

Acceleration Failed

marked recursive suffix as redundant

Step with 15

	Trace

	11[T], 2[(-10+i < 0)], 17[(13-n-j > 0 /\ -1+n >= 0)], 18[(10-i-n2 > 0 /\ -1+n2 >= 0 /\ -12+j >= 0)], 15[(-12+j >= 0)]
	
	Blocked

	[{}, {10[T]}, {15[T]}, {16[T], 17[T]}, {18[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 2

	Trace

	11[T], 2[(-10+i < 0)], 17[(13-n-j > 0 /\ -1+n >= 0)], 18[(10-i-n2 > 0 /\ -1+n2 >= 0 /\ -12+j >= 0)], 15[(-12+j >= 0)], 2[(-10+i < 0)]
	
	Blocked

	[{}, {10[T]}, {15[T]}, {16[T], 17[T]}, {18[T]}, {}, {}]

Covered

	Trace

	11[T], 2[(-10+i < 0)], 17[(13-n-j > 0 /\ -1+n >= 0)], 18[(10-i-n2 > 0 /\ -1+n2 >= 0 /\ -12+j >= 0)], 15[(-12+j >= 0)]
	
	Blocked

	[{}, {10[T]}, {15[T]}, {16[T], 17[T]}, {18[T]}, {2[T]}]

Step with 10

	Trace

	11[T], 2[(-10+i < 0)], 17[(13-n-j > 0 /\ -1+n >= 0)], 18[(10-i-n2 > 0 /\ -1+n2 >= 0 /\ -12+j >= 0)], 15[(-12+j >= 0)], 10[(-10+i >= 0)]
	
	Blocked

	[{}, {10[T]}, {15[T]}, {16[T], 17[T]}, {18[T]}, {2[T]}, {}]

Backtrack

	Trace

	11[T], 2[(-10+i < 0)], 17[(13-n-j > 0 /\ -1+n >= 0)], 18[(10-i-n2 > 0 /\ -1+n2 >= 0 /\ -12+j >= 0)], 15[(-12+j >= 0)]
	
	Blocked

	[{}, {10[T]}, {15[T]}, {16[T], 17[T]}, {18[T]}, {2[T], 10[T]}]

Backtrack

	Trace

	11[T], 2[(-10+i < 0)], 17[(13-n-j > 0 /\ -1+n >= 0)], 18[(10-i-n2 > 0 /\ -1+n2 >= 0 /\ -12+j >= 0)]
	
	Blocked

	[{}, {10[T]}, {15[T]}, {16[T], 17[T]}, {15[T], 18[T]}]

Backtrack

	Trace

	11[T], 2[(-10+i < 0)], 17[(13-n-j > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {10[T]}, {15[T]}, {16[T], 17[T], 18[T]}]

Step with 15

	Trace

	11[T], 2[(-10+i < 0)], 17[(13-n-j > 0 /\ -1+n >= 0)], 15[(-12+j >= 0)]
	
	Blocked

	[{}, {10[T]}, {15[T]}, {16[T], 17[T], 18[T]}, {}]

Step with 2

	Trace

	11[T], 2[(-10+i < 0)], 17[(13-n-j > 0 /\ -1+n >= 0)], 15[(-12+j >= 0)], 2[(-10+i < 0)]
	
	Blocked

	[{}, {10[T]}, {15[T]}, {16[T], 17[T], 18[T]}, {10[T]}, {}]

Covered

	Trace

	11[T], 2[(-10+i < 0)], 17[(13-n-j > 0 /\ -1+n >= 0)], 15[(-12+j >= 0)]
	
	Blocked

	[{}, {10[T]}, {15[T]}, {16[T], 17[T], 18[T]}, {2[T], 10[T]}]

Backtrack

	Trace

	11[T], 2[(-10+i < 0)], 17[(13-n-j > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {10[T]}, {15[T]}, {15[T], 16[T], 17[T], 18[T]}]

Backtrack

	Trace

	11[T], 2[(-10+i < 0)]
	
	Blocked

	[{}, {10[T]}, {15[T], 17[T]}]

Step with 16

	Trace

	11[T], 2[(-10+i < 0)], 16[(-12+j < 0)]
	
	Blocked

	[{}, {10[T]}, {15[T], 17[T]}, {}]

Covered

	Trace

	11[T], 2[(-10+i < 0)]
	
	Blocked

	[{}, {10[T]}, {15[T], 16[T], 17[T]}]

Backtrack

	Trace

	11[T]
	
	Blocked

	[{}, {2[T], 10[T]}]

Backtrack

	Trace

	Blocked

	[{11[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
