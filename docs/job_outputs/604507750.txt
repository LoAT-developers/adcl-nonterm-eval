NO

Initial ITS

Start location: l3
Program variables: __const_100^0 __const_200^0 __const_300^0 __const_400^0 x^0
   0: l0 -> l1 : __const_100^0'=__const_100^post1, __const_200^0'=__const_200^post1, __const_300^0'=__const_300^post1, __const_400^0'=__const_400^post1, x^0'=x^post1, (-__const_400^post1+__const_400^0 == 0 /\ -__const_100^post1+__const_100^0 == 0 /\ __const_200^0-__const_200^post1 == 0 /\ -x^0+x^post1-__const_300^0 == 0 /\ 1-x^post1+__const_100^0 <= 0 /\ -__const_300^post1+__const_300^0 == 0), cost: 1
   1: l1 -> l0 : __const_100^0'=__const_100^post2, __const_200^0'=__const_200^post2, __const_300^0'=__const_300^post2, __const_400^0'=__const_400^post2, x^0'=x^post2, (-__const_400^0-x^0+x^post2 == 0 /\ -__const_200^post2+__const_200^0 == 0 /\ __const_100^0-__const_100^post2 == 0 /\ -__const_300^post2+__const_300^0 == 0 /\ __const_400^0-__const_400^post2 == 0 /\ 1+__const_100^0-x^post2 <= 0), cost: 1
   2: l2 -> l0 : __const_100^0'=__const_100^post3, __const_200^0'=__const_200^post3, __const_300^0'=__const_300^post3, __const_400^0'=__const_400^post3, x^0'=x^post3, (-__const_100^post3+__const_100^0 == 0 /\ 1-x^post3+__const_100^0 <= 0 /\ -__const_200^0-x^0+x^post3 == 0 /\ -__const_300^post3+__const_300^0 == 0 /\ __const_200^0-__const_200^post3 == 0 /\ __const_400^0-__const_400^post3 == 0), cost: 1
   3: l2 -> l1 : __const_100^0'=__const_100^post4, __const_200^0'=__const_200^post4, __const_300^0'=__const_300^post4, __const_400^0'=__const_400^post4, x^0'=x^post4, (-x^0-__const_100^0+x^post4 == 0 /\ -__const_300^post4+__const_300^0 == 0 /\ __const_100^0-__const_100^post4 == 0 /\ __const_400^0-__const_400^post4 == 0 /\ -__const_200^post4+__const_200^0 == 0 /\ 1+__const_100^0-x^post4 <= 0), cost: 1
   4: l3 -> l2 : __const_100^0'=__const_100^post5, __const_200^0'=__const_200^post5, __const_300^0'=__const_300^post5, __const_400^0'=__const_400^post5, x^0'=x^post5, (-__const_100^post5+__const_100^0 == 0 /\ __const_200^0-__const_200^post5 == 0 /\ -__const_300^post5+__const_300^0 == 0 /\ __const_400^0-__const_400^post5 == 0 /\ x^0-x^post5 == 0), cost: 1

Simplified Transitions

Start location: l3
Program variables: __const_100^0 __const_200^0 __const_300^0 __const_400^0 x^0
   5: l0 -> l1 : x^0'=x^0+__const_300^0, 1-x^0+__const_100^0-__const_300^0 <= 0, cost: 1
   6: l1 -> l0 : x^0'=__const_400^0+x^0, 1-__const_400^0-x^0+__const_100^0 <= 0, cost: 1
   7: l2 -> l0 : x^0'=__const_200^0+x^0, 1-__const_200^0-x^0+__const_100^0 <= 0, cost: 1
   8: l2 -> l1 : x^0'=x^0+__const_100^0, 1-x^0 <= 0, cost: 1
   9: l3 -> l2 : T, cost: 1

	Propagated Equalities

	Original rule:
	l0 -> l1 : __const_100^0'=__const_100^post1, __const_200^0'=__const_200^post1, __const_300^0'=__const_300^post1, __const_400^0'=__const_400^post1, x^0'=x^post1, (-__const_400^post1+__const_400^0 == 0 /\ -__const_100^post1+__const_100^0 == 0 /\ __const_200^0-__const_200^post1 == 0 /\ -x^0+x^post1-__const_300^0 == 0 /\ 1-x^post1+__const_100^0 <= 0 /\ -__const_300^post1+__const_300^0 == 0), cost: 1
	New rule:
	l0 -> l1 : __const_100^0'=__const_100^0, __const_200^0'=__const_200^0, __const_300^0'=__const_300^0, __const_400^0'=__const_400^0, x^0'=x^0+__const_300^0, (0 == 0 /\ 1-x^0+__const_100^0-__const_300^0 <= 0), cost: 1
	
		propagated equality __const_400^post1 = __const_400^0
		
		propagated equality __const_100^post1 = __const_100^0
		
		propagated equality __const_200^post1 = __const_200^0
		
		propagated equality x^post1 = x^0+__const_300^0
		
		propagated equality __const_300^post1 = __const_300^0
		
	Simplified Guard

	Original rule:
	l0 -> l1 : __const_100^0'=__const_100^0, __const_200^0'=__const_200^0, __const_300^0'=__const_300^0, __const_400^0'=__const_400^0, x^0'=x^0+__const_300^0, (0 == 0 /\ 1-x^0+__const_100^0-__const_300^0 <= 0), cost: 1
	New rule:
	l0 -> l1 : __const_100^0'=__const_100^0, __const_200^0'=__const_200^0, __const_300^0'=__const_300^0, __const_400^0'=__const_400^0, x^0'=x^0+__const_300^0, 1-x^0+__const_100^0-__const_300^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l1 : __const_100^0'=__const_100^0, __const_200^0'=__const_200^0, __const_300^0'=__const_300^0, __const_400^0'=__const_400^0, x^0'=x^0+__const_300^0, 1-x^0+__const_100^0-__const_300^0 <= 0, cost: 1
	New rule:
	l0 -> l1 : x^0'=x^0+__const_300^0, 1-x^0+__const_100^0-__const_300^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l1 -> l0 : __const_100^0'=__const_100^post2, __const_200^0'=__const_200^post2, __const_300^0'=__const_300^post2, __const_400^0'=__const_400^post2, x^0'=x^post2, (-__const_400^0-x^0+x^post2 == 0 /\ -__const_200^post2+__const_200^0 == 0 /\ __const_100^0-__const_100^post2 == 0 /\ -__const_300^post2+__const_300^0 == 0 /\ __const_400^0-__const_400^post2 == 0 /\ 1+__const_100^0-x^post2 <= 0), cost: 1
	New rule:
	l1 -> l0 : __const_100^0'=__const_100^0, __const_200^0'=__const_200^0, __const_300^0'=__const_300^0, __const_400^0'=__const_400^0, x^0'=__const_400^0+x^0, (0 == 0 /\ 1-__const_400^0-x^0+__const_100^0 <= 0), cost: 1
	
		propagated equality x^post2 = __const_400^0+x^0
		
		propagated equality __const_200^post2 = __const_200^0
		
		propagated equality __const_100^post2 = __const_100^0
		
		propagated equality __const_300^post2 = __const_300^0
		
		propagated equality __const_400^post2 = __const_400^0
		
	Simplified Guard

	Original rule:
	l1 -> l0 : __const_100^0'=__const_100^0, __const_200^0'=__const_200^0, __const_300^0'=__const_300^0, __const_400^0'=__const_400^0, x^0'=__const_400^0+x^0, (0 == 0 /\ 1-__const_400^0-x^0+__const_100^0 <= 0), cost: 1
	New rule:
	l1 -> l0 : __const_100^0'=__const_100^0, __const_200^0'=__const_200^0, __const_300^0'=__const_300^0, __const_400^0'=__const_400^0, x^0'=__const_400^0+x^0, 1-__const_400^0-x^0+__const_100^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l1 -> l0 : __const_100^0'=__const_100^0, __const_200^0'=__const_200^0, __const_300^0'=__const_300^0, __const_400^0'=__const_400^0, x^0'=__const_400^0+x^0, 1-__const_400^0-x^0+__const_100^0 <= 0, cost: 1
	New rule:
	l1 -> l0 : x^0'=__const_400^0+x^0, 1-__const_400^0-x^0+__const_100^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l2 -> l0 : __const_100^0'=__const_100^post3, __const_200^0'=__const_200^post3, __const_300^0'=__const_300^post3, __const_400^0'=__const_400^post3, x^0'=x^post3, (-__const_100^post3+__const_100^0 == 0 /\ 1-x^post3+__const_100^0 <= 0 /\ -__const_200^0-x^0+x^post3 == 0 /\ -__const_300^post3+__const_300^0 == 0 /\ __const_200^0-__const_200^post3 == 0 /\ __const_400^0-__const_400^post3 == 0), cost: 1
	New rule:
	l2 -> l0 : __const_100^0'=__const_100^0, __const_200^0'=__const_200^0, __const_300^0'=__const_300^0, __const_400^0'=__const_400^0, x^0'=__const_200^0+x^0, (0 == 0 /\ 1-__const_200^0-x^0+__const_100^0 <= 0), cost: 1
	
		propagated equality __const_100^post3 = __const_100^0
		
		propagated equality x^post3 = __const_200^0+x^0
		
		propagated equality __const_300^post3 = __const_300^0
		
		propagated equality __const_200^post3 = __const_200^0
		
		propagated equality __const_400^post3 = __const_400^0
		
	Simplified Guard

	Original rule:
	l2 -> l0 : __const_100^0'=__const_100^0, __const_200^0'=__const_200^0, __const_300^0'=__const_300^0, __const_400^0'=__const_400^0, x^0'=__const_200^0+x^0, (0 == 0 /\ 1-__const_200^0-x^0+__const_100^0 <= 0), cost: 1
	New rule:
	l2 -> l0 : __const_100^0'=__const_100^0, __const_200^0'=__const_200^0, __const_300^0'=__const_300^0, __const_400^0'=__const_400^0, x^0'=__const_200^0+x^0, 1-__const_200^0-x^0+__const_100^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l2 -> l0 : __const_100^0'=__const_100^0, __const_200^0'=__const_200^0, __const_300^0'=__const_300^0, __const_400^0'=__const_400^0, x^0'=__const_200^0+x^0, 1-__const_200^0-x^0+__const_100^0 <= 0, cost: 1
	New rule:
	l2 -> l0 : x^0'=__const_200^0+x^0, 1-__const_200^0-x^0+__const_100^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l2 -> l1 : __const_100^0'=__const_100^post4, __const_200^0'=__const_200^post4, __const_300^0'=__const_300^post4, __const_400^0'=__const_400^post4, x^0'=x^post4, (-x^0-__const_100^0+x^post4 == 0 /\ -__const_300^post4+__const_300^0 == 0 /\ __const_100^0-__const_100^post4 == 0 /\ __const_400^0-__const_400^post4 == 0 /\ -__const_200^post4+__const_200^0 == 0 /\ 1+__const_100^0-x^post4 <= 0), cost: 1
	New rule:
	l2 -> l1 : __const_100^0'=__const_100^0, __const_200^0'=__const_200^0, __const_300^0'=__const_300^0, __const_400^0'=__const_400^0, x^0'=x^0+__const_100^0, (0 == 0 /\ 1-x^0 <= 0), cost: 1
	
		propagated equality x^post4 = x^0+__const_100^0
		
		propagated equality __const_300^post4 = __const_300^0
		
		propagated equality __const_100^post4 = __const_100^0
		
		propagated equality __const_400^post4 = __const_400^0
		
		propagated equality __const_200^post4 = __const_200^0
		
	Simplified Guard

	Original rule:
	l2 -> l1 : __const_100^0'=__const_100^0, __const_200^0'=__const_200^0, __const_300^0'=__const_300^0, __const_400^0'=__const_400^0, x^0'=x^0+__const_100^0, (0 == 0 /\ 1-x^0 <= 0), cost: 1
	New rule:
	l2 -> l1 : __const_100^0'=__const_100^0, __const_200^0'=__const_200^0, __const_300^0'=__const_300^0, __const_400^0'=__const_400^0, x^0'=x^0+__const_100^0, 1-x^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l2 -> l1 : __const_100^0'=__const_100^0, __const_200^0'=__const_200^0, __const_300^0'=__const_300^0, __const_400^0'=__const_400^0, x^0'=x^0+__const_100^0, 1-x^0 <= 0, cost: 1
	New rule:
	l2 -> l1 : x^0'=x^0+__const_100^0, 1-x^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l3 -> l2 : __const_100^0'=__const_100^post5, __const_200^0'=__const_200^post5, __const_300^0'=__const_300^post5, __const_400^0'=__const_400^post5, x^0'=x^post5, (-__const_100^post5+__const_100^0 == 0 /\ __const_200^0-__const_200^post5 == 0 /\ -__const_300^post5+__const_300^0 == 0 /\ __const_400^0-__const_400^post5 == 0 /\ x^0-x^post5 == 0), cost: 1
	New rule:
	l3 -> l2 : __const_100^0'=__const_100^0, __const_200^0'=__const_200^0, __const_300^0'=__const_300^0, __const_400^0'=__const_400^0, x^0'=x^0, 0 == 0, cost: 1
	
		propagated equality __const_100^post5 = __const_100^0
		
		propagated equality __const_200^post5 = __const_200^0
		
		propagated equality __const_300^post5 = __const_300^0
		
		propagated equality __const_400^post5 = __const_400^0
		
		propagated equality x^post5 = x^0
		
	Simplified Guard

	Original rule:
	l3 -> l2 : __const_100^0'=__const_100^0, __const_200^0'=__const_200^0, __const_300^0'=__const_300^0, __const_400^0'=__const_400^0, x^0'=x^0, 0 == 0, cost: 1
	New rule:
	l3 -> l2 : __const_100^0'=__const_100^0, __const_200^0'=__const_200^0, __const_300^0'=__const_300^0, __const_400^0'=__const_400^0, x^0'=x^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l3 -> l2 : __const_100^0'=__const_100^0, __const_200^0'=__const_200^0, __const_300^0'=__const_300^0, __const_400^0'=__const_400^0, x^0'=x^0, T, cost: 1
	New rule:
	l3 -> l2 : T, cost: 1

Step with 9

	Trace

	9[T]
	
	Blocked

	[{}, {}]

Step with 7

	Trace

	9[T], 7[(1-__const_200^0-x^0+__const_100^0 <= 0)]
	
	Blocked

	[{}, {}, {}]

Step with 5

	Trace

	9[T], 7[(1-__const_200^0-x^0+__const_100^0 <= 0)], 5[(1-x^0+__const_100^0-__const_300^0 <= 0)]
	
	Blocked

	[{}, {}, {}, {}]

Step with 6

	Trace

	9[T], 7[(1-__const_200^0-x^0+__const_100^0 <= 0)], 5[(1-x^0+__const_100^0-__const_300^0 <= 0)], 6[(1-__const_400^0-x^0+__const_100^0 <= 0)]
	
	Blocked

	[{}, {}, {}, {}, {}]

Nonterm

Start location: l3
Program variables: __const_100^0 __const_200^0 __const_300^0 __const_400^0 x^0
   5: l0 -> l1 : x^0'=x^0+__const_300^0, 1-x^0+__const_100^0-__const_300^0 <= 0, cost: 1
  10: l0 -> LoAT_sink : (-1+__const_400^0+x^0-__const_100^0+__const_300^0 >= 0 /\ -__const_400^0-__const_300^0 <= 0 /\ -1+x^0-__const_100^0+__const_300^0 >= 0), cost: NONTERM
  11: l0 -> l0 : x^0'=x^0+n*__const_300^0+__const_400^0*n, (-1+__const_400^0+x^0-__const_100^0+__const_400^0*(-1+n)+(-1+n)*__const_300^0+__const_300^0 >= 0 /\ -1+__const_400^0+x^0-__const_100^0+__const_300^0 >= 0 /\ -1+x^0-__const_100^0+__const_300^0 >= 0 /\ -1+x^0-__const_100^0+__const_400^0*(-1+n)+(-1+n)*__const_300^0+__const_300^0 >= 0 /\ -1+n >= 0), cost: 1
   6: l1 -> l0 : x^0'=__const_400^0+x^0, 1-__const_400^0-x^0+__const_100^0 <= 0, cost: 1
   7: l2 -> l0 : x^0'=__const_200^0+x^0, 1-__const_200^0-x^0+__const_100^0 <= 0, cost: 1
   8: l2 -> l1 : x^0'=x^0+__const_100^0, 1-x^0 <= 0, cost: 1
   9: l3 -> l2 : T, cost: 1

	Certificate of Non-Termination

	Original rule:
	l0 -> l0 : x^0'=__const_400^0+x^0+__const_300^0, (1-x^0+__const_100^0-__const_300^0 <= 0 /\ 1-__const_400^0-x^0+__const_100^0-__const_300^0 <= 0), cost: 1
	New rule:
	l0 -> LoAT_sink : (-1+__const_400^0+x^0-__const_100^0+__const_300^0 >= 0 /\ -__const_400^0-__const_300^0 <= 0 /\ -1+x^0-__const_100^0+__const_300^0 >= 0), cost: NONTERM

		-1+__const_400^0+x^0-__const_100^0+__const_300^0 >= 0 [0]: eventual decrease yields (-1+__const_400^0+x^0-__const_100^0+__const_400^0*(-1+n)+(-1+n)*__const_300^0+__const_300^0 >= 0 /\ -1+__const_400^0+x^0-__const_100^0+__const_300^0 >= 0)
		
		-1+__const_400^0+x^0-__const_100^0+__const_300^0 >= 0 [1]: eventual increase yields (-1+__const_400^0+x^0-__const_100^0+__const_300^0 >= 0 /\ -__const_400^0-__const_300^0 <= 0)
		
		-1+x^0-__const_100^0+__const_300^0 >= 0 [0]: eventual decrease yields (-1+x^0-__const_100^0+__const_300^0 >= 0 /\ -1+x^0-__const_100^0+__const_400^0*(-1+n)+(-1+n)*__const_300^0+__const_300^0 >= 0)
		
		-1+x^0-__const_100^0+__const_300^0 >= 0 [1]: eventual increase yields (-__const_400^0-__const_300^0 <= 0 /\ -1+x^0-__const_100^0+__const_300^0 >= 0)
		
		Replacement map: {-1+__const_400^0+x^0-__const_100^0+__const_300^0 >= 0 -> (-1+__const_400^0+x^0-__const_100^0+__const_300^0 >= 0 /\ -__const_400^0-__const_300^0 <= 0), -1+x^0-__const_100^0+__const_300^0 >= 0 -> (-__const_400^0-__const_300^0 <= 0 /\ -1+x^0-__const_100^0+__const_300^0 >= 0)}

	Loop Acceleration

	Original rule:
	l0 -> l0 : x^0'=__const_400^0+x^0+__const_300^0, (1-x^0+__const_100^0-__const_300^0 <= 0 /\ 1-__const_400^0-x^0+__const_100^0-__const_300^0 <= 0), cost: 1
	New rule:
	l0 -> l0 : x^0'=x^0+n*__const_300^0+__const_400^0*n, (-1+__const_400^0+x^0-__const_100^0+__const_400^0*(-1+n)+(-1+n)*__const_300^0+__const_300^0 >= 0 /\ -1+__const_400^0+x^0-__const_100^0+__const_300^0 >= 0 /\ -1+x^0-__const_100^0+__const_300^0 >= 0 /\ -1+x^0-__const_100^0+__const_400^0*(-1+n)+(-1+n)*__const_300^0+__const_300^0 >= 0 /\ -1+n >= 0), cost: 1

		-1+__const_400^0+x^0-__const_100^0+__const_300^0 >= 0 [0]: eventual decrease yields (-1+__const_400^0+x^0-__const_100^0+__const_400^0*(-1+n)+(-1+n)*__const_300^0+__const_300^0 >= 0 /\ -1+__const_400^0+x^0-__const_100^0+__const_300^0 >= 0)
		
		-1+__const_400^0+x^0-__const_100^0+__const_300^0 >= 0 [1]: eventual increase yields (-1+__const_400^0+x^0-__const_100^0+__const_300^0 >= 0 /\ -__const_400^0-__const_300^0 <= 0)
		
		-1+x^0-__const_100^0+__const_300^0 >= 0 [0]: eventual decrease yields (-1+x^0-__const_100^0+__const_300^0 >= 0 /\ -1+x^0-__const_100^0+__const_400^0*(-1+n)+(-1+n)*__const_300^0+__const_300^0 >= 0)
		
		-1+x^0-__const_100^0+__const_300^0 >= 0 [1]: eventual increase yields (-__const_400^0-__const_300^0 <= 0 /\ -1+x^0-__const_100^0+__const_300^0 >= 0)
		
		Replacement map: {-1+__const_400^0+x^0-__const_100^0+__const_300^0 >= 0 -> (-1+__const_400^0+x^0-__const_100^0+__const_400^0*(-1+n)+(-1+n)*__const_300^0+__const_300^0 >= 0 /\ -1+__const_400^0+x^0-__const_100^0+__const_300^0 >= 0), -1+x^0-__const_100^0+__const_300^0 >= 0 -> (-1+x^0-__const_100^0+__const_300^0 >= 0 /\ -1+x^0-__const_100^0+__const_400^0*(-1+n)+(-1+n)*__const_300^0+__const_300^0 >= 0)}

Step with 10

	Trace

	9[T], 7[(1-__const_200^0-x^0+__const_100^0 <= 0)], 10[(-1+__const_400^0+x^0-__const_100^0+__const_300^0 >= 0 /\ -__const_400^0-__const_300^0 <= 0 /\ -1+x^0-__const_100^0+__const_300^0 >= 0)]
	
	Blocked

	[{}, {}, {}, {10[T]}]

Refute

	Counterexample

	[ __const_100^0=-1 __const_200^0=0 __const_300^0=0 __const_400^0=0 x^0=0 ] 9 [ __const_100^0=-1 __const_200^0=0 __const_300^0=0 __const_400^0=0 x^0=0 ] 7 [ __const_100^0=-1 __const_200^0=0 __const_300^0=0 __const_400^0=0 x^0=0 ] 10
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
