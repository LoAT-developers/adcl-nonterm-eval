WORST_CASE(Omega(0),?)

Initial ITS
Start location: __init
   0: f1_0_main_Load -> f260_0_loop_LE : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (-arg2P0 == 0 /\ -arg3P0 == 0 /\ -arg2 == 0 /\ arg1 > 0 /\ -arg1P0 == 0), cost: 1
   1: f1_0_main_Load -> f260_0_loop_LE : arg2'=arg2P1, arg1'=arg1P1, arg3'=arg3P1, (-x20-arg2P1 == 0 /\ 1+x20 > 0 /\ -arg3P1 == 0 /\ arg1 > 0 /\ 1-arg2 == 0 /\ -arg1P1 == 0), cost: 1
   2: f1_0_main_Load -> f260_0_loop_LE : arg2'=arg2P2, arg1'=arg1P2, arg3'=arg3P2, (1+x50 > 0 /\ 1+x60 > 0 /\ -arg1P2-x60 == 0 /\ arg1 > 0 /\ -arg2P2-x50 == 0 /\ -1+arg2 > 0 /\ -arg3P2-x60 == 0), cost: 1
   3: f260_0_loop_LE -> f260_0_loop_LE : arg2'=arg2P3, arg1'=arg1P3, arg3'=arg3P3, (1 > 0 /\ -arg1P3+arg2+arg1 == 0 /\ arg1-arg3 == 0 /\ -arg2+arg1 < 0 /\ 1+arg2-arg2P3 == 0 /\ arg2-arg3P3+arg1 == 0 /\ -1-arg2+arg1 < 0), cost: 1
   4: __init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, arg3'=arg3P4, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_Load -> f260_0_loop_LE : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (-arg2P0 == 0 /\ -arg3P0 == 0 /\ -arg2 == 0 /\ arg1 > 0 /\ -arg1P0 == 0), cost: 1
New rule:
f1_0_main_Load -> f260_0_loop_LE : arg2'=0, arg1'=0, arg3'=0, (arg2 == 0 /\ arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f1_0_main_Load -> f260_0_loop_LE : arg2'=arg2P1, arg1'=arg1P1, arg3'=arg3P1, (-x20-arg2P1 == 0 /\ 1+x20 > 0 /\ -arg3P1 == 0 /\ arg1 > 0 /\ 1-arg2 == 0 /\ -arg1P1 == 0), cost: 1
New rule:
f1_0_main_Load -> f260_0_loop_LE : arg2'=-x20, arg1'=0, arg3'=0, (1+x20 > 0 /\ arg1 > 0 /\ -1+arg2 == 0), cost: 1

Applied preprocessing
Original rule:
f1_0_main_Load -> f260_0_loop_LE : arg2'=arg2P2, arg1'=arg1P2, arg3'=arg3P2, (1+x50 > 0 /\ 1+x60 > 0 /\ -arg1P2-x60 == 0 /\ arg1 > 0 /\ -arg2P2-x50 == 0 /\ -1+arg2 > 0 /\ -arg3P2-x60 == 0), cost: 1
New rule:
f1_0_main_Load -> f260_0_loop_LE : arg2'=-x50, arg1'=-x60, arg3'=-x60, (1+x50 > 0 /\ 1+x60 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1

Applied preprocessing
Original rule:
f260_0_loop_LE -> f260_0_loop_LE : arg2'=arg2P3, arg1'=arg1P3, arg3'=arg3P3, (1 > 0 /\ -arg1P3+arg2+arg1 == 0 /\ arg1-arg3 == 0 /\ -arg2+arg1 < 0 /\ 1+arg2-arg2P3 == 0 /\ arg2-arg3P3+arg1 == 0 /\ -1-arg2+arg1 < 0), cost: 1
New rule:
f260_0_loop_LE -> f260_0_loop_LE : arg2'=1+arg2, arg1'=arg2+arg1, arg3'=arg2+arg1, (arg1-arg3 == 0 /\ arg2-arg1 > 0), cost: 1

Simplified rules
Start location: __init
   5: f1_0_main_Load -> f260_0_loop_LE : arg2'=0, arg1'=0, arg3'=0, (arg2 == 0 /\ arg1 > 0), cost: 1
   6: f1_0_main_Load -> f260_0_loop_LE : arg2'=-x20, arg1'=0, arg3'=0, (1+x20 > 0 /\ arg1 > 0 /\ -1+arg2 == 0), cost: 1
   7: f1_0_main_Load -> f260_0_loop_LE : arg2'=-x50, arg1'=-x60, arg3'=-x60, (1+x50 > 0 /\ 1+x60 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1
   8: f260_0_loop_LE -> f260_0_loop_LE : arg2'=1+arg2, arg1'=arg2+arg1, arg3'=arg2+arg1, (arg1-arg3 == 0 /\ arg2-arg1 > 0), cost: 1
   4: __init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, arg3'=arg3P4, TRUE, cost: 1


Applied acceleration
Original rule:
f260_0_loop_LE -> f260_0_loop_LE : arg2'=1+arg2, arg1'=arg2+arg1, arg3'=arg2+arg1, (arg1-arg3 == 0 /\ arg2-arg1 > 0), cost: 1
New rule:
f260_0_loop_LE -> f260_0_loop_LE : arg2'=arg2+n, arg1'=1/2*n^2+arg1-1/2*n+arg2*n, arg3'=-1/2+arg2+arg1+1/2*(-1+n)^2+1/2*n+arg2*(-1+n), (arg1-arg3 >= 0 /\ arg2-arg1 > 0 /\ -3/2+arg2-arg1-1/2*(-1+n)^2+3/2*n-arg2*(-1+n) > 0 /\ -arg1+arg3 >= 0 /\ -1+n >= 0), cost: n
Sub-proof via acceration calculus written to file:///tmp/tmpnam_hedeAg.txt

Applied deletion
Removed the following rules: 8

Accelerated simple loops
Start location: __init
   5: f1_0_main_Load -> f260_0_loop_LE : arg2'=0, arg1'=0, arg3'=0, (arg2 == 0 /\ arg1 > 0), cost: 1
   6: f1_0_main_Load -> f260_0_loop_LE : arg2'=-x20, arg1'=0, arg3'=0, (1+x20 > 0 /\ arg1 > 0 /\ -1+arg2 == 0), cost: 1
   7: f1_0_main_Load -> f260_0_loop_LE : arg2'=-x50, arg1'=-x60, arg3'=-x60, (1+x50 > 0 /\ 1+x60 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1
   9: f260_0_loop_LE -> f260_0_loop_LE : arg2'=arg2+n, arg1'=1/2*n^2+arg1-1/2*n+arg2*n, arg3'=-1/2+arg2+arg1+1/2*(-1+n)^2+1/2*n+arg2*(-1+n), (arg1-arg3 >= 0 /\ arg2-arg1 > 0 /\ -3/2+arg2-arg1-1/2*(-1+n)^2+3/2*n-arg2*(-1+n) > 0 /\ -arg1+arg3 >= 0 /\ -1+n >= 0), cost: n
   4: __init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, arg3'=arg3P4, TRUE, cost: 1


Applied chaining
First rule:
f1_0_main_Load -> f260_0_loop_LE : arg2'=-x50, arg1'=-x60, arg3'=-x60, (1+x50 > 0 /\ 1+x60 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1
Second rule:
f260_0_loop_LE -> f260_0_loop_LE : arg2'=arg2+n, arg1'=1/2*n^2+arg1-1/2*n+arg2*n, arg3'=-1/2+arg2+arg1+1/2*(-1+n)^2+1/2*n+arg2*(-1+n), (arg1-arg3 >= 0 /\ arg2-arg1 > 0 /\ -3/2+arg2-arg1-1/2*(-1+n)^2+3/2*n-arg2*(-1+n) > 0 /\ -arg1+arg3 >= 0 /\ -1+n >= 0), cost: n
New rule:
f1_0_main_Load -> f260_0_loop_LE : arg2'=-x50+n, arg1'=-x50*n+1/2*n^2-1/2*n-x60, arg3'=-1/2-x50*(-1+n)-x50+1/2*(-1+n)^2+1/2*n-x60, (1+x50 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ -1+arg2 > 0 /\ -x50+x60 > 0 /\ -3/2+x50*(-1+n)-x50-1/2*(-1+n)^2+3/2*n+x60 > 0), cost: 1+n

Applied deletion
Removed the following rules: 9

Chained accelerated rules with incoming rules
Start location: __init
   5: f1_0_main_Load -> f260_0_loop_LE : arg2'=0, arg1'=0, arg3'=0, (arg2 == 0 /\ arg1 > 0), cost: 1
   6: f1_0_main_Load -> f260_0_loop_LE : arg2'=-x20, arg1'=0, arg3'=0, (1+x20 > 0 /\ arg1 > 0 /\ -1+arg2 == 0), cost: 1
   7: f1_0_main_Load -> f260_0_loop_LE : arg2'=-x50, arg1'=-x60, arg3'=-x60, (1+x50 > 0 /\ 1+x60 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1
  10: f1_0_main_Load -> f260_0_loop_LE : arg2'=-x50+n, arg1'=-x50*n+1/2*n^2-1/2*n-x60, arg3'=-1/2-x50*(-1+n)-x50+1/2*(-1+n)^2+1/2*n-x60, (1+x50 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ -1+arg2 > 0 /\ -x50+x60 > 0 /\ -3/2+x50*(-1+n)-x50-1/2*(-1+n)^2+3/2*n+x60 > 0), cost: 1+n
   4: __init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, arg3'=arg3P4, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
  <empty>


Computing asymptotic complexity

Proved the following lower bound
Complexity:  Unknown
Cpx degree: ?

Solved cost: 0
Rule cost:   0

