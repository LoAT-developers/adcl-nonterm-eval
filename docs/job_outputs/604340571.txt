YES

Solver Timeout: 4
Global Timeout: 300
Maximum number of concurrent processes: 900
*******************************************************************************************
*********************** UNPROCESSED TRANSITION SYSTEMS PER FUNCTION ***********************
*******************************************************************************************


List of LLVMGraphs + assumeNodes + staticAssertNodes [1] :

+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++
+                                                                  +
Init Location: 0
Transitions:
<l0, l1, true, seq{main__func_return_ -> 0, main_i -> 0, main_x -> Â¿functionCall(__VERIFIER_nondet_int), main_y -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l1, l2, not((main_x = 0))>
<l1, l8, (main_x = 0)>
<l2, l3, true>
<l3, l7, not((main_x > 0))>
<l3, l4, (main_x > 0)>
<l4, l7, not((main_y > 0))>
<l4, l5, (main_y > 0)>
<l5, l6, true, seq{main_i -> (main_i + 1), main_x -> ((main_x - 1) - (main_y - 1))}>
<l6, l3, true>
<l7, l8, true>
<l8, l9, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

+ Assume Nodes [0]: ++++++++++++++++++++++++++++++++++++++++++++++++
       
+ Static Assert Nodes [0]: +++++++++++++++++++++++++++++++++++++++++
       
+ After preprocess (paralelization): ++++++++++++++++++++++++++++++

Init Location: 0
Transitions:
<l0, l10, true, seq{main__func_return_ -> 0, main_i -> 0}>
<l10, l11, true, seq{varCall_1 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l11, l12, true, seq{main_x -> varCall_1}>
<l12, l13, true, seq{varCall_2 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l13, l1, true, seq{main_y -> varCall_2}>
<l1, l8, (main_x = 0)>
<l1, l2, not((main_x = 0))>
<l2, l3, true>
<l3, l4, (main_x > 0)>
<l3, l7, not((main_x > 0))>
<l4, l5, (main_y > 0)>
<l4, l7, not((main_y > 0))>
<l5, l6, true, seq{main_i -> (main_i + 1), main_x -> ((main_x - 1) - (main_y - 1))}>
<l6, l3, true>
<l7, l8, true>
<l8, l9, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:
9, 
Accepting locations:

Asserts:

+                                                                  +
+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++


Function Return and Parameters Information [2 functions]:
    function name: __VERIFIER_nondet_int [1 return + 0 parameters]        demangled: __VERIFIER_nondet_int
        __VERIFIER_nondet_int__func_return_      [function result] : int
    function name: main [1 return + 0 parameters]        demangled: main
        main__func_return_      [function result] : int


AST Ident Scanner Information [5 idents]:
__VERIFIER_nondet_int | function | [integer, ()] | <line: 3, col: 1> | <line: 8, col: 9> <line: 9, col: 9>
main | function | [integer, ()] | <line: 5, col: 1>
i | local variable | integer | <line: 6, col: 5> | <line: 7, col: 5> <line: 12, col: 13> <line: 12, col: 17>
x | local variable | integer | <line: 6, col: 5> | <line: 8, col: 5> <line: 10, col: 9> <line: 11, col: 16> <line: 13, col: 13> <line: 13, col: 18>
y | local variable | integer | <line: 6, col: 5> | <line: 9, col: 5> <line: 11, col: 25> <line: 13, col: 27>

Main function: main
Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l9, (main_i = 0) /\ (main_x = undef3) /\ (main_y = undef4) /\ (undef3 = 0)>
<l0, l3, (main_i = 0) /\ (main_x = undef3) /\ (main_y = undef4) /\ (undef3 < 0)>
<l0, l3, (main_i = 0) /\ (main_x = undef3) /\ (main_y = undef4) /\ (undef3 > 0)>
<l3, l3, (main_x > 0) /\ (main_y > 0), par{main_i -> (main_i + 1), main_x -> ((main_x - 1) - (main_y - 1))}>
<l3, l9, (main_x > 0) /\ not((main_y > 0))>
<l3, l9, not((main_x > 0))>

Fresh variables:
undef3, undef4, 

Undef variables:
undef3, undef4, 

Abstraction variables:

Exit nodes:
9, 
Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l3, l3, 1 <= main_x /\ 1 <= main_y, {main_i -> 1 + main_i, main_x -> main_x - main_y, rest remain the same}>
Variables:
main_i, main_x, main_y

Graph 2:
Transitions:
Variables:

Precedence: 
Graph 0

Graph 1
<l0, l3, 1 + undef3 <= 0 /\ main_i = 0 /\ main_x = undef3 /\ main_y = undef4, {all remain the same}>
<l0, l3, 1 <= undef3 /\ main_i = 0 /\ main_x = undef3 /\ main_y = undef4, {all remain the same}>

Graph 2
<l0, l9, main_i = 0 /\ main_x = undef3 /\ main_y = undef4 /\ undef3 = 0, {all remain the same}>
<l3, l9, main_y <= 0 /\ 1 <= main_x, {all remain the same}>
<l3, l9, main_x <= 0, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 3 , 1 )
( 9 , 2 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.002072

Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000484s
[33mRanking function: [36m-1 + main_x[0m
New Graphs: 
Proving termination of subgraph 2
Analyzing SCC {l9}...
No cycles found.

[32mProgram Terminates[0m
