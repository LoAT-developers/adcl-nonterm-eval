NO

Initial ITS

Start location: __init
Program variables: arg1 arg2
   0: f1_0_main_Load -> f251_0_loop_GT : arg1'=arg1p1, arg2'=arg2p1, (-arg1p1+arg2 == 0 /\ 1+arg2 > 0 /\ 20-arg2p1 == 0 /\ arg1 > 0), cost: 1
   1: f251_0_loop_GT -> f251_0_loop_GT : arg1'=arg1p2, arg2'=arg2p2, (-arg2p2 == 0 /\ -arg1 == 0 /\ -arg1p2 == 0 /\ -arg2 == 0), cost: 1
   2: f251_0_loop_GT -> f251_0_loop_GT : arg1'=arg1p3, arg2'=arg2p3, (-arg1+arg2 > 0 /\ 1-arg1p3+arg1 == 0 /\ arg1 > 0 /\ -arg2p3+arg2 == 0 /\ arg2 > 0), cost: 1
   3: f251_0_loop_GT -> f251_0_loop_GT : arg1'=arg1p4, arg2'=arg2p4, (-1-arg2p4+arg1 == 0 /\ -arg1p4 == 0 /\ arg1-arg2 == 0 /\ arg1 > 0), cost: 1
   4: f251_0_loop_GT -> f251_0_loop_GT : arg1'=arg1p5, arg2'=arg2p5, (-arg1 == 0 /\ 1-arg1p5 == 0 /\ -arg2p5+arg2 == 0 /\ arg2 > 0), cost: 1
   5: __init -> f1_0_main_Load : arg1'=arg1p6, arg2'=arg2p6, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2
   1: f251_0_loop_GT -> f251_0_loop_GT : arg1'=arg1p2, arg2'=arg2p2, (-arg2p2 == 0 /\ -arg1 == 0 /\ -arg1p2 == 0 /\ -arg2 == 0), cost: 1
   2: f251_0_loop_GT -> f251_0_loop_GT : arg1'=arg1p3, arg2'=arg2p3, (-arg1+arg2 > 0 /\ 1-arg1p3+arg1 == 0 /\ arg1 > 0 /\ -arg2p3+arg2 == 0 /\ arg2 > 0), cost: 1
   3: f251_0_loop_GT -> f251_0_loop_GT : arg1'=arg1p4, arg2'=arg2p4, (-1-arg2p4+arg1 == 0 /\ -arg1p4 == 0 /\ arg1-arg2 == 0 /\ arg1 > 0), cost: 1
   4: f251_0_loop_GT -> f251_0_loop_GT : arg1'=arg1p5, arg2'=arg2p5, (-arg1 == 0 /\ 1-arg1p5 == 0 /\ -arg2p5+arg2 == 0 /\ arg2 > 0), cost: 1
   6: __init -> f251_0_loop_GT : arg1'=arg1p1, arg2'=arg2p1, (20-arg2p1 == 0 /\ arg1p6 > 0 /\ -arg1p1+arg2p6 == 0 /\ 1+arg2p6 > 0), cost: 1

	Eliminating location f1_0_main_Load by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_Load : arg1'=arg1p6, arg2'=arg2p6, T, cost: 1
	Second rule:
	f1_0_main_Load -> f251_0_loop_GT : arg1'=arg1p1, arg2'=arg2p1, (-arg1p1+arg2 == 0 /\ 1+arg2 > 0 /\ 20-arg2p1 == 0 /\ arg1 > 0), cost: 1
	New rule:
	__init -> f251_0_loop_GT : arg1'=arg1p1, arg2'=arg2p1, (20-arg2p1 == 0 /\ arg1p6 > 0 /\ -arg1p1+arg2p6 == 0 /\ 1+arg2p6 > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 5

Simplified Transitions

Start location: __init
Program variables: arg1 arg2
   7: f251_0_loop_GT -> f251_0_loop_GT : arg1'=0, arg2'=0, (-arg1 == 0 /\ -arg2 == 0), cost: 1
   8: f251_0_loop_GT -> f251_0_loop_GT : arg1'=1+arg1, (-arg1+arg2 > 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
   9: f251_0_loop_GT -> f251_0_loop_GT : arg1'=0, arg2'=-1+arg1, (arg1-arg2 == 0 /\ arg1 > 0), cost: 1
  10: f251_0_loop_GT -> f251_0_loop_GT : arg1'=1, (-arg1 == 0 /\ arg2 > 0), cost: 1
  11: __init -> f251_0_loop_GT : arg1'=arg2p6, arg2'=20, (1+arg2p6 > 0), cost: 1

	Propagated Equalities

	Original rule:
	f251_0_loop_GT -> f251_0_loop_GT : arg1'=arg1p2, arg2'=arg2p2, (-arg2p2 == 0 /\ -arg1 == 0 /\ -arg1p2 == 0 /\ -arg2 == 0), cost: 1
	New rule:
	f251_0_loop_GT -> f251_0_loop_GT : arg1'=0, arg2'=0, (0 == 0 /\ -arg1 == 0 /\ -arg2 == 0), cost: 1
	
		propagated equality arg2p2 = 0
		
		propagated equality arg1p2 = 0
		
	Simplified Guard

	Original rule:
	f251_0_loop_GT -> f251_0_loop_GT : arg1'=0, arg2'=0, (0 == 0 /\ -arg1 == 0 /\ -arg2 == 0), cost: 1
	New rule:
	f251_0_loop_GT -> f251_0_loop_GT : arg1'=0, arg2'=0, (-arg1 == 0 /\ -arg2 == 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f251_0_loop_GT -> f251_0_loop_GT : arg1'=arg1p3, arg2'=arg2p3, (-arg1+arg2 > 0 /\ 1-arg1p3+arg1 == 0 /\ arg1 > 0 /\ -arg2p3+arg2 == 0 /\ arg2 > 0), cost: 1
	New rule:
	f251_0_loop_GT -> f251_0_loop_GT : arg1'=1+arg1, arg2'=arg2, (0 == 0 /\ -arg1+arg2 > 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
	
		propagated equality arg1p3 = 1+arg1
		
		propagated equality arg2p3 = arg2
		
	Simplified Guard

	Original rule:
	f251_0_loop_GT -> f251_0_loop_GT : arg1'=1+arg1, arg2'=arg2, (0 == 0 /\ -arg1+arg2 > 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
	New rule:
	f251_0_loop_GT -> f251_0_loop_GT : arg1'=1+arg1, arg2'=arg2, (-arg1+arg2 > 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f251_0_loop_GT -> f251_0_loop_GT : arg1'=1+arg1, arg2'=arg2, (-arg1+arg2 > 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
	New rule:
	f251_0_loop_GT -> f251_0_loop_GT : arg1'=1+arg1, (-arg1+arg2 > 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f251_0_loop_GT -> f251_0_loop_GT : arg1'=arg1p4, arg2'=arg2p4, (-1-arg2p4+arg1 == 0 /\ -arg1p4 == 0 /\ arg1-arg2 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f251_0_loop_GT -> f251_0_loop_GT : arg1'=0, arg2'=-1+arg1, (0 == 0 /\ arg1-arg2 == 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg2p4 = -1+arg1
		
		propagated equality arg1p4 = 0
		
	Simplified Guard

	Original rule:
	f251_0_loop_GT -> f251_0_loop_GT : arg1'=0, arg2'=-1+arg1, (0 == 0 /\ arg1-arg2 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f251_0_loop_GT -> f251_0_loop_GT : arg1'=0, arg2'=-1+arg1, (arg1-arg2 == 0 /\ arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f251_0_loop_GT -> f251_0_loop_GT : arg1'=arg1p5, arg2'=arg2p5, (-arg1 == 0 /\ 1-arg1p5 == 0 /\ -arg2p5+arg2 == 0 /\ arg2 > 0), cost: 1
	New rule:
	f251_0_loop_GT -> f251_0_loop_GT : arg1'=1, arg2'=arg2, (0 == 0 /\ -arg1 == 0 /\ arg2 > 0), cost: 1
	
		propagated equality arg1p5 = 1
		
		propagated equality arg2p5 = arg2
		
	Simplified Guard

	Original rule:
	f251_0_loop_GT -> f251_0_loop_GT : arg1'=1, arg2'=arg2, (0 == 0 /\ -arg1 == 0 /\ arg2 > 0), cost: 1
	New rule:
	f251_0_loop_GT -> f251_0_loop_GT : arg1'=1, arg2'=arg2, (-arg1 == 0 /\ arg2 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f251_0_loop_GT -> f251_0_loop_GT : arg1'=1, arg2'=arg2, (-arg1 == 0 /\ arg2 > 0), cost: 1
	New rule:
	f251_0_loop_GT -> f251_0_loop_GT : arg1'=1, (-arg1 == 0 /\ arg2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	__init -> f251_0_loop_GT : arg1'=arg1p1, arg2'=arg2p1, (20-arg2p1 == 0 /\ arg1p6 > 0 /\ -arg1p1+arg2p6 == 0 /\ 1+arg2p6 > 0), cost: 1
	New rule:
	__init -> f251_0_loop_GT : arg1'=arg2p6, arg2'=20, (0 == 0 /\ arg1p6 > 0 /\ 1+arg2p6 > 0), cost: 1
	
		propagated equality arg2p1 = 20
		
		propagated equality arg1p1 = arg2p6
		
	Simplified Guard

	Original rule:
	__init -> f251_0_loop_GT : arg1'=arg2p6, arg2'=20, (0 == 0 /\ arg1p6 > 0 /\ 1+arg2p6 > 0), cost: 1
	New rule:
	__init -> f251_0_loop_GT : arg1'=arg2p6, arg2'=20, (arg1p6 > 0 /\ 1+arg2p6 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	__init -> f251_0_loop_GT : arg1'=arg2p6, arg2'=20, (arg1p6 > 0 /\ 1+arg2p6 > 0), cost: 1
	New rule:
	__init -> f251_0_loop_GT : arg1'=arg2p6, arg2'=20, (1+arg2p6 > 0), cost: 1

Unrolled Loops

Start location: __init
Program variables: arg1 arg2
   7: f251_0_loop_GT -> f251_0_loop_GT : arg1'=0, arg2'=0, (-arg1 == 0 /\ -arg2 == 0), cost: 1
   8: f251_0_loop_GT -> f251_0_loop_GT : arg1'=1+arg1, (-arg1+arg2 > 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
   9: f251_0_loop_GT -> f251_0_loop_GT : arg1'=0, arg2'=-1+arg1, (arg1-arg2 == 0 /\ arg1 > 0), cost: 1
  10: f251_0_loop_GT -> f251_0_loop_GT : arg1'=1, (-arg1 == 0 /\ arg2 > 0), cost: 1
  12: f251_0_loop_GT -> f251_0_loop_GT : arg1'=0, arg2'=-1, _|_, cost: 1
  11: __init -> f251_0_loop_GT : arg1'=arg2p6, arg2'=20, (1+arg2p6 > 0), cost: 1

	Unrolling

	Original rule:
	f251_0_loop_GT -> f251_0_loop_GT : arg1'=0, arg2'=-1+arg1, (arg1-arg2 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f251_0_loop_GT -> f251_0_loop_GT : arg1'=0, arg2'=-1, (0 > 0 /\ arg1-arg2 == 0 /\ 1-arg1 == 0 /\ arg1 > 0), cost: 1
	
	Simplified Guard

	Original rule:
	f251_0_loop_GT -> f251_0_loop_GT : arg1'=0, arg2'=-1, (0 > 0 /\ arg1-arg2 == 0 /\ 1-arg1 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f251_0_loop_GT -> f251_0_loop_GT : arg1'=0, arg2'=-1, _|_, cost: 1

Step with 11

	Trace

	11[(1+arg2p6 > 0)]
	
	Blocked

	[{}, {}]

Step with 8

	Trace

	11[(1+arg2p6 > 0)], 8[(-arg1+arg2 > 0 /\ arg1 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {7[T]}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2
   7: f251_0_loop_GT -> f251_0_loop_GT : arg1'=0, arg2'=0, (-arg1 == 0 /\ -arg2 == 0), cost: 1
   8: f251_0_loop_GT -> f251_0_loop_GT : arg1'=1+arg1, (-arg1+arg2 > 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
   9: f251_0_loop_GT -> f251_0_loop_GT : arg1'=0, arg2'=-1+arg1, (arg1-arg2 == 0 /\ arg1 > 0), cost: 1
  10: f251_0_loop_GT -> f251_0_loop_GT : arg1'=1, (-arg1 == 0 /\ arg2 > 0), cost: 1
  12: f251_0_loop_GT -> f251_0_loop_GT : arg1'=0, arg2'=-1, _|_, cost: 1
  13: f251_0_loop_GT -> f251_0_loop_GT : arg1'=arg1+n, (1-arg1-n+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ arg2 > 0), cost: 1
  11: __init -> f251_0_loop_GT : arg1'=arg2p6, arg2'=20, (1+arg2p6 > 0), cost: 1

	Loop Acceleration

	Original rule:
	f251_0_loop_GT -> f251_0_loop_GT : arg1'=1+arg1, (-arg1+arg2 > 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
	New rule:
	f251_0_loop_GT -> f251_0_loop_GT : arg1'=arg1+n, (1-arg1-n+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ arg2 > 0), cost: 1

		-arg1+arg2 > 0 [0]: montonic decrease yields 1-arg1-n+arg2 > 0
		
		-arg1+arg2 > 0 [1]: eventual increase yields (1 <= 0 /\ -arg1+arg2 > 0)
		
		arg1 > 0 [0]: monotonic increase yields arg1 > 0
		
		arg2 > 0 [0]: monotonic increase yields arg2 > 0, dependencies: -arg1+arg2 > 0 arg1 > 0
		
		Replacement map: {-arg1+arg2 > 0 -> 1-arg1-n+arg2 > 0, arg1 > 0 -> arg1 > 0, arg2 > 0 -> arg2 > 0}

	Trace

	11[(1+arg2p6 > 0)], 13[(1-arg1-n+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {7[T]}, {8[T], 13[T]}]

Step with 9

	Trace

	11[(1+arg2p6 > 0)], 13[(1-arg1-n+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ arg2 > 0)], 9[(arg1-arg2 == 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {7[T]}, {7[T], 8[T], 13[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Acceleration Failed

marked recursive suffix as redundant

Step with 10

	Trace

	11[(1+arg2p6 > 0)], 13[(1-arg1-n+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ arg2 > 0)], 9[(arg1-arg2 == 0 /\ arg1 > 0)], 10[(-arg1 == 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {7[T]}, {7[T], 8[T], 13[T]}, {9[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Acceleration Failed

marked recursive suffix as redundant

Accelerate

Start location: __init
Program variables: arg1 arg2
   7: f251_0_loop_GT -> f251_0_loop_GT : arg1'=0, arg2'=0, (-arg1 == 0 /\ -arg2 == 0), cost: 1
   8: f251_0_loop_GT -> f251_0_loop_GT : arg1'=1+arg1, (-arg1+arg2 > 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
   9: f251_0_loop_GT -> f251_0_loop_GT : arg1'=0, arg2'=-1+arg1, (arg1-arg2 == 0 /\ arg1 > 0), cost: 1
  10: f251_0_loop_GT -> f251_0_loop_GT : arg1'=1, (-arg1 == 0 /\ arg2 > 0), cost: 1
  12: f251_0_loop_GT -> f251_0_loop_GT : arg1'=0, arg2'=-1, _|_, cost: 1
  13: f251_0_loop_GT -> f251_0_loop_GT : arg1'=arg1+n, (1-arg1-n+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ arg2 > 0), cost: 1
  14: f251_0_loop_GT -> f251_0_loop_GT : arg1'=1, arg2'=-n2+arg2, (-1+n2 >= 0 /\ -1-n2+arg2 >= 0 /\ -n2+arg2 > 0 /\ -1-arg1+arg2 >= 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
  11: __init -> f251_0_loop_GT : arg1'=arg2p6, arg2'=20, (1+arg2p6 > 0), cost: 1

	Loop Acceleration

	Original rule:
	f251_0_loop_GT -> f251_0_loop_GT : arg1'=1, arg2'=-1+arg2, (-1-arg1+arg2 >= 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ arg2 > 0), cost: 1
	New rule:
	f251_0_loop_GT -> f251_0_loop_GT : arg1'=1, arg2'=-n2+arg2, (-1+n2 >= 0 /\ -1-n2+arg2 >= 0 /\ -n2+arg2 > 0 /\ -1-arg1+arg2 >= 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1

		-1-arg1+arg2 >= 0 [0]: eventual decrease yields (-1-n2+arg2 >= 0 /\ -1-arg1+arg2 >= 0)
		
		arg1 > 0 [0]: monotonic increase yields arg1 > 0
		
		-1+arg2 > 0 [0]: montonic decrease yields -n2+arg2 > 0
		
		-1+arg2 > 0 [1]: eventual increase yields (1 <= 0 /\ -1+arg2 > 0)
		
		arg2 > 0 [0]: monotonic increase yields arg2 > 0, dependencies: -1-arg1+arg2 >= 0 arg1 > 0
		
		arg2 > 0 [1]: eventual increase yields (1 <= 0 /\ arg2 > 0)
		
		Replacement map: {-1-arg1+arg2 >= 0 -> (-1-n2+arg2 >= 0 /\ -1-arg1+arg2 >= 0), arg1 > 0 -> arg1 > 0, -1+arg2 > 0 -> -n2+arg2 > 0, arg2 > 0 -> arg2 > 0}

	Trace

	11[(1+arg2p6 > 0)], 14[(-1+n2 >= 0 /\ -1-n2+arg2 >= 0 /\ -n2+arg2 > 0 /\ -1-arg1+arg2 >= 0 /\ arg1 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {7[T]}, {14[T]}]

Step with 8

	Trace

	11[(1+arg2p6 > 0)], 14[(-1+n2 >= 0 /\ -1-n2+arg2 >= 0 /\ -n2+arg2 > 0 /\ -1-arg1+arg2 >= 0 /\ arg1 > 0 /\ arg2 > 0)], 8[(-arg1+arg2 > 0 /\ arg1 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {7[T]}, {7[T], 14[T]}, {}]

Covered

	Trace

	11[(1+arg2p6 > 0)], 14[(-1+n2 >= 0 /\ -1-n2+arg2 >= 0 /\ -n2+arg2 > 0 /\ -1-arg1+arg2 >= 0 /\ arg1 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {7[T]}, {7[T], 8[T], 14[T]}]

Step with 9

	Trace

	11[(1+arg2p6 > 0)], 14[(-1+n2 >= 0 /\ -1-n2+arg2 >= 0 /\ -n2+arg2 > 0 /\ -1-arg1+arg2 >= 0 /\ arg1 > 0 /\ arg2 > 0)], 9[(arg1-arg2 == 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {7[T]}, {7[T], 8[T], 14[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 7

	Trace

	11[(1+arg2p6 > 0)], 14[(-1+n2 >= 0 /\ -1-n2+arg2 >= 0 /\ -n2+arg2 > 0 /\ -1-arg1+arg2 >= 0 /\ arg1 > 0 /\ arg2 > 0)], 9[(arg1-arg2 == 0 /\ arg1 > 0)], 7[(-arg1 == 0 /\ -arg2 == 0)]
	
	Blocked

	[{}, {7[T]}, {7[T], 8[T], 14[T]}, {9[T], 10[T], 12[T], 13[T], 14[T]}, {}]

Nonterm

Start location: __init
Program variables: arg1 arg2
   7: f251_0_loop_GT -> f251_0_loop_GT : arg1'=0, arg2'=0, (-arg1 == 0 /\ -arg2 == 0), cost: 1
   8: f251_0_loop_GT -> f251_0_loop_GT : arg1'=1+arg1, (-arg1+arg2 > 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
   9: f251_0_loop_GT -> f251_0_loop_GT : arg1'=0, arg2'=-1+arg1, (arg1-arg2 == 0 /\ arg1 > 0), cost: 1
  10: f251_0_loop_GT -> f251_0_loop_GT : arg1'=1, (-arg1 == 0 /\ arg2 > 0), cost: 1
  12: f251_0_loop_GT -> f251_0_loop_GT : arg1'=0, arg2'=-1, _|_, cost: 1
  13: f251_0_loop_GT -> f251_0_loop_GT : arg1'=arg1+n, (1-arg1-n+arg2 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ arg2 > 0), cost: 1
  14: f251_0_loop_GT -> f251_0_loop_GT : arg1'=1, arg2'=-n2+arg2, (-1+n2 >= 0 /\ -1-n2+arg2 >= 0 /\ -n2+arg2 > 0 /\ -1-arg1+arg2 >= 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
  15: f251_0_loop_GT -> LoAT_sink : (-arg1 >= 0 /\ arg1 >= 0 /\ -1+n3 >= 0 /\ arg2 >= 0 /\ -arg2 >= 0), cost: NONTERM
  11: __init -> f251_0_loop_GT : arg1'=arg2p6, arg2'=20, (1+arg2p6 > 0), cost: 1

	Certificate of Non-Termination

	Original rule:
	f251_0_loop_GT -> f251_0_loop_GT : arg1'=0, arg2'=0, (-arg1 == 0 /\ -arg2 == 0), cost: 1
	New rule:
	f251_0_loop_GT -> LoAT_sink : (-arg1 >= 0 /\ arg1 >= 0 /\ -1+n3 >= 0 /\ arg2 >= 0 /\ -arg2 >= 0), cost: NONTERM

		-arg1 >= 0 [0]: monotonic increase yields -arg1 >= 0
		
		arg1 >= 0 [0]: monotonic increase yields arg1 >= 0
		
		arg2 >= 0 [0]: monotonic increase yields arg2 >= 0
		
		-arg2 >= 0 [0]: monotonic increase yields -arg2 >= 0
		
		Replacement map: {-arg1 >= 0 -> -arg1 >= 0, arg1 >= 0 -> arg1 >= 0, arg2 >= 0 -> arg2 >= 0, -arg2 >= 0 -> -arg2 >= 0}

Step with 15

	Trace

	11[(1+arg2p6 > 0)], 14[(-1+n2 >= 0 /\ -1-n2+arg2 >= 0 /\ -n2+arg2 > 0 /\ -1-arg1+arg2 >= 0 /\ arg1 > 0 /\ arg2 > 0)], 9[(arg1-arg2 == 0 /\ arg1 > 0)], 15[(-arg1 >= 0 /\ arg1 >= 0 /\ -1+n3 >= 0 /\ arg2 >= 0 /\ -arg2 >= 0)]
	
	Blocked

	[{}, {7[T]}, {7[T], 8[T], 14[T]}, {9[T], 10[T], 12[T], 13[T], 14[T]}, {15[T]}]

Refute

	Counterexample

	[ arg1=1 arg2=20 ] 11 [ arg1=1 arg2=1 ] 14 [ arg1=0 arg2=0 ] 9 [ arg1=arg1 arg2=arg2 ] 15
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
