NO

Initial ITS

Start location: [1]
Program variables: x
   0: [1] -> [2] : x'=nondet, T, cost: 1
   1: [2] -> [4] : -nondet1+x > 0, cost: 1
   7: [2] -> [3] : -nondet1+x <= 0, cost: 1
   2: [4] -> [5] : (x < 0 \/ x > 0), cost: 1
   5: [4] -> [7] : (x <= 0 /\ x >= 0), cost: 1
   3: [5] -> [6] : x'=-1+x, T, cost: 1
   4: [6] -> [4] : T, cost: 1
   6: [7] -> [3] : T, cost: 1

Chained Linear Paths

Start location: [1]
Program variables: x
   0: [1] -> [2] : x'=nondet, T, cost: 1
   1: [2] -> [4] : -nondet1+x > 0, cost: 1
   7: [2] -> [3] : -nondet1+x <= 0, cost: 1
   9: [4] -> [3] : (x <= 0 /\ x >= 0), cost: 1
  10: [4] -> [4] : x'=-1+x, (x < 0 \/ x > 0), cost: 1

	Eliminating location [5] by chaining:

	Applied chaining

	First rule:
	[4] -> [5] : (x < 0 \/ x > 0), cost: 1
	Second rule:
	[5] -> [6] : x'=-1+x, T, cost: 1
	New rule:
	[4] -> [6] : x'=-1+x, (x < 0 \/ x > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 2 3
	
	Eliminating location [7] by chaining:

	Applied chaining

	First rule:
	[4] -> [7] : (x <= 0 /\ x >= 0), cost: 1
	Second rule:
	[7] -> [3] : T, cost: 1
	New rule:
	[4] -> [3] : (x <= 0 /\ x >= 0), cost: 1
	
	Applied deletion

	Removed the following rules: 5 6
	
	Eliminating location [6] by chaining:

	Applied chaining

	First rule:
	[4] -> [6] : x'=-1+x, (x < 0 \/ x > 0), cost: 1
	Second rule:
	[6] -> [4] : T, cost: 1
	New rule:
	[4] -> [4] : x'=-1+x, (x < 0 \/ x > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 4 8

Simplified Transitions

Start location: [1]
Program variables: x
   0: [1] -> [2] : x'=nondet, T, cost: 1
  11: [2] -> [4] : T, cost: 1
  12: [2] -> [3] : T, cost: 1
   9: [4] -> [3] : (x <= 0 /\ x >= 0), cost: 1
  10: [4] -> [4] : x'=-1+x, (x < 0 \/ x > 0), cost: 1

	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	[2] -> [4] : -nondet1+x > 0, cost: 1
	New rule:
	[2] -> [4] : T, cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	[2] -> [3] : -nondet1+x <= 0, cost: 1
	New rule:
	[2] -> [3] : T, cost: 1

Step with 0

	Trace

	0[T]
	
	Blocked

	[{}, {}]

Step with 11

	Trace

	0[T], 11[T]
	
	Blocked

	[{}, {}, {}]

Step with 9

	Trace

	0[T], 11[T], 9[(x <= 0 /\ x >= 0)]
	
	Blocked

	[{}, {}, {}, {}]

Backtrack

	Trace

	0[T], 11[T]
	
	Blocked

	[{}, {}, {9[T]}]

Step with 10

	Trace

	0[T], 11[T], 10[(x < 0)]
	
	Blocked

	[{}, {}, {9[T]}, {}]

Nonterm

Start location: [1]
Program variables: x
   0: [1] -> [2] : x'=nondet, T, cost: 1
  11: [2] -> [4] : T, cost: 1
  12: [2] -> [3] : T, cost: 1
   9: [4] -> [3] : (x <= 0 /\ x >= 0), cost: 1
  10: [4] -> [4] : x'=-1+x, (x < 0 \/ x > 0), cost: 1
  13: [4] -> LoAT_sink : (-1+n >= 0 /\ -x > 0), cost: NONTERM
  14: [4] -> [4] : x'=-n+x, (-1+n >= 0 /\ -x > 0), cost: 1

	Certificate of Non-Termination

	Original rule:
	[4] -> [4] : x'=-1+x, (x < 0), cost: 1
	New rule:
	[4] -> LoAT_sink : (-1+n >= 0 /\ -x > 0), cost: NONTERM

		-x > 0 [0]: monotonic increase yields -x > 0
		
		Replacement map: {-x > 0 -> -x > 0}

	Loop Acceleration

	Original rule:
	[4] -> [4] : x'=-1+x, (x < 0), cost: 1
	New rule:
	[4] -> [4] : x'=-n+x, (-1+n >= 0 /\ -x > 0), cost: 1

		-x > 0 [0]: monotonic increase yields -x > 0
		
		Replacement map: {-x > 0 -> -x > 0}

Step with 13

	Trace

	0[T], 11[T], 13[(-1+n >= 0 /\ -x > 0)]
	
	Blocked

	[{}, {}, {9[T]}, {13[T]}]

Refute

	Counterexample

	[ x=-1 ] 0 [ x=-1 ] 11 [ x=x ] 13
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
