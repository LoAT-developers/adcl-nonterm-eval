unknown

Initial ITS

Start location: [1]
Program variables: i j n t
   0: [1] -> [2] : n'=nondet, T, cost: 1
   1: [2] -> [3] : i'=0, T, cost: 1
   2: [3] -> [4] : j'=1, T, cost: 1
   3: [4] -> [5] : t'=0, T, cost: 1
   4: [5] -> [6] : (j-n < 0 \/ j-n > 0), cost: 1
   9: [5] -> [10] : (j-n <= 0 /\ j-n >= 0), cost: 1
   5: [6] -> [7] : t'=i+j, T, cost: 1
   6: [7] -> [8] : i'=j, T, cost: 1
   7: [8] -> [9] : j'=t, T, cost: 1
   8: [9] -> [5] : T, cost: 1

Chained Linear Paths

Start location: [1]
Program variables: i j n t
  12: [1] -> [5] : i'=0, j'=1, n'=nondet, t'=0, T, cost: 1
   9: [5] -> [10] : (j-n <= 0 /\ j-n >= 0), cost: 1
  16: [5] -> [5] : i'=j, j'=i+j, t'=i+j, (j-n < 0 \/ j-n > 0), cost: 1

	Eliminating location [2] by chaining:

	Applied chaining

	First rule:
	[1] -> [2] : n'=nondet, T, cost: 1
	Second rule:
	[2] -> [3] : i'=0, T, cost: 1
	New rule:
	[1] -> [3] : i'=0, n'=nondet, T, cost: 1
	
	Applied deletion

	Removed the following rules: 0 1
	
	Eliminating location [3] by chaining:

	Applied chaining

	First rule:
	[1] -> [3] : i'=0, n'=nondet, T, cost: 1
	Second rule:
	[3] -> [4] : j'=1, T, cost: 1
	New rule:
	[1] -> [4] : i'=0, j'=1, n'=nondet, T, cost: 1
	
	Applied deletion

	Removed the following rules: 2 10
	
	Eliminating location [4] by chaining:

	Applied chaining

	First rule:
	[1] -> [4] : i'=0, j'=1, n'=nondet, T, cost: 1
	Second rule:
	[4] -> [5] : t'=0, T, cost: 1
	New rule:
	[1] -> [5] : i'=0, j'=1, n'=nondet, t'=0, T, cost: 1
	
	Applied deletion

	Removed the following rules: 3 11
	
	Eliminating location [6] by chaining:

	Applied chaining

	First rule:
	[5] -> [6] : (j-n < 0 \/ j-n > 0), cost: 1
	Second rule:
	[6] -> [7] : t'=i+j, T, cost: 1
	New rule:
	[5] -> [7] : t'=i+j, (j-n < 0 \/ j-n > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 4 5
	
	Eliminating location [7] by chaining:

	Applied chaining

	First rule:
	[5] -> [7] : t'=i+j, (j-n < 0 \/ j-n > 0), cost: 1
	Second rule:
	[7] -> [8] : i'=j, T, cost: 1
	New rule:
	[5] -> [8] : i'=j, t'=i+j, (j-n < 0 \/ j-n > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 6 13
	
	Eliminating location [8] by chaining:

	Applied chaining

	First rule:
	[5] -> [8] : i'=j, t'=i+j, (j-n < 0 \/ j-n > 0), cost: 1
	Second rule:
	[8] -> [9] : j'=t, T, cost: 1
	New rule:
	[5] -> [9] : i'=j, j'=i+j, t'=i+j, (j-n < 0 \/ j-n > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 7 14
	
	Eliminating location [9] by chaining:

	Applied chaining

	First rule:
	[5] -> [9] : i'=j, j'=i+j, t'=i+j, (j-n < 0 \/ j-n > 0), cost: 1
	Second rule:
	[9] -> [5] : T, cost: 1
	New rule:
	[5] -> [5] : i'=j, j'=i+j, t'=i+j, (j-n < 0 \/ j-n > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 8 15

Unrolled Loops

Start location: [1]
Program variables: i j n t
  12: [1] -> [5] : i'=0, j'=1, n'=nondet, t'=0, T, cost: 1
   9: [5] -> [10] : (j-n <= 0 /\ j-n >= 0), cost: 1
  16: [5] -> [5] : i'=j, j'=i+j, t'=i+j, (j-n < 0 \/ j-n > 0), cost: 1
  17: [5] -> [5] : i'=i+j, j'=i+2*j, t'=i+2*j, ((j-n < 0 \/ j-n > 0) /\ (i+j-n < 0 \/ i+j-n > 0)), cost: 1

	Unrolling

	Original rule:
	[5] -> [5] : i'=j, j'=i+j, t'=i+j, (j-n < 0 \/ j-n > 0), cost: 1
	New rule:
	[5] -> [5] : i'=i+j, j'=i+2*j, t'=i+2*j, ((j-n < 0 \/ j-n > 0) /\ (i+j-n < 0 \/ i+j-n > 0)), cost: 1

Step with 12

	Trace

	12[T]
	
	Blocked

	[{}, {}]

Step with 9

	Trace

	12[T], 9[(j-n <= 0 /\ j-n >= 0)]
	
	Blocked

	[{}, {}, {}]

Backtrack

	Trace

	12[T]
	
	Blocked

	[{}, {9[T]}]

Step with 16

	Trace

	12[T], 16[(j-n < 0)]
	
	Blocked

	[{}, {9[T]}, {}]

Accelerate and Drop

Start location: [1]
Program variables: i j n t
  12: [1] -> [5] : i'=0, j'=1, n'=nondet, t'=0, T, cost: 1
   9: [5] -> [10] : (j-n <= 0 /\ j-n >= 0), cost: 1
  16: [5] -> [5] : i'=j, j'=i+j, t'=i+j, (j-n < 0 \/ j-n > 0), cost: 1
  17: [5] -> [5] : i'=i+j, j'=i+2*j, t'=i+2*j, ((j-n < 0 \/ j-n > 0) /\ (i+j-n < 0 \/ i+j-n > 0)), cost: 1
  18: [5] -> LoAT_sink : (0 == 0 /\ -i-j+n > 0 /\ -i-j == 0 /\ -j+n > 0 /\ -j == 0), cost: NONTERM

	unrolling

	Original rule:
	[5] -> [5] : i'=j, j'=i+j, t'=i+j, (j-n < 0), cost: 1
	New rule:
	[5] -> [5] : i'=i+j, j'=i+2*j, t'=i+2*j, (i+j-n < 0 /\ j-n < 0), cost: 1
	
	Certificate of Non-Termination

	Original rule:
	[5] -> [5] : i'=i+j, j'=i+2*j, t'=i+2*j, (i+j-n < 0 /\ j-n < 0), cost: 1
	New rule:
	[5] -> LoAT_sink : (0 == 0 /\ -i-j+n > 0 /\ -i-j == 0 /\ -j+n > 0 /\ -j == 0), cost: NONTERM

		-i-j+n > 0 [0]: fixpoint yields (0 == 0 /\ -i-j+n > 0 /\ -i-j == 0 /\ -j == 0)
		
		-j+n > 0 [0]: fixpoint yields (0 == 0 /\ -i-j == 0 /\ -j+n > 0 /\ -j == 0)
		
		Replacement map: {-i-j+n > 0 -> (0 == 0 /\ -i-j+n > 0 /\ -i-j == 0 /\ -j == 0), -j+n > 0 -> (0 == 0 /\ -i-j == 0 /\ -j+n > 0 /\ -j == 0)}

	Trace

	12[T]
	
	Blocked

	[{}, {9[T], 16[j-n < 0]}]

Step with 16

	Trace

	12[T], 16[(j-n > 0)]
	
	Blocked

	[{}, {9[T], 16[j-n < 0]}, {}]

Accelerate and Drop

Start location: [1]
Program variables: i j n t
  12: [1] -> [5] : i'=0, j'=1, n'=nondet, t'=0, T, cost: 1
   9: [5] -> [10] : (j-n <= 0 /\ j-n >= 0), cost: 1
  16: [5] -> [5] : i'=j, j'=i+j, t'=i+j, (j-n < 0 \/ j-n > 0), cost: 1
  17: [5] -> [5] : i'=i+j, j'=i+2*j, t'=i+2*j, ((j-n < 0 \/ j-n > 0) /\ (i+j-n < 0 \/ i+j-n > 0)), cost: 1
  18: [5] -> LoAT_sink : (0 == 0 /\ -i-j+n > 0 /\ -i-j == 0 /\ -j+n > 0 /\ -j == 0), cost: NONTERM
  19: [5] -> LoAT_sink : (0 == 0 /\ i+j-n > 0 /\ j-n > 0 /\ -i-j == 0 /\ -j == 0), cost: NONTERM

	unrolling

	Original rule:
	[5] -> [5] : i'=j, j'=i+j, t'=i+j, (j-n > 0), cost: 1
	New rule:
	[5] -> [5] : i'=i+j, j'=i+2*j, t'=i+2*j, (i+j-n > 0 /\ j-n > 0), cost: 1
	
	Certificate of Non-Termination

	Original rule:
	[5] -> [5] : i'=i+j, j'=i+2*j, t'=i+2*j, (i+j-n > 0 /\ j-n > 0), cost: 1
	New rule:
	[5] -> LoAT_sink : (0 == 0 /\ i+j-n > 0 /\ j-n > 0 /\ -i-j == 0 /\ -j == 0), cost: NONTERM

		i+j-n > 0 [0]: fixpoint yields (0 == 0 /\ i+j-n > 0 /\ -i-j == 0 /\ -j == 0)
		
		j-n > 0 [0]: fixpoint yields (0 == 0 /\ j-n > 0 /\ -i-j == 0 /\ -j == 0)
		
		Replacement map: {i+j-n > 0 -> (0 == 0 /\ i+j-n > 0 /\ -i-j == 0 /\ -j == 0), j-n > 0 -> (0 == 0 /\ j-n > 0 /\ -i-j == 0 /\ -j == 0)}

	Trace

	12[T]
	
	Blocked

	[{}, {9[T], 16[(j-n < 0 /\ j-n > 0)]}]

Step with 17

	Trace

	12[T], 17[(i+j-n < 0 /\ j-n < 0)]
	
	Blocked

	[{}, {9[T], 16[T]}, {}]

Accelerate and Drop

Start location: [1]
Program variables: i j n t
  12: [1] -> [5] : i'=0, j'=1, n'=nondet, t'=0, T, cost: 1
   9: [5] -> [10] : (j-n <= 0 /\ j-n >= 0), cost: 1
  16: [5] -> [5] : i'=j, j'=i+j, t'=i+j, (j-n < 0 \/ j-n > 0), cost: 1
  17: [5] -> [5] : i'=i+j, j'=i+2*j, t'=i+2*j, ((j-n < 0 \/ j-n > 0) /\ (i+j-n < 0 \/ i+j-n > 0)), cost: 1
  18: [5] -> LoAT_sink : (0 == 0 /\ -i-j+n > 0 /\ -i-j == 0 /\ -j+n > 0 /\ -j == 0), cost: NONTERM
  19: [5] -> LoAT_sink : (0 == 0 /\ i+j-n > 0 /\ j-n > 0 /\ -i-j == 0 /\ -j == 0), cost: NONTERM
  20: [5] -> LoAT_sink : (0 == 0 /\ -i-j+n > 0 /\ -i-j == 0 /\ -j+n > 0 /\ -j == 0), cost: NONTERM

	Certificate of Non-Termination

	Original rule:
	[5] -> [5] : i'=i+j, j'=i+2*j, t'=i+2*j, (i+j-n < 0 /\ j-n < 0), cost: 1
	New rule:
	[5] -> LoAT_sink : (0 == 0 /\ -i-j+n > 0 /\ -i-j == 0 /\ -j+n > 0 /\ -j == 0), cost: NONTERM

		-i-j+n > 0 [0]: fixpoint yields (0 == 0 /\ -i-j+n > 0 /\ -i-j == 0 /\ -j == 0)
		
		-j+n > 0 [0]: fixpoint yields (0 == 0 /\ -i-j == 0 /\ -j+n > 0 /\ -j == 0)
		
		Replacement map: {-i-j+n > 0 -> (0 == 0 /\ -i-j+n > 0 /\ -i-j == 0 /\ -j == 0), -j+n > 0 -> (0 == 0 /\ -i-j == 0 /\ -j+n > 0 /\ -j == 0)}

	Trace

	12[T]
	
	Blocked

	[{}, {9[T], 16[T], 17[(i+j-n < 0 /\ j-n < 0)]}]

Step with 17

	Trace

	12[T], 17[(i+j-n > 0 /\ j-n > 0)]
	
	Blocked

	[{}, {9[T], 16[T], 17[(i+j-n < 0 /\ j-n < 0)]}, {}]

Accelerate and Drop

Start location: [1]
Program variables: i j n t
  12: [1] -> [5] : i'=0, j'=1, n'=nondet, t'=0, T, cost: 1
   9: [5] -> [10] : (j-n <= 0 /\ j-n >= 0), cost: 1
  16: [5] -> [5] : i'=j, j'=i+j, t'=i+j, (j-n < 0 \/ j-n > 0), cost: 1
  17: [5] -> [5] : i'=i+j, j'=i+2*j, t'=i+2*j, ((j-n < 0 \/ j-n > 0) /\ (i+j-n < 0 \/ i+j-n > 0)), cost: 1
  18: [5] -> LoAT_sink : (0 == 0 /\ -i-j+n > 0 /\ -i-j == 0 /\ -j+n > 0 /\ -j == 0), cost: NONTERM
  19: [5] -> LoAT_sink : (0 == 0 /\ i+j-n > 0 /\ j-n > 0 /\ -i-j == 0 /\ -j == 0), cost: NONTERM
  20: [5] -> LoAT_sink : (0 == 0 /\ -i-j+n > 0 /\ -i-j == 0 /\ -j+n > 0 /\ -j == 0), cost: NONTERM
  21: [5] -> LoAT_sink : (0 == 0 /\ i+j-n > 0 /\ j-n > 0 /\ -i-j == 0 /\ -j == 0), cost: NONTERM

	Certificate of Non-Termination

	Original rule:
	[5] -> [5] : i'=i+j, j'=i+2*j, t'=i+2*j, (i+j-n > 0 /\ j-n > 0), cost: 1
	New rule:
	[5] -> LoAT_sink : (0 == 0 /\ i+j-n > 0 /\ j-n > 0 /\ -i-j == 0 /\ -j == 0), cost: NONTERM

		i+j-n > 0 [0]: fixpoint yields (0 == 0 /\ i+j-n > 0 /\ -i-j == 0 /\ -j == 0)
		
		j-n > 0 [0]: fixpoint yields (0 == 0 /\ j-n > 0 /\ -i-j == 0 /\ -j == 0)
		
		Replacement map: {i+j-n > 0 -> (0 == 0 /\ i+j-n > 0 /\ -i-j == 0 /\ -j == 0), j-n > 0 -> (0 == 0 /\ j-n > 0 /\ -i-j == 0 /\ -j == 0)}

	Trace

	12[T]
	
	Blocked

	[{}, {9[T], 16[T], 17[(i+j-n < 0 /\ i+j-n > 0 /\ j-n < 0 /\ j-n > 0)]}]

Backtrack

	Trace

	Blocked

	[{12[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
