unknown

Initial ITS

Start location: l5
Program variables: result_4^0 w_5^0 x_6^0
   0: l0 -> l1 : result_4^0'=result_4^post1, w_5^0'=w_5^post1, x_6^0'=x_6^post1, (0 == 0 /\ 2-x_6^0 <= 0 /\ -w_5^post1+w_5^0 == 0 /\ 3-w_5^0 <= 0 /\ -x_6^post1+x_6^0 == 0), cost: 1
   1: l0 -> l2 : result_4^0'=result_4^post2, w_5^0'=w_5^post2, x_6^0'=x_6^post2, (-2+w_5^0 <= 0 /\ -1+w_5^post2-w_5^0 == 0 /\ 2-x_6^0 <= 0 /\ result_4^0-result_4^post2 == 0 /\ -1+x_6^post2-x_6^0 == 0), cost: 1
   3: l0 -> l3 : result_4^0'=result_4^post4, w_5^0'=w_5^post4, x_6^0'=x_6^post4, (-1+x_6^0 <= 0 /\ -1+w_5^post4-w_5^0 == 0 /\ -1+x_6^post4-x_6^0 == 0 /\ result_4^0-result_4^post4 == 0), cost: 1
   2: l2 -> l0 : result_4^0'=result_4^post3, w_5^0'=w_5^post3, x_6^0'=x_6^post3, (result_4^0-result_4^post3 == 0 /\ -w_5^post3+w_5^0 == 0 /\ -x_6^post3+x_6^0 == 0), cost: 1
   4: l3 -> l0 : result_4^0'=result_4^post5, w_5^0'=w_5^post5, x_6^0'=x_6^post5, (-w_5^post5+w_5^0 == 0 /\ -x_6^post5+x_6^0 == 0 /\ result_4^0-result_4^post5 == 0), cost: 1
   5: l4 -> l0 : result_4^0'=result_4^post6, w_5^0'=w_5^post6, x_6^0'=x_6^post6, (-w_5^post6+w_5^0 == 0 /\ result_4^0-result_4^post6 == 0 /\ -x_6^post6+x_6^0 == 0), cost: 1
   6: l5 -> l4 : result_4^0'=result_4^post7, w_5^0'=w_5^post7, x_6^0'=x_6^post7, (-w_5^post7+w_5^0 == 0 /\ result_4^0-result_4^post7 == 0 /\ -x_6^post7+x_6^0 == 0), cost: 1

Chained Linear Paths

Start location: l5
Program variables: result_4^0 w_5^0 x_6^0
   0: l0 -> l1 : result_4^0'=result_4^post1, w_5^0'=w_5^post1, x_6^0'=x_6^post1, (0 == 0 /\ 2-x_6^0 <= 0 /\ -w_5^post1+w_5^0 == 0 /\ 3-w_5^0 <= 0 /\ -x_6^post1+x_6^0 == 0), cost: 1
   8: l0 -> l0 : result_4^0'=result_4^post3, w_5^0'=w_5^post3, x_6^0'=x_6^post3, (-2+w_5^0 <= 0 /\ -1+w_5^post2-w_5^0 == 0 /\ w_5^post2-w_5^post3 == 0 /\ 2-x_6^0 <= 0 /\ x_6^post2-x_6^post3 == 0 /\ result_4^0-result_4^post2 == 0 /\ -1+x_6^post2-x_6^0 == 0 /\ result_4^post2-result_4^post3 == 0), cost: 1
   9: l0 -> l0 : result_4^0'=result_4^post5, w_5^0'=w_5^post5, x_6^0'=x_6^post5, (-1+x_6^0 <= 0 /\ -1+w_5^post4-w_5^0 == 0 /\ -x_6^post5+x_6^post4 == 0 /\ -1+x_6^post4-x_6^0 == 0 /\ w_5^post4-w_5^post5 == 0 /\ result_4^0-result_4^post4 == 0 /\ -result_4^post5+result_4^post4 == 0), cost: 1
   7: l5 -> l0 : result_4^0'=result_4^post6, w_5^0'=w_5^post6, x_6^0'=x_6^post6, (result_4^post7-result_4^post6 == 0 /\ x_6^post7-x_6^post6 == 0 /\ -w_5^post7+w_5^0 == 0 /\ result_4^0-result_4^post7 == 0 /\ w_5^post7-w_5^post6 == 0 /\ -x_6^post7+x_6^0 == 0), cost: 1

	Eliminating location l4 by chaining:

	Applied chaining

	First rule:
	l5 -> l4 : result_4^0'=result_4^post7, w_5^0'=w_5^post7, x_6^0'=x_6^post7, (-w_5^post7+w_5^0 == 0 /\ result_4^0-result_4^post7 == 0 /\ -x_6^post7+x_6^0 == 0), cost: 1
	Second rule:
	l4 -> l0 : result_4^0'=result_4^post6, w_5^0'=w_5^post6, x_6^0'=x_6^post6, (-w_5^post6+w_5^0 == 0 /\ result_4^0-result_4^post6 == 0 /\ -x_6^post6+x_6^0 == 0), cost: 1
	New rule:
	l5 -> l0 : result_4^0'=result_4^post6, w_5^0'=w_5^post6, x_6^0'=x_6^post6, (result_4^post7-result_4^post6 == 0 /\ x_6^post7-x_6^post6 == 0 /\ -w_5^post7+w_5^0 == 0 /\ result_4^0-result_4^post7 == 0 /\ w_5^post7-w_5^post6 == 0 /\ -x_6^post7+x_6^0 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 5 6
	
	Eliminating location l2 by chaining:

	Applied chaining

	First rule:
	l0 -> l2 : result_4^0'=result_4^post2, w_5^0'=w_5^post2, x_6^0'=x_6^post2, (-2+w_5^0 <= 0 /\ -1+w_5^post2-w_5^0 == 0 /\ 2-x_6^0 <= 0 /\ result_4^0-result_4^post2 == 0 /\ -1+x_6^post2-x_6^0 == 0), cost: 1
	Second rule:
	l2 -> l0 : result_4^0'=result_4^post3, w_5^0'=w_5^post3, x_6^0'=x_6^post3, (result_4^0-result_4^post3 == 0 /\ -w_5^post3+w_5^0 == 0 /\ -x_6^post3+x_6^0 == 0), cost: 1
	New rule:
	l0 -> l0 : result_4^0'=result_4^post3, w_5^0'=w_5^post3, x_6^0'=x_6^post3, (-2+w_5^0 <= 0 /\ -1+w_5^post2-w_5^0 == 0 /\ w_5^post2-w_5^post3 == 0 /\ 2-x_6^0 <= 0 /\ x_6^post2-x_6^post3 == 0 /\ result_4^0-result_4^post2 == 0 /\ -1+x_6^post2-x_6^0 == 0 /\ result_4^post2-result_4^post3 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 1 2
	
	Eliminating location l3 by chaining:

	Applied chaining

	First rule:
	l0 -> l3 : result_4^0'=result_4^post4, w_5^0'=w_5^post4, x_6^0'=x_6^post4, (-1+x_6^0 <= 0 /\ -1+w_5^post4-w_5^0 == 0 /\ -1+x_6^post4-x_6^0 == 0 /\ result_4^0-result_4^post4 == 0), cost: 1
	Second rule:
	l3 -> l0 : result_4^0'=result_4^post5, w_5^0'=w_5^post5, x_6^0'=x_6^post5, (-w_5^post5+w_5^0 == 0 /\ -x_6^post5+x_6^0 == 0 /\ result_4^0-result_4^post5 == 0), cost: 1
	New rule:
	l0 -> l0 : result_4^0'=result_4^post5, w_5^0'=w_5^post5, x_6^0'=x_6^post5, (-1+x_6^0 <= 0 /\ -1+w_5^post4-w_5^0 == 0 /\ -x_6^post5+x_6^post4 == 0 /\ -1+x_6^post4-x_6^0 == 0 /\ w_5^post4-w_5^post5 == 0 /\ result_4^0-result_4^post4 == 0 /\ -result_4^post5+result_4^post4 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 3 4

Simplified Transitions

Start location: l5
Program variables: result_4^0 w_5^0 x_6^0
  10: l0 -> l1 : result_4^0'=result_4^post1, (2-x_6^0 <= 0 /\ 3-w_5^0 <= 0), cost: 1
  12: l0 -> l0 : w_5^0'=1+w_5^0, x_6^0'=1+x_6^0, (-2+w_5^0 <= 0 /\ 2-x_6^0 <= 0), cost: 1
  13: l0 -> l0 : w_5^0'=1+w_5^0, x_6^0'=1+x_6^0, -1+x_6^0 <= 0, cost: 1
  11: l5 -> l0 : T, cost: 1

	Propagated Equalities

	Original rule:
	l0 -> l1 : result_4^0'=result_4^post1, w_5^0'=w_5^post1, x_6^0'=x_6^post1, (0 == 0 /\ 2-x_6^0 <= 0 /\ -w_5^post1+w_5^0 == 0 /\ 3-w_5^0 <= 0 /\ -x_6^post1+x_6^0 == 0), cost: 1
	New rule:
	l0 -> l1 : result_4^0'=result_4^post1, w_5^0'=w_5^0, x_6^0'=x_6^0, (0 == 0 /\ 2-x_6^0 <= 0 /\ 3-w_5^0 <= 0), cost: 1
	
		propagated equality w_5^post1 = w_5^0
		
		propagated equality x_6^post1 = x_6^0
		
	Simplified Guard

	Original rule:
	l0 -> l1 : result_4^0'=result_4^post1, w_5^0'=w_5^0, x_6^0'=x_6^0, (0 == 0 /\ 2-x_6^0 <= 0 /\ 3-w_5^0 <= 0), cost: 1
	New rule:
	l0 -> l1 : result_4^0'=result_4^post1, w_5^0'=w_5^0, x_6^0'=x_6^0, (2-x_6^0 <= 0 /\ 3-w_5^0 <= 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l1 : result_4^0'=result_4^post1, w_5^0'=w_5^0, x_6^0'=x_6^0, (2-x_6^0 <= 0 /\ 3-w_5^0 <= 0), cost: 1
	New rule:
	l0 -> l1 : result_4^0'=result_4^post1, (2-x_6^0 <= 0 /\ 3-w_5^0 <= 0), cost: 1
	
	Propagated Equalities

	Original rule:
	l5 -> l0 : result_4^0'=result_4^post6, w_5^0'=w_5^post6, x_6^0'=x_6^post6, (result_4^post7-result_4^post6 == 0 /\ x_6^post7-x_6^post6 == 0 /\ -w_5^post7+w_5^0 == 0 /\ result_4^0-result_4^post7 == 0 /\ w_5^post7-w_5^post6 == 0 /\ -x_6^post7+x_6^0 == 0), cost: 1
	New rule:
	l5 -> l0 : result_4^0'=result_4^post7, w_5^0'=w_5^post7, x_6^0'=x_6^post7, (0 == 0 /\ -w_5^post7+w_5^0 == 0 /\ result_4^0-result_4^post7 == 0 /\ -x_6^post7+x_6^0 == 0), cost: 1
	
		propagated equality result_4^post6 = result_4^post7
		
		propagated equality x_6^post6 = x_6^post7
		
		propagated equality w_5^post6 = w_5^post7
		
	Propagated Equalities

	Original rule:
	l5 -> l0 : result_4^0'=result_4^post7, w_5^0'=w_5^post7, x_6^0'=x_6^post7, (0 == 0 /\ -w_5^post7+w_5^0 == 0 /\ result_4^0-result_4^post7 == 0 /\ -x_6^post7+x_6^0 == 0), cost: 1
	New rule:
	l5 -> l0 : result_4^0'=result_4^0, w_5^0'=w_5^0, x_6^0'=x_6^0, 0 == 0, cost: 1
	
		propagated equality w_5^post7 = w_5^0
		
		propagated equality result_4^post7 = result_4^0
		
		propagated equality x_6^post7 = x_6^0
		
	Simplified Guard

	Original rule:
	l5 -> l0 : result_4^0'=result_4^0, w_5^0'=w_5^0, x_6^0'=x_6^0, 0 == 0, cost: 1
	New rule:
	l5 -> l0 : result_4^0'=result_4^0, w_5^0'=w_5^0, x_6^0'=x_6^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l5 -> l0 : result_4^0'=result_4^0, w_5^0'=w_5^0, x_6^0'=x_6^0, T, cost: 1
	New rule:
	l5 -> l0 : T, cost: 1
	
	Propagated Equalities

	Original rule:
	l0 -> l0 : result_4^0'=result_4^post3, w_5^0'=w_5^post3, x_6^0'=x_6^post3, (-2+w_5^0 <= 0 /\ -1+w_5^post2-w_5^0 == 0 /\ w_5^post2-w_5^post3 == 0 /\ 2-x_6^0 <= 0 /\ x_6^post2-x_6^post3 == 0 /\ result_4^0-result_4^post2 == 0 /\ -1+x_6^post2-x_6^0 == 0 /\ result_4^post2-result_4^post3 == 0), cost: 1
	New rule:
	l0 -> l0 : result_4^0'=result_4^post2, w_5^0'=w_5^post2, x_6^0'=x_6^post2, (0 == 0 /\ -2+w_5^0 <= 0 /\ -1+w_5^post2-w_5^0 == 0 /\ 2-x_6^0 <= 0 /\ result_4^0-result_4^post2 == 0 /\ -1+x_6^post2-x_6^0 == 0), cost: 1
	
		propagated equality w_5^post3 = w_5^post2
		
		propagated equality x_6^post3 = x_6^post2
		
		propagated equality result_4^post3 = result_4^post2
		
	Propagated Equalities

	Original rule:
	l0 -> l0 : result_4^0'=result_4^post2, w_5^0'=w_5^post2, x_6^0'=x_6^post2, (0 == 0 /\ -2+w_5^0 <= 0 /\ -1+w_5^post2-w_5^0 == 0 /\ 2-x_6^0 <= 0 /\ result_4^0-result_4^post2 == 0 /\ -1+x_6^post2-x_6^0 == 0), cost: 1
	New rule:
	l0 -> l0 : result_4^0'=result_4^0, w_5^0'=1+w_5^0, x_6^0'=1+x_6^0, (0 == 0 /\ -2+w_5^0 <= 0 /\ 2-x_6^0 <= 0), cost: 1
	
		propagated equality w_5^post2 = 1+w_5^0
		
		propagated equality result_4^post2 = result_4^0
		
		propagated equality x_6^post2 = 1+x_6^0
		
	Simplified Guard

	Original rule:
	l0 -> l0 : result_4^0'=result_4^0, w_5^0'=1+w_5^0, x_6^0'=1+x_6^0, (0 == 0 /\ -2+w_5^0 <= 0 /\ 2-x_6^0 <= 0), cost: 1
	New rule:
	l0 -> l0 : result_4^0'=result_4^0, w_5^0'=1+w_5^0, x_6^0'=1+x_6^0, (-2+w_5^0 <= 0 /\ 2-x_6^0 <= 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l0 : result_4^0'=result_4^0, w_5^0'=1+w_5^0, x_6^0'=1+x_6^0, (-2+w_5^0 <= 0 /\ 2-x_6^0 <= 0), cost: 1
	New rule:
	l0 -> l0 : w_5^0'=1+w_5^0, x_6^0'=1+x_6^0, (-2+w_5^0 <= 0 /\ 2-x_6^0 <= 0), cost: 1
	
	Propagated Equalities

	Original rule:
	l0 -> l0 : result_4^0'=result_4^post5, w_5^0'=w_5^post5, x_6^0'=x_6^post5, (-1+x_6^0 <= 0 /\ -1+w_5^post4-w_5^0 == 0 /\ -x_6^post5+x_6^post4 == 0 /\ -1+x_6^post4-x_6^0 == 0 /\ w_5^post4-w_5^post5 == 0 /\ result_4^0-result_4^post4 == 0 /\ -result_4^post5+result_4^post4 == 0), cost: 1
	New rule:
	l0 -> l0 : result_4^0'=result_4^post4, w_5^0'=w_5^post4, x_6^0'=x_6^post4, (0 == 0 /\ -1+x_6^0 <= 0 /\ -1+w_5^post4-w_5^0 == 0 /\ -1+x_6^post4-x_6^0 == 0 /\ result_4^0-result_4^post4 == 0), cost: 1
	
		propagated equality x_6^post5 = x_6^post4
		
		propagated equality w_5^post5 = w_5^post4
		
		propagated equality result_4^post5 = result_4^post4
		
	Propagated Equalities

	Original rule:
	l0 -> l0 : result_4^0'=result_4^post4, w_5^0'=w_5^post4, x_6^0'=x_6^post4, (0 == 0 /\ -1+x_6^0 <= 0 /\ -1+w_5^post4-w_5^0 == 0 /\ -1+x_6^post4-x_6^0 == 0 /\ result_4^0-result_4^post4 == 0), cost: 1
	New rule:
	l0 -> l0 : result_4^0'=result_4^0, w_5^0'=1+w_5^0, x_6^0'=1+x_6^0, (0 == 0 /\ -1+x_6^0 <= 0), cost: 1
	
		propagated equality w_5^post4 = 1+w_5^0
		
		propagated equality x_6^post4 = 1+x_6^0
		
		propagated equality result_4^post4 = result_4^0
		
	Simplified Guard

	Original rule:
	l0 -> l0 : result_4^0'=result_4^0, w_5^0'=1+w_5^0, x_6^0'=1+x_6^0, (0 == 0 /\ -1+x_6^0 <= 0), cost: 1
	New rule:
	l0 -> l0 : result_4^0'=result_4^0, w_5^0'=1+w_5^0, x_6^0'=1+x_6^0, -1+x_6^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l0 : result_4^0'=result_4^0, w_5^0'=1+w_5^0, x_6^0'=1+x_6^0, -1+x_6^0 <= 0, cost: 1
	New rule:
	l0 -> l0 : w_5^0'=1+w_5^0, x_6^0'=1+x_6^0, -1+x_6^0 <= 0, cost: 1

Step with 11

	Trace

	11[T]
	
	Blocked

	[{}, {}]

Step with 10

	Trace

	11[T], 10[(2-x_6^0 <= 0 /\ 3-w_5^0 <= 0)]
	
	Blocked

	[{}, {}, {}]

Backtrack

	Trace

	11[T]
	
	Blocked

	[{}, {10[T]}]

Step with 12

	Trace

	11[T], 12[(-2+w_5^0 <= 0 /\ 2-x_6^0 <= 0)]
	
	Blocked

	[{}, {10[T]}, {}]

Accelerate

Start location: l5
Program variables: result_4^0 w_5^0 x_6^0
  10: l0 -> l1 : result_4^0'=result_4^post1, (2-x_6^0 <= 0 /\ 3-w_5^0 <= 0), cost: 1
  12: l0 -> l0 : w_5^0'=1+w_5^0, x_6^0'=1+x_6^0, (-2+w_5^0 <= 0 /\ 2-x_6^0 <= 0), cost: 1
  13: l0 -> l0 : w_5^0'=1+w_5^0, x_6^0'=1+x_6^0, -1+x_6^0 <= 0, cost: 1
  14: l0 -> l0 : w_5^0'=n+w_5^0, x_6^0'=n+x_6^0, (-1+n >= 0 /\ 3-n-w_5^0 >= 0 /\ -2+x_6^0 >= 0), cost: 1
  11: l5 -> l0 : T, cost: 1

	Loop Acceleration

	Original rule:
	l0 -> l0 : w_5^0'=1+w_5^0, x_6^0'=1+x_6^0, (-2+w_5^0 <= 0 /\ 2-x_6^0 <= 0), cost: 1
	New rule:
	l0 -> l0 : w_5^0'=n+w_5^0, x_6^0'=n+x_6^0, (-1+n >= 0 /\ 3-n-w_5^0 >= 0 /\ -2+x_6^0 >= 0), cost: 1

		2-w_5^0 >= 0 [0]: montonic decrease yields 3-n-w_5^0 >= 0
		
		2-w_5^0 >= 0 [1]: eventual increase yields (1 <= 0 /\ 2-w_5^0 >= 0)
		
		-2+x_6^0 >= 0 [0]: monotonic increase yields -2+x_6^0 >= 0
		
		Replacement map: {2-w_5^0 >= 0 -> 3-n-w_5^0 >= 0, -2+x_6^0 >= 0 -> -2+x_6^0 >= 0}

	Trace

	11[T], 14[(-1+n >= 0 /\ 3-n-w_5^0 >= 0 /\ -2+x_6^0 >= 0)]
	
	Blocked

	[{}, {10[T]}, {12[T], 14[T]}]

Step with 10

	Trace

	11[T], 14[(-1+n >= 0 /\ 3-n-w_5^0 >= 0 /\ -2+x_6^0 >= 0)], 10[(2-x_6^0 <= 0 /\ 3-w_5^0 <= 0)]
	
	Blocked

	[{}, {10[T]}, {12[T], 14[T]}, {}]

Backtrack

	Trace

	11[T], 14[(-1+n >= 0 /\ 3-n-w_5^0 >= 0 /\ -2+x_6^0 >= 0)]
	
	Blocked

	[{}, {10[T]}, {10[T], 12[T], 14[T]}]

Backtrack

	Trace

	11[T]
	
	Blocked

	[{}, {10[T], 14[T]}]

Step with 12

	Trace

	11[T], 12[(-2+w_5^0 <= 0 /\ 2-x_6^0 <= 0)]
	
	Blocked

	[{}, {10[T], 14[T]}, {}]

Covered

	Trace

	11[T]
	
	Blocked

	[{}, {10[T], 12[T], 14[T]}]

Step with 13

	Trace

	11[T], 13[(-1+x_6^0 <= 0)]
	
	Blocked

	[{}, {10[T], 12[T], 14[T]}, {}]

Accelerate

Start location: l5
Program variables: result_4^0 w_5^0 x_6^0
  10: l0 -> l1 : result_4^0'=result_4^post1, (2-x_6^0 <= 0 /\ 3-w_5^0 <= 0), cost: 1
  12: l0 -> l0 : w_5^0'=1+w_5^0, x_6^0'=1+x_6^0, (-2+w_5^0 <= 0 /\ 2-x_6^0 <= 0), cost: 1
  13: l0 -> l0 : w_5^0'=1+w_5^0, x_6^0'=1+x_6^0, -1+x_6^0 <= 0, cost: 1
  14: l0 -> l0 : w_5^0'=n+w_5^0, x_6^0'=n+x_6^0, (-1+n >= 0 /\ 3-n-w_5^0 >= 0 /\ -2+x_6^0 >= 0), cost: 1
  15: l0 -> l0 : w_5^0'=n2+w_5^0, x_6^0'=n2+x_6^0, (2-n2-x_6^0 >= 0 /\ -1+n2 >= 0), cost: 1
  11: l5 -> l0 : T, cost: 1

	Loop Acceleration

	Original rule:
	l0 -> l0 : w_5^0'=1+w_5^0, x_6^0'=1+x_6^0, (-1+x_6^0 <= 0), cost: 1
	New rule:
	l0 -> l0 : w_5^0'=n2+w_5^0, x_6^0'=n2+x_6^0, (2-n2-x_6^0 >= 0 /\ -1+n2 >= 0), cost: 1

		1-x_6^0 >= 0 [0]: montonic decrease yields 2-n2-x_6^0 >= 0
		
		1-x_6^0 >= 0 [1]: eventual increase yields (1 <= 0 /\ 1-x_6^0 >= 0)
		
		Replacement map: {1-x_6^0 >= 0 -> 2-n2-x_6^0 >= 0}

	Trace

	11[T], 15[(2-n2-x_6^0 >= 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {10[T], 12[T], 14[T]}, {13[T], 15[T]}]

Step with 10

	Trace

	11[T], 15[(2-n2-x_6^0 >= 0 /\ -1+n2 >= 0)], 10[(2-x_6^0 <= 0 /\ 3-w_5^0 <= 0)]
	
	Blocked

	[{}, {10[T], 12[T], 14[T]}, {13[T], 15[T]}, {}]

Backtrack

	Trace

	11[T], 15[(2-n2-x_6^0 >= 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {10[T], 12[T], 14[T]}, {10[T], 13[T], 15[T]}]

Step with 12

	Trace

	11[T], 15[(2-n2-x_6^0 >= 0 /\ -1+n2 >= 0)], 12[(-2+w_5^0 <= 0 /\ 2-x_6^0 <= 0)]
	
	Blocked

	[{}, {10[T], 12[T], 14[T]}, {10[T], 13[T], 15[T]}, {}]

Covered

	Trace

	11[T], 15[(2-n2-x_6^0 >= 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {10[T], 12[T], 14[T]}, {10[T], 12[T], 13[T], 15[T]}]

Step with 14

	Trace

	11[T], 15[(2-n2-x_6^0 >= 0 /\ -1+n2 >= 0)], 14[(-1+n >= 0 /\ 3-n-w_5^0 >= 0 /\ -2+x_6^0 >= 0)]
	
	Blocked

	[{}, {10[T], 12[T], 14[T]}, {10[T], 12[T], 13[T], 15[T]}, {14[T]}]

Acceleration Failed

marked recursive suffix as redundant

Step with 10

	Trace

	11[T], 15[(2-n2-x_6^0 >= 0 /\ -1+n2 >= 0)], 14[(-1+n >= 0 /\ 3-n-w_5^0 >= 0 /\ -2+x_6^0 >= 0)], 10[(2-x_6^0 <= 0 /\ 3-w_5^0 <= 0)]
	
	Blocked

	[{}, {10[T], 12[T], 14[T]}, {10[T], 12[T], 13[T], 15[T]}, {14[T], 15[T]}, {}]

Backtrack

	Trace

	11[T], 15[(2-n2-x_6^0 >= 0 /\ -1+n2 >= 0)], 14[(-1+n >= 0 /\ 3-n-w_5^0 >= 0 /\ -2+x_6^0 >= 0)]
	
	Blocked

	[{}, {10[T], 12[T], 14[T]}, {10[T], 12[T], 13[T], 15[T]}, {10[T], 14[T], 15[T]}]

Step with 12

	Trace

	11[T], 15[(2-n2-x_6^0 >= 0 /\ -1+n2 >= 0)], 14[(-1+n >= 0 /\ 3-n-w_5^0 >= 0 /\ -2+x_6^0 >= 0)], 12[(-2+w_5^0 <= 0 /\ 2-x_6^0 <= 0)]
	
	Blocked

	[{}, {10[T], 12[T], 14[T]}, {10[T], 12[T], 13[T], 15[T]}, {10[T], 14[T], 15[T]}, {}]

Covered

	Trace

	11[T], 15[(2-n2-x_6^0 >= 0 /\ -1+n2 >= 0)], 14[(-1+n >= 0 /\ 3-n-w_5^0 >= 0 /\ -2+x_6^0 >= 0)]
	
	Blocked

	[{}, {10[T], 12[T], 14[T]}, {10[T], 12[T], 13[T], 15[T]}, {10[T], 12[T], 14[T], 15[T]}]

Backtrack

	Trace

	11[T], 15[(2-n2-x_6^0 >= 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {10[T], 12[T], 14[T]}, {10[T], 12[T], 13[T], 14[T], 15[T]}]

Backtrack

	Trace

	11[T]
	
	Blocked

	[{}, {10[T], 12[T], 14[T], 15[T]}]

Step with 13

	Trace

	11[T], 13[(-1+x_6^0 <= 0)]
	
	Blocked

	[{}, {10[T], 12[T], 14[T], 15[T]}, {}]

Covered

	Trace

	11[T]
	
	Blocked

	[{}, {10[T], 12[T], 13[T], 14[T], 15[T]}]

Backtrack

	Trace

	Blocked

	[{11[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
