NO

Initial ITS
Start location: __init
   0: f1_0_main_ConstantStackPush -> f55_0_main_GE : arg1'=arg1P0, -arg1P0 == 0, cost: 1
   1: f55_0_main_GE -> f55_0_main_GE : arg1'=arg1P1, (-11+arg1 < 0 /\ -20+arg1 < 0 /\ 1-arg1P1+arg1 == 0), cost: 1
   2: f55_0_main_GE -> f55_0_main_GE : arg1'=arg1P2, (-20+arg1 < 0 /\ -arg1P2+arg1 == 0 /\ -10+arg1 > 0), cost: 1
   3: __init -> f1_0_main_ConstantStackPush : arg1'=arg1P3, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_ConstantStackPush -> f55_0_main_GE : arg1'=arg1P0, -arg1P0 == 0, cost: 1
New rule:
f1_0_main_ConstantStackPush -> f55_0_main_GE : arg1'=0, TRUE, cost: 1

Applied preprocessing
Original rule:
f55_0_main_GE -> f55_0_main_GE : arg1'=arg1P1, (-11+arg1 < 0 /\ -20+arg1 < 0 /\ 1-arg1P1+arg1 == 0), cost: 1
New rule:
f55_0_main_GE -> f55_0_main_GE : arg1'=1+arg1, 11-arg1 > 0, cost: 1

Applied preprocessing
Original rule:
f55_0_main_GE -> f55_0_main_GE : arg1'=arg1P2, (-20+arg1 < 0 /\ -arg1P2+arg1 == 0 /\ -10+arg1 > 0), cost: 1
New rule:
f55_0_main_GE -> f55_0_main_GE : (-10+arg1 > 0 /\ 20-arg1 > 0), cost: 1

Simplified rules
Start location: __init
   4: f1_0_main_ConstantStackPush -> f55_0_main_GE : arg1'=0, TRUE, cost: 1
   5: f55_0_main_GE -> f55_0_main_GE : arg1'=1+arg1, 11-arg1 > 0, cost: 1
   6: f55_0_main_GE -> f55_0_main_GE : (-10+arg1 > 0 /\ 20-arg1 > 0), cost: 1
   3: __init -> f1_0_main_ConstantStackPush : arg1'=arg1P3, TRUE, cost: 1


Applied acceleration
Original rule:
f55_0_main_GE -> f55_0_main_GE : arg1'=1+arg1, 11-arg1 > 0, cost: 1
New rule:
f55_0_main_GE -> f55_0_main_GE : arg1'=n+arg1, (n >= 0 /\ 12-n-arg1 > 0), cost: n
Sub-proof via acceration calculus written to file:///tmp/tmpnam_LfPMma.txt

Applied instantiation
Original rule:
f55_0_main_GE -> f55_0_main_GE : arg1'=n+arg1, (n >= 0 /\ 12-n-arg1 > 0), cost: n
New rule:
f55_0_main_GE -> f55_0_main_GE : arg1'=11, (1 > 0 /\ 11-arg1 >= 0), cost: 11-arg1

Applied nonterm
Original rule:
f55_0_main_GE -> f55_0_main_GE : (-10+arg1 > 0 /\ 20-arg1 > 0), cost: 1
New rule:
f55_0_main_GE -> [3] : (-10+arg1 > 0 /\ 20-arg1 > 0 /\ n0 >= 0), cost: NONTERM
Sub-proof via acceration calculus written to file:///tmp/tmpnam_HJkhEh.txt

Applied chaining
First rule:
f55_0_main_GE -> f55_0_main_GE : (-10+arg1 > 0 /\ 20-arg1 > 0), cost: 1
Second rule:
f55_0_main_GE -> f55_0_main_GE : arg1'=11, (1 > 0 /\ 11-arg1 >= 0), cost: 11-arg1
New rule:
f55_0_main_GE -> f55_0_main_GE : arg1'=11, -11+arg1 == 0, cost: 12-arg1

Applied nonterm
Original rule:
f55_0_main_GE -> f55_0_main_GE : arg1'=11, -11+arg1 == 0, cost: 12-arg1
New rule:
f55_0_main_GE -> [3] : (-1+n2 >= 0 /\ -11+arg1 >= 0 /\ 11-arg1 >= 0), cost: NONTERM
Sub-proof via acceration calculus written to file:///tmp/tmpnam_bfdJBj.txt

Applied chaining
First rule:
f55_0_main_GE -> f55_0_main_GE : arg1'=11, (1 > 0 /\ 11-arg1 >= 0), cost: 11-arg1
Second rule:
f55_0_main_GE -> [3] : (-1+n2 >= 0 /\ -11+arg1 >= 0 /\ 11-arg1 >= 0), cost: NONTERM
New rule:
f55_0_main_GE -> [3] : (0 >= 0 /\ 1 > 0 /\ -1+n2 >= 0 /\ 11-arg1 >= 0), cost: NONTERM

Applied chaining
First rule:
f55_0_main_GE -> f55_0_main_GE : arg1'=11, (1 > 0 /\ 11-arg1 >= 0), cost: 11-arg1
Second rule:
f55_0_main_GE -> f55_0_main_GE : (-10+arg1 > 0 /\ 20-arg1 > 0), cost: 1
New rule:
f55_0_main_GE -> f55_0_main_GE : arg1'=11, -11+arg1 <= 0, cost: 12-arg1

Applied nonterm
Original rule:
f55_0_main_GE -> f55_0_main_GE : arg1'=11, -11+arg1 <= 0, cost: 12-arg1
New rule:
f55_0_main_GE -> [3] : (11-arg1 >= 0 /\ -1+n3 >= 0), cost: NONTERM
Sub-proof via acceration calculus written to file:///tmp/tmpnam_bCCnjj.txt

Applied chaining
First rule:
f55_0_main_GE -> f55_0_main_GE : (-10+arg1 > 0 /\ 20-arg1 > 0), cost: 1
Second rule:
f55_0_main_GE -> [3] : (11-arg1 >= 0 /\ -1+n3 >= 0), cost: NONTERM
New rule:
f55_0_main_GE -> [3] : (-10+arg1 > 0 /\ 11-arg1 >= 0 /\ -1+n3 >= 0 /\ 20-arg1 > 0), cost: NONTERM

Applied simplification
Original rule:
f55_0_main_GE -> f55_0_main_GE : arg1'=11, (1 > 0 /\ 11-arg1 >= 0), cost: 11-arg1
New rule:
f55_0_main_GE -> f55_0_main_GE : arg1'=11, -11+arg1 <= 0, cost: 11-arg1

Applied simplification
Original rule:
f55_0_main_GE -> [3] : (-1+n2 >= 0 /\ -11+arg1 >= 0 /\ 11-arg1 >= 0), cost: NONTERM
New rule:
f55_0_main_GE -> [3] : (-1+n2 >= 0 /\ -11+arg1 <= 0 /\ -11+arg1 >= 0), cost: NONTERM

Applied simplification
Original rule:
f55_0_main_GE -> [3] : (0 >= 0 /\ 1 > 0 /\ -1+n2 >= 0 /\ 11-arg1 >= 0), cost: NONTERM
New rule:
f55_0_main_GE -> [3] : (-1+n2 >= 0 /\ -11+arg1 <= 0), cost: NONTERM

Applied simplification
Original rule:
f55_0_main_GE -> [3] : (11-arg1 >= 0 /\ -1+n3 >= 0), cost: NONTERM
New rule:
f55_0_main_GE -> [3] : (-11+arg1 <= 0 /\ -1+n3 >= 0), cost: NONTERM

Applied simplification
Original rule:
f55_0_main_GE -> [3] : (-10+arg1 > 0 /\ 11-arg1 >= 0 /\ -1+n3 >= 0 /\ 20-arg1 > 0), cost: NONTERM
New rule:
f55_0_main_GE -> [3] : (-11+arg1 <= 0 /\ -10+arg1 > 0 /\ -1+n3 >= 0), cost: NONTERM

Applied deletion
Removed the following rules: 5 6

Accelerated simple loops
Start location: __init
   4: f1_0_main_ConstantStackPush -> f55_0_main_GE : arg1'=0, TRUE, cost: 1
   8: f55_0_main_GE -> [3] : (-10+arg1 > 0 /\ 20-arg1 > 0 /\ n0 >= 0), cost: NONTERM
  13: f55_0_main_GE -> f55_0_main_GE : arg1'=11, -11+arg1 <= 0, cost: 11-arg1
  14: f55_0_main_GE -> [3] : (-1+n2 >= 0 /\ -11+arg1 <= 0 /\ -11+arg1 >= 0), cost: NONTERM
  15: f55_0_main_GE -> [3] : (-1+n2 >= 0 /\ -11+arg1 <= 0), cost: NONTERM
  16: f55_0_main_GE -> [3] : (-11+arg1 <= 0 /\ -1+n3 >= 0), cost: NONTERM
  17: f55_0_main_GE -> [3] : (-11+arg1 <= 0 /\ -10+arg1 > 0 /\ -1+n3 >= 0), cost: NONTERM
   3: __init -> f1_0_main_ConstantStackPush : arg1'=arg1P3, TRUE, cost: 1


Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f55_0_main_GE : arg1'=0, TRUE, cost: 1
Second rule:
f55_0_main_GE -> f55_0_main_GE : arg1'=11, -11+arg1 <= 0, cost: 11-arg1
New rule:
f1_0_main_ConstantStackPush -> f55_0_main_GE : arg1'=11, -11 <= 0, cost: 12

Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f55_0_main_GE : arg1'=0, TRUE, cost: 1
Second rule:
f55_0_main_GE -> [3] : (-1+n2 >= 0 /\ -11+arg1 <= 0), cost: NONTERM
New rule:
f1_0_main_ConstantStackPush -> [3] : -11 <= 0, cost: NONTERM

Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f55_0_main_GE : arg1'=0, TRUE, cost: 1
Second rule:
f55_0_main_GE -> [3] : (-11+arg1 <= 0 /\ -1+n3 >= 0), cost: NONTERM
New rule:
f1_0_main_ConstantStackPush -> [3] : -11 <= 0, cost: NONTERM

Applied deletion
Removed the following rules: 8 13 14 15 16 17

Chained accelerated rules with incoming rules
Start location: __init
   4: f1_0_main_ConstantStackPush -> f55_0_main_GE : arg1'=0, TRUE, cost: 1
  18: f1_0_main_ConstantStackPush -> f55_0_main_GE : arg1'=11, -11 <= 0, cost: 12
  19: f1_0_main_ConstantStackPush -> [3] : -11 <= 0, cost: NONTERM
   3: __init -> f1_0_main_ConstantStackPush : arg1'=arg1P3, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
  19: f1_0_main_ConstantStackPush -> [3] : -11 <= 0, cost: NONTERM
   3: __init -> f1_0_main_ConstantStackPush : arg1'=arg1P3, TRUE, cost: 1


Eliminating location f1_0_main_ConstantStackPush by chaining:

Applied chaining
First rule:
__init -> f1_0_main_ConstantStackPush : arg1'=arg1P3, TRUE, cost: 1
Second rule:
f1_0_main_ConstantStackPush -> [3] : -11 <= 0, cost: NONTERM
New rule:
__init -> [3] : -11 <= 0, cost: NONTERM

Applied deletion
Removed the following rules: 3 19

Eliminated locations on linear paths
Start location: __init
  20: __init -> [3] : -11 <= 0, cost: NONTERM


Computing asymptotic complexity
Proved nontermination of rule 20 via SMT.

Proved the following lower bound
Complexity:  Nonterm
Cpx degree: Nonterm

Solved cost: NONTERM
Rule cost:   NONTERM
Rule guard:  -11 <= 0
