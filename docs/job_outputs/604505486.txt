WORST_CASE(Omega(0),?)

Initial ITS
Start location: __init
   0: f1_0_main_Load -> f165_0_appendNewList_LE : arg5'=arg5P0, arg2'=arg2P0, arg4'=arg4P0, arg1'=arg1P0, arg3'=arg3P0, (-3+arg3P0 > 0 /\ -5+arg2P0 > 0 /\ arg2 > 0 /\ -5+arg2P0-arg1 <= 0 /\ -arg5P0 == 0 /\ -arg1+arg1P0 <= 0 /\ arg1 > 0 /\ arg1P0 > 0 /\ -3+arg3P0-arg1 <= 0 /\ 1+arg4P0 > 0), cost: 1
   1: f165_0_appendNewList_LE -> f200_0_random_ArrayAccess : arg5'=arg5P1, arg2'=arg2P1, arg4'=arg4P1, arg1'=arg1P1, arg3'=arg3P1, (-arg5+x140 > 0 /\ -4+arg2 > 0 /\ arg5 > 0 /\ -4+arg1P1 > 0 /\ arg1 > 0 /\ -2+arg3 > 0 /\ -2+arg4 < 0 /\ -arg5+x130 > 0), cost: 1
   2: f165_0_appendNewList_LE -> f200_0_random_ArrayAccess : arg5'=arg5P2, arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg3'=arg3P2, (-5+arg2 > 0 /\ -6+arg1P2 > 0 /\ -3+arg1P2-arg3 <= 0 /\ arg1 > 0 /\ -6-arg1+arg1P2 <= 0 /\ -1-arg2+arg1P2 <= 0 /\ -3+arg3 > 0 /\ -2+arg4 < 0), cost: 1
   3: f165_0_appendNewList_LE -> f165_0_appendNewList_LE : arg5'=arg5P3, arg2'=arg2P3, arg4'=arg4P3, arg1'=arg1P3, arg3'=arg3P3, (-4+arg2 > 0 /\ arg5 > 0 /\ -2+arg3P3 > 0 /\ -1+arg4 > 0 /\ -1+arg4-arg4P3 == 0 /\ arg1P3 > 0 /\ 4-arg2+arg1P3 <= 0 /\ -4+arg2P3 > 0 /\ 2+arg1P3-arg3 <= 0 /\ arg1P3-arg1 <= 0 /\ arg1 > 0 /\ -arg5+arg5P3 > 0 /\ -2+arg3 > 0), cost: 1
   4: f165_0_appendNewList_LE -> f165_0_appendNewList_LE : arg5'=arg5P4, arg2'=arg2P4, arg4'=arg4P4, arg1'=arg1P4, arg3'=arg3P4, (-7+arg2P4 > 0 /\ -7+arg2P4-arg1 <= 0 /\ -5+arg2 > 0 /\ -1+arg4 > 0 /\ -2-arg2+arg2P4 <= 0 /\ 1-arg5P4 == 0 /\ 3-arg3+arg1P4 <= 0 /\ -2+arg3P4-arg3 <= 0 /\ 5-arg2+arg1P4 <= 0 /\ -arg1+arg1P4 <= 0 /\ -5+arg3P4 > 0 /\ -5+arg3P4-arg1 <= 0 /\ arg1 > 0 /\ -4+arg2P4-arg3 <= 0 /\ arg3P4-arg2 <= 0 /\ -3+arg3 > 0 /\ arg1P4 > 0 /\ -1+arg4-arg4P4 == 0), cost: 1
   5: f200_0_random_ArrayAccess -> f314_0_appendNewList_LE : arg5'=arg5P5, arg2'=arg2P5, arg4'=arg4P5, arg1'=arg1P5, arg3'=arg3P5, (-4+arg1 > 0 /\ 1+arg2P5 > 0 /\ -arg3P5 == 0 /\ -3+arg1P5 > 0 /\ -1+arg2 > 0 /\ 1+arg1P5-arg1 <= 0), cost: 1
   6: f314_0_appendNewList_LE -> f314_0_appendNewList_LE : arg5'=arg5P6, arg2'=arg2P6, arg4'=arg4P6, arg1'=arg1P6, arg3'=arg3P6, (-2+arg1 > 0 /\ arg3P6-arg3 > 0 /\ -1+arg2-arg2P6 == 0 /\ -1+arg2 > 0 /\ -2+arg1P6 > 0 /\ arg3 > 0), cost: 1
   7: f314_0_appendNewList_LE -> f314_0_appendNewList_LE : arg5'=arg5P7, arg2'=arg2P7, arg4'=arg4P7, arg1'=arg1P7, arg3'=arg3P7, (-3+arg1 > 0 /\ -1+arg2-arg2P7 == 0 /\ -1+arg2 > 0 /\ 1-arg3P7 == 0 /\ -5+arg1P7 > 0 /\ -2+arg1P7-arg1 <= 0), cost: 1
   8: f314_0_appendNewList_LE -> f387_0_length_NULL : arg5'=arg5P8, arg2'=arg2P8, arg4'=arg4P8, arg1'=arg1P8, arg3'=arg3P8, (-2+arg1 > 0 /\ -2+arg2 < 0 /\ 2-arg1+arg1P8 <= 0 /\ arg1P8 > 0), cost: 1
   9: f387_0_length_NULL -> f387_0_length_NULL : arg5'=arg5P9, arg2'=arg2P9, arg4'=arg4P9, arg1'=arg1P9, arg3'=arg3P9, (1+arg1P9-arg1 <= 0 /\ arg1 > 0 /\ 1+arg1P9 > 0), cost: 1
  10: __init -> f1_0_main_Load : arg5'=arg5P10, arg2'=arg2P10, arg4'=arg4P10, arg1'=arg1P10, arg3'=arg3P10, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_Load -> f165_0_appendNewList_LE : arg5'=arg5P0, arg2'=arg2P0, arg4'=arg4P0, arg1'=arg1P0, arg3'=arg3P0, (-3+arg3P0 > 0 /\ -5+arg2P0 > 0 /\ arg2 > 0 /\ -5+arg2P0-arg1 <= 0 /\ -arg5P0 == 0 /\ -arg1+arg1P0 <= 0 /\ arg1 > 0 /\ arg1P0 > 0 /\ -3+arg3P0-arg1 <= 0 /\ 1+arg4P0 > 0), cost: 1
New rule:
f1_0_main_Load -> f165_0_appendNewList_LE : arg5'=0, arg2'=arg2P0, arg4'=arg4P0, arg1'=arg1P0, arg3'=arg3P0, (-3+arg3P0 > 0 /\ -5+arg2P0 > 0 /\ arg2 > 0 /\ -5+arg2P0-arg1 <= 0 /\ -arg1+arg1P0 <= 0 /\ arg1P0 > 0 /\ -3+arg3P0-arg1 <= 0 /\ 1+arg4P0 > 0), cost: 1

Applied preprocessing
Original rule:
f165_0_appendNewList_LE -> f200_0_random_ArrayAccess : arg5'=arg5P1, arg2'=arg2P1, arg4'=arg4P1, arg1'=arg1P1, arg3'=arg3P1, (-arg5+x140 > 0 /\ -4+arg2 > 0 /\ arg5 > 0 /\ -4+arg1P1 > 0 /\ arg1 > 0 /\ -2+arg3 > 0 /\ -2+arg4 < 0 /\ -arg5+x130 > 0), cost: 1
New rule:
f165_0_appendNewList_LE -> f200_0_random_ArrayAccess : arg5'=arg5P1, arg2'=arg2P1, arg4'=arg4P1, arg1'=arg1P1, arg3'=arg3P1, (-4+arg2 > 0 /\ arg5 > 0 /\ 2-arg4 > 0 /\ -4+arg1P1 > 0 /\ arg1 > 0 /\ -2+arg3 > 0), cost: 1

Applied preprocessing
Original rule:
f165_0_appendNewList_LE -> f200_0_random_ArrayAccess : arg5'=arg5P2, arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg3'=arg3P2, (-5+arg2 > 0 /\ -6+arg1P2 > 0 /\ -3+arg1P2-arg3 <= 0 /\ arg1 > 0 /\ -6-arg1+arg1P2 <= 0 /\ -1-arg2+arg1P2 <= 0 /\ -3+arg3 > 0 /\ -2+arg4 < 0), cost: 1
New rule:
f165_0_appendNewList_LE -> f200_0_random_ArrayAccess : arg5'=arg5P2, arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg3'=arg3P2, (-6+arg1P2 > 0 /\ 2-arg4 > 0 /\ -3+arg1P2-arg3 <= 0 /\ -6-arg1+arg1P2 <= 0 /\ -1-arg2+arg1P2 <= 0), cost: 1

Applied preprocessing
Original rule:
f165_0_appendNewList_LE -> f165_0_appendNewList_LE : arg5'=arg5P3, arg2'=arg2P3, arg4'=arg4P3, arg1'=arg1P3, arg3'=arg3P3, (-4+arg2 > 0 /\ arg5 > 0 /\ -2+arg3P3 > 0 /\ -1+arg4 > 0 /\ -1+arg4-arg4P3 == 0 /\ arg1P3 > 0 /\ 4-arg2+arg1P3 <= 0 /\ -4+arg2P3 > 0 /\ 2+arg1P3-arg3 <= 0 /\ arg1P3-arg1 <= 0 /\ arg1 > 0 /\ -arg5+arg5P3 > 0 /\ -2+arg3 > 0), cost: 1
New rule:
f165_0_appendNewList_LE -> f165_0_appendNewList_LE : arg5'=arg5P3, arg2'=arg2P3, arg4'=-1+arg4, arg1'=arg1P3, arg3'=arg3P3, (arg5 > 0 /\ -2+arg3P3 > 0 /\ -1+arg4 > 0 /\ arg1P3 > 0 /\ 4-arg2+arg1P3 <= 0 /\ -4+arg2P3 > 0 /\ 2+arg1P3-arg3 <= 0 /\ arg1P3-arg1 <= 0 /\ -arg5+arg5P3 > 0), cost: 1

Applied preprocessing
Original rule:
f165_0_appendNewList_LE -> f165_0_appendNewList_LE : arg5'=arg5P4, arg2'=arg2P4, arg4'=arg4P4, arg1'=arg1P4, arg3'=arg3P4, (-7+arg2P4 > 0 /\ -7+arg2P4-arg1 <= 0 /\ -5+arg2 > 0 /\ -1+arg4 > 0 /\ -2-arg2+arg2P4 <= 0 /\ 1-arg5P4 == 0 /\ 3-arg3+arg1P4 <= 0 /\ -2+arg3P4-arg3 <= 0 /\ 5-arg2+arg1P4 <= 0 /\ -arg1+arg1P4 <= 0 /\ -5+arg3P4 > 0 /\ -5+arg3P4-arg1 <= 0 /\ arg1 > 0 /\ -4+arg2P4-arg3 <= 0 /\ arg3P4-arg2 <= 0 /\ -3+arg3 > 0 /\ arg1P4 > 0 /\ -1+arg4-arg4P4 == 0), cost: 1
New rule:
f165_0_appendNewList_LE -> f165_0_appendNewList_LE : arg5'=1, arg2'=arg2P4, arg4'=-1+arg4, arg1'=arg1P4, arg3'=arg3P4, (-7+arg2P4 > 0 /\ -7+arg2P4-arg1 <= 0 /\ -1+arg4 > 0 /\ -2-arg2+arg2P4 <= 0 /\ 3-arg3+arg1P4 <= 0 /\ -2+arg3P4-arg3 <= 0 /\ 5-arg2+arg1P4 <= 0 /\ -arg1+arg1P4 <= 0 /\ -5+arg3P4 > 0 /\ -5+arg3P4-arg1 <= 0 /\ -4+arg2P4-arg3 <= 0 /\ arg3P4-arg2 <= 0 /\ arg1P4 > 0), cost: 1

Applied preprocessing
Original rule:
f200_0_random_ArrayAccess -> f314_0_appendNewList_LE : arg5'=arg5P5, arg2'=arg2P5, arg4'=arg4P5, arg1'=arg1P5, arg3'=arg3P5, (-4+arg1 > 0 /\ 1+arg2P5 > 0 /\ -arg3P5 == 0 /\ -3+arg1P5 > 0 /\ -1+arg2 > 0 /\ 1+arg1P5-arg1 <= 0), cost: 1
New rule:
f200_0_random_ArrayAccess -> f314_0_appendNewList_LE : arg5'=arg5P5, arg2'=arg2P5, arg4'=arg4P5, arg1'=arg1P5, arg3'=0, (1+arg2P5 > 0 /\ -3+arg1P5 > 0 /\ -1+arg2 > 0 /\ 1+arg1P5-arg1 <= 0), cost: 1

Applied preprocessing
Original rule:
f314_0_appendNewList_LE -> f314_0_appendNewList_LE : arg5'=arg5P6, arg2'=arg2P6, arg4'=arg4P6, arg1'=arg1P6, arg3'=arg3P6, (-2+arg1 > 0 /\ arg3P6-arg3 > 0 /\ -1+arg2-arg2P6 == 0 /\ -1+arg2 > 0 /\ -2+arg1P6 > 0 /\ arg3 > 0), cost: 1
New rule:
f314_0_appendNewList_LE -> f314_0_appendNewList_LE : arg5'=arg5P6, arg2'=-1+arg2, arg4'=arg4P6, arg1'=arg1P6, arg3'=arg3P6, (-2+arg1 > 0 /\ arg3P6-arg3 > 0 /\ -1+arg2 > 0 /\ -2+arg1P6 > 0 /\ arg3 > 0), cost: 1

Applied preprocessing
Original rule:
f314_0_appendNewList_LE -> f314_0_appendNewList_LE : arg5'=arg5P7, arg2'=arg2P7, arg4'=arg4P7, arg1'=arg1P7, arg3'=arg3P7, (-3+arg1 > 0 /\ -1+arg2-arg2P7 == 0 /\ -1+arg2 > 0 /\ 1-arg3P7 == 0 /\ -5+arg1P7 > 0 /\ -2+arg1P7-arg1 <= 0), cost: 1
New rule:
f314_0_appendNewList_LE -> f314_0_appendNewList_LE : arg5'=arg5P7, arg2'=-1+arg2, arg4'=arg4P7, arg1'=arg1P7, arg3'=1, (-1+arg2 > 0 /\ -5+arg1P7 > 0 /\ -2+arg1P7-arg1 <= 0), cost: 1

Applied preprocessing
Original rule:
f314_0_appendNewList_LE -> f387_0_length_NULL : arg5'=arg5P8, arg2'=arg2P8, arg4'=arg4P8, arg1'=arg1P8, arg3'=arg3P8, (-2+arg1 > 0 /\ -2+arg2 < 0 /\ 2-arg1+arg1P8 <= 0 /\ arg1P8 > 0), cost: 1
New rule:
f314_0_appendNewList_LE -> f387_0_length_NULL : arg5'=arg5P8, arg2'=arg2P8, arg4'=arg4P8, arg1'=arg1P8, arg3'=arg3P8, (2-arg1+arg1P8 <= 0 /\ 2-arg2 > 0 /\ arg1P8 > 0), cost: 1

Applied preprocessing
Original rule:
f387_0_length_NULL -> f387_0_length_NULL : arg5'=arg5P9, arg2'=arg2P9, arg4'=arg4P9, arg1'=arg1P9, arg3'=arg3P9, (1+arg1P9-arg1 <= 0 /\ arg1 > 0 /\ 1+arg1P9 > 0), cost: 1
New rule:
f387_0_length_NULL -> f387_0_length_NULL : arg5'=arg5P9, arg2'=arg2P9, arg4'=arg4P9, arg1'=arg1P9, arg3'=arg3P9, (1+arg1P9-arg1 <= 0 /\ 1+arg1P9 > 0), cost: 1

Simplified rules
Start location: __init
  11: f1_0_main_Load -> f165_0_appendNewList_LE : arg5'=0, arg2'=arg2P0, arg4'=arg4P0, arg1'=arg1P0, arg3'=arg3P0, (-3+arg3P0 > 0 /\ -5+arg2P0 > 0 /\ arg2 > 0 /\ -5+arg2P0-arg1 <= 0 /\ -arg1+arg1P0 <= 0 /\ arg1P0 > 0 /\ -3+arg3P0-arg1 <= 0 /\ 1+arg4P0 > 0), cost: 1
  12: f165_0_appendNewList_LE -> f200_0_random_ArrayAccess : arg5'=arg5P1, arg2'=arg2P1, arg4'=arg4P1, arg1'=arg1P1, arg3'=arg3P1, (-4+arg2 > 0 /\ arg5 > 0 /\ 2-arg4 > 0 /\ -4+arg1P1 > 0 /\ arg1 > 0 /\ -2+arg3 > 0), cost: 1
  13: f165_0_appendNewList_LE -> f200_0_random_ArrayAccess : arg5'=arg5P2, arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg3'=arg3P2, (-6+arg1P2 > 0 /\ 2-arg4 > 0 /\ -3+arg1P2-arg3 <= 0 /\ -6-arg1+arg1P2 <= 0 /\ -1-arg2+arg1P2 <= 0), cost: 1
  14: f165_0_appendNewList_LE -> f165_0_appendNewList_LE : arg5'=arg5P3, arg2'=arg2P3, arg4'=-1+arg4, arg1'=arg1P3, arg3'=arg3P3, (arg5 > 0 /\ -2+arg3P3 > 0 /\ -1+arg4 > 0 /\ arg1P3 > 0 /\ 4-arg2+arg1P3 <= 0 /\ -4+arg2P3 > 0 /\ 2+arg1P3-arg3 <= 0 /\ arg1P3-arg1 <= 0 /\ -arg5+arg5P3 > 0), cost: 1
  15: f165_0_appendNewList_LE -> f165_0_appendNewList_LE : arg5'=1, arg2'=arg2P4, arg4'=-1+arg4, arg1'=arg1P4, arg3'=arg3P4, (-7+arg2P4 > 0 /\ -7+arg2P4-arg1 <= 0 /\ -1+arg4 > 0 /\ -2-arg2+arg2P4 <= 0 /\ 3-arg3+arg1P4 <= 0 /\ -2+arg3P4-arg3 <= 0 /\ 5-arg2+arg1P4 <= 0 /\ -arg1+arg1P4 <= 0 /\ -5+arg3P4 > 0 /\ -5+arg3P4-arg1 <= 0 /\ -4+arg2P4-arg3 <= 0 /\ arg3P4-arg2 <= 0 /\ arg1P4 > 0), cost: 1
  16: f200_0_random_ArrayAccess -> f314_0_appendNewList_LE : arg5'=arg5P5, arg2'=arg2P5, arg4'=arg4P5, arg1'=arg1P5, arg3'=0, (1+arg2P5 > 0 /\ -3+arg1P5 > 0 /\ -1+arg2 > 0 /\ 1+arg1P5-arg1 <= 0), cost: 1
  17: f314_0_appendNewList_LE -> f314_0_appendNewList_LE : arg5'=arg5P6, arg2'=-1+arg2, arg4'=arg4P6, arg1'=arg1P6, arg3'=arg3P6, (-2+arg1 > 0 /\ arg3P6-arg3 > 0 /\ -1+arg2 > 0 /\ -2+arg1P6 > 0 /\ arg3 > 0), cost: 1
  18: f314_0_appendNewList_LE -> f314_0_appendNewList_LE : arg5'=arg5P7, arg2'=-1+arg2, arg4'=arg4P7, arg1'=arg1P7, arg3'=1, (-1+arg2 > 0 /\ -5+arg1P7 > 0 /\ -2+arg1P7-arg1 <= 0), cost: 1
  19: f314_0_appendNewList_LE -> f387_0_length_NULL : arg5'=arg5P8, arg2'=arg2P8, arg4'=arg4P8, arg1'=arg1P8, arg3'=arg3P8, (2-arg1+arg1P8 <= 0 /\ 2-arg2 > 0 /\ arg1P8 > 0), cost: 1
  20: f387_0_length_NULL -> f387_0_length_NULL : arg5'=arg5P9, arg2'=arg2P9, arg4'=arg4P9, arg1'=arg1P9, arg3'=arg3P9, (1+arg1P9-arg1 <= 0 /\ 1+arg1P9 > 0), cost: 1
  10: __init -> f1_0_main_Load : arg5'=arg5P10, arg2'=arg2P10, arg4'=arg4P10, arg1'=arg1P10, arg3'=arg3P10, TRUE, cost: 1


Applied acceleration
Original rule:
f165_0_appendNewList_LE -> f165_0_appendNewList_LE : arg5'=1, arg2'=arg2P4, arg4'=-1+arg4, arg1'=arg1P4, arg3'=arg3P4, (-7+arg2P4 > 0 /\ -7+arg2P4-arg1 <= 0 /\ -1+arg4 > 0 /\ -2-arg2+arg2P4 <= 0 /\ 3-arg3+arg1P4 <= 0 /\ -2+arg3P4-arg3 <= 0 /\ 5-arg2+arg1P4 <= 0 /\ -arg1+arg1P4 <= 0 /\ -5+arg3P4 > 0 /\ -5+arg3P4-arg1 <= 0 /\ -4+arg2P4-arg3 <= 0 /\ arg3P4-arg2 <= 0 /\ arg1P4 > 0), cost: 1
New rule:
f165_0_appendNewList_LE -> f165_0_appendNewList_LE : arg5'=1, arg2'=arg2P4, arg4'=arg4-n0, arg1'=arg1P4, arg3'=arg3P4, (-7+arg2P4 > 0 /\ -1+n0 >= 0 /\ 7-arg2P4+arg1P4 >= 0 /\ 4-arg2P4+arg3 >= 0 /\ arg1-arg1P4 >= 0 /\ 4+arg3P4-arg2P4 >= 0 /\ 2+arg2-arg2P4 >= 0 /\ -3+arg3-arg1P4 >= 0 /\ 2-arg3P4+arg3 >= 0 /\ -3+arg3P4-arg1P4 >= 0 /\ -5+arg3P4 > 0 /\ 5-arg3P4+arg1P4 >= 0 /\ -5+arg2P4-arg1P4 >= 0 /\ -5+arg2-arg1P4 >= 0 /\ arg1P4 > 0 /\ arg4-n0 > 0 /\ -arg3P4+arg2P4 >= 0 /\ -arg3P4+arg2 >= 0), cost: n0
Sub-proof via acceration calculus written to file:///tmp/tmpnam_ohnmmA.txt

Applied instantiation
Original rule:
f165_0_appendNewList_LE -> f165_0_appendNewList_LE : arg5'=1, arg2'=arg2P4, arg4'=arg4-n0, arg1'=arg1P4, arg3'=arg3P4, (-7+arg2P4 > 0 /\ -1+n0 >= 0 /\ 7-arg2P4+arg1P4 >= 0 /\ 4-arg2P4+arg3 >= 0 /\ arg1-arg1P4 >= 0 /\ 4+arg3P4-arg2P4 >= 0 /\ 2+arg2-arg2P4 >= 0 /\ -3+arg3-arg1P4 >= 0 /\ 2-arg3P4+arg3 >= 0 /\ -3+arg3P4-arg1P4 >= 0 /\ -5+arg3P4 > 0 /\ 5-arg3P4+arg1P4 >= 0 /\ -5+arg2P4-arg1P4 >= 0 /\ -5+arg2-arg1P4 >= 0 /\ arg1P4 > 0 /\ arg4-n0 > 0 /\ -arg3P4+arg2P4 >= 0 /\ -arg3P4+arg2 >= 0), cost: n0
New rule:
f165_0_appendNewList_LE -> f165_0_appendNewList_LE : arg5'=1, arg2'=arg2P4, arg4'=1, arg1'=arg1P4, arg3'=arg3P4, (-7+arg2P4 > 0 /\ 7-arg2P4+arg1P4 >= 0 /\ 1 > 0 /\ 4-arg2P4+arg3 >= 0 /\ arg1-arg1P4 >= 0 /\ 4+arg3P4-arg2P4 >= 0 /\ 2+arg2-arg2P4 >= 0 /\ -3+arg3-arg1P4 >= 0 /\ 2-arg3P4+arg3 >= 0 /\ -3+arg3P4-arg1P4 >= 0 /\ -5+arg3P4 > 0 /\ 5-arg3P4+arg1P4 >= 0 /\ -5+arg2P4-arg1P4 >= 0 /\ -5+arg2-arg1P4 >= 0 /\ arg1P4 > 0 /\ -arg3P4+arg2P4 >= 0 /\ -2+arg4 >= 0 /\ -arg3P4+arg2 >= 0), cost: -1+arg4

Applied simplification
Original rule:
f165_0_appendNewList_LE -> f165_0_appendNewList_LE : arg5'=1, arg2'=arg2P4, arg4'=1, arg1'=arg1P4, arg3'=arg3P4, (-7+arg2P4 > 0 /\ 7-arg2P4+arg1P4 >= 0 /\ 1 > 0 /\ 4-arg2P4+arg3 >= 0 /\ arg1-arg1P4 >= 0 /\ 4+arg3P4-arg2P4 >= 0 /\ 2+arg2-arg2P4 >= 0 /\ -3+arg3-arg1P4 >= 0 /\ 2-arg3P4+arg3 >= 0 /\ -3+arg3P4-arg1P4 >= 0 /\ -5+arg3P4 > 0 /\ 5-arg3P4+arg1P4 >= 0 /\ -5+arg2P4-arg1P4 >= 0 /\ -5+arg2-arg1P4 >= 0 /\ arg1P4 > 0 /\ -arg3P4+arg2P4 >= 0 /\ -2+arg4 >= 0 /\ -arg3P4+arg2 >= 0), cost: -1+arg4
New rule:
f165_0_appendNewList_LE -> f165_0_appendNewList_LE : arg5'=1, arg2'=arg2P4, arg4'=1, arg1'=arg1P4, arg3'=arg3P4, (-7+arg2P4 > 0 /\ 7-arg2P4+arg1P4 >= 0 /\ arg1-arg1P4 >= 0 /\ -3+arg3-arg1P4 >= 0 /\ -3+arg3P4-arg1P4 >= 0 /\ -5+arg3P4 > 0 /\ 5-arg3P4+arg1P4 >= 0 /\ -5+arg2P4-arg1P4 >= 0 /\ -5+arg2-arg1P4 >= 0 /\ -2+arg4 >= 0), cost: -1+arg4

Applied deletion
Removed the following rules: 15

Applied acceleration
Original rule:
f314_0_appendNewList_LE -> f314_0_appendNewList_LE : arg5'=arg5P7, arg2'=-1+arg2, arg4'=arg4P7, arg1'=arg1P7, arg3'=1, (-1+arg2 > 0 /\ -5+arg1P7 > 0 /\ -2+arg1P7-arg1 <= 0), cost: 1
New rule:
f314_0_appendNewList_LE -> f314_0_appendNewList_LE : arg5'=arg5P7, arg2'=-n5+arg2, arg4'=arg4P7, arg1'=arg1P7, arg3'=1, (-n5+arg2 > 0 /\ -1+n5 >= 0 /\ -5+arg1P7 > 0 /\ 2-arg1P7+arg1 >= 0), cost: n5
Sub-proof via acceration calculus written to file:///tmp/tmpnam_GNDDaj.txt

Applied instantiation
Original rule:
f314_0_appendNewList_LE -> f314_0_appendNewList_LE : arg5'=arg5P7, arg2'=-n5+arg2, arg4'=arg4P7, arg1'=arg1P7, arg3'=1, (-n5+arg2 > 0 /\ -1+n5 >= 0 /\ -5+arg1P7 > 0 /\ 2-arg1P7+arg1 >= 0), cost: n5
New rule:
f314_0_appendNewList_LE -> f314_0_appendNewList_LE : arg5'=arg5P7, arg2'=1, arg4'=arg4P7, arg1'=arg1P7, arg3'=1, (1 > 0 /\ -2+arg2 >= 0 /\ -5+arg1P7 > 0 /\ 2-arg1P7+arg1 >= 0), cost: -1+arg2

Applied simplification
Original rule:
f314_0_appendNewList_LE -> f314_0_appendNewList_LE : arg5'=arg5P7, arg2'=1, arg4'=arg4P7, arg1'=arg1P7, arg3'=1, (1 > 0 /\ -2+arg2 >= 0 /\ -5+arg1P7 > 0 /\ 2-arg1P7+arg1 >= 0), cost: -1+arg2
New rule:
f314_0_appendNewList_LE -> f314_0_appendNewList_LE : arg5'=arg5P7, arg2'=1, arg4'=arg4P7, arg1'=arg1P7, arg3'=1, (-2+arg2 >= 0 /\ -5+arg1P7 > 0 /\ 2-arg1P7+arg1 >= 0), cost: -1+arg2

Applied deletion
Removed the following rules: 18

Accelerated simple loops
Start location: __init
  11: f1_0_main_Load -> f165_0_appendNewList_LE : arg5'=0, arg2'=arg2P0, arg4'=arg4P0, arg1'=arg1P0, arg3'=arg3P0, (-3+arg3P0 > 0 /\ -5+arg2P0 > 0 /\ arg2 > 0 /\ -5+arg2P0-arg1 <= 0 /\ -arg1+arg1P0 <= 0 /\ arg1P0 > 0 /\ -3+arg3P0-arg1 <= 0 /\ 1+arg4P0 > 0), cost: 1
  12: f165_0_appendNewList_LE -> f200_0_random_ArrayAccess : arg5'=arg5P1, arg2'=arg2P1, arg4'=arg4P1, arg1'=arg1P1, arg3'=arg3P1, (-4+arg2 > 0 /\ arg5 > 0 /\ 2-arg4 > 0 /\ -4+arg1P1 > 0 /\ arg1 > 0 /\ -2+arg3 > 0), cost: 1
  13: f165_0_appendNewList_LE -> f200_0_random_ArrayAccess : arg5'=arg5P2, arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg3'=arg3P2, (-6+arg1P2 > 0 /\ 2-arg4 > 0 /\ -3+arg1P2-arg3 <= 0 /\ -6-arg1+arg1P2 <= 0 /\ -1-arg2+arg1P2 <= 0), cost: 1
  14: f165_0_appendNewList_LE -> f165_0_appendNewList_LE : arg5'=arg5P3, arg2'=arg2P3, arg4'=-1+arg4, arg1'=arg1P3, arg3'=arg3P3, (arg5 > 0 /\ -2+arg3P3 > 0 /\ -1+arg4 > 0 /\ arg1P3 > 0 /\ 4-arg2+arg1P3 <= 0 /\ -4+arg2P3 > 0 /\ 2+arg1P3-arg3 <= 0 /\ arg1P3-arg1 <= 0 /\ -arg5+arg5P3 > 0), cost: 1
  22: f165_0_appendNewList_LE -> f165_0_appendNewList_LE : arg5'=1, arg2'=arg2P4, arg4'=1, arg1'=arg1P4, arg3'=arg3P4, (-7+arg2P4 > 0 /\ 7-arg2P4+arg1P4 >= 0 /\ arg1-arg1P4 >= 0 /\ -3+arg3-arg1P4 >= 0 /\ -3+arg3P4-arg1P4 >= 0 /\ -5+arg3P4 > 0 /\ 5-arg3P4+arg1P4 >= 0 /\ -5+arg2P4-arg1P4 >= 0 /\ -5+arg2-arg1P4 >= 0 /\ -2+arg4 >= 0), cost: -1+arg4
  16: f200_0_random_ArrayAccess -> f314_0_appendNewList_LE : arg5'=arg5P5, arg2'=arg2P5, arg4'=arg4P5, arg1'=arg1P5, arg3'=0, (1+arg2P5 > 0 /\ -3+arg1P5 > 0 /\ -1+arg2 > 0 /\ 1+arg1P5-arg1 <= 0), cost: 1
  17: f314_0_appendNewList_LE -> f314_0_appendNewList_LE : arg5'=arg5P6, arg2'=-1+arg2, arg4'=arg4P6, arg1'=arg1P6, arg3'=arg3P6, (-2+arg1 > 0 /\ arg3P6-arg3 > 0 /\ -1+arg2 > 0 /\ -2+arg1P6 > 0 /\ arg3 > 0), cost: 1
  19: f314_0_appendNewList_LE -> f387_0_length_NULL : arg5'=arg5P8, arg2'=arg2P8, arg4'=arg4P8, arg1'=arg1P8, arg3'=arg3P8, (2-arg1+arg1P8 <= 0 /\ 2-arg2 > 0 /\ arg1P8 > 0), cost: 1
  24: f314_0_appendNewList_LE -> f314_0_appendNewList_LE : arg5'=arg5P7, arg2'=1, arg4'=arg4P7, arg1'=arg1P7, arg3'=1, (-2+arg2 >= 0 /\ -5+arg1P7 > 0 /\ 2-arg1P7+arg1 >= 0), cost: -1+arg2
  20: f387_0_length_NULL -> f387_0_length_NULL : arg5'=arg5P9, arg2'=arg2P9, arg4'=arg4P9, arg1'=arg1P9, arg3'=arg3P9, (1+arg1P9-arg1 <= 0 /\ 1+arg1P9 > 0), cost: 1
  10: __init -> f1_0_main_Load : arg5'=arg5P10, arg2'=arg2P10, arg4'=arg4P10, arg1'=arg1P10, arg3'=arg3P10, TRUE, cost: 1


Applied chaining
First rule:
f1_0_main_Load -> f165_0_appendNewList_LE : arg5'=0, arg2'=arg2P0, arg4'=arg4P0, arg1'=arg1P0, arg3'=arg3P0, (-3+arg3P0 > 0 /\ -5+arg2P0 > 0 /\ arg2 > 0 /\ -5+arg2P0-arg1 <= 0 /\ -arg1+arg1P0 <= 0 /\ arg1P0 > 0 /\ -3+arg3P0-arg1 <= 0 /\ 1+arg4P0 > 0), cost: 1
Second rule:
f165_0_appendNewList_LE -> f165_0_appendNewList_LE : arg5'=1, arg2'=arg2P4, arg4'=1, arg1'=arg1P4, arg3'=arg3P4, (-7+arg2P4 > 0 /\ 7-arg2P4+arg1P4 >= 0 /\ arg1-arg1P4 >= 0 /\ -3+arg3-arg1P4 >= 0 /\ -3+arg3P4-arg1P4 >= 0 /\ -5+arg3P4 > 0 /\ 5-arg3P4+arg1P4 >= 0 /\ -5+arg2P4-arg1P4 >= 0 /\ -5+arg2-arg1P4 >= 0 /\ -2+arg4 >= 0), cost: -1+arg4
New rule:
f1_0_main_Load -> f165_0_appendNewList_LE : arg5'=1, arg2'=arg2P4, arg4'=1, arg1'=arg1P4, arg3'=arg3P4, (-7+arg2P4 > 0 /\ 7-arg2P4+arg1P4 >= 0 /\ arg2 > 0 /\ -arg1+arg1P4 <= 0 /\ -3+arg3P4-arg1P4 >= 0 /\ -5+arg3P4 > 0 /\ 5-arg3P4+arg1P4 >= 0 /\ -5+arg2P4-arg1P4 >= 0 /\ -2+arg4P0 >= 0), cost: arg4P0

Applied deletion
Removed the following rules: 14 22

Applied chaining
First rule:
f200_0_random_ArrayAccess -> f314_0_appendNewList_LE : arg5'=arg5P5, arg2'=arg2P5, arg4'=arg4P5, arg1'=arg1P5, arg3'=0, (1+arg2P5 > 0 /\ -3+arg1P5 > 0 /\ -1+arg2 > 0 /\ 1+arg1P5-arg1 <= 0), cost: 1
Second rule:
f314_0_appendNewList_LE -> f314_0_appendNewList_LE : arg5'=arg5P7, arg2'=1, arg4'=arg4P7, arg1'=arg1P7, arg3'=1, (-2+arg2 >= 0 /\ -5+arg1P7 > 0 /\ 2-arg1P7+arg1 >= 0), cost: -1+arg2
New rule:
f200_0_random_ArrayAccess -> f314_0_appendNewList_LE : arg5'=arg5P7, arg2'=1, arg4'=arg4P7, arg1'=arg1P7, arg3'=1, (-1+arg1P7-arg1 <= 0 /\ -2+arg2P5 >= 0 /\ -1+arg2 > 0 /\ -5+arg1P7 > 0), cost: arg2P5

Applied deletion
Removed the following rules: 17 24

Applied chaining
First rule:
f314_0_appendNewList_LE -> f387_0_length_NULL : arg5'=arg5P8, arg2'=arg2P8, arg4'=arg4P8, arg1'=arg1P8, arg3'=arg3P8, (2-arg1+arg1P8 <= 0 /\ 2-arg2 > 0 /\ arg1P8 > 0), cost: 1
Second rule:
f387_0_length_NULL -> f387_0_length_NULL : arg5'=arg5P9, arg2'=arg2P9, arg4'=arg4P9, arg1'=arg1P9, arg3'=arg3P9, (1+arg1P9-arg1 <= 0 /\ 1+arg1P9 > 0), cost: 1
New rule:
f314_0_appendNewList_LE -> f387_0_length_NULL : arg5'=arg5P9, arg2'=arg2P9, arg4'=arg4P9, arg1'=arg1P9, arg3'=arg3P9, (3+arg1P9-arg1 <= 0 /\ 2-arg2 > 0 /\ 1+arg1P9 > 0), cost: 2

Applied deletion
Removed the following rules: 20

Chained accelerated rules with incoming rules
Start location: __init
  11: f1_0_main_Load -> f165_0_appendNewList_LE : arg5'=0, arg2'=arg2P0, arg4'=arg4P0, arg1'=arg1P0, arg3'=arg3P0, (-3+arg3P0 > 0 /\ -5+arg2P0 > 0 /\ arg2 > 0 /\ -5+arg2P0-arg1 <= 0 /\ -arg1+arg1P0 <= 0 /\ arg1P0 > 0 /\ -3+arg3P0-arg1 <= 0 /\ 1+arg4P0 > 0), cost: 1
  25: f1_0_main_Load -> f165_0_appendNewList_LE : arg5'=1, arg2'=arg2P4, arg4'=1, arg1'=arg1P4, arg3'=arg3P4, (-7+arg2P4 > 0 /\ 7-arg2P4+arg1P4 >= 0 /\ arg2 > 0 /\ -arg1+arg1P4 <= 0 /\ -3+arg3P4-arg1P4 >= 0 /\ -5+arg3P4 > 0 /\ 5-arg3P4+arg1P4 >= 0 /\ -5+arg2P4-arg1P4 >= 0 /\ -2+arg4P0 >= 0), cost: arg4P0
  12: f165_0_appendNewList_LE -> f200_0_random_ArrayAccess : arg5'=arg5P1, arg2'=arg2P1, arg4'=arg4P1, arg1'=arg1P1, arg3'=arg3P1, (-4+arg2 > 0 /\ arg5 > 0 /\ 2-arg4 > 0 /\ -4+arg1P1 > 0 /\ arg1 > 0 /\ -2+arg3 > 0), cost: 1
  13: f165_0_appendNewList_LE -> f200_0_random_ArrayAccess : arg5'=arg5P2, arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg3'=arg3P2, (-6+arg1P2 > 0 /\ 2-arg4 > 0 /\ -3+arg1P2-arg3 <= 0 /\ -6-arg1+arg1P2 <= 0 /\ -1-arg2+arg1P2 <= 0), cost: 1
  16: f200_0_random_ArrayAccess -> f314_0_appendNewList_LE : arg5'=arg5P5, arg2'=arg2P5, arg4'=arg4P5, arg1'=arg1P5, arg3'=0, (1+arg2P5 > 0 /\ -3+arg1P5 > 0 /\ -1+arg2 > 0 /\ 1+arg1P5-arg1 <= 0), cost: 1
  26: f200_0_random_ArrayAccess -> f314_0_appendNewList_LE : arg5'=arg5P7, arg2'=1, arg4'=arg4P7, arg1'=arg1P7, arg3'=1, (-1+arg1P7-arg1 <= 0 /\ -2+arg2P5 >= 0 /\ -1+arg2 > 0 /\ -5+arg1P7 > 0), cost: arg2P5
  19: f314_0_appendNewList_LE -> f387_0_length_NULL : arg5'=arg5P8, arg2'=arg2P8, arg4'=arg4P8, arg1'=arg1P8, arg3'=arg3P8, (2-arg1+arg1P8 <= 0 /\ 2-arg2 > 0 /\ arg1P8 > 0), cost: 1
  27: f314_0_appendNewList_LE -> f387_0_length_NULL : arg5'=arg5P9, arg2'=arg2P9, arg4'=arg4P9, arg1'=arg1P9, arg3'=arg3P9, (3+arg1P9-arg1 <= 0 /\ 2-arg2 > 0 /\ 1+arg1P9 > 0), cost: 2
  10: __init -> f1_0_main_Load : arg5'=arg5P10, arg2'=arg2P10, arg4'=arg4P10, arg1'=arg1P10, arg3'=arg3P10, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
  <empty>


Computing asymptotic complexity

Proved the following lower bound
Complexity:  Unknown
Cpx degree: ?

Solved cost: 0
Rule cost:   0

