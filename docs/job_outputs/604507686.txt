unknown

Initial ITS

Start location: l5
Program variables: __const_127^0 __const_36^0 counter^0 y^0 z^0
   0: l0 -> l1 : __const_127^0'=__const_127^post1, __const_36^0'=__const_36^post1, counter^0'=counter^post1, y^0'=y^post1, z^0'=z^post1, (z^0-z^post1 == 0 /\ __const_36^0-counter^0 <= 0 /\ -y^post1+y^0 == 0 /\ -counter^post1+counter^0 == 0 /\ -__const_36^post1+__const_36^0 == 0 /\ -__const_127^post1+__const_127^0 == 0), cost: 1
   1: l0 -> l2 : __const_127^0'=__const_127^post2, __const_36^0'=__const_36^post2, counter^0'=counter^post2, y^0'=y^post2, z^0'=z^post2, (-1+counter^post2-counter^0 == 0 /\ y^0-y^post2 == 0 /\ __const_127^0-__const_127^post2 == 0 /\ -__const_36^post2+__const_36^0 == 0 /\ 1-__const_36^0+counter^0 <= 0 /\ -1-z^0+z^post2 == 0), cost: 1
   4: l2 -> l0 : __const_127^0'=__const_127^post5, __const_36^0'=__const_36^post5, counter^0'=counter^post5, y^0'=y^post5, z^0'=z^post5, (z^0-z^post5 == 0 /\ -__const_36^post5+__const_36^0 == 0 /\ -y^post5+y^0 == 0 /\ -counter^post5+counter^0 == 0 /\ -__const_127^post5+__const_127^0 == 0), cost: 1
   2: l3 -> l2 : __const_127^0'=__const_127^post3, __const_36^0'=__const_36^post3, counter^0'=counter^post3, y^0'=y^post3, z^0'=z^post3, (0 == 0 /\ -__const_127^0+y^0 <= 0 /\ -__const_36^post3+__const_36^0 == 0 /\ -counter^post3+counter^0 == 0 /\ -__const_127^post3+__const_127^0 == 0 /\ -y^post3+y^0 == 0), cost: 1
   3: l3 -> l1 : __const_127^0'=__const_127^post4, __const_36^0'=__const_36^post4, counter^0'=counter^post4, y^0'=y^post4, z^0'=z^post4, (z^0-z^post4 == 0 /\ y^0-y^post4 == 0 /\ 1+__const_127^0-y^0 <= 0 /\ -counter^post4+counter^0 == 0 /\ __const_127^0-__const_127^post4 == 0 /\ -__const_36^post4+__const_36^0 == 0), cost: 1
   5: l4 -> l3 : __const_127^0'=__const_127^post6, __const_36^0'=__const_36^post6, counter^0'=counter^post6, y^0'=y^post6, z^0'=z^post6, (y^0-y^post6 == 0 /\ -__const_36^post6+__const_36^0 == 0 /\ -z^post6+z^0 == 0 /\ counter^post6 == 0 /\ __const_127^0-__const_127^post6 == 0), cost: 1
   6: l5 -> l4 : __const_127^0'=__const_127^post7, __const_36^0'=__const_36^post7, counter^0'=counter^post7, y^0'=y^post7, z^0'=z^post7, (-counter^post7+counter^0 == 0 /\ -y^post7+y^0 == 0 /\ z^0-z^post7 == 0 /\ __const_127^0-__const_127^post7 == 0 /\ -__const_36^post7+__const_36^0 == 0), cost: 1

Chained Linear Paths

Start location: l5
Program variables: __const_127^0 __const_36^0 counter^0 y^0 z^0
   0: l0 -> l1 : __const_127^0'=__const_127^post1, __const_36^0'=__const_36^post1, counter^0'=counter^post1, y^0'=y^post1, z^0'=z^post1, (z^0-z^post1 == 0 /\ __const_36^0-counter^0 <= 0 /\ -y^post1+y^0 == 0 /\ -counter^post1+counter^0 == 0 /\ -__const_36^post1+__const_36^0 == 0 /\ -__const_127^post1+__const_127^0 == 0), cost: 1
   1: l0 -> l2 : __const_127^0'=__const_127^post2, __const_36^0'=__const_36^post2, counter^0'=counter^post2, y^0'=y^post2, z^0'=z^post2, (-1+counter^post2-counter^0 == 0 /\ y^0-y^post2 == 0 /\ __const_127^0-__const_127^post2 == 0 /\ -__const_36^post2+__const_36^0 == 0 /\ 1-__const_36^0+counter^0 <= 0 /\ -1-z^0+z^post2 == 0), cost: 1
   4: l2 -> l0 : __const_127^0'=__const_127^post5, __const_36^0'=__const_36^post5, counter^0'=counter^post5, y^0'=y^post5, z^0'=z^post5, (z^0-z^post5 == 0 /\ -__const_36^post5+__const_36^0 == 0 /\ -y^post5+y^0 == 0 /\ -counter^post5+counter^0 == 0 /\ -__const_127^post5+__const_127^0 == 0), cost: 1
   2: l3 -> l2 : __const_127^0'=__const_127^post3, __const_36^0'=__const_36^post3, counter^0'=counter^post3, y^0'=y^post3, z^0'=z^post3, (0 == 0 /\ -__const_127^0+y^0 <= 0 /\ -__const_36^post3+__const_36^0 == 0 /\ -counter^post3+counter^0 == 0 /\ -__const_127^post3+__const_127^0 == 0 /\ -y^post3+y^0 == 0), cost: 1
   3: l3 -> l1 : __const_127^0'=__const_127^post4, __const_36^0'=__const_36^post4, counter^0'=counter^post4, y^0'=y^post4, z^0'=z^post4, (z^0-z^post4 == 0 /\ y^0-y^post4 == 0 /\ 1+__const_127^0-y^0 <= 0 /\ -counter^post4+counter^0 == 0 /\ __const_127^0-__const_127^post4 == 0 /\ -__const_36^post4+__const_36^0 == 0), cost: 1
   7: l5 -> l3 : __const_127^0'=__const_127^post6, __const_36^0'=__const_36^post6, counter^0'=counter^post6, y^0'=y^post6, z^0'=z^post6, (-__const_36^post6+__const_36^post7 == 0 /\ -counter^post7+counter^0 == 0 /\ y^post7-y^post6 == 0 /\ -y^post7+y^0 == 0 /\ -z^post6+z^post7 == 0 /\ counter^post6 == 0 /\ z^0-z^post7 == 0 /\ __const_127^post7-__const_127^post6 == 0 /\ __const_127^0-__const_127^post7 == 0 /\ -__const_36^post7+__const_36^0 == 0), cost: 1

	Eliminating location l4 by chaining:

	Applied chaining

	First rule:
	l5 -> l4 : __const_127^0'=__const_127^post7, __const_36^0'=__const_36^post7, counter^0'=counter^post7, y^0'=y^post7, z^0'=z^post7, (-counter^post7+counter^0 == 0 /\ -y^post7+y^0 == 0 /\ z^0-z^post7 == 0 /\ __const_127^0-__const_127^post7 == 0 /\ -__const_36^post7+__const_36^0 == 0), cost: 1
	Second rule:
	l4 -> l3 : __const_127^0'=__const_127^post6, __const_36^0'=__const_36^post6, counter^0'=counter^post6, y^0'=y^post6, z^0'=z^post6, (y^0-y^post6 == 0 /\ -__const_36^post6+__const_36^0 == 0 /\ -z^post6+z^0 == 0 /\ counter^post6 == 0 /\ __const_127^0-__const_127^post6 == 0), cost: 1
	New rule:
	l5 -> l3 : __const_127^0'=__const_127^post6, __const_36^0'=__const_36^post6, counter^0'=counter^post6, y^0'=y^post6, z^0'=z^post6, (-__const_36^post6+__const_36^post7 == 0 /\ -counter^post7+counter^0 == 0 /\ y^post7-y^post6 == 0 /\ -y^post7+y^0 == 0 /\ -z^post6+z^post7 == 0 /\ counter^post6 == 0 /\ z^0-z^post7 == 0 /\ __const_127^post7-__const_127^post6 == 0 /\ __const_127^0-__const_127^post7 == 0 /\ -__const_36^post7+__const_36^0 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 5 6

Simplified Transitions

Start location: l5
Program variables: __const_127^0 __const_36^0 counter^0 y^0 z^0
   8: l0 -> l1 : __const_36^0-counter^0 <= 0, cost: 1
   9: l0 -> l2 : counter^0'=1+counter^0, z^0'=1+z^0, 1-__const_36^0+counter^0 <= 0, cost: 1
  12: l2 -> l0 : T, cost: 1
  10: l3 -> l2 : z^0'=z^post3, -__const_127^0+y^0 <= 0, cost: 1
  11: l3 -> l1 : 1+__const_127^0-y^0 <= 0, cost: 1
  13: l5 -> l3 : counter^0'=0, T, cost: 1

	Propagated Equalities

	Original rule:
	l0 -> l1 : __const_127^0'=__const_127^post1, __const_36^0'=__const_36^post1, counter^0'=counter^post1, y^0'=y^post1, z^0'=z^post1, (z^0-z^post1 == 0 /\ __const_36^0-counter^0 <= 0 /\ -y^post1+y^0 == 0 /\ -counter^post1+counter^0 == 0 /\ -__const_36^post1+__const_36^0 == 0 /\ -__const_127^post1+__const_127^0 == 0), cost: 1
	New rule:
	l0 -> l1 : __const_127^0'=__const_127^0, __const_36^0'=__const_36^0, counter^0'=counter^0, y^0'=y^0, z^0'=z^0, (0 == 0 /\ __const_36^0-counter^0 <= 0), cost: 1
	
		propagated equality z^post1 = z^0
		
		propagated equality y^post1 = y^0
		
		propagated equality counter^post1 = counter^0
		
		propagated equality __const_36^post1 = __const_36^0
		
		propagated equality __const_127^post1 = __const_127^0
		
	Simplified Guard

	Original rule:
	l0 -> l1 : __const_127^0'=__const_127^0, __const_36^0'=__const_36^0, counter^0'=counter^0, y^0'=y^0, z^0'=z^0, (0 == 0 /\ __const_36^0-counter^0 <= 0), cost: 1
	New rule:
	l0 -> l1 : __const_127^0'=__const_127^0, __const_36^0'=__const_36^0, counter^0'=counter^0, y^0'=y^0, z^0'=z^0, __const_36^0-counter^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l1 : __const_127^0'=__const_127^0, __const_36^0'=__const_36^0, counter^0'=counter^0, y^0'=y^0, z^0'=z^0, __const_36^0-counter^0 <= 0, cost: 1
	New rule:
	l0 -> l1 : __const_36^0-counter^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l0 -> l2 : __const_127^0'=__const_127^post2, __const_36^0'=__const_36^post2, counter^0'=counter^post2, y^0'=y^post2, z^0'=z^post2, (-1+counter^post2-counter^0 == 0 /\ y^0-y^post2 == 0 /\ __const_127^0-__const_127^post2 == 0 /\ -__const_36^post2+__const_36^0 == 0 /\ 1-__const_36^0+counter^0 <= 0 /\ -1-z^0+z^post2 == 0), cost: 1
	New rule:
	l0 -> l2 : __const_127^0'=__const_127^0, __const_36^0'=__const_36^0, counter^0'=1+counter^0, y^0'=y^0, z^0'=1+z^0, (0 == 0 /\ 1-__const_36^0+counter^0 <= 0), cost: 1
	
		propagated equality counter^post2 = 1+counter^0
		
		propagated equality y^post2 = y^0
		
		propagated equality __const_127^post2 = __const_127^0
		
		propagated equality __const_36^post2 = __const_36^0
		
		propagated equality z^post2 = 1+z^0
		
	Simplified Guard

	Original rule:
	l0 -> l2 : __const_127^0'=__const_127^0, __const_36^0'=__const_36^0, counter^0'=1+counter^0, y^0'=y^0, z^0'=1+z^0, (0 == 0 /\ 1-__const_36^0+counter^0 <= 0), cost: 1
	New rule:
	l0 -> l2 : __const_127^0'=__const_127^0, __const_36^0'=__const_36^0, counter^0'=1+counter^0, y^0'=y^0, z^0'=1+z^0, 1-__const_36^0+counter^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l2 : __const_127^0'=__const_127^0, __const_36^0'=__const_36^0, counter^0'=1+counter^0, y^0'=y^0, z^0'=1+z^0, 1-__const_36^0+counter^0 <= 0, cost: 1
	New rule:
	l0 -> l2 : counter^0'=1+counter^0, z^0'=1+z^0, 1-__const_36^0+counter^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l3 -> l2 : __const_127^0'=__const_127^post3, __const_36^0'=__const_36^post3, counter^0'=counter^post3, y^0'=y^post3, z^0'=z^post3, (0 == 0 /\ -__const_127^0+y^0 <= 0 /\ -__const_36^post3+__const_36^0 == 0 /\ -counter^post3+counter^0 == 0 /\ -__const_127^post3+__const_127^0 == 0 /\ -y^post3+y^0 == 0), cost: 1
	New rule:
	l3 -> l2 : __const_127^0'=__const_127^0, __const_36^0'=__const_36^0, counter^0'=counter^0, y^0'=y^0, z^0'=z^post3, (0 == 0 /\ -__const_127^0+y^0 <= 0), cost: 1
	
		propagated equality __const_36^post3 = __const_36^0
		
		propagated equality counter^post3 = counter^0
		
		propagated equality __const_127^post3 = __const_127^0
		
		propagated equality y^post3 = y^0
		
	Simplified Guard

	Original rule:
	l3 -> l2 : __const_127^0'=__const_127^0, __const_36^0'=__const_36^0, counter^0'=counter^0, y^0'=y^0, z^0'=z^post3, (0 == 0 /\ -__const_127^0+y^0 <= 0), cost: 1
	New rule:
	l3 -> l2 : __const_127^0'=__const_127^0, __const_36^0'=__const_36^0, counter^0'=counter^0, y^0'=y^0, z^0'=z^post3, -__const_127^0+y^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l3 -> l2 : __const_127^0'=__const_127^0, __const_36^0'=__const_36^0, counter^0'=counter^0, y^0'=y^0, z^0'=z^post3, -__const_127^0+y^0 <= 0, cost: 1
	New rule:
	l3 -> l2 : z^0'=z^post3, -__const_127^0+y^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l3 -> l1 : __const_127^0'=__const_127^post4, __const_36^0'=__const_36^post4, counter^0'=counter^post4, y^0'=y^post4, z^0'=z^post4, (z^0-z^post4 == 0 /\ y^0-y^post4 == 0 /\ 1+__const_127^0-y^0 <= 0 /\ -counter^post4+counter^0 == 0 /\ __const_127^0-__const_127^post4 == 0 /\ -__const_36^post4+__const_36^0 == 0), cost: 1
	New rule:
	l3 -> l1 : __const_127^0'=__const_127^0, __const_36^0'=__const_36^0, counter^0'=counter^0, y^0'=y^0, z^0'=z^0, (0 == 0 /\ 1+__const_127^0-y^0 <= 0), cost: 1
	
		propagated equality z^post4 = z^0
		
		propagated equality y^post4 = y^0
		
		propagated equality counter^post4 = counter^0
		
		propagated equality __const_127^post4 = __const_127^0
		
		propagated equality __const_36^post4 = __const_36^0
		
	Simplified Guard

	Original rule:
	l3 -> l1 : __const_127^0'=__const_127^0, __const_36^0'=__const_36^0, counter^0'=counter^0, y^0'=y^0, z^0'=z^0, (0 == 0 /\ 1+__const_127^0-y^0 <= 0), cost: 1
	New rule:
	l3 -> l1 : __const_127^0'=__const_127^0, __const_36^0'=__const_36^0, counter^0'=counter^0, y^0'=y^0, z^0'=z^0, 1+__const_127^0-y^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l3 -> l1 : __const_127^0'=__const_127^0, __const_36^0'=__const_36^0, counter^0'=counter^0, y^0'=y^0, z^0'=z^0, 1+__const_127^0-y^0 <= 0, cost: 1
	New rule:
	l3 -> l1 : 1+__const_127^0-y^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l2 -> l0 : __const_127^0'=__const_127^post5, __const_36^0'=__const_36^post5, counter^0'=counter^post5, y^0'=y^post5, z^0'=z^post5, (z^0-z^post5 == 0 /\ -__const_36^post5+__const_36^0 == 0 /\ -y^post5+y^0 == 0 /\ -counter^post5+counter^0 == 0 /\ -__const_127^post5+__const_127^0 == 0), cost: 1
	New rule:
	l2 -> l0 : __const_127^0'=__const_127^0, __const_36^0'=__const_36^0, counter^0'=counter^0, y^0'=y^0, z^0'=z^0, 0 == 0, cost: 1
	
		propagated equality z^post5 = z^0
		
		propagated equality __const_36^post5 = __const_36^0
		
		propagated equality y^post5 = y^0
		
		propagated equality counter^post5 = counter^0
		
		propagated equality __const_127^post5 = __const_127^0
		
	Simplified Guard

	Original rule:
	l2 -> l0 : __const_127^0'=__const_127^0, __const_36^0'=__const_36^0, counter^0'=counter^0, y^0'=y^0, z^0'=z^0, 0 == 0, cost: 1
	New rule:
	l2 -> l0 : __const_127^0'=__const_127^0, __const_36^0'=__const_36^0, counter^0'=counter^0, y^0'=y^0, z^0'=z^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l2 -> l0 : __const_127^0'=__const_127^0, __const_36^0'=__const_36^0, counter^0'=counter^0, y^0'=y^0, z^0'=z^0, T, cost: 1
	New rule:
	l2 -> l0 : T, cost: 1
	
	Propagated Equalities

	Original rule:
	l5 -> l3 : __const_127^0'=__const_127^post6, __const_36^0'=__const_36^post6, counter^0'=counter^post6, y^0'=y^post6, z^0'=z^post6, (-__const_36^post6+__const_36^post7 == 0 /\ -counter^post7+counter^0 == 0 /\ y^post7-y^post6 == 0 /\ -y^post7+y^0 == 0 /\ -z^post6+z^post7 == 0 /\ counter^post6 == 0 /\ z^0-z^post7 == 0 /\ __const_127^post7-__const_127^post6 == 0 /\ __const_127^0-__const_127^post7 == 0 /\ -__const_36^post7+__const_36^0 == 0), cost: 1
	New rule:
	l5 -> l3 : __const_127^0'=__const_127^post7, __const_36^0'=__const_36^post7, counter^0'=0, y^0'=y^post7, z^0'=z^post7, (0 == 0 /\ -counter^post7+counter^0 == 0 /\ -y^post7+y^0 == 0 /\ z^0-z^post7 == 0 /\ __const_127^0-__const_127^post7 == 0 /\ -__const_36^post7+__const_36^0 == 0), cost: 1
	
		propagated equality __const_36^post6 = __const_36^post7
		
		propagated equality y^post6 = y^post7
		
		propagated equality z^post6 = z^post7
		
		propagated equality counter^post6 = 0
		
		propagated equality __const_127^post6 = __const_127^post7
		
	Propagated Equalities

	Original rule:
	l5 -> l3 : __const_127^0'=__const_127^post7, __const_36^0'=__const_36^post7, counter^0'=0, y^0'=y^post7, z^0'=z^post7, (0 == 0 /\ -counter^post7+counter^0 == 0 /\ -y^post7+y^0 == 0 /\ z^0-z^post7 == 0 /\ __const_127^0-__const_127^post7 == 0 /\ -__const_36^post7+__const_36^0 == 0), cost: 1
	New rule:
	l5 -> l3 : __const_127^0'=__const_127^0, __const_36^0'=__const_36^0, counter^0'=0, y^0'=y^0, z^0'=z^0, 0 == 0, cost: 1
	
		propagated equality counter^post7 = counter^0
		
		propagated equality y^post7 = y^0
		
		propagated equality z^post7 = z^0
		
		propagated equality __const_127^post7 = __const_127^0
		
		propagated equality __const_36^post7 = __const_36^0
		
	Simplified Guard

	Original rule:
	l5 -> l3 : __const_127^0'=__const_127^0, __const_36^0'=__const_36^0, counter^0'=0, y^0'=y^0, z^0'=z^0, 0 == 0, cost: 1
	New rule:
	l5 -> l3 : __const_127^0'=__const_127^0, __const_36^0'=__const_36^0, counter^0'=0, y^0'=y^0, z^0'=z^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l5 -> l3 : __const_127^0'=__const_127^0, __const_36^0'=__const_36^0, counter^0'=0, y^0'=y^0, z^0'=z^0, T, cost: 1
	New rule:
	l5 -> l3 : counter^0'=0, T, cost: 1

Step with 13

	Trace

	13[T]
	
	Blocked

	[{}, {}]

Step with 10

	Trace

	13[T], 10[(-__const_127^0+y^0 <= 0)]
	
	Blocked

	[{}, {}, {}]

Step with 12

	Trace

	13[T], 10[(-__const_127^0+y^0 <= 0)], 12[T]
	
	Blocked

	[{}, {}, {}, {}]

Step with 8

	Trace

	13[T], 10[(-__const_127^0+y^0 <= 0)], 12[T], 8[(__const_36^0-counter^0 <= 0)]
	
	Blocked

	[{}, {}, {}, {}, {}]

Backtrack

	Trace

	13[T], 10[(-__const_127^0+y^0 <= 0)], 12[T]
	
	Blocked

	[{}, {}, {}, {8[T]}]

Step with 9

	Trace

	13[T], 10[(-__const_127^0+y^0 <= 0)], 12[T], 9[(1-__const_36^0+counter^0 <= 0)]
	
	Blocked

	[{}, {}, {}, {8[T]}, {}]

Accelerate

Start location: l5
Program variables: __const_127^0 __const_36^0 counter^0 y^0 z^0
   8: l0 -> l1 : __const_36^0-counter^0 <= 0, cost: 1
   9: l0 -> l2 : counter^0'=1+counter^0, z^0'=1+z^0, 1-__const_36^0+counter^0 <= 0, cost: 1
  12: l2 -> l0 : T, cost: 1
  14: l2 -> l2 : counter^0'=n+counter^0, z^0'=z^0+n, (-n+__const_36^0-counter^0 >= 0 /\ -1+n >= 0), cost: 1
  10: l3 -> l2 : z^0'=z^post3, -__const_127^0+y^0 <= 0, cost: 1
  11: l3 -> l1 : 1+__const_127^0-y^0 <= 0, cost: 1
  13: l5 -> l3 : counter^0'=0, T, cost: 1

	Loop Acceleration

	Original rule:
	l2 -> l2 : counter^0'=1+counter^0, z^0'=1+z^0, 1-__const_36^0+counter^0 <= 0, cost: 1
	New rule:
	l2 -> l2 : counter^0'=n+counter^0, z^0'=z^0+n, (-n+__const_36^0-counter^0 >= 0 /\ -1+n >= 0), cost: 1

		-1+__const_36^0-counter^0 >= 0 [0]: montonic decrease yields -n+__const_36^0-counter^0 >= 0
		
		-1+__const_36^0-counter^0 >= 0 [1]: eventual increase yields (1 <= 0 /\ -1+__const_36^0-counter^0 >= 0)
		
		Replacement map: {-1+__const_36^0-counter^0 >= 0 -> -n+__const_36^0-counter^0 >= 0}

	Trace

	13[T], 10[(-__const_127^0+y^0 <= 0)], 14[(-n+__const_36^0-counter^0 >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {}, {}, {14[T]}]

Step with 12

	Trace

	13[T], 10[(-__const_127^0+y^0 <= 0)], 14[(-n+__const_36^0-counter^0 >= 0 /\ -1+n >= 0)], 12[T]
	
	Blocked

	[{}, {}, {}, {14[T]}, {}]

Step with 9

	Trace

	13[T], 10[(-__const_127^0+y^0 <= 0)], 14[(-n+__const_36^0-counter^0 >= 0 /\ -1+n >= 0)], 12[T], 9[(1-__const_36^0+counter^0 <= 0)]
	
	Blocked

	[{}, {}, {}, {14[T]}, {}, {}]

Covered

	Trace

	13[T], 10[(-__const_127^0+y^0 <= 0)], 14[(-n+__const_36^0-counter^0 >= 0 /\ -1+n >= 0)], 12[T]
	
	Blocked

	[{}, {}, {}, {14[T]}, {9[T]}]

Step with 8

	Trace

	13[T], 10[(-__const_127^0+y^0 <= 0)], 14[(-n+__const_36^0-counter^0 >= 0 /\ -1+n >= 0)], 12[T], 8[(__const_36^0-counter^0 <= 0)]
	
	Blocked

	[{}, {}, {}, {14[T]}, {9[T]}, {}]

Backtrack

	Trace

	13[T], 10[(-__const_127^0+y^0 <= 0)], 14[(-n+__const_36^0-counter^0 >= 0 /\ -1+n >= 0)], 12[T]
	
	Blocked

	[{}, {}, {}, {14[T]}, {8[T], 9[T]}]

Backtrack

	Trace

	13[T], 10[(-__const_127^0+y^0 <= 0)], 14[(-n+__const_36^0-counter^0 >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {}, {}, {12[T], 14[T]}]

Backtrack

	Trace

	13[T], 10[(-__const_127^0+y^0 <= 0)]
	
	Blocked

	[{}, {}, {14[T]}]

Step with 12

	Trace

	13[T], 10[(-__const_127^0+y^0 <= 0)], 12[T]
	
	Blocked

	[{}, {}, {14[T]}, {}]

Step with 8

	Trace

	13[T], 10[(-__const_127^0+y^0 <= 0)], 12[T], 8[(__const_36^0-counter^0 <= 0)]
	
	Blocked

	[{}, {}, {14[T]}, {}, {}]

Backtrack

	Trace

	13[T], 10[(-__const_127^0+y^0 <= 0)], 12[T]
	
	Blocked

	[{}, {}, {14[T]}, {8[T]}]

Step with 9

	Trace

	13[T], 10[(-__const_127^0+y^0 <= 0)], 12[T], 9[(1-__const_36^0+counter^0 <= 0)]
	
	Blocked

	[{}, {}, {14[T]}, {8[T]}, {}]

Covered

	Trace

	13[T], 10[(-__const_127^0+y^0 <= 0)], 12[T]
	
	Blocked

	[{}, {}, {14[T]}, {8[T], 9[T]}]

Backtrack

	Trace

	13[T], 10[(-__const_127^0+y^0 <= 0)]
	
	Blocked

	[{}, {}, {12[T], 14[T]}]

Backtrack

	Trace

	13[T]
	
	Blocked

	[{}, {10[T]}]

Step with 11

	Trace

	13[T], 11[(1+__const_127^0-y^0 <= 0)]
	
	Blocked

	[{}, {10[T]}, {}]

Backtrack

	Trace

	13[T]
	
	Blocked

	[{}, {10[T], 11[T]}]

Backtrack

	Trace

	Blocked

	[{13[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
