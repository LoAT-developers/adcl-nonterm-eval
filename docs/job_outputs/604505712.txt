WORST_CASE(Omega(0),?)

Initial ITS
Start location: __init
   0: f1_0_main_ConstantStackPush -> f149_0_doSum_LT : arg1'=arg1P0, 10-arg1P0 == 0, cost: 1
   1: f149_0_doSum_LT -> f163_0_factorial_GT : arg1'=arg1P1, (1+arg1 > 0 /\ -arg1P1+arg1 == 0), cost: 1
   2: f149_0_doSum_LT -> f149_0_doSum_LT : arg1'=arg1P2, (1+arg1 > 0 /\ -1-arg1P2+arg1 == 0), cost: 1
   3: f163_0_factorial_GT -> f163_0_factorial_GT : arg1'=arg1P3, (-1+arg1-arg1P3 == 0 /\ arg1 > 0 /\ -1 < 0), cost: 1
   4: __init -> f1_0_main_ConstantStackPush : arg1'=arg1P4, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_ConstantStackPush -> f149_0_doSum_LT : arg1'=arg1P0, 10-arg1P0 == 0, cost: 1
New rule:
f1_0_main_ConstantStackPush -> f149_0_doSum_LT : arg1'=10, TRUE, cost: 1

Applied preprocessing
Original rule:
f149_0_doSum_LT -> f163_0_factorial_GT : arg1'=arg1P1, (1+arg1 > 0 /\ -arg1P1+arg1 == 0), cost: 1
New rule:
f149_0_doSum_LT -> f163_0_factorial_GT : 1+arg1 > 0, cost: 1

Applied preprocessing
Original rule:
f149_0_doSum_LT -> f149_0_doSum_LT : arg1'=arg1P2, (1+arg1 > 0 /\ -1-arg1P2+arg1 == 0), cost: 1
New rule:
f149_0_doSum_LT -> f149_0_doSum_LT : arg1'=-1+arg1, 1+arg1 > 0, cost: 1

Applied preprocessing
Original rule:
f163_0_factorial_GT -> f163_0_factorial_GT : arg1'=arg1P3, (-1+arg1-arg1P3 == 0 /\ arg1 > 0 /\ -1 < 0), cost: 1
New rule:
f163_0_factorial_GT -> f163_0_factorial_GT : arg1'=-1+arg1, arg1 > 0, cost: 1

Simplified rules
Start location: __init
   5: f1_0_main_ConstantStackPush -> f149_0_doSum_LT : arg1'=10, TRUE, cost: 1
   6: f149_0_doSum_LT -> f163_0_factorial_GT : 1+arg1 > 0, cost: 1
   7: f149_0_doSum_LT -> f149_0_doSum_LT : arg1'=-1+arg1, 1+arg1 > 0, cost: 1
   8: f163_0_factorial_GT -> f163_0_factorial_GT : arg1'=-1+arg1, arg1 > 0, cost: 1
   4: __init -> f1_0_main_ConstantStackPush : arg1'=arg1P4, TRUE, cost: 1


Applied acceleration
Original rule:
f149_0_doSum_LT -> f149_0_doSum_LT : arg1'=-1+arg1, 1+arg1 > 0, cost: 1
New rule:
f149_0_doSum_LT -> f149_0_doSum_LT : arg1'=-n+arg1, (n >= 0 /\ 2-n+arg1 > 0), cost: n
Sub-proof via acceration calculus written to file:///tmp/tmpnam_gBCafk.txt

Applied instantiation
Original rule:
f149_0_doSum_LT -> f149_0_doSum_LT : arg1'=-n+arg1, (n >= 0 /\ 2-n+arg1 > 0), cost: n
New rule:
f149_0_doSum_LT -> f149_0_doSum_LT : arg1'=-1, (1 > 0 /\ 1+arg1 >= 0), cost: 1+arg1

Applied simplification
Original rule:
f149_0_doSum_LT -> f149_0_doSum_LT : arg1'=-1, (1 > 0 /\ 1+arg1 >= 0), cost: 1+arg1
New rule:
f149_0_doSum_LT -> f149_0_doSum_LT : arg1'=-1, 1+arg1 >= 0, cost: 1+arg1

Applied deletion
Removed the following rules: 7

Applied acceleration
Original rule:
f163_0_factorial_GT -> f163_0_factorial_GT : arg1'=-1+arg1, arg1 > 0, cost: 1
New rule:
f163_0_factorial_GT -> f163_0_factorial_GT : arg1'=arg1-n0, (1+arg1-n0 > 0 /\ n0 >= 0), cost: n0
Sub-proof via acceration calculus written to file:///tmp/tmpnam_eLMkPj.txt

Applied instantiation
Original rule:
f163_0_factorial_GT -> f163_0_factorial_GT : arg1'=arg1-n0, (1+arg1-n0 > 0 /\ n0 >= 0), cost: n0
New rule:
f163_0_factorial_GT -> f163_0_factorial_GT : arg1'=0, (1 > 0 /\ arg1 >= 0), cost: arg1

Applied simplification
Original rule:
f163_0_factorial_GT -> f163_0_factorial_GT : arg1'=0, (1 > 0 /\ arg1 >= 0), cost: arg1
New rule:
f163_0_factorial_GT -> f163_0_factorial_GT : arg1'=0, arg1 >= 0, cost: arg1

Applied deletion
Removed the following rules: 8

Accelerated simple loops
Start location: __init
   5: f1_0_main_ConstantStackPush -> f149_0_doSum_LT : arg1'=10, TRUE, cost: 1
   6: f149_0_doSum_LT -> f163_0_factorial_GT : 1+arg1 > 0, cost: 1
  10: f149_0_doSum_LT -> f149_0_doSum_LT : arg1'=-1, 1+arg1 >= 0, cost: 1+arg1
  12: f163_0_factorial_GT -> f163_0_factorial_GT : arg1'=0, arg1 >= 0, cost: arg1
   4: __init -> f1_0_main_ConstantStackPush : arg1'=arg1P4, TRUE, cost: 1


Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f149_0_doSum_LT : arg1'=10, TRUE, cost: 1
Second rule:
f149_0_doSum_LT -> f149_0_doSum_LT : arg1'=-1, 1+arg1 >= 0, cost: 1+arg1
New rule:
f1_0_main_ConstantStackPush -> f149_0_doSum_LT : arg1'=-1, 11 >= 0, cost: 12

Applied deletion
Removed the following rules: 10

Applied chaining
First rule:
f149_0_doSum_LT -> f163_0_factorial_GT : 1+arg1 > 0, cost: 1
Second rule:
f163_0_factorial_GT -> f163_0_factorial_GT : arg1'=0, arg1 >= 0, cost: arg1
New rule:
f149_0_doSum_LT -> f163_0_factorial_GT : arg1'=0, arg1 >= 0, cost: 1+arg1

Applied deletion
Removed the following rules: 12

Chained accelerated rules with incoming rules
Start location: __init
   5: f1_0_main_ConstantStackPush -> f149_0_doSum_LT : arg1'=10, TRUE, cost: 1
  13: f1_0_main_ConstantStackPush -> f149_0_doSum_LT : arg1'=-1, 11 >= 0, cost: 12
   6: f149_0_doSum_LT -> f163_0_factorial_GT : 1+arg1 > 0, cost: 1
  14: f149_0_doSum_LT -> f163_0_factorial_GT : arg1'=0, arg1 >= 0, cost: 1+arg1
   4: __init -> f1_0_main_ConstantStackPush : arg1'=arg1P4, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
  <empty>


Computing asymptotic complexity

Proved the following lower bound
Complexity:  Unknown
Cpx degree: ?

Solved cost: 0
Rule cost:   0

