unknown

Initial ITS

Start location: __init
Program variables: arg1 arg2 arg3
   0: f1_0_main_Load -> f339_0_main_LT : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (1+arg2 > 0 /\ 1+arg1p1 > 0 /\ 1+arg2p1 > 0 /\ arg1 > 0 /\ 2-arg3p1 == 0), cost: 1
   1: f339_0_main_LT -> f339_0_main_LT : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, (-1-arg2 == 0 /\ -1+arg1-arg1p2 == 0 /\ arg3-arg3p2 == 0 /\ -1-arg2p2 == 0 /\ 1+arg1 > 0), cost: 1
   2: f339_0_main_LT -> f339_0_main_LT : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, (1+arg2 > 0 /\ 1+arg1p3 > 0 /\ -1-arg2p3+arg2 == 0 /\ 1+arg3-arg3p3 == 0 /\ 1+arg3 > 0), cost: 1
   3: __init -> f1_0_main_Load : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2 arg3
   1: f339_0_main_LT -> f339_0_main_LT : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, (-1-arg2 == 0 /\ -1+arg1-arg1p2 == 0 /\ arg3-arg3p2 == 0 /\ -1-arg2p2 == 0 /\ 1+arg1 > 0), cost: 1
   2: f339_0_main_LT -> f339_0_main_LT : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, (1+arg2 > 0 /\ 1+arg1p3 > 0 /\ -1-arg2p3+arg2 == 0 /\ 1+arg3-arg3p3 == 0 /\ 1+arg3 > 0), cost: 1
   4: __init -> f339_0_main_LT : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (1+arg1p1 > 0 /\ 1+arg2p1 > 0 /\ 2-arg3p1 == 0 /\ arg1p4 > 0 /\ 1+arg2p4 > 0), cost: 1

	Eliminating location f1_0_main_Load by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_Load : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, T, cost: 1
	Second rule:
	f1_0_main_Load -> f339_0_main_LT : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (1+arg2 > 0 /\ 1+arg1p1 > 0 /\ 1+arg2p1 > 0 /\ arg1 > 0 /\ 2-arg3p1 == 0), cost: 1
	New rule:
	__init -> f339_0_main_LT : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (1+arg1p1 > 0 /\ 1+arg2p1 > 0 /\ 2-arg3p1 == 0 /\ arg1p4 > 0 /\ 1+arg2p4 > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 3

Simplified Transitions

Start location: __init
Program variables: arg1 arg2 arg3
   5: f339_0_main_LT -> f339_0_main_LT : arg1'=-1+arg1, arg2'=-1, (-1-arg2 == 0 /\ 1+arg1 > 0), cost: 1
   6: f339_0_main_LT -> f339_0_main_LT : arg1'=arg1p3, arg2'=-1+arg2, arg3'=1+arg3, (1+arg2 > 0 /\ 1+arg1p3 > 0 /\ 1+arg3 > 0), cost: 1
   7: __init -> f339_0_main_LT : arg1'=arg1p1, arg2'=arg2p1, arg3'=2, (1+arg1p1 > 0 /\ 1+arg2p1 > 0), cost: 1

	Propagated Equalities

	Original rule:
	f339_0_main_LT -> f339_0_main_LT : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, (-1-arg2 == 0 /\ -1+arg1-arg1p2 == 0 /\ arg3-arg3p2 == 0 /\ -1-arg2p2 == 0 /\ 1+arg1 > 0), cost: 1
	New rule:
	f339_0_main_LT -> f339_0_main_LT : arg1'=-1+arg1, arg2'=-1, arg3'=arg3, (0 == 0 /\ -1-arg2 == 0 /\ 1+arg1 > 0), cost: 1
	
		propagated equality arg1p2 = -1+arg1
		
		propagated equality arg3p2 = arg3
		
		propagated equality arg2p2 = -1
		
	Simplified Guard

	Original rule:
	f339_0_main_LT -> f339_0_main_LT : arg1'=-1+arg1, arg2'=-1, arg3'=arg3, (0 == 0 /\ -1-arg2 == 0 /\ 1+arg1 > 0), cost: 1
	New rule:
	f339_0_main_LT -> f339_0_main_LT : arg1'=-1+arg1, arg2'=-1, arg3'=arg3, (-1-arg2 == 0 /\ 1+arg1 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f339_0_main_LT -> f339_0_main_LT : arg1'=-1+arg1, arg2'=-1, arg3'=arg3, (-1-arg2 == 0 /\ 1+arg1 > 0), cost: 1
	New rule:
	f339_0_main_LT -> f339_0_main_LT : arg1'=-1+arg1, arg2'=-1, (-1-arg2 == 0 /\ 1+arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f339_0_main_LT -> f339_0_main_LT : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, (1+arg2 > 0 /\ 1+arg1p3 > 0 /\ -1-arg2p3+arg2 == 0 /\ 1+arg3-arg3p3 == 0 /\ 1+arg3 > 0), cost: 1
	New rule:
	f339_0_main_LT -> f339_0_main_LT : arg1'=arg1p3, arg2'=-1+arg2, arg3'=1+arg3, (0 == 0 /\ 1+arg2 > 0 /\ 1+arg1p3 > 0 /\ 1+arg3 > 0), cost: 1
	
		propagated equality arg2p3 = -1+arg2
		
		propagated equality arg3p3 = 1+arg3
		
	Simplified Guard

	Original rule:
	f339_0_main_LT -> f339_0_main_LT : arg1'=arg1p3, arg2'=-1+arg2, arg3'=1+arg3, (0 == 0 /\ 1+arg2 > 0 /\ 1+arg1p3 > 0 /\ 1+arg3 > 0), cost: 1
	New rule:
	f339_0_main_LT -> f339_0_main_LT : arg1'=arg1p3, arg2'=-1+arg2, arg3'=1+arg3, (1+arg2 > 0 /\ 1+arg1p3 > 0 /\ 1+arg3 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	__init -> f339_0_main_LT : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (1+arg1p1 > 0 /\ 1+arg2p1 > 0 /\ 2-arg3p1 == 0 /\ arg1p4 > 0 /\ 1+arg2p4 > 0), cost: 1
	New rule:
	__init -> f339_0_main_LT : arg1'=arg1p1, arg2'=arg2p1, arg3'=2, (0 == 0 /\ 1+arg1p1 > 0 /\ 1+arg2p1 > 0 /\ arg1p4 > 0 /\ 1+arg2p4 > 0), cost: 1
	
		propagated equality arg3p1 = 2
		
	Simplified Guard

	Original rule:
	__init -> f339_0_main_LT : arg1'=arg1p1, arg2'=arg2p1, arg3'=2, (0 == 0 /\ 1+arg1p1 > 0 /\ 1+arg2p1 > 0 /\ arg1p4 > 0 /\ 1+arg2p4 > 0), cost: 1
	New rule:
	__init -> f339_0_main_LT : arg1'=arg1p1, arg2'=arg2p1, arg3'=2, (1+arg1p1 > 0 /\ 1+arg2p1 > 0 /\ arg1p4 > 0 /\ 1+arg2p4 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	__init -> f339_0_main_LT : arg1'=arg1p1, arg2'=arg2p1, arg3'=2, (1+arg1p1 > 0 /\ 1+arg2p1 > 0 /\ arg1p4 > 0 /\ 1+arg2p4 > 0), cost: 1
	New rule:
	__init -> f339_0_main_LT : arg1'=arg1p1, arg2'=arg2p1, arg3'=2, (1+arg1p1 > 0 /\ 1+arg2p1 > 0), cost: 1

Step with 7

	Trace

	7[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)]
	
	Blocked

	[{}, {}]

Step with 6

	Trace

	7[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 6[(1+arg2 > 0 /\ 1+arg1p3 > 0 /\ 1+arg3 > 0)]
	
	Blocked

	[{}, {5[T]}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2 arg3
   5: f339_0_main_LT -> f339_0_main_LT : arg1'=-1+arg1, arg2'=-1, (-1-arg2 == 0 /\ 1+arg1 > 0), cost: 1
   6: f339_0_main_LT -> f339_0_main_LT : arg1'=arg1p3, arg2'=-1+arg2, arg3'=1+arg3, (1+arg2 > 0 /\ 1+arg1p3 > 0 /\ 1+arg3 > 0), cost: 1
   8: f339_0_main_LT -> f339_0_main_LT : arg1'=arg1p3, arg2'=-n+arg2, arg3'=arg3+n, (1+arg1p3 > 0 /\ 2-n+arg2 > 0 /\ 1+arg3 > 0 /\ -1+n >= 0), cost: 1
   7: __init -> f339_0_main_LT : arg1'=arg1p1, arg2'=arg2p1, arg3'=2, (1+arg1p1 > 0 /\ 1+arg2p1 > 0), cost: 1

	Loop Acceleration

	Original rule:
	f339_0_main_LT -> f339_0_main_LT : arg1'=arg1p3, arg2'=-1+arg2, arg3'=1+arg3, (1+arg2 > 0 /\ 1+arg1p3 > 0 /\ 1+arg3 > 0), cost: 1
	New rule:
	f339_0_main_LT -> f339_0_main_LT : arg1'=arg1p3, arg2'=-n+arg2, arg3'=arg3+n, (1+arg1p3 > 0 /\ 2-n+arg2 > 0 /\ 1+arg3 > 0 /\ -1+n >= 0), cost: 1

		1+arg2 > 0 [0]: montonic decrease yields 2-n+arg2 > 0
		
		1+arg2 > 0 [1]: eventual increase yields (1 <= 0 /\ 1+arg2 > 0)
		
		1+arg1p3 > 0 [0]: monotonic increase yields 1+arg1p3 > 0
		
		1+arg3 > 0 [0]: monotonic increase yields 1+arg3 > 0
		
		Replacement map: {1+arg2 > 0 -> 2-n+arg2 > 0, 1+arg1p3 > 0 -> 1+arg1p3 > 0, 1+arg3 > 0 -> 1+arg3 > 0}

	Trace

	7[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 8[(1+arg1p3 > 0 /\ 2-n+arg2 > 0 /\ 1+arg3 > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {5[T]}, {6[T], 8[T]}]

Step with 5

	Trace

	7[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 8[(1+arg1p3 > 0 /\ 2-n+arg2 > 0 /\ 1+arg3 > 0 /\ -1+n >= 0)], 5[(-1-arg2 == 0 /\ 1+arg1 > 0)]
	
	Blocked

	[{}, {5[T]}, {6[T], 8[T]}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2 arg3
   5: f339_0_main_LT -> f339_0_main_LT : arg1'=-1+arg1, arg2'=-1, (-1-arg2 == 0 /\ 1+arg1 > 0), cost: 1
   6: f339_0_main_LT -> f339_0_main_LT : arg1'=arg1p3, arg2'=-1+arg2, arg3'=1+arg3, (1+arg2 > 0 /\ 1+arg1p3 > 0 /\ 1+arg3 > 0), cost: 1
   8: f339_0_main_LT -> f339_0_main_LT : arg1'=arg1p3, arg2'=-n+arg2, arg3'=arg3+n, (1+arg1p3 > 0 /\ 2-n+arg2 > 0 /\ 1+arg3 > 0 /\ -1+n >= 0), cost: 1
   9: f339_0_main_LT -> f339_0_main_LT : arg1'=-n2+arg1, arg2'=-1, (1+arg2 >= 0 /\ -1-arg2 >= 0 /\ 2-n2+arg1 > 0 /\ -1+n2 >= 0), cost: 1
   7: __init -> f339_0_main_LT : arg1'=arg1p1, arg2'=arg2p1, arg3'=2, (1+arg1p1 > 0 /\ 1+arg2p1 > 0), cost: 1

	Loop Acceleration

	Original rule:
	f339_0_main_LT -> f339_0_main_LT : arg1'=-1+arg1, arg2'=-1, (-1-arg2 == 0 /\ 1+arg1 > 0), cost: 1
	New rule:
	f339_0_main_LT -> f339_0_main_LT : arg1'=-n2+arg1, arg2'=-1, (1+arg2 >= 0 /\ -1-arg2 >= 0 /\ 2-n2+arg1 > 0 /\ -1+n2 >= 0), cost: 1

		1+arg2 >= 0 [0]: monotonic increase yields 1+arg2 >= 0
		
		-1-arg2 >= 0 [0]: monotonic increase yields -1-arg2 >= 0
		
		1+arg1 > 0 [0]: montonic decrease yields 2-n2+arg1 > 0
		
		1+arg1 > 0 [1]: eventual increase yields (1 <= 0 /\ 1+arg1 > 0)
		
		Replacement map: {1+arg2 >= 0 -> 1+arg2 >= 0, -1-arg2 >= 0 -> -1-arg2 >= 0, 1+arg1 > 0 -> 2-n2+arg1 > 0}

	Trace

	7[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 8[(1+arg1p3 > 0 /\ 2-n+arg2 > 0 /\ 1+arg3 > 0 /\ -1+n >= 0)], 9[(1+arg2 >= 0 /\ -1-arg2 >= 0 /\ 2-n2+arg1 > 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {5[T]}, {6[T], 8[T]}, {5[T], 9[T]}]

Acceleration Failed

marked recursive suffix as redundant

Backtrack

	Trace

	7[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 8[(1+arg1p3 > 0 /\ 2-n+arg2 > 0 /\ 1+arg3 > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {5[T]}, {6[T], 8[T], 9[T]}]

Step with 5

	Trace

	7[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 8[(1+arg1p3 > 0 /\ 2-n+arg2 > 0 /\ 1+arg3 > 0 /\ -1+n >= 0)], 5[(-1-arg2 == 0 /\ 1+arg1 > 0)]
	
	Blocked

	[{}, {5[T]}, {6[T], 8[T], 9[T]}, {}]

Covered

	Trace

	7[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 8[(1+arg1p3 > 0 /\ 2-n+arg2 > 0 /\ 1+arg3 > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {5[T]}, {5[T], 6[T], 8[T], 9[T]}]

Backtrack

	Trace

	7[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)]
	
	Blocked

	[{}, {5[T], 8[T]}]

Step with 6

	Trace

	7[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 6[(1+arg2 > 0 /\ 1+arg1p3 > 0 /\ 1+arg3 > 0)]
	
	Blocked

	[{}, {5[T], 8[T]}, {}]

Covered

	Trace

	7[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)]
	
	Blocked

	[{}, {5[T], 6[T], 8[T]}]

Backtrack

	Trace

	Blocked

	[{7[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
