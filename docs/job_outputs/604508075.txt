NO

Initial ITS

Start location: __init
Program variables: arg1
   0: f1_0_main_ConstantStackPush -> f41_0_main_GE : arg1'=arg1p1, -arg1p1 == 0, cost: 1
   1: f41_0_main_GE -> f41_0_main_GE : arg1'=arg1p2, (51-arg1p2 == 0 /\ -50+arg1 < 0), cost: 1
   2: f41_0_main_GE -> f41_0_main_GE : arg1'=arg1p3, (49-arg1p3 == 0 /\ -49+arg1 > 0), cost: 1
   3: __init -> f1_0_main_ConstantStackPush : arg1'=arg1p4, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1
   1: f41_0_main_GE -> f41_0_main_GE : arg1'=arg1p2, (51-arg1p2 == 0 /\ -50+arg1 < 0), cost: 1
   2: f41_0_main_GE -> f41_0_main_GE : arg1'=arg1p3, (49-arg1p3 == 0 /\ -49+arg1 > 0), cost: 1
   4: __init -> f41_0_main_GE : arg1'=arg1p1, -arg1p1 == 0, cost: 1

	Eliminating location f1_0_main_ConstantStackPush by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_ConstantStackPush : arg1'=arg1p4, T, cost: 1
	Second rule:
	f1_0_main_ConstantStackPush -> f41_0_main_GE : arg1'=arg1p1, -arg1p1 == 0, cost: 1
	New rule:
	__init -> f41_0_main_GE : arg1'=arg1p1, -arg1p1 == 0, cost: 1
	
	Applied deletion

	Removed the following rules: 0 3

Simplified Transitions

Start location: __init
Program variables: arg1
   5: f41_0_main_GE -> f41_0_main_GE : arg1'=51, -50+arg1 < 0, cost: 1
   6: f41_0_main_GE -> f41_0_main_GE : arg1'=49, -49+arg1 > 0, cost: 1
   7: __init -> f41_0_main_GE : arg1'=0, T, cost: 1

	Propagated Equalities

	Original rule:
	f41_0_main_GE -> f41_0_main_GE : arg1'=arg1p2, (51-arg1p2 == 0 /\ -50+arg1 < 0), cost: 1
	New rule:
	f41_0_main_GE -> f41_0_main_GE : arg1'=51, (0 == 0 /\ -50+arg1 < 0), cost: 1
	
		propagated equality arg1p2 = 51
		
	Simplified Guard

	Original rule:
	f41_0_main_GE -> f41_0_main_GE : arg1'=51, (0 == 0 /\ -50+arg1 < 0), cost: 1
	New rule:
	f41_0_main_GE -> f41_0_main_GE : arg1'=51, -50+arg1 < 0, cost: 1
	
	Propagated Equalities

	Original rule:
	f41_0_main_GE -> f41_0_main_GE : arg1'=arg1p3, (49-arg1p3 == 0 /\ -49+arg1 > 0), cost: 1
	New rule:
	f41_0_main_GE -> f41_0_main_GE : arg1'=49, (0 == 0 /\ -49+arg1 > 0), cost: 1
	
		propagated equality arg1p3 = 49
		
	Simplified Guard

	Original rule:
	f41_0_main_GE -> f41_0_main_GE : arg1'=49, (0 == 0 /\ -49+arg1 > 0), cost: 1
	New rule:
	f41_0_main_GE -> f41_0_main_GE : arg1'=49, -49+arg1 > 0, cost: 1
	
	Propagated Equalities

	Original rule:
	__init -> f41_0_main_GE : arg1'=arg1p1, -arg1p1 == 0, cost: 1
	New rule:
	__init -> f41_0_main_GE : arg1'=0, 0 == 0, cost: 1
	
		propagated equality arg1p1 = 0
		
	Simplified Guard

	Original rule:
	__init -> f41_0_main_GE : arg1'=0, 0 == 0, cost: 1
	New rule:
	__init -> f41_0_main_GE : arg1'=0, T, cost: 1

Step with 7

	Trace

	7[T]
	
	Blocked

	[{}, {}]

Step with 5

	Trace

	7[T], 5[(-50+arg1 < 0)]
	
	Blocked

	[{}, {}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 6

	Trace

	7[T], 5[(-50+arg1 < 0)], 6[(-49+arg1 > 0)]
	
	Blocked

	[{}, {}, {5[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Nonterm

Start location: __init
Program variables: arg1
   5: f41_0_main_GE -> f41_0_main_GE : arg1'=51, -50+arg1 < 0, cost: 1
   6: f41_0_main_GE -> f41_0_main_GE : arg1'=49, -49+arg1 > 0, cost: 1
   8: f41_0_main_GE -> LoAT_sink : (50-arg1 > 0 /\ -1+n >= 0), cost: NONTERM
   7: __init -> f41_0_main_GE : arg1'=0, T, cost: 1

	Certificate of Non-Termination

	Original rule:
	f41_0_main_GE -> f41_0_main_GE : arg1'=49, -50+arg1 < 0, cost: 1
	New rule:
	f41_0_main_GE -> LoAT_sink : (50-arg1 > 0 /\ -1+n >= 0), cost: NONTERM

		50-arg1 > 0 [0]: monotonic increase yields 50-arg1 > 0
		
		Replacement map: {50-arg1 > 0 -> 50-arg1 > 0}

Step with 8

	Trace

	7[T], 8[(50-arg1 > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {}, {8[T]}]

Refute

	Counterexample

	[ arg1=0 ] 7 [ arg1=arg1 ] 8
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
