unknown

Initial ITS

Start location: l4
Program variables: __const_20^0 i^0 j^0
   0: l0 -> l1 : __const_20^0'=__const_20^post1, i^0'=i^post1, j^0'=j^post1, (-j^post1+j^0 == 0 /\ __const_20^0-j^0 <= 0 /\ __const_20^0-__const_20^post1 == 0 /\ -i^post1+i^0 == 0), cost: 1
   1: l0 -> l2 : __const_20^0'=__const_20^post2, i^0'=i^post2, j^0'=j^post2, (__const_20^0-__const_20^post2 == 0 /\ -j^post2+j^0 == 0 /\ -i^post2+i^0 == 0 /\ 1-__const_20^0+j^0 <= 0), cost: 1
   2: l2 -> l0 : __const_20^0'=__const_20^post3, i^0'=i^post3, j^0'=j^post3, (-2+j^post3-j^0 == 0 /\ __const_20^0-__const_20^post3 == 0 /\ -2+i^post3-j^post3 == 0), cost: 1
   3: l3 -> l2 : __const_20^0'=__const_20^post4, i^0'=i^post4, j^0'=j^post4, (-i^post4+i^0 == 0 /\ j^post4 == 0 /\ __const_20^0-__const_20^post4 == 0), cost: 1
   4: l4 -> l3 : __const_20^0'=__const_20^post5, i^0'=i^post5, j^0'=j^post5, (-j^post5+j^0 == 0 /\ -__const_20^post5+__const_20^0 == 0 /\ i^0-i^post5 == 0), cost: 1

Chained Linear Paths

Start location: l4
Program variables: __const_20^0 i^0 j^0
   0: l0 -> l1 : __const_20^0'=__const_20^post1, i^0'=i^post1, j^0'=j^post1, (-j^post1+j^0 == 0 /\ __const_20^0-j^0 <= 0 /\ __const_20^0-__const_20^post1 == 0 /\ -i^post1+i^0 == 0), cost: 1
   1: l0 -> l2 : __const_20^0'=__const_20^post2, i^0'=i^post2, j^0'=j^post2, (__const_20^0-__const_20^post2 == 0 /\ -j^post2+j^0 == 0 /\ -i^post2+i^0 == 0 /\ 1-__const_20^0+j^0 <= 0), cost: 1
   2: l2 -> l0 : __const_20^0'=__const_20^post3, i^0'=i^post3, j^0'=j^post3, (-2+j^post3-j^0 == 0 /\ __const_20^0-__const_20^post3 == 0 /\ -2+i^post3-j^post3 == 0), cost: 1
   5: l4 -> l2 : __const_20^0'=__const_20^post4, i^0'=i^post4, j^0'=j^post4, (j^post4 == 0 /\ __const_20^post5-__const_20^post4 == 0 /\ -j^post5+j^0 == 0 /\ -__const_20^post5+__const_20^0 == 0 /\ -i^post4+i^post5 == 0 /\ i^0-i^post5 == 0), cost: 1

	Eliminating location l3 by chaining:

	Applied chaining

	First rule:
	l4 -> l3 : __const_20^0'=__const_20^post5, i^0'=i^post5, j^0'=j^post5, (-j^post5+j^0 == 0 /\ -__const_20^post5+__const_20^0 == 0 /\ i^0-i^post5 == 0), cost: 1
	Second rule:
	l3 -> l2 : __const_20^0'=__const_20^post4, i^0'=i^post4, j^0'=j^post4, (-i^post4+i^0 == 0 /\ j^post4 == 0 /\ __const_20^0-__const_20^post4 == 0), cost: 1
	New rule:
	l4 -> l2 : __const_20^0'=__const_20^post4, i^0'=i^post4, j^0'=j^post4, (j^post4 == 0 /\ __const_20^post5-__const_20^post4 == 0 /\ -j^post5+j^0 == 0 /\ -__const_20^post5+__const_20^0 == 0 /\ -i^post4+i^post5 == 0 /\ i^0-i^post5 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 3 4

Simplified Transitions

Start location: l4
Program variables: __const_20^0 i^0 j^0
   6: l0 -> l1 : __const_20^0-j^0 <= 0, cost: 1
   7: l0 -> l2 : 1-__const_20^0+j^0 <= 0, cost: 1
   8: l2 -> l0 : i^0'=4+j^0, j^0'=2+j^0, T, cost: 1
   9: l4 -> l2 : j^0'=0, T, cost: 1

	Propagated Equalities

	Original rule:
	l0 -> l1 : __const_20^0'=__const_20^post1, i^0'=i^post1, j^0'=j^post1, (-j^post1+j^0 == 0 /\ __const_20^0-j^0 <= 0 /\ __const_20^0-__const_20^post1 == 0 /\ -i^post1+i^0 == 0), cost: 1
	New rule:
	l0 -> l1 : __const_20^0'=__const_20^0, i^0'=i^0, j^0'=j^0, (0 == 0 /\ __const_20^0-j^0 <= 0), cost: 1
	
		propagated equality j^post1 = j^0
		
		propagated equality __const_20^post1 = __const_20^0
		
		propagated equality i^post1 = i^0
		
	Simplified Guard

	Original rule:
	l0 -> l1 : __const_20^0'=__const_20^0, i^0'=i^0, j^0'=j^0, (0 == 0 /\ __const_20^0-j^0 <= 0), cost: 1
	New rule:
	l0 -> l1 : __const_20^0'=__const_20^0, i^0'=i^0, j^0'=j^0, __const_20^0-j^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l1 : __const_20^0'=__const_20^0, i^0'=i^0, j^0'=j^0, __const_20^0-j^0 <= 0, cost: 1
	New rule:
	l0 -> l1 : __const_20^0-j^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l0 -> l2 : __const_20^0'=__const_20^post2, i^0'=i^post2, j^0'=j^post2, (__const_20^0-__const_20^post2 == 0 /\ -j^post2+j^0 == 0 /\ -i^post2+i^0 == 0 /\ 1-__const_20^0+j^0 <= 0), cost: 1
	New rule:
	l0 -> l2 : __const_20^0'=__const_20^0, i^0'=i^0, j^0'=j^0, (0 == 0 /\ 1-__const_20^0+j^0 <= 0), cost: 1
	
		propagated equality __const_20^post2 = __const_20^0
		
		propagated equality j^post2 = j^0
		
		propagated equality i^post2 = i^0
		
	Simplified Guard

	Original rule:
	l0 -> l2 : __const_20^0'=__const_20^0, i^0'=i^0, j^0'=j^0, (0 == 0 /\ 1-__const_20^0+j^0 <= 0), cost: 1
	New rule:
	l0 -> l2 : __const_20^0'=__const_20^0, i^0'=i^0, j^0'=j^0, 1-__const_20^0+j^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l2 : __const_20^0'=__const_20^0, i^0'=i^0, j^0'=j^0, 1-__const_20^0+j^0 <= 0, cost: 1
	New rule:
	l0 -> l2 : 1-__const_20^0+j^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l2 -> l0 : __const_20^0'=__const_20^post3, i^0'=i^post3, j^0'=j^post3, (-2+j^post3-j^0 == 0 /\ __const_20^0-__const_20^post3 == 0 /\ -2+i^post3-j^post3 == 0), cost: 1
	New rule:
	l2 -> l0 : __const_20^0'=__const_20^0, i^0'=4+j^0, j^0'=2+j^0, 0 == 0, cost: 1
	
		propagated equality j^post3 = 2+j^0
		
		propagated equality __const_20^post3 = __const_20^0
		
		propagated equality i^post3 = 4+j^0
		
	Simplified Guard

	Original rule:
	l2 -> l0 : __const_20^0'=__const_20^0, i^0'=4+j^0, j^0'=2+j^0, 0 == 0, cost: 1
	New rule:
	l2 -> l0 : __const_20^0'=__const_20^0, i^0'=4+j^0, j^0'=2+j^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l2 -> l0 : __const_20^0'=__const_20^0, i^0'=4+j^0, j^0'=2+j^0, T, cost: 1
	New rule:
	l2 -> l0 : i^0'=4+j^0, j^0'=2+j^0, T, cost: 1
	
	Propagated Equalities

	Original rule:
	l4 -> l2 : __const_20^0'=__const_20^post4, i^0'=i^post4, j^0'=j^post4, (j^post4 == 0 /\ __const_20^post5-__const_20^post4 == 0 /\ -j^post5+j^0 == 0 /\ -__const_20^post5+__const_20^0 == 0 /\ -i^post4+i^post5 == 0 /\ i^0-i^post5 == 0), cost: 1
	New rule:
	l4 -> l2 : __const_20^0'=__const_20^post5, i^0'=i^post5, j^0'=0, (0 == 0 /\ -j^post5+j^0 == 0 /\ -__const_20^post5+__const_20^0 == 0 /\ i^0-i^post5 == 0), cost: 1
	
		propagated equality j^post4 = 0
		
		propagated equality __const_20^post4 = __const_20^post5
		
		propagated equality i^post4 = i^post5
		
	Propagated Equalities

	Original rule:
	l4 -> l2 : __const_20^0'=__const_20^post5, i^0'=i^post5, j^0'=0, (0 == 0 /\ -j^post5+j^0 == 0 /\ -__const_20^post5+__const_20^0 == 0 /\ i^0-i^post5 == 0), cost: 1
	New rule:
	l4 -> l2 : __const_20^0'=__const_20^0, i^0'=i^0, j^0'=0, 0 == 0, cost: 1
	
		propagated equality j^post5 = j^0
		
		propagated equality __const_20^post5 = __const_20^0
		
		propagated equality i^post5 = i^0
		
	Simplified Guard

	Original rule:
	l4 -> l2 : __const_20^0'=__const_20^0, i^0'=i^0, j^0'=0, 0 == 0, cost: 1
	New rule:
	l4 -> l2 : __const_20^0'=__const_20^0, i^0'=i^0, j^0'=0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l4 -> l2 : __const_20^0'=__const_20^0, i^0'=i^0, j^0'=0, T, cost: 1
	New rule:
	l4 -> l2 : j^0'=0, T, cost: 1

Step with 9

	Trace

	9[T]
	
	Blocked

	[{}, {}]

Step with 8

	Trace

	9[T], 8[T]
	
	Blocked

	[{}, {}, {}]

Step with 6

	Trace

	9[T], 8[T], 6[(__const_20^0-j^0 <= 0)]
	
	Blocked

	[{}, {}, {}, {}]

Backtrack

	Trace

	9[T], 8[T]
	
	Blocked

	[{}, {}, {6[T]}]

Step with 7

	Trace

	9[T], 8[T], 7[(1-__const_20^0+j^0 <= 0)]
	
	Blocked

	[{}, {}, {6[T]}, {}]

Accelerate

Start location: l4
Program variables: __const_20^0 i^0 j^0
   6: l0 -> l1 : __const_20^0-j^0 <= 0, cost: 1
   7: l0 -> l2 : 1-__const_20^0+j^0 <= 0, cost: 1
   8: l2 -> l0 : i^0'=4+j^0, j^0'=2+j^0, T, cost: 1
  10: l2 -> l2 : i^0'=2+2*n+j^0, j^0'=2*n+j^0, (-1+n >= 0 /\ -1-2*n+__const_20^0-j^0 >= 0), cost: 1
   9: l4 -> l2 : j^0'=0, T, cost: 1

	Loop Acceleration

	Original rule:
	l2 -> l2 : i^0'=4+j^0, j^0'=2+j^0, 3-__const_20^0+j^0 <= 0, cost: 1
	New rule:
	l2 -> l2 : i^0'=2+2*n+j^0, j^0'=2*n+j^0, (-1+n >= 0 /\ -1-2*n+__const_20^0-j^0 >= 0), cost: 1

		-3+__const_20^0-j^0 >= 0 [0]: montonic decrease yields -1-2*n+__const_20^0-j^0 >= 0
		
		-3+__const_20^0-j^0 >= 0 [1]: eventual increase yields (-3+__const_20^0-j^0 >= 0 /\ 2 <= 0)
		
		Replacement map: {-3+__const_20^0-j^0 >= 0 -> -1-2*n+__const_20^0-j^0 >= 0}

	Trace

	9[T], 10[(-1+n >= 0 /\ -1-2*n+__const_20^0-j^0 >= 0)]
	
	Blocked

	[{}, {}, {10[T]}]

Step with 8

	Trace

	9[T], 10[(-1+n >= 0 /\ -1-2*n+__const_20^0-j^0 >= 0)], 8[T]
	
	Blocked

	[{}, {}, {10[T]}, {}]

Step with 7

	Trace

	9[T], 10[(-1+n >= 0 /\ -1-2*n+__const_20^0-j^0 >= 0)], 8[T], 7[(1-__const_20^0+j^0 <= 0)]
	
	Blocked

	[{}, {}, {10[T]}, {}, {}]

Covered

	Trace

	9[T], 10[(-1+n >= 0 /\ -1-2*n+__const_20^0-j^0 >= 0)], 8[T]
	
	Blocked

	[{}, {}, {10[T]}, {7[T]}]

Step with 6

	Trace

	9[T], 10[(-1+n >= 0 /\ -1-2*n+__const_20^0-j^0 >= 0)], 8[T], 6[(__const_20^0-j^0 <= 0)]
	
	Blocked

	[{}, {}, {10[T]}, {7[T]}, {}]

Backtrack

	Trace

	9[T], 10[(-1+n >= 0 /\ -1-2*n+__const_20^0-j^0 >= 0)], 8[T]
	
	Blocked

	[{}, {}, {10[T]}, {6[T], 7[T]}]

Backtrack

	Trace

	9[T], 10[(-1+n >= 0 /\ -1-2*n+__const_20^0-j^0 >= 0)]
	
	Blocked

	[{}, {}, {8[T], 10[T]}]

Backtrack

	Trace

	9[T]
	
	Blocked

	[{}, {10[T]}]

Step with 8

	Trace

	9[T], 8[T]
	
	Blocked

	[{}, {10[T]}, {}]

Step with 6

	Trace

	9[T], 8[T], 6[(__const_20^0-j^0 <= 0)]
	
	Blocked

	[{}, {10[T]}, {}, {}]

Backtrack

	Trace

	9[T], 8[T]
	
	Blocked

	[{}, {10[T]}, {6[T]}]

Step with 7

	Trace

	9[T], 8[T], 7[(1-__const_20^0+j^0 <= 0)]
	
	Blocked

	[{}, {10[T]}, {6[T]}, {}]

Covered

	Trace

	9[T], 8[T]
	
	Blocked

	[{}, {10[T]}, {6[T], 7[T]}]

Backtrack

	Trace

	9[T]
	
	Blocked

	[{}, {8[T], 10[T]}]

Backtrack

	Trace

	Blocked

	[{9[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
