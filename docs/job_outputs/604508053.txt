unknown

Initial ITS

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5 arg6
   0: f1_0_main_Load -> f593_0_main_LE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, arg5'=arg5p1, arg6'=arg6p1, (-arg5p1 == 0 /\ -arg2p1 == 0 /\ -arg4p1 == 0 /\ -arg2 == 0 /\ arg1p1-arg1 <= 0 /\ -arg6p1 == 0 /\ arg1p1 > 0 /\ -arg3p1 == 0 /\ arg1 > 0), cost: 1
   1: f1_0_main_Load -> f593_0_main_LE : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, arg4'=arg4p2, arg5'=arg5p2, arg6'=arg6p2, (arg1p2-arg1 <= 0 /\ 1+arg2p2 > 0 /\ 1-arg4p2 == 0 /\ 1-arg6p2 == 0 /\ -arg3p2 == 0 /\ 1-arg2 == 0 /\ arg1p2 > 0 /\ 1-arg5p2 == 0 /\ arg1 > 0), cost: 1
   2: f1_0_main_Load -> f593_0_main_LE : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, arg4'=arg4p3, arg5'=arg5p3, arg6'=arg6p3, (2-arg5p3 == 0 /\ 1+arg2p3 > 0 /\ arg1p3 > 0 /\ 1+arg3p3 > 0 /\ arg2-arg4p3 == 0 /\ arg1p3-arg1 <= 0 /\ -1+arg2 > 0 /\ arg2-arg6p3 == 0 /\ arg1 > 0), cost: 1
   3: f593_0_main_LE -> f593_0_main_LE : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, arg4'=arg4p4, arg5'=arg5p4, arg6'=arg6p4, (-1+arg2-arg3p4 == 0 /\ arg3 > 0 /\ 1+arg4 > 0 /\ arg4-arg6p4 == 0 /\ arg1p4 > 0 /\ -arg5p4+arg5 == 0 /\ -arg4+arg5 >= 0 /\ -arg4p4+arg4 == 0 /\ -1+arg2-arg2p4 == 0 /\ -arg6+arg4 == 0 /\ arg1p4-arg1 <= 0 /\ arg1 > 0), cost: 1
   4: f593_0_main_LE -> f593_0_main_LE : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, arg4'=arg4p5, arg5'=arg5p5, arg6'=arg6p5, (arg3 > 0 /\ 1+arg4 > 0 /\ 1-arg5p5+arg5 == 0 /\ arg1p5-arg1 <= 0 /\ arg4-arg6p5 == 0 /\ 1+arg5 > 0 /\ arg1p5 > 0 /\ -arg4+arg5 < 0 /\ -arg6+arg4 == 0 /\ -arg4p5+arg4 == 0 /\ -1-arg3p5-x22+arg2 == 0 /\ -1-x22+arg2-arg2p5 == 0 /\ arg1 > 0 /\ 1+x22 > 0), cost: 1
   5: __init -> f1_0_main_Load : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, arg4'=arg4p6, arg5'=arg5p6, arg6'=arg6p6, T, cost: 1

Simplified Transitions

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5 arg6
   6: f1_0_main_Load -> f593_0_main_LE : arg1'=arg1p1, arg2'=0, arg3'=0, arg4'=0, arg5'=0, arg6'=0, (-arg2 == 0 /\ arg1p1-arg1 <= 0 /\ arg1p1 > 0 /\ arg1 > 0), cost: 1
   7: f1_0_main_Load -> f593_0_main_LE : arg1'=arg1p2, arg2'=arg2p2, arg3'=0, arg4'=1, arg5'=1, arg6'=1, (arg1p2-arg1 <= 0 /\ 1+arg2p2 > 0 /\ 1-arg2 == 0 /\ arg1p2 > 0 /\ arg1 > 0), cost: 1
   8: f1_0_main_Load -> f593_0_main_LE : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, arg4'=arg2, arg5'=2, arg6'=arg2, (1+arg2p3 > 0 /\ arg1p3 > 0 /\ 1+arg3p3 > 0 /\ arg1p3-arg1 <= 0 /\ -1+arg2 > 0 /\ arg1 > 0), cost: 1
   9: f593_0_main_LE -> f593_0_main_LE : arg1'=arg1p4, arg2'=-1+arg2, arg3'=-1+arg2, arg6'=arg4, (arg3 > 0 /\ 1+arg4 > 0 /\ arg1p4 > 0 /\ -arg4+arg5 >= 0 /\ -arg6+arg4 == 0 /\ arg1p4-arg1 <= 0 /\ arg1 > 0), cost: 1
  10: f593_0_main_LE -> f593_0_main_LE : arg1'=arg1p5, arg2'=-1-x22+arg2, arg3'=-1-x22+arg2, arg5'=1+arg5, arg6'=arg4, (arg3 > 0 /\ 1+arg4 > 0 /\ arg1p5-arg1 <= 0 /\ 1+arg5 > 0 /\ arg1p5 > 0 /\ -arg4+arg5 < 0 /\ -arg6+arg4 == 0 /\ arg1 > 0 /\ 1+x22 > 0), cost: 1
   5: __init -> f1_0_main_Load : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, arg4'=arg4p6, arg5'=arg5p6, arg6'=arg6p6, T, cost: 1

	Propagated Equalities

	Original rule:
	f1_0_main_Load -> f593_0_main_LE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, arg5'=arg5p1, arg6'=arg6p1, (-arg5p1 == 0 /\ -arg2p1 == 0 /\ -arg4p1 == 0 /\ -arg2 == 0 /\ arg1p1-arg1 <= 0 /\ -arg6p1 == 0 /\ arg1p1 > 0 /\ -arg3p1 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f593_0_main_LE : arg1'=arg1p1, arg2'=0, arg3'=0, arg4'=0, arg5'=0, arg6'=0, (0 == 0 /\ -arg2 == 0 /\ arg1p1-arg1 <= 0 /\ arg1p1 > 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg5p1 = 0
		
		propagated equality arg2p1 = 0
		
		propagated equality arg4p1 = 0
		
		propagated equality arg6p1 = 0
		
		propagated equality arg3p1 = 0
		
	Simplified Guard

	Original rule:
	f1_0_main_Load -> f593_0_main_LE : arg1'=arg1p1, arg2'=0, arg3'=0, arg4'=0, arg5'=0, arg6'=0, (0 == 0 /\ -arg2 == 0 /\ arg1p1-arg1 <= 0 /\ arg1p1 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f593_0_main_LE : arg1'=arg1p1, arg2'=0, arg3'=0, arg4'=0, arg5'=0, arg6'=0, (-arg2 == 0 /\ arg1p1-arg1 <= 0 /\ arg1p1 > 0 /\ arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f1_0_main_Load -> f593_0_main_LE : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, arg4'=arg4p2, arg5'=arg5p2, arg6'=arg6p2, (arg1p2-arg1 <= 0 /\ 1+arg2p2 > 0 /\ 1-arg4p2 == 0 /\ 1-arg6p2 == 0 /\ -arg3p2 == 0 /\ 1-arg2 == 0 /\ arg1p2 > 0 /\ 1-arg5p2 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f593_0_main_LE : arg1'=arg1p2, arg2'=arg2p2, arg3'=0, arg4'=1, arg5'=1, arg6'=1, (0 == 0 /\ arg1p2-arg1 <= 0 /\ 1+arg2p2 > 0 /\ 1-arg2 == 0 /\ arg1p2 > 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg4p2 = 1
		
		propagated equality arg6p2 = 1
		
		propagated equality arg3p2 = 0
		
		propagated equality arg5p2 = 1
		
	Simplified Guard

	Original rule:
	f1_0_main_Load -> f593_0_main_LE : arg1'=arg1p2, arg2'=arg2p2, arg3'=0, arg4'=1, arg5'=1, arg6'=1, (0 == 0 /\ arg1p2-arg1 <= 0 /\ 1+arg2p2 > 0 /\ 1-arg2 == 0 /\ arg1p2 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f593_0_main_LE : arg1'=arg1p2, arg2'=arg2p2, arg3'=0, arg4'=1, arg5'=1, arg6'=1, (arg1p2-arg1 <= 0 /\ 1+arg2p2 > 0 /\ 1-arg2 == 0 /\ arg1p2 > 0 /\ arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f1_0_main_Load -> f593_0_main_LE : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, arg4'=arg4p3, arg5'=arg5p3, arg6'=arg6p3, (2-arg5p3 == 0 /\ 1+arg2p3 > 0 /\ arg1p3 > 0 /\ 1+arg3p3 > 0 /\ arg2-arg4p3 == 0 /\ arg1p3-arg1 <= 0 /\ -1+arg2 > 0 /\ arg2-arg6p3 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f593_0_main_LE : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, arg4'=arg2, arg5'=2, arg6'=arg2, (0 == 0 /\ 1+arg2p3 > 0 /\ arg1p3 > 0 /\ 1+arg3p3 > 0 /\ arg1p3-arg1 <= 0 /\ -1+arg2 > 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg5p3 = 2
		
		propagated equality arg4p3 = arg2
		
		propagated equality arg6p3 = arg2
		
	Simplified Guard

	Original rule:
	f1_0_main_Load -> f593_0_main_LE : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, arg4'=arg2, arg5'=2, arg6'=arg2, (0 == 0 /\ 1+arg2p3 > 0 /\ arg1p3 > 0 /\ 1+arg3p3 > 0 /\ arg1p3-arg1 <= 0 /\ -1+arg2 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f593_0_main_LE : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, arg4'=arg2, arg5'=2, arg6'=arg2, (1+arg2p3 > 0 /\ arg1p3 > 0 /\ 1+arg3p3 > 0 /\ arg1p3-arg1 <= 0 /\ -1+arg2 > 0 /\ arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f593_0_main_LE -> f593_0_main_LE : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, arg4'=arg4p4, arg5'=arg5p4, arg6'=arg6p4, (-1+arg2-arg3p4 == 0 /\ arg3 > 0 /\ 1+arg4 > 0 /\ arg4-arg6p4 == 0 /\ arg1p4 > 0 /\ -arg5p4+arg5 == 0 /\ -arg4+arg5 >= 0 /\ -arg4p4+arg4 == 0 /\ -1+arg2-arg2p4 == 0 /\ -arg6+arg4 == 0 /\ arg1p4-arg1 <= 0 /\ arg1 > 0), cost: 1
	New rule:
	f593_0_main_LE -> f593_0_main_LE : arg1'=arg1p4, arg2'=-1+arg2, arg3'=-1+arg2, arg4'=arg4, arg5'=arg5, arg6'=arg4, (0 == 0 /\ arg3 > 0 /\ 1+arg4 > 0 /\ arg1p4 > 0 /\ -arg4+arg5 >= 0 /\ -arg6+arg4 == 0 /\ arg1p4-arg1 <= 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg3p4 = -1+arg2
		
		propagated equality arg6p4 = arg4
		
		propagated equality arg5p4 = arg5
		
		propagated equality arg4p4 = arg4
		
		propagated equality arg2p4 = -1+arg2
		
	Simplified Guard

	Original rule:
	f593_0_main_LE -> f593_0_main_LE : arg1'=arg1p4, arg2'=-1+arg2, arg3'=-1+arg2, arg4'=arg4, arg5'=arg5, arg6'=arg4, (0 == 0 /\ arg3 > 0 /\ 1+arg4 > 0 /\ arg1p4 > 0 /\ -arg4+arg5 >= 0 /\ -arg6+arg4 == 0 /\ arg1p4-arg1 <= 0 /\ arg1 > 0), cost: 1
	New rule:
	f593_0_main_LE -> f593_0_main_LE : arg1'=arg1p4, arg2'=-1+arg2, arg3'=-1+arg2, arg4'=arg4, arg5'=arg5, arg6'=arg4, (arg3 > 0 /\ 1+arg4 > 0 /\ arg1p4 > 0 /\ -arg4+arg5 >= 0 /\ -arg6+arg4 == 0 /\ arg1p4-arg1 <= 0 /\ arg1 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f593_0_main_LE -> f593_0_main_LE : arg1'=arg1p4, arg2'=-1+arg2, arg3'=-1+arg2, arg4'=arg4, arg5'=arg5, arg6'=arg4, (arg3 > 0 /\ 1+arg4 > 0 /\ arg1p4 > 0 /\ -arg4+arg5 >= 0 /\ -arg6+arg4 == 0 /\ arg1p4-arg1 <= 0 /\ arg1 > 0), cost: 1
	New rule:
	f593_0_main_LE -> f593_0_main_LE : arg1'=arg1p4, arg2'=-1+arg2, arg3'=-1+arg2, arg6'=arg4, (arg3 > 0 /\ 1+arg4 > 0 /\ arg1p4 > 0 /\ -arg4+arg5 >= 0 /\ -arg6+arg4 == 0 /\ arg1p4-arg1 <= 0 /\ arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f593_0_main_LE -> f593_0_main_LE : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, arg4'=arg4p5, arg5'=arg5p5, arg6'=arg6p5, (arg3 > 0 /\ 1+arg4 > 0 /\ 1-arg5p5+arg5 == 0 /\ arg1p5-arg1 <= 0 /\ arg4-arg6p5 == 0 /\ 1+arg5 > 0 /\ arg1p5 > 0 /\ -arg4+arg5 < 0 /\ -arg6+arg4 == 0 /\ -arg4p5+arg4 == 0 /\ -1-arg3p5-x22+arg2 == 0 /\ -1-x22+arg2-arg2p5 == 0 /\ arg1 > 0 /\ 1+x22 > 0), cost: 1
	New rule:
	f593_0_main_LE -> f593_0_main_LE : arg1'=arg1p5, arg2'=-1-x22+arg2, arg3'=-1-x22+arg2, arg4'=arg4, arg5'=1+arg5, arg6'=arg4, (0 == 0 /\ arg3 > 0 /\ 1+arg4 > 0 /\ arg1p5-arg1 <= 0 /\ 1+arg5 > 0 /\ arg1p5 > 0 /\ -arg4+arg5 < 0 /\ -arg6+arg4 == 0 /\ arg1 > 0 /\ 1+x22 > 0), cost: 1
	
		propagated equality arg5p5 = 1+arg5
		
		propagated equality arg6p5 = arg4
		
		propagated equality arg4p5 = arg4
		
		propagated equality arg3p5 = -1-x22+arg2
		
		propagated equality arg2p5 = -1-x22+arg2
		
	Simplified Guard

	Original rule:
	f593_0_main_LE -> f593_0_main_LE : arg1'=arg1p5, arg2'=-1-x22+arg2, arg3'=-1-x22+arg2, arg4'=arg4, arg5'=1+arg5, arg6'=arg4, (0 == 0 /\ arg3 > 0 /\ 1+arg4 > 0 /\ arg1p5-arg1 <= 0 /\ 1+arg5 > 0 /\ arg1p5 > 0 /\ -arg4+arg5 < 0 /\ -arg6+arg4 == 0 /\ arg1 > 0 /\ 1+x22 > 0), cost: 1
	New rule:
	f593_0_main_LE -> f593_0_main_LE : arg1'=arg1p5, arg2'=-1-x22+arg2, arg3'=-1-x22+arg2, arg4'=arg4, arg5'=1+arg5, arg6'=arg4, (arg3 > 0 /\ 1+arg4 > 0 /\ arg1p5-arg1 <= 0 /\ 1+arg5 > 0 /\ arg1p5 > 0 /\ -arg4+arg5 < 0 /\ -arg6+arg4 == 0 /\ arg1 > 0 /\ 1+x22 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f593_0_main_LE -> f593_0_main_LE : arg1'=arg1p5, arg2'=-1-x22+arg2, arg3'=-1-x22+arg2, arg4'=arg4, arg5'=1+arg5, arg6'=arg4, (arg3 > 0 /\ 1+arg4 > 0 /\ arg1p5-arg1 <= 0 /\ 1+arg5 > 0 /\ arg1p5 > 0 /\ -arg4+arg5 < 0 /\ -arg6+arg4 == 0 /\ arg1 > 0 /\ 1+x22 > 0), cost: 1
	New rule:
	f593_0_main_LE -> f593_0_main_LE : arg1'=arg1p5, arg2'=-1-x22+arg2, arg3'=-1-x22+arg2, arg5'=1+arg5, arg6'=arg4, (arg3 > 0 /\ 1+arg4 > 0 /\ arg1p5-arg1 <= 0 /\ 1+arg5 > 0 /\ arg1p5 > 0 /\ -arg4+arg5 < 0 /\ -arg6+arg4 == 0 /\ arg1 > 0 /\ 1+x22 > 0), cost: 1

Step with 5

	Trace

	5[T]
	
	Blocked

	[{}, {}]

Step with 6

	Trace

	5[T], 6[(-arg2 == 0 /\ arg1p1-arg1 <= 0 /\ arg1p1 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {}]

Backtrack

	Trace

	5[T]
	
	Blocked

	[{}, {6[T]}]

Step with 7

	Trace

	5[T], 7[(arg1p2-arg1 <= 0 /\ 1+arg2p2 > 0 /\ 1-arg2 == 0 /\ arg1p2 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {6[T]}, {}]

Backtrack

	Trace

	5[T]
	
	Blocked

	[{}, {6[T], 7[T]}]

Step with 8

	Trace

	5[T], 8[(1+arg2p3 > 0 /\ arg1p3 > 0 /\ 1+arg3p3 > 0 /\ arg1p3-arg1 <= 0 /\ -1+arg2 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {6[T], 7[T]}, {}]

Step with 9

	Trace

	5[T], 8[(1+arg2p3 > 0 /\ arg1p3 > 0 /\ 1+arg3p3 > 0 /\ arg1p3-arg1 <= 0 /\ -1+arg2 > 0 /\ arg1 > 0)], 9[(arg3 > 0 /\ 1+arg4 > 0 /\ arg1p4 > 0 /\ -arg4+arg5 >= 0 /\ -arg6+arg4 == 0 /\ arg1p4-arg1 <= 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {6[T], 7[T]}, {}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5 arg6
   6: f1_0_main_Load -> f593_0_main_LE : arg1'=arg1p1, arg2'=0, arg3'=0, arg4'=0, arg5'=0, arg6'=0, (-arg2 == 0 /\ arg1p1-arg1 <= 0 /\ arg1p1 > 0 /\ arg1 > 0), cost: 1
   7: f1_0_main_Load -> f593_0_main_LE : arg1'=arg1p2, arg2'=arg2p2, arg3'=0, arg4'=1, arg5'=1, arg6'=1, (arg1p2-arg1 <= 0 /\ 1+arg2p2 > 0 /\ 1-arg2 == 0 /\ arg1p2 > 0 /\ arg1 > 0), cost: 1
   8: f1_0_main_Load -> f593_0_main_LE : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, arg4'=arg2, arg5'=2, arg6'=arg2, (1+arg2p3 > 0 /\ arg1p3 > 0 /\ 1+arg3p3 > 0 /\ arg1p3-arg1 <= 0 /\ -1+arg2 > 0 /\ arg1 > 0), cost: 1
   9: f593_0_main_LE -> f593_0_main_LE : arg1'=arg1p4, arg2'=-1+arg2, arg3'=-1+arg2, arg6'=arg4, (arg3 > 0 /\ 1+arg4 > 0 /\ arg1p4 > 0 /\ -arg4+arg5 >= 0 /\ -arg6+arg4 == 0 /\ arg1p4-arg1 <= 0 /\ arg1 > 0), cost: 1
  10: f593_0_main_LE -> f593_0_main_LE : arg1'=arg1p5, arg2'=-1-x22+arg2, arg3'=-1-x22+arg2, arg5'=1+arg5, arg6'=arg4, (arg3 > 0 /\ 1+arg4 > 0 /\ arg1p5-arg1 <= 0 /\ 1+arg5 > 0 /\ arg1p5 > 0 /\ -arg4+arg5 < 0 /\ -arg6+arg4 == 0 /\ arg1 > 0 /\ 1+x22 > 0), cost: 1
  11: f593_0_main_LE -> f593_0_main_LE : arg1'=arg1p4, arg2'=arg2-n, arg3'=arg2-n, arg6'=arg4, (arg3 > 0 /\ 1+arg4 > 0 /\ arg1p4 > 0 /\ -arg4+arg5 >= 0 /\ -arg6+arg4 >= 0 /\ 1+arg2-n > 0 /\ arg6-arg4 >= 0 /\ -arg1p4+arg1 >= 0 /\ -1+n >= 0), cost: 1
   5: __init -> f1_0_main_Load : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, arg4'=arg4p6, arg5'=arg5p6, arg6'=arg6p6, T, cost: 1

	Loop Acceleration

	Original rule:
	f593_0_main_LE -> f593_0_main_LE : arg1'=arg1p4, arg2'=-1+arg2, arg3'=-1+arg2, arg6'=arg4, (arg3 > 0 /\ 1+arg4 > 0 /\ arg1p4 > 0 /\ -arg4+arg5 >= 0 /\ -arg6+arg4 == 0 /\ arg1p4-arg1 <= 0 /\ arg1 > 0), cost: 1
	New rule:
	f593_0_main_LE -> f593_0_main_LE : arg1'=arg1p4, arg2'=arg2-n, arg3'=arg2-n, arg6'=arg4, (arg3 > 0 /\ 1+arg4 > 0 /\ arg1p4 > 0 /\ -arg4+arg5 >= 0 /\ -arg6+arg4 >= 0 /\ 1+arg2-n > 0 /\ arg6-arg4 >= 0 /\ -arg1p4+arg1 >= 0 /\ -1+n >= 0), cost: 1

		arg3 > 0 [0]: eventual decrease yields (arg3 > 0 /\ 1+arg2-n > 0)
		
		1+arg4 > 0 [0]: monotonic increase yields 1+arg4 > 0
		
		arg1p4 > 0 [0]: monotonic increase yields arg1p4 > 0
		
		-arg4+arg5 >= 0 [0]: monotonic increase yields -arg4+arg5 >= 0
		
		-arg6+arg4 >= 0 [0]: monotonic increase yields -arg6+arg4 >= 0
		
		arg6-arg4 >= 0 [0]: monotonic increase yields arg6-arg4 >= 0
		
		-arg1p4+arg1 >= 0 [0]: monotonic increase yields -arg1p4+arg1 >= 0
		
		arg1 > 0 [0]: montonic decrease yields arg1p4 > 0, dependencies: -arg1p4+arg1 >= 0
		
		arg1 > 0 [1]: eventual increase yields (-arg1p4+arg1 <= 0 /\ arg1 > 0)
		
		Replacement map: {arg3 > 0 -> (arg3 > 0 /\ 1+arg2-n > 0), 1+arg4 > 0 -> 1+arg4 > 0, arg1p4 > 0 -> arg1p4 > 0, -arg4+arg5 >= 0 -> -arg4+arg5 >= 0, -arg6+arg4 >= 0 -> -arg6+arg4 >= 0, arg6-arg4 >= 0 -> arg6-arg4 >= 0, -arg1p4+arg1 >= 0 -> -arg1p4+arg1 >= 0, arg1 > 0 -> arg1p4 > 0}

	Trace

	5[T], 8[(1+arg2p3 > 0 /\ arg1p3 > 0 /\ 1+arg3p3 > 0 /\ arg1p3-arg1 <= 0 /\ -1+arg2 > 0 /\ arg1 > 0)], 11[(arg3 > 0 /\ 1+arg4 > 0 /\ arg1p4 > 0 /\ -arg4+arg5 >= 0 /\ -arg6+arg4 >= 0 /\ 1+arg2-n > 0 /\ arg6-arg4 >= 0 /\ -arg1p4+arg1 >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {6[T], 7[T]}, {}, {9[T], 11[T]}]

Backtrack

	Trace

	5[T], 8[(1+arg2p3 > 0 /\ arg1p3 > 0 /\ 1+arg3p3 > 0 /\ arg1p3-arg1 <= 0 /\ -1+arg2 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {6[T], 7[T]}, {11[T]}]

Step with 9

	Trace

	5[T], 8[(1+arg2p3 > 0 /\ arg1p3 > 0 /\ 1+arg3p3 > 0 /\ arg1p3-arg1 <= 0 /\ -1+arg2 > 0 /\ arg1 > 0)], 9[(arg3 > 0 /\ 1+arg4 > 0 /\ arg1p4 > 0 /\ -arg4+arg5 >= 0 /\ -arg6+arg4 == 0 /\ arg1p4-arg1 <= 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {6[T], 7[T]}, {11[T]}, {}]

Covered

	Trace

	5[T], 8[(1+arg2p3 > 0 /\ arg1p3 > 0 /\ 1+arg3p3 > 0 /\ arg1p3-arg1 <= 0 /\ -1+arg2 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {6[T], 7[T]}, {9[T], 11[T]}]

Step with 10

	Trace

	5[T], 8[(1+arg2p3 > 0 /\ arg1p3 > 0 /\ 1+arg3p3 > 0 /\ arg1p3-arg1 <= 0 /\ -1+arg2 > 0 /\ arg1 > 0)], 10[(arg3 > 0 /\ 1+arg4 > 0 /\ arg1p5-arg1 <= 0 /\ 1+arg5 > 0 /\ arg1p5 > 0 /\ -arg4+arg5 < 0 /\ -arg6+arg4 == 0 /\ arg1 > 0 /\ 1+x22 > 0)]
	
	Blocked

	[{}, {6[T], 7[T]}, {9[T], 11[T]}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5 arg6
   6: f1_0_main_Load -> f593_0_main_LE : arg1'=arg1p1, arg2'=0, arg3'=0, arg4'=0, arg5'=0, arg6'=0, (-arg2 == 0 /\ arg1p1-arg1 <= 0 /\ arg1p1 > 0 /\ arg1 > 0), cost: 1
   7: f1_0_main_Load -> f593_0_main_LE : arg1'=arg1p2, arg2'=arg2p2, arg3'=0, arg4'=1, arg5'=1, arg6'=1, (arg1p2-arg1 <= 0 /\ 1+arg2p2 > 0 /\ 1-arg2 == 0 /\ arg1p2 > 0 /\ arg1 > 0), cost: 1
   8: f1_0_main_Load -> f593_0_main_LE : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, arg4'=arg2, arg5'=2, arg6'=arg2, (1+arg2p3 > 0 /\ arg1p3 > 0 /\ 1+arg3p3 > 0 /\ arg1p3-arg1 <= 0 /\ -1+arg2 > 0 /\ arg1 > 0), cost: 1
   9: f593_0_main_LE -> f593_0_main_LE : arg1'=arg1p4, arg2'=-1+arg2, arg3'=-1+arg2, arg6'=arg4, (arg3 > 0 /\ 1+arg4 > 0 /\ arg1p4 > 0 /\ -arg4+arg5 >= 0 /\ -arg6+arg4 == 0 /\ arg1p4-arg1 <= 0 /\ arg1 > 0), cost: 1
  10: f593_0_main_LE -> f593_0_main_LE : arg1'=arg1p5, arg2'=-1-x22+arg2, arg3'=-1-x22+arg2, arg5'=1+arg5, arg6'=arg4, (arg3 > 0 /\ 1+arg4 > 0 /\ arg1p5-arg1 <= 0 /\ 1+arg5 > 0 /\ arg1p5 > 0 /\ -arg4+arg5 < 0 /\ -arg6+arg4 == 0 /\ arg1 > 0 /\ 1+x22 > 0), cost: 1
  11: f593_0_main_LE -> f593_0_main_LE : arg1'=arg1p4, arg2'=arg2-n, arg3'=arg2-n, arg6'=arg4, (arg3 > 0 /\ 1+arg4 > 0 /\ arg1p4 > 0 /\ -arg4+arg5 >= 0 /\ -arg6+arg4 >= 0 /\ 1+arg2-n > 0 /\ arg6-arg4 >= 0 /\ -arg1p4+arg1 >= 0 /\ -1+n >= 0), cost: 1
  12: f593_0_main_LE -> f593_0_main_LE : arg1'=arg1p5, arg2'=-x22*n2+arg2-n2, arg3'=-x22+arg2-n2-x22*(-1+n2), arg5'=arg5+n2, arg6'=arg4, (1+arg4-arg5-n2 > 0 /\ arg3 > 0 /\ 1+arg4 > 0 /\ 1+arg5 > 0 /\ 1-x22*(-2+n2)-x22+arg2-n2 > 0 /\ arg1p5 > 0 /\ -arg1p5+arg1 >= 0 /\ -arg6+arg4 >= 0 /\ -1+n2 >= 0 /\ arg6-arg4 >= 0 /\ 1+x22 > 0), cost: 1
   5: __init -> f1_0_main_Load : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, arg4'=arg4p6, arg5'=arg5p6, arg6'=arg6p6, T, cost: 1

	Loop Acceleration

	Original rule:
	f593_0_main_LE -> f593_0_main_LE : arg1'=arg1p5, arg2'=-1-x22+arg2, arg3'=-1-x22+arg2, arg5'=1+arg5, arg6'=arg4, (arg3 > 0 /\ 1+arg4 > 0 /\ arg1p5-arg1 <= 0 /\ 1+arg5 > 0 /\ arg1p5 > 0 /\ -arg4+arg5 < 0 /\ -arg6+arg4 == 0 /\ arg1 > 0 /\ 1+x22 > 0), cost: 1
	New rule:
	f593_0_main_LE -> f593_0_main_LE : arg1'=arg1p5, arg2'=-x22*n2+arg2-n2, arg3'=-x22+arg2-n2-x22*(-1+n2), arg5'=arg5+n2, arg6'=arg4, (1+arg4-arg5-n2 > 0 /\ arg3 > 0 /\ 1+arg4 > 0 /\ 1+arg5 > 0 /\ 1-x22*(-2+n2)-x22+arg2-n2 > 0 /\ arg1p5 > 0 /\ -arg1p5+arg1 >= 0 /\ -arg6+arg4 >= 0 /\ -1+n2 >= 0 /\ arg6-arg4 >= 0 /\ 1+x22 > 0), cost: 1

		arg3 > 0 [0]: eventual decrease yields (arg3 > 0 /\ 1-x22*(-2+n2)-x22+arg2-n2 > 0), dependencies: 1+x22 > 0
		
		1+arg4 > 0 [0]: monotonic increase yields 1+arg4 > 0
		
		arg4-arg5 > 0 [0]: montonic decrease yields 1+arg4-arg5-n2 > 0
		
		arg4-arg5 > 0 [1]: eventual increase yields (1 <= 0 /\ arg4-arg5 > 0)
		
		1+arg5 > 0 [0]: monotonic increase yields 1+arg5 > 0
		
		arg1p5 > 0 [0]: monotonic increase yields arg1p5 > 0
		
		-arg1p5+arg1 >= 0 [0]: monotonic increase yields -arg1p5+arg1 >= 0
		
		-arg6+arg4 >= 0 [0]: monotonic increase yields -arg6+arg4 >= 0
		
		arg6-arg4 >= 0 [0]: monotonic increase yields arg6-arg4 >= 0
		
		arg1 > 0 [0]: montonic decrease yields arg1p5 > 0, dependencies: -arg1p5+arg1 >= 0
		
		arg1 > 0 [1]: eventual increase yields (-arg1p5+arg1 <= 0 /\ arg1 > 0)
		
		1+x22 > 0 [0]: monotonic increase yields 1+x22 > 0
		
		Replacement map: {arg3 > 0 -> (arg3 > 0 /\ 1-x22*(-2+n2)-x22+arg2-n2 > 0), 1+arg4 > 0 -> 1+arg4 > 0, arg4-arg5 > 0 -> 1+arg4-arg5-n2 > 0, 1+arg5 > 0 -> 1+arg5 > 0, arg1p5 > 0 -> arg1p5 > 0, -arg1p5+arg1 >= 0 -> -arg1p5+arg1 >= 0, -arg6+arg4 >= 0 -> -arg6+arg4 >= 0, arg6-arg4 >= 0 -> arg6-arg4 >= 0, arg1 > 0 -> arg1p5 > 0, 1+x22 > 0 -> 1+x22 > 0}

	Trace

	5[T], 8[(1+arg2p3 > 0 /\ arg1p3 > 0 /\ 1+arg3p3 > 0 /\ arg1p3-arg1 <= 0 /\ -1+arg2 > 0 /\ arg1 > 0)], 12[(1+arg4-arg5-n2 > 0 /\ arg3 > 0 /\ 1+arg4 > 0 /\ 1+arg5 > 0 /\ 1-x22*(-2+n2)-x22+arg2-n2 > 0 /\ arg1p5 > 0 /\ -arg1p5+arg1 >= 0 /\ -arg6+arg4 >= 0 /\ -1+n2 >= 0 /\ arg6-arg4 >= 0 /\ 1+x22 > 0)]
	
	Blocked

	[{}, {6[T], 7[T]}, {9[T], 11[T]}, {10[T], 12[T]}]

Step with 9

	Trace

	5[T], 8[(1+arg2p3 > 0 /\ arg1p3 > 0 /\ 1+arg3p3 > 0 /\ arg1p3-arg1 <= 0 /\ -1+arg2 > 0 /\ arg1 > 0)], 12[(1+arg4-arg5-n2 > 0 /\ arg3 > 0 /\ 1+arg4 > 0 /\ 1+arg5 > 0 /\ 1-x22*(-2+n2)-x22+arg2-n2 > 0 /\ arg1p5 > 0 /\ -arg1p5+arg1 >= 0 /\ -arg6+arg4 >= 0 /\ -1+n2 >= 0 /\ arg6-arg4 >= 0 /\ 1+x22 > 0)], 9[(arg3 > 0 /\ 1+arg4 > 0 /\ arg1p4 > 0 /\ -arg4+arg5 >= 0 /\ -arg6+arg4 == 0 /\ arg1p4-arg1 <= 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {6[T], 7[T]}, {9[T], 11[T]}, {10[T], 12[T]}, {}]

Covered

	Trace

	5[T], 8[(1+arg2p3 > 0 /\ arg1p3 > 0 /\ 1+arg3p3 > 0 /\ arg1p3-arg1 <= 0 /\ -1+arg2 > 0 /\ arg1 > 0)], 12[(1+arg4-arg5-n2 > 0 /\ arg3 > 0 /\ 1+arg4 > 0 /\ 1+arg5 > 0 /\ 1-x22*(-2+n2)-x22+arg2-n2 > 0 /\ arg1p5 > 0 /\ -arg1p5+arg1 >= 0 /\ -arg6+arg4 >= 0 /\ -1+n2 >= 0 /\ arg6-arg4 >= 0 /\ 1+x22 > 0)]
	
	Blocked

	[{}, {6[T], 7[T]}, {9[T], 11[T]}, {9[T], 10[T], 12[T]}]

Step with 11

	Trace

	5[T], 8[(1+arg2p3 > 0 /\ arg1p3 > 0 /\ 1+arg3p3 > 0 /\ arg1p3-arg1 <= 0 /\ -1+arg2 > 0 /\ arg1 > 0)], 12[(1+arg4-arg5-n2 > 0 /\ arg3 > 0 /\ 1+arg4 > 0 /\ 1+arg5 > 0 /\ 1-x22*(-2+n2)-x22+arg2-n2 > 0 /\ arg1p5 > 0 /\ -arg1p5+arg1 >= 0 /\ -arg6+arg4 >= 0 /\ -1+n2 >= 0 /\ arg6-arg4 >= 0 /\ 1+x22 > 0)], 11[(arg3 > 0 /\ 1+arg4 > 0 /\ arg1p4 > 0 /\ -arg4+arg5 >= 0 /\ -arg6+arg4 >= 0 /\ 1+arg2-n > 0 /\ arg6-arg4 >= 0 /\ -arg1p4+arg1 >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {6[T], 7[T]}, {9[T], 11[T]}, {9[T], 10[T], 12[T]}, {11[T]}]

Acceleration Failed

marked recursive suffix as redundant

Step with 9

	Trace

	5[T], 8[(1+arg2p3 > 0 /\ arg1p3 > 0 /\ 1+arg3p3 > 0 /\ arg1p3-arg1 <= 0 /\ -1+arg2 > 0 /\ arg1 > 0)], 12[(1+arg4-arg5-n2 > 0 /\ arg3 > 0 /\ 1+arg4 > 0 /\ 1+arg5 > 0 /\ 1-x22*(-2+n2)-x22+arg2-n2 > 0 /\ arg1p5 > 0 /\ -arg1p5+arg1 >= 0 /\ -arg6+arg4 >= 0 /\ -1+n2 >= 0 /\ arg6-arg4 >= 0 /\ 1+x22 > 0)], 11[(arg3 > 0 /\ 1+arg4 > 0 /\ arg1p4 > 0 /\ -arg4+arg5 >= 0 /\ -arg6+arg4 >= 0 /\ 1+arg2-n > 0 /\ arg6-arg4 >= 0 /\ -arg1p4+arg1 >= 0 /\ -1+n >= 0)], 9[(arg3 > 0 /\ 1+arg4 > 0 /\ arg1p4 > 0 /\ -arg4+arg5 >= 0 /\ -arg6+arg4 == 0 /\ arg1p4-arg1 <= 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {6[T], 7[T]}, {9[T], 11[T]}, {9[T], 10[T], 12[T]}, {11[T], 12[T]}, {}]

Covered

	Trace

	5[T], 8[(1+arg2p3 > 0 /\ arg1p3 > 0 /\ 1+arg3p3 > 0 /\ arg1p3-arg1 <= 0 /\ -1+arg2 > 0 /\ arg1 > 0)], 12[(1+arg4-arg5-n2 > 0 /\ arg3 > 0 /\ 1+arg4 > 0 /\ 1+arg5 > 0 /\ 1-x22*(-2+n2)-x22+arg2-n2 > 0 /\ arg1p5 > 0 /\ -arg1p5+arg1 >= 0 /\ -arg6+arg4 >= 0 /\ -1+n2 >= 0 /\ arg6-arg4 >= 0 /\ 1+x22 > 0)], 11[(arg3 > 0 /\ 1+arg4 > 0 /\ arg1p4 > 0 /\ -arg4+arg5 >= 0 /\ -arg6+arg4 >= 0 /\ 1+arg2-n > 0 /\ arg6-arg4 >= 0 /\ -arg1p4+arg1 >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {6[T], 7[T]}, {9[T], 11[T]}, {9[T], 10[T], 12[T]}, {9[T], 11[T], 12[T]}]

Backtrack

	Trace

	5[T], 8[(1+arg2p3 > 0 /\ arg1p3 > 0 /\ 1+arg3p3 > 0 /\ arg1p3-arg1 <= 0 /\ -1+arg2 > 0 /\ arg1 > 0)], 12[(1+arg4-arg5-n2 > 0 /\ arg3 > 0 /\ 1+arg4 > 0 /\ 1+arg5 > 0 /\ 1-x22*(-2+n2)-x22+arg2-n2 > 0 /\ arg1p5 > 0 /\ -arg1p5+arg1 >= 0 /\ -arg6+arg4 >= 0 /\ -1+n2 >= 0 /\ arg6-arg4 >= 0 /\ 1+x22 > 0)]
	
	Blocked

	[{}, {6[T], 7[T]}, {9[T], 11[T]}, {9[T], 10[T], 11[T], 12[T]}]

Backtrack

	Trace

	5[T], 8[(1+arg2p3 > 0 /\ arg1p3 > 0 /\ 1+arg3p3 > 0 /\ arg1p3-arg1 <= 0 /\ -1+arg2 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {6[T], 7[T]}, {9[T], 11[T], 12[T]}]

Step with 10

	Trace

	5[T], 8[(1+arg2p3 > 0 /\ arg1p3 > 0 /\ 1+arg3p3 > 0 /\ arg1p3-arg1 <= 0 /\ -1+arg2 > 0 /\ arg1 > 0)], 10[(arg3 > 0 /\ 1+arg4 > 0 /\ arg1p5-arg1 <= 0 /\ 1+arg5 > 0 /\ arg1p5 > 0 /\ -arg4+arg5 < 0 /\ -arg6+arg4 == 0 /\ arg1 > 0 /\ 1+x22 > 0)]
	
	Blocked

	[{}, {6[T], 7[T]}, {9[T], 11[T], 12[T]}, {}]

Covered

	Trace

	5[T], 8[(1+arg2p3 > 0 /\ arg1p3 > 0 /\ 1+arg3p3 > 0 /\ arg1p3-arg1 <= 0 /\ -1+arg2 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {6[T], 7[T]}, {9[T], 10[T], 11[T], 12[T]}]

Backtrack

	Trace

	5[T]
	
	Blocked

	[{}, {6[T], 7[T], 8[T]}]

Backtrack

	Trace

	Blocked

	[{5[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
