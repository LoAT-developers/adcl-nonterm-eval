NO

Initial ITS

Start location: [1]
Program variables: i k
   0: [1] -> [2] : k'=nondet, T, cost: 1
   1: [2] -> [3] : i'=nondet1, T, cost: 1
   2: [3] -> [5] : k >= 0, cost: 1
   4: [3] -> [6] : k < 0, cost: 1
   7: [4] -> [8] : i >= 0, cost: 1
  10: [4] -> [10] : i < 0, cost: 1
   3: [5] -> [4] : T, cost: 1
   5: [6] -> [7] : i'=-1, T, cost: 1
   6: [7] -> [4] : T, cost: 1
   8: [8] -> [9] : i'=nondet2, T, cost: 1
   9: [9] -> [4] : T, cost: 1
  11: [10] -> [11] : i'=2, T, cost: 1

Chained Linear Paths

Start location: [1]
Program variables: i k
  12: [1] -> [3] : i'=nondet1, k'=nondet, T, cost: 1
  13: [3] -> [4] : k >= 0, cost: 1
  15: [3] -> [4] : i'=-1, k < 0, cost: 1
  17: [4] -> [11] : i'=2, i < 0, cost: 1
  18: [4] -> [4] : i'=nondet2, i >= 0, cost: 1

	Eliminating location [2] by chaining:

	Applied chaining

	First rule:
	[1] -> [2] : k'=nondet, T, cost: 1
	Second rule:
	[2] -> [3] : i'=nondet1, T, cost: 1
	New rule:
	[1] -> [3] : i'=nondet1, k'=nondet, T, cost: 1
	
	Applied deletion

	Removed the following rules: 0 1
	
	Eliminating location [5] by chaining:

	Applied chaining

	First rule:
	[3] -> [5] : k >= 0, cost: 1
	Second rule:
	[5] -> [4] : T, cost: 1
	New rule:
	[3] -> [4] : k >= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 2 3
	
	Eliminating location [6] by chaining:

	Applied chaining

	First rule:
	[3] -> [6] : k < 0, cost: 1
	Second rule:
	[6] -> [7] : i'=-1, T, cost: 1
	New rule:
	[3] -> [7] : i'=-1, k < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 4 5
	
	Eliminating location [7] by chaining:

	Applied chaining

	First rule:
	[3] -> [7] : i'=-1, k < 0, cost: 1
	Second rule:
	[7] -> [4] : T, cost: 1
	New rule:
	[3] -> [4] : i'=-1, k < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 6 14
	
	Eliminating location [8] by chaining:

	Applied chaining

	First rule:
	[4] -> [8] : i >= 0, cost: 1
	Second rule:
	[8] -> [9] : i'=nondet2, T, cost: 1
	New rule:
	[4] -> [9] : i'=nondet2, i >= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 7 8
	
	Eliminating location [10] by chaining:

	Applied chaining

	First rule:
	[4] -> [10] : i < 0, cost: 1
	Second rule:
	[10] -> [11] : i'=2, T, cost: 1
	New rule:
	[4] -> [11] : i'=2, i < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 10 11
	
	Eliminating location [9] by chaining:

	Applied chaining

	First rule:
	[4] -> [9] : i'=nondet2, i >= 0, cost: 1
	Second rule:
	[9] -> [4] : T, cost: 1
	New rule:
	[4] -> [4] : i'=nondet2, i >= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 9 16

Step with 12

	Trace

	12[T]
	
	Blocked

	[{}, {}]

Step with 13

	Trace

	12[T], 13[(k >= 0)]
	
	Blocked

	[{}, {}, {}]

Step with 17

	Trace

	12[T], 13[(k >= 0)], 17[(i < 0)]
	
	Blocked

	[{}, {}, {}, {}]

Backtrack

	Trace

	12[T], 13[(k >= 0)]
	
	Blocked

	[{}, {}, {17[T]}]

Step with 18

	Trace

	12[T], 13[(k >= 0)], 18[(i >= 0)]
	
	Blocked

	[{}, {}, {17[T]}, {}]

Nonterm

Start location: [1]
Program variables: i k
  12: [1] -> [3] : i'=nondet1, k'=nondet, T, cost: 1
  13: [3] -> [4] : k >= 0, cost: 1
  15: [3] -> [4] : i'=-1, k < 0, cost: 1
  17: [4] -> [11] : i'=2, i < 0, cost: 1
  18: [4] -> [4] : i'=nondet2, i >= 0, cost: 1
  19: [4] -> LoAT_sink : (-nondet2+i <= 0 /\ i >= 0), cost: NONTERM

	Certificate of Non-Termination

	Original rule:
	[4] -> [4] : i'=nondet2, (i >= 0), cost: 1
	New rule:
	[4] -> LoAT_sink : (-nondet2+i <= 0 /\ i >= 0), cost: NONTERM

		i >= 0 [0]: eventual decrease yields (nondet2 >= 0 /\ i >= 0)
		
		i >= 0 [1]: eventual increase yields (-nondet2+i <= 0 /\ i >= 0)
		
		Replacement map: {i >= 0 -> (-nondet2+i <= 0 /\ i >= 0)}

Step with 19

	Trace

	12[T], 13[(k >= 0)], 19[(-nondet2+i <= 0 /\ i >= 0)]
	
	Blocked

	[{}, {}, {17[T]}, {19[T]}]

Refute

	Counterexample

	[ i=0 k=0 ] 12 [ i=0 k=0 ] 13 [ i=i k=k ] 19
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
