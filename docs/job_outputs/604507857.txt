unknown

Initial ITS

Start location: __init
Program variables: arg1
   0: f1_0_main_ConstantStackPush -> f46_0_main_GE : arg1'=arg1p1, -arg1p1 == 0, cost: 1
   1: f46_0_main_GE -> f46_0_main_GE : arg1'=arg1p2, (1-arg1p2+arg1 == 0 /\ -100+arg1 < 0), cost: 1
   2: f46_0_main_GE -> f74_0_main_GE : arg1'=arg1p3, (-99+arg1 > 0 /\ 5-arg1p3 == 0), cost: 1
   3: f74_0_main_GE -> f74_0_main_GE : arg1'=arg1p4, (-21+arg1 < 0 /\ 3-arg1p4+arg1 == 0), cost: 1
   4: __init -> f1_0_main_ConstantStackPush : arg1'=arg1p5, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1
   1: f46_0_main_GE -> f46_0_main_GE : arg1'=arg1p2, (1-arg1p2+arg1 == 0 /\ -100+arg1 < 0), cost: 1
   2: f46_0_main_GE -> f74_0_main_GE : arg1'=arg1p3, (-99+arg1 > 0 /\ 5-arg1p3 == 0), cost: 1
   3: f74_0_main_GE -> f74_0_main_GE : arg1'=arg1p4, (-21+arg1 < 0 /\ 3-arg1p4+arg1 == 0), cost: 1
   5: __init -> f46_0_main_GE : arg1'=arg1p1, -arg1p1 == 0, cost: 1

	Eliminating location f1_0_main_ConstantStackPush by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_ConstantStackPush : arg1'=arg1p5, T, cost: 1
	Second rule:
	f1_0_main_ConstantStackPush -> f46_0_main_GE : arg1'=arg1p1, -arg1p1 == 0, cost: 1
	New rule:
	__init -> f46_0_main_GE : arg1'=arg1p1, -arg1p1 == 0, cost: 1
	
	Applied deletion

	Removed the following rules: 0 4

Simplified Transitions

Start location: __init
Program variables: arg1
   6: f46_0_main_GE -> f46_0_main_GE : arg1'=1+arg1, -100+arg1 < 0, cost: 1
   7: f46_0_main_GE -> f74_0_main_GE : arg1'=5, -99+arg1 > 0, cost: 1
   8: f74_0_main_GE -> f74_0_main_GE : arg1'=3+arg1, -21+arg1 < 0, cost: 1
   9: __init -> f46_0_main_GE : arg1'=0, T, cost: 1

	Propagated Equalities

	Original rule:
	f46_0_main_GE -> f46_0_main_GE : arg1'=arg1p2, (1-arg1p2+arg1 == 0 /\ -100+arg1 < 0), cost: 1
	New rule:
	f46_0_main_GE -> f46_0_main_GE : arg1'=1+arg1, (0 == 0 /\ -100+arg1 < 0), cost: 1
	
		propagated equality arg1p2 = 1+arg1
		
	Simplified Guard

	Original rule:
	f46_0_main_GE -> f46_0_main_GE : arg1'=1+arg1, (0 == 0 /\ -100+arg1 < 0), cost: 1
	New rule:
	f46_0_main_GE -> f46_0_main_GE : arg1'=1+arg1, -100+arg1 < 0, cost: 1
	
	Propagated Equalities

	Original rule:
	f46_0_main_GE -> f74_0_main_GE : arg1'=arg1p3, (-99+arg1 > 0 /\ 5-arg1p3 == 0), cost: 1
	New rule:
	f46_0_main_GE -> f74_0_main_GE : arg1'=5, (0 == 0 /\ -99+arg1 > 0), cost: 1
	
		propagated equality arg1p3 = 5
		
	Simplified Guard

	Original rule:
	f46_0_main_GE -> f74_0_main_GE : arg1'=5, (0 == 0 /\ -99+arg1 > 0), cost: 1
	New rule:
	f46_0_main_GE -> f74_0_main_GE : arg1'=5, -99+arg1 > 0, cost: 1
	
	Propagated Equalities

	Original rule:
	f74_0_main_GE -> f74_0_main_GE : arg1'=arg1p4, (-21+arg1 < 0 /\ 3-arg1p4+arg1 == 0), cost: 1
	New rule:
	f74_0_main_GE -> f74_0_main_GE : arg1'=3+arg1, (0 == 0 /\ -21+arg1 < 0), cost: 1
	
		propagated equality arg1p4 = 3+arg1
		
	Simplified Guard

	Original rule:
	f74_0_main_GE -> f74_0_main_GE : arg1'=3+arg1, (0 == 0 /\ -21+arg1 < 0), cost: 1
	New rule:
	f74_0_main_GE -> f74_0_main_GE : arg1'=3+arg1, -21+arg1 < 0, cost: 1
	
	Propagated Equalities

	Original rule:
	__init -> f46_0_main_GE : arg1'=arg1p1, -arg1p1 == 0, cost: 1
	New rule:
	__init -> f46_0_main_GE : arg1'=0, 0 == 0, cost: 1
	
		propagated equality arg1p1 = 0
		
	Simplified Guard

	Original rule:
	__init -> f46_0_main_GE : arg1'=0, 0 == 0, cost: 1
	New rule:
	__init -> f46_0_main_GE : arg1'=0, T, cost: 1

Step with 9

	Trace

	9[T]
	
	Blocked

	[{}, {}]

Step with 6

	Trace

	9[T], 6[(-100+arg1 < 0)]
	
	Blocked

	[{}, {7[T]}, {}]

Accelerate

Start location: __init
Program variables: arg1
   6: f46_0_main_GE -> f46_0_main_GE : arg1'=1+arg1, -100+arg1 < 0, cost: 1
   7: f46_0_main_GE -> f74_0_main_GE : arg1'=5, -99+arg1 > 0, cost: 1
  10: f46_0_main_GE -> f46_0_main_GE : arg1'=n+arg1, (101-n-arg1 > 0 /\ -1+n >= 0), cost: 1
   8: f74_0_main_GE -> f74_0_main_GE : arg1'=3+arg1, -21+arg1 < 0, cost: 1
   9: __init -> f46_0_main_GE : arg1'=0, T, cost: 1

	Loop Acceleration

	Original rule:
	f46_0_main_GE -> f46_0_main_GE : arg1'=1+arg1, (-100+arg1 < 0), cost: 1
	New rule:
	f46_0_main_GE -> f46_0_main_GE : arg1'=n+arg1, (101-n-arg1 > 0 /\ -1+n >= 0), cost: 1

		100-arg1 > 0 [0]: montonic decrease yields 101-n-arg1 > 0
		
		100-arg1 > 0 [1]: eventual increase yields (1 <= 0 /\ 100-arg1 > 0)
		
		Replacement map: {100-arg1 > 0 -> 101-n-arg1 > 0}

	Trace

	9[T], 10[(101-n-arg1 > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {7[T]}, {6[T], 10[T]}]

Step with 7

	Trace

	9[T], 10[(101-n-arg1 > 0 /\ -1+n >= 0)], 7[(-99+arg1 > 0)]
	
	Blocked

	[{}, {7[T]}, {6[T], 10[T]}, {}]

Step with 8

	Trace

	9[T], 10[(101-n-arg1 > 0 /\ -1+n >= 0)], 7[(-99+arg1 > 0)], 8[(-21+arg1 < 0)]
	
	Blocked

	[{}, {7[T]}, {6[T], 10[T]}, {}, {}]

Accelerate

Start location: __init
Program variables: arg1
   6: f46_0_main_GE -> f46_0_main_GE : arg1'=1+arg1, -100+arg1 < 0, cost: 1
   7: f46_0_main_GE -> f74_0_main_GE : arg1'=5, -99+arg1 > 0, cost: 1
  10: f46_0_main_GE -> f46_0_main_GE : arg1'=n+arg1, (101-n-arg1 > 0 /\ -1+n >= 0), cost: 1
   8: f74_0_main_GE -> f74_0_main_GE : arg1'=3+arg1, -21+arg1 < 0, cost: 1
  11: f74_0_main_GE -> f74_0_main_GE : arg1'=3*n2+arg1, (-1+n2 >= 0 /\ 24-3*n2-arg1 > 0), cost: 1
   9: __init -> f46_0_main_GE : arg1'=0, T, cost: 1

	Loop Acceleration

	Original rule:
	f74_0_main_GE -> f74_0_main_GE : arg1'=3+arg1, (-21+arg1 < 0), cost: 1
	New rule:
	f74_0_main_GE -> f74_0_main_GE : arg1'=3*n2+arg1, (-1+n2 >= 0 /\ 24-3*n2-arg1 > 0), cost: 1

		21-arg1 > 0 [0]: montonic decrease yields 24-3*n2-arg1 > 0
		
		21-arg1 > 0 [1]: eventual increase yields (3 <= 0 /\ 21-arg1 > 0)
		
		Replacement map: {21-arg1 > 0 -> 24-3*n2-arg1 > 0}

	Trace

	9[T], 10[(101-n-arg1 > 0 /\ -1+n >= 0)], 7[(-99+arg1 > 0)], 11[(-1+n2 >= 0 /\ 24-3*n2-arg1 > 0)]
	
	Blocked

	[{}, {7[T]}, {6[T], 10[T]}, {}, {8[T], 11[T]}]

Backtrack

	Trace

	9[T], 10[(101-n-arg1 > 0 /\ -1+n >= 0)], 7[(-99+arg1 > 0)]
	
	Blocked

	[{}, {7[T]}, {6[T], 10[T]}, {11[T]}]

Step with 8

	Trace

	9[T], 10[(101-n-arg1 > 0 /\ -1+n >= 0)], 7[(-99+arg1 > 0)], 8[(-21+arg1 < 0)]
	
	Blocked

	[{}, {7[T]}, {6[T], 10[T]}, {11[T]}, {}]

Covered

	Trace

	9[T], 10[(101-n-arg1 > 0 /\ -1+n >= 0)], 7[(-99+arg1 > 0)]
	
	Blocked

	[{}, {7[T]}, {6[T], 10[T]}, {8[T], 11[T]}]

Backtrack

	Trace

	9[T], 10[(101-n-arg1 > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {7[T]}, {6[T], 7[T], 10[T]}]

Backtrack

	Trace

	9[T]
	
	Blocked

	[{}, {7[T], 10[T]}]

Step with 6

	Trace

	9[T], 6[(-100+arg1 < 0)]
	
	Blocked

	[{}, {7[T], 10[T]}, {}]

Covered

	Trace

	9[T]
	
	Blocked

	[{}, {6[T], 7[T], 10[T]}]

Backtrack

	Trace

	Blocked

	[{9[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
