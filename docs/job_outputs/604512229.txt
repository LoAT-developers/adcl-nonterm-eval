unknown

Initial ITS

Start location: [1]
Program variables: c x y
   0: [1] -> [2] : x'=nondet, T, cost: 1
   1: [2] -> [3] : y'=nondet1, T, cost: 1
   2: [3] -> [4] : c'=0, T, cost: 1
   3: [4] -> [5] : x > 0, cost: 1
  12: [4] -> [12] : x <= 0, cost: 1
   4: [5] -> [6] : y'=0, T, cost: 1
   5: [6] -> [7] : y-x < 0, cost: 1
   9: [6] -> [10] : y-x >= 0, cost: 1
   6: [7] -> [8] : y'=1+y, T, cost: 1
   7: [8] -> [9] : c'=1+c, T, cost: 1
   8: [9] -> [6] : T, cost: 1
  10: [10] -> [11] : x'=-1+x, T, cost: 1
  11: [11] -> [4] : T, cost: 1

Chained Linear Paths

Start location: [1]
Program variables: c x y
  14: [1] -> [4] : c'=0, x'=nondet, y'=nondet1, T, cost: 1
  12: [4] -> [12] : x <= 0, cost: 1
  15: [4] -> [6] : y'=0, x > 0, cost: 1
  19: [6] -> [4] : x'=-1+x, y-x >= 0, cost: 1
  20: [6] -> [6] : c'=1+c, y'=1+y, y-x < 0, cost: 1

	Eliminating location [2] by chaining:

	Applied chaining

	First rule:
	[1] -> [2] : x'=nondet, T, cost: 1
	Second rule:
	[2] -> [3] : y'=nondet1, T, cost: 1
	New rule:
	[1] -> [3] : x'=nondet, y'=nondet1, T, cost: 1
	
	Applied deletion

	Removed the following rules: 0 1
	
	Eliminating location [3] by chaining:

	Applied chaining

	First rule:
	[1] -> [3] : x'=nondet, y'=nondet1, T, cost: 1
	Second rule:
	[3] -> [4] : c'=0, T, cost: 1
	New rule:
	[1] -> [4] : c'=0, x'=nondet, y'=nondet1, T, cost: 1
	
	Applied deletion

	Removed the following rules: 2 13
	
	Eliminating location [5] by chaining:

	Applied chaining

	First rule:
	[4] -> [5] : x > 0, cost: 1
	Second rule:
	[5] -> [6] : y'=0, T, cost: 1
	New rule:
	[4] -> [6] : y'=0, x > 0, cost: 1
	
	Applied deletion

	Removed the following rules: 3 4
	
	Eliminating location [7] by chaining:

	Applied chaining

	First rule:
	[6] -> [7] : y-x < 0, cost: 1
	Second rule:
	[7] -> [8] : y'=1+y, T, cost: 1
	New rule:
	[6] -> [8] : y'=1+y, y-x < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 5 6
	
	Eliminating location [10] by chaining:

	Applied chaining

	First rule:
	[6] -> [10] : y-x >= 0, cost: 1
	Second rule:
	[10] -> [11] : x'=-1+x, T, cost: 1
	New rule:
	[6] -> [11] : x'=-1+x, y-x >= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 9 10
	
	Eliminating location [8] by chaining:

	Applied chaining

	First rule:
	[6] -> [8] : y'=1+y, y-x < 0, cost: 1
	Second rule:
	[8] -> [9] : c'=1+c, T, cost: 1
	New rule:
	[6] -> [9] : c'=1+c, y'=1+y, y-x < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 7 16
	
	Eliminating location [11] by chaining:

	Applied chaining

	First rule:
	[6] -> [11] : x'=-1+x, y-x >= 0, cost: 1
	Second rule:
	[11] -> [4] : T, cost: 1
	New rule:
	[6] -> [4] : x'=-1+x, y-x >= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 11 17
	
	Eliminating location [9] by chaining:

	Applied chaining

	First rule:
	[6] -> [9] : c'=1+c, y'=1+y, y-x < 0, cost: 1
	Second rule:
	[9] -> [6] : T, cost: 1
	New rule:
	[6] -> [6] : c'=1+c, y'=1+y, y-x < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 8 18

Step with 14

	Trace

	14[T]
	
	Blocked

	[{}, {}]

Step with 12

	Trace

	14[T], 12[(x <= 0)]
	
	Blocked

	[{}, {}, {}]

Backtrack

	Trace

	14[T]
	
	Blocked

	[{}, {12[T]}]

Step with 15

	Trace

	14[T], 15[(x > 0)]
	
	Blocked

	[{}, {12[T]}, {}]

Step with 20

	Trace

	14[T], 15[(x > 0)], 20[(y-x < 0)]
	
	Blocked

	[{}, {12[T]}, {19[T]}, {}]

Accelerate

Start location: [1]
Program variables: c x y
  14: [1] -> [4] : c'=0, x'=nondet, y'=nondet1, T, cost: 1
  12: [4] -> [12] : x <= 0, cost: 1
  15: [4] -> [6] : y'=0, x > 0, cost: 1
  19: [6] -> [4] : x'=-1+x, y-x >= 0, cost: 1
  20: [6] -> [6] : c'=1+c, y'=1+y, y-x < 0, cost: 1
  21: [6] -> [6] : c'=c+n, y'=n+y, (1-n-y+x > 0 /\ -1+n >= 0), cost: 1

	Loop Acceleration

	Original rule:
	[6] -> [6] : c'=1+c, y'=1+y, (y-x < 0), cost: 1
	New rule:
	[6] -> [6] : c'=c+n, y'=n+y, (1-n-y+x > 0 /\ -1+n >= 0), cost: 1

		-y+x > 0 [0]: montonic decrease yields 1-n-y+x > 0
		
		-y+x > 0 [1]: eventual increase yields (1 <= 0 /\ -y+x > 0)
		
		Replacement map: {-y+x > 0 -> 1-n-y+x > 0}

	Trace

	14[T], 15[(x > 0)], 21[(1-n-y+x > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {12[T]}, {19[T]}, {20[T], 21[T]}]

Step with 19

	Trace

	14[T], 15[(x > 0)], 21[(1-n-y+x > 0 /\ -1+n >= 0)], 19[(y-x >= 0)]
	
	Blocked

	[{}, {12[T]}, {19[T]}, {20[T], 21[T]}, {}]

Accelerate

Start location: [1]
Program variables: c x y
  14: [1] -> [4] : c'=0, x'=nondet, y'=nondet1, T, cost: 1
  12: [4] -> [12] : x <= 0, cost: 1
  15: [4] -> [6] : y'=0, x > 0, cost: 1
  22: [4] -> [4] : c'=c+n2*x+1/2*n2-1/2*n2^2, x'=-n2+x, y'=1-n2+x, (-1+n2 >= 0 /\ 1-n2+x > 0 /\ -n2+x >= 0), cost: 1
  19: [6] -> [4] : x'=-1+x, y-x >= 0, cost: 1
  20: [6] -> [6] : c'=1+c, y'=1+y, y-x < 0, cost: 1
  21: [6] -> [6] : c'=c+n, y'=n+y, (1-n-y+x > 0 /\ -1+n >= 0), cost: 1

	Loop Acceleration

	Original rule:
	[4] -> [4] : c'=c+x, x'=-1+x, y'=x, (-1+x >= 0 /\ x > 0), cost: 1
	New rule:
	[4] -> [4] : c'=c+n2*x+1/2*n2-1/2*n2^2, x'=-n2+x, y'=1-n2+x, (-1+n2 >= 0 /\ 1-n2+x > 0 /\ -n2+x >= 0), cost: 1

		-1+x >= 0 [0]: montonic decrease yields -n2+x >= 0
		
		-1+x >= 0 [1]: eventual increase yields (1 <= 0 /\ -1+x >= 0)
		
		x > 0 [0]: montonic decrease yields 1-n2+x > 0
		
		x > 0 [1]: eventual increase yields (1 <= 0 /\ x > 0)
		
		Replacement map: {-1+x >= 0 -> -n2+x >= 0, x > 0 -> 1-n2+x > 0}

	Trace

	14[T], 22[(-1+n2 >= 0 /\ 1-n2+x > 0 /\ -n2+x >= 0)]
	
	Blocked

	[{}, {12[T]}, {22[T]}]

Step with 12

	Trace

	14[T], 22[(-1+n2 >= 0 /\ 1-n2+x > 0 /\ -n2+x >= 0)], 12[(x <= 0)]
	
	Blocked

	[{}, {12[T]}, {22[T]}, {}]

Backtrack

	Trace

	14[T], 22[(-1+n2 >= 0 /\ 1-n2+x > 0 /\ -n2+x >= 0)]
	
	Blocked

	[{}, {12[T]}, {12[T], 22[T]}]

Step with 15

	Trace

	14[T], 22[(-1+n2 >= 0 /\ 1-n2+x > 0 /\ -n2+x >= 0)], 15[(x > 0)]
	
	Blocked

	[{}, {12[T]}, {12[T], 22[T]}, {}]

Step with 20

	Trace

	14[T], 22[(-1+n2 >= 0 /\ 1-n2+x > 0 /\ -n2+x >= 0)], 15[(x > 0)], 20[(y-x < 0)]
	
	Blocked

	[{}, {12[T]}, {12[T], 22[T]}, {19[T]}, {}]

Covered

	Trace

	14[T], 22[(-1+n2 >= 0 /\ 1-n2+x > 0 /\ -n2+x >= 0)], 15[(x > 0)]
	
	Blocked

	[{}, {12[T]}, {12[T], 22[T]}, {19[T], 20[T]}]

Step with 21

	Trace

	14[T], 22[(-1+n2 >= 0 /\ 1-n2+x > 0 /\ -n2+x >= 0)], 15[(x > 0)], 21[(1-n-y+x > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {12[T]}, {12[T], 22[T]}, {19[T], 20[T]}, {21[T]}]

Step with 19

	Trace

	14[T], 22[(-1+n2 >= 0 /\ 1-n2+x > 0 /\ -n2+x >= 0)], 15[(x > 0)], 21[(1-n-y+x > 0 /\ -1+n >= 0)], 19[(y-x >= 0)]
	
	Blocked

	[{}, {12[T]}, {12[T], 22[T]}, {19[T], 20[T]}, {21[T]}, {}]

Covered

	Trace

	14[T], 22[(-1+n2 >= 0 /\ 1-n2+x > 0 /\ -n2+x >= 0)], 15[(x > 0)], 21[(1-n-y+x > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {12[T]}, {12[T], 22[T]}, {19[T], 20[T]}, {19[T], 21[T]}]

Step with 20

	Trace

	14[T], 22[(-1+n2 >= 0 /\ 1-n2+x > 0 /\ -n2+x >= 0)], 15[(x > 0)], 21[(1-n-y+x > 0 /\ -1+n >= 0)], 20[(y-x < 0)]
	
	Blocked

	[{}, {12[T]}, {12[T], 22[T]}, {19[T], 20[T]}, {19[T], 21[T]}, {}]

Covered

	Trace

	14[T], 22[(-1+n2 >= 0 /\ 1-n2+x > 0 /\ -n2+x >= 0)], 15[(x > 0)], 21[(1-n-y+x > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {12[T]}, {12[T], 22[T]}, {19[T], 20[T]}, {19[T], 20[T], 21[T]}]

Backtrack

	Trace

	14[T], 22[(-1+n2 >= 0 /\ 1-n2+x > 0 /\ -n2+x >= 0)], 15[(x > 0)]
	
	Blocked

	[{}, {12[T]}, {12[T], 22[T]}, {19[T], 20[T], 21[T]}]

Backtrack

	Trace

	14[T], 22[(-1+n2 >= 0 /\ 1-n2+x > 0 /\ -n2+x >= 0)]
	
	Blocked

	[{}, {12[T]}, {12[T], 15[T], 22[T]}]

Backtrack

	Trace

	14[T]
	
	Blocked

	[{}, {12[T], 22[T]}]

Step with 15

	Trace

	14[T], 15[(x > 0)]
	
	Blocked

	[{}, {12[T], 22[T]}, {}]

Step with 20

	Trace

	14[T], 15[(x > 0)], 20[(y-x < 0)]
	
	Blocked

	[{}, {12[T], 22[T]}, {}, {}]

Covered

	Trace

	14[T], 15[(x > 0)]
	
	Blocked

	[{}, {12[T], 22[T]}, {20[T]}]

Step with 21

	Trace

	14[T], 15[(x > 0)], 21[(1-n-y+x > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {12[T], 22[T]}, {20[T]}, {21[T]}]

Step with 19

	Trace

	14[T], 15[(x > 0)], 21[(1-n-y+x > 0 /\ -1+n >= 0)], 19[(y-x >= 0)]
	
	Blocked

	[{}, {12[T], 22[T]}, {20[T]}, {21[T]}, {}]

Covered

	Trace

	14[T], 15[(x > 0)], 21[(1-n-y+x > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {12[T], 22[T]}, {20[T]}, {19[T], 21[T]}]

Step with 20

	Trace

	14[T], 15[(x > 0)], 21[(1-n-y+x > 0 /\ -1+n >= 0)], 20[(y-x < 0)]
	
	Blocked

	[{}, {12[T], 22[T]}, {20[T]}, {19[T], 21[T]}, {}]

Covered

	Trace

	14[T], 15[(x > 0)], 21[(1-n-y+x > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {12[T], 22[T]}, {20[T]}, {19[T], 20[T], 21[T]}]

Backtrack

	Trace

	14[T], 15[(x > 0)]
	
	Blocked

	[{}, {12[T], 22[T]}, {20[T], 21[T]}]

Backtrack

	Trace

	14[T]
	
	Blocked

	[{}, {12[T], 15[T], 22[T]}]

Backtrack

	Trace

	Blocked

	[{14[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
