unknown

Initial ITS

Start location: [1]
Program variables: a b x y
   0: [1] -> [2] : a'=nondet, T, cost: 1
   1: [2] -> [3] : b'=nondet1, T, cost: 1
   2: [3] -> [4] : x'=nondet2, T, cost: 1
   3: [4] -> [5] : y'=nondet3, T, cost: 1
   4: [5] -> [7] : (x < 0 /\ -1-b+a == 0), cost: 1
  11: [5] -> [6] : (x >= 0 \/ -1-b+a < 0 \/ -1-b+a > 0), cost: 1
   5: [7] -> [8] : (y >= 0 \/ x >= 0), cost: 1
   9: [7] -> [11] : (y < 0 /\ x < 0), cost: 1
   6: [8] -> [9] : x'=-1+x-b+a, T, cost: 1
   7: [9] -> [10] : y'=-1+y+b-a, T, cost: 1
   8: [10] -> [7] : T, cost: 1
  10: [11] -> [6] : T, cost: 1

Chained Linear Paths

Start location: [1]
Program variables: a b x y
  14: [1] -> [5] : a'=nondet, b'=nondet1, x'=nondet2, y'=nondet3, T, cost: 1
   4: [5] -> [7] : (x < 0 /\ -1-b+a == 0), cost: 1
  11: [5] -> [6] : (x >= 0 \/ -1-b+a < 0 \/ -1-b+a > 0), cost: 1
  16: [7] -> [6] : (y < 0 /\ x < 0), cost: 1
  18: [7] -> [7] : x'=-1+x-b+a, y'=-1+y+b-a, (y >= 0 \/ x >= 0), cost: 1

	Eliminating location [2] by chaining:

	Applied chaining

	First rule:
	[1] -> [2] : a'=nondet, T, cost: 1
	Second rule:
	[2] -> [3] : b'=nondet1, T, cost: 1
	New rule:
	[1] -> [3] : a'=nondet, b'=nondet1, T, cost: 1
	
	Applied deletion

	Removed the following rules: 0 1
	
	Eliminating location [3] by chaining:

	Applied chaining

	First rule:
	[1] -> [3] : a'=nondet, b'=nondet1, T, cost: 1
	Second rule:
	[3] -> [4] : x'=nondet2, T, cost: 1
	New rule:
	[1] -> [4] : a'=nondet, b'=nondet1, x'=nondet2, T, cost: 1
	
	Applied deletion

	Removed the following rules: 2 12
	
	Eliminating location [4] by chaining:

	Applied chaining

	First rule:
	[1] -> [4] : a'=nondet, b'=nondet1, x'=nondet2, T, cost: 1
	Second rule:
	[4] -> [5] : y'=nondet3, T, cost: 1
	New rule:
	[1] -> [5] : a'=nondet, b'=nondet1, x'=nondet2, y'=nondet3, T, cost: 1
	
	Applied deletion

	Removed the following rules: 3 13
	
	Eliminating location [8] by chaining:

	Applied chaining

	First rule:
	[7] -> [8] : (y >= 0 \/ x >= 0), cost: 1
	Second rule:
	[8] -> [9] : x'=-1+x-b+a, T, cost: 1
	New rule:
	[7] -> [9] : x'=-1+x-b+a, (y >= 0 \/ x >= 0), cost: 1
	
	Applied deletion

	Removed the following rules: 5 6
	
	Eliminating location [11] by chaining:

	Applied chaining

	First rule:
	[7] -> [11] : (y < 0 /\ x < 0), cost: 1
	Second rule:
	[11] -> [6] : T, cost: 1
	New rule:
	[7] -> [6] : (y < 0 /\ x < 0), cost: 1
	
	Applied deletion

	Removed the following rules: 9 10
	
	Eliminating location [9] by chaining:

	Applied chaining

	First rule:
	[7] -> [9] : x'=-1+x-b+a, (y >= 0 \/ x >= 0), cost: 1
	Second rule:
	[9] -> [10] : y'=-1+y+b-a, T, cost: 1
	New rule:
	[7] -> [10] : x'=-1+x-b+a, y'=-1+y+b-a, (y >= 0 \/ x >= 0), cost: 1
	
	Applied deletion

	Removed the following rules: 7 15
	
	Eliminating location [10] by chaining:

	Applied chaining

	First rule:
	[7] -> [10] : x'=-1+x-b+a, y'=-1+y+b-a, (y >= 0 \/ x >= 0), cost: 1
	Second rule:
	[10] -> [7] : T, cost: 1
	New rule:
	[7] -> [7] : x'=-1+x-b+a, y'=-1+y+b-a, (y >= 0 \/ x >= 0), cost: 1
	
	Applied deletion

	Removed the following rules: 8 17

Step with 14

	Trace

	14[T]
	
	Blocked

	[{}, {}]

Step with 4

	Trace

	14[T], 4[(x < 0 /\ -1-b+a == 0)]
	
	Blocked

	[{}, {}, {}]

Step with 16

	Trace

	14[T], 4[(x < 0 /\ -1-b+a == 0)], 16[(y < 0 /\ x < 0)]
	
	Blocked

	[{}, {}, {}, {}]

Backtrack

	Trace

	14[T], 4[(x < 0 /\ -1-b+a == 0)]
	
	Blocked

	[{}, {}, {16[T]}]

Step with 18

	Trace

	14[T], 4[(x < 0 /\ -1-b+a == 0)], 18[(y >= 0)]
	
	Blocked

	[{}, {}, {16[T]}, {}]

Accelerate

Start location: [1]
Program variables: a b x y
  14: [1] -> [5] : a'=nondet, b'=nondet1, x'=nondet2, y'=nondet3, T, cost: 1
   4: [5] -> [7] : (x < 0 /\ -1-b+a == 0), cost: 1
  11: [5] -> [6] : (x >= 0 \/ -1-b+a < 0 \/ -1-b+a > 0), cost: 1
  16: [7] -> [6] : (y < 0 /\ x < 0), cost: 1
  18: [7] -> [7] : x'=-1+x-b+a, y'=-1+y+b-a, (y >= 0 \/ x >= 0), cost: 1
  19: [7] -> LoAT_sink : (y >= 0 /\ 1-b+a <= 0), cost: NONTERM
  20: [7] -> [7] : x'=n*a-n*b-n+x, y'=-n*a+y+n*b-n, (y >= 0 /\ 1+y-n+(-1+n)*b-(-1+n)*a >= 0 /\ -1+n >= 0), cost: 1

	Certificate of Non-Termination

	Original rule:
	[7] -> [7] : x'=-1+x-b+a, y'=-1+y+b-a, (y >= 0), cost: 1
	New rule:
	[7] -> LoAT_sink : (y >= 0 /\ 1-b+a <= 0), cost: NONTERM

		y >= 0 [0]: eventual decrease yields (y >= 0 /\ 1+y-n+(-1+n)*b-(-1+n)*a >= 0)
		
		y >= 0 [1]: eventual increase yields (y >= 0 /\ 1-b+a <= 0)
		
		Replacement map: {y >= 0 -> (y >= 0 /\ 1-b+a <= 0)}

	Loop Acceleration

	Original rule:
	[7] -> [7] : x'=-1+x-b+a, y'=-1+y+b-a, (y >= 0), cost: 1
	New rule:
	[7] -> [7] : x'=n*a-n*b-n+x, y'=-n*a+y+n*b-n, (y >= 0 /\ 1+y-n+(-1+n)*b-(-1+n)*a >= 0 /\ -1+n >= 0), cost: 1

		y >= 0 [0]: eventual decrease yields (y >= 0 /\ 1+y-n+(-1+n)*b-(-1+n)*a >= 0)
		
		y >= 0 [1]: eventual increase yields (y >= 0 /\ 1-b+a <= 0)
		
		Replacement map: {y >= 0 -> (y >= 0 /\ 1+y-n+(-1+n)*b-(-1+n)*a >= 0)}

	Trace

	14[T], 4[(x < 0 /\ -1-b+a == 0)], 20[(y >= 0 /\ 1+y-n+(-1+n)*b-(-1+n)*a >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {}, {16[T]}, {18[y >= 0], 20[T]}]

Step with 16

	Trace

	14[T], 4[(x < 0 /\ -1-b+a == 0)], 20[(y >= 0 /\ 1+y-n+(-1+n)*b-(-1+n)*a >= 0 /\ -1+n >= 0)], 16[(y < 0 /\ x < 0)]
	
	Blocked

	[{}, {}, {16[T]}, {18[y >= 0], 19[T], 20[T]}, {}]

Backtrack

	Trace

	14[T], 4[(x < 0 /\ -1-b+a == 0)], 20[(y >= 0 /\ 1+y-n+(-1+n)*b-(-1+n)*a >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {}, {16[T]}, {16[T], 18[y >= 0], 19[T], 20[T]}]

Backtrack

	Trace

	14[T], 4[(x < 0 /\ -1-b+a == 0)]
	
	Blocked

	[{}, {}, {16[T], 20[T]}]

Step with 18

	Trace

	14[T], 4[(x < 0 /\ -1-b+a == 0)], 18[(y >= 0)]
	
	Blocked

	[{}, {}, {16[T], 20[T]}, {}]

Covered

	Trace

	14[T], 4[(x < 0 /\ -1-b+a == 0)]
	
	Blocked

	[{}, {}, {16[T], 18[y >= 0], 20[T]}]

Backtrack

	Trace

	14[T]
	
	Blocked

	[{}, {4[T]}]

Step with 11

	Trace

	14[T], 11[(-1-b+a > 0)]
	
	Blocked

	[{}, {4[T]}, {}]

Backtrack

	Trace

	14[T]
	
	Blocked

	[{}, {4[T], 11[-1-b+a > 0]}]

Step with 11

	Trace

	14[T], 11[(-1-b+a < 0)]
	
	Blocked

	[{}, {4[T], 11[-1-b+a > 0]}, {}]

Backtrack

	Trace

	14[T]
	
	Blocked

	[{}, {4[T], 11[(-1-b+a < 0 /\ -1-b+a > 0)]}]

Step with 11

	Trace

	14[T], 11[(x >= 0)]
	
	Blocked

	[{}, {4[T], 11[(-1-b+a < 0 /\ -1-b+a > 0)]}, {}]

Backtrack

	Trace

	14[T]
	
	Blocked

	[{}, {4[T], 11[(x >= 0 /\ -1-b+a < 0 /\ -1-b+a > 0)]}]

Backtrack

	Trace

	Blocked

	[{14[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
