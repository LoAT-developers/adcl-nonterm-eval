WORST_CASE(Omega(0),?)

Initial ITS
Start location: __init
   0: f1_0_main_Load -> f91_0_divBy_LE : arg2'=arg2P0, arg1'=arg1P0, (arg2 > 0 /\ 1+arg2P0 > 0 /\ -arg1P0 == 0 /\ arg1 > 0), cost: 1
   1: f91_0_divBy_LE -> f91_0_divBy_LE\' : arg2'=arg2P1, arg1'=arg1P1, (1+arg1 > 0 /\ arg2 > 0 /\ arg1-arg1P1 == 0 /\ arg2-x70 > 0 /\ 1+x70 > 0 /\ arg2-arg2P1 == 0), cost: 1
   2: f91_0_divBy_LE\' -> f91_0_divBy_LE : arg2'=arg2P2, arg1'=arg1P2, (1+arg1 > 0 /\ arg2P2+arg1-arg1P2 == 0 /\ arg2 > 0 /\ arg2-2*arg2P2 >= 0 /\ -2+arg2-2*arg2P2 < 0 /\ 1+arg2P2 > 0 /\ arg2-arg2P2 > 0), cost: 1
   3: __init -> f1_0_main_Load : arg2'=arg2P3, arg1'=arg1P3, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_Load -> f91_0_divBy_LE : arg2'=arg2P0, arg1'=arg1P0, (arg2 > 0 /\ 1+arg2P0 > 0 /\ -arg1P0 == 0 /\ arg1 > 0), cost: 1
New rule:
f1_0_main_Load -> f91_0_divBy_LE : arg2'=arg2P0, arg1'=0, (arg2 > 0 /\ 1+arg2P0 > 0 /\ arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f91_0_divBy_LE -> f91_0_divBy_LE\' : arg2'=arg2P1, arg1'=arg1P1, (1+arg1 > 0 /\ arg2 > 0 /\ arg1-arg1P1 == 0 /\ arg2-x70 > 0 /\ 1+x70 > 0 /\ arg2-arg2P1 == 0), cost: 1
New rule:
f91_0_divBy_LE -> f91_0_divBy_LE\' : (1+arg1 > 0 /\ -1+arg2 >= 0), cost: 1

Applied preprocessing
Original rule:
f91_0_divBy_LE\' -> f91_0_divBy_LE : arg2'=arg2P2, arg1'=arg1P2, (1+arg1 > 0 /\ arg2P2+arg1-arg1P2 == 0 /\ arg2 > 0 /\ arg2-2*arg2P2 >= 0 /\ -2+arg2-2*arg2P2 < 0 /\ 1+arg2P2 > 0 /\ arg2-arg2P2 > 0), cost: 1
New rule:
f91_0_divBy_LE\' -> f91_0_divBy_LE : arg2'=-arg1+arg1P2, arg1'=arg1P2, (1+arg1 > 0 /\ arg2+2*arg1-2*arg1P2 >= 0 /\ arg2+arg1-arg1P2 > 0 /\ 2-arg2-2*arg1+2*arg1P2 > 0), cost: 1

Simplified rules
Start location: __init
   4: f1_0_main_Load -> f91_0_divBy_LE : arg2'=arg2P0, arg1'=0, (arg2 > 0 /\ 1+arg2P0 > 0 /\ arg1 > 0), cost: 1
   5: f91_0_divBy_LE -> f91_0_divBy_LE\' : (1+arg1 > 0 /\ -1+arg2 >= 0), cost: 1
   6: f91_0_divBy_LE\' -> f91_0_divBy_LE : arg2'=-arg1+arg1P2, arg1'=arg1P2, (1+arg1 > 0 /\ arg2+2*arg1-2*arg1P2 >= 0 /\ arg2+arg1-arg1P2 > 0 /\ 2-arg2-2*arg1+2*arg1P2 > 0), cost: 1
   3: __init -> f1_0_main_Load : arg2'=arg2P3, arg1'=arg1P3, TRUE, cost: 1


Eliminating location f1_0_main_Load by chaining:

Applied chaining
First rule:
__init -> f1_0_main_Load : arg2'=arg2P3, arg1'=arg1P3, TRUE, cost: 1
Second rule:
f1_0_main_Load -> f91_0_divBy_LE : arg2'=arg2P0, arg1'=0, (arg2 > 0 /\ 1+arg2P0 > 0 /\ arg1 > 0), cost: 1
New rule:
__init -> f91_0_divBy_LE : arg2'=arg2P0, arg1'=0, (1+arg2P0 > 0 /\ arg1P3 > 0 /\ arg2P3 > 0), cost: 2

Applied deletion
Removed the following rules: 3 4

Eliminating location f91_0_divBy_LE\' by chaining:

Applied chaining
First rule:
f91_0_divBy_LE -> f91_0_divBy_LE\' : (1+arg1 > 0 /\ -1+arg2 >= 0), cost: 1
Second rule:
f91_0_divBy_LE\' -> f91_0_divBy_LE : arg2'=-arg1+arg1P2, arg1'=arg1P2, (1+arg1 > 0 /\ arg2+2*arg1-2*arg1P2 >= 0 /\ arg2+arg1-arg1P2 > 0 /\ 2-arg2-2*arg1+2*arg1P2 > 0), cost: 1
New rule:
f91_0_divBy_LE -> f91_0_divBy_LE : arg2'=-arg1+arg1P2, arg1'=arg1P2, (1+arg1 > 0 /\ arg2+2*arg1-2*arg1P2 >= 0 /\ arg2+arg1-arg1P2 > 0 /\ 2-arg2-2*arg1+2*arg1P2 > 0 /\ -1+arg2 >= 0), cost: 2

Applied simplification
Original rule:
f91_0_divBy_LE -> f91_0_divBy_LE : arg2'=-arg1+arg1P2, arg1'=arg1P2, (1+arg1 > 0 /\ arg2+2*arg1-2*arg1P2 >= 0 /\ arg2+arg1-arg1P2 > 0 /\ 2-arg2-2*arg1+2*arg1P2 > 0 /\ -1+arg2 >= 0), cost: 2
New rule:
f91_0_divBy_LE -> f91_0_divBy_LE : arg2'=-arg1+arg1P2, arg1'=arg1P2, (1+arg1 > 0 /\ arg2+2*arg1-2*arg1P2 >= 0 /\ 2-arg2-2*arg1+2*arg1P2 > 0 /\ -1+arg2 >= 0), cost: 2

Applied deletion
Removed the following rules: 5 6

Eliminated locations on linear paths
Start location: __init
   8: f91_0_divBy_LE -> f91_0_divBy_LE : arg2'=-arg1+arg1P2, arg1'=arg1P2, (1+arg1 > 0 /\ arg2+2*arg1-2*arg1P2 >= 0 /\ 2-arg2-2*arg1+2*arg1P2 > 0 /\ -1+arg2 >= 0), cost: 2
   7: __init -> f91_0_divBy_LE : arg2'=arg2P0, arg1'=0, (1+arg2P0 > 0 /\ arg1P3 > 0 /\ arg2P3 > 0), cost: 2


Accelerated simple loops
Start location: __init
   8: f91_0_divBy_LE -> f91_0_divBy_LE : arg2'=-arg1+arg1P2, arg1'=arg1P2, (1+arg1 > 0 /\ arg2+2*arg1-2*arg1P2 >= 0 /\ 2-arg2-2*arg1+2*arg1P2 > 0 /\ -1+arg2 >= 0), cost: 2
   7: __init -> f91_0_divBy_LE : arg2'=arg2P0, arg1'=0, (1+arg2P0 > 0 /\ arg1P3 > 0 /\ arg2P3 > 0), cost: 2


Applied chaining
First rule:
__init -> f91_0_divBy_LE : arg2'=arg2P0, arg1'=0, (1+arg2P0 > 0 /\ arg1P3 > 0 /\ arg2P3 > 0), cost: 2
Second rule:
f91_0_divBy_LE -> f91_0_divBy_LE : arg2'=-arg1+arg1P2, arg1'=arg1P2, (1+arg1 > 0 /\ arg2+2*arg1-2*arg1P2 >= 0 /\ 2-arg2-2*arg1+2*arg1P2 > 0 /\ -1+arg2 >= 0), cost: 2
New rule:
__init -> f91_0_divBy_LE : arg2'=arg1P2, arg1'=arg1P2, arg1P2 >= 0, cost: 4

Applied deletion
Removed the following rules: 8

Chained accelerated rules with incoming rules
Start location: __init
   7: __init -> f91_0_divBy_LE : arg2'=arg2P0, arg1'=0, (1+arg2P0 > 0 /\ arg1P3 > 0 /\ arg2P3 > 0), cost: 2
   9: __init -> f91_0_divBy_LE : arg2'=arg1P2, arg1'=arg1P2, arg1P2 >= 0, cost: 4


Removed unreachable locations and irrelevant leafs
Start location: __init
  <empty>


Computing asymptotic complexity

Proved the following lower bound
Complexity:  Unknown
Cpx degree: ?

Solved cost: 0
Rule cost:   0

