NO

Initial ITS

Start location: [1]
Program variables: y1 y2
   0: [1] -> [2] : y1'=nondet, T, cost: 1
   1: [2] -> [3] : y2'=nondet1, T, cost: 1
   2: [3] -> [5] : (y2 >= 0 /\ y1 >= 0), cost: 1
  13: [3] -> [4] : (y2 < 0 \/ y1 < 0), cost: 1
   3: [5] -> [6] : (-y2+y1 < 0 \/ -y2+y1 > 0), cost: 1
  11: [5] -> [12] : (-y2+y1 <= 0 /\ -y2+y1 >= 0), cost: 1
   4: [6] -> [8] : -y2+y1 > 0, cost: 1
   7: [6] -> [10] : -y2+y1 <= 0, cost: 1
  10: [7] -> [5] : T, cost: 1
   5: [8] -> [9] : y1'=-y2+y1, T, cost: 1
   6: [9] -> [7] : T, cost: 1
   8: [10] -> [11] : y2'=y2-y1, T, cost: 1
   9: [11] -> [7] : T, cost: 1
  12: [12] -> [4] : T, cost: 1

Chained Linear Paths

Start location: [1]
Program variables: y1 y2
  14: [1] -> [3] : y1'=nondet, y2'=nondet1, T, cost: 1
   2: [3] -> [5] : (y2 >= 0 /\ y1 >= 0), cost: 1
  13: [3] -> [4] : (y2 < 0 \/ y1 < 0), cost: 1
   3: [5] -> [6] : (-y2+y1 < 0 \/ -y2+y1 > 0), cost: 1
  15: [5] -> [4] : (-y2+y1 <= 0 /\ -y2+y1 >= 0), cost: 1
  18: [6] -> [7] : y1'=-y2+y1, -y2+y1 > 0, cost: 1
  19: [6] -> [7] : y2'=y2-y1, -y2+y1 <= 0, cost: 1
  10: [7] -> [5] : T, cost: 1

	Eliminating location [2] by chaining:

	Applied chaining

	First rule:
	[1] -> [2] : y1'=nondet, T, cost: 1
	Second rule:
	[2] -> [3] : y2'=nondet1, T, cost: 1
	New rule:
	[1] -> [3] : y1'=nondet, y2'=nondet1, T, cost: 1
	
	Applied deletion

	Removed the following rules: 0 1
	
	Eliminating location [12] by chaining:

	Applied chaining

	First rule:
	[5] -> [12] : (-y2+y1 <= 0 /\ -y2+y1 >= 0), cost: 1
	Second rule:
	[12] -> [4] : T, cost: 1
	New rule:
	[5] -> [4] : (-y2+y1 <= 0 /\ -y2+y1 >= 0), cost: 1
	
	Applied deletion

	Removed the following rules: 11 12
	
	Eliminating location [8] by chaining:

	Applied chaining

	First rule:
	[6] -> [8] : -y2+y1 > 0, cost: 1
	Second rule:
	[8] -> [9] : y1'=-y2+y1, T, cost: 1
	New rule:
	[6] -> [9] : y1'=-y2+y1, -y2+y1 > 0, cost: 1
	
	Applied deletion

	Removed the following rules: 4 5
	
	Eliminating location [10] by chaining:

	Applied chaining

	First rule:
	[6] -> [10] : -y2+y1 <= 0, cost: 1
	Second rule:
	[10] -> [11] : y2'=y2-y1, T, cost: 1
	New rule:
	[6] -> [11] : y2'=y2-y1, -y2+y1 <= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 7 8
	
	Eliminating location [9] by chaining:

	Applied chaining

	First rule:
	[6] -> [9] : y1'=-y2+y1, -y2+y1 > 0, cost: 1
	Second rule:
	[9] -> [7] : T, cost: 1
	New rule:
	[6] -> [7] : y1'=-y2+y1, -y2+y1 > 0, cost: 1
	
	Applied deletion

	Removed the following rules: 6 16
	
	Eliminating location [11] by chaining:

	Applied chaining

	First rule:
	[6] -> [11] : y2'=y2-y1, -y2+y1 <= 0, cost: 1
	Second rule:
	[11] -> [7] : T, cost: 1
	New rule:
	[6] -> [7] : y2'=y2-y1, -y2+y1 <= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 9 17

Step with 14

	Trace

	14[T]
	
	Blocked

	[{}, {}]

Step with 2

	Trace

	14[T], 2[(y2 >= 0 /\ y1 >= 0)]
	
	Blocked

	[{}, {}, {}]

Step with 15

	Trace

	14[T], 2[(y2 >= 0 /\ y1 >= 0)], 15[(-y2+y1 <= 0 /\ -y2+y1 >= 0)]
	
	Blocked

	[{}, {}, {}, {}]

Backtrack

	Trace

	14[T], 2[(y2 >= 0 /\ y1 >= 0)]
	
	Blocked

	[{}, {}, {15[T]}]

Step with 3

	Trace

	14[T], 2[(y2 >= 0 /\ y1 >= 0)], 3[(-y2+y1 > 0)]
	
	Blocked

	[{}, {}, {15[T]}, {}]

Step with 18

	Trace

	14[T], 2[(y2 >= 0 /\ y1 >= 0)], 3[(-y2+y1 > 0)], 18[(-y2+y1 > 0)]
	
	Blocked

	[{}, {}, {15[T]}, {}, {}]

Step with 10

	Trace

	14[T], 2[(y2 >= 0 /\ y1 >= 0)], 3[(-y2+y1 > 0)], 18[(-y2+y1 > 0)], 10[T]
	
	Blocked

	[{}, {}, {15[T]}, {}, {}, {}]

Nonterm

Start location: [1]
Program variables: y1 y2
  14: [1] -> [3] : y1'=nondet, y2'=nondet1, T, cost: 1
   2: [3] -> [5] : (y2 >= 0 /\ y1 >= 0), cost: 1
  13: [3] -> [4] : (y2 < 0 \/ y1 < 0), cost: 1
   3: [5] -> [6] : (-y2+y1 < 0 \/ -y2+y1 > 0), cost: 1
  15: [5] -> [4] : (-y2+y1 <= 0 /\ -y2+y1 >= 0), cost: 1
  20: [5] -> LoAT_sink : (-y2+y1 > 0 /\ y2 <= 0), cost: NONTERM
  21: [5] -> [5] : y1'=y1-y2*n, (-y2+y1 > 0 /\ -y2*(-1+n)-y2+y1 > 0 /\ -1+n >= 0), cost: 1
  18: [6] -> [7] : y1'=-y2+y1, -y2+y1 > 0, cost: 1
  19: [6] -> [7] : y2'=y2-y1, -y2+y1 <= 0, cost: 1
  10: [7] -> [5] : T, cost: 1

	Certificate of Non-Termination

	Original rule:
	[5] -> [5] : y1'=-y2+y1, -y2+y1 > 0, cost: 1
	New rule:
	[5] -> LoAT_sink : (-y2+y1 > 0 /\ y2 <= 0), cost: NONTERM

		-y2+y1 > 0 [0]: eventual decrease yields (-y2+y1 > 0 /\ -y2*(-1+n)-y2+y1 > 0)
		
		-y2+y1 > 0 [1]: eventual increase yields (-y2+y1 > 0 /\ y2 <= 0)
		
		Replacement map: {-y2+y1 > 0 -> (-y2+y1 > 0 /\ y2 <= 0)}

	Loop Acceleration

	Original rule:
	[5] -> [5] : y1'=-y2+y1, -y2+y1 > 0, cost: 1
	New rule:
	[5] -> [5] : y1'=y1-y2*n, (-y2+y1 > 0 /\ -y2*(-1+n)-y2+y1 > 0 /\ -1+n >= 0), cost: 1

		-y2+y1 > 0 [0]: eventual decrease yields (-y2+y1 > 0 /\ -y2*(-1+n)-y2+y1 > 0)
		
		-y2+y1 > 0 [1]: eventual increase yields (-y2+y1 > 0 /\ y2 <= 0)
		
		Replacement map: {-y2+y1 > 0 -> (-y2+y1 > 0 /\ -y2*(-1+n)-y2+y1 > 0)}

Step with 20

	Trace

	14[T], 2[(y2 >= 0 /\ y1 >= 0)], 20[(-y2+y1 > 0 /\ y2 <= 0)]
	
	Blocked

	[{}, {}, {15[T]}, {20[T]}]

Refute

	Counterexample

	[ y1=1 y2=0 ] 14 [ y1=1 y2=0 ] 2 [ y1=y1 y2=y2 ] 20
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
