unknown

Initial ITS

Start location: l6
Program variables: __const_20^0 i^0
   0: l0 -> l1 : __const_20^0'=__const_20^post1, i^0'=i^post1, (i^0-i^post1 == 0 /\ -__const_20^post1+__const_20^0 == 0), cost: 1
   1: l2 -> l0 : __const_20^0'=__const_20^post2, i^0'=i^post2, (-i^post2+i^0 == 0 /\ -i^0+__const_20^0 <= 0 /\ __const_20^0-__const_20^post2 == 0), cost: 1
   2: l2 -> l3 : __const_20^0'=__const_20^post3, i^0'=i^post3, (1+i^0-__const_20^0 <= 0 /\ -1-i^0+i^post3 == 0 /\ -__const_20^post3+__const_20^0 == 0), cost: 1
   5: l3 -> l2 : __const_20^0'=__const_20^post6, i^0'=i^post6, (i^0-i^post6 == 0 /\ -__const_20^post6+__const_20^0 == 0), cost: 1
   3: l4 -> l0 : __const_20^0'=__const_20^post4, i^0'=i^post4, (-__const_20^post4+__const_20^0 == 0 /\ i^0 <= 0 /\ i^0-i^post4 == 0), cost: 1
   4: l4 -> l3 : __const_20^0'=__const_20^post5, i^0'=i^post5, (__const_20^0-__const_20^post5 == 0 /\ 1-i^0 <= 0 /\ -i^post5+i^0 == 0), cost: 1
   6: l5 -> l4 : __const_20^0'=__const_20^post7, i^0'=i^post7, (0 == 0 /\ i^1 == 0 /\ -__const_20^post7+__const_20^0 == 0), cost: 1
   7: l6 -> l5 : __const_20^0'=__const_20^post8, i^0'=i^post8, (__const_20^0-__const_20^post8 == 0 /\ -i^post8+i^0 == 0), cost: 1

Chained Linear Paths

Start location: l6
Program variables: __const_20^0 i^0
   0: l0 -> l1 : __const_20^0'=__const_20^post1, i^0'=i^post1, (i^0-i^post1 == 0 /\ -__const_20^post1+__const_20^0 == 0), cost: 1
   1: l2 -> l0 : __const_20^0'=__const_20^post2, i^0'=i^post2, (-i^post2+i^0 == 0 /\ -i^0+__const_20^0 <= 0 /\ __const_20^0-__const_20^post2 == 0), cost: 1
   2: l2 -> l3 : __const_20^0'=__const_20^post3, i^0'=i^post3, (1+i^0-__const_20^0 <= 0 /\ -1-i^0+i^post3 == 0 /\ -__const_20^post3+__const_20^0 == 0), cost: 1
   5: l3 -> l2 : __const_20^0'=__const_20^post6, i^0'=i^post6, (i^0-i^post6 == 0 /\ -__const_20^post6+__const_20^0 == 0), cost: 1
   3: l4 -> l0 : __const_20^0'=__const_20^post4, i^0'=i^post4, (-__const_20^post4+__const_20^0 == 0 /\ i^0 <= 0 /\ i^0-i^post4 == 0), cost: 1
   4: l4 -> l3 : __const_20^0'=__const_20^post5, i^0'=i^post5, (__const_20^0-__const_20^post5 == 0 /\ 1-i^0 <= 0 /\ -i^post5+i^0 == 0), cost: 1
   8: l6 -> l4 : __const_20^0'=__const_20^post7, i^0'=i^post7, (0 == 0 /\ i^1 == 0 /\ __const_20^0-__const_20^post8 == 0 /\ -i^post8+i^0 == 0 /\ -__const_20^post7+__const_20^post8 == 0), cost: 1

	Eliminating location l5 by chaining:

	Applied chaining

	First rule:
	l6 -> l5 : __const_20^0'=__const_20^post8, i^0'=i^post8, (__const_20^0-__const_20^post8 == 0 /\ -i^post8+i^0 == 0), cost: 1
	Second rule:
	l5 -> l4 : __const_20^0'=__const_20^post7, i^0'=i^post7, (0 == 0 /\ i^1 == 0 /\ -__const_20^post7+__const_20^0 == 0), cost: 1
	New rule:
	l6 -> l4 : __const_20^0'=__const_20^post7, i^0'=i^post7, (0 == 0 /\ i^1 == 0 /\ __const_20^0-__const_20^post8 == 0 /\ -i^post8+i^0 == 0 /\ -__const_20^post7+__const_20^post8 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 6 7

Simplified Transitions

Start location: l6
Program variables: __const_20^0 i^0
   9: l0 -> l1 : T, cost: 1
  10: l2 -> l0 : -i^0+__const_20^0 <= 0, cost: 1
  11: l2 -> l3 : i^0'=1+i^0, 1+i^0-__const_20^0 <= 0, cost: 1
  14: l3 -> l2 : T, cost: 1
  12: l4 -> l0 : i^0 <= 0, cost: 1
  13: l4 -> l3 : 1-i^0 <= 0, cost: 1
  15: l6 -> l4 : i^0'=i^post7, T, cost: 1

	Propagated Equalities

	Original rule:
	l0 -> l1 : __const_20^0'=__const_20^post1, i^0'=i^post1, (i^0-i^post1 == 0 /\ -__const_20^post1+__const_20^0 == 0), cost: 1
	New rule:
	l0 -> l1 : __const_20^0'=__const_20^0, i^0'=i^0, 0 == 0, cost: 1
	
		propagated equality i^post1 = i^0
		
		propagated equality __const_20^post1 = __const_20^0
		
	Simplified Guard

	Original rule:
	l0 -> l1 : __const_20^0'=__const_20^0, i^0'=i^0, 0 == 0, cost: 1
	New rule:
	l0 -> l1 : __const_20^0'=__const_20^0, i^0'=i^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l1 : __const_20^0'=__const_20^0, i^0'=i^0, T, cost: 1
	New rule:
	l0 -> l1 : T, cost: 1
	
	Propagated Equalities

	Original rule:
	l2 -> l0 : __const_20^0'=__const_20^post2, i^0'=i^post2, (-i^post2+i^0 == 0 /\ -i^0+__const_20^0 <= 0 /\ __const_20^0-__const_20^post2 == 0), cost: 1
	New rule:
	l2 -> l0 : __const_20^0'=__const_20^0, i^0'=i^0, (0 == 0 /\ -i^0+__const_20^0 <= 0), cost: 1
	
		propagated equality i^post2 = i^0
		
		propagated equality __const_20^post2 = __const_20^0
		
	Simplified Guard

	Original rule:
	l2 -> l0 : __const_20^0'=__const_20^0, i^0'=i^0, (0 == 0 /\ -i^0+__const_20^0 <= 0), cost: 1
	New rule:
	l2 -> l0 : __const_20^0'=__const_20^0, i^0'=i^0, -i^0+__const_20^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l2 -> l0 : __const_20^0'=__const_20^0, i^0'=i^0, -i^0+__const_20^0 <= 0, cost: 1
	New rule:
	l2 -> l0 : -i^0+__const_20^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l2 -> l3 : __const_20^0'=__const_20^post3, i^0'=i^post3, (1+i^0-__const_20^0 <= 0 /\ -1-i^0+i^post3 == 0 /\ -__const_20^post3+__const_20^0 == 0), cost: 1
	New rule:
	l2 -> l3 : __const_20^0'=__const_20^0, i^0'=1+i^0, (0 == 0 /\ 1+i^0-__const_20^0 <= 0), cost: 1
	
		propagated equality i^post3 = 1+i^0
		
		propagated equality __const_20^post3 = __const_20^0
		
	Simplified Guard

	Original rule:
	l2 -> l3 : __const_20^0'=__const_20^0, i^0'=1+i^0, (0 == 0 /\ 1+i^0-__const_20^0 <= 0), cost: 1
	New rule:
	l2 -> l3 : __const_20^0'=__const_20^0, i^0'=1+i^0, 1+i^0-__const_20^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l2 -> l3 : __const_20^0'=__const_20^0, i^0'=1+i^0, 1+i^0-__const_20^0 <= 0, cost: 1
	New rule:
	l2 -> l3 : i^0'=1+i^0, 1+i^0-__const_20^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l4 -> l0 : __const_20^0'=__const_20^post4, i^0'=i^post4, (-__const_20^post4+__const_20^0 == 0 /\ i^0 <= 0 /\ i^0-i^post4 == 0), cost: 1
	New rule:
	l4 -> l0 : __const_20^0'=__const_20^0, i^0'=i^0, (0 == 0 /\ i^0 <= 0), cost: 1
	
		propagated equality __const_20^post4 = __const_20^0
		
		propagated equality i^post4 = i^0
		
	Simplified Guard

	Original rule:
	l4 -> l0 : __const_20^0'=__const_20^0, i^0'=i^0, (0 == 0 /\ i^0 <= 0), cost: 1
	New rule:
	l4 -> l0 : __const_20^0'=__const_20^0, i^0'=i^0, i^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l4 -> l0 : __const_20^0'=__const_20^0, i^0'=i^0, i^0 <= 0, cost: 1
	New rule:
	l4 -> l0 : i^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l4 -> l3 : __const_20^0'=__const_20^post5, i^0'=i^post5, (__const_20^0-__const_20^post5 == 0 /\ 1-i^0 <= 0 /\ -i^post5+i^0 == 0), cost: 1
	New rule:
	l4 -> l3 : __const_20^0'=__const_20^0, i^0'=i^0, (0 == 0 /\ 1-i^0 <= 0), cost: 1
	
		propagated equality __const_20^post5 = __const_20^0
		
		propagated equality i^post5 = i^0
		
	Simplified Guard

	Original rule:
	l4 -> l3 : __const_20^0'=__const_20^0, i^0'=i^0, (0 == 0 /\ 1-i^0 <= 0), cost: 1
	New rule:
	l4 -> l3 : __const_20^0'=__const_20^0, i^0'=i^0, 1-i^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l4 -> l3 : __const_20^0'=__const_20^0, i^0'=i^0, 1-i^0 <= 0, cost: 1
	New rule:
	l4 -> l3 : 1-i^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l3 -> l2 : __const_20^0'=__const_20^post6, i^0'=i^post6, (i^0-i^post6 == 0 /\ -__const_20^post6+__const_20^0 == 0), cost: 1
	New rule:
	l3 -> l2 : __const_20^0'=__const_20^0, i^0'=i^0, 0 == 0, cost: 1
	
		propagated equality i^post6 = i^0
		
		propagated equality __const_20^post6 = __const_20^0
		
	Simplified Guard

	Original rule:
	l3 -> l2 : __const_20^0'=__const_20^0, i^0'=i^0, 0 == 0, cost: 1
	New rule:
	l3 -> l2 : __const_20^0'=__const_20^0, i^0'=i^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l3 -> l2 : __const_20^0'=__const_20^0, i^0'=i^0, T, cost: 1
	New rule:
	l3 -> l2 : T, cost: 1
	
	Propagated Equalities

	Original rule:
	l6 -> l4 : __const_20^0'=__const_20^post7, i^0'=i^post7, (0 == 0 /\ i^1 == 0 /\ __const_20^0-__const_20^post8 == 0 /\ -i^post8+i^0 == 0 /\ -__const_20^post7+__const_20^post8 == 0), cost: 1
	New rule:
	l6 -> l4 : __const_20^0'=__const_20^post8, i^0'=i^post7, (0 == 0 /\ i^1 == 0 /\ __const_20^0-__const_20^post8 == 0 /\ -i^post8+i^0 == 0), cost: 1
	
		propagated equality __const_20^post7 = __const_20^post8
		
	Propagated Equalities

	Original rule:
	l6 -> l4 : __const_20^0'=__const_20^post8, i^0'=i^post7, (0 == 0 /\ i^1 == 0 /\ __const_20^0-__const_20^post8 == 0 /\ -i^post8+i^0 == 0), cost: 1
	New rule:
	l6 -> l4 : __const_20^0'=__const_20^0, i^0'=i^post7, 0 == 0, cost: 1
	
		propagated equality i^1 = 0
		
		propagated equality __const_20^post8 = __const_20^0
		
		propagated equality i^post8 = i^0
		
	Simplified Guard

	Original rule:
	l6 -> l4 : __const_20^0'=__const_20^0, i^0'=i^post7, 0 == 0, cost: 1
	New rule:
	l6 -> l4 : __const_20^0'=__const_20^0, i^0'=i^post7, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l6 -> l4 : __const_20^0'=__const_20^0, i^0'=i^post7, T, cost: 1
	New rule:
	l6 -> l4 : i^0'=i^post7, T, cost: 1

Step with 15

	Trace

	15[T]
	
	Blocked

	[{}, {}]

Step with 12

	Trace

	15[T], 12[(i^0 <= 0)]
	
	Blocked

	[{}, {}, {}]

Step with 9

	Trace

	15[T], 12[(i^0 <= 0)], 9[T]
	
	Blocked

	[{}, {}, {}, {}]

Backtrack

	Trace

	15[T], 12[(i^0 <= 0)]
	
	Blocked

	[{}, {}, {9[T]}]

Backtrack

	Trace

	15[T]
	
	Blocked

	[{}, {12[T]}]

Step with 13

	Trace

	15[T], 13[(1-i^0 <= 0)]
	
	Blocked

	[{}, {12[T]}, {}]

Step with 14

	Trace

	15[T], 13[(1-i^0 <= 0)], 14[T]
	
	Blocked

	[{}, {12[T]}, {}, {}]

Step with 10

	Trace

	15[T], 13[(1-i^0 <= 0)], 14[T], 10[(-i^0+__const_20^0 <= 0)]
	
	Blocked

	[{}, {12[T]}, {}, {}, {}]

Step with 9

	Trace

	15[T], 13[(1-i^0 <= 0)], 14[T], 10[(-i^0+__const_20^0 <= 0)], 9[T]
	
	Blocked

	[{}, {12[T]}, {}, {}, {}, {}]

Backtrack

	Trace

	15[T], 13[(1-i^0 <= 0)], 14[T], 10[(-i^0+__const_20^0 <= 0)]
	
	Blocked

	[{}, {12[T]}, {}, {}, {9[T]}]

Backtrack

	Trace

	15[T], 13[(1-i^0 <= 0)], 14[T]
	
	Blocked

	[{}, {12[T]}, {}, {10[T]}]

Step with 11

	Trace

	15[T], 13[(1-i^0 <= 0)], 14[T], 11[(1+i^0-__const_20^0 <= 0)]
	
	Blocked

	[{}, {12[T]}, {}, {10[T]}, {}]

Accelerate

Start location: l6
Program variables: __const_20^0 i^0
   9: l0 -> l1 : T, cost: 1
  10: l2 -> l0 : -i^0+__const_20^0 <= 0, cost: 1
  11: l2 -> l3 : i^0'=1+i^0, 1+i^0-__const_20^0 <= 0, cost: 1
  14: l3 -> l2 : T, cost: 1
  16: l3 -> l3 : i^0'=i^0+n, (-1+n >= 0 /\ -i^0-n+__const_20^0 >= 0), cost: 1
  12: l4 -> l0 : i^0 <= 0, cost: 1
  13: l4 -> l3 : 1-i^0 <= 0, cost: 1
  15: l6 -> l4 : i^0'=i^post7, T, cost: 1

	Loop Acceleration

	Original rule:
	l3 -> l3 : i^0'=1+i^0, 1+i^0-__const_20^0 <= 0, cost: 1
	New rule:
	l3 -> l3 : i^0'=i^0+n, (-1+n >= 0 /\ -i^0-n+__const_20^0 >= 0), cost: 1

		-1-i^0+__const_20^0 >= 0 [0]: montonic decrease yields -i^0-n+__const_20^0 >= 0
		
		-1-i^0+__const_20^0 >= 0 [1]: eventual increase yields (1 <= 0 /\ -1-i^0+__const_20^0 >= 0)
		
		Replacement map: {-1-i^0+__const_20^0 >= 0 -> -i^0-n+__const_20^0 >= 0}

	Trace

	15[T], 13[(1-i^0 <= 0)], 16[(-1+n >= 0 /\ -i^0-n+__const_20^0 >= 0)]
	
	Blocked

	[{}, {12[T]}, {}, {16[T]}]

Step with 14

	Trace

	15[T], 13[(1-i^0 <= 0)], 16[(-1+n >= 0 /\ -i^0-n+__const_20^0 >= 0)], 14[T]
	
	Blocked

	[{}, {12[T]}, {}, {16[T]}, {}]

Step with 11

	Trace

	15[T], 13[(1-i^0 <= 0)], 16[(-1+n >= 0 /\ -i^0-n+__const_20^0 >= 0)], 14[T], 11[(1+i^0-__const_20^0 <= 0)]
	
	Blocked

	[{}, {12[T]}, {}, {16[T]}, {}, {}]

Covered

	Trace

	15[T], 13[(1-i^0 <= 0)], 16[(-1+n >= 0 /\ -i^0-n+__const_20^0 >= 0)], 14[T]
	
	Blocked

	[{}, {12[T]}, {}, {16[T]}, {11[T]}]

Step with 10

	Trace

	15[T], 13[(1-i^0 <= 0)], 16[(-1+n >= 0 /\ -i^0-n+__const_20^0 >= 0)], 14[T], 10[(-i^0+__const_20^0 <= 0)]
	
	Blocked

	[{}, {12[T]}, {}, {16[T]}, {11[T]}, {}]

Step with 9

	Trace

	15[T], 13[(1-i^0 <= 0)], 16[(-1+n >= 0 /\ -i^0-n+__const_20^0 >= 0)], 14[T], 10[(-i^0+__const_20^0 <= 0)], 9[T]
	
	Blocked

	[{}, {12[T]}, {}, {16[T]}, {11[T]}, {}, {}]

Backtrack

	Trace

	15[T], 13[(1-i^0 <= 0)], 16[(-1+n >= 0 /\ -i^0-n+__const_20^0 >= 0)], 14[T], 10[(-i^0+__const_20^0 <= 0)]
	
	Blocked

	[{}, {12[T]}, {}, {16[T]}, {11[T]}, {9[T]}]

Backtrack

	Trace

	15[T], 13[(1-i^0 <= 0)], 16[(-1+n >= 0 /\ -i^0-n+__const_20^0 >= 0)], 14[T]
	
	Blocked

	[{}, {12[T]}, {}, {16[T]}, {10[T], 11[T]}]

Backtrack

	Trace

	15[T], 13[(1-i^0 <= 0)], 16[(-1+n >= 0 /\ -i^0-n+__const_20^0 >= 0)]
	
	Blocked

	[{}, {12[T]}, {}, {14[T], 16[T]}]

Backtrack

	Trace

	15[T], 13[(1-i^0 <= 0)]
	
	Blocked

	[{}, {12[T]}, {16[T]}]

Step with 14

	Trace

	15[T], 13[(1-i^0 <= 0)], 14[T]
	
	Blocked

	[{}, {12[T]}, {16[T]}, {}]

Step with 10

	Trace

	15[T], 13[(1-i^0 <= 0)], 14[T], 10[(-i^0+__const_20^0 <= 0)]
	
	Blocked

	[{}, {12[T]}, {16[T]}, {}, {}]

Step with 9

	Trace

	15[T], 13[(1-i^0 <= 0)], 14[T], 10[(-i^0+__const_20^0 <= 0)], 9[T]
	
	Blocked

	[{}, {12[T]}, {16[T]}, {}, {}, {}]

Backtrack

	Trace

	15[T], 13[(1-i^0 <= 0)], 14[T], 10[(-i^0+__const_20^0 <= 0)]
	
	Blocked

	[{}, {12[T]}, {16[T]}, {}, {9[T]}]

Backtrack

	Trace

	15[T], 13[(1-i^0 <= 0)], 14[T]
	
	Blocked

	[{}, {12[T]}, {16[T]}, {10[T]}]

Step with 11

	Trace

	15[T], 13[(1-i^0 <= 0)], 14[T], 11[(1+i^0-__const_20^0 <= 0)]
	
	Blocked

	[{}, {12[T]}, {16[T]}, {10[T]}, {}]

Covered

	Trace

	15[T], 13[(1-i^0 <= 0)], 14[T]
	
	Blocked

	[{}, {12[T]}, {16[T]}, {10[T], 11[T]}]

Backtrack

	Trace

	15[T], 13[(1-i^0 <= 0)]
	
	Blocked

	[{}, {12[T]}, {14[T], 16[T]}]

Backtrack

	Trace

	15[T]
	
	Blocked

	[{}, {12[T], 13[T]}]

Backtrack

	Trace

	Blocked

	[{15[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
