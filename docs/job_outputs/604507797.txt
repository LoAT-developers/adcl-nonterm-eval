unknown

Initial ITS

Start location: __init
Program variables: arg1 arg2
   0: f1_0_main_Load -> f48_0_up_GE : arg1'=arg1p1, arg2'=arg2p1, (-arg1p1+arg2 == 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 1
   1: f48_0_up_GE -> f48_0_up_GE\' : arg1'=arg1p2, arg2'=arg2p2, (arg1-arg1p2 == 0 /\ -15+arg1 < 0), cost: 1
   2: f48_0_up_GE\' -> f48_0_up_GE : arg1'=arg1p3, arg2'=arg2p3, (-9-10*x4+arg1 < 0 /\ 1-10*x4+arg1 >= 0 /\ -15+arg1 < 0 /\ 1-10*x4+arg1-arg1p3 == 0), cost: 1
   3: __init -> f1_0_main_Load : arg1'=arg1p4, arg2'=arg2p4, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2
   5: f48_0_up_GE -> f48_0_up_GE : arg1'=arg1p3, arg2'=arg2p3, (-15+arg1p2 < 0 /\ arg1-arg1p2 == 0 /\ 1-10*x4-arg1p3+arg1p2 == 0 /\ 1-10*x4+arg1p2 >= 0 /\ -15+arg1 < 0 /\ -9-10*x4+arg1p2 < 0), cost: 1
   4: __init -> f48_0_up_GE : arg1'=arg1p1, arg2'=arg2p1, (1+arg2p4 > 0 /\ arg1p4 > 0 /\ -arg1p1+arg2p4 == 0), cost: 1

	Eliminating location f1_0_main_Load by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_Load : arg1'=arg1p4, arg2'=arg2p4, T, cost: 1
	Second rule:
	f1_0_main_Load -> f48_0_up_GE : arg1'=arg1p1, arg2'=arg2p1, (-arg1p1+arg2 == 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 1
	New rule:
	__init -> f48_0_up_GE : arg1'=arg1p1, arg2'=arg2p1, (1+arg2p4 > 0 /\ arg1p4 > 0 /\ -arg1p1+arg2p4 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 3
	
	Eliminating location f48_0_up_GE\' by chaining:

	Applied chaining

	First rule:
	f48_0_up_GE -> f48_0_up_GE\' : arg1'=arg1p2, arg2'=arg2p2, (arg1-arg1p2 == 0 /\ -15+arg1 < 0), cost: 1
	Second rule:
	f48_0_up_GE\' -> f48_0_up_GE : arg1'=arg1p3, arg2'=arg2p3, (-9-10*x4+arg1 < 0 /\ 1-10*x4+arg1 >= 0 /\ -15+arg1 < 0 /\ 1-10*x4+arg1-arg1p3 == 0), cost: 1
	New rule:
	f48_0_up_GE -> f48_0_up_GE : arg1'=arg1p3, arg2'=arg2p3, (-15+arg1p2 < 0 /\ arg1-arg1p2 == 0 /\ 1-10*x4-arg1p3+arg1p2 == 0 /\ 1-10*x4+arg1p2 >= 0 /\ -15+arg1 < 0 /\ -9-10*x4+arg1p2 < 0), cost: 1
	
	Applied deletion

	Removed the following rules: 1 2

Simplified Transitions

Start location: __init
Program variables: arg1 arg2
   7: f48_0_up_GE -> f48_0_up_GE : arg1'=1-10*x4+arg1, arg2'=arg2p3, (-9-10*x4+arg1 < 0 /\ 1-10*x4+arg1 >= 0 /\ -15+arg1 < 0), cost: 1
   6: __init -> f48_0_up_GE : arg1'=arg2p4, arg2'=arg2p1, (1+arg2p4 > 0), cost: 1

	Propagated Equalities

	Original rule:
	__init -> f48_0_up_GE : arg1'=arg1p1, arg2'=arg2p1, (1+arg2p4 > 0 /\ arg1p4 > 0 /\ -arg1p1+arg2p4 == 0), cost: 1
	New rule:
	__init -> f48_0_up_GE : arg1'=arg2p4, arg2'=arg2p1, (0 == 0 /\ 1+arg2p4 > 0 /\ arg1p4 > 0), cost: 1
	
		propagated equality arg1p1 = arg2p4
		
	Simplified Guard

	Original rule:
	__init -> f48_0_up_GE : arg1'=arg2p4, arg2'=arg2p1, (0 == 0 /\ 1+arg2p4 > 0 /\ arg1p4 > 0), cost: 1
	New rule:
	__init -> f48_0_up_GE : arg1'=arg2p4, arg2'=arg2p1, (1+arg2p4 > 0 /\ arg1p4 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	__init -> f48_0_up_GE : arg1'=arg2p4, arg2'=arg2p1, (1+arg2p4 > 0 /\ arg1p4 > 0), cost: 1
	New rule:
	__init -> f48_0_up_GE : arg1'=arg2p4, arg2'=arg2p1, (1+arg2p4 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f48_0_up_GE -> f48_0_up_GE : arg1'=arg1p3, arg2'=arg2p3, (-15+arg1p2 < 0 /\ arg1-arg1p2 == 0 /\ 1-10*x4-arg1p3+arg1p2 == 0 /\ 1-10*x4+arg1p2 >= 0 /\ -15+arg1 < 0 /\ -9-10*x4+arg1p2 < 0), cost: 1
	New rule:
	f48_0_up_GE -> f48_0_up_GE : arg1'=1-10*x4+arg1p2, arg2'=arg2p3, (0 == 0 /\ -15+arg1p2 < 0 /\ arg1-arg1p2 == 0 /\ 1-10*x4+arg1p2 >= 0 /\ -15+arg1 < 0 /\ -9-10*x4+arg1p2 < 0), cost: 1
	
		propagated equality arg1p3 = 1-10*x4+arg1p2
		
	Propagated Equalities

	Original rule:
	f48_0_up_GE -> f48_0_up_GE : arg1'=1-10*x4+arg1p2, arg2'=arg2p3, (0 == 0 /\ -15+arg1p2 < 0 /\ arg1-arg1p2 == 0 /\ 1-10*x4+arg1p2 >= 0 /\ -15+arg1 < 0 /\ -9-10*x4+arg1p2 < 0), cost: 1
	New rule:
	f48_0_up_GE -> f48_0_up_GE : arg1'=1-10*x4+arg1, arg2'=arg2p3, (0 == 0 /\ -9-10*x4+arg1 < 0 /\ 1-10*x4+arg1 >= 0 /\ -15+arg1 < 0), cost: 1
	
		propagated equality arg1p2 = arg1
		
	Simplified Guard

	Original rule:
	f48_0_up_GE -> f48_0_up_GE : arg1'=1-10*x4+arg1, arg2'=arg2p3, (0 == 0 /\ -9-10*x4+arg1 < 0 /\ 1-10*x4+arg1 >= 0 /\ -15+arg1 < 0), cost: 1
	New rule:
	f48_0_up_GE -> f48_0_up_GE : arg1'=1-10*x4+arg1, arg2'=arg2p3, (-9-10*x4+arg1 < 0 /\ 1-10*x4+arg1 >= 0 /\ -15+arg1 < 0), cost: 1

Step with 6

	Trace

	6[(1+arg2p4 > 0)]
	
	Blocked

	[{}, {}]

Step with 7

	Trace

	6[(1+arg2p4 > 0)], 7[(-9-10*x4+arg1 < 0 /\ 1-10*x4+arg1 >= 0 /\ -15+arg1 < 0)]
	
	Blocked

	[{}, {}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2
   7: f48_0_up_GE -> f48_0_up_GE : arg1'=1-10*x4+arg1, arg2'=arg2p3, (-9-10*x4+arg1 < 0 /\ 1-10*x4+arg1 >= 0 /\ -15+arg1 < 0), cost: 1
   8: f48_0_up_GE -> f48_0_up_GE : arg1'=n+arg1-10*n*x4, arg2'=arg2p3, (15-arg1 > 0 /\ 9+10*x4-arg1 > 0 /\ -1+n >= 0 /\ 1-10*x4+arg1 >= 0 /\ 1-10*x4 <= 0 /\ -10*(-1+n)*x4+n-10*x4+arg1 >= 0), cost: 1
   6: __init -> f48_0_up_GE : arg1'=arg2p4, arg2'=arg2p1, (1+arg2p4 > 0), cost: 1

	Loop Acceleration

	Original rule:
	f48_0_up_GE -> f48_0_up_GE : arg1'=1-10*x4+arg1, arg2'=arg2p3, (-9-10*x4+arg1 < 0 /\ 1-10*x4+arg1 >= 0 /\ -15+arg1 < 0), cost: 1
	New rule:
	f48_0_up_GE -> f48_0_up_GE : arg1'=n+arg1-10*n*x4, arg2'=arg2p3, (15-arg1 > 0 /\ 9+10*x4-arg1 > 0 /\ -1+n >= 0 /\ 1-10*x4+arg1 >= 0 /\ 1-10*x4 <= 0 /\ -10*(-1+n)*x4+n-10*x4+arg1 >= 0), cost: 1

		15-arg1 > 0 [0]: monotonic increase yields 15-arg1 > 0, dependencies: 9+10*x4-arg1 > 0
		
		15-arg1 > 0 [1]: eventual decrease yields (15-arg1 > 0 /\ 16+10*(-1+n)*x4-n-arg1 > 0)
		
		15-arg1 > 0 [2]: eventual increase yields (15-arg1 > 0 /\ 1-10*x4 <= 0)
		
		9+10*x4-arg1 > 0 [0]: montonic decrease yields 10+10*(-1+n)*x4-n+10*x4-arg1 > 0, dependencies: 15-arg1 > 0
		
		9+10*x4-arg1 > 0 [1]: eventual increase yields (9+10*x4-arg1 > 0 /\ 1-10*x4 <= 0)
		
		1-10*x4+arg1 >= 0 [0]: eventual decrease yields (1-10*x4+arg1 >= 0 /\ -10*(-1+n)*x4+n-10*x4+arg1 >= 0)
		
		1-10*x4+arg1 >= 0 [1]: eventual increase yields (-1+10*x4 <= 0 /\ 1-10*x4+arg1 >= 0)
		
		Replacement map: {15-arg1 > 0 -> 15-arg1 > 0, 9+10*x4-arg1 > 0 -> (9+10*x4-arg1 > 0 /\ 1-10*x4 <= 0), 1-10*x4+arg1 >= 0 -> (1-10*x4+arg1 >= 0 /\ -10*(-1+n)*x4+n-10*x4+arg1 >= 0)}

	Trace

	6[(1+arg2p4 > 0)], 8[(15-arg1 > 0 /\ 9+10*x4-arg1 > 0 /\ -1+n >= 0 /\ 1-10*x4+arg1 >= 0 /\ 1-10*x4 <= 0 /\ -10*(-1+n)*x4+n-10*x4+arg1 >= 0)]
	
	Blocked

	[{}, {}, {7[T], 8[T]}]

Backtrack

	Trace

	6[(1+arg2p4 > 0)]
	
	Blocked

	[{}, {8[T]}]

Step with 7

	Trace

	6[(1+arg2p4 > 0)], 7[(-9-10*x4+arg1 < 0 /\ 1-10*x4+arg1 >= 0 /\ -15+arg1 < 0)]
	
	Blocked

	[{}, {8[T]}, {}]

Covered

	Trace

	6[(1+arg2p4 > 0)]
	
	Blocked

	[{}, {7[T], 8[T]}]

Backtrack

	Trace

	Blocked

	[{6[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
