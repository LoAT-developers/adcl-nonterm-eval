NO

Initial ITS
Start location: __init
   0: f1_0_main_Load -> f47_0_increase_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2 > 0 /\ arg1 > 0 /\ arg2-arg1P0 == 0), cost: 1
   1: f47_0_increase_LE -> f47_0_increase_LE : arg2'=arg2P1, arg1'=arg1P1, (-4+arg1 < 0 /\ -1+arg1-arg1P1 == 0 /\ arg1 > 0), cost: 1
   2: f47_0_increase_LE -> f47_0_increase_LE : arg2'=arg2P2, arg1'=arg1P2, (-3+arg1 > 0 /\ 1+arg1-arg1P2 == 0), cost: 1
   3: __init -> f1_0_main_Load : arg2'=arg2P3, arg1'=arg1P3, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_Load -> f47_0_increase_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2 > 0 /\ arg1 > 0 /\ arg2-arg1P0 == 0), cost: 1
New rule:
f1_0_main_Load -> f47_0_increase_LE : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f47_0_increase_LE -> f47_0_increase_LE : arg2'=arg2P1, arg1'=arg1P1, (-4+arg1 < 0 /\ -1+arg1-arg1P1 == 0 /\ arg1 > 0), cost: 1
New rule:
f47_0_increase_LE -> f47_0_increase_LE : arg2'=arg2P1, arg1'=-1+arg1, (4-arg1 > 0 /\ arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f47_0_increase_LE -> f47_0_increase_LE : arg2'=arg2P2, arg1'=arg1P2, (-3+arg1 > 0 /\ 1+arg1-arg1P2 == 0), cost: 1
New rule:
f47_0_increase_LE -> f47_0_increase_LE : arg2'=arg2P2, arg1'=1+arg1, -3+arg1 > 0, cost: 1

Simplified rules
Start location: __init
   4: f1_0_main_Load -> f47_0_increase_LE : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
   5: f47_0_increase_LE -> f47_0_increase_LE : arg2'=arg2P1, arg1'=-1+arg1, (4-arg1 > 0 /\ arg1 > 0), cost: 1
   6: f47_0_increase_LE -> f47_0_increase_LE : arg2'=arg2P2, arg1'=1+arg1, -3+arg1 > 0, cost: 1
   3: __init -> f1_0_main_Load : arg2'=arg2P3, arg1'=arg1P3, TRUE, cost: 1


Applied acceleration
Original rule:
f47_0_increase_LE -> f47_0_increase_LE : arg2'=arg2P1, arg1'=-1+arg1, (4-arg1 > 0 /\ arg1 > 0), cost: 1
New rule:
f47_0_increase_LE -> f47_0_increase_LE : arg2'=arg2P1, arg1'=arg1-n, (4-arg1 > 0 /\ 1+arg1-n > 0 /\ -1+n >= 0), cost: n
Sub-proof via acceration calculus written to file:///tmp/tmpnam_bnGdiD.txt

Applied instantiation
Original rule:
f47_0_increase_LE -> f47_0_increase_LE : arg2'=arg2P1, arg1'=arg1-n, (4-arg1 > 0 /\ 1+arg1-n > 0 /\ -1+n >= 0), cost: n
New rule:
f47_0_increase_LE -> f47_0_increase_LE : arg2'=arg2P1, arg1'=0, (1 > 0 /\ 4-arg1 > 0 /\ -1+arg1 >= 0), cost: arg1

Applied nonterm
Original rule:
f47_0_increase_LE -> f47_0_increase_LE : arg2'=arg2P2, arg1'=1+arg1, -3+arg1 > 0, cost: 1
New rule:
f47_0_increase_LE -> [3] : (-3+arg1 > 0 /\ -1+n0 >= 0), cost: NONTERM
Sub-proof via acceration calculus written to file:///tmp/tmpnam_eaBhnj.txt

Applied simplification
Original rule:
f47_0_increase_LE -> f47_0_increase_LE : arg2'=arg2P1, arg1'=0, (1 > 0 /\ 4-arg1 > 0 /\ -1+arg1 >= 0), cost: arg1
New rule:
f47_0_increase_LE -> f47_0_increase_LE : arg2'=arg2P1, arg1'=0, (4-arg1 > 0 /\ -1+arg1 >= 0), cost: arg1

Applied deletion
Removed the following rules: 5 6

Accelerated simple loops
Start location: __init
   4: f1_0_main_Load -> f47_0_increase_LE : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
   8: f47_0_increase_LE -> [3] : (-3+arg1 > 0 /\ -1+n0 >= 0), cost: NONTERM
   9: f47_0_increase_LE -> f47_0_increase_LE : arg2'=arg2P1, arg1'=0, (4-arg1 > 0 /\ -1+arg1 >= 0), cost: arg1
   3: __init -> f1_0_main_Load : arg2'=arg2P3, arg1'=arg1P3, TRUE, cost: 1


Applied chaining
First rule:
f1_0_main_Load -> f47_0_increase_LE : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
Second rule:
f47_0_increase_LE -> [3] : (-3+arg1 > 0 /\ -1+n0 >= 0), cost: NONTERM
New rule:
f1_0_main_Load -> [3] : (-3+arg2 > 0 /\ arg1 > 0), cost: NONTERM

Applied chaining
First rule:
f1_0_main_Load -> f47_0_increase_LE : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
Second rule:
f47_0_increase_LE -> f47_0_increase_LE : arg2'=arg2P1, arg1'=0, (4-arg1 > 0 /\ -1+arg1 >= 0), cost: arg1
New rule:
f1_0_main_Load -> f47_0_increase_LE : arg2'=arg2P1, arg1'=0, (4-arg2 > 0 /\ arg1 > 0 /\ -1+arg2 >= 0), cost: 1+arg2

Applied deletion
Removed the following rules: 8 9

Chained accelerated rules with incoming rules
Start location: __init
   4: f1_0_main_Load -> f47_0_increase_LE : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
  10: f1_0_main_Load -> [3] : (-3+arg2 > 0 /\ arg1 > 0), cost: NONTERM
  11: f1_0_main_Load -> f47_0_increase_LE : arg2'=arg2P1, arg1'=0, (4-arg2 > 0 /\ arg1 > 0 /\ -1+arg2 >= 0), cost: 1+arg2
   3: __init -> f1_0_main_Load : arg2'=arg2P3, arg1'=arg1P3, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
  10: f1_0_main_Load -> [3] : (-3+arg2 > 0 /\ arg1 > 0), cost: NONTERM
   3: __init -> f1_0_main_Load : arg2'=arg2P3, arg1'=arg1P3, TRUE, cost: 1


Eliminating location f1_0_main_Load by chaining:

Applied chaining
First rule:
__init -> f1_0_main_Load : arg2'=arg2P3, arg1'=arg1P3, TRUE, cost: 1
Second rule:
f1_0_main_Load -> [3] : (-3+arg2 > 0 /\ arg1 > 0), cost: NONTERM
New rule:
__init -> [3] : (arg1P3 > 0 /\ -3+arg2P3 > 0), cost: NONTERM

Applied deletion
Removed the following rules: 3 10

Eliminated locations on linear paths
Start location: __init
  12: __init -> [3] : (arg1P3 > 0 /\ -3+arg2P3 > 0), cost: NONTERM


Computing asymptotic complexity
Proved nontermination of rule 12 via SMT.

Proved the following lower bound
Complexity:  Nonterm
Cpx degree: Nonterm

Solved cost: NONTERM
Rule cost:   NONTERM
Rule guard:  (arg1P3 > 0 /\ -3+arg2P3 > 0)
