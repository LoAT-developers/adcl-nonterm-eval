NO

Initial ITS
Start location: __init
   0: f1_0_main_ConstantStackPush -> f56_0_sum_NE : arg1'=arg1P0, -1-arg1P0 == 0, cost: 1
   1: f56_0_sum_NE -> f56_0_sum_NE : arg1'=arg1P1, (-1-arg1P1+arg1 == 0 /\ arg1 < 0 /\ -1 < 0), cost: 1
   2: f56_0_sum_NE -> f56_0_sum_NE : arg1'=arg1P2, (arg1 > 0 /\ -1-arg1P2+arg1 == 0 /\ -1 < 0), cost: 1
   3: __init -> f1_0_main_ConstantStackPush : arg1'=arg1P3, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_ConstantStackPush -> f56_0_sum_NE : arg1'=arg1P0, -1-arg1P0 == 0, cost: 1
New rule:
f1_0_main_ConstantStackPush -> f56_0_sum_NE : arg1'=-1, TRUE, cost: 1

Applied preprocessing
Original rule:
f56_0_sum_NE -> f56_0_sum_NE : arg1'=arg1P1, (-1-arg1P1+arg1 == 0 /\ arg1 < 0 /\ -1 < 0), cost: 1
New rule:
f56_0_sum_NE -> f56_0_sum_NE : arg1'=-1+arg1, -arg1 > 0, cost: 1

Applied preprocessing
Original rule:
f56_0_sum_NE -> f56_0_sum_NE : arg1'=arg1P2, (arg1 > 0 /\ -1-arg1P2+arg1 == 0 /\ -1 < 0), cost: 1
New rule:
f56_0_sum_NE -> f56_0_sum_NE : arg1'=-1+arg1, arg1 > 0, cost: 1

Simplified rules
Start location: __init
   4: f1_0_main_ConstantStackPush -> f56_0_sum_NE : arg1'=-1, TRUE, cost: 1
   5: f56_0_sum_NE -> f56_0_sum_NE : arg1'=-1+arg1, -arg1 > 0, cost: 1
   6: f56_0_sum_NE -> f56_0_sum_NE : arg1'=-1+arg1, arg1 > 0, cost: 1
   3: __init -> f1_0_main_ConstantStackPush : arg1'=arg1P3, TRUE, cost: 1


Applied nonterm
Original rule:
f56_0_sum_NE -> f56_0_sum_NE : arg1'=-1+arg1, -arg1 > 0, cost: 1
New rule:
f56_0_sum_NE -> [3] : (n >= 0 /\ -arg1 > 0), cost: NONTERM
Sub-proof via acceration calculus written to file:///tmp/tmpnam_aLBAfd.txt

Applied acceleration
Original rule:
f56_0_sum_NE -> f56_0_sum_NE : arg1'=-1+arg1, arg1 > 0, cost: 1
New rule:
f56_0_sum_NE -> f56_0_sum_NE : arg1'=-n0+arg1, (n0 >= 0 /\ 1-n0+arg1 > 0), cost: n0
Sub-proof via acceration calculus written to file:///tmp/tmpnam_MpKibI.txt

Applied instantiation
Original rule:
f56_0_sum_NE -> f56_0_sum_NE : arg1'=-n0+arg1, (n0 >= 0 /\ 1-n0+arg1 > 0), cost: n0
New rule:
f56_0_sum_NE -> f56_0_sum_NE : arg1'=0, (1 > 0 /\ arg1 >= 0), cost: arg1

Applied simplification
Original rule:
f56_0_sum_NE -> f56_0_sum_NE : arg1'=0, (1 > 0 /\ arg1 >= 0), cost: arg1
New rule:
f56_0_sum_NE -> f56_0_sum_NE : arg1'=0, arg1 >= 0, cost: arg1

Applied deletion
Removed the following rules: 5 6

Accelerated simple loops
Start location: __init
   4: f1_0_main_ConstantStackPush -> f56_0_sum_NE : arg1'=-1, TRUE, cost: 1
   7: f56_0_sum_NE -> [3] : (n >= 0 /\ -arg1 > 0), cost: NONTERM
   9: f56_0_sum_NE -> f56_0_sum_NE : arg1'=0, arg1 >= 0, cost: arg1
   3: __init -> f1_0_main_ConstantStackPush : arg1'=arg1P3, TRUE, cost: 1


Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f56_0_sum_NE : arg1'=-1, TRUE, cost: 1
Second rule:
f56_0_sum_NE -> [3] : (n >= 0 /\ -arg1 > 0), cost: NONTERM
New rule:
f1_0_main_ConstantStackPush -> [3] : 1 > 0, cost: NONTERM

Applied deletion
Removed the following rules: 7 9

Chained accelerated rules with incoming rules
Start location: __init
   4: f1_0_main_ConstantStackPush -> f56_0_sum_NE : arg1'=-1, TRUE, cost: 1
  10: f1_0_main_ConstantStackPush -> [3] : 1 > 0, cost: NONTERM
   3: __init -> f1_0_main_ConstantStackPush : arg1'=arg1P3, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
  10: f1_0_main_ConstantStackPush -> [3] : 1 > 0, cost: NONTERM
   3: __init -> f1_0_main_ConstantStackPush : arg1'=arg1P3, TRUE, cost: 1


Eliminating location f1_0_main_ConstantStackPush by chaining:

Applied chaining
First rule:
__init -> f1_0_main_ConstantStackPush : arg1'=arg1P3, TRUE, cost: 1
Second rule:
f1_0_main_ConstantStackPush -> [3] : 1 > 0, cost: NONTERM
New rule:
__init -> [3] : 1 > 0, cost: NONTERM

Applied deletion
Removed the following rules: 3 10

Eliminated locations on linear paths
Start location: __init
  11: __init -> [3] : 1 > 0, cost: NONTERM


Computing asymptotic complexity
Proved nontermination of rule 11 via SMT.

Proved the following lower bound
Complexity:  Nonterm
Cpx degree: Nonterm

Solved cost: NONTERM
Rule cost:   NONTERM
Rule guard:  1 > 0
