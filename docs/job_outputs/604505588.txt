NO

Initial ITS
Start location: __init
   0: f1_0_main_Load -> f104_0_loop_EQ : arg2'=arg2P0, arg1'=arg1P0, (1+arg2 > 0 /\ arg1 > 0 /\ arg2-arg1P0 == 0), cost: 1
   1: f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2P1, arg1'=arg1P1, (-5+arg1 < 0 /\ arg1 < 0 /\ 1-arg1-arg1P1 == 0), cost: 1
   2: f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2P2, arg1'=arg1P2, (1-arg1-arg1P2 == 0 /\ -5+arg1 < 0 /\ arg1 > 0), cost: 1
   3: f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2P3, arg1'=arg1P3, (-4+arg1 > 0 /\ 2+arg1 > 0 /\ -1-arg1P3-arg1 == 0), cost: 1
   4: __init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_Load -> f104_0_loop_EQ : arg2'=arg2P0, arg1'=arg1P0, (1+arg2 > 0 /\ arg1 > 0 /\ arg2-arg1P0 == 0), cost: 1
New rule:
f1_0_main_Load -> f104_0_loop_EQ : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2P1, arg1'=arg1P1, (-5+arg1 < 0 /\ arg1 < 0 /\ 1-arg1-arg1P1 == 0), cost: 1
New rule:
f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2P1, arg1'=1-arg1, -arg1 > 0, cost: 1

Applied preprocessing
Original rule:
f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2P2, arg1'=arg1P2, (1-arg1-arg1P2 == 0 /\ -5+arg1 < 0 /\ arg1 > 0), cost: 1
New rule:
f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2P2, arg1'=1-arg1, (5-arg1 > 0 /\ arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2P3, arg1'=arg1P3, (-4+arg1 > 0 /\ 2+arg1 > 0 /\ -1-arg1P3-arg1 == 0), cost: 1
New rule:
f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2P3, arg1'=-1-arg1, -4+arg1 > 0, cost: 1

Simplified rules
Start location: __init
   5: f1_0_main_Load -> f104_0_loop_EQ : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
   6: f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2P1, arg1'=1-arg1, -arg1 > 0, cost: 1
   7: f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2P2, arg1'=1-arg1, (5-arg1 > 0 /\ arg1 > 0), cost: 1
   8: f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2P3, arg1'=-1-arg1, -4+arg1 > 0, cost: 1
   4: __init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, TRUE, cost: 1


Applied chaining
First rule:
f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2P3, arg1'=-1-arg1, -4+arg1 > 0, cost: 1
Second rule:
f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2P1, arg1'=1-arg1, -arg1 > 0, cost: 1
New rule:
f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2P1, arg1'=2+arg1, -4+arg1 > 0, cost: 2

Applied nonterm
Original rule:
f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2P1, arg1'=2+arg1, -4+arg1 > 0, cost: 2
New rule:
f104_0_loop_EQ -> [3] : (-4+arg1 > 0 /\ -1+n >= 0), cost: NONTERM
Sub-proof via acceration calculus written to file:///tmp/tmpnam_aKgpkA.txt

Applied chaining
First rule:
f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2P1, arg1'=1-arg1, -arg1 > 0, cost: 1
Second rule:
f104_0_loop_EQ -> [3] : (-4+arg1 > 0 /\ -1+n >= 0), cost: NONTERM
New rule:
f104_0_loop_EQ -> [3] : (-1+n >= 0 /\ -arg1 > 0 /\ -3-arg1 > 0), cost: NONTERM

Applied chaining
First rule:
f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2P2, arg1'=1-arg1, (5-arg1 > 0 /\ arg1 > 0), cost: 1
Second rule:
f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2P1, arg1'=1-arg1, -arg1 > 0, cost: 1
New rule:
f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2P1, (5-arg1 > 0 /\ -1+arg1 > 0), cost: 2

Applied nonterm
Original rule:
f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2P1, (5-arg1 > 0 /\ -1+arg1 > 0), cost: 2
New rule:
f104_0_loop_EQ -> [3] : (5-arg1 > 0 /\ -1+n0 >= 0 /\ -1+arg1 > 0), cost: NONTERM
Sub-proof via acceration calculus written to file:///tmp/tmpnam_llEciD.txt

Applied chaining
First rule:
f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2P1, arg1'=1-arg1, -arg1 > 0, cost: 1
Second rule:
f104_0_loop_EQ -> [3] : (5-arg1 > 0 /\ -1+n0 >= 0 /\ -1+arg1 > 0), cost: NONTERM
New rule:
f104_0_loop_EQ -> [3] : (4+arg1 > 0 /\ -1+n0 >= 0 /\ -arg1 > 0), cost: NONTERM

Applied chaining
First rule:
f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2P1, arg1'=1-arg1, -arg1 > 0, cost: 1
Second rule:
f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2P3, arg1'=-1-arg1, -4+arg1 > 0, cost: 1
New rule:
f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2P3, arg1'=-2+arg1, -3-arg1 > 0, cost: 2

Applied nonterm
Original rule:
f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2P3, arg1'=-2+arg1, -3-arg1 > 0, cost: 2
New rule:
f104_0_loop_EQ -> [3] : (-1+n1 >= 0 /\ -3-arg1 > 0), cost: NONTERM
Sub-proof via acceration calculus written to file:///tmp/tmpnam_fgdKfj.txt

Applied chaining
First rule:
f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2P3, arg1'=-1-arg1, -4+arg1 > 0, cost: 1
Second rule:
f104_0_loop_EQ -> [3] : (-1+n1 >= 0 /\ -3-arg1 > 0), cost: NONTERM
New rule:
f104_0_loop_EQ -> [3] : (-1+n1 >= 0 /\ -2+arg1 > 0 /\ -4+arg1 > 0), cost: NONTERM

Applied chaining
First rule:
f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2P1, arg1'=1-arg1, -arg1 > 0, cost: 1
Second rule:
f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2P2, arg1'=1-arg1, (5-arg1 > 0 /\ arg1 > 0), cost: 1
New rule:
f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2P2, (4+arg1 > 0 /\ -arg1 > 0), cost: 2

Applied nonterm
Original rule:
f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2P2, (4+arg1 > 0 /\ -arg1 > 0), cost: 2
New rule:
f104_0_loop_EQ -> [3] : (4+arg1 > 0 /\ -arg1 > 0 /\ -1+n2 >= 0), cost: NONTERM
Sub-proof via acceration calculus written to file:///tmp/tmpnam_NkFhan.txt

Applied chaining
First rule:
f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2P2, arg1'=1-arg1, (5-arg1 > 0 /\ arg1 > 0), cost: 1
Second rule:
f104_0_loop_EQ -> [3] : (4+arg1 > 0 /\ -arg1 > 0 /\ -1+n2 >= 0), cost: NONTERM
New rule:
f104_0_loop_EQ -> [3] : (5-arg1 > 0 /\ arg1 > 0 /\ -1+n2 >= 0 /\ -1+arg1 > 0), cost: NONTERM

Applied simplification
Original rule:
f104_0_loop_EQ -> [3] : (-1+n >= 0 /\ -arg1 > 0 /\ -3-arg1 > 0), cost: NONTERM
New rule:
f104_0_loop_EQ -> [3] : (-1+n >= 0 /\ -3-arg1 > 0), cost: NONTERM

Applied simplification
Original rule:
f104_0_loop_EQ -> [3] : (-1+n1 >= 0 /\ -2+arg1 > 0 /\ -4+arg1 > 0), cost: NONTERM
New rule:
f104_0_loop_EQ -> [3] : (-1+n1 >= 0 /\ -4+arg1 > 0), cost: NONTERM

Applied simplification
Original rule:
f104_0_loop_EQ -> [3] : (5-arg1 > 0 /\ arg1 > 0 /\ -1+n2 >= 0 /\ -1+arg1 > 0), cost: NONTERM
New rule:
f104_0_loop_EQ -> [3] : (5-arg1 > 0 /\ -1+n2 >= 0 /\ -1+arg1 > 0), cost: NONTERM

Accelerated simple loops
Start location: __init
   5: f1_0_main_Load -> f104_0_loop_EQ : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
   6: f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2P1, arg1'=1-arg1, -arg1 > 0, cost: 1
   7: f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2P2, arg1'=1-arg1, (5-arg1 > 0 /\ arg1 > 0), cost: 1
   8: f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2P3, arg1'=-1-arg1, -4+arg1 > 0, cost: 1
   9: f104_0_loop_EQ -> [3] : (-4+arg1 > 0 /\ -1+n >= 0), cost: NONTERM
  11: f104_0_loop_EQ -> [3] : (5-arg1 > 0 /\ -1+n0 >= 0 /\ -1+arg1 > 0), cost: NONTERM
  12: f104_0_loop_EQ -> [3] : (4+arg1 > 0 /\ -1+n0 >= 0 /\ -arg1 > 0), cost: NONTERM
  13: f104_0_loop_EQ -> [3] : (-1+n1 >= 0 /\ -3-arg1 > 0), cost: NONTERM
  15: f104_0_loop_EQ -> [3] : (4+arg1 > 0 /\ -arg1 > 0 /\ -1+n2 >= 0), cost: NONTERM
  17: f104_0_loop_EQ -> [3] : (-1+n >= 0 /\ -3-arg1 > 0), cost: NONTERM
  18: f104_0_loop_EQ -> [3] : (-1+n1 >= 0 /\ -4+arg1 > 0), cost: NONTERM
  19: f104_0_loop_EQ -> [3] : (5-arg1 > 0 /\ -1+n2 >= 0 /\ -1+arg1 > 0), cost: NONTERM
   4: __init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, TRUE, cost: 1


Applied chaining
First rule:
f1_0_main_Load -> f104_0_loop_EQ : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
Second rule:
f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2P2, arg1'=1-arg1, (5-arg1 > 0 /\ arg1 > 0), cost: 1
New rule:
f1_0_main_Load -> f104_0_loop_EQ : arg2'=arg2P2, arg1'=1-arg2, (5-arg2 > 0 /\ arg2 > 0 /\ arg1 > 0), cost: 2

Applied chaining
First rule:
f1_0_main_Load -> f104_0_loop_EQ : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
Second rule:
f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2P3, arg1'=-1-arg1, -4+arg1 > 0, cost: 1
New rule:
f1_0_main_Load -> f104_0_loop_EQ : arg2'=arg2P3, arg1'=-1-arg2, (-4+arg2 > 0 /\ arg1 > 0), cost: 2

Applied chaining
First rule:
f1_0_main_Load -> f104_0_loop_EQ : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
Second rule:
f104_0_loop_EQ -> [3] : (-4+arg1 > 0 /\ -1+n >= 0), cost: NONTERM
New rule:
f1_0_main_Load -> [3] : (-4+arg2 > 0 /\ arg1 > 0), cost: NONTERM

Applied chaining
First rule:
f1_0_main_Load -> f104_0_loop_EQ : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
Second rule:
f104_0_loop_EQ -> [3] : (5-arg1 > 0 /\ -1+n0 >= 0 /\ -1+arg1 > 0), cost: NONTERM
New rule:
f1_0_main_Load -> [3] : (5-arg2 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: NONTERM

Applied chaining
First rule:
f1_0_main_Load -> f104_0_loop_EQ : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
Second rule:
f104_0_loop_EQ -> [3] : (-1+n1 >= 0 /\ -4+arg1 > 0), cost: NONTERM
New rule:
f1_0_main_Load -> [3] : (-4+arg2 > 0 /\ arg1 > 0), cost: NONTERM

Applied chaining
First rule:
f1_0_main_Load -> f104_0_loop_EQ : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
Second rule:
f104_0_loop_EQ -> [3] : (5-arg1 > 0 /\ -1+n2 >= 0 /\ -1+arg1 > 0), cost: NONTERM
New rule:
f1_0_main_Load -> [3] : (5-arg2 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: NONTERM

Applied deletion
Removed the following rules: 6 7 8 9 11 12 13 15 17 18 19

Chained accelerated rules with incoming rules
Start location: __init
   5: f1_0_main_Load -> f104_0_loop_EQ : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
  20: f1_0_main_Load -> f104_0_loop_EQ : arg2'=arg2P2, arg1'=1-arg2, (5-arg2 > 0 /\ arg2 > 0 /\ arg1 > 0), cost: 2
  21: f1_0_main_Load -> f104_0_loop_EQ : arg2'=arg2P3, arg1'=-1-arg2, (-4+arg2 > 0 /\ arg1 > 0), cost: 2
  22: f1_0_main_Load -> [3] : (-4+arg2 > 0 /\ arg1 > 0), cost: NONTERM
  23: f1_0_main_Load -> [3] : (5-arg2 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: NONTERM
   4: __init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
  22: f1_0_main_Load -> [3] : (-4+arg2 > 0 /\ arg1 > 0), cost: NONTERM
  23: f1_0_main_Load -> [3] : (5-arg2 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: NONTERM
   4: __init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, TRUE, cost: 1


Eliminating location f1_0_main_Load by chaining:

Applied chaining
First rule:
__init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, TRUE, cost: 1
Second rule:
f1_0_main_Load -> [3] : (-4+arg2 > 0 /\ arg1 > 0), cost: NONTERM
New rule:
__init -> [3] : (-4+arg2P4 > 0 /\ arg1P4 > 0), cost: NONTERM

Applied chaining
First rule:
__init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, TRUE, cost: 1
Second rule:
f1_0_main_Load -> [3] : (5-arg2 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: NONTERM
New rule:
__init -> [3] : (5-arg2P4 > 0 /\ -1+arg2P4 > 0 /\ arg1P4 > 0), cost: NONTERM

Applied deletion
Removed the following rules: 4 22 23

Eliminated locations on tree-shaped paths
Start location: __init
  24: __init -> [3] : (-4+arg2P4 > 0 /\ arg1P4 > 0), cost: NONTERM
  25: __init -> [3] : (5-arg2P4 > 0 /\ -1+arg2P4 > 0 /\ arg1P4 > 0), cost: NONTERM


Computing asymptotic complexity
Proved nontermination of rule 24 via SMT.

Proved the following lower bound
Complexity:  Nonterm
Cpx degree: Nonterm

Solved cost: NONTERM
Rule cost:   NONTERM
Rule guard:  (-4+arg2P4 > 0 /\ arg1P4 > 0)
