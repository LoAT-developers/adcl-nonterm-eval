unknown

Initial ITS

Start location: __init
Program variables: arg1 arg2
   0: f1_0_main_Load -> f152_0_gcd_EQ : arg1'=arg1p1, arg2'=arg2p1, (1+arg2 > 0 /\ arg1 > 0 /\ 1+arg1p1 > 0 /\ 1+arg2p1 > 0), cost: 1
   1: f152_0_gcd_EQ -> f207_0_mod_LE : arg1'=arg1p2, arg2'=arg2p2, (-arg2p2+arg2 == 0 /\ arg1 > 0 /\ arg1-arg1p2 == 0 /\ -arg1+arg2 > 0 /\ arg2 > 0), cost: 1
   2: f152_0_gcd_EQ -> f207_0_mod_LE : arg1'=arg1p3, arg2'=arg2p3, (arg1 > 0 /\ -arg1+arg2 < 0 /\ -arg1p3+arg1 == 0 /\ -arg2p3+arg2 == 0 /\ arg2 > 0), cost: 1
   3: f152_0_gcd_EQ -> f152_0_gcd_EQ : arg1'=arg1p4, arg2'=arg2p4, (-arg1 == 0 /\ -arg1p4+arg2 == 0 /\ -arg2p4 == 0 /\ arg2 > 0), cost: 1
   4: f152_0_gcd_EQ -> f152_0_gcd_EQ : arg1'=arg1p5, arg2'=arg2p5, (-arg2p5 == 0 /\ arg1 > 0 /\ arg1-arg1p5 == 0 /\ arg1-arg2 == 0), cost: 1
   5: f207_0_mod_LE -> f207_0_mod_LE : arg1'=arg1p6, arg2'=arg2p6, (-arg2p6+arg2 == 0 /\ -arg1p6+arg1-arg2 == 0 /\ arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0), cost: 1
   6: f207_0_mod_LE -> f152_0_gcd_EQ : arg1'=arg1p7, arg2'=arg2p7, (-arg2p7+arg1 == 0 /\ -arg1+arg2 > 0 /\ -arg1p7+arg2 == 0), cost: 1
   7: __init -> f1_0_main_Load : arg1'=arg1p8, arg2'=arg2p8, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2
   1: f152_0_gcd_EQ -> f207_0_mod_LE : arg1'=arg1p2, arg2'=arg2p2, (-arg2p2+arg2 == 0 /\ arg1 > 0 /\ arg1-arg1p2 == 0 /\ -arg1+arg2 > 0 /\ arg2 > 0), cost: 1
   2: f152_0_gcd_EQ -> f207_0_mod_LE : arg1'=arg1p3, arg2'=arg2p3, (arg1 > 0 /\ -arg1+arg2 < 0 /\ -arg1p3+arg1 == 0 /\ -arg2p3+arg2 == 0 /\ arg2 > 0), cost: 1
   3: f152_0_gcd_EQ -> f152_0_gcd_EQ : arg1'=arg1p4, arg2'=arg2p4, (-arg1 == 0 /\ -arg1p4+arg2 == 0 /\ -arg2p4 == 0 /\ arg2 > 0), cost: 1
   4: f152_0_gcd_EQ -> f152_0_gcd_EQ : arg1'=arg1p5, arg2'=arg2p5, (-arg2p5 == 0 /\ arg1 > 0 /\ arg1-arg1p5 == 0 /\ arg1-arg2 == 0), cost: 1
   5: f207_0_mod_LE -> f207_0_mod_LE : arg1'=arg1p6, arg2'=arg2p6, (-arg2p6+arg2 == 0 /\ -arg1p6+arg1-arg2 == 0 /\ arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0), cost: 1
   6: f207_0_mod_LE -> f152_0_gcd_EQ : arg1'=arg1p7, arg2'=arg2p7, (-arg2p7+arg1 == 0 /\ -arg1+arg2 > 0 /\ -arg1p7+arg2 == 0), cost: 1
   8: __init -> f152_0_gcd_EQ : arg1'=arg1p1, arg2'=arg2p1, (1+arg2p8 > 0 /\ 1+arg1p1 > 0 /\ arg1p8 > 0 /\ 1+arg2p1 > 0), cost: 1

	Eliminating location f1_0_main_Load by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_Load : arg1'=arg1p8, arg2'=arg2p8, T, cost: 1
	Second rule:
	f1_0_main_Load -> f152_0_gcd_EQ : arg1'=arg1p1, arg2'=arg2p1, (1+arg2 > 0 /\ arg1 > 0 /\ 1+arg1p1 > 0 /\ 1+arg2p1 > 0), cost: 1
	New rule:
	__init -> f152_0_gcd_EQ : arg1'=arg1p1, arg2'=arg2p1, (1+arg2p8 > 0 /\ 1+arg1p1 > 0 /\ arg1p8 > 0 /\ 1+arg2p1 > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 7

Simplified Transitions

Start location: __init
Program variables: arg1 arg2
   9: f152_0_gcd_EQ -> f207_0_mod_LE : (arg1 > 0 /\ -arg1+arg2 > 0 /\ arg2 > 0), cost: 1
  10: f152_0_gcd_EQ -> f207_0_mod_LE : (arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0), cost: 1
  11: f152_0_gcd_EQ -> f152_0_gcd_EQ : arg1'=arg2, arg2'=0, (-arg1 == 0 /\ arg2 > 0), cost: 1
  12: f152_0_gcd_EQ -> f152_0_gcd_EQ : arg2'=0, (arg1 > 0 /\ arg1-arg2 == 0), cost: 1
  13: f207_0_mod_LE -> f207_0_mod_LE : arg1'=arg1-arg2, (arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0), cost: 1
  14: f207_0_mod_LE -> f152_0_gcd_EQ : arg1'=arg2, arg2'=arg1, -arg1+arg2 > 0, cost: 1
  15: __init -> f152_0_gcd_EQ : arg1'=arg1p1, arg2'=arg2p1, (1+arg1p1 > 0 /\ 1+arg2p1 > 0), cost: 1

	Propagated Equalities

	Original rule:
	f152_0_gcd_EQ -> f207_0_mod_LE : arg1'=arg1p2, arg2'=arg2p2, (-arg2p2+arg2 == 0 /\ arg1 > 0 /\ arg1-arg1p2 == 0 /\ -arg1+arg2 > 0 /\ arg2 > 0), cost: 1
	New rule:
	f152_0_gcd_EQ -> f207_0_mod_LE : arg1'=arg1, arg2'=arg2, (0 == 0 /\ arg1 > 0 /\ -arg1+arg2 > 0 /\ arg2 > 0), cost: 1
	
		propagated equality arg2p2 = arg2
		
		propagated equality arg1p2 = arg1
		
	Simplified Guard

	Original rule:
	f152_0_gcd_EQ -> f207_0_mod_LE : arg1'=arg1, arg2'=arg2, (0 == 0 /\ arg1 > 0 /\ -arg1+arg2 > 0 /\ arg2 > 0), cost: 1
	New rule:
	f152_0_gcd_EQ -> f207_0_mod_LE : arg1'=arg1, arg2'=arg2, (arg1 > 0 /\ -arg1+arg2 > 0 /\ arg2 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f152_0_gcd_EQ -> f207_0_mod_LE : arg1'=arg1, arg2'=arg2, (arg1 > 0 /\ -arg1+arg2 > 0 /\ arg2 > 0), cost: 1
	New rule:
	f152_0_gcd_EQ -> f207_0_mod_LE : (arg1 > 0 /\ -arg1+arg2 > 0 /\ arg2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f152_0_gcd_EQ -> f207_0_mod_LE : arg1'=arg1p3, arg2'=arg2p3, (arg1 > 0 /\ -arg1+arg2 < 0 /\ -arg1p3+arg1 == 0 /\ -arg2p3+arg2 == 0 /\ arg2 > 0), cost: 1
	New rule:
	f152_0_gcd_EQ -> f207_0_mod_LE : arg1'=arg1, arg2'=arg2, (0 == 0 /\ arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0), cost: 1
	
		propagated equality arg1p3 = arg1
		
		propagated equality arg2p3 = arg2
		
	Simplified Guard

	Original rule:
	f152_0_gcd_EQ -> f207_0_mod_LE : arg1'=arg1, arg2'=arg2, (0 == 0 /\ arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0), cost: 1
	New rule:
	f152_0_gcd_EQ -> f207_0_mod_LE : arg1'=arg1, arg2'=arg2, (arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f152_0_gcd_EQ -> f207_0_mod_LE : arg1'=arg1, arg2'=arg2, (arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0), cost: 1
	New rule:
	f152_0_gcd_EQ -> f207_0_mod_LE : (arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f152_0_gcd_EQ -> f152_0_gcd_EQ : arg1'=arg1p4, arg2'=arg2p4, (-arg1 == 0 /\ -arg1p4+arg2 == 0 /\ -arg2p4 == 0 /\ arg2 > 0), cost: 1
	New rule:
	f152_0_gcd_EQ -> f152_0_gcd_EQ : arg1'=arg2, arg2'=0, (0 == 0 /\ -arg1 == 0 /\ arg2 > 0), cost: 1
	
		propagated equality arg1p4 = arg2
		
		propagated equality arg2p4 = 0
		
	Simplified Guard

	Original rule:
	f152_0_gcd_EQ -> f152_0_gcd_EQ : arg1'=arg2, arg2'=0, (0 == 0 /\ -arg1 == 0 /\ arg2 > 0), cost: 1
	New rule:
	f152_0_gcd_EQ -> f152_0_gcd_EQ : arg1'=arg2, arg2'=0, (-arg1 == 0 /\ arg2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f152_0_gcd_EQ -> f152_0_gcd_EQ : arg1'=arg1p5, arg2'=arg2p5, (-arg2p5 == 0 /\ arg1 > 0 /\ arg1-arg1p5 == 0 /\ arg1-arg2 == 0), cost: 1
	New rule:
	f152_0_gcd_EQ -> f152_0_gcd_EQ : arg1'=arg1, arg2'=0, (0 == 0 /\ arg1 > 0 /\ arg1-arg2 == 0), cost: 1
	
		propagated equality arg2p5 = 0
		
		propagated equality arg1p5 = arg1
		
	Simplified Guard

	Original rule:
	f152_0_gcd_EQ -> f152_0_gcd_EQ : arg1'=arg1, arg2'=0, (0 == 0 /\ arg1 > 0 /\ arg1-arg2 == 0), cost: 1
	New rule:
	f152_0_gcd_EQ -> f152_0_gcd_EQ : arg1'=arg1, arg2'=0, (arg1 > 0 /\ arg1-arg2 == 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f152_0_gcd_EQ -> f152_0_gcd_EQ : arg1'=arg1, arg2'=0, (arg1 > 0 /\ arg1-arg2 == 0), cost: 1
	New rule:
	f152_0_gcd_EQ -> f152_0_gcd_EQ : arg2'=0, (arg1 > 0 /\ arg1-arg2 == 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f207_0_mod_LE -> f207_0_mod_LE : arg1'=arg1p6, arg2'=arg2p6, (-arg2p6+arg2 == 0 /\ -arg1p6+arg1-arg2 == 0 /\ arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0), cost: 1
	New rule:
	f207_0_mod_LE -> f207_0_mod_LE : arg1'=arg1-arg2, arg2'=arg2, (0 == 0 /\ arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0), cost: 1
	
		propagated equality arg2p6 = arg2
		
		propagated equality arg1p6 = arg1-arg2
		
	Simplified Guard

	Original rule:
	f207_0_mod_LE -> f207_0_mod_LE : arg1'=arg1-arg2, arg2'=arg2, (0 == 0 /\ arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0), cost: 1
	New rule:
	f207_0_mod_LE -> f207_0_mod_LE : arg1'=arg1-arg2, arg2'=arg2, (arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f207_0_mod_LE -> f207_0_mod_LE : arg1'=arg1-arg2, arg2'=arg2, (arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0), cost: 1
	New rule:
	f207_0_mod_LE -> f207_0_mod_LE : arg1'=arg1-arg2, (arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f207_0_mod_LE -> f152_0_gcd_EQ : arg1'=arg1p7, arg2'=arg2p7, (-arg2p7+arg1 == 0 /\ -arg1+arg2 > 0 /\ -arg1p7+arg2 == 0), cost: 1
	New rule:
	f207_0_mod_LE -> f152_0_gcd_EQ : arg1'=arg2, arg2'=arg1, (0 == 0 /\ -arg1+arg2 > 0), cost: 1
	
		propagated equality arg2p7 = arg1
		
		propagated equality arg1p7 = arg2
		
	Simplified Guard

	Original rule:
	f207_0_mod_LE -> f152_0_gcd_EQ : arg1'=arg2, arg2'=arg1, (0 == 0 /\ -arg1+arg2 > 0), cost: 1
	New rule:
	f207_0_mod_LE -> f152_0_gcd_EQ : arg1'=arg2, arg2'=arg1, -arg1+arg2 > 0, cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	__init -> f152_0_gcd_EQ : arg1'=arg1p1, arg2'=arg2p1, (1+arg2p8 > 0 /\ 1+arg1p1 > 0 /\ arg1p8 > 0 /\ 1+arg2p1 > 0), cost: 1
	New rule:
	__init -> f152_0_gcd_EQ : arg1'=arg1p1, arg2'=arg2p1, (1+arg1p1 > 0 /\ 1+arg2p1 > 0), cost: 1

Unrolled Loops

Start location: __init
Program variables: arg1 arg2
   9: f152_0_gcd_EQ -> f207_0_mod_LE : (arg1 > 0 /\ -arg1+arg2 > 0 /\ arg2 > 0), cost: 1
  10: f152_0_gcd_EQ -> f207_0_mod_LE : (arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0), cost: 1
  11: f152_0_gcd_EQ -> f152_0_gcd_EQ : arg1'=arg2, arg2'=0, (-arg1 == 0 /\ arg2 > 0), cost: 1
  12: f152_0_gcd_EQ -> f152_0_gcd_EQ : arg2'=0, (arg1 > 0 /\ arg1-arg2 == 0), cost: 1
  16: f152_0_gcd_EQ -> f152_0_gcd_EQ : arg1'=0, arg2'=0, _|_, cost: 1
  13: f207_0_mod_LE -> f207_0_mod_LE : arg1'=arg1-arg2, (arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0), cost: 1
  14: f207_0_mod_LE -> f152_0_gcd_EQ : arg1'=arg2, arg2'=arg1, -arg1+arg2 > 0, cost: 1
  15: __init -> f152_0_gcd_EQ : arg1'=arg1p1, arg2'=arg2p1, (1+arg1p1 > 0 /\ 1+arg2p1 > 0), cost: 1

	Unrolling

	Original rule:
	f152_0_gcd_EQ -> f152_0_gcd_EQ : arg1'=arg2, arg2'=0, (-arg1 == 0 /\ arg2 > 0), cost: 1
	New rule:
	f152_0_gcd_EQ -> f152_0_gcd_EQ : arg1'=0, arg2'=0, (0 > 0 /\ -arg1 == 0 /\ arg2 > 0 /\ -arg2 == 0), cost: 1
	
	Simplified Guard

	Original rule:
	f152_0_gcd_EQ -> f152_0_gcd_EQ : arg1'=0, arg2'=0, (0 > 0 /\ -arg1 == 0 /\ arg2 > 0 /\ -arg2 == 0), cost: 1
	New rule:
	f152_0_gcd_EQ -> f152_0_gcd_EQ : arg1'=0, arg2'=0, _|_, cost: 1

Step with 15

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)]
	
	Blocked

	[{}, {}]

Step with 9

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 9[(arg1 > 0 /\ -arg1+arg2 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {}]

Step with 14

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 9[(arg1 > 0 /\ -arg1+arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)]
	
	Blocked

	[{}, {}, {13[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 10

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 9[(arg1 > 0 /\ -arg1+arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {13[T]}, {9[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 13

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 9[(arg1 > 0 /\ -arg1+arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 13[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {13[T]}, {9[T]}, {14[T]}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2
   9: f152_0_gcd_EQ -> f207_0_mod_LE : (arg1 > 0 /\ -arg1+arg2 > 0 /\ arg2 > 0), cost: 1
  10: f152_0_gcd_EQ -> f207_0_mod_LE : (arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0), cost: 1
  11: f152_0_gcd_EQ -> f152_0_gcd_EQ : arg1'=arg2, arg2'=0, (-arg1 == 0 /\ arg2 > 0), cost: 1
  12: f152_0_gcd_EQ -> f152_0_gcd_EQ : arg2'=0, (arg1 > 0 /\ arg1-arg2 == 0), cost: 1
  16: f152_0_gcd_EQ -> f152_0_gcd_EQ : arg1'=0, arg2'=0, _|_, cost: 1
  13: f207_0_mod_LE -> f207_0_mod_LE : arg1'=arg1-arg2, (arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0), cost: 1
  14: f207_0_mod_LE -> f152_0_gcd_EQ : arg1'=arg2, arg2'=arg1, -arg1+arg2 > 0, cost: 1
  17: f207_0_mod_LE -> f207_0_mod_LE : arg1'=-n*arg2+arg1, (-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0), cost: 1
  15: __init -> f152_0_gcd_EQ : arg1'=arg1p1, arg2'=arg2p1, (1+arg1p1 > 0 /\ 1+arg2p1 > 0), cost: 1

	Loop Acceleration

	Original rule:
	f207_0_mod_LE -> f207_0_mod_LE : arg1'=arg1-arg2, (arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0), cost: 1
	New rule:
	f207_0_mod_LE -> f207_0_mod_LE : arg1'=-n*arg2+arg1, (-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0), cost: 1

		arg1 > 0 [0]: montonic decrease yields -(-1+n)*arg2+arg1 > 0, dependencies: arg2 > 0
		
		arg1 > 0 [1]: eventual decrease yields (-(-1+n)*arg2+arg1 > 0 /\ arg1 > 0), dependencies: arg2 > 0
		
		arg1 > 0 [2]: eventual increase yields (arg1 > 0 /\ arg2 <= 0), dependencies: arg2 > 0
		
		arg1-arg2 > 0 [0]: montonic decrease yields -(-1+n)*arg2+arg1-arg2 > 0, dependencies: arg1 > 0
		
		arg1-arg2 > 0 [1]: eventual decrease yields (-(-1+n)*arg2+arg1-arg2 > 0 /\ arg1-arg2 > 0), dependencies: arg2 > 0
		
		arg1-arg2 > 0 [2]: eventual increase yields (arg1-arg2 > 0 /\ arg2 <= 0), dependencies: arg2 > 0
		
		arg2 > 0 [0]: monotonic increase yields arg2 > 0
		
		Replacement map: {arg1 > 0 -> -(-1+n)*arg2+arg1 > 0, arg1-arg2 > 0 -> -(-1+n)*arg2+arg1-arg2 > 0, arg2 > 0 -> arg2 > 0}

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 9[(arg1 > 0 /\ -arg1+arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {13[T]}, {9[T]}, {14[T]}, {13[T], 17[T]}]

Acceleration Failed

marked recursive suffix as redundant

Step with 14

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 9[(arg1 > 0 /\ -arg1+arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)]
	
	Blocked

	[{}, {}, {13[T]}, {9[T]}, {14[T]}, {13[T], 17[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Acceleration Failed

marked recursive suffix as redundant

Step with 10

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 9[(arg1 > 0 /\ -arg1+arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {13[T]}, {9[T]}, {14[T]}, {13[T], 17[T]}, {}, {}]

Acceleration Failed

marked recursive suffix as redundant

Acceleration Failed

marked recursive suffix as redundant

Step with 17

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 9[(arg1 > 0 /\ -arg1+arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {13[T]}, {9[T]}, {14[T]}, {13[T], 17[T]}, {}, {14[T]}, {17[T]}]

Acceleration Failed

marked recursive suffix as redundant

Covered

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 9[(arg1 > 0 /\ -arg1+arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {13[T]}, {9[T]}, {14[T]}, {13[T], 17[T]}, {}, {14[T], 17[T]}]

Step with 13

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 9[(arg1 > 0 /\ -arg1+arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 13[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {13[T]}, {9[T]}, {14[T]}, {13[T], 17[T]}, {}, {14[T], 17[T]}, {}]

Covered

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 9[(arg1 > 0 /\ -arg1+arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {13[T]}, {9[T]}, {14[T]}, {13[T], 17[T]}, {}, {13[T], 14[T], 17[T]}]

Backtrack

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 9[(arg1 > 0 /\ -arg1+arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)]
	
	Blocked

	[{}, {}, {13[T]}, {9[T]}, {14[T]}, {13[T], 17[T]}, {10[T]}]

Backtrack

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 9[(arg1 > 0 /\ -arg1+arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {13[T]}, {9[T]}, {14[T]}, {13[T], 14[T], 17[T]}]

Backtrack

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 9[(arg1 > 0 /\ -arg1+arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {13[T]}, {9[T]}, {14[T], 17[T]}]

Step with 13

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 9[(arg1 > 0 /\ -arg1+arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 13[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {13[T]}, {9[T]}, {14[T], 17[T]}, {}]

Covered

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 9[(arg1 > 0 /\ -arg1+arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {13[T]}, {9[T]}, {13[T], 14[T], 17[T]}]

Backtrack

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 9[(arg1 > 0 /\ -arg1+arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)]
	
	Blocked

	[{}, {}, {13[T]}, {9[T], 10[T]}]

Backtrack

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 9[(arg1 > 0 /\ -arg1+arg2 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {13[T], 14[T]}]

Backtrack

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)]
	
	Blocked

	[{}, {9[T]}]

Step with 10

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {9[T]}, {}]

Step with 13

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 13[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {9[T]}, {}, {}]

Covered

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {9[T]}, {13[T]}]

Step with 17

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {9[T]}, {13[T], 14[T]}, {17[T]}]

Step with 13

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)], 13[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {9[T]}, {13[T], 14[T]}, {17[T]}, {}]

Covered

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {9[T]}, {13[T], 14[T]}, {13[T], 17[T]}]

Step with 14

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)]
	
	Blocked

	[{}, {9[T]}, {13[T], 14[T]}, {13[T], 17[T]}, {}]

Step with 10

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {9[T]}, {13[T], 14[T]}, {13[T], 17[T]}, {}, {}]

Step with 17

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {9[T]}, {13[T], 14[T]}, {13[T], 17[T]}, {}, {14[T]}, {17[T]}]

Step with 13

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)], 13[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {9[T]}, {13[T], 14[T]}, {13[T], 17[T]}, {}, {14[T]}, {17[T]}, {}]

Covered

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {9[T]}, {13[T], 14[T]}, {13[T], 17[T]}, {}, {14[T]}, {13[T], 17[T]}]

Step with 14

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)]
	
	Blocked

	[{}, {9[T]}, {13[T], 14[T]}, {13[T], 17[T]}, {}, {14[T]}, {13[T], 17[T]}, {}]

Covered

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {9[T]}, {13[T], 14[T]}, {13[T], 17[T]}, {}, {14[T]}, {13[T], 14[T], 17[T]}]

Backtrack

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {9[T]}, {13[T], 14[T]}, {13[T], 17[T]}, {}, {14[T], 17[T]}]

Step with 13

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 13[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {9[T]}, {13[T], 14[T]}, {13[T], 17[T]}, {}, {14[T], 17[T]}, {}]

Covered

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {9[T]}, {13[T], 14[T]}, {13[T], 17[T]}, {}, {13[T], 14[T], 17[T]}]

Backtrack

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)]
	
	Blocked

	[{}, {9[T]}, {13[T], 14[T]}, {13[T], 17[T]}, {10[T]}]

Backtrack

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {9[T]}, {13[T], 14[T]}, {13[T], 14[T], 17[T]}]

Backtrack

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {9[T]}, {13[T], 14[T], 17[T]}]

Backtrack

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)]
	
	Blocked

	[{}, {9[T], 10[T]}]

Step with 11

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 11[(-arg1 == 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {9[T], 10[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Restart

Step with 15

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)]
	
	Blocked

	[{}, {}]

Step with 12

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 12[(arg1 > 0 /\ arg1-arg2 == 0)]
	
	Blocked

	[{}, {}, {}]

Acceleration Failed

marked recursive suffix as redundant

Backtrack

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)]
	
	Blocked

	[{}, {12[T]}]

Step with 9

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 9[(arg1 > 0 /\ -arg1+arg2 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {12[T]}, {}]

Step with 14

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 9[(arg1 > 0 /\ -arg1+arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)]
	
	Blocked

	[{}, {12[T]}, {13[T]}, {}]

Step with 10

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 9[(arg1 > 0 /\ -arg1+arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {12[T]}, {13[T]}, {9[T], 11[T], 16[T]}, {}]

Step with 17

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 9[(arg1 > 0 /\ -arg1+arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {12[T]}, {13[T]}, {9[T], 11[T], 16[T]}, {14[T]}, {17[T]}]

Step with 13

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 9[(arg1 > 0 /\ -arg1+arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)], 13[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {12[T]}, {13[T]}, {9[T], 11[T], 16[T]}, {14[T]}, {17[T]}, {}]

Covered

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 9[(arg1 > 0 /\ -arg1+arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {12[T]}, {13[T]}, {9[T], 11[T], 16[T]}, {14[T]}, {13[T], 17[T]}]

Step with 14

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 9[(arg1 > 0 /\ -arg1+arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)]
	
	Blocked

	[{}, {12[T]}, {13[T]}, {9[T], 11[T], 16[T]}, {14[T]}, {13[T], 17[T]}, {}]

Step with 10

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 9[(arg1 > 0 /\ -arg1+arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {12[T]}, {13[T]}, {9[T], 11[T], 16[T]}, {14[T]}, {13[T], 17[T]}, {}, {}]

Step with 17

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 9[(arg1 > 0 /\ -arg1+arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {12[T]}, {13[T]}, {9[T], 11[T], 16[T]}, {14[T]}, {13[T], 17[T]}, {}, {14[T]}, {17[T]}]

Covered

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 9[(arg1 > 0 /\ -arg1+arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {12[T]}, {13[T]}, {9[T], 11[T], 16[T]}, {14[T]}, {13[T], 17[T]}, {}, {14[T], 17[T]}]

Step with 13

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 9[(arg1 > 0 /\ -arg1+arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 13[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {12[T]}, {13[T]}, {9[T], 11[T], 16[T]}, {14[T]}, {13[T], 17[T]}, {}, {14[T], 17[T]}, {}]

Covered

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 9[(arg1 > 0 /\ -arg1+arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {12[T]}, {13[T]}, {9[T], 11[T], 16[T]}, {14[T]}, {13[T], 17[T]}, {}, {13[T], 14[T], 17[T]}]

Backtrack

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 9[(arg1 > 0 /\ -arg1+arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)]
	
	Blocked

	[{}, {12[T]}, {13[T]}, {9[T], 11[T], 16[T]}, {14[T]}, {13[T], 17[T]}, {10[T]}]

Backtrack

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 9[(arg1 > 0 /\ -arg1+arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {12[T]}, {13[T]}, {9[T], 11[T], 16[T]}, {14[T]}, {13[T], 14[T], 17[T]}]

Backtrack

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 9[(arg1 > 0 /\ -arg1+arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {12[T]}, {13[T]}, {9[T], 11[T], 16[T]}, {14[T], 17[T]}]

Step with 13

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 9[(arg1 > 0 /\ -arg1+arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 13[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {12[T]}, {13[T]}, {9[T], 11[T], 16[T]}, {14[T], 17[T]}, {}]

Covered

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 9[(arg1 > 0 /\ -arg1+arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {12[T]}, {13[T]}, {9[T], 11[T], 16[T]}, {13[T], 14[T], 17[T]}]

Backtrack

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 9[(arg1 > 0 /\ -arg1+arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)]
	
	Blocked

	[{}, {12[T]}, {13[T]}, {9[T], 10[T], 11[T], 16[T]}]

Backtrack

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 9[(arg1 > 0 /\ -arg1+arg2 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {12[T]}, {13[T], 14[T]}]

Backtrack

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)]
	
	Blocked

	[{}, {9[T], 12[T]}]

Step with 10

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {9[T], 12[T]}, {}]

Step with 13

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 13[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {9[T], 12[T]}, {}, {}]

Covered

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {9[T], 12[T]}, {13[T]}]

Step with 17

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {9[T], 12[T]}, {13[T], 14[T]}, {17[T]}]

Step with 13

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)], 13[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {9[T], 12[T]}, {13[T], 14[T]}, {17[T]}, {}]

Covered

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {9[T], 12[T]}, {13[T], 14[T]}, {13[T], 17[T]}]

Step with 14

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)]
	
	Blocked

	[{}, {9[T], 12[T]}, {13[T], 14[T]}, {13[T], 17[T]}, {}]

Step with 10

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {9[T], 12[T]}, {13[T], 14[T]}, {13[T], 17[T]}, {}, {}]

Step with 17

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {9[T], 12[T]}, {13[T], 14[T]}, {13[T], 17[T]}, {}, {14[T]}, {17[T]}]

Step with 13

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)], 13[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {9[T], 12[T]}, {13[T], 14[T]}, {13[T], 17[T]}, {}, {14[T]}, {17[T]}, {}]

Covered

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {9[T], 12[T]}, {13[T], 14[T]}, {13[T], 17[T]}, {}, {14[T]}, {13[T], 17[T]}]

Step with 14

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)]
	
	Blocked

	[{}, {9[T], 12[T]}, {13[T], 14[T]}, {13[T], 17[T]}, {}, {14[T]}, {13[T], 17[T]}, {}]

Covered

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {9[T], 12[T]}, {13[T], 14[T]}, {13[T], 17[T]}, {}, {14[T]}, {13[T], 14[T], 17[T]}]

Backtrack

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {9[T], 12[T]}, {13[T], 14[T]}, {13[T], 17[T]}, {}, {14[T], 17[T]}]

Step with 13

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 13[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {9[T], 12[T]}, {13[T], 14[T]}, {13[T], 17[T]}, {}, {14[T], 17[T]}, {}]

Covered

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {9[T], 12[T]}, {13[T], 14[T]}, {13[T], 17[T]}, {}, {13[T], 14[T], 17[T]}]

Backtrack

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)], 14[(-arg1+arg2 > 0)]
	
	Blocked

	[{}, {9[T], 12[T]}, {13[T], 14[T]}, {13[T], 17[T]}, {10[T]}]

Backtrack

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)], 17[(-(-1+n)*arg2+arg1 > 0 /\ -1+n >= 0 /\ -(-1+n)*arg2+arg1-arg2 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {9[T], 12[T]}, {13[T], 14[T]}, {13[T], 14[T], 17[T]}]

Backtrack

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 10[(arg1 > 0 /\ -arg1+arg2 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {9[T], 12[T]}, {13[T], 14[T], 17[T]}]

Backtrack

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)]
	
	Blocked

	[{}, {9[T], 10[T], 12[T]}]

Step with 11

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 11[(-arg1 == 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {9[T], 10[T], 12[T], 16[T]}, {}]

Backtrack

	Trace

	15[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)]
	
	Blocked

	[{}, {9[T], 10[T], 11[T], 12[T], 16[T]}]

Backtrack

	Trace

	Blocked

	[{15[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
