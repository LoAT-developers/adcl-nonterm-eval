unknown

Initial ITS

Start location: __init
Program variables: arg1 arg2
   0: f1_0_main_Load -> f120_0_twoWay_GE : arg1'=arg1p1, arg2'=arg2p1, (arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0), cost: 1
   1: f120_0_twoWay_GE -> f120_0_twoWay_GE : arg1'=arg1p2, arg2'=arg2p2, (-1+arg1-arg1p2 == 0 /\ 1+arg1 > 0), cost: 1
   2: __init -> f1_0_main_Load : arg1'=arg1p3, arg2'=arg2p3, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2
   1: f120_0_twoWay_GE -> f120_0_twoWay_GE : arg1'=arg1p2, arg2'=arg2p2, (-1+arg1-arg1p2 == 0 /\ 1+arg1 > 0), cost: 1
   3: __init -> f120_0_twoWay_GE : arg1'=arg1p1, arg2'=arg2p1, (arg1p3 > 0 /\ 1+arg1p1 > 0 /\ arg2p3 > 0), cost: 1

	Eliminating location f1_0_main_Load by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_Load : arg1'=arg1p3, arg2'=arg2p3, T, cost: 1
	Second rule:
	f1_0_main_Load -> f120_0_twoWay_GE : arg1'=arg1p1, arg2'=arg2p1, (arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0), cost: 1
	New rule:
	__init -> f120_0_twoWay_GE : arg1'=arg1p1, arg2'=arg2p1, (arg1p3 > 0 /\ 1+arg1p1 > 0 /\ arg2p3 > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 2

Simplified Transitions

Start location: __init
Program variables: arg1 arg2
   4: f120_0_twoWay_GE -> f120_0_twoWay_GE : arg1'=-1+arg1, arg2'=arg2p2, 1+arg1 > 0, cost: 1
   5: __init -> f120_0_twoWay_GE : arg1'=arg1p1, arg2'=arg2p1, (1+arg1p1 > 0), cost: 1

	Propagated Equalities

	Original rule:
	f120_0_twoWay_GE -> f120_0_twoWay_GE : arg1'=arg1p2, arg2'=arg2p2, (-1+arg1-arg1p2 == 0 /\ 1+arg1 > 0), cost: 1
	New rule:
	f120_0_twoWay_GE -> f120_0_twoWay_GE : arg1'=-1+arg1, arg2'=arg2p2, (0 == 0 /\ 1+arg1 > 0), cost: 1
	
		propagated equality arg1p2 = -1+arg1
		
	Simplified Guard

	Original rule:
	f120_0_twoWay_GE -> f120_0_twoWay_GE : arg1'=-1+arg1, arg2'=arg2p2, (0 == 0 /\ 1+arg1 > 0), cost: 1
	New rule:
	f120_0_twoWay_GE -> f120_0_twoWay_GE : arg1'=-1+arg1, arg2'=arg2p2, 1+arg1 > 0, cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	__init -> f120_0_twoWay_GE : arg1'=arg1p1, arg2'=arg2p1, (arg1p3 > 0 /\ 1+arg1p1 > 0 /\ arg2p3 > 0), cost: 1
	New rule:
	__init -> f120_0_twoWay_GE : arg1'=arg1p1, arg2'=arg2p1, (1+arg1p1 > 0), cost: 1

Step with 5

	Trace

	5[(1+arg1p1 > 0)]
	
	Blocked

	[{}, {}]

Step with 4

	Trace

	5[(1+arg1p1 > 0)], 4[(1+arg1 > 0)]
	
	Blocked

	[{}, {}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2
   4: f120_0_twoWay_GE -> f120_0_twoWay_GE : arg1'=-1+arg1, arg2'=arg2p2, 1+arg1 > 0, cost: 1
   6: f120_0_twoWay_GE -> f120_0_twoWay_GE : arg1'=arg1-n, arg2'=arg2p2, (-1+n >= 0 /\ 2+arg1-n > 0), cost: 1
   5: __init -> f120_0_twoWay_GE : arg1'=arg1p1, arg2'=arg2p1, (1+arg1p1 > 0), cost: 1

	Loop Acceleration

	Original rule:
	f120_0_twoWay_GE -> f120_0_twoWay_GE : arg1'=-1+arg1, arg2'=arg2p2, (1+arg1 > 0), cost: 1
	New rule:
	f120_0_twoWay_GE -> f120_0_twoWay_GE : arg1'=arg1-n, arg2'=arg2p2, (-1+n >= 0 /\ 2+arg1-n > 0), cost: 1

		1+arg1 > 0 [0]: montonic decrease yields 2+arg1-n > 0
		
		1+arg1 > 0 [1]: eventual increase yields (1 <= 0 /\ 1+arg1 > 0)
		
		Replacement map: {1+arg1 > 0 -> 2+arg1-n > 0}

	Trace

	5[(1+arg1p1 > 0)], 6[(-1+n >= 0 /\ 2+arg1-n > 0)]
	
	Blocked

	[{}, {}, {4[T], 6[T]}]

Backtrack

	Trace

	5[(1+arg1p1 > 0)]
	
	Blocked

	[{}, {6[T]}]

Step with 4

	Trace

	5[(1+arg1p1 > 0)], 4[(1+arg1 > 0)]
	
	Blocked

	[{}, {6[T]}, {}]

Covered

	Trace

	5[(1+arg1p1 > 0)]
	
	Blocked

	[{}, {4[T], 6[T]}]

Backtrack

	Trace

	Blocked

	[{5[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
