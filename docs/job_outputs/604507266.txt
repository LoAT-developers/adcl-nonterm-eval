NO

Initial ITS

Start location: l4
Program variables: x_5^0
   0: l0 -> l1 : x_5^0'=x_5^post1, -x_5^post1+x_5^0 == 0, cost: 1
   1: l1 -> l2 : x_5^0'=x_5^post2, (1-x_5^0+x_5^post2 == 0 /\ -x_5^post2 <= 0), cost: 1
   3: l1 -> l3 : x_5^0'=x_5^post4, (1+x_5^post4-x_5^0 == 0 /\ 1+x_5^post4 <= 0), cost: 1
   2: l2 -> l1 : x_5^0'=x_5^post3, -x_5^post3+x_5^0 == 0, cost: 1
   4: l3 -> l1 : x_5^0'=x_5^post5, x_5^0-x_5^post5 == 0, cost: 1
   5: l4 -> l0 : x_5^0'=x_5^post6, -x_5^post6+x_5^0 == 0, cost: 1

Chained Linear Paths

Start location: l4
Program variables: x_5^0
   7: l1 -> l1 : x_5^0'=x_5^post3, (-x_5^post3+x_5^post2 == 0 /\ 1-x_5^0+x_5^post2 == 0 /\ -x_5^post2 <= 0), cost: 1
   8: l1 -> l1 : x_5^0'=x_5^post5, (1+x_5^post4-x_5^0 == 0 /\ 1+x_5^post4 <= 0 /\ x_5^post4-x_5^post5 == 0), cost: 1
   6: l4 -> l1 : x_5^0'=x_5^post1, (x_5^post6-x_5^post1 == 0 /\ -x_5^post6+x_5^0 == 0), cost: 1

	Eliminating location l0 by chaining:

	Applied chaining

	First rule:
	l4 -> l0 : x_5^0'=x_5^post6, -x_5^post6+x_5^0 == 0, cost: 1
	Second rule:
	l0 -> l1 : x_5^0'=x_5^post1, -x_5^post1+x_5^0 == 0, cost: 1
	New rule:
	l4 -> l1 : x_5^0'=x_5^post1, (x_5^post6-x_5^post1 == 0 /\ -x_5^post6+x_5^0 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 5
	
	Eliminating location l2 by chaining:

	Applied chaining

	First rule:
	l1 -> l2 : x_5^0'=x_5^post2, (1-x_5^0+x_5^post2 == 0 /\ -x_5^post2 <= 0), cost: 1
	Second rule:
	l2 -> l1 : x_5^0'=x_5^post3, -x_5^post3+x_5^0 == 0, cost: 1
	New rule:
	l1 -> l1 : x_5^0'=x_5^post3, (-x_5^post3+x_5^post2 == 0 /\ 1-x_5^0+x_5^post2 == 0 /\ -x_5^post2 <= 0), cost: 1
	
	Applied deletion

	Removed the following rules: 1 2
	
	Eliminating location l3 by chaining:

	Applied chaining

	First rule:
	l1 -> l3 : x_5^0'=x_5^post4, (1+x_5^post4-x_5^0 == 0 /\ 1+x_5^post4 <= 0), cost: 1
	Second rule:
	l3 -> l1 : x_5^0'=x_5^post5, x_5^0-x_5^post5 == 0, cost: 1
	New rule:
	l1 -> l1 : x_5^0'=x_5^post5, (1+x_5^post4-x_5^0 == 0 /\ 1+x_5^post4 <= 0 /\ x_5^post4-x_5^post5 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 3 4

Simplified Transitions

Start location: l4
Program variables: x_5^0
  10: l1 -> l1 : x_5^0'=-1+x_5^0, 1-x_5^0 <= 0, cost: 1
  11: l1 -> l1 : x_5^0'=-1+x_5^0, x_5^0 <= 0, cost: 1
   9: l4 -> l1 : T, cost: 1

	Propagated Equalities

	Original rule:
	l4 -> l1 : x_5^0'=x_5^post1, (x_5^post6-x_5^post1 == 0 /\ -x_5^post6+x_5^0 == 0), cost: 1
	New rule:
	l4 -> l1 : x_5^0'=x_5^post6, (0 == 0 /\ -x_5^post6+x_5^0 == 0), cost: 1
	
		propagated equality x_5^post1 = x_5^post6
		
	Propagated Equalities

	Original rule:
	l4 -> l1 : x_5^0'=x_5^post6, (0 == 0 /\ -x_5^post6+x_5^0 == 0), cost: 1
	New rule:
	l4 -> l1 : x_5^0'=x_5^0, 0 == 0, cost: 1
	
		propagated equality x_5^post6 = x_5^0
		
	Simplified Guard

	Original rule:
	l4 -> l1 : x_5^0'=x_5^0, 0 == 0, cost: 1
	New rule:
	l4 -> l1 : x_5^0'=x_5^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l4 -> l1 : x_5^0'=x_5^0, T, cost: 1
	New rule:
	l4 -> l1 : T, cost: 1
	
	Propagated Equalities

	Original rule:
	l1 -> l1 : x_5^0'=x_5^post3, (-x_5^post3+x_5^post2 == 0 /\ 1-x_5^0+x_5^post2 == 0 /\ -x_5^post2 <= 0), cost: 1
	New rule:
	l1 -> l1 : x_5^0'=x_5^post2, (0 == 0 /\ 1-x_5^0+x_5^post2 == 0 /\ -x_5^post2 <= 0), cost: 1
	
		propagated equality x_5^post3 = x_5^post2
		
	Propagated Equalities

	Original rule:
	l1 -> l1 : x_5^0'=x_5^post2, (0 == 0 /\ 1-x_5^0+x_5^post2 == 0 /\ -x_5^post2 <= 0), cost: 1
	New rule:
	l1 -> l1 : x_5^0'=-1+x_5^0, (0 == 0 /\ 1-x_5^0 <= 0), cost: 1
	
		propagated equality x_5^post2 = -1+x_5^0
		
	Simplified Guard

	Original rule:
	l1 -> l1 : x_5^0'=-1+x_5^0, (0 == 0 /\ 1-x_5^0 <= 0), cost: 1
	New rule:
	l1 -> l1 : x_5^0'=-1+x_5^0, 1-x_5^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l1 -> l1 : x_5^0'=x_5^post5, (1+x_5^post4-x_5^0 == 0 /\ 1+x_5^post4 <= 0 /\ x_5^post4-x_5^post5 == 0), cost: 1
	New rule:
	l1 -> l1 : x_5^0'=x_5^post4, (0 == 0 /\ 1+x_5^post4-x_5^0 == 0 /\ 1+x_5^post4 <= 0), cost: 1
	
		propagated equality x_5^post5 = x_5^post4
		
	Propagated Equalities

	Original rule:
	l1 -> l1 : x_5^0'=x_5^post4, (0 == 0 /\ 1+x_5^post4-x_5^0 == 0 /\ 1+x_5^post4 <= 0), cost: 1
	New rule:
	l1 -> l1 : x_5^0'=-1+x_5^0, (0 == 0 /\ x_5^0 <= 0), cost: 1
	
		propagated equality x_5^post4 = -1+x_5^0
		
	Simplified Guard

	Original rule:
	l1 -> l1 : x_5^0'=-1+x_5^0, (0 == 0 /\ x_5^0 <= 0), cost: 1
	New rule:
	l1 -> l1 : x_5^0'=-1+x_5^0, x_5^0 <= 0, cost: 1

Step with 9

	Trace

	9[T]
	
	Blocked

	[{}, {}]

Step with 10

	Trace

	9[T], 10[(1-x_5^0 <= 0)]
	
	Blocked

	[{}, {}, {}]

Accelerate

Start location: l4
Program variables: x_5^0
  10: l1 -> l1 : x_5^0'=-1+x_5^0, 1-x_5^0 <= 0, cost: 1
  11: l1 -> l1 : x_5^0'=-1+x_5^0, x_5^0 <= 0, cost: 1
  12: l1 -> l1 : x_5^0'=-n+x_5^0, (-n+x_5^0 >= 0 /\ -1+n >= 0), cost: 1
   9: l4 -> l1 : T, cost: 1

	Loop Acceleration

	Original rule:
	l1 -> l1 : x_5^0'=-1+x_5^0, (1-x_5^0 <= 0), cost: 1
	New rule:
	l1 -> l1 : x_5^0'=-n+x_5^0, (-n+x_5^0 >= 0 /\ -1+n >= 0), cost: 1

		-1+x_5^0 >= 0 [0]: montonic decrease yields -n+x_5^0 >= 0
		
		-1+x_5^0 >= 0 [1]: eventual increase yields (1 <= 0 /\ -1+x_5^0 >= 0)
		
		Replacement map: {-1+x_5^0 >= 0 -> -n+x_5^0 >= 0}

	Trace

	9[T], 12[(-n+x_5^0 >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {}, {10[T], 12[T]}]

Step with 11

	Trace

	9[T], 12[(-n+x_5^0 >= 0 /\ -1+n >= 0)], 11[(x_5^0 <= 0)]
	
	Blocked

	[{}, {}, {10[T], 12[T]}, {}]

Nonterm

Start location: l4
Program variables: x_5^0
  10: l1 -> l1 : x_5^0'=-1+x_5^0, 1-x_5^0 <= 0, cost: 1
  11: l1 -> l1 : x_5^0'=-1+x_5^0, x_5^0 <= 0, cost: 1
  12: l1 -> l1 : x_5^0'=-n+x_5^0, (-n+x_5^0 >= 0 /\ -1+n >= 0), cost: 1
  13: l1 -> LoAT_sink : (-x_5^0 >= 0 /\ -1+n2 >= 0), cost: NONTERM
  14: l1 -> l1 : x_5^0'=-n2+x_5^0, (-x_5^0 >= 0 /\ -1+n2 >= 0), cost: 1
   9: l4 -> l1 : T, cost: 1

	Certificate of Non-Termination

	Original rule:
	l1 -> l1 : x_5^0'=-1+x_5^0, (x_5^0 <= 0), cost: 1
	New rule:
	l1 -> LoAT_sink : (-x_5^0 >= 0 /\ -1+n2 >= 0), cost: NONTERM

		-x_5^0 >= 0 [0]: monotonic increase yields -x_5^0 >= 0
		
		Replacement map: {-x_5^0 >= 0 -> -x_5^0 >= 0}

	Loop Acceleration

	Original rule:
	l1 -> l1 : x_5^0'=-1+x_5^0, (x_5^0 <= 0), cost: 1
	New rule:
	l1 -> l1 : x_5^0'=-n2+x_5^0, (-x_5^0 >= 0 /\ -1+n2 >= 0), cost: 1

		-x_5^0 >= 0 [0]: monotonic increase yields -x_5^0 >= 0
		
		Replacement map: {-x_5^0 >= 0 -> -x_5^0 >= 0}

Step with 13

	Trace

	9[T], 12[(-n+x_5^0 >= 0 /\ -1+n >= 0)], 13[(-x_5^0 >= 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {}, {10[T], 12[T]}, {13[T]}]

Refute

	Counterexample

	[ x_5^0=1 ] 9 [ x_5^0=0 ] 12 [ x_5^0=1 ] 13
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
