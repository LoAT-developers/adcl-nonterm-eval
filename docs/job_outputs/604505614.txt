NO

Initial ITS
Start location: __init
   0: f1_0_main_ConstantStackPush -> f93_0_main_GE : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (2-arg2P0 == 0 /\ 3-arg3P0 == 0 /\ 1-arg1P0 == 0), cost: 1
   1: f93_0_main_GE -> f93_0_main_GE : arg2'=arg2P1, arg1'=arg1P1, arg3'=arg3P1, (arg2-arg1P1 == 0 /\ arg2+arg1-arg3P1 == 0 /\ -5+arg3 < 0 /\ -arg2P1+arg1 == 0), cost: 1
   2: __init -> f1_0_main_ConstantStackPush : arg2'=arg2P2, arg1'=arg1P2, arg3'=arg3P2, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_ConstantStackPush -> f93_0_main_GE : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (2-arg2P0 == 0 /\ 3-arg3P0 == 0 /\ 1-arg1P0 == 0), cost: 1
New rule:
f1_0_main_ConstantStackPush -> f93_0_main_GE : arg2'=2, arg1'=1, arg3'=3, TRUE, cost: 1

Applied preprocessing
Original rule:
f93_0_main_GE -> f93_0_main_GE : arg2'=arg2P1, arg1'=arg1P1, arg3'=arg3P1, (arg2-arg1P1 == 0 /\ arg2+arg1-arg3P1 == 0 /\ -5+arg3 < 0 /\ -arg2P1+arg1 == 0), cost: 1
New rule:
f93_0_main_GE -> f93_0_main_GE : arg2'=arg1, arg1'=arg2, arg3'=arg2+arg1, 5-arg3 > 0, cost: 1

Simplified rules
Start location: __init
   3: f1_0_main_ConstantStackPush -> f93_0_main_GE : arg2'=2, arg1'=1, arg3'=3, TRUE, cost: 1
   4: f93_0_main_GE -> f93_0_main_GE : arg2'=arg1, arg1'=arg2, arg3'=arg2+arg1, 5-arg3 > 0, cost: 1
   2: __init -> f1_0_main_ConstantStackPush : arg2'=arg2P2, arg1'=arg1P2, arg3'=arg3P2, TRUE, cost: 1


Applied unrolling
Original rule:
f93_0_main_GE -> f93_0_main_GE : arg2'=arg1, arg1'=arg2, arg3'=arg2+arg1, 5-arg3 > 0, cost: 1
New rule:
f93_0_main_GE -> f93_0_main_GE : arg2'=arg2, arg1'=arg1, arg3'=arg2+arg1, (5-arg2-arg1 > 0 /\ 5-arg3 > 0), cost: 2

Applied acceleration
Original rule:
f93_0_main_GE -> f93_0_main_GE : arg2'=arg2, arg1'=arg1, arg3'=arg2+arg1, (5-arg2-arg1 > 0 /\ 5-arg3 > 0), cost: 2
New rule:
f93_0_main_GE -> f93_0_main_GE : arg2'=arg2, arg1'=arg1, arg3'=arg2+arg1, (5-arg2-arg1 > 0 /\ -1+n >= 0 /\ 5-arg3 > 0), cost: 2*n
Sub-proof via acceration calculus written to file:///tmp/tmpnam_CcogLf.txt

Applied nonterm
Original rule:
f93_0_main_GE -> f93_0_main_GE : arg2'=arg2, arg1'=arg1, arg3'=arg2+arg1, (5-arg2-arg1 > 0 /\ 5-arg3 > 0), cost: 2
New rule:
f93_0_main_GE -> [3] : (5-arg2-arg1 > 0 /\ arg2+arg1-arg3 <= 0 /\ 5-arg3 > 0), cost: NONTERM
Sub-proof via acceration calculus written to file:///tmp/tmpnam_AjblbO.txt

Applied simplification
Original rule:
f93_0_main_GE -> [3] : (5-arg2-arg1 > 0 /\ arg2+arg1-arg3 <= 0 /\ 5-arg3 > 0), cost: NONTERM
New rule:
f93_0_main_GE -> [3] : (arg2+arg1-arg3 <= 0 /\ 5-arg3 > 0), cost: NONTERM

Applied deletion
Removed the following rules: 4

Accelerated simple loops
Start location: __init
   3: f1_0_main_ConstantStackPush -> f93_0_main_GE : arg2'=2, arg1'=1, arg3'=3, TRUE, cost: 1
   5: f93_0_main_GE -> f93_0_main_GE : arg2'=arg2, arg1'=arg1, arg3'=arg2+arg1, (5-arg2-arg1 > 0 /\ -1+n >= 0 /\ 5-arg3 > 0), cost: 2*n
   7: f93_0_main_GE -> [3] : (arg2+arg1-arg3 <= 0 /\ 5-arg3 > 0), cost: NONTERM
   2: __init -> f1_0_main_ConstantStackPush : arg2'=arg2P2, arg1'=arg1P2, arg3'=arg3P2, TRUE, cost: 1


Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f93_0_main_GE : arg2'=2, arg1'=1, arg3'=3, TRUE, cost: 1
Second rule:
f93_0_main_GE -> f93_0_main_GE : arg2'=arg2, arg1'=arg1, arg3'=arg2+arg1, (5-arg2-arg1 > 0 /\ -1+n >= 0 /\ 5-arg3 > 0), cost: 2*n
New rule:
f1_0_main_ConstantStackPush -> f93_0_main_GE : arg2'=2, arg1'=1, arg3'=3, -1+n >= 0, cost: 1+2*n

Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f93_0_main_GE : arg2'=2, arg1'=1, arg3'=3, TRUE, cost: 1
Second rule:
f93_0_main_GE -> [3] : (arg2+arg1-arg3 <= 0 /\ 5-arg3 > 0), cost: NONTERM
New rule:
f1_0_main_ConstantStackPush -> [3] : (0 <= 0 /\ 2 > 0), cost: NONTERM

Applied deletion
Removed the following rules: 5 7

Chained accelerated rules with incoming rules
Start location: __init
   3: f1_0_main_ConstantStackPush -> f93_0_main_GE : arg2'=2, arg1'=1, arg3'=3, TRUE, cost: 1
   8: f1_0_main_ConstantStackPush -> f93_0_main_GE : arg2'=2, arg1'=1, arg3'=3, -1+n >= 0, cost: 1+2*n
   9: f1_0_main_ConstantStackPush -> [3] : (0 <= 0 /\ 2 > 0), cost: NONTERM
   2: __init -> f1_0_main_ConstantStackPush : arg2'=arg2P2, arg1'=arg1P2, arg3'=arg3P2, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
   9: f1_0_main_ConstantStackPush -> [3] : (0 <= 0 /\ 2 > 0), cost: NONTERM
   2: __init -> f1_0_main_ConstantStackPush : arg2'=arg2P2, arg1'=arg1P2, arg3'=arg3P2, TRUE, cost: 1


Eliminating location f1_0_main_ConstantStackPush by chaining:

Applied chaining
First rule:
__init -> f1_0_main_ConstantStackPush : arg2'=arg2P2, arg1'=arg1P2, arg3'=arg3P2, TRUE, cost: 1
Second rule:
f1_0_main_ConstantStackPush -> [3] : (0 <= 0 /\ 2 > 0), cost: NONTERM
New rule:
__init -> [3] : (0 <= 0 /\ 2 > 0), cost: NONTERM

Applied deletion
Removed the following rules: 2 9

Eliminated locations on linear paths
Start location: __init
  10: __init -> [3] : (0 <= 0 /\ 2 > 0), cost: NONTERM


Computing asymptotic complexity
Proved nontermination of rule 10 via SMT.

Proved the following lower bound
Complexity:  Nonterm
Cpx degree: Nonterm

Solved cost: NONTERM
Rule cost:   NONTERM
Rule guard:  (0 <= 0 /\ 2 > 0)
