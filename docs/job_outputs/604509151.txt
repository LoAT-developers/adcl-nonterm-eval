YES

Solver Timeout: 4
Global Timeout: 300
No parsing errors!
Init Location: 0
Transitions:
<l0, l4, true>
<l1, l2, (undef3 > ~(1)) /\ (arg2 > 0) /\ ((undef3 - (2 * undef4)) = 1) /\ (arg1 > 0)>
<l2, l3, (undef7 > ~(1)) /\ (arg2 > 0) /\ ((undef7 - (2 * undef8)) = 1) /\ (arg1 > 0) /\ ((undef7 - (2 * undef8)) < 2) /\ ((undef7 - (2 * undef8)) >= 0), par{arg1 -> 1, arg2 -> 0}>
<l1, l2, (undef11 > ~(1)) /\ (arg2 > 0) /\ ((undef11 - (2 * undef12)) = 0) /\ (arg1 > 0)>
<l2, l3, (undef15 > ~(1)) /\ (arg2 > 0) /\ ((undef15 - (2 * undef16)) = 0) /\ (arg1 > 0) /\ ((undef15 - (2 * undef16)) < 2) /\ ((undef15 - (2 * undef16)) >= 0), par{arg1 -> 0, arg2 -> 1}>
<l3, l3, (arg1 = arg2), par{arg1 -> (arg1 - 1), arg2 -> (arg1 - 1)}>
<l4, l1, true, par{arg1 -> undef19, arg2 -> undef20}>

Fresh variables:
undef3, undef4, undef7, undef8, undef11, undef12, undef15, undef16, undef19, undef20, 

Undef variables:
undef3, undef4, undef7, undef8, undef11, undef12, undef15, undef16, undef19, undef20, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l3, (undef3 > ~(1)) /\ (undef20 > 0) /\ ((undef3 - (2 * undef4)) = 1) /\ (undef19 > 0) /\ (undef7 > ~(1)) /\ (undef20 > 0) /\ ((undef7 - (2 * undef8)) = 1) /\ (undef19 > 0) /\ ((undef7 - (2 * undef8)) < 2) /\ ((undef7 - (2 * undef8)) >= 0), par{arg1 -> 1, arg2 -> 0}>
<l0, l3, (undef3 > ~(1)) /\ (undef20 > 0) /\ ((undef3 - (2 * undef4)) = 1) /\ (undef19 > 0) /\ (undef15 > ~(1)) /\ (undef20 > 0) /\ ((undef15 - (2 * undef16)) = 0) /\ (undef19 > 0) /\ ((undef15 - (2 * undef16)) < 2) /\ ((undef15 - (2 * undef16)) >= 0), par{arg1 -> 0, arg2 -> 1}>
<l0, l3, (undef11 > ~(1)) /\ (undef20 > 0) /\ ((undef11 - (2 * undef12)) = 0) /\ (undef19 > 0) /\ (undef7 > ~(1)) /\ (undef20 > 0) /\ ((undef7 - (2 * undef8)) = 1) /\ (undef19 > 0) /\ ((undef7 - (2 * undef8)) < 2) /\ ((undef7 - (2 * undef8)) >= 0), par{arg1 -> 1, arg2 -> 0}>
<l0, l3, (undef11 > ~(1)) /\ (undef20 > 0) /\ ((undef11 - (2 * undef12)) = 0) /\ (undef19 > 0) /\ (undef15 > ~(1)) /\ (undef20 > 0) /\ ((undef15 - (2 * undef16)) = 0) /\ (undef19 > 0) /\ ((undef15 - (2 * undef16)) < 2) /\ ((undef15 - (2 * undef16)) >= 0), par{arg1 -> 0, arg2 -> 1}>
<l3, l3, (arg1 = arg2), par{arg1 -> (arg1 - 1), arg2 -> (arg1 - 1)}>

Fresh variables:
undef3, undef4, undef7, undef8, undef11, undef12, undef15, undef16, undef19, undef20, 

Undef variables:
undef3, undef4, undef7, undef8, undef11, undef12, undef15, undef16, undef19, undef20, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l3, l3, arg1 = arg2, {arg1 -> -1 + arg1, arg2 -> -1 + arg1, rest remain the same}>
Variables:
arg1, arg2

Precedence: 
Graph 0

Graph 1
<l0, l3, 1 <= undef19 /\ 1 <= undef20 /\ 0 <= undef3 /\ 0 <= undef7 /\ undef3 = 1 + 2*undef4 /\ undef7 = 1 + 2*undef8, {arg1 -> 1, arg2 -> 0, rest remain the same}>
<l0, l3, 1 <= undef19 /\ 1 <= undef20 /\ 0 <= undef3 /\ 0 <= undef15 /\ undef3 = 1 + 2*undef4 /\ undef15 = 2*undef16, {arg1 -> 0, arg2 -> 1, rest remain the same}>
<l0, l3, 1 <= undef19 /\ 1 <= undef20 /\ 0 <= undef7 /\ 0 <= undef11 /\ undef7 = 1 + 2*undef8 /\ undef11 = 2*undef12, {arg1 -> 1, arg2 -> 0, rest remain the same}>
<l0, l3, 1 <= undef19 /\ 1 <= undef20 /\ 0 <= undef11 /\ 0 <= undef15 /\ undef11 = 2*undef12 /\ undef15 = 2*undef16, {arg1 -> 0, arg2 -> 1, rest remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 3 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.002389

Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000337s

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000860s
Trying to remove transition: <l3, l3, arg1 = arg2, {arg1 -> -1 + arg1, arg2 -> -1 + arg1, rest remain the same}>
Solving with 1 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 0.003080s
Time used: 0.002988
Solving with 1 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 4.000411s
Time used: 4.00017
Solving with 2 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 0.030908s
Time used: 0.022638
Improving Solution with cost 2 ...

LOG: CALL solveNonLinearGetNextSolution

LOG: RETURN solveNonLinearGetNextSolution - Elapsed time: 1.000183s
Time used: 1.00017

LOG: SAT solveNonLinear - Elapsed time: 1.031091s
Cost: 2; Total time: 1.0228
[31mFailed at location 3: 1 + arg2 <= arg1[0m
[31mFailed at location 3: 1 + arg2 <= arg1[0m
Before Improving: 
[36mQuasi-invariant at l3: 1 + arg2 <= arg1[0m
[36mQuasi-invariant at l3: 1 <= arg1 + arg2[0m
Optimizing invariants...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.003980s
Remaining time after improvement: 0.998658
[33mTermination implied by a set of quasi-invariant(s):[0m
[36mQuasi-invariant at l3: 1 + arg2 <= arg1[0m
[36mQuasi-invariant at l3: 1 <= arg1 + arg2[0m
[ Invariant Graph ]
[33mStrengthening and disabling transitions...[0m

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
It's unfeasible. Removing transition: 
<l3, l3, arg1 = arg2, {arg1 -> -1 + arg1, arg2 -> -1 + arg1, rest remain the same}>
[ Termination Graph ]
[33mStrengthening and disabling transitions...[0m

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
It's unfeasible. Removing transition: 
<l3, l3, arg1 = arg2, {arg1 -> -1 + arg1, arg2 -> -1 + arg1, rest remain the same}>
New Graphs: 
Calling Safety with literal 1 + arg2 <= arg1 and entry <l0, l3, 1 <= undef19 /\ 1 <= undef20 /\ 0 <= undef3 /\ 0 <= undef15 /\ undef3 = 1 + 2*undef4 /\ undef15 = 2*undef16, {arg1 -> 0, arg2 -> 1, rest remain the same}>

LOG: CALL check - Post:1 + arg2 <= arg1 - Process 1
* Exit transition: <l0, l3, 1 <= undef19 /\ 1 <= undef20 /\ 0 <= undef3 /\ 0 <= undef15 /\ undef3 = 1 + 2*undef4 /\ undef15 = 2*undef16, {arg1 -> 0, arg2 -> 1, rest remain the same}>
* Postcondition  : 1 + arg2 <= arg1

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000357s
[31m> Postcondition is not implied![0m

LOG: RETURN check - Elapsed time: 0.000411s
Calling Safety with literal 1 + arg2 <= arg1 and entry <l0, l3, 1 <= undef19 /\ 1 <= undef20 /\ 0 <= undef11 /\ 0 <= undef15 /\ undef11 = 2*undef12 /\ undef15 = 2*undef16, {arg1 -> 0, arg2 -> 1, rest remain the same}>

LOG: CALL check - Post:1 + arg2 <= arg1 - Process 2
* Exit transition: <l0, l3, 1 <= undef19 /\ 1 <= undef20 /\ 0 <= undef11 /\ 0 <= undef15 /\ undef11 = 2*undef12 /\ undef15 = 2*undef16, {arg1 -> 0, arg2 -> 1, rest remain the same}>
* Postcondition  : 1 + arg2 <= arg1

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000302s
[31m> Postcondition is not implied![0m

LOG: RETURN check - Elapsed time: 0.000352s
INVARIANTS: 
3: 
Quasi-INVARIANTS to narrow Graph: 
3: 1 + arg2 <= arg1 , 1 <= arg1 + arg2 , 
Narrowing transition: 
<l3, l3, arg1 = arg2, {arg1 -> -1 + arg1, arg2 -> -1 + arg1, rest remain the same}>

LOG: Narrow transition size 2
invGraph after Narrowing: 
Transitions:
<l3, l3, arg1 = arg2, {arg1 -> -1 + arg1, arg2 -> -1 + arg1, rest remain the same}>
Variables:
arg1, arg2
Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000212s

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000638s
Trying to remove transition: <l3, l3, arg1 = arg2, {arg1 -> -1 + arg1, arg2 -> -1 + arg1, rest remain the same}>
Solving with 1 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 0.002160s
Time used: 0.002091
Solving with 1 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 0.003048s
Time used: 0.002928

LOG: SAT solveNonLinear - Elapsed time: 0.003048s
Cost: 0; Total time: 0.002928
[33mTermination implied by a set of invariant(s):[0m
[36mInvariant at l3: 1 + arg1 <= arg2[0m
[ Invariant Graph ]
[33mStrengthening and disabling transitions...[0m

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
It's unfeasible. Removing transition: 
<l3, l3, arg1 = arg2, {arg1 -> -1 + arg1, arg2 -> -1 + arg1, rest remain the same}>
[ Termination Graph ]
[33mStrengthening and disabling transitions...[0m
> It's unfeasible. Removing transition: 
<l3, l3, arg1 = arg2, {arg1 -> -1 + arg1, arg2 -> -1 + arg1, rest remain the same}>
New Graphs: 
INVARIANTS: 
3: 1 + arg1 <= arg2 , 
Quasi-INVARIANTS to narrow Graph: 
3: 
[32mProgram Terminates[0m
