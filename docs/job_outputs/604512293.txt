NO

Initial ITS

Start location: [1]
Program variables: i
   0: [1] -> [2] : i'=nondet, T, cost: 1
   1: [2] -> [3] : (i < 0 \/ i > 0), cost: 1
  11: [2] -> [11] : (i <= 0 /\ i >= 0), cost: 1
   2: [3] -> [5] : i < 0, cost: 1
   6: [3] -> [8] : i >= 0, cost: 1
  10: [4] -> [2] : T, cost: 1
   3: [5] -> [6] : i'=-1+i, T, cost: 1
   4: [6] -> [7] : i'=-i, T, cost: 1
   5: [7] -> [4] : T, cost: 1
   7: [8] -> [9] : i'=1+i, T, cost: 1
   8: [9] -> [10] : i'=-i, T, cost: 1
   9: [10] -> [4] : T, cost: 1

Chained Linear Paths

Start location: [1]
Program variables: i
   0: [1] -> [2] : i'=nondet, T, cost: 1
   1: [2] -> [3] : (i < 0 \/ i > 0), cost: 1
  11: [2] -> [11] : (i <= 0 /\ i >= 0), cost: 1
  16: [3] -> [4] : i'=1-i, i < 0, cost: 1
  17: [3] -> [4] : i'=-1-i, i >= 0, cost: 1
  10: [4] -> [2] : T, cost: 1

	Eliminating location [5] by chaining:

	Applied chaining

	First rule:
	[3] -> [5] : i < 0, cost: 1
	Second rule:
	[5] -> [6] : i'=-1+i, T, cost: 1
	New rule:
	[3] -> [6] : i'=-1+i, i < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 2 3
	
	Eliminating location [8] by chaining:

	Applied chaining

	First rule:
	[3] -> [8] : i >= 0, cost: 1
	Second rule:
	[8] -> [9] : i'=1+i, T, cost: 1
	New rule:
	[3] -> [9] : i'=1+i, i >= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 6 7
	
	Eliminating location [6] by chaining:

	Applied chaining

	First rule:
	[3] -> [6] : i'=-1+i, i < 0, cost: 1
	Second rule:
	[6] -> [7] : i'=-i, T, cost: 1
	New rule:
	[3] -> [7] : i'=1-i, i < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 4 12
	
	Eliminating location [9] by chaining:

	Applied chaining

	First rule:
	[3] -> [9] : i'=1+i, i >= 0, cost: 1
	Second rule:
	[9] -> [10] : i'=-i, T, cost: 1
	New rule:
	[3] -> [10] : i'=-1-i, i >= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 8 13
	
	Eliminating location [7] by chaining:

	Applied chaining

	First rule:
	[3] -> [7] : i'=1-i, i < 0, cost: 1
	Second rule:
	[7] -> [4] : T, cost: 1
	New rule:
	[3] -> [4] : i'=1-i, i < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 5 14
	
	Eliminating location [10] by chaining:

	Applied chaining

	First rule:
	[3] -> [10] : i'=-1-i, i >= 0, cost: 1
	Second rule:
	[10] -> [4] : T, cost: 1
	New rule:
	[3] -> [4] : i'=-1-i, i >= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 9 15

Step with 0

	Trace

	0[T]
	
	Blocked

	[{}, {}]

Step with 11

	Trace

	0[T], 11[(i <= 0 /\ i >= 0)]
	
	Blocked

	[{}, {}, {}]

Backtrack

	Trace

	0[T]
	
	Blocked

	[{}, {11[T]}]

Step with 1

	Trace

	0[T], 1[(i > 0)]
	
	Blocked

	[{}, {11[T]}, {}]

Step with 17

	Trace

	0[T], 1[(i > 0)], 17[(i >= 0)]
	
	Blocked

	[{}, {11[T]}, {16[T]}, {}]

Step with 10

	Trace

	0[T], 1[(i > 0)], 17[(i >= 0)], 10[T]
	
	Blocked

	[{}, {11[T]}, {16[T]}, {}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 1

	Trace

	0[T], 1[(i > 0)], 17[(i >= 0)], 10[T], 1[(i < 0)]
	
	Blocked

	[{}, {11[T]}, {16[T]}, {}, {}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 16

	Trace

	0[T], 1[(i > 0)], 17[(i >= 0)], 10[T], 1[(i < 0)], 16[(i < 0)]
	
	Blocked

	[{}, {11[T]}, {16[T]}, {}, {}, {17[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 10

	Trace

	0[T], 1[(i > 0)], 17[(i >= 0)], 10[T], 1[(i < 0)], 16[(i < 0)], 10[T]
	
	Blocked

	[{}, {11[T]}, {16[T]}, {}, {}, {17[T]}, {}, {}]

Acceleration Failed

marked recursive suffix as redundant

Nonterm

Start location: [1]
Program variables: i
   0: [1] -> [2] : i'=nondet, T, cost: 1
   1: [2] -> [3] : (i < 0 \/ i > 0), cost: 1
  11: [2] -> [11] : (i <= 0 /\ i >= 0), cost: 1
  18: [2] -> LoAT_sink : (-1+n >= 0 /\ 1+i > 0 /\ i > 0 /\ i >= 0), cost: NONTERM
  19: [2] -> [2] : i'=2*n+i, (-1+n >= 0 /\ 1+i > 0 /\ i > 0 /\ i >= 0), cost: 1
  16: [3] -> [4] : i'=1-i, i < 0, cost: 1
  17: [3] -> [4] : i'=-1-i, i >= 0, cost: 1
  10: [4] -> [2] : T, cost: 1

	Certificate of Non-Termination

	Original rule:
	[2] -> [2] : i'=2+i, (-1-i < 0 /\ i > 0 /\ i >= 0), cost: 1
	New rule:
	[2] -> LoAT_sink : (-1+n >= 0 /\ 1+i > 0 /\ i > 0 /\ i >= 0), cost: NONTERM

		1+i > 0 [0]: monotonic increase yields 1+i > 0
		
		i > 0 [0]: monotonic increase yields i > 0, dependencies: 1+i > 0
		
		i >= 0 [0]: monotonic increase yields i >= 0, dependencies: 1+i > 0
		
		Replacement map: {1+i > 0 -> 1+i > 0, i > 0 -> i > 0, i >= 0 -> i >= 0}

	Loop Acceleration

	Original rule:
	[2] -> [2] : i'=2+i, (-1-i < 0 /\ i > 0 /\ i >= 0), cost: 1
	New rule:
	[2] -> [2] : i'=2*n+i, (-1+n >= 0 /\ 1+i > 0 /\ i > 0 /\ i >= 0), cost: 1

		1+i > 0 [0]: monotonic increase yields 1+i > 0
		
		i > 0 [0]: monotonic increase yields i > 0, dependencies: 1+i > 0
		
		i >= 0 [0]: monotonic increase yields i >= 0, dependencies: 1+i > 0
		
		Replacement map: {1+i > 0 -> 1+i > 0, i > 0 -> i > 0, i >= 0 -> i >= 0}

Step with 18

	Trace

	0[T], 18[(-1+n >= 0 /\ 1+i > 0 /\ i > 0 /\ i >= 0)]
	
	Blocked

	[{}, {11[T]}, {18[T]}]

Refute

	Counterexample

	[ i=1 ] 0 [ i=i ] 18
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
