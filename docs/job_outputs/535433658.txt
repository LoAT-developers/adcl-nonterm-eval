WORST_CASE(Omega(0),?)

Initial ITS
Start location: __init
   0: f1_0_main_Load -> f33_0_rec_Cmp : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (arg2-arg1P0 == 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 1
   1: f33_0_rec_Cmp -> f48_0_rec_GE : arg2'=arg2P1, arg1'=arg1P1, arg3'=arg3P1, (arg1-arg3P1 == 0 /\ arg1-arg1P1 == 0 /\ -arg2P1+arg1 == 0), cost: 1
   2: f48_0_rec_GE -> f33_0_rec_Cmp : arg2'=arg2P2, arg1'=arg1P2, arg3'=arg3P2, (-1-arg1P2+arg1 == 0 /\ arg1 > 0 /\ arg2-arg3 == 0 /\ -1 < 0 /\ -99+arg2 > 0), cost: 1
   3: f48_0_rec_GE -> f77_0_descend_LE : arg2'=arg2P3, arg1'=arg1P3, arg3'=arg3P3, (arg2 > 0 /\ -100+arg2 < 0 /\ arg2-arg3 == 0 /\ arg2-arg1P3 == 0), cost: 1
   4: f48_0_rec_GE -> f77_0_descend_LE : arg2'=arg2P4, arg1'=arg1P4, arg3'=arg3P4, (arg2 > 0 /\ -100+arg2 < 0 /\ arg2-arg3 == 0 /\ arg2-arg1P4 == 0), cost: 1
   5: f48_0_rec_GE -> f48_0_rec_GE : arg2'=arg2P5, arg1'=arg1P5, arg3'=arg3P5, (-arg1P5+arg1 == 0 /\ arg2 > 0 /\ 1+arg2-arg3P5 == 0 /\ 1-arg2P5+arg2 == 0 /\ -100+arg2 < 0 /\ arg2-arg3 == 0), cost: 1
   6: f77_0_descend_LE -> f77_0_descend_LE : arg2'=arg2P6, arg1'=arg1P6, arg3'=arg3P6, (-1-arg1P6+arg1 == 0 /\ arg1 > 0 /\ -1 < 0), cost: 1
   7: __init -> f1_0_main_Load : arg2'=arg2P7, arg1'=arg1P7, arg3'=arg3P7, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_Load -> f33_0_rec_Cmp : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (arg2-arg1P0 == 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 1
New rule:
f1_0_main_Load -> f33_0_rec_Cmp : arg2'=arg2P0, arg1'=arg2, arg3'=arg3P0, (1+arg2 > 0 /\ arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f33_0_rec_Cmp -> f48_0_rec_GE : arg2'=arg2P1, arg1'=arg1P1, arg3'=arg3P1, (arg1-arg3P1 == 0 /\ arg1-arg1P1 == 0 /\ -arg2P1+arg1 == 0), cost: 1
New rule:
f33_0_rec_Cmp -> f48_0_rec_GE : arg2'=arg1, arg3'=arg1, TRUE, cost: 1

Applied preprocessing
Original rule:
f48_0_rec_GE -> f33_0_rec_Cmp : arg2'=arg2P2, arg1'=arg1P2, arg3'=arg3P2, (-1-arg1P2+arg1 == 0 /\ arg1 > 0 /\ arg2-arg3 == 0 /\ -1 < 0 /\ -99+arg2 > 0), cost: 1
New rule:
f48_0_rec_GE -> f33_0_rec_Cmp : arg2'=arg2P2, arg1'=-1+arg1, arg3'=arg3P2, (arg1 > 0 /\ arg2-arg3 == 0 /\ -99+arg2 > 0), cost: 1

Applied preprocessing
Original rule:
f48_0_rec_GE -> f77_0_descend_LE : arg2'=arg2P3, arg1'=arg1P3, arg3'=arg3P3, (arg2 > 0 /\ -100+arg2 < 0 /\ arg2-arg3 == 0 /\ arg2-arg1P3 == 0), cost: 1
New rule:
f48_0_rec_GE -> f77_0_descend_LE : arg2'=arg2P3, arg1'=arg2, arg3'=arg3P3, (arg2 > 0 /\ 100-arg2 > 0 /\ arg2-arg3 == 0), cost: 1

Applied preprocessing
Original rule:
f48_0_rec_GE -> f77_0_descend_LE : arg2'=arg2P4, arg1'=arg1P4, arg3'=arg3P4, (arg2 > 0 /\ -100+arg2 < 0 /\ arg2-arg3 == 0 /\ arg2-arg1P4 == 0), cost: 1
New rule:
f48_0_rec_GE -> f77_0_descend_LE : arg2'=arg2P4, arg1'=arg2, arg3'=arg3P4, (arg2 > 0 /\ 100-arg2 > 0 /\ arg2-arg3 == 0), cost: 1

Applied preprocessing
Original rule:
f48_0_rec_GE -> f48_0_rec_GE : arg2'=arg2P5, arg1'=arg1P5, arg3'=arg3P5, (-arg1P5+arg1 == 0 /\ arg2 > 0 /\ 1+arg2-arg3P5 == 0 /\ 1-arg2P5+arg2 == 0 /\ -100+arg2 < 0 /\ arg2-arg3 == 0), cost: 1
New rule:
f48_0_rec_GE -> f48_0_rec_GE : arg2'=1+arg2, arg3'=1+arg2, (arg2 > 0 /\ 100-arg2 > 0 /\ arg2-arg3 == 0), cost: 1

Applied preprocessing
Original rule:
f77_0_descend_LE -> f77_0_descend_LE : arg2'=arg2P6, arg1'=arg1P6, arg3'=arg3P6, (-1-arg1P6+arg1 == 0 /\ arg1 > 0 /\ -1 < 0), cost: 1
New rule:
f77_0_descend_LE -> f77_0_descend_LE : arg2'=arg2P6, arg1'=-1+arg1, arg3'=arg3P6, arg1 > 0, cost: 1

Simplified rules
Start location: __init
   8: f1_0_main_Load -> f33_0_rec_Cmp : arg2'=arg2P0, arg1'=arg2, arg3'=arg3P0, (1+arg2 > 0 /\ arg1 > 0), cost: 1
   9: f33_0_rec_Cmp -> f48_0_rec_GE : arg2'=arg1, arg3'=arg1, TRUE, cost: 1
  10: f48_0_rec_GE -> f33_0_rec_Cmp : arg2'=arg2P2, arg1'=-1+arg1, arg3'=arg3P2, (arg1 > 0 /\ arg2-arg3 == 0 /\ -99+arg2 > 0), cost: 1
  11: f48_0_rec_GE -> f77_0_descend_LE : arg2'=arg2P3, arg1'=arg2, arg3'=arg3P3, (arg2 > 0 /\ 100-arg2 > 0 /\ arg2-arg3 == 0), cost: 1
  12: f48_0_rec_GE -> f77_0_descend_LE : arg2'=arg2P4, arg1'=arg2, arg3'=arg3P4, (arg2 > 0 /\ 100-arg2 > 0 /\ arg2-arg3 == 0), cost: 1
  13: f48_0_rec_GE -> f48_0_rec_GE : arg2'=1+arg2, arg3'=1+arg2, (arg2 > 0 /\ 100-arg2 > 0 /\ arg2-arg3 == 0), cost: 1
  14: f77_0_descend_LE -> f77_0_descend_LE : arg2'=arg2P6, arg1'=-1+arg1, arg3'=arg3P6, arg1 > 0, cost: 1
   7: __init -> f1_0_main_Load : arg2'=arg2P7, arg1'=arg1P7, arg3'=arg3P7, TRUE, cost: 1


Applied acceleration
Original rule:
f48_0_rec_GE -> f48_0_rec_GE : arg2'=1+arg2, arg3'=1+arg2, (arg2 > 0 /\ 100-arg2 > 0 /\ arg2-arg3 == 0), cost: 1
New rule:
f48_0_rec_GE -> f48_0_rec_GE : arg2'=arg2+n, arg3'=arg2+n, (arg2 > 0 /\ -1+n >= 0 /\ arg2-arg3 >= 0 /\ 101-arg2-n > 0 /\ -arg2+arg3 >= 0), cost: n
Sub-proof via acceration calculus written to file:///tmp/tmpnam_IgBKpG.txt

Applied instantiation
Original rule:
f48_0_rec_GE -> f48_0_rec_GE : arg2'=arg2+n, arg3'=arg2+n, (arg2 > 0 /\ -1+n >= 0 /\ arg2-arg3 >= 0 /\ 101-arg2-n > 0 /\ -arg2+arg3 >= 0), cost: n
New rule:
f48_0_rec_GE -> f48_0_rec_GE : arg2'=100, arg3'=100, (1 > 0 /\ arg2 > 0 /\ 99-arg2 >= 0 /\ arg2-arg3 >= 0 /\ -arg2+arg3 >= 0), cost: 100-arg2

Applied simplification
Original rule:
f48_0_rec_GE -> f48_0_rec_GE : arg2'=100, arg3'=100, (1 > 0 /\ arg2 > 0 /\ 99-arg2 >= 0 /\ arg2-arg3 >= 0 /\ -arg2+arg3 >= 0), cost: 100-arg2
New rule:
f48_0_rec_GE -> f48_0_rec_GE : arg2'=100, arg3'=100, (arg2 > 0 /\ arg2-arg3 >= 0 /\ -arg2+arg3 >= 0 /\ -99+arg2 <= 0), cost: 100-arg2

Applied deletion
Removed the following rules: 13

Applied acceleration
Original rule:
f77_0_descend_LE -> f77_0_descend_LE : arg2'=arg2P6, arg1'=-1+arg1, arg3'=arg3P6, arg1 > 0, cost: 1
New rule:
f77_0_descend_LE -> f77_0_descend_LE : arg2'=arg2P6, arg1'=arg1-n0, arg3'=arg3P6, (1+arg1-n0 > 0 /\ -1+n0 >= 0), cost: n0
Sub-proof via acceration calculus written to file:///tmp/tmpnam_HpkPhf.txt

Applied instantiation
Original rule:
f77_0_descend_LE -> f77_0_descend_LE : arg2'=arg2P6, arg1'=arg1-n0, arg3'=arg3P6, (1+arg1-n0 > 0 /\ -1+n0 >= 0), cost: n0
New rule:
f77_0_descend_LE -> f77_0_descend_LE : arg2'=arg2P6, arg1'=0, arg3'=arg3P6, (1 > 0 /\ -1+arg1 >= 0), cost: arg1

Applied simplification
Original rule:
f77_0_descend_LE -> f77_0_descend_LE : arg2'=arg2P6, arg1'=0, arg3'=arg3P6, (1 > 0 /\ -1+arg1 >= 0), cost: arg1
New rule:
f77_0_descend_LE -> f77_0_descend_LE : arg2'=arg2P6, arg1'=0, arg3'=arg3P6, -1+arg1 >= 0, cost: arg1

Applied deletion
Removed the following rules: 14

Accelerated simple loops
Start location: __init
   8: f1_0_main_Load -> f33_0_rec_Cmp : arg2'=arg2P0, arg1'=arg2, arg3'=arg3P0, (1+arg2 > 0 /\ arg1 > 0), cost: 1
   9: f33_0_rec_Cmp -> f48_0_rec_GE : arg2'=arg1, arg3'=arg1, TRUE, cost: 1
  10: f48_0_rec_GE -> f33_0_rec_Cmp : arg2'=arg2P2, arg1'=-1+arg1, arg3'=arg3P2, (arg1 > 0 /\ arg2-arg3 == 0 /\ -99+arg2 > 0), cost: 1
  11: f48_0_rec_GE -> f77_0_descend_LE : arg2'=arg2P3, arg1'=arg2, arg3'=arg3P3, (arg2 > 0 /\ 100-arg2 > 0 /\ arg2-arg3 == 0), cost: 1
  12: f48_0_rec_GE -> f77_0_descend_LE : arg2'=arg2P4, arg1'=arg2, arg3'=arg3P4, (arg2 > 0 /\ 100-arg2 > 0 /\ arg2-arg3 == 0), cost: 1
  16: f48_0_rec_GE -> f48_0_rec_GE : arg2'=100, arg3'=100, (arg2 > 0 /\ arg2-arg3 >= 0 /\ -arg2+arg3 >= 0 /\ -99+arg2 <= 0), cost: 100-arg2
  18: f77_0_descend_LE -> f77_0_descend_LE : arg2'=arg2P6, arg1'=0, arg3'=arg3P6, -1+arg1 >= 0, cost: arg1
   7: __init -> f1_0_main_Load : arg2'=arg2P7, arg1'=arg1P7, arg3'=arg3P7, TRUE, cost: 1


Applied chaining
First rule:
f33_0_rec_Cmp -> f48_0_rec_GE : arg2'=arg1, arg3'=arg1, TRUE, cost: 1
Second rule:
f48_0_rec_GE -> f48_0_rec_GE : arg2'=100, arg3'=100, (arg2 > 0 /\ arg2-arg3 >= 0 /\ -arg2+arg3 >= 0 /\ -99+arg2 <= 0), cost: 100-arg2
New rule:
f33_0_rec_Cmp -> f48_0_rec_GE : arg2'=100, arg3'=100, (arg1 > 0 /\ -99+arg1 <= 0), cost: 101-arg1

Applied deletion
Removed the following rules: 16

Applied chaining
First rule:
f48_0_rec_GE -> f77_0_descend_LE : arg2'=arg2P3, arg1'=arg2, arg3'=arg3P3, (arg2 > 0 /\ 100-arg2 > 0 /\ arg2-arg3 == 0), cost: 1
Second rule:
f77_0_descend_LE -> f77_0_descend_LE : arg2'=arg2P6, arg1'=0, arg3'=arg3P6, -1+arg1 >= 0, cost: arg1
New rule:
f48_0_rec_GE -> f77_0_descend_LE : arg2'=arg2P6, arg1'=0, arg3'=arg3P6, (100-arg2 > 0 /\ -1+arg2 >= 0 /\ arg2-arg3 == 0), cost: 1+arg2

Applied chaining
First rule:
f48_0_rec_GE -> f77_0_descend_LE : arg2'=arg2P4, arg1'=arg2, arg3'=arg3P4, (arg2 > 0 /\ 100-arg2 > 0 /\ arg2-arg3 == 0), cost: 1
Second rule:
f77_0_descend_LE -> f77_0_descend_LE : arg2'=arg2P6, arg1'=0, arg3'=arg3P6, -1+arg1 >= 0, cost: arg1
New rule:
f48_0_rec_GE -> f77_0_descend_LE : arg2'=arg2P6, arg1'=0, arg3'=arg3P6, (100-arg2 > 0 /\ -1+arg2 >= 0 /\ arg2-arg3 == 0), cost: 1+arg2

Applied deletion
Removed the following rules: 18

Chained accelerated rules with incoming rules
Start location: __init
   8: f1_0_main_Load -> f33_0_rec_Cmp : arg2'=arg2P0, arg1'=arg2, arg3'=arg3P0, (1+arg2 > 0 /\ arg1 > 0), cost: 1
   9: f33_0_rec_Cmp -> f48_0_rec_GE : arg2'=arg1, arg3'=arg1, TRUE, cost: 1
  19: f33_0_rec_Cmp -> f48_0_rec_GE : arg2'=100, arg3'=100, (arg1 > 0 /\ -99+arg1 <= 0), cost: 101-arg1
  10: f48_0_rec_GE -> f33_0_rec_Cmp : arg2'=arg2P2, arg1'=-1+arg1, arg3'=arg3P2, (arg1 > 0 /\ arg2-arg3 == 0 /\ -99+arg2 > 0), cost: 1
  11: f48_0_rec_GE -> f77_0_descend_LE : arg2'=arg2P3, arg1'=arg2, arg3'=arg3P3, (arg2 > 0 /\ 100-arg2 > 0 /\ arg2-arg3 == 0), cost: 1
  12: f48_0_rec_GE -> f77_0_descend_LE : arg2'=arg2P4, arg1'=arg2, arg3'=arg3P4, (arg2 > 0 /\ 100-arg2 > 0 /\ arg2-arg3 == 0), cost: 1
  20: f48_0_rec_GE -> f77_0_descend_LE : arg2'=arg2P6, arg1'=0, arg3'=arg3P6, (100-arg2 > 0 /\ -1+arg2 >= 0 /\ arg2-arg3 == 0), cost: 1+arg2
   7: __init -> f1_0_main_Load : arg2'=arg2P7, arg1'=arg1P7, arg3'=arg3P7, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
   8: f1_0_main_Load -> f33_0_rec_Cmp : arg2'=arg2P0, arg1'=arg2, arg3'=arg3P0, (1+arg2 > 0 /\ arg1 > 0), cost: 1
   9: f33_0_rec_Cmp -> f48_0_rec_GE : arg2'=arg1, arg3'=arg1, TRUE, cost: 1
  19: f33_0_rec_Cmp -> f48_0_rec_GE : arg2'=100, arg3'=100, (arg1 > 0 /\ -99+arg1 <= 0), cost: 101-arg1
  10: f48_0_rec_GE -> f33_0_rec_Cmp : arg2'=arg2P2, arg1'=-1+arg1, arg3'=arg3P2, (arg1 > 0 /\ arg2-arg3 == 0 /\ -99+arg2 > 0), cost: 1
   7: __init -> f1_0_main_Load : arg2'=arg2P7, arg1'=arg1P7, arg3'=arg3P7, TRUE, cost: 1


Eliminating location f1_0_main_Load by chaining:

Applied chaining
First rule:
__init -> f1_0_main_Load : arg2'=arg2P7, arg1'=arg1P7, arg3'=arg3P7, TRUE, cost: 1
Second rule:
f1_0_main_Load -> f33_0_rec_Cmp : arg2'=arg2P0, arg1'=arg2, arg3'=arg3P0, (1+arg2 > 0 /\ arg1 > 0), cost: 1
New rule:
__init -> f33_0_rec_Cmp : arg2'=arg2P0, arg1'=arg2P7, arg3'=arg3P0, (arg1P7 > 0 /\ 1+arg2P7 > 0), cost: 2

Applied deletion
Removed the following rules: 7 8

Eliminated locations on linear paths
Start location: __init
   9: f33_0_rec_Cmp -> f48_0_rec_GE : arg2'=arg1, arg3'=arg1, TRUE, cost: 1
  19: f33_0_rec_Cmp -> f48_0_rec_GE : arg2'=100, arg3'=100, (arg1 > 0 /\ -99+arg1 <= 0), cost: 101-arg1
  10: f48_0_rec_GE -> f33_0_rec_Cmp : arg2'=arg2P2, arg1'=-1+arg1, arg3'=arg3P2, (arg1 > 0 /\ arg2-arg3 == 0 /\ -99+arg2 > 0), cost: 1
  21: __init -> f33_0_rec_Cmp : arg2'=arg2P0, arg1'=arg2P7, arg3'=arg3P0, (arg1P7 > 0 /\ 1+arg2P7 > 0), cost: 2


Eliminating location f48_0_rec_GE by chaining:

Applied chaining
First rule:
f33_0_rec_Cmp -> f48_0_rec_GE : arg2'=arg1, arg3'=arg1, TRUE, cost: 1
Second rule:
f48_0_rec_GE -> f33_0_rec_Cmp : arg2'=arg2P2, arg1'=-1+arg1, arg3'=arg3P2, (arg1 > 0 /\ arg2-arg3 == 0 /\ -99+arg2 > 0), cost: 1
New rule:
f33_0_rec_Cmp -> f33_0_rec_Cmp : arg2'=arg2P2, arg1'=-1+arg1, arg3'=arg3P2, (0 == 0 /\ arg1 > 0 /\ -99+arg1 > 0), cost: 2

Applied simplification
Original rule:
f33_0_rec_Cmp -> f33_0_rec_Cmp : arg2'=arg2P2, arg1'=-1+arg1, arg3'=arg3P2, (0 == 0 /\ arg1 > 0 /\ -99+arg1 > 0), cost: 2
New rule:
f33_0_rec_Cmp -> f33_0_rec_Cmp : arg2'=arg2P2, arg1'=-1+arg1, arg3'=arg3P2, -99+arg1 > 0, cost: 2

Applied chaining
First rule:
f33_0_rec_Cmp -> f48_0_rec_GE : arg2'=100, arg3'=100, (arg1 > 0 /\ -99+arg1 <= 0), cost: 101-arg1
Second rule:
f48_0_rec_GE -> f33_0_rec_Cmp : arg2'=arg2P2, arg1'=-1+arg1, arg3'=arg3P2, (arg1 > 0 /\ arg2-arg3 == 0 /\ -99+arg2 > 0), cost: 1
New rule:
f33_0_rec_Cmp -> f33_0_rec_Cmp : arg2'=arg2P2, arg1'=-1+arg1, arg3'=arg3P2, (0 == 0 /\ 1 > 0 /\ arg1 > 0 /\ -99+arg1 <= 0), cost: 102-arg1

Applied simplification
Original rule:
f33_0_rec_Cmp -> f33_0_rec_Cmp : arg2'=arg2P2, arg1'=-1+arg1, arg3'=arg3P2, (0 == 0 /\ 1 > 0 /\ arg1 > 0 /\ -99+arg1 <= 0), cost: 102-arg1
New rule:
f33_0_rec_Cmp -> f33_0_rec_Cmp : arg2'=arg2P2, arg1'=-1+arg1, arg3'=arg3P2, (arg1 > 0 /\ -99+arg1 <= 0), cost: 102-arg1

Applied deletion
Removed the following rules: 9 10 19

Eliminated locations on tree-shaped paths
Start location: __init
  22: f33_0_rec_Cmp -> f33_0_rec_Cmp : arg2'=arg2P2, arg1'=-1+arg1, arg3'=arg3P2, -99+arg1 > 0, cost: 2
  23: f33_0_rec_Cmp -> f33_0_rec_Cmp : arg2'=arg2P2, arg1'=-1+arg1, arg3'=arg3P2, (arg1 > 0 /\ -99+arg1 <= 0), cost: 102-arg1
  21: __init -> f33_0_rec_Cmp : arg2'=arg2P0, arg1'=arg2P7, arg3'=arg3P0, (arg1P7 > 0 /\ 1+arg2P7 > 0), cost: 2


Applied acceleration
Original rule:
f33_0_rec_Cmp -> f33_0_rec_Cmp : arg2'=arg2P2, arg1'=-1+arg1, arg3'=arg3P2, -99+arg1 > 0, cost: 2
New rule:
f33_0_rec_Cmp -> f33_0_rec_Cmp : arg2'=arg2P2, arg1'=arg1-n1, arg3'=arg3P2, (-1+n1 >= 0 /\ -98+arg1-n1 > 0), cost: 2*n1
Sub-proof via acceration calculus written to file:///tmp/tmpnam_cGInIc.txt

Applied instantiation
Original rule:
f33_0_rec_Cmp -> f33_0_rec_Cmp : arg2'=arg2P2, arg1'=arg1-n1, arg3'=arg3P2, (-1+n1 >= 0 /\ -98+arg1-n1 > 0), cost: 2*n1
New rule:
f33_0_rec_Cmp -> f33_0_rec_Cmp : arg2'=arg2P2, arg1'=99, arg3'=arg3P2, (1 > 0 /\ -100+arg1 >= 0), cost: -198+2*arg1

Applied acceleration
Original rule:
f33_0_rec_Cmp -> f33_0_rec_Cmp : arg2'=arg2P2, arg1'=-1+arg1, arg3'=arg3P2, (arg1 > 0 /\ -99+arg1 <= 0), cost: 102-arg1
New rule:
f33_0_rec_Cmp -> f33_0_rec_Cmp : arg2'=arg2P2, arg1'=arg1-n2, arg3'=arg3P2, (99-arg1 >= 0 /\ -1+n2 >= 0 /\ 1+arg1-n2 > 0), cost: 1/2*n2^2+203/2*n2-arg1*n2
Sub-proof via acceration calculus written to file:///tmp/tmpnam_EmBGlA.txt

Applied instantiation
Original rule:
f33_0_rec_Cmp -> f33_0_rec_Cmp : arg2'=arg2P2, arg1'=arg1-n2, arg3'=arg3P2, (99-arg1 >= 0 /\ -1+n2 >= 0 /\ 1+arg1-n2 > 0), cost: 1/2*n2^2+203/2*n2-arg1*n2
New rule:
f33_0_rec_Cmp -> f33_0_rec_Cmp : arg2'=arg2P2, arg1'=0, arg3'=arg3P2, (1 > 0 /\ 99-arg1 >= 0 /\ -1+arg1 >= 0), cost: 203/2*arg1-1/2*arg1^2

Applied simplification
Original rule:
f33_0_rec_Cmp -> f33_0_rec_Cmp : arg2'=arg2P2, arg1'=99, arg3'=arg3P2, (1 > 0 /\ -100+arg1 >= 0), cost: -198+2*arg1
New rule:
f33_0_rec_Cmp -> f33_0_rec_Cmp : arg2'=arg2P2, arg1'=99, arg3'=arg3P2, -100+arg1 >= 0, cost: -198+2*arg1

Applied simplification
Original rule:
f33_0_rec_Cmp -> f33_0_rec_Cmp : arg2'=arg2P2, arg1'=0, arg3'=arg3P2, (1 > 0 /\ 99-arg1 >= 0 /\ -1+arg1 >= 0), cost: 203/2*arg1-1/2*arg1^2
New rule:
f33_0_rec_Cmp -> f33_0_rec_Cmp : arg2'=arg2P2, arg1'=0, arg3'=arg3P2, (-99+arg1 <= 0 /\ -1+arg1 >= 0), cost: 203/2*arg1-1/2*arg1^2

Applied deletion
Removed the following rules: 22 23

Accelerated simple loops
Start location: __init
  26: f33_0_rec_Cmp -> f33_0_rec_Cmp : arg2'=arg2P2, arg1'=99, arg3'=arg3P2, -100+arg1 >= 0, cost: -198+2*arg1
  27: f33_0_rec_Cmp -> f33_0_rec_Cmp : arg2'=arg2P2, arg1'=0, arg3'=arg3P2, (-99+arg1 <= 0 /\ -1+arg1 >= 0), cost: 203/2*arg1-1/2*arg1^2
  21: __init -> f33_0_rec_Cmp : arg2'=arg2P0, arg1'=arg2P7, arg3'=arg3P0, (arg1P7 > 0 /\ 1+arg2P7 > 0), cost: 2


Applied chaining
First rule:
__init -> f33_0_rec_Cmp : arg2'=arg2P0, arg1'=arg2P7, arg3'=arg3P0, (arg1P7 > 0 /\ 1+arg2P7 > 0), cost: 2
Second rule:
f33_0_rec_Cmp -> f33_0_rec_Cmp : arg2'=arg2P2, arg1'=99, arg3'=arg3P2, -100+arg1 >= 0, cost: -198+2*arg1
New rule:
__init -> f33_0_rec_Cmp : arg2'=arg2P2, arg1'=99, arg3'=arg3P2, -100+arg2P7 >= 0, cost: -196+2*arg2P7

Applied chaining
First rule:
__init -> f33_0_rec_Cmp : arg2'=arg2P0, arg1'=arg2P7, arg3'=arg3P0, (arg1P7 > 0 /\ 1+arg2P7 > 0), cost: 2
Second rule:
f33_0_rec_Cmp -> f33_0_rec_Cmp : arg2'=arg2P2, arg1'=0, arg3'=arg3P2, (-99+arg1 <= 0 /\ -1+arg1 >= 0), cost: 203/2*arg1-1/2*arg1^2
New rule:
__init -> f33_0_rec_Cmp : arg2'=arg2P2, arg1'=0, arg3'=arg3P2, (-99+arg2P7 <= 0 /\ -1+arg2P7 >= 0), cost: 2-1/2*arg2P7^2+203/2*arg2P7

Applied deletion
Removed the following rules: 26 27

Chained accelerated rules with incoming rules
Start location: __init
  21: __init -> f33_0_rec_Cmp : arg2'=arg2P0, arg1'=arg2P7, arg3'=arg3P0, (arg1P7 > 0 /\ 1+arg2P7 > 0), cost: 2
  28: __init -> f33_0_rec_Cmp : arg2'=arg2P2, arg1'=99, arg3'=arg3P2, -100+arg2P7 >= 0, cost: -196+2*arg2P7
  29: __init -> f33_0_rec_Cmp : arg2'=arg2P2, arg1'=0, arg3'=arg3P2, (-99+arg2P7 <= 0 /\ -1+arg2P7 >= 0), cost: 2-1/2*arg2P7^2+203/2*arg2P7


Removed unreachable locations and irrelevant leafs
Start location: __init
  <empty>


Computing asymptotic complexity

Proved the following lower bound
Complexity:  Unknown
Cpx degree: ?

Solved cost: 0
Rule cost:   0

