NO

Initial ITS

Start location: l3
Program variables: elem_13^0 l_11^0 len_98^0 x_12^0
   0: l0 -> l1 : elem_13^0'=elem_13^post1, l_11^0'=l_11^post1, len_98^0'=len_98^post1, x_12^0'=x_12^post1, (0 == 0 /\ l_11^post1-x_12^0 == 0 /\ 1-len_98^0 <= 0 /\ -len_98^0 <= 0 /\ -elem_13^post1 <= 0 /\ elem_13^post1 <= 0 /\ -l_11^0+elem_13^post1 == 0 /\ x_12^0-x_12^post1 == 0 /\ 1-len_98^1 <= 0 /\ -len_98^1 <= 0), cost: 1
   1: l1 -> l0 : elem_13^0'=elem_13^post2, l_11^0'=l_11^post2, len_98^0'=len_98^post2, x_12^0'=x_12^post2, (-elem_13^post2+elem_13^0 == 0 /\ -x_12^post2+x_12^0 == 0 /\ -l_11^post2+l_11^0 == 0 /\ len_98^0-len_98^post2 == 0), cost: 1
   2: l2 -> l0 : elem_13^0'=elem_13^post3, l_11^0'=l_11^post3, len_98^0'=len_98^post3, x_12^0'=x_12^post3, (len_98^0-len_98^post3 == 0 /\ -x_12^post3+x_12^0 == 0 /\ elem_13^0-elem_13^post3 == 0 /\ l_11^0-l_11^post3 == 0), cost: 1
   3: l3 -> l2 : elem_13^0'=elem_13^post4, l_11^0'=l_11^post4, len_98^0'=len_98^post4, x_12^0'=x_12^post4, (-x_12^post4+x_12^0 == 0 /\ -len_98^post4+len_98^0 == 0 /\ l_11^0-l_11^post4 == 0 /\ elem_13^0-elem_13^post4 == 0), cost: 1

Chained Linear Paths

Start location: l3
Program variables: elem_13^0 l_11^0 len_98^0 x_12^0
   5: l0 -> l0 : elem_13^0'=elem_13^post2, l_11^0'=l_11^post2, len_98^0'=len_98^post2, x_12^0'=x_12^post2, (0 == 0 /\ l_11^post1-x_12^0 == 0 /\ 1-len_98^0 <= 0 /\ -len_98^0 <= 0 /\ -elem_13^post1 <= 0 /\ len_98^post1-len_98^post2 == 0 /\ -x_12^post2+x_12^post1 == 0 /\ elem_13^post1 <= 0 /\ -l_11^0+elem_13^post1 == 0 /\ -elem_13^post2+elem_13^post1 == 0 /\ x_12^0-x_12^post1 == 0 /\ l_11^post1-l_11^post2 == 0 /\ 1-len_98^1 <= 0 /\ -len_98^1 <= 0), cost: 1
   4: l3 -> l0 : elem_13^0'=elem_13^post3, l_11^0'=l_11^post3, len_98^0'=len_98^post3, x_12^0'=x_12^post3, (-x_12^post4+x_12^0 == 0 /\ -x_12^post3+x_12^post4 == 0 /\ len_98^post4-len_98^post3 == 0 /\ -elem_13^post3+elem_13^post4 == 0 /\ -l_11^post3+l_11^post4 == 0 /\ -len_98^post4+len_98^0 == 0 /\ l_11^0-l_11^post4 == 0 /\ elem_13^0-elem_13^post4 == 0), cost: 1

	Eliminating location l2 by chaining:

	Applied chaining

	First rule:
	l3 -> l2 : elem_13^0'=elem_13^post4, l_11^0'=l_11^post4, len_98^0'=len_98^post4, x_12^0'=x_12^post4, (-x_12^post4+x_12^0 == 0 /\ -len_98^post4+len_98^0 == 0 /\ l_11^0-l_11^post4 == 0 /\ elem_13^0-elem_13^post4 == 0), cost: 1
	Second rule:
	l2 -> l0 : elem_13^0'=elem_13^post3, l_11^0'=l_11^post3, len_98^0'=len_98^post3, x_12^0'=x_12^post3, (len_98^0-len_98^post3 == 0 /\ -x_12^post3+x_12^0 == 0 /\ elem_13^0-elem_13^post3 == 0 /\ l_11^0-l_11^post3 == 0), cost: 1
	New rule:
	l3 -> l0 : elem_13^0'=elem_13^post3, l_11^0'=l_11^post3, len_98^0'=len_98^post3, x_12^0'=x_12^post3, (-x_12^post4+x_12^0 == 0 /\ -x_12^post3+x_12^post4 == 0 /\ len_98^post4-len_98^post3 == 0 /\ -elem_13^post3+elem_13^post4 == 0 /\ -l_11^post3+l_11^post4 == 0 /\ -len_98^post4+len_98^0 == 0 /\ l_11^0-l_11^post4 == 0 /\ elem_13^0-elem_13^post4 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 2 3
	
	Eliminating location l1 by chaining:

	Applied chaining

	First rule:
	l0 -> l1 : elem_13^0'=elem_13^post1, l_11^0'=l_11^post1, len_98^0'=len_98^post1, x_12^0'=x_12^post1, (0 == 0 /\ l_11^post1-x_12^0 == 0 /\ 1-len_98^0 <= 0 /\ -len_98^0 <= 0 /\ -elem_13^post1 <= 0 /\ elem_13^post1 <= 0 /\ -l_11^0+elem_13^post1 == 0 /\ x_12^0-x_12^post1 == 0 /\ 1-len_98^1 <= 0 /\ -len_98^1 <= 0), cost: 1
	Second rule:
	l1 -> l0 : elem_13^0'=elem_13^post2, l_11^0'=l_11^post2, len_98^0'=len_98^post2, x_12^0'=x_12^post2, (-elem_13^post2+elem_13^0 == 0 /\ -x_12^post2+x_12^0 == 0 /\ -l_11^post2+l_11^0 == 0 /\ len_98^0-len_98^post2 == 0), cost: 1
	New rule:
	l0 -> l0 : elem_13^0'=elem_13^post2, l_11^0'=l_11^post2, len_98^0'=len_98^post2, x_12^0'=x_12^post2, (0 == 0 /\ l_11^post1-x_12^0 == 0 /\ 1-len_98^0 <= 0 /\ -len_98^0 <= 0 /\ -elem_13^post1 <= 0 /\ len_98^post1-len_98^post2 == 0 /\ -x_12^post2+x_12^post1 == 0 /\ elem_13^post1 <= 0 /\ -l_11^0+elem_13^post1 == 0 /\ -elem_13^post2+elem_13^post1 == 0 /\ x_12^0-x_12^post1 == 0 /\ l_11^post1-l_11^post2 == 0 /\ 1-len_98^1 <= 0 /\ -len_98^1 <= 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 1

Simplified Transitions

Start location: l3
Program variables: elem_13^0 l_11^0 len_98^0 x_12^0
   7: l0 -> l0 : elem_13^0'=0, l_11^0'=x_12^0, len_98^0'=len_98^post1, (-l_11^0 == 0 /\ 1-len_98^0 <= 0 /\ -len_98^0 <= 0), cost: 1
   6: l3 -> l0 : T, cost: 1

	Propagated Equalities

	Original rule:
	l3 -> l0 : elem_13^0'=elem_13^post3, l_11^0'=l_11^post3, len_98^0'=len_98^post3, x_12^0'=x_12^post3, (-x_12^post4+x_12^0 == 0 /\ -x_12^post3+x_12^post4 == 0 /\ len_98^post4-len_98^post3 == 0 /\ -elem_13^post3+elem_13^post4 == 0 /\ -l_11^post3+l_11^post4 == 0 /\ -len_98^post4+len_98^0 == 0 /\ l_11^0-l_11^post4 == 0 /\ elem_13^0-elem_13^post4 == 0), cost: 1
	New rule:
	l3 -> l0 : elem_13^0'=elem_13^post4, l_11^0'=l_11^post4, len_98^0'=len_98^post4, x_12^0'=x_12^post4, (0 == 0 /\ -x_12^post4+x_12^0 == 0 /\ -len_98^post4+len_98^0 == 0 /\ l_11^0-l_11^post4 == 0 /\ elem_13^0-elem_13^post4 == 0), cost: 1
	
		propagated equality x_12^post3 = x_12^post4
		
		propagated equality len_98^post3 = len_98^post4
		
		propagated equality elem_13^post3 = elem_13^post4
		
		propagated equality l_11^post3 = l_11^post4
		
	Propagated Equalities

	Original rule:
	l3 -> l0 : elem_13^0'=elem_13^post4, l_11^0'=l_11^post4, len_98^0'=len_98^post4, x_12^0'=x_12^post4, (0 == 0 /\ -x_12^post4+x_12^0 == 0 /\ -len_98^post4+len_98^0 == 0 /\ l_11^0-l_11^post4 == 0 /\ elem_13^0-elem_13^post4 == 0), cost: 1
	New rule:
	l3 -> l0 : elem_13^0'=elem_13^0, l_11^0'=l_11^0, len_98^0'=len_98^0, x_12^0'=x_12^0, 0 == 0, cost: 1
	
		propagated equality x_12^post4 = x_12^0
		
		propagated equality len_98^post4 = len_98^0
		
		propagated equality l_11^post4 = l_11^0
		
		propagated equality elem_13^post4 = elem_13^0
		
	Simplified Guard

	Original rule:
	l3 -> l0 : elem_13^0'=elem_13^0, l_11^0'=l_11^0, len_98^0'=len_98^0, x_12^0'=x_12^0, 0 == 0, cost: 1
	New rule:
	l3 -> l0 : elem_13^0'=elem_13^0, l_11^0'=l_11^0, len_98^0'=len_98^0, x_12^0'=x_12^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l3 -> l0 : elem_13^0'=elem_13^0, l_11^0'=l_11^0, len_98^0'=len_98^0, x_12^0'=x_12^0, T, cost: 1
	New rule:
	l3 -> l0 : T, cost: 1
	
	made implied equalities explicit

	Original rule:
	l0 -> l0 : elem_13^0'=elem_13^post2, l_11^0'=l_11^post2, len_98^0'=len_98^post2, x_12^0'=x_12^post2, (0 == 0 /\ l_11^post1-x_12^0 == 0 /\ 1-len_98^0 <= 0 /\ -len_98^0 <= 0 /\ -elem_13^post1 <= 0 /\ len_98^post1-len_98^post2 == 0 /\ -x_12^post2+x_12^post1 == 0 /\ elem_13^post1 <= 0 /\ -l_11^0+elem_13^post1 == 0 /\ -elem_13^post2+elem_13^post1 == 0 /\ x_12^0-x_12^post1 == 0 /\ l_11^post1-l_11^post2 == 0 /\ 1-len_98^1 <= 0 /\ -len_98^1 <= 0), cost: 1
	New rule:
	l0 -> l0 : elem_13^0'=elem_13^post2, l_11^0'=l_11^post2, len_98^0'=len_98^post2, x_12^0'=x_12^post2, (0 == 0 /\ l_11^post1-x_12^0 == 0 /\ 1-len_98^0 <= 0 /\ -len_98^0 <= 0 /\ -elem_13^post1 <= 0 /\ -elem_13^post1 == 0 /\ len_98^post1-len_98^post2 == 0 /\ -x_12^post2+x_12^post1 == 0 /\ elem_13^post1 <= 0 /\ -l_11^0+elem_13^post1 == 0 /\ -elem_13^post2+elem_13^post1 == 0 /\ x_12^0-x_12^post1 == 0 /\ l_11^post1-l_11^post2 == 0 /\ 1-len_98^1 <= 0 /\ -len_98^1 <= 0), cost: 1
	
	Propagated Equalities

	Original rule:
	l0 -> l0 : elem_13^0'=elem_13^post2, l_11^0'=l_11^post2, len_98^0'=len_98^post2, x_12^0'=x_12^post2, (0 == 0 /\ l_11^post1-x_12^0 == 0 /\ 1-len_98^0 <= 0 /\ -len_98^0 <= 0 /\ -elem_13^post1 <= 0 /\ -elem_13^post1 == 0 /\ len_98^post1-len_98^post2 == 0 /\ -x_12^post2+x_12^post1 == 0 /\ elem_13^post1 <= 0 /\ -l_11^0+elem_13^post1 == 0 /\ -elem_13^post2+elem_13^post1 == 0 /\ x_12^0-x_12^post1 == 0 /\ l_11^post1-l_11^post2 == 0 /\ 1-len_98^1 <= 0 /\ -len_98^1 <= 0), cost: 1
	New rule:
	l0 -> l0 : elem_13^0'=elem_13^post1, l_11^0'=l_11^post1, len_98^0'=len_98^post1, x_12^0'=x_12^post1, (0 == 0 /\ l_11^post1-x_12^0 == 0 /\ 1-len_98^0 <= 0 /\ -len_98^0 <= 0 /\ -elem_13^post1 <= 0 /\ -elem_13^post1 == 0 /\ elem_13^post1 <= 0 /\ -l_11^0+elem_13^post1 == 0 /\ x_12^0-x_12^post1 == 0 /\ 1-len_98^1 <= 0 /\ -len_98^1 <= 0), cost: 1
	
		propagated equality len_98^post2 = len_98^post1
		
		propagated equality x_12^post2 = x_12^post1
		
		propagated equality elem_13^post2 = elem_13^post1
		
		propagated equality l_11^post2 = l_11^post1
		
	Propagated Equalities

	Original rule:
	l0 -> l0 : elem_13^0'=elem_13^post1, l_11^0'=l_11^post1, len_98^0'=len_98^post1, x_12^0'=x_12^post1, (0 == 0 /\ l_11^post1-x_12^0 == 0 /\ 1-len_98^0 <= 0 /\ -len_98^0 <= 0 /\ -elem_13^post1 <= 0 /\ -elem_13^post1 == 0 /\ elem_13^post1 <= 0 /\ -l_11^0+elem_13^post1 == 0 /\ x_12^0-x_12^post1 == 0 /\ 1-len_98^1 <= 0 /\ -len_98^1 <= 0), cost: 1
	New rule:
	l0 -> l0 : elem_13^0'=0, l_11^0'=x_12^0, len_98^0'=len_98^post1, x_12^0'=x_12^0, (0 <= 0 /\ 0 == 0 /\ -l_11^0 == 0 /\ 1-len_98^0 <= 0 /\ -len_98^0 <= 0 /\ 1-len_98^1 <= 0 /\ -len_98^1 <= 0), cost: 1
	
		propagated equality l_11^post1 = x_12^0
		
		propagated equality elem_13^post1 = 0
		
		propagated equality x_12^post1 = x_12^0
		
	Simplified Guard

	Original rule:
	l0 -> l0 : elem_13^0'=0, l_11^0'=x_12^0, len_98^0'=len_98^post1, x_12^0'=x_12^0, (0 <= 0 /\ 0 == 0 /\ -l_11^0 == 0 /\ 1-len_98^0 <= 0 /\ -len_98^0 <= 0 /\ 1-len_98^1 <= 0 /\ -len_98^1 <= 0), cost: 1
	New rule:
	l0 -> l0 : elem_13^0'=0, l_11^0'=x_12^0, len_98^0'=len_98^post1, x_12^0'=x_12^0, (-l_11^0 == 0 /\ 1-len_98^0 <= 0 /\ -len_98^0 <= 0 /\ 1-len_98^1 <= 0 /\ -len_98^1 <= 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	l0 -> l0 : elem_13^0'=0, l_11^0'=x_12^0, len_98^0'=len_98^post1, x_12^0'=x_12^0, (-l_11^0 == 0 /\ 1-len_98^0 <= 0 /\ -len_98^0 <= 0 /\ 1-len_98^1 <= 0 /\ -len_98^1 <= 0), cost: 1
	New rule:
	l0 -> l0 : elem_13^0'=0, l_11^0'=x_12^0, len_98^0'=len_98^post1, x_12^0'=x_12^0, (-l_11^0 == 0 /\ 1-len_98^0 <= 0 /\ -len_98^0 <= 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l0 : elem_13^0'=0, l_11^0'=x_12^0, len_98^0'=len_98^post1, x_12^0'=x_12^0, (-l_11^0 == 0 /\ 1-len_98^0 <= 0 /\ -len_98^0 <= 0), cost: 1
	New rule:
	l0 -> l0 : elem_13^0'=0, l_11^0'=x_12^0, len_98^0'=len_98^post1, (-l_11^0 == 0 /\ 1-len_98^0 <= 0 /\ -len_98^0 <= 0), cost: 1

Step with 6

	Trace

	6[T]
	
	Blocked

	[{}, {}]

Step with 7

	Trace

	6[T], 7[(-l_11^0 == 0 /\ 1-len_98^0 <= 0 /\ -len_98^0 <= 0)]
	
	Blocked

	[{}, {}, {}]

Nonterm

Start location: l3
Program variables: elem_13^0 l_11^0 len_98^0 x_12^0
   7: l0 -> l0 : elem_13^0'=0, l_11^0'=x_12^0, len_98^0'=len_98^post1, (-l_11^0 == 0 /\ 1-len_98^0 <= 0 /\ -len_98^0 <= 0), cost: 1
   8: l0 -> LoAT_sink : (-x_12^0+l_11^0 <= 0 /\ -l_11^0 >= 0 /\ x_12^0-l_11^0 <= 0 /\ -1+len_98^0 >= 0 /\ l_11^0 >= 0 /\ len_98^0 >= 0 /\ -len_98^post1+len_98^0 <= 0), cost: NONTERM
   6: l3 -> l0 : T, cost: 1

	Certificate of Non-Termination

	Original rule:
	l0 -> l0 : elem_13^0'=0, l_11^0'=x_12^0, len_98^0'=len_98^post1, (-l_11^0 == 0 /\ 1-len_98^0 <= 0 /\ -len_98^0 <= 0), cost: 1
	New rule:
	l0 -> LoAT_sink : (-x_12^0+l_11^0 <= 0 /\ -l_11^0 >= 0 /\ x_12^0-l_11^0 <= 0 /\ -1+len_98^0 >= 0 /\ l_11^0 >= 0 /\ len_98^0 >= 0 /\ -len_98^post1+len_98^0 <= 0), cost: NONTERM

		-l_11^0 >= 0 [0]: eventual decrease yields (-x_12^0 >= 0 /\ -l_11^0 >= 0)
		
		-l_11^0 >= 0 [1]: eventual increase yields (-l_11^0 >= 0 /\ x_12^0-l_11^0 <= 0)
		
		-1+len_98^0 >= 0 [0]: eventual decrease yields (-1+len_98^0 >= 0 /\ -1+len_98^post1 >= 0)
		
		-1+len_98^0 >= 0 [1]: eventual increase yields (-1+len_98^0 >= 0 /\ -len_98^post1+len_98^0 <= 0)
		
		l_11^0 >= 0 [0]: eventual decrease yields (x_12^0 >= 0 /\ l_11^0 >= 0)
		
		l_11^0 >= 0 [1]: eventual increase yields (-x_12^0+l_11^0 <= 0 /\ l_11^0 >= 0)
		
		len_98^0 >= 0 [0]: montonic decrease yields len_98^post1 >= 0, dependencies: -1+len_98^0 >= 0
		
		len_98^0 >= 0 [1]: eventual increase yields (len_98^0 >= 0 /\ -len_98^post1+len_98^0 <= 0)
		
		Replacement map: {-l_11^0 >= 0 -> (-l_11^0 >= 0 /\ x_12^0-l_11^0 <= 0), -1+len_98^0 >= 0 -> (-1+len_98^0 >= 0 /\ -len_98^post1+len_98^0 <= 0), l_11^0 >= 0 -> (-x_12^0+l_11^0 <= 0 /\ l_11^0 >= 0), len_98^0 >= 0 -> (len_98^0 >= 0 /\ -len_98^post1+len_98^0 <= 0)}

Step with 8

	Trace

	6[T], 8[(-x_12^0+l_11^0 <= 0 /\ -l_11^0 >= 0 /\ x_12^0-l_11^0 <= 0 /\ -1+len_98^0 >= 0 /\ l_11^0 >= 0 /\ len_98^0 >= 0 /\ -len_98^post1+len_98^0 <= 0)]
	
	Blocked

	[{}, {}, {8[T]}]

Refute

	Counterexample

	[ elem_13^0=0 l_11^0=0 len_98^0=1 x_12^0=0 ] 6 [ elem_13^0=0 l_11^0=0 len_98^0=1 x_12^0=0 ] 8
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
