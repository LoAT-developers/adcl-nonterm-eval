unknown

Initial ITS

Start location: l5
Program variables: __disjvr_0^0 k_7^0 result_4^0 w_8^0 x_5^0 y_6^0
   0: l0 -> l2 : __disjvr_0^0'=__disjvr_0^post1, k_7^0'=k_7^post1, result_4^0'=result_4^post1, w_8^0'=w_8^post1, x_5^0'=x_5^post1, y_6^0'=y_6^post1, (-k_7^post1+k_7^0 == 0 /\ -w_8^post1+w_8^0 == 0 /\ -result_4^post1+result_4^0 == 0 /\ -1+x_5^post1-x_5^0 == 0 /\ -1+y_6^post1-y_6^0 == 0 /\ __disjvr_0^0-__disjvr_0^post1 == 0 /\ 2+x_5^0 <= 0), cost: 1
   3: l0 -> l3 : __disjvr_0^0'=__disjvr_0^post4, k_7^0'=k_7^post4, result_4^0'=result_4^post4, w_8^0'=w_8^post4, x_5^0'=x_5^post4, y_6^0'=y_6^post4, (0 == 0 /\ -w_8^post4+w_8^0 == 0 /\ -__disjvr_0^post4+__disjvr_0^0 == 0 /\ -x_5^post4+x_5^0 == 0 /\ y_6^0-y_6^post4 == 0 /\ -1-x_5^0 <= 0 /\ k_7^0-k_7^post4 == 0), cost: 1
   1: l2 -> l1 : __disjvr_0^0'=__disjvr_0^post2, k_7^0'=k_7^post2, result_4^0'=result_4^post2, w_8^0'=w_8^post2, x_5^0'=x_5^post2, y_6^0'=y_6^post2, (x_5^0-x_5^post2 == 0 /\ k_7^0-k_7^post2 == 0 /\ __disjvr_0^0-__disjvr_0^post2 == 0 /\ -__disjvr_0^0+__disjvr_0^post2 == 0 /\ -y_6^post2+y_6^0 == 0 /\ -result_4^post2+result_4^0 == 0 /\ -w_8^post2+w_8^0 == 0), cost: 1
   2: l1 -> l0 : __disjvr_0^0'=__disjvr_0^post3, k_7^0'=k_7^post3, result_4^0'=result_4^post3, w_8^0'=w_8^post3, x_5^0'=x_5^post3, y_6^0'=y_6^post3, (-w_8^post3+w_8^0 == 0 /\ -__disjvr_0^post3+__disjvr_0^0 == 0 /\ k_7^0-k_7^post3 == 0 /\ -result_4^post3+result_4^0 == 0 /\ y_6^0-y_6^post3 == 0 /\ -x_5^post3+x_5^0 == 0), cost: 1
   4: l4 -> l0 : __disjvr_0^0'=__disjvr_0^post5, k_7^0'=k_7^post5, result_4^0'=result_4^post5, w_8^0'=w_8^post5, x_5^0'=x_5^post5, y_6^0'=y_6^post5, (-result_4^post5+result_4^0 == 0 /\ k_7^0-k_7^post5 == 0 /\ -x_5^post5+x_5^0 == 0 /\ 2-k_7^0 <= 0 /\ -__disjvr_0^post5+__disjvr_0^0 == 0 /\ y_6^0-y_6^post5 == 0 /\ -w_8^post5+w_8^0 == 0 /\ 2-w_8^0 <= 0), cost: 1
   5: l4 -> l3 : __disjvr_0^0'=__disjvr_0^post6, k_7^0'=k_7^post6, result_4^0'=result_4^post6, w_8^0'=w_8^post6, x_5^0'=x_5^post6, y_6^0'=y_6^post6, (0 == 0 /\ y_6^0-y_6^post6 == 0 /\ -1+k_7^0 <= 0 /\ -x_5^post6+x_5^0 == 0 /\ k_7^0-k_7^post6 == 0 /\ w_8^0-w_8^post6 == 0 /\ __disjvr_0^0-__disjvr_0^post6 == 0), cost: 1
   6: l5 -> l4 : __disjvr_0^0'=__disjvr_0^post7, k_7^0'=k_7^post7, result_4^0'=result_4^post7, w_8^0'=w_8^post7, x_5^0'=x_5^post7, y_6^0'=y_6^post7, (k_7^0-k_7^post7 == 0 /\ __disjvr_0^0-__disjvr_0^post7 == 0 /\ -x_5^post7+x_5^0 == 0 /\ w_8^0-w_8^post7 == 0 /\ -result_4^post7+result_4^0 == 0 /\ -y_6^post7+y_6^0 == 0), cost: 1

Chained Linear Paths

Start location: l5
Program variables: __disjvr_0^0 k_7^0 result_4^0 w_8^0 x_5^0 y_6^0
   3: l0 -> l3 : __disjvr_0^0'=__disjvr_0^post4, k_7^0'=k_7^post4, result_4^0'=result_4^post4, w_8^0'=w_8^post4, x_5^0'=x_5^post4, y_6^0'=y_6^post4, (0 == 0 /\ -w_8^post4+w_8^0 == 0 /\ -__disjvr_0^post4+__disjvr_0^0 == 0 /\ -x_5^post4+x_5^0 == 0 /\ y_6^0-y_6^post4 == 0 /\ -1-x_5^0 <= 0 /\ k_7^0-k_7^post4 == 0), cost: 1
   8: l0 -> l0 : __disjvr_0^0'=__disjvr_0^post3, k_7^0'=k_7^post3, result_4^0'=result_4^post3, w_8^0'=w_8^post3, x_5^0'=x_5^post3, y_6^0'=y_6^post3, (-k_7^post1+k_7^0 == 0 /\ -w_8^post2+w_8^post1 == 0 /\ -__disjvr_0^post2+__disjvr_0^post1 == 0 /\ -result_4^post3+result_4^post2 == 0 /\ y_6^post2-y_6^post3 == 0 /\ -w_8^post1+w_8^0 == 0 /\ -y_6^post2+y_6^post1 == 0 /\ -result_4^post1+result_4^0 == 0 /\ -__disjvr_0^post3+__disjvr_0^post2 == 0 /\ __disjvr_0^post2-__disjvr_0^post1 == 0 /\ -x_5^post3+x_5^post2 == 0 /\ x_5^post1-x_5^post2 == 0 /\ -k_7^post3+k_7^post2 == 0 /\ -w_8^post3+w_8^post2 == 0 /\ -1+x_5^post1-x_5^0 == 0 /\ -1+y_6^post1-y_6^0 == 0 /\ k_7^post1-k_7^post2 == 0 /\ __disjvr_0^0-__disjvr_0^post1 == 0 /\ -result_4^post2+result_4^post1 == 0 /\ 2+x_5^0 <= 0), cost: 1
   4: l4 -> l0 : __disjvr_0^0'=__disjvr_0^post5, k_7^0'=k_7^post5, result_4^0'=result_4^post5, w_8^0'=w_8^post5, x_5^0'=x_5^post5, y_6^0'=y_6^post5, (-result_4^post5+result_4^0 == 0 /\ k_7^0-k_7^post5 == 0 /\ -x_5^post5+x_5^0 == 0 /\ 2-k_7^0 <= 0 /\ -__disjvr_0^post5+__disjvr_0^0 == 0 /\ y_6^0-y_6^post5 == 0 /\ -w_8^post5+w_8^0 == 0 /\ 2-w_8^0 <= 0), cost: 1
   5: l4 -> l3 : __disjvr_0^0'=__disjvr_0^post6, k_7^0'=k_7^post6, result_4^0'=result_4^post6, w_8^0'=w_8^post6, x_5^0'=x_5^post6, y_6^0'=y_6^post6, (0 == 0 /\ y_6^0-y_6^post6 == 0 /\ -1+k_7^0 <= 0 /\ -x_5^post6+x_5^0 == 0 /\ k_7^0-k_7^post6 == 0 /\ w_8^0-w_8^post6 == 0 /\ __disjvr_0^0-__disjvr_0^post6 == 0), cost: 1
   6: l5 -> l4 : __disjvr_0^0'=__disjvr_0^post7, k_7^0'=k_7^post7, result_4^0'=result_4^post7, w_8^0'=w_8^post7, x_5^0'=x_5^post7, y_6^0'=y_6^post7, (k_7^0-k_7^post7 == 0 /\ __disjvr_0^0-__disjvr_0^post7 == 0 /\ -x_5^post7+x_5^0 == 0 /\ w_8^0-w_8^post7 == 0 /\ -result_4^post7+result_4^0 == 0 /\ -y_6^post7+y_6^0 == 0), cost: 1

	Eliminating location l2 by chaining:

	Applied chaining

	First rule:
	l0 -> l2 : __disjvr_0^0'=__disjvr_0^post1, k_7^0'=k_7^post1, result_4^0'=result_4^post1, w_8^0'=w_8^post1, x_5^0'=x_5^post1, y_6^0'=y_6^post1, (-k_7^post1+k_7^0 == 0 /\ -w_8^post1+w_8^0 == 0 /\ -result_4^post1+result_4^0 == 0 /\ -1+x_5^post1-x_5^0 == 0 /\ -1+y_6^post1-y_6^0 == 0 /\ __disjvr_0^0-__disjvr_0^post1 == 0 /\ 2+x_5^0 <= 0), cost: 1
	Second rule:
	l2 -> l1 : __disjvr_0^0'=__disjvr_0^post2, k_7^0'=k_7^post2, result_4^0'=result_4^post2, w_8^0'=w_8^post2, x_5^0'=x_5^post2, y_6^0'=y_6^post2, (x_5^0-x_5^post2 == 0 /\ k_7^0-k_7^post2 == 0 /\ __disjvr_0^0-__disjvr_0^post2 == 0 /\ -__disjvr_0^0+__disjvr_0^post2 == 0 /\ -y_6^post2+y_6^0 == 0 /\ -result_4^post2+result_4^0 == 0 /\ -w_8^post2+w_8^0 == 0), cost: 1
	New rule:
	l0 -> l1 : __disjvr_0^0'=__disjvr_0^post2, k_7^0'=k_7^post2, result_4^0'=result_4^post2, w_8^0'=w_8^post2, x_5^0'=x_5^post2, y_6^0'=y_6^post2, (-k_7^post1+k_7^0 == 0 /\ -w_8^post2+w_8^post1 == 0 /\ -__disjvr_0^post2+__disjvr_0^post1 == 0 /\ -w_8^post1+w_8^0 == 0 /\ -y_6^post2+y_6^post1 == 0 /\ -result_4^post1+result_4^0 == 0 /\ __disjvr_0^post2-__disjvr_0^post1 == 0 /\ x_5^post1-x_5^post2 == 0 /\ -1+x_5^post1-x_5^0 == 0 /\ -1+y_6^post1-y_6^0 == 0 /\ k_7^post1-k_7^post2 == 0 /\ __disjvr_0^0-__disjvr_0^post1 == 0 /\ -result_4^post2+result_4^post1 == 0 /\ 2+x_5^0 <= 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 1
	
	Eliminating location l1 by chaining:

	Applied chaining

	First rule:
	l0 -> l1 : __disjvr_0^0'=__disjvr_0^post2, k_7^0'=k_7^post2, result_4^0'=result_4^post2, w_8^0'=w_8^post2, x_5^0'=x_5^post2, y_6^0'=y_6^post2, (-k_7^post1+k_7^0 == 0 /\ -w_8^post2+w_8^post1 == 0 /\ -__disjvr_0^post2+__disjvr_0^post1 == 0 /\ -w_8^post1+w_8^0 == 0 /\ -y_6^post2+y_6^post1 == 0 /\ -result_4^post1+result_4^0 == 0 /\ __disjvr_0^post2-__disjvr_0^post1 == 0 /\ x_5^post1-x_5^post2 == 0 /\ -1+x_5^post1-x_5^0 == 0 /\ -1+y_6^post1-y_6^0 == 0 /\ k_7^post1-k_7^post2 == 0 /\ __disjvr_0^0-__disjvr_0^post1 == 0 /\ -result_4^post2+result_4^post1 == 0 /\ 2+x_5^0 <= 0), cost: 1
	Second rule:
	l1 -> l0 : __disjvr_0^0'=__disjvr_0^post3, k_7^0'=k_7^post3, result_4^0'=result_4^post3, w_8^0'=w_8^post3, x_5^0'=x_5^post3, y_6^0'=y_6^post3, (-w_8^post3+w_8^0 == 0 /\ -__disjvr_0^post3+__disjvr_0^0 == 0 /\ k_7^0-k_7^post3 == 0 /\ -result_4^post3+result_4^0 == 0 /\ y_6^0-y_6^post3 == 0 /\ -x_5^post3+x_5^0 == 0), cost: 1
	New rule:
	l0 -> l0 : __disjvr_0^0'=__disjvr_0^post3, k_7^0'=k_7^post3, result_4^0'=result_4^post3, w_8^0'=w_8^post3, x_5^0'=x_5^post3, y_6^0'=y_6^post3, (-k_7^post1+k_7^0 == 0 /\ -w_8^post2+w_8^post1 == 0 /\ -__disjvr_0^post2+__disjvr_0^post1 == 0 /\ -result_4^post3+result_4^post2 == 0 /\ y_6^post2-y_6^post3 == 0 /\ -w_8^post1+w_8^0 == 0 /\ -y_6^post2+y_6^post1 == 0 /\ -result_4^post1+result_4^0 == 0 /\ -__disjvr_0^post3+__disjvr_0^post2 == 0 /\ __disjvr_0^post2-__disjvr_0^post1 == 0 /\ -x_5^post3+x_5^post2 == 0 /\ x_5^post1-x_5^post2 == 0 /\ -k_7^post3+k_7^post2 == 0 /\ -w_8^post3+w_8^post2 == 0 /\ -1+x_5^post1-x_5^0 == 0 /\ -1+y_6^post1-y_6^0 == 0 /\ k_7^post1-k_7^post2 == 0 /\ __disjvr_0^0-__disjvr_0^post1 == 0 /\ -result_4^post2+result_4^post1 == 0 /\ 2+x_5^0 <= 0), cost: 1
	
	Applied deletion

	Removed the following rules: 2 7

Simplified Transitions

Start location: l5
Program variables: k_7^0 result_4^0 w_8^0 x_5^0 y_6^0
   9: l0 -> l3 : result_4^0'=result_4^post4, -1-x_5^0 <= 0, cost: 1
  13: l0 -> l0 : x_5^0'=1+x_5^0, y_6^0'=1+y_6^0, 2+x_5^0 <= 0, cost: 1
  10: l4 -> l0 : (2-k_7^0 <= 0 /\ 2-w_8^0 <= 0), cost: 1
  11: l4 -> l3 : result_4^0'=result_4^post6, -1+k_7^0 <= 0, cost: 1
  12: l5 -> l4 : T, cost: 1

	Propagated Equalities

	Original rule:
	l0 -> l3 : __disjvr_0^0'=__disjvr_0^post4, k_7^0'=k_7^post4, result_4^0'=result_4^post4, w_8^0'=w_8^post4, x_5^0'=x_5^post4, y_6^0'=y_6^post4, (0 == 0 /\ -w_8^post4+w_8^0 == 0 /\ -__disjvr_0^post4+__disjvr_0^0 == 0 /\ -x_5^post4+x_5^0 == 0 /\ y_6^0-y_6^post4 == 0 /\ -1-x_5^0 <= 0 /\ k_7^0-k_7^post4 == 0), cost: 1
	New rule:
	l0 -> l3 : __disjvr_0^0'=__disjvr_0^0, k_7^0'=k_7^0, result_4^0'=result_4^post4, w_8^0'=w_8^0, x_5^0'=x_5^0, y_6^0'=y_6^0, (0 == 0 /\ -1-x_5^0 <= 0), cost: 1
	
		propagated equality w_8^post4 = w_8^0
		
		propagated equality __disjvr_0^post4 = __disjvr_0^0
		
		propagated equality x_5^post4 = x_5^0
		
		propagated equality y_6^post4 = y_6^0
		
		propagated equality k_7^post4 = k_7^0
		
	Simplified Guard

	Original rule:
	l0 -> l3 : __disjvr_0^0'=__disjvr_0^0, k_7^0'=k_7^0, result_4^0'=result_4^post4, w_8^0'=w_8^0, x_5^0'=x_5^0, y_6^0'=y_6^0, (0 == 0 /\ -1-x_5^0 <= 0), cost: 1
	New rule:
	l0 -> l3 : __disjvr_0^0'=__disjvr_0^0, k_7^0'=k_7^0, result_4^0'=result_4^post4, w_8^0'=w_8^0, x_5^0'=x_5^0, y_6^0'=y_6^0, -1-x_5^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l3 : __disjvr_0^0'=__disjvr_0^0, k_7^0'=k_7^0, result_4^0'=result_4^post4, w_8^0'=w_8^0, x_5^0'=x_5^0, y_6^0'=y_6^0, -1-x_5^0 <= 0, cost: 1
	New rule:
	l0 -> l3 : result_4^0'=result_4^post4, -1-x_5^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l4 -> l0 : __disjvr_0^0'=__disjvr_0^post5, k_7^0'=k_7^post5, result_4^0'=result_4^post5, w_8^0'=w_8^post5, x_5^0'=x_5^post5, y_6^0'=y_6^post5, (-result_4^post5+result_4^0 == 0 /\ k_7^0-k_7^post5 == 0 /\ -x_5^post5+x_5^0 == 0 /\ 2-k_7^0 <= 0 /\ -__disjvr_0^post5+__disjvr_0^0 == 0 /\ y_6^0-y_6^post5 == 0 /\ -w_8^post5+w_8^0 == 0 /\ 2-w_8^0 <= 0), cost: 1
	New rule:
	l4 -> l0 : __disjvr_0^0'=__disjvr_0^0, k_7^0'=k_7^0, result_4^0'=result_4^0, w_8^0'=w_8^0, x_5^0'=x_5^0, y_6^0'=y_6^0, (0 == 0 /\ 2-k_7^0 <= 0 /\ 2-w_8^0 <= 0), cost: 1
	
		propagated equality result_4^post5 = result_4^0
		
		propagated equality k_7^post5 = k_7^0
		
		propagated equality x_5^post5 = x_5^0
		
		propagated equality __disjvr_0^post5 = __disjvr_0^0
		
		propagated equality y_6^post5 = y_6^0
		
		propagated equality w_8^post5 = w_8^0
		
	Simplified Guard

	Original rule:
	l4 -> l0 : __disjvr_0^0'=__disjvr_0^0, k_7^0'=k_7^0, result_4^0'=result_4^0, w_8^0'=w_8^0, x_5^0'=x_5^0, y_6^0'=y_6^0, (0 == 0 /\ 2-k_7^0 <= 0 /\ 2-w_8^0 <= 0), cost: 1
	New rule:
	l4 -> l0 : __disjvr_0^0'=__disjvr_0^0, k_7^0'=k_7^0, result_4^0'=result_4^0, w_8^0'=w_8^0, x_5^0'=x_5^0, y_6^0'=y_6^0, (2-k_7^0 <= 0 /\ 2-w_8^0 <= 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	l4 -> l0 : __disjvr_0^0'=__disjvr_0^0, k_7^0'=k_7^0, result_4^0'=result_4^0, w_8^0'=w_8^0, x_5^0'=x_5^0, y_6^0'=y_6^0, (2-k_7^0 <= 0 /\ 2-w_8^0 <= 0), cost: 1
	New rule:
	l4 -> l0 : (2-k_7^0 <= 0 /\ 2-w_8^0 <= 0), cost: 1
	
	Propagated Equalities

	Original rule:
	l4 -> l3 : __disjvr_0^0'=__disjvr_0^post6, k_7^0'=k_7^post6, result_4^0'=result_4^post6, w_8^0'=w_8^post6, x_5^0'=x_5^post6, y_6^0'=y_6^post6, (0 == 0 /\ y_6^0-y_6^post6 == 0 /\ -1+k_7^0 <= 0 /\ -x_5^post6+x_5^0 == 0 /\ k_7^0-k_7^post6 == 0 /\ w_8^0-w_8^post6 == 0 /\ __disjvr_0^0-__disjvr_0^post6 == 0), cost: 1
	New rule:
	l4 -> l3 : __disjvr_0^0'=__disjvr_0^0, k_7^0'=k_7^0, result_4^0'=result_4^post6, w_8^0'=w_8^0, x_5^0'=x_5^0, y_6^0'=y_6^0, (0 == 0 /\ -1+k_7^0 <= 0), cost: 1
	
		propagated equality y_6^post6 = y_6^0
		
		propagated equality x_5^post6 = x_5^0
		
		propagated equality k_7^post6 = k_7^0
		
		propagated equality w_8^post6 = w_8^0
		
		propagated equality __disjvr_0^post6 = __disjvr_0^0
		
	Simplified Guard

	Original rule:
	l4 -> l3 : __disjvr_0^0'=__disjvr_0^0, k_7^0'=k_7^0, result_4^0'=result_4^post6, w_8^0'=w_8^0, x_5^0'=x_5^0, y_6^0'=y_6^0, (0 == 0 /\ -1+k_7^0 <= 0), cost: 1
	New rule:
	l4 -> l3 : __disjvr_0^0'=__disjvr_0^0, k_7^0'=k_7^0, result_4^0'=result_4^post6, w_8^0'=w_8^0, x_5^0'=x_5^0, y_6^0'=y_6^0, -1+k_7^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l4 -> l3 : __disjvr_0^0'=__disjvr_0^0, k_7^0'=k_7^0, result_4^0'=result_4^post6, w_8^0'=w_8^0, x_5^0'=x_5^0, y_6^0'=y_6^0, -1+k_7^0 <= 0, cost: 1
	New rule:
	l4 -> l3 : result_4^0'=result_4^post6, -1+k_7^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l5 -> l4 : __disjvr_0^0'=__disjvr_0^post7, k_7^0'=k_7^post7, result_4^0'=result_4^post7, w_8^0'=w_8^post7, x_5^0'=x_5^post7, y_6^0'=y_6^post7, (k_7^0-k_7^post7 == 0 /\ __disjvr_0^0-__disjvr_0^post7 == 0 /\ -x_5^post7+x_5^0 == 0 /\ w_8^0-w_8^post7 == 0 /\ -result_4^post7+result_4^0 == 0 /\ -y_6^post7+y_6^0 == 0), cost: 1
	New rule:
	l5 -> l4 : __disjvr_0^0'=__disjvr_0^0, k_7^0'=k_7^0, result_4^0'=result_4^0, w_8^0'=w_8^0, x_5^0'=x_5^0, y_6^0'=y_6^0, 0 == 0, cost: 1
	
		propagated equality k_7^post7 = k_7^0
		
		propagated equality __disjvr_0^post7 = __disjvr_0^0
		
		propagated equality x_5^post7 = x_5^0
		
		propagated equality w_8^post7 = w_8^0
		
		propagated equality result_4^post7 = result_4^0
		
		propagated equality y_6^post7 = y_6^0
		
	Simplified Guard

	Original rule:
	l5 -> l4 : __disjvr_0^0'=__disjvr_0^0, k_7^0'=k_7^0, result_4^0'=result_4^0, w_8^0'=w_8^0, x_5^0'=x_5^0, y_6^0'=y_6^0, 0 == 0, cost: 1
	New rule:
	l5 -> l4 : __disjvr_0^0'=__disjvr_0^0, k_7^0'=k_7^0, result_4^0'=result_4^0, w_8^0'=w_8^0, x_5^0'=x_5^0, y_6^0'=y_6^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l5 -> l4 : __disjvr_0^0'=__disjvr_0^0, k_7^0'=k_7^0, result_4^0'=result_4^0, w_8^0'=w_8^0, x_5^0'=x_5^0, y_6^0'=y_6^0, T, cost: 1
	New rule:
	l5 -> l4 : T, cost: 1
	
	Propagated Equalities

	Original rule:
	l0 -> l0 : __disjvr_0^0'=__disjvr_0^post3, k_7^0'=k_7^post3, result_4^0'=result_4^post3, w_8^0'=w_8^post3, x_5^0'=x_5^post3, y_6^0'=y_6^post3, (-k_7^post1+k_7^0 == 0 /\ -w_8^post2+w_8^post1 == 0 /\ -__disjvr_0^post2+__disjvr_0^post1 == 0 /\ -result_4^post3+result_4^post2 == 0 /\ y_6^post2-y_6^post3 == 0 /\ -w_8^post1+w_8^0 == 0 /\ -y_6^post2+y_6^post1 == 0 /\ -result_4^post1+result_4^0 == 0 /\ -__disjvr_0^post3+__disjvr_0^post2 == 0 /\ __disjvr_0^post2-__disjvr_0^post1 == 0 /\ -x_5^post3+x_5^post2 == 0 /\ x_5^post1-x_5^post2 == 0 /\ -k_7^post3+k_7^post2 == 0 /\ -w_8^post3+w_8^post2 == 0 /\ -1+x_5^post1-x_5^0 == 0 /\ -1+y_6^post1-y_6^0 == 0 /\ k_7^post1-k_7^post2 == 0 /\ __disjvr_0^0-__disjvr_0^post1 == 0 /\ -result_4^post2+result_4^post1 == 0 /\ 2+x_5^0 <= 0), cost: 1
	New rule:
	l0 -> l0 : __disjvr_0^0'=__disjvr_0^post2, k_7^0'=k_7^post2, result_4^0'=result_4^post2, w_8^0'=w_8^post2, x_5^0'=x_5^post2, y_6^0'=y_6^post2, (0 == 0 /\ -k_7^post1+k_7^0 == 0 /\ -w_8^post2+w_8^post1 == 0 /\ -__disjvr_0^post2+__disjvr_0^post1 == 0 /\ -w_8^post1+w_8^0 == 0 /\ -y_6^post2+y_6^post1 == 0 /\ -result_4^post1+result_4^0 == 0 /\ __disjvr_0^post2-__disjvr_0^post1 == 0 /\ x_5^post1-x_5^post2 == 0 /\ -1+x_5^post1-x_5^0 == 0 /\ -1+y_6^post1-y_6^0 == 0 /\ k_7^post1-k_7^post2 == 0 /\ __disjvr_0^0-__disjvr_0^post1 == 0 /\ -result_4^post2+result_4^post1 == 0 /\ 2+x_5^0 <= 0), cost: 1
	
		propagated equality result_4^post3 = result_4^post2
		
		propagated equality y_6^post3 = y_6^post2
		
		propagated equality __disjvr_0^post3 = __disjvr_0^post2
		
		propagated equality x_5^post3 = x_5^post2
		
		propagated equality k_7^post3 = k_7^post2
		
		propagated equality w_8^post3 = w_8^post2
		
	Propagated Equalities

	Original rule:
	l0 -> l0 : __disjvr_0^0'=__disjvr_0^post2, k_7^0'=k_7^post2, result_4^0'=result_4^post2, w_8^0'=w_8^post2, x_5^0'=x_5^post2, y_6^0'=y_6^post2, (0 == 0 /\ -k_7^post1+k_7^0 == 0 /\ -w_8^post2+w_8^post1 == 0 /\ -__disjvr_0^post2+__disjvr_0^post1 == 0 /\ -w_8^post1+w_8^0 == 0 /\ -y_6^post2+y_6^post1 == 0 /\ -result_4^post1+result_4^0 == 0 /\ __disjvr_0^post2-__disjvr_0^post1 == 0 /\ x_5^post1-x_5^post2 == 0 /\ -1+x_5^post1-x_5^0 == 0 /\ -1+y_6^post1-y_6^0 == 0 /\ k_7^post1-k_7^post2 == 0 /\ __disjvr_0^0-__disjvr_0^post1 == 0 /\ -result_4^post2+result_4^post1 == 0 /\ 2+x_5^0 <= 0), cost: 1
	New rule:
	l0 -> l0 : __disjvr_0^0'=__disjvr_0^0, k_7^0'=k_7^0, result_4^0'=result_4^0, w_8^0'=w_8^0, x_5^0'=1+x_5^0, y_6^0'=1+y_6^0, (0 == 0 /\ 2+x_5^0 <= 0), cost: 1
	
		propagated equality k_7^post1 = k_7^0
		
		propagated equality w_8^post1 = w_8^post2
		
		propagated equality __disjvr_0^post1 = __disjvr_0^post2
		
		propagated equality w_8^post2 = w_8^0
		
		propagated equality y_6^post1 = y_6^post2
		
		propagated equality result_4^post1 = result_4^0
		
		propagated equality x_5^post1 = x_5^post2
		
		propagated equality x_5^post2 = 1+x_5^0
		
		propagated equality y_6^post2 = 1+y_6^0
		
		propagated equality k_7^post2 = k_7^0
		
		propagated equality __disjvr_0^post2 = __disjvr_0^0
		
		propagated equality result_4^post2 = result_4^0
		
	Simplified Guard

	Original rule:
	l0 -> l0 : __disjvr_0^0'=__disjvr_0^0, k_7^0'=k_7^0, result_4^0'=result_4^0, w_8^0'=w_8^0, x_5^0'=1+x_5^0, y_6^0'=1+y_6^0, (0 == 0 /\ 2+x_5^0 <= 0), cost: 1
	New rule:
	l0 -> l0 : __disjvr_0^0'=__disjvr_0^0, k_7^0'=k_7^0, result_4^0'=result_4^0, w_8^0'=w_8^0, x_5^0'=1+x_5^0, y_6^0'=1+y_6^0, 2+x_5^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l0 : __disjvr_0^0'=__disjvr_0^0, k_7^0'=k_7^0, result_4^0'=result_4^0, w_8^0'=w_8^0, x_5^0'=1+x_5^0, y_6^0'=1+y_6^0, 2+x_5^0 <= 0, cost: 1
	New rule:
	l0 -> l0 : x_5^0'=1+x_5^0, y_6^0'=1+y_6^0, 2+x_5^0 <= 0, cost: 1

Step with 12

	Trace

	12[T]
	
	Blocked

	[{}, {}]

Step with 10

	Trace

	12[T], 10[(2-k_7^0 <= 0 /\ 2-w_8^0 <= 0)]
	
	Blocked

	[{}, {}, {}]

Step with 9

	Trace

	12[T], 10[(2-k_7^0 <= 0 /\ 2-w_8^0 <= 0)], 9[(-1-x_5^0 <= 0)]
	
	Blocked

	[{}, {}, {}, {}]

Backtrack

	Trace

	12[T], 10[(2-k_7^0 <= 0 /\ 2-w_8^0 <= 0)]
	
	Blocked

	[{}, {}, {9[T]}]

Step with 13

	Trace

	12[T], 10[(2-k_7^0 <= 0 /\ 2-w_8^0 <= 0)], 13[(2+x_5^0 <= 0)]
	
	Blocked

	[{}, {}, {9[T]}, {}]

Accelerate

Start location: l5
Program variables: k_7^0 result_4^0 w_8^0 x_5^0 y_6^0
   9: l0 -> l3 : result_4^0'=result_4^post4, -1-x_5^0 <= 0, cost: 1
  13: l0 -> l0 : x_5^0'=1+x_5^0, y_6^0'=1+y_6^0, 2+x_5^0 <= 0, cost: 1
  14: l0 -> l0 : x_5^0'=x_5^0+n, y_6^0'=y_6^0+n, (-1+n >= 0 /\ -1-x_5^0-n >= 0), cost: 1
  10: l4 -> l0 : (2-k_7^0 <= 0 /\ 2-w_8^0 <= 0), cost: 1
  11: l4 -> l3 : result_4^0'=result_4^post6, -1+k_7^0 <= 0, cost: 1
  12: l5 -> l4 : T, cost: 1

	Loop Acceleration

	Original rule:
	l0 -> l0 : x_5^0'=1+x_5^0, y_6^0'=1+y_6^0, (2+x_5^0 <= 0), cost: 1
	New rule:
	l0 -> l0 : x_5^0'=x_5^0+n, y_6^0'=y_6^0+n, (-1+n >= 0 /\ -1-x_5^0-n >= 0), cost: 1

		-2-x_5^0 >= 0 [0]: montonic decrease yields -1-x_5^0-n >= 0
		
		-2-x_5^0 >= 0 [1]: eventual increase yields (1 <= 0 /\ -2-x_5^0 >= 0)
		
		Replacement map: {-2-x_5^0 >= 0 -> -1-x_5^0-n >= 0}

	Trace

	12[T], 10[(2-k_7^0 <= 0 /\ 2-w_8^0 <= 0)], 14[(-1+n >= 0 /\ -1-x_5^0-n >= 0)]
	
	Blocked

	[{}, {}, {9[T]}, {13[T], 14[T]}]

Step with 9

	Trace

	12[T], 10[(2-k_7^0 <= 0 /\ 2-w_8^0 <= 0)], 14[(-1+n >= 0 /\ -1-x_5^0-n >= 0)], 9[(-1-x_5^0 <= 0)]
	
	Blocked

	[{}, {}, {9[T]}, {13[T], 14[T]}, {}]

Backtrack

	Trace

	12[T], 10[(2-k_7^0 <= 0 /\ 2-w_8^0 <= 0)], 14[(-1+n >= 0 /\ -1-x_5^0-n >= 0)]
	
	Blocked

	[{}, {}, {9[T]}, {9[T], 13[T], 14[T]}]

Backtrack

	Trace

	12[T], 10[(2-k_7^0 <= 0 /\ 2-w_8^0 <= 0)]
	
	Blocked

	[{}, {}, {9[T], 14[T]}]

Step with 13

	Trace

	12[T], 10[(2-k_7^0 <= 0 /\ 2-w_8^0 <= 0)], 13[(2+x_5^0 <= 0)]
	
	Blocked

	[{}, {}, {9[T], 14[T]}, {}]

Covered

	Trace

	12[T], 10[(2-k_7^0 <= 0 /\ 2-w_8^0 <= 0)]
	
	Blocked

	[{}, {}, {9[T], 13[T], 14[T]}]

Backtrack

	Trace

	12[T]
	
	Blocked

	[{}, {10[T]}]

Step with 11

	Trace

	12[T], 11[(-1+k_7^0 <= 0)]
	
	Blocked

	[{}, {10[T]}, {}]

Backtrack

	Trace

	12[T]
	
	Blocked

	[{}, {10[T], 11[T]}]

Backtrack

	Trace

	Blocked

	[{12[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
