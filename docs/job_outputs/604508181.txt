NO

Initial ITS

Start location: __init
Program variables: arg1 arg2
   0: f1_0_main_Load -> f47_0_increase_LE : arg1'=arg1p1, arg2'=arg2p1, (-arg1p1+arg2 == 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 1
   1: f47_0_increase_LE -> f47_0_increase_LE : arg1'=arg1p2, arg2'=arg2p2, (arg1 > 0 /\ -1+arg1-arg1p2 == 0 /\ -4+arg1 < 0), cost: 1
   2: f47_0_increase_LE -> f47_0_increase_LE : arg1'=arg1p3, arg2'=arg2p3, (-3+arg1 > 0 /\ 1-arg1p3+arg1 == 0), cost: 1
   3: __init -> f1_0_main_Load : arg1'=arg1p4, arg2'=arg2p4, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2
   1: f47_0_increase_LE -> f47_0_increase_LE : arg1'=arg1p2, arg2'=arg2p2, (arg1 > 0 /\ -1+arg1-arg1p2 == 0 /\ -4+arg1 < 0), cost: 1
   2: f47_0_increase_LE -> f47_0_increase_LE : arg1'=arg1p3, arg2'=arg2p3, (-3+arg1 > 0 /\ 1-arg1p3+arg1 == 0), cost: 1
   4: __init -> f47_0_increase_LE : arg1'=arg1p1, arg2'=arg2p1, (1+arg2p4 > 0 /\ arg1p4 > 0 /\ -arg1p1+arg2p4 == 0), cost: 1

	Eliminating location f1_0_main_Load by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_Load : arg1'=arg1p4, arg2'=arg2p4, T, cost: 1
	Second rule:
	f1_0_main_Load -> f47_0_increase_LE : arg1'=arg1p1, arg2'=arg2p1, (-arg1p1+arg2 == 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 1
	New rule:
	__init -> f47_0_increase_LE : arg1'=arg1p1, arg2'=arg2p1, (1+arg2p4 > 0 /\ arg1p4 > 0 /\ -arg1p1+arg2p4 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 3

Simplified Transitions

Start location: __init
Program variables: arg1 arg2
   5: f47_0_increase_LE -> f47_0_increase_LE : arg1'=-1+arg1, arg2'=arg2p2, (arg1 > 0 /\ -4+arg1 < 0), cost: 1
   6: f47_0_increase_LE -> f47_0_increase_LE : arg1'=1+arg1, arg2'=arg2p3, -3+arg1 > 0, cost: 1
   7: __init -> f47_0_increase_LE : arg1'=arg2p4, arg2'=arg2p1, (1+arg2p4 > 0), cost: 1

	Propagated Equalities

	Original rule:
	f47_0_increase_LE -> f47_0_increase_LE : arg1'=arg1p2, arg2'=arg2p2, (arg1 > 0 /\ -1+arg1-arg1p2 == 0 /\ -4+arg1 < 0), cost: 1
	New rule:
	f47_0_increase_LE -> f47_0_increase_LE : arg1'=-1+arg1, arg2'=arg2p2, (0 == 0 /\ arg1 > 0 /\ -4+arg1 < 0), cost: 1
	
		propagated equality arg1p2 = -1+arg1
		
	Simplified Guard

	Original rule:
	f47_0_increase_LE -> f47_0_increase_LE : arg1'=-1+arg1, arg2'=arg2p2, (0 == 0 /\ arg1 > 0 /\ -4+arg1 < 0), cost: 1
	New rule:
	f47_0_increase_LE -> f47_0_increase_LE : arg1'=-1+arg1, arg2'=arg2p2, (arg1 > 0 /\ -4+arg1 < 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f47_0_increase_LE -> f47_0_increase_LE : arg1'=arg1p3, arg2'=arg2p3, (-3+arg1 > 0 /\ 1-arg1p3+arg1 == 0), cost: 1
	New rule:
	f47_0_increase_LE -> f47_0_increase_LE : arg1'=1+arg1, arg2'=arg2p3, (0 == 0 /\ -3+arg1 > 0), cost: 1
	
		propagated equality arg1p3 = 1+arg1
		
	Simplified Guard

	Original rule:
	f47_0_increase_LE -> f47_0_increase_LE : arg1'=1+arg1, arg2'=arg2p3, (0 == 0 /\ -3+arg1 > 0), cost: 1
	New rule:
	f47_0_increase_LE -> f47_0_increase_LE : arg1'=1+arg1, arg2'=arg2p3, -3+arg1 > 0, cost: 1
	
	Propagated Equalities

	Original rule:
	__init -> f47_0_increase_LE : arg1'=arg1p1, arg2'=arg2p1, (1+arg2p4 > 0 /\ arg1p4 > 0 /\ -arg1p1+arg2p4 == 0), cost: 1
	New rule:
	__init -> f47_0_increase_LE : arg1'=arg2p4, arg2'=arg2p1, (0 == 0 /\ 1+arg2p4 > 0 /\ arg1p4 > 0), cost: 1
	
		propagated equality arg1p1 = arg2p4
		
	Simplified Guard

	Original rule:
	__init -> f47_0_increase_LE : arg1'=arg2p4, arg2'=arg2p1, (0 == 0 /\ 1+arg2p4 > 0 /\ arg1p4 > 0), cost: 1
	New rule:
	__init -> f47_0_increase_LE : arg1'=arg2p4, arg2'=arg2p1, (1+arg2p4 > 0 /\ arg1p4 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	__init -> f47_0_increase_LE : arg1'=arg2p4, arg2'=arg2p1, (1+arg2p4 > 0 /\ arg1p4 > 0), cost: 1
	New rule:
	__init -> f47_0_increase_LE : arg1'=arg2p4, arg2'=arg2p1, (1+arg2p4 > 0), cost: 1

Step with 7

	Trace

	7[(1+arg2p4 > 0)]
	
	Blocked

	[{}, {}]

Step with 5

	Trace

	7[(1+arg2p4 > 0)], 5[(arg1 > 0 /\ -4+arg1 < 0)]
	
	Blocked

	[{}, {}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2
   5: f47_0_increase_LE -> f47_0_increase_LE : arg1'=-1+arg1, arg2'=arg2p2, (arg1 > 0 /\ -4+arg1 < 0), cost: 1
   6: f47_0_increase_LE -> f47_0_increase_LE : arg1'=1+arg1, arg2'=arg2p3, -3+arg1 > 0, cost: 1
   8: f47_0_increase_LE -> f47_0_increase_LE : arg1'=arg1-n, arg2'=arg2p2, (1+arg1-n > 0 /\ -1+n >= 0 /\ 4-arg1 > 0), cost: 1
   7: __init -> f47_0_increase_LE : arg1'=arg2p4, arg2'=arg2p1, (1+arg2p4 > 0), cost: 1

	Loop Acceleration

	Original rule:
	f47_0_increase_LE -> f47_0_increase_LE : arg1'=-1+arg1, arg2'=arg2p2, (arg1 > 0 /\ -4+arg1 < 0), cost: 1
	New rule:
	f47_0_increase_LE -> f47_0_increase_LE : arg1'=arg1-n, arg2'=arg2p2, (1+arg1-n > 0 /\ -1+n >= 0 /\ 4-arg1 > 0), cost: 1

		arg1 > 0 [0]: montonic decrease yields 1+arg1-n > 0
		
		arg1 > 0 [1]: eventual increase yields (1 <= 0 /\ arg1 > 0)
		
		4-arg1 > 0 [0]: monotonic increase yields 4-arg1 > 0
		
		Replacement map: {arg1 > 0 -> 1+arg1-n > 0, 4-arg1 > 0 -> 4-arg1 > 0}

	Trace

	7[(1+arg2p4 > 0)], 8[(1+arg1-n > 0 /\ -1+n >= 0 /\ 4-arg1 > 0)]
	
	Blocked

	[{}, {}, {5[T], 8[T]}]

Backtrack

	Trace

	7[(1+arg2p4 > 0)]
	
	Blocked

	[{}, {8[T]}]

Step with 5

	Trace

	7[(1+arg2p4 > 0)], 5[(arg1 > 0 /\ -4+arg1 < 0)]
	
	Blocked

	[{}, {8[T]}, {}]

Covered

	Trace

	7[(1+arg2p4 > 0)]
	
	Blocked

	[{}, {5[T], 8[T]}]

Step with 6

	Trace

	7[(1+arg2p4 > 0)], 6[(-3+arg1 > 0)]
	
	Blocked

	[{}, {5[T], 8[T]}, {}]

Nonterm

Start location: __init
Program variables: arg1 arg2
   5: f47_0_increase_LE -> f47_0_increase_LE : arg1'=-1+arg1, arg2'=arg2p2, (arg1 > 0 /\ -4+arg1 < 0), cost: 1
   6: f47_0_increase_LE -> f47_0_increase_LE : arg1'=1+arg1, arg2'=arg2p3, -3+arg1 > 0, cost: 1
   8: f47_0_increase_LE -> f47_0_increase_LE : arg1'=arg1-n, arg2'=arg2p2, (1+arg1-n > 0 /\ -1+n >= 0 /\ 4-arg1 > 0), cost: 1
   9: f47_0_increase_LE -> LoAT_sink : (-3+arg1 > 0 /\ -1+n2 >= 0), cost: NONTERM
  10: f47_0_increase_LE -> f47_0_increase_LE : arg1'=arg1+n2, arg2'=arg2p3, (-3+arg1 > 0 /\ -1+n2 >= 0), cost: 1
   7: __init -> f47_0_increase_LE : arg1'=arg2p4, arg2'=arg2p1, (1+arg2p4 > 0), cost: 1

	Certificate of Non-Termination

	Original rule:
	f47_0_increase_LE -> f47_0_increase_LE : arg1'=1+arg1, arg2'=arg2p3, (-3+arg1 > 0), cost: 1
	New rule:
	f47_0_increase_LE -> LoAT_sink : (-3+arg1 > 0 /\ -1+n2 >= 0), cost: NONTERM

		-3+arg1 > 0 [0]: monotonic increase yields -3+arg1 > 0
		
		Replacement map: {-3+arg1 > 0 -> -3+arg1 > 0}

	Loop Acceleration

	Original rule:
	f47_0_increase_LE -> f47_0_increase_LE : arg1'=1+arg1, arg2'=arg2p3, (-3+arg1 > 0), cost: 1
	New rule:
	f47_0_increase_LE -> f47_0_increase_LE : arg1'=arg1+n2, arg2'=arg2p3, (-3+arg1 > 0 /\ -1+n2 >= 0), cost: 1

		-3+arg1 > 0 [0]: monotonic increase yields -3+arg1 > 0
		
		Replacement map: {-3+arg1 > 0 -> -3+arg1 > 0}

Step with 9

	Trace

	7[(1+arg2p4 > 0)], 9[(-3+arg1 > 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {5[T], 8[T]}, {9[T]}]

Refute

	Counterexample

	[ arg1=4 arg2=0 ] 7 [ arg1=arg1 arg2=arg2 ] 9
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
