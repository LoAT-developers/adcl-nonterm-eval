YES

Solver Timeout: 4
Global Timeout: 300
Maximum number of concurrent processes: 900
*******************************************************************************************
*********************** UNPROCESSED TRANSITION SYSTEMS PER FUNCTION ***********************
*******************************************************************************************


List of LLVMGraphs + assumeNodes + staticAssertNodes [1] :

+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++
+                                                                  +
Init Location: 0
Transitions:
<l0, l1, true, seq{main__func_return_ -> 0, main_a -> Â¿functionCall(__VERIFIER_nondet_int), main_b -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l1, l2, true>
<l2, l19, not((main_a < 30))>
<l2, l3, (main_a < 30)>
<l3, l4, true>
<l4, l17, not((main_b < main_a))>
<l4, l5, (main_b < main_a)>
<l5, l6, (main_b > 5)>
<l5, l8, not((main_b > 5))>
<l6, l7, true, seq{main_b -> (main_b + 7)}>
<l7, l10, true>
<l8, l9, true, seq{main_b -> (main_b + 2)}>
<l9, l10, true>
<l10, l14, not((main_b >= 10))>
<l10, l11, (main_b >= 10)>
<l11, l12, (main_b <= 12)>
<l11, l14, not((main_b <= 12))>
<l12, l13, true, seq{main_a -> (main_a + 10)}>
<l13, l16, true>
<l14, l15, true, seq{main_a -> (main_a + 1)}>
<l15, l16, true>
<l16, l4, true>
<l17, l18, true, seq{main_a -> (main_a + 2), main_b -> (main_b - 10)}>
<l18, l2, true>
<l19, l20, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

+ Assume Nodes [0]: ++++++++++++++++++++++++++++++++++++++++++++++++
       
+ Static Assert Nodes [0]: +++++++++++++++++++++++++++++++++++++++++
       
+ After preprocess (paralelization): ++++++++++++++++++++++++++++++

Init Location: 0
Transitions:
<l0, l21, true, seq{main__func_return_ -> 0}>
<l21, l22, true, seq{varCall_1 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l22, l23, true, seq{main_a -> varCall_1}>
<l23, l24, true, seq{varCall_2 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l24, l1, true, seq{main_b -> varCall_2}>
<l1, l2, true>
<l2, l3, (main_a < 30)>
<l2, l19, not((main_a < 30))>
<l3, l4, true>
<l4, l5, (main_b < main_a)>
<l4, l17, not((main_b < main_a))>
<l5, l6, (main_b > 5)>
<l5, l8, not((main_b > 5))>
<l6, l7, true, seq{main_b -> (main_b + 7)}>
<l7, l10, true>
<l8, l9, true, seq{main_b -> (main_b + 2)}>
<l9, l10, true>
<l10, l11, (main_b >= 10)>
<l10, l14, not((main_b >= 10))>
<l11, l12, (main_b <= 12)>
<l11, l14, not((main_b <= 12))>
<l12, l13, true, seq{main_a -> (main_a + 10)}>
<l13, l16, true>
<l14, l15, true, seq{main_a -> (main_a + 1)}>
<l15, l16, true>
<l16, l4, true>
<l17, l18, true, seq{main_a -> (main_a + 2), main_b -> (main_b - 10)}>
<l18, l2, true>
<l19, l20, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:
20, 
Accepting locations:

Asserts:

+                                                                  +
+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++


Function Return and Parameters Information [2 functions]:
    function name: __VERIFIER_nondet_int [1 return + 0 parameters]        demangled: __VERIFIER_nondet_int
        __VERIFIER_nondet_int__func_return_      [function result] : int
    function name: main [1 return + 0 parameters]        demangled: main
        main__func_return_      [function result] : int


AST Ident Scanner Information [4 idents]:
__VERIFIER_nondet_int | function | [integer, ()] | <line: 10, col: 1> | <line: 14, col: 6> <line: 15, col: 6>
main | function | [integer, ()] | <line: 12, col: 1>
a | local variable | integer | <line: 13, col: 5> | <line: 14, col: 2> <line: 16, col: 9> <line: 17, col: 14> <line: 24, col: 5> <line: 24, col: 9> <line: 26, col: 5> <line: 26, col: 9> <line: 29, col: 3> <line: 29, col: 7>
b | local variable | integer | <line: 13, col: 5> | <line: 15, col: 2> <line: 17, col: 10> <line: 18, col: 8> <line: 19, col: 5> <line: 19, col: 9> <line: 21, col: 5> <line: 21, col: 9> <line: 23, col: 8> <line: 23, col: 19> <line: 30, col: 3> <line: 30, col: 7>

Main function: main
Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l4, (main_a = undef3) /\ (main_b = undef4) /\ (undef3 < 30)>
<l0, l20, (main_a = undef3) /\ (main_b = undef4) /\ not((undef3 < 30))>
<l4, l4, (main_b < main_a) /\ (main_b > 5) /\ ((main_b + 7) >= 10) /\ not(((main_b + 7) <= 12)), par{main_a -> (main_a + 1), main_b -> (main_b + 7)}>
<l4, l4, (main_b < main_a) /\ not((main_b > 5)) /\ not(((main_b + 2) >= 10)), par{main_a -> (main_a + 1), main_b -> (main_b + 2)}>
<l4, l4, not((main_b < main_a)) /\ ((main_a + 2) < 30), par{main_a -> (main_a + 2), main_b -> (main_b - 10)}>
<l4, l20, not((main_b < main_a)) /\ not(((main_a + 2) < 30)), par{main_a -> (main_a + 2), main_b -> (main_b - 10)}>

Fresh variables:
undef3, undef4, 

Undef variables:
undef3, undef4, 

Abstraction variables:

Exit nodes:
20, 
Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l4, l4, 1 + main_b <= main_a /\ 6 <= main_b, {main_a -> 1 + main_a, main_b -> 7 + main_b, rest remain the same}>
<l4, l4, 1 + main_b <= main_a /\ main_b <= 5, {main_a -> 1 + main_a, main_b -> 2 + main_b, rest remain the same}>
<l4, l4, main_a <= main_b /\ main_a <= 27, {main_a -> 2 + main_a, main_b -> -10 + main_b, rest remain the same}>
Variables:
main_a, main_b

Graph 2:
Transitions:
Variables:

Precedence: 
Graph 0

Graph 1
<l0, l4, undef3 <= 29 /\ main_a = undef3 /\ main_b = undef4, {all remain the same}>

Graph 2
<l0, l20, 30 <= undef3 /\ main_a = undef3 /\ main_b = undef4, {all remain the same}>
<l4, l20, main_a <= main_b /\ 28 <= main_a, {main_a -> 2 + main_a, main_b -> -10 + main_b, rest remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 4 , 1 )
( 20 , 2 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.707044

Checking conditional termination of SCC {l4}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.019105s
[33mRanking function: [36m27 - main_a[0m
New Graphs: 
Transitions:
<l4, l4, 1 + main_b <= main_a /\ 6 <= main_b, {main_a -> 1 + main_a, main_b -> 7 + main_b, rest remain the same}>
<l4, l4, 1 + main_b <= main_a /\ main_b <= 5, {main_a -> 1 + main_a, main_b -> 2 + main_b, rest remain the same}>
Variables:
main_a, main_b
Checking conditional termination of SCC {l4}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000548s
[33mRanking function: [36m-96 + 24*main_a - 12*main_b[0m
New Graphs: 
Transitions:
<l4, l4, 1 + main_b <= main_a /\ main_b <= 5, {main_a -> 1 + main_a, main_b -> 2 + main_b, rest remain the same}>
Variables:
main_a, main_b
Checking conditional termination of SCC {l4}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000318s
[33mRanking function: [36m-1 + main_a - main_b[0m
New Graphs: 
Proving termination of subgraph 2
Analyzing SCC {l20}...
No cycles found.

[32mProgram Terminates[0m
