NO

Initial ITS
Start location: __init
   0: f1_0_main_ConstantStackPush -> f68_0_main_GE : arg2'=arg2P0, arg1'=arg1P0, (13-arg1P0 == 0 /\ 17-arg2P0 == 0), cost: 1
   1: f68_0_main_GE -> f68_0_main_GE : arg2'=arg2P1, arg1'=arg1P1, (arg2-arg1 > 0 /\ -2+arg2 > 0 /\ 2-arg1P1 == 0 /\ arg1 > 0 /\ 1+arg1-arg2P1 == 0), cost: 1
   2: __init -> f1_0_main_ConstantStackPush : arg2'=arg2P2, arg1'=arg1P2, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_ConstantStackPush -> f68_0_main_GE : arg2'=arg2P0, arg1'=arg1P0, (13-arg1P0 == 0 /\ 17-arg2P0 == 0), cost: 1
New rule:
f1_0_main_ConstantStackPush -> f68_0_main_GE : arg2'=17, arg1'=13, TRUE, cost: 1

Applied preprocessing
Original rule:
f68_0_main_GE -> f68_0_main_GE : arg2'=arg2P1, arg1'=arg1P1, (arg2-arg1 > 0 /\ -2+arg2 > 0 /\ 2-arg1P1 == 0 /\ arg1 > 0 /\ 1+arg1-arg2P1 == 0), cost: 1
New rule:
f68_0_main_GE -> f68_0_main_GE : arg2'=1+arg1, arg1'=2, (arg2-arg1 > 0 /\ -2+arg2 > 0 /\ arg1 > 0), cost: 1

Simplified rules
Start location: __init
   3: f1_0_main_ConstantStackPush -> f68_0_main_GE : arg2'=17, arg1'=13, TRUE, cost: 1
   4: f68_0_main_GE -> f68_0_main_GE : arg2'=1+arg1, arg1'=2, (arg2-arg1 > 0 /\ -2+arg2 > 0 /\ arg1 > 0), cost: 1
   2: __init -> f1_0_main_ConstantStackPush : arg2'=arg2P2, arg1'=arg1P2, TRUE, cost: 1


Applied unrolling
Original rule:
f68_0_main_GE -> f68_0_main_GE : arg2'=1+arg1, arg1'=2, (arg2-arg1 > 0 /\ -2+arg2 > 0 /\ arg1 > 0), cost: 1
New rule:
f68_0_main_GE -> f68_0_main_GE : arg2'=3, arg1'=2, (arg2-arg1 > 0 /\ -2+arg2 > 0 /\ 2 > 0 /\ arg1 > 0 /\ -1+arg1 > 0), cost: 2

Applied nonterm
Original rule:
f68_0_main_GE -> f68_0_main_GE : arg2'=3, arg1'=2, (arg2-arg1 > 0 /\ -2+arg2 > 0 /\ 2 > 0 /\ arg1 > 0 /\ -1+arg1 > 0), cost: 2
New rule:
f68_0_main_GE -> [3] : (-1+n >= 0 /\ arg2-arg1 > 0 /\ -2+arg2 > 0 /\ 2 > 0 /\ arg1 > 0 /\ -1+arg1 > 0), cost: NONTERM
Sub-proof via acceration calculus written to file:///tmp/tmpnam_MFogoA.txt

Applied simplification
Original rule:
f68_0_main_GE -> [3] : (-1+n >= 0 /\ arg2-arg1 > 0 /\ -2+arg2 > 0 /\ 2 > 0 /\ arg1 > 0 /\ -1+arg1 > 0), cost: NONTERM
New rule:
f68_0_main_GE -> [3] : (-1+n >= 0 /\ arg2-arg1 > 0 /\ -1+arg1 > 0), cost: NONTERM

Applied deletion
Removed the following rules: 4

Accelerated simple loops
Start location: __init
   3: f1_0_main_ConstantStackPush -> f68_0_main_GE : arg2'=17, arg1'=13, TRUE, cost: 1
   6: f68_0_main_GE -> [3] : (-1+n >= 0 /\ arg2-arg1 > 0 /\ -1+arg1 > 0), cost: NONTERM
   2: __init -> f1_0_main_ConstantStackPush : arg2'=arg2P2, arg1'=arg1P2, TRUE, cost: 1


Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f68_0_main_GE : arg2'=17, arg1'=13, TRUE, cost: 1
Second rule:
f68_0_main_GE -> [3] : (-1+n >= 0 /\ arg2-arg1 > 0 /\ -1+arg1 > 0), cost: NONTERM
New rule:
f1_0_main_ConstantStackPush -> [3] : (4 > 0 /\ 12 > 0), cost: NONTERM

Applied deletion
Removed the following rules: 6

Chained accelerated rules with incoming rules
Start location: __init
   3: f1_0_main_ConstantStackPush -> f68_0_main_GE : arg2'=17, arg1'=13, TRUE, cost: 1
   7: f1_0_main_ConstantStackPush -> [3] : (4 > 0 /\ 12 > 0), cost: NONTERM
   2: __init -> f1_0_main_ConstantStackPush : arg2'=arg2P2, arg1'=arg1P2, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
   7: f1_0_main_ConstantStackPush -> [3] : (4 > 0 /\ 12 > 0), cost: NONTERM
   2: __init -> f1_0_main_ConstantStackPush : arg2'=arg2P2, arg1'=arg1P2, TRUE, cost: 1


Eliminating location f1_0_main_ConstantStackPush by chaining:

Applied chaining
First rule:
__init -> f1_0_main_ConstantStackPush : arg2'=arg2P2, arg1'=arg1P2, TRUE, cost: 1
Second rule:
f1_0_main_ConstantStackPush -> [3] : (4 > 0 /\ 12 > 0), cost: NONTERM
New rule:
__init -> [3] : (4 > 0 /\ 12 > 0), cost: NONTERM

Applied deletion
Removed the following rules: 2 7

Eliminated locations on linear paths
Start location: __init
   8: __init -> [3] : (4 > 0 /\ 12 > 0), cost: NONTERM


Computing asymptotic complexity
Proved nontermination of rule 8 via SMT.

Proved the following lower bound
Complexity:  Nonterm
Cpx degree: Nonterm

Solved cost: NONTERM
Rule cost:   NONTERM
Rule guard:  (4 > 0 /\ 12 > 0)
