unknown

Initial ITS

Start location: [1]
Program variables: x1 x2
   0: [1] -> [2] : x1'=nondet, T, cost: 1
   1: [2] -> [3] : x2'=nondet1, T, cost: 1
   2: [3] -> [4] : -10+x1 <= 0, cost: 1
  10: [3] -> [10] : -10+x1 > 0, cost: 1
   3: [4] -> [5] : x2'=1000, T, cost: 1
   4: [5] -> [6] : -1+x2 > 0, cost: 1
   7: [5] -> [8] : -1+x2 <= 0, cost: 1
   5: [6] -> [7] : x2'=-1+x2, T, cost: 1
   6: [7] -> [5] : T, cost: 1
   8: [8] -> [9] : x1'=1+x1, T, cost: 1
   9: [9] -> [3] : T, cost: 1

Chained Linear Paths

Start location: [1]
Program variables: x1 x2
  11: [1] -> [3] : x1'=nondet, x2'=nondet1, T, cost: 1
  10: [3] -> [10] : -10+x1 > 0, cost: 1
  12: [3] -> [5] : x2'=1000, -10+x1 <= 0, cost: 1
  15: [5] -> [5] : x2'=-1+x2, -1+x2 > 0, cost: 1
  16: [5] -> [3] : x1'=1+x1, -1+x2 <= 0, cost: 1

	Eliminating location [2] by chaining:

	Applied chaining

	First rule:
	[1] -> [2] : x1'=nondet, T, cost: 1
	Second rule:
	[2] -> [3] : x2'=nondet1, T, cost: 1
	New rule:
	[1] -> [3] : x1'=nondet, x2'=nondet1, T, cost: 1
	
	Applied deletion

	Removed the following rules: 0 1
	
	Eliminating location [4] by chaining:

	Applied chaining

	First rule:
	[3] -> [4] : -10+x1 <= 0, cost: 1
	Second rule:
	[4] -> [5] : x2'=1000, T, cost: 1
	New rule:
	[3] -> [5] : x2'=1000, -10+x1 <= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 2 3
	
	Eliminating location [6] by chaining:

	Applied chaining

	First rule:
	[5] -> [6] : -1+x2 > 0, cost: 1
	Second rule:
	[6] -> [7] : x2'=-1+x2, T, cost: 1
	New rule:
	[5] -> [7] : x2'=-1+x2, -1+x2 > 0, cost: 1
	
	Applied deletion

	Removed the following rules: 4 5
	
	Eliminating location [8] by chaining:

	Applied chaining

	First rule:
	[5] -> [8] : -1+x2 <= 0, cost: 1
	Second rule:
	[8] -> [9] : x1'=1+x1, T, cost: 1
	New rule:
	[5] -> [9] : x1'=1+x1, -1+x2 <= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 7 8
	
	Eliminating location [7] by chaining:

	Applied chaining

	First rule:
	[5] -> [7] : x2'=-1+x2, -1+x2 > 0, cost: 1
	Second rule:
	[7] -> [5] : T, cost: 1
	New rule:
	[5] -> [5] : x2'=-1+x2, -1+x2 > 0, cost: 1
	
	Applied deletion

	Removed the following rules: 6 13
	
	Eliminating location [9] by chaining:

	Applied chaining

	First rule:
	[5] -> [9] : x1'=1+x1, -1+x2 <= 0, cost: 1
	Second rule:
	[9] -> [3] : T, cost: 1
	New rule:
	[5] -> [3] : x1'=1+x1, -1+x2 <= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 9 14

Step with 11

	Trace

	11[T]
	
	Blocked

	[{}, {}]

Step with 10

	Trace

	11[T], 10[(-10+x1 > 0)]
	
	Blocked

	[{}, {}, {}]

Backtrack

	Trace

	11[T]
	
	Blocked

	[{}, {10[T]}]

Step with 12

	Trace

	11[T], 12[(-10+x1 <= 0)]
	
	Blocked

	[{}, {10[T]}, {}]

Step with 15

	Trace

	11[T], 12[(-10+x1 <= 0)], 15[(-1+x2 > 0)]
	
	Blocked

	[{}, {10[T]}, {}, {}]

Accelerate

Start location: [1]
Program variables: x1 x2
  11: [1] -> [3] : x1'=nondet, x2'=nondet1, T, cost: 1
  10: [3] -> [10] : -10+x1 > 0, cost: 1
  12: [3] -> [5] : x2'=1000, -10+x1 <= 0, cost: 1
  15: [5] -> [5] : x2'=-1+x2, -1+x2 > 0, cost: 1
  16: [5] -> [3] : x1'=1+x1, -1+x2 <= 0, cost: 1
  17: [5] -> [5] : x2'=-n+x2, (-1+n >= 0 /\ -n+x2 > 0), cost: 1

	Loop Acceleration

	Original rule:
	[5] -> [5] : x2'=-1+x2, (-1+x2 > 0), cost: 1
	New rule:
	[5] -> [5] : x2'=-n+x2, (-1+n >= 0 /\ -n+x2 > 0), cost: 1

		-1+x2 > 0 [0]: montonic decrease yields -n+x2 > 0
		
		-1+x2 > 0 [1]: eventual increase yields (1 <= 0 /\ -1+x2 > 0)
		
		Replacement map: {-1+x2 > 0 -> -n+x2 > 0}

	Trace

	11[T], 12[(-10+x1 <= 0)], 17[(-1+n >= 0 /\ -n+x2 > 0)]
	
	Blocked

	[{}, {10[T]}, {}, {15[T], 17[T]}]

Step with 16

	Trace

	11[T], 12[(-10+x1 <= 0)], 17[(-1+n >= 0 /\ -n+x2 > 0)], 16[(-1+x2 <= 0)]
	
	Blocked

	[{}, {10[T]}, {}, {15[T], 17[T]}, {}]

Accelerate

Start location: [1]
Program variables: x1 x2
  11: [1] -> [3] : x1'=nondet, x2'=nondet1, T, cost: 1
  10: [3] -> [10] : -10+x1 > 0, cost: 1
  12: [3] -> [5] : x2'=1000, -10+x1 <= 0, cost: 1
  18: [3] -> [3] : x1'=n2+x1, x2'=1, (-1+n2 >= 0 /\ 11-n2-x1 >= 0), cost: 1
  15: [5] -> [5] : x2'=-1+x2, -1+x2 > 0, cost: 1
  16: [5] -> [3] : x1'=1+x1, -1+x2 <= 0, cost: 1
  17: [5] -> [5] : x2'=-n+x2, (-1+n >= 0 /\ -n+x2 > 0), cost: 1

	Loop Acceleration

	Original rule:
	[3] -> [3] : x1'=1+x1, x2'=1, -10+x1 <= 0, cost: 1
	New rule:
	[3] -> [3] : x1'=n2+x1, x2'=1, (-1+n2 >= 0 /\ 11-n2-x1 >= 0), cost: 1

		10-x1 >= 0 [0]: montonic decrease yields 11-n2-x1 >= 0
		
		10-x1 >= 0 [1]: eventual increase yields (1 <= 0 /\ 10-x1 >= 0)
		
		Replacement map: {10-x1 >= 0 -> 11-n2-x1 >= 0}

	Trace

	11[T], 18[(-1+n2 >= 0 /\ 11-n2-x1 >= 0)]
	
	Blocked

	[{}, {10[T]}, {18[T]}]

Step with 10

	Trace

	11[T], 18[(-1+n2 >= 0 /\ 11-n2-x1 >= 0)], 10[(-10+x1 > 0)]
	
	Blocked

	[{}, {10[T]}, {18[T]}, {}]

Backtrack

	Trace

	11[T], 18[(-1+n2 >= 0 /\ 11-n2-x1 >= 0)]
	
	Blocked

	[{}, {10[T]}, {10[T], 18[T]}]

Step with 12

	Trace

	11[T], 18[(-1+n2 >= 0 /\ 11-n2-x1 >= 0)], 12[(-10+x1 <= 0)]
	
	Blocked

	[{}, {10[T]}, {10[T], 18[T]}, {}]

Step with 17

	Trace

	11[T], 18[(-1+n2 >= 0 /\ 11-n2-x1 >= 0)], 12[(-10+x1 <= 0)], 17[(-1+n >= 0 /\ -n+x2 > 0)]
	
	Blocked

	[{}, {10[T]}, {10[T], 18[T]}, {16[T]}, {17[T]}]

Step with 15

	Trace

	11[T], 18[(-1+n2 >= 0 /\ 11-n2-x1 >= 0)], 12[(-10+x1 <= 0)], 17[(-1+n >= 0 /\ -n+x2 > 0)], 15[(-1+x2 > 0)]
	
	Blocked

	[{}, {10[T]}, {10[T], 18[T]}, {16[T]}, {17[T]}, {}]

Covered

	Trace

	11[T], 18[(-1+n2 >= 0 /\ 11-n2-x1 >= 0)], 12[(-10+x1 <= 0)], 17[(-1+n >= 0 /\ -n+x2 > 0)]
	
	Blocked

	[{}, {10[T]}, {10[T], 18[T]}, {16[T]}, {15[T], 17[T]}]

Step with 16

	Trace

	11[T], 18[(-1+n2 >= 0 /\ 11-n2-x1 >= 0)], 12[(-10+x1 <= 0)], 17[(-1+n >= 0 /\ -n+x2 > 0)], 16[(-1+x2 <= 0)]
	
	Blocked

	[{}, {10[T]}, {10[T], 18[T]}, {16[T]}, {15[T], 17[T]}, {}]

Covered

	Trace

	11[T], 18[(-1+n2 >= 0 /\ 11-n2-x1 >= 0)], 12[(-10+x1 <= 0)], 17[(-1+n >= 0 /\ -n+x2 > 0)]
	
	Blocked

	[{}, {10[T]}, {10[T], 18[T]}, {16[T]}, {15[T], 16[T], 17[T]}]

Backtrack

	Trace

	11[T], 18[(-1+n2 >= 0 /\ 11-n2-x1 >= 0)], 12[(-10+x1 <= 0)]
	
	Blocked

	[{}, {10[T]}, {10[T], 18[T]}, {16[T], 17[T]}]

Step with 15

	Trace

	11[T], 18[(-1+n2 >= 0 /\ 11-n2-x1 >= 0)], 12[(-10+x1 <= 0)], 15[(-1+x2 > 0)]
	
	Blocked

	[{}, {10[T]}, {10[T], 18[T]}, {16[T], 17[T]}, {}]

Covered

	Trace

	11[T], 18[(-1+n2 >= 0 /\ 11-n2-x1 >= 0)], 12[(-10+x1 <= 0)]
	
	Blocked

	[{}, {10[T]}, {10[T], 18[T]}, {15[T], 16[T], 17[T]}]

Backtrack

	Trace

	11[T], 18[(-1+n2 >= 0 /\ 11-n2-x1 >= 0)]
	
	Blocked

	[{}, {10[T]}, {10[T], 12[T], 18[T]}]

Backtrack

	Trace

	11[T]
	
	Blocked

	[{}, {10[T], 18[T]}]

Step with 12

	Trace

	11[T], 12[(-10+x1 <= 0)]
	
	Blocked

	[{}, {10[T], 18[T]}, {}]

Step with 15

	Trace

	11[T], 12[(-10+x1 <= 0)], 15[(-1+x2 > 0)]
	
	Blocked

	[{}, {10[T], 18[T]}, {}, {}]

Covered

	Trace

	11[T], 12[(-10+x1 <= 0)]
	
	Blocked

	[{}, {10[T], 18[T]}, {15[T]}]

Step with 17

	Trace

	11[T], 12[(-10+x1 <= 0)], 17[(-1+n >= 0 /\ -n+x2 > 0)]
	
	Blocked

	[{}, {10[T], 18[T]}, {15[T], 16[T]}, {17[T]}]

Step with 15

	Trace

	11[T], 12[(-10+x1 <= 0)], 17[(-1+n >= 0 /\ -n+x2 > 0)], 15[(-1+x2 > 0)]
	
	Blocked

	[{}, {10[T], 18[T]}, {15[T], 16[T]}, {17[T]}, {}]

Covered

	Trace

	11[T], 12[(-10+x1 <= 0)], 17[(-1+n >= 0 /\ -n+x2 > 0)]
	
	Blocked

	[{}, {10[T], 18[T]}, {15[T], 16[T]}, {15[T], 17[T]}]

Step with 16

	Trace

	11[T], 12[(-10+x1 <= 0)], 17[(-1+n >= 0 /\ -n+x2 > 0)], 16[(-1+x2 <= 0)]
	
	Blocked

	[{}, {10[T], 18[T]}, {15[T], 16[T]}, {15[T], 17[T]}, {}]

Covered

	Trace

	11[T], 12[(-10+x1 <= 0)], 17[(-1+n >= 0 /\ -n+x2 > 0)]
	
	Blocked

	[{}, {10[T], 18[T]}, {15[T], 16[T]}, {15[T], 16[T], 17[T]}]

Backtrack

	Trace

	11[T], 12[(-10+x1 <= 0)]
	
	Blocked

	[{}, {10[T], 18[T]}, {15[T], 16[T], 17[T]}]

Backtrack

	Trace

	11[T]
	
	Blocked

	[{}, {10[T], 12[T], 18[T]}]

Backtrack

	Trace

	Blocked

	[{11[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
