unknown

Initial ITS

Start location: [1]
Program variables: tmp x
   0: [1] -> [2] : x'=nondet, T, cost: 1
   1: [2] -> [3] : tmp'=nondet1, T, cost: 1
   2: [3] -> [4] : (-2*tmp+x == 0 /\ x > 0), cost: 1
   6: [3] -> [7] : (-2*tmp+x < 0 \/ -2*tmp+x > 0 \/ x <= 0), cost: 1
   3: [4] -> [5] : x'=-1+x, T, cost: 1
   4: [5] -> [6] : tmp'=nondet2, T, cost: 1
   5: [6] -> [3] : T, cost: 1

Chained Linear Paths

Start location: [1]
Program variables: tmp x
   7: [1] -> [3] : tmp'=nondet1, x'=nondet, T, cost: 1
   6: [3] -> [7] : (-2*tmp+x < 0 \/ -2*tmp+x > 0 \/ x <= 0), cost: 1
  10: [3] -> [3] : tmp'=nondet2, x'=-1+x, (-2*tmp+x == 0 /\ x > 0), cost: 1

	Eliminating location [2] by chaining:

	Applied chaining

	First rule:
	[1] -> [2] : x'=nondet, T, cost: 1
	Second rule:
	[2] -> [3] : tmp'=nondet1, T, cost: 1
	New rule:
	[1] -> [3] : tmp'=nondet1, x'=nondet, T, cost: 1
	
	Applied deletion

	Removed the following rules: 0 1
	
	Eliminating location [4] by chaining:

	Applied chaining

	First rule:
	[3] -> [4] : (-2*tmp+x == 0 /\ x > 0), cost: 1
	Second rule:
	[4] -> [5] : x'=-1+x, T, cost: 1
	New rule:
	[3] -> [5] : x'=-1+x, (-2*tmp+x == 0 /\ x > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 2 3
	
	Eliminating location [5] by chaining:

	Applied chaining

	First rule:
	[3] -> [5] : x'=-1+x, (-2*tmp+x == 0 /\ x > 0), cost: 1
	Second rule:
	[5] -> [6] : tmp'=nondet2, T, cost: 1
	New rule:
	[3] -> [6] : tmp'=nondet2, x'=-1+x, (-2*tmp+x == 0 /\ x > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 4 8
	
	Eliminating location [6] by chaining:

	Applied chaining

	First rule:
	[3] -> [6] : tmp'=nondet2, x'=-1+x, (-2*tmp+x == 0 /\ x > 0), cost: 1
	Second rule:
	[6] -> [3] : T, cost: 1
	New rule:
	[3] -> [3] : tmp'=nondet2, x'=-1+x, (-2*tmp+x == 0 /\ x > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 5 9

Step with 7

	Trace

	7[T]
	
	Blocked

	[{}, {}]

Step with 6

	Trace

	7[T], 6[(-2*tmp+x > 0)]
	
	Blocked

	[{}, {}, {}]

Backtrack

	Trace

	7[T]
	
	Blocked

	[{}, {6[-2*tmp+x > 0]}]

Step with 6

	Trace

	7[T], 6[(-2*tmp+x < 0)]
	
	Blocked

	[{}, {6[-2*tmp+x > 0]}, {}]

Backtrack

	Trace

	7[T]
	
	Blocked

	[{}, {6[(-2*tmp+x < 0 /\ -2*tmp+x > 0)]}]

Step with 6

	Trace

	7[T], 6[(x <= 0)]
	
	Blocked

	[{}, {6[(-2*tmp+x < 0 /\ -2*tmp+x > 0)]}, {}]

Backtrack

	Trace

	7[T]
	
	Blocked

	[{}, {6[(-2*tmp+x < 0 /\ -2*tmp+x > 0 /\ x <= 0)]}]

Step with 10

	Trace

	7[T], 10[(-2*tmp+x == 0 /\ x > 0)]
	
	Blocked

	[{}, {6[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 6

	Trace

	7[T], 10[(-2*tmp+x == 0 /\ x > 0)], 6[(-2*tmp+x > 0)]
	
	Blocked

	[{}, {6[T]}, {10[T]}, {}]

Backtrack

	Trace

	7[T], 10[(-2*tmp+x == 0 /\ x > 0)]
	
	Blocked

	[{}, {6[T]}, {6[-2*tmp+x > 0], 10[T]}]

Step with 6

	Trace

	7[T], 10[(-2*tmp+x == 0 /\ x > 0)], 6[(-2*tmp+x < 0)]
	
	Blocked

	[{}, {6[T]}, {6[-2*tmp+x > 0], 10[T]}, {}]

Backtrack

	Trace

	7[T], 10[(-2*tmp+x == 0 /\ x > 0)]
	
	Blocked

	[{}, {6[T]}, {6[(-2*tmp+x < 0 /\ -2*tmp+x > 0)], 10[T]}]

Backtrack

	Trace

	7[T]
	
	Blocked

	[{}, {6[T], 10[T]}]

Backtrack

	Trace

	Blocked

	[{7[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
