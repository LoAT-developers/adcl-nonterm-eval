NO

Initial ITS
Start location: __init
   0: f1_0_main_Load -> f121_0_loop_LE : arg2'=arg2P0, arg1'=arg1P0, (20 > 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ 20+arg2-arg1P0 == 0), cost: 1
   1: f121_0_loop_LE -> f121_0_loop_LE : arg2'=arg2P1, arg1'=arg1P1, (-25+arg1 < 0 /\ -10+arg1 > 0 /\ -1+arg1-arg1P1 == 0 /\ -31+arg1 < 0), cost: 1
   2: f121_0_loop_LE -> f121_0_loop_LE : arg2'=arg2P2, arg1'=arg1P2, (-25+arg1 > 0 /\ -1+arg1-arg1P2 == 0 /\ -31+arg1 < 0), cost: 1
   3: f121_0_loop_LE -> f121_0_loop_LE : arg2'=arg2P3, arg1'=arg1P3, (20-arg1P3 == 0 /\ -30+arg1 > 0), cost: 1
   4: f121_0_loop_LE -> f121_0_loop_LE : arg2'=arg2P4, arg1'=arg1P4, (29-arg1P4 == 0 /\ 25-arg1 == 0), cost: 1
   5: __init -> f1_0_main_Load : arg2'=arg2P5, arg1'=arg1P5, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_Load -> f121_0_loop_LE : arg2'=arg2P0, arg1'=arg1P0, (20 > 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ 20+arg2-arg1P0 == 0), cost: 1
New rule:
f1_0_main_Load -> f121_0_loop_LE : arg2'=arg2P0, arg1'=20+arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f121_0_loop_LE -> f121_0_loop_LE : arg2'=arg2P1, arg1'=arg1P1, (-25+arg1 < 0 /\ -10+arg1 > 0 /\ -1+arg1-arg1P1 == 0 /\ -31+arg1 < 0), cost: 1
New rule:
f121_0_loop_LE -> f121_0_loop_LE : arg2'=arg2P1, arg1'=-1+arg1, (-10+arg1 > 0 /\ 25-arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f121_0_loop_LE -> f121_0_loop_LE : arg2'=arg2P2, arg1'=arg1P2, (-25+arg1 > 0 /\ -1+arg1-arg1P2 == 0 /\ -31+arg1 < 0), cost: 1
New rule:
f121_0_loop_LE -> f121_0_loop_LE : arg2'=arg2P2, arg1'=-1+arg1, (-25+arg1 > 0 /\ 31-arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f121_0_loop_LE -> f121_0_loop_LE : arg2'=arg2P3, arg1'=arg1P3, (20-arg1P3 == 0 /\ -30+arg1 > 0), cost: 1
New rule:
f121_0_loop_LE -> f121_0_loop_LE : arg2'=arg2P3, arg1'=20, -30+arg1 > 0, cost: 1

Applied preprocessing
Original rule:
f121_0_loop_LE -> f121_0_loop_LE : arg2'=arg2P4, arg1'=arg1P4, (29-arg1P4 == 0 /\ 25-arg1 == 0), cost: 1
New rule:
f121_0_loop_LE -> f121_0_loop_LE : arg2'=arg2P4, arg1'=29, -25+arg1 == 0, cost: 1

Simplified rules
Start location: __init
   6: f1_0_main_Load -> f121_0_loop_LE : arg2'=arg2P0, arg1'=20+arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
   7: f121_0_loop_LE -> f121_0_loop_LE : arg2'=arg2P1, arg1'=-1+arg1, (-10+arg1 > 0 /\ 25-arg1 > 0), cost: 1
   8: f121_0_loop_LE -> f121_0_loop_LE : arg2'=arg2P2, arg1'=-1+arg1, (-25+arg1 > 0 /\ 31-arg1 > 0), cost: 1
   9: f121_0_loop_LE -> f121_0_loop_LE : arg2'=arg2P3, arg1'=20, -30+arg1 > 0, cost: 1
  10: f121_0_loop_LE -> f121_0_loop_LE : arg2'=arg2P4, arg1'=29, -25+arg1 == 0, cost: 1
   5: __init -> f1_0_main_Load : arg2'=arg2P5, arg1'=arg1P5, TRUE, cost: 1


Applied acceleration
Original rule:
f121_0_loop_LE -> f121_0_loop_LE : arg2'=arg2P1, arg1'=-1+arg1, (-10+arg1 > 0 /\ 25-arg1 > 0), cost: 1
New rule:
f121_0_loop_LE -> f121_0_loop_LE : arg2'=arg2P1, arg1'=arg1-n, (-9+arg1-n > 0 /\ -1+n >= 0 /\ 25-arg1 > 0), cost: n
Sub-proof via acceration calculus written to file:///tmp/tmpnam_jeDGmO.txt

Applied instantiation
Original rule:
f121_0_loop_LE -> f121_0_loop_LE : arg2'=arg2P1, arg1'=arg1-n, (-9+arg1-n > 0 /\ -1+n >= 0 /\ 25-arg1 > 0), cost: n
New rule:
f121_0_loop_LE -> f121_0_loop_LE : arg2'=arg2P1, arg1'=10, (1 > 0 /\ -11+arg1 >= 0 /\ 25-arg1 > 0), cost: -10+arg1

Applied acceleration
Original rule:
f121_0_loop_LE -> f121_0_loop_LE : arg2'=arg2P2, arg1'=-1+arg1, (-25+arg1 > 0 /\ 31-arg1 > 0), cost: 1
New rule:
f121_0_loop_LE -> f121_0_loop_LE : arg2'=arg2P2, arg1'=-n0+arg1, (31-arg1 > 0 /\ -24-n0+arg1 > 0 /\ -1+n0 >= 0), cost: n0
Sub-proof via acceration calculus written to file:///tmp/tmpnam_JnOLPA.txt

Applied instantiation
Original rule:
f121_0_loop_LE -> f121_0_loop_LE : arg2'=arg2P2, arg1'=-n0+arg1, (31-arg1 > 0 /\ -24-n0+arg1 > 0 /\ -1+n0 >= 0), cost: n0
New rule:
f121_0_loop_LE -> f121_0_loop_LE : arg2'=arg2P2, arg1'=25, (1 > 0 /\ 31-arg1 > 0 /\ -26+arg1 >= 0), cost: -25+arg1

Applied chaining
First rule:
f121_0_loop_LE -> f121_0_loop_LE : arg2'=arg2P4, arg1'=29, -25+arg1 == 0, cost: 1
Second rule:
f121_0_loop_LE -> f121_0_loop_LE : arg2'=arg2P2, arg1'=25, (1 > 0 /\ 31-arg1 > 0 /\ -26+arg1 >= 0), cost: -25+arg1
New rule:
f121_0_loop_LE -> f121_0_loop_LE : arg2'=arg2P2, arg1'=25, -25+arg1 == 0, cost: 5

Applied nonterm
Original rule:
f121_0_loop_LE -> f121_0_loop_LE : arg2'=arg2P2, arg1'=25, -25+arg1 == 0, cost: 5
New rule:
f121_0_loop_LE -> [3] : (-25+arg1 >= 0 /\ 25-arg1 >= 0 /\ -1+n6 >= 0), cost: NONTERM
Sub-proof via acceration calculus written to file:///tmp/tmpnam_hMBnJM.txt

Applied chaining
First rule:
f121_0_loop_LE -> f121_0_loop_LE : arg2'=arg2P2, arg1'=25, (1 > 0 /\ 31-arg1 > 0 /\ -26+arg1 >= 0), cost: -25+arg1
Second rule:
f121_0_loop_LE -> [3] : (-25+arg1 >= 0 /\ 25-arg1 >= 0 /\ -1+n6 >= 0), cost: NONTERM
New rule:
f121_0_loop_LE -> [3] : (0 >= 0 /\ 1 > 0 /\ 31-arg1 > 0 /\ -26+arg1 >= 0 /\ -1+n6 >= 0), cost: NONTERM

Applied chaining
First rule:
f121_0_loop_LE -> f121_0_loop_LE : arg2'=arg2P2, arg1'=25, (1 > 0 /\ 31-arg1 > 0 /\ -26+arg1 >= 0), cost: -25+arg1
Second rule:
f121_0_loop_LE -> f121_0_loop_LE : arg2'=arg2P4, arg1'=29, -25+arg1 == 0, cost: 1
New rule:
f121_0_loop_LE -> f121_0_loop_LE : arg2'=arg2P4, arg1'=29, (31-arg1 > 0 /\ -26+arg1 >= 0), cost: -24+arg1

Applied nonterm
Original rule:
f121_0_loop_LE -> f121_0_loop_LE : arg2'=arg2P4, arg1'=29, (31-arg1 > 0 /\ -26+arg1 >= 0), cost: -24+arg1
New rule:
f121_0_loop_LE -> [3] : (-1+n7 >= 0 /\ 31-arg1 > 0 /\ -26+arg1 >= 0), cost: NONTERM
Sub-proof via acceration calculus written to file:///tmp/tmpnam_PminFd.txt

Applied chaining
First rule:
f121_0_loop_LE -> f121_0_loop_LE : arg2'=arg2P4, arg1'=29, -25+arg1 == 0, cost: 1
Second rule:
f121_0_loop_LE -> [3] : (-1+n7 >= 0 /\ 31-arg1 > 0 /\ -26+arg1 >= 0), cost: NONTERM
New rule:
f121_0_loop_LE -> [3] : (-25+arg1 == 0 /\ -1+n7 >= 0 /\ 3 >= 0 /\ 2 > 0), cost: NONTERM

Applied simplification
Original rule:
f121_0_loop_LE -> f121_0_loop_LE : arg2'=arg2P1, arg1'=10, (1 > 0 /\ -11+arg1 >= 0 /\ 25-arg1 > 0), cost: -10+arg1
New rule:
f121_0_loop_LE -> f121_0_loop_LE : arg2'=arg2P1, arg1'=10, (-11+arg1 >= 0 /\ 25-arg1 > 0), cost: -10+arg1

Applied simplification
Original rule:
f121_0_loop_LE -> f121_0_loop_LE : arg2'=arg2P2, arg1'=25, (1 > 0 /\ 31-arg1 > 0 /\ -26+arg1 >= 0), cost: -25+arg1
New rule:
f121_0_loop_LE -> f121_0_loop_LE : arg2'=arg2P2, arg1'=25, (31-arg1 > 0 /\ -26+arg1 >= 0), cost: -25+arg1

Applied simplification
Original rule:
f121_0_loop_LE -> [3] : (-25+arg1 >= 0 /\ 25-arg1 >= 0 /\ -1+n6 >= 0), cost: NONTERM
New rule:
f121_0_loop_LE -> [3] : (-25+arg1 <= 0 /\ -25+arg1 >= 0 /\ -1+n6 >= 0), cost: NONTERM

Applied simplification
Original rule:
f121_0_loop_LE -> [3] : (0 >= 0 /\ 1 > 0 /\ 31-arg1 > 0 /\ -26+arg1 >= 0 /\ -1+n6 >= 0), cost: NONTERM
New rule:
f121_0_loop_LE -> [3] : (31-arg1 > 0 /\ -26+arg1 >= 0 /\ -1+n6 >= 0), cost: NONTERM

Applied simplification
Original rule:
f121_0_loop_LE -> [3] : (-25+arg1 == 0 /\ -1+n7 >= 0 /\ 3 >= 0 /\ 2 > 0), cost: NONTERM
New rule:
f121_0_loop_LE -> [3] : (-25+arg1 == 0 /\ -1+n7 >= 0), cost: NONTERM

Applied deletion
Removed the following rules: 7 8

Accelerated simple loops
Start location: __init
   6: f1_0_main_Load -> f121_0_loop_LE : arg2'=arg2P0, arg1'=20+arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
   9: f121_0_loop_LE -> f121_0_loop_LE : arg2'=arg2P3, arg1'=20, -30+arg1 > 0, cost: 1
  10: f121_0_loop_LE -> f121_0_loop_LE : arg2'=arg2P4, arg1'=29, -25+arg1 == 0, cost: 1
  15: f121_0_loop_LE -> [3] : (-1+n7 >= 0 /\ 31-arg1 > 0 /\ -26+arg1 >= 0), cost: NONTERM
  17: f121_0_loop_LE -> f121_0_loop_LE : arg2'=arg2P1, arg1'=10, (-11+arg1 >= 0 /\ 25-arg1 > 0), cost: -10+arg1
  18: f121_0_loop_LE -> f121_0_loop_LE : arg2'=arg2P2, arg1'=25, (31-arg1 > 0 /\ -26+arg1 >= 0), cost: -25+arg1
  19: f121_0_loop_LE -> [3] : (-25+arg1 <= 0 /\ -25+arg1 >= 0 /\ -1+n6 >= 0), cost: NONTERM
  20: f121_0_loop_LE -> [3] : (31-arg1 > 0 /\ -26+arg1 >= 0 /\ -1+n6 >= 0), cost: NONTERM
  21: f121_0_loop_LE -> [3] : (-25+arg1 == 0 /\ -1+n7 >= 0), cost: NONTERM
   5: __init -> f1_0_main_Load : arg2'=arg2P5, arg1'=arg1P5, TRUE, cost: 1


Applied chaining
First rule:
f1_0_main_Load -> f121_0_loop_LE : arg2'=arg2P0, arg1'=20+arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
Second rule:
f121_0_loop_LE -> f121_0_loop_LE : arg2'=arg2P3, arg1'=20, -30+arg1 > 0, cost: 1
New rule:
f1_0_main_Load -> f121_0_loop_LE : arg2'=arg2P3, arg1'=20, (arg1 > 0 /\ -10+arg2 > 0), cost: 2

Applied chaining
First rule:
f1_0_main_Load -> f121_0_loop_LE : arg2'=arg2P0, arg1'=20+arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
Second rule:
f121_0_loop_LE -> f121_0_loop_LE : arg2'=arg2P4, arg1'=29, -25+arg1 == 0, cost: 1
New rule:
f1_0_main_Load -> f121_0_loop_LE : arg2'=arg2P4, arg1'=29, (-5+arg2 == 0 /\ arg1 > 0), cost: 2

Applied chaining
First rule:
f1_0_main_Load -> f121_0_loop_LE : arg2'=arg2P0, arg1'=20+arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
Second rule:
f121_0_loop_LE -> [3] : (-1+n7 >= 0 /\ 31-arg1 > 0 /\ -26+arg1 >= 0), cost: NONTERM
New rule:
f1_0_main_Load -> [3] : (-6+arg2 >= 0 /\ arg1 > 0 /\ 11-arg2 > 0), cost: NONTERM

Applied chaining
First rule:
f1_0_main_Load -> f121_0_loop_LE : arg2'=arg2P0, arg1'=20+arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
Second rule:
f121_0_loop_LE -> f121_0_loop_LE : arg2'=arg2P1, arg1'=10, (-11+arg1 >= 0 /\ 25-arg1 > 0), cost: -10+arg1
New rule:
f1_0_main_Load -> f121_0_loop_LE : arg2'=arg2P1, arg1'=10, (5-arg2 > 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 11+arg2

Applied chaining
First rule:
f1_0_main_Load -> f121_0_loop_LE : arg2'=arg2P0, arg1'=20+arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
Second rule:
f121_0_loop_LE -> f121_0_loop_LE : arg2'=arg2P2, arg1'=25, (31-arg1 > 0 /\ -26+arg1 >= 0), cost: -25+arg1
New rule:
f1_0_main_Load -> f121_0_loop_LE : arg2'=arg2P2, arg1'=25, (-6+arg2 >= 0 /\ arg1 > 0 /\ 11-arg2 > 0), cost: -4+arg2

Applied chaining
First rule:
f1_0_main_Load -> f121_0_loop_LE : arg2'=arg2P0, arg1'=20+arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
Second rule:
f121_0_loop_LE -> [3] : (-25+arg1 <= 0 /\ -25+arg1 >= 0 /\ -1+n6 >= 0), cost: NONTERM
New rule:
f1_0_main_Load -> [3] : (-5+arg2 == 0 /\ arg1 > 0), cost: NONTERM

Applied chaining
First rule:
f1_0_main_Load -> f121_0_loop_LE : arg2'=arg2P0, arg1'=20+arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
Second rule:
f121_0_loop_LE -> [3] : (31-arg1 > 0 /\ -26+arg1 >= 0 /\ -1+n6 >= 0), cost: NONTERM
New rule:
f1_0_main_Load -> [3] : (-6+arg2 >= 0 /\ arg1 > 0 /\ 11-arg2 > 0), cost: NONTERM

Applied chaining
First rule:
f1_0_main_Load -> f121_0_loop_LE : arg2'=arg2P0, arg1'=20+arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
Second rule:
f121_0_loop_LE -> [3] : (-25+arg1 == 0 /\ -1+n7 >= 0), cost: NONTERM
New rule:
f1_0_main_Load -> [3] : (-5+arg2 == 0 /\ arg1 > 0), cost: NONTERM

Applied deletion
Removed the following rules: 9 10 15 17 18 19 20 21

Chained accelerated rules with incoming rules
Start location: __init
   6: f1_0_main_Load -> f121_0_loop_LE : arg2'=arg2P0, arg1'=20+arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
  22: f1_0_main_Load -> f121_0_loop_LE : arg2'=arg2P3, arg1'=20, (arg1 > 0 /\ -10+arg2 > 0), cost: 2
  23: f1_0_main_Load -> f121_0_loop_LE : arg2'=arg2P4, arg1'=29, (-5+arg2 == 0 /\ arg1 > 0), cost: 2
  24: f1_0_main_Load -> [3] : (-6+arg2 >= 0 /\ arg1 > 0 /\ 11-arg2 > 0), cost: NONTERM
  25: f1_0_main_Load -> f121_0_loop_LE : arg2'=arg2P1, arg1'=10, (5-arg2 > 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 11+arg2
  26: f1_0_main_Load -> f121_0_loop_LE : arg2'=arg2P2, arg1'=25, (-6+arg2 >= 0 /\ arg1 > 0 /\ 11-arg2 > 0), cost: -4+arg2
  27: f1_0_main_Load -> [3] : (-5+arg2 == 0 /\ arg1 > 0), cost: NONTERM
   5: __init -> f1_0_main_Load : arg2'=arg2P5, arg1'=arg1P5, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
  24: f1_0_main_Load -> [3] : (-6+arg2 >= 0 /\ arg1 > 0 /\ 11-arg2 > 0), cost: NONTERM
  27: f1_0_main_Load -> [3] : (-5+arg2 == 0 /\ arg1 > 0), cost: NONTERM
   5: __init -> f1_0_main_Load : arg2'=arg2P5, arg1'=arg1P5, TRUE, cost: 1


Eliminating location f1_0_main_Load by chaining:

Applied chaining
First rule:
__init -> f1_0_main_Load : arg2'=arg2P5, arg1'=arg1P5, TRUE, cost: 1
Second rule:
f1_0_main_Load -> [3] : (-6+arg2 >= 0 /\ arg1 > 0 /\ 11-arg2 > 0), cost: NONTERM
New rule:
__init -> [3] : (-6+arg2P5 >= 0 /\ arg1P5 > 0 /\ 11-arg2P5 > 0), cost: NONTERM

Applied chaining
First rule:
__init -> f1_0_main_Load : arg2'=arg2P5, arg1'=arg1P5, TRUE, cost: 1
Second rule:
f1_0_main_Load -> [3] : (-5+arg2 == 0 /\ arg1 > 0), cost: NONTERM
New rule:
__init -> [3] : (-5+arg2P5 == 0 /\ arg1P5 > 0), cost: NONTERM

Applied deletion
Removed the following rules: 5 24 27

Eliminated locations on tree-shaped paths
Start location: __init
  28: __init -> [3] : (-6+arg2P5 >= 0 /\ arg1P5 > 0 /\ 11-arg2P5 > 0), cost: NONTERM
  29: __init -> [3] : (-5+arg2P5 == 0 /\ arg1P5 > 0), cost: NONTERM


Computing asymptotic complexity
Proved nontermination of rule 28 via SMT.

Proved the following lower bound
Complexity:  Nonterm
Cpx degree: Nonterm

Solved cost: NONTERM
Rule cost:   NONTERM
Rule guard:  (-6+arg2P5 >= 0 /\ arg1P5 > 0 /\ 11-arg2P5 > 0)
