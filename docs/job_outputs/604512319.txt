unknown

Initial ITS

Start location: [1]
Program variables: c x y
   0: [1] -> [2] : x'=nondet, T, cost: 1
   1: [2] -> [3] : y'=nondet1, T, cost: 1
   2: [3] -> [4] : c'=0, T, cost: 1
   3: [4] -> [5] : (-y+x == 0 /\ x > 0), cost: 1
  11: [4] -> [11] : (-y+x < 0 \/ -y+x > 0 \/ x <= 0), cost: 1
   4: [5] -> [6] : y > 0, cost: 1
   9: [5] -> [10] : y <= 0, cost: 1
   5: [6] -> [7] : x'=-1+x, T, cost: 1
   6: [7] -> [8] : y'=-1+y, T, cost: 1
   7: [8] -> [9] : c'=1+c, T, cost: 1
   8: [9] -> [5] : T, cost: 1
  10: [10] -> [4] : T, cost: 1

Chained Linear Paths

Start location: [1]
Program variables: c x y
  13: [1] -> [4] : c'=0, x'=nondet, y'=nondet1, T, cost: 1
   3: [4] -> [5] : (-y+x == 0 /\ x > 0), cost: 1
  11: [4] -> [11] : (-y+x < 0 \/ -y+x > 0 \/ x <= 0), cost: 1
  15: [5] -> [4] : y <= 0, cost: 1
  18: [5] -> [5] : c'=1+c, x'=-1+x, y'=-1+y, y > 0, cost: 1

	Eliminating location [2] by chaining:

	Applied chaining

	First rule:
	[1] -> [2] : x'=nondet, T, cost: 1
	Second rule:
	[2] -> [3] : y'=nondet1, T, cost: 1
	New rule:
	[1] -> [3] : x'=nondet, y'=nondet1, T, cost: 1
	
	Applied deletion

	Removed the following rules: 0 1
	
	Eliminating location [3] by chaining:

	Applied chaining

	First rule:
	[1] -> [3] : x'=nondet, y'=nondet1, T, cost: 1
	Second rule:
	[3] -> [4] : c'=0, T, cost: 1
	New rule:
	[1] -> [4] : c'=0, x'=nondet, y'=nondet1, T, cost: 1
	
	Applied deletion

	Removed the following rules: 2 12
	
	Eliminating location [6] by chaining:

	Applied chaining

	First rule:
	[5] -> [6] : y > 0, cost: 1
	Second rule:
	[6] -> [7] : x'=-1+x, T, cost: 1
	New rule:
	[5] -> [7] : x'=-1+x, y > 0, cost: 1
	
	Applied deletion

	Removed the following rules: 4 5
	
	Eliminating location [10] by chaining:

	Applied chaining

	First rule:
	[5] -> [10] : y <= 0, cost: 1
	Second rule:
	[10] -> [4] : T, cost: 1
	New rule:
	[5] -> [4] : y <= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 9 10
	
	Eliminating location [7] by chaining:

	Applied chaining

	First rule:
	[5] -> [7] : x'=-1+x, y > 0, cost: 1
	Second rule:
	[7] -> [8] : y'=-1+y, T, cost: 1
	New rule:
	[5] -> [8] : x'=-1+x, y'=-1+y, y > 0, cost: 1
	
	Applied deletion

	Removed the following rules: 6 14
	
	Eliminating location [8] by chaining:

	Applied chaining

	First rule:
	[5] -> [8] : x'=-1+x, y'=-1+y, y > 0, cost: 1
	Second rule:
	[8] -> [9] : c'=1+c, T, cost: 1
	New rule:
	[5] -> [9] : c'=1+c, x'=-1+x, y'=-1+y, y > 0, cost: 1
	
	Applied deletion

	Removed the following rules: 7 16
	
	Eliminating location [9] by chaining:

	Applied chaining

	First rule:
	[5] -> [9] : c'=1+c, x'=-1+x, y'=-1+y, y > 0, cost: 1
	Second rule:
	[9] -> [5] : T, cost: 1
	New rule:
	[5] -> [5] : c'=1+c, x'=-1+x, y'=-1+y, y > 0, cost: 1
	
	Applied deletion

	Removed the following rules: 8 17

Step with 13

	Trace

	13[T]
	
	Blocked

	[{}, {}]

Step with 11

	Trace

	13[T], 11[(-y+x > 0)]
	
	Blocked

	[{}, {}, {}]

Backtrack

	Trace

	13[T]
	
	Blocked

	[{}, {11[-y+x > 0]}]

Step with 11

	Trace

	13[T], 11[(-y+x < 0)]
	
	Blocked

	[{}, {11[-y+x > 0]}, {}]

Backtrack

	Trace

	13[T]
	
	Blocked

	[{}, {11[(-y+x < 0 /\ -y+x > 0)]}]

Step with 11

	Trace

	13[T], 11[(x <= 0)]
	
	Blocked

	[{}, {11[(-y+x < 0 /\ -y+x > 0)]}, {}]

Backtrack

	Trace

	13[T]
	
	Blocked

	[{}, {11[(-y+x < 0 /\ -y+x > 0 /\ x <= 0)]}]

Step with 3

	Trace

	13[T], 3[(-y+x == 0 /\ x > 0)]
	
	Blocked

	[{}, {11[T]}, {}]

Step with 18

	Trace

	13[T], 3[(-y+x == 0 /\ x > 0)], 18[(y > 0)]
	
	Blocked

	[{}, {11[T]}, {15[T]}, {}]

Accelerate

Start location: [1]
Program variables: c x y
  13: [1] -> [4] : c'=0, x'=nondet, y'=nondet1, T, cost: 1
   3: [4] -> [5] : (-y+x == 0 /\ x > 0), cost: 1
  11: [4] -> [11] : (-y+x < 0 \/ -y+x > 0 \/ x <= 0), cost: 1
  15: [5] -> [4] : y <= 0, cost: 1
  18: [5] -> [5] : c'=1+c, x'=-1+x, y'=-1+y, y > 0, cost: 1
  19: [5] -> [5] : c'=c+n, x'=-n+x, y'=-n+y, (-1+n >= 0 /\ 1-n+y > 0), cost: 1

	Loop Acceleration

	Original rule:
	[5] -> [5] : c'=1+c, x'=-1+x, y'=-1+y, (y > 0), cost: 1
	New rule:
	[5] -> [5] : c'=c+n, x'=-n+x, y'=-n+y, (-1+n >= 0 /\ 1-n+y > 0), cost: 1

		y > 0 [0]: montonic decrease yields 1-n+y > 0
		
		y > 0 [1]: eventual increase yields (1 <= 0 /\ y > 0)
		
		Replacement map: {y > 0 -> 1-n+y > 0}

	Trace

	13[T], 3[(-y+x == 0 /\ x > 0)], 19[(-1+n >= 0 /\ 1-n+y > 0)]
	
	Blocked

	[{}, {11[T]}, {15[T]}, {18[T], 19[T]}]

Step with 15

	Trace

	13[T], 3[(-y+x == 0 /\ x > 0)], 19[(-1+n >= 0 /\ 1-n+y > 0)], 15[(y <= 0)]
	
	Blocked

	[{}, {11[T]}, {15[T]}, {18[T], 19[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 11

	Trace

	13[T], 3[(-y+x == 0 /\ x > 0)], 19[(-1+n >= 0 /\ 1-n+y > 0)], 15[(y <= 0)], 11[(x <= 0)]
	
	Blocked

	[{}, {11[T]}, {15[T]}, {18[T], 19[T]}, {3[T]}, {}]

Backtrack

	Trace

	13[T], 3[(-y+x == 0 /\ x > 0)], 19[(-1+n >= 0 /\ 1-n+y > 0)], 15[(y <= 0)]
	
	Blocked

	[{}, {11[T]}, {15[T]}, {18[T], 19[T]}, {3[T], 11[x <= 0]}]

Backtrack

	Trace

	13[T], 3[(-y+x == 0 /\ x > 0)], 19[(-1+n >= 0 /\ 1-n+y > 0)]
	
	Blocked

	[{}, {11[T]}, {15[T]}, {15[T], 18[T], 19[T]}]

Backtrack

	Trace

	13[T], 3[(-y+x == 0 /\ x > 0)]
	
	Blocked

	[{}, {11[T]}, {15[T], 19[T]}]

Step with 18

	Trace

	13[T], 3[(-y+x == 0 /\ x > 0)], 18[(y > 0)]
	
	Blocked

	[{}, {11[T]}, {15[T], 19[T]}, {}]

Covered

	Trace

	13[T], 3[(-y+x == 0 /\ x > 0)]
	
	Blocked

	[{}, {11[T]}, {15[T], 18[T], 19[T]}]

Backtrack

	Trace

	13[T]
	
	Blocked

	[{}, {3[T], 11[T]}]

Backtrack

	Trace

	Blocked

	[{13[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
