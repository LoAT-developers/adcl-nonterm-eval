NO

Initial ITS
Start location: __init
   0: f1_0_main_Load -> f71_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2 > 0 /\ arg1 > 0 /\ arg2-arg1P0 == 0), cost: 1
   1: f71_0_main_LE -> f47_0_f_LE : arg2'=arg2P1, arg1'=arg1P1, (arg1-arg1P1 == 0 /\ arg1 > 0), cost: 1
   2: f71_0_main_LE -> f71_0_main_LE : arg2'=arg2P2, arg1'=arg1P2, (arg1 > 0 /\ 1+arg1-arg1P2 == 0), cost: 1
   3: f47_0_f_LE -> f47_0_f_LE : arg2'=arg2P3, arg1'=arg1P3, (-1-arg1P3+arg1 == 0 /\ arg1 > 0 /\ -1 < 0), cost: 1
   4: __init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_Load -> f71_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2 > 0 /\ arg1 > 0 /\ arg2-arg1P0 == 0), cost: 1
New rule:
f1_0_main_Load -> f71_0_main_LE : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f71_0_main_LE -> f47_0_f_LE : arg2'=arg2P1, arg1'=arg1P1, (arg1-arg1P1 == 0 /\ arg1 > 0), cost: 1
New rule:
f71_0_main_LE -> f47_0_f_LE : arg2'=arg2P1, arg1 > 0, cost: 1

Applied preprocessing
Original rule:
f71_0_main_LE -> f71_0_main_LE : arg2'=arg2P2, arg1'=arg1P2, (arg1 > 0 /\ 1+arg1-arg1P2 == 0), cost: 1
New rule:
f71_0_main_LE -> f71_0_main_LE : arg2'=arg2P2, arg1'=1+arg1, arg1 > 0, cost: 1

Applied preprocessing
Original rule:
f47_0_f_LE -> f47_0_f_LE : arg2'=arg2P3, arg1'=arg1P3, (-1-arg1P3+arg1 == 0 /\ arg1 > 0 /\ -1 < 0), cost: 1
New rule:
f47_0_f_LE -> f47_0_f_LE : arg2'=arg2P3, arg1'=-1+arg1, arg1 > 0, cost: 1

Simplified rules
Start location: __init
   5: f1_0_main_Load -> f71_0_main_LE : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
   6: f71_0_main_LE -> f47_0_f_LE : arg2'=arg2P1, arg1 > 0, cost: 1
   7: f71_0_main_LE -> f71_0_main_LE : arg2'=arg2P2, arg1'=1+arg1, arg1 > 0, cost: 1
   8: f47_0_f_LE -> f47_0_f_LE : arg2'=arg2P3, arg1'=-1+arg1, arg1 > 0, cost: 1
   4: __init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, TRUE, cost: 1


Applied nonterm
Original rule:
f71_0_main_LE -> f71_0_main_LE : arg2'=arg2P2, arg1'=1+arg1, arg1 > 0, cost: 1
New rule:
f71_0_main_LE -> [4] : (-1+n >= 0 /\ arg1 > 0), cost: NONTERM
Sub-proof via acceration calculus written to file:///tmp/tmpnam_gCbDLI.txt

Applied deletion
Removed the following rules: 7

Applied acceleration
Original rule:
f47_0_f_LE -> f47_0_f_LE : arg2'=arg2P3, arg1'=-1+arg1, arg1 > 0, cost: 1
New rule:
f47_0_f_LE -> f47_0_f_LE : arg2'=arg2P3, arg1'=-n0+arg1, (1-n0+arg1 > 0 /\ -1+n0 >= 0), cost: n0
Sub-proof via acceration calculus written to file:///tmp/tmpnam_PCJCAi.txt

Applied instantiation
Original rule:
f47_0_f_LE -> f47_0_f_LE : arg2'=arg2P3, arg1'=-n0+arg1, (1-n0+arg1 > 0 /\ -1+n0 >= 0), cost: n0
New rule:
f47_0_f_LE -> f47_0_f_LE : arg2'=arg2P3, arg1'=0, (1 > 0 /\ -1+arg1 >= 0), cost: arg1

Applied simplification
Original rule:
f47_0_f_LE -> f47_0_f_LE : arg2'=arg2P3, arg1'=0, (1 > 0 /\ -1+arg1 >= 0), cost: arg1
New rule:
f47_0_f_LE -> f47_0_f_LE : arg2'=arg2P3, arg1'=0, -1+arg1 >= 0, cost: arg1

Applied deletion
Removed the following rules: 8

Accelerated simple loops
Start location: __init
   5: f1_0_main_Load -> f71_0_main_LE : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
   6: f71_0_main_LE -> f47_0_f_LE : arg2'=arg2P1, arg1 > 0, cost: 1
   9: f71_0_main_LE -> [4] : (-1+n >= 0 /\ arg1 > 0), cost: NONTERM
  11: f47_0_f_LE -> f47_0_f_LE : arg2'=arg2P3, arg1'=0, -1+arg1 >= 0, cost: arg1
   4: __init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, TRUE, cost: 1


Applied chaining
First rule:
f1_0_main_Load -> f71_0_main_LE : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
Second rule:
f71_0_main_LE -> [4] : (-1+n >= 0 /\ arg1 > 0), cost: NONTERM
New rule:
f1_0_main_Load -> [4] : (arg2 > 0 /\ arg1 > 0), cost: NONTERM

Applied deletion
Removed the following rules: 9

Applied chaining
First rule:
f71_0_main_LE -> f47_0_f_LE : arg2'=arg2P1, arg1 > 0, cost: 1
Second rule:
f47_0_f_LE -> f47_0_f_LE : arg2'=arg2P3, arg1'=0, -1+arg1 >= 0, cost: arg1
New rule:
f71_0_main_LE -> f47_0_f_LE : arg2'=arg2P3, arg1'=0, -1+arg1 >= 0, cost: 1+arg1

Applied deletion
Removed the following rules: 11

Chained accelerated rules with incoming rules
Start location: __init
   5: f1_0_main_Load -> f71_0_main_LE : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
  12: f1_0_main_Load -> [4] : (arg2 > 0 /\ arg1 > 0), cost: NONTERM
   6: f71_0_main_LE -> f47_0_f_LE : arg2'=arg2P1, arg1 > 0, cost: 1
  13: f71_0_main_LE -> f47_0_f_LE : arg2'=arg2P3, arg1'=0, -1+arg1 >= 0, cost: 1+arg1
   4: __init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
  12: f1_0_main_Load -> [4] : (arg2 > 0 /\ arg1 > 0), cost: NONTERM
   4: __init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, TRUE, cost: 1


Eliminating location f1_0_main_Load by chaining:

Applied chaining
First rule:
__init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, TRUE, cost: 1
Second rule:
f1_0_main_Load -> [4] : (arg2 > 0 /\ arg1 > 0), cost: NONTERM
New rule:
__init -> [4] : (arg2P4 > 0 /\ arg1P4 > 0), cost: NONTERM

Applied deletion
Removed the following rules: 4 12

Eliminated locations on linear paths
Start location: __init
  14: __init -> [4] : (arg2P4 > 0 /\ arg1P4 > 0), cost: NONTERM


Computing asymptotic complexity
Proved nontermination of rule 14 via SMT.

Proved the following lower bound
Complexity:  Nonterm
Cpx degree: Nonterm

Solved cost: NONTERM
Rule cost:   NONTERM
Rule guard:  (arg2P4 > 0 /\ arg1P4 > 0)
