NO

Initial ITS

Start location: __init
Program variables: arg1 arg2 arg3 arg4
   0: f1_0_main_ConstantStackPush -> f79_0_loop_GE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, (2-arg3p1 == 0 /\ 2-arg1p1 == 0 /\ -arg4p1 == 0 /\ 2-arg2p1 == 0), cost: 1
   1: f79_0_loop_GE -> f100_0_loop_InvokeMethod : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, arg4'=arg4p2, (-arg3p2+arg4 == 0 /\ arg2 > 0 /\ -arg2+arg4 > 0 /\ 4-arg2p2+arg2 == 0 /\ arg2-arg3 == 0 /\ -arg1p2+arg1 == 0), cost: 1
   2: f79_0_loop_GE -> f100_0_loop_InvokeMethod : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, arg4'=arg4p3, (1-arg3p3+arg4 == 0 /\ arg2 > 0 /\ -arg2+arg4 <= 0 /\ 1+arg4 > 0 /\ 2+arg2-arg2p3 == 0 /\ arg2-arg3 == 0 /\ -arg1p3+arg1 == 0), cost: 1
   3: f100_0_loop_InvokeMethod -> f79_0_loop_GE : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, arg4'=arg4p4, (arg2-arg1p4 == 0 /\ -1+arg2 > 0 /\ arg2-arg3p4 == 0 /\ arg3 > 0 /\ arg2-arg2p4 == 0 /\ -1+arg1 > 0 /\ -arg4p4+arg3 == 0), cost: 1
   4: __init -> f1_0_main_ConstantStackPush : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, arg4'=arg4p5, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2 arg3 arg4
   1: f79_0_loop_GE -> f100_0_loop_InvokeMethod : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, arg4'=arg4p2, (-arg3p2+arg4 == 0 /\ arg2 > 0 /\ -arg2+arg4 > 0 /\ 4-arg2p2+arg2 == 0 /\ arg2-arg3 == 0 /\ -arg1p2+arg1 == 0), cost: 1
   2: f79_0_loop_GE -> f100_0_loop_InvokeMethod : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, arg4'=arg4p3, (1-arg3p3+arg4 == 0 /\ arg2 > 0 /\ -arg2+arg4 <= 0 /\ 1+arg4 > 0 /\ 2+arg2-arg2p3 == 0 /\ arg2-arg3 == 0 /\ -arg1p3+arg1 == 0), cost: 1
   3: f100_0_loop_InvokeMethod -> f79_0_loop_GE : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, arg4'=arg4p4, (arg2-arg1p4 == 0 /\ -1+arg2 > 0 /\ arg2-arg3p4 == 0 /\ arg3 > 0 /\ arg2-arg2p4 == 0 /\ -1+arg1 > 0 /\ -arg4p4+arg3 == 0), cost: 1
   5: __init -> f79_0_loop_GE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, (2-arg3p1 == 0 /\ 2-arg1p1 == 0 /\ -arg4p1 == 0 /\ 2-arg2p1 == 0), cost: 1

	Eliminating location f1_0_main_ConstantStackPush by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_ConstantStackPush : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, arg4'=arg4p5, T, cost: 1
	Second rule:
	f1_0_main_ConstantStackPush -> f79_0_loop_GE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, (2-arg3p1 == 0 /\ 2-arg1p1 == 0 /\ -arg4p1 == 0 /\ 2-arg2p1 == 0), cost: 1
	New rule:
	__init -> f79_0_loop_GE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, (2-arg3p1 == 0 /\ 2-arg1p1 == 0 /\ -arg4p1 == 0 /\ 2-arg2p1 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 4

Simplified Transitions

Start location: __init
Program variables: arg1 arg2 arg3 arg4
   6: f79_0_loop_GE -> f100_0_loop_InvokeMethod : arg2'=4+arg2, arg3'=arg4, arg4'=arg4p2, (arg2 > 0 /\ -arg2+arg4 > 0 /\ arg2-arg3 == 0), cost: 1
   7: f79_0_loop_GE -> f100_0_loop_InvokeMethod : arg2'=2+arg2, arg3'=1+arg4, arg4'=arg4p3, (arg2 > 0 /\ -arg2+arg4 <= 0 /\ 1+arg4 > 0 /\ arg2-arg3 == 0), cost: 1
   8: f100_0_loop_InvokeMethod -> f79_0_loop_GE : arg1'=arg2, arg3'=arg2, arg4'=arg3, (-1+arg2 > 0 /\ arg3 > 0 /\ -1+arg1 > 0), cost: 1
   9: __init -> f79_0_loop_GE : arg1'=2, arg2'=2, arg3'=2, arg4'=0, T, cost: 1

	Propagated Equalities

	Original rule:
	f79_0_loop_GE -> f100_0_loop_InvokeMethod : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, arg4'=arg4p2, (-arg3p2+arg4 == 0 /\ arg2 > 0 /\ -arg2+arg4 > 0 /\ 4-arg2p2+arg2 == 0 /\ arg2-arg3 == 0 /\ -arg1p2+arg1 == 0), cost: 1
	New rule:
	f79_0_loop_GE -> f100_0_loop_InvokeMethod : arg1'=arg1, arg2'=4+arg2, arg3'=arg4, arg4'=arg4p2, (0 == 0 /\ arg2 > 0 /\ -arg2+arg4 > 0 /\ arg2-arg3 == 0), cost: 1
	
		propagated equality arg3p2 = arg4
		
		propagated equality arg2p2 = 4+arg2
		
		propagated equality arg1p2 = arg1
		
	Simplified Guard

	Original rule:
	f79_0_loop_GE -> f100_0_loop_InvokeMethod : arg1'=arg1, arg2'=4+arg2, arg3'=arg4, arg4'=arg4p2, (0 == 0 /\ arg2 > 0 /\ -arg2+arg4 > 0 /\ arg2-arg3 == 0), cost: 1
	New rule:
	f79_0_loop_GE -> f100_0_loop_InvokeMethod : arg1'=arg1, arg2'=4+arg2, arg3'=arg4, arg4'=arg4p2, (arg2 > 0 /\ -arg2+arg4 > 0 /\ arg2-arg3 == 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f79_0_loop_GE -> f100_0_loop_InvokeMethod : arg1'=arg1, arg2'=4+arg2, arg3'=arg4, arg4'=arg4p2, (arg2 > 0 /\ -arg2+arg4 > 0 /\ arg2-arg3 == 0), cost: 1
	New rule:
	f79_0_loop_GE -> f100_0_loop_InvokeMethod : arg2'=4+arg2, arg3'=arg4, arg4'=arg4p2, (arg2 > 0 /\ -arg2+arg4 > 0 /\ arg2-arg3 == 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f79_0_loop_GE -> f100_0_loop_InvokeMethod : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, arg4'=arg4p3, (1-arg3p3+arg4 == 0 /\ arg2 > 0 /\ -arg2+arg4 <= 0 /\ 1+arg4 > 0 /\ 2+arg2-arg2p3 == 0 /\ arg2-arg3 == 0 /\ -arg1p3+arg1 == 0), cost: 1
	New rule:
	f79_0_loop_GE -> f100_0_loop_InvokeMethod : arg1'=arg1, arg2'=2+arg2, arg3'=1+arg4, arg4'=arg4p3, (0 == 0 /\ arg2 > 0 /\ -arg2+arg4 <= 0 /\ 1+arg4 > 0 /\ arg2-arg3 == 0), cost: 1
	
		propagated equality arg3p3 = 1+arg4
		
		propagated equality arg2p3 = 2+arg2
		
		propagated equality arg1p3 = arg1
		
	Simplified Guard

	Original rule:
	f79_0_loop_GE -> f100_0_loop_InvokeMethod : arg1'=arg1, arg2'=2+arg2, arg3'=1+arg4, arg4'=arg4p3, (0 == 0 /\ arg2 > 0 /\ -arg2+arg4 <= 0 /\ 1+arg4 > 0 /\ arg2-arg3 == 0), cost: 1
	New rule:
	f79_0_loop_GE -> f100_0_loop_InvokeMethod : arg1'=arg1, arg2'=2+arg2, arg3'=1+arg4, arg4'=arg4p3, (arg2 > 0 /\ -arg2+arg4 <= 0 /\ 1+arg4 > 0 /\ arg2-arg3 == 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f79_0_loop_GE -> f100_0_loop_InvokeMethod : arg1'=arg1, arg2'=2+arg2, arg3'=1+arg4, arg4'=arg4p3, (arg2 > 0 /\ -arg2+arg4 <= 0 /\ 1+arg4 > 0 /\ arg2-arg3 == 0), cost: 1
	New rule:
	f79_0_loop_GE -> f100_0_loop_InvokeMethod : arg2'=2+arg2, arg3'=1+arg4, arg4'=arg4p3, (arg2 > 0 /\ -arg2+arg4 <= 0 /\ 1+arg4 > 0 /\ arg2-arg3 == 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f100_0_loop_InvokeMethod -> f79_0_loop_GE : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, arg4'=arg4p4, (arg2-arg1p4 == 0 /\ -1+arg2 > 0 /\ arg2-arg3p4 == 0 /\ arg3 > 0 /\ arg2-arg2p4 == 0 /\ -1+arg1 > 0 /\ -arg4p4+arg3 == 0), cost: 1
	New rule:
	f100_0_loop_InvokeMethod -> f79_0_loop_GE : arg1'=arg2, arg2'=arg2, arg3'=arg2, arg4'=arg3, (0 == 0 /\ -1+arg2 > 0 /\ arg3 > 0 /\ -1+arg1 > 0), cost: 1
	
		propagated equality arg1p4 = arg2
		
		propagated equality arg3p4 = arg2
		
		propagated equality arg2p4 = arg2
		
		propagated equality arg4p4 = arg3
		
	Simplified Guard

	Original rule:
	f100_0_loop_InvokeMethod -> f79_0_loop_GE : arg1'=arg2, arg2'=arg2, arg3'=arg2, arg4'=arg3, (0 == 0 /\ -1+arg2 > 0 /\ arg3 > 0 /\ -1+arg1 > 0), cost: 1
	New rule:
	f100_0_loop_InvokeMethod -> f79_0_loop_GE : arg1'=arg2, arg2'=arg2, arg3'=arg2, arg4'=arg3, (-1+arg2 > 0 /\ arg3 > 0 /\ -1+arg1 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f100_0_loop_InvokeMethod -> f79_0_loop_GE : arg1'=arg2, arg2'=arg2, arg3'=arg2, arg4'=arg3, (-1+arg2 > 0 /\ arg3 > 0 /\ -1+arg1 > 0), cost: 1
	New rule:
	f100_0_loop_InvokeMethod -> f79_0_loop_GE : arg1'=arg2, arg3'=arg2, arg4'=arg3, (-1+arg2 > 0 /\ arg3 > 0 /\ -1+arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	__init -> f79_0_loop_GE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, (2-arg3p1 == 0 /\ 2-arg1p1 == 0 /\ -arg4p1 == 0 /\ 2-arg2p1 == 0), cost: 1
	New rule:
	__init -> f79_0_loop_GE : arg1'=2, arg2'=2, arg3'=2, arg4'=0, 0 == 0, cost: 1
	
		propagated equality arg3p1 = 2
		
		propagated equality arg1p1 = 2
		
		propagated equality arg4p1 = 0
		
		propagated equality arg2p1 = 2
		
	Simplified Guard

	Original rule:
	__init -> f79_0_loop_GE : arg1'=2, arg2'=2, arg3'=2, arg4'=0, 0 == 0, cost: 1
	New rule:
	__init -> f79_0_loop_GE : arg1'=2, arg2'=2, arg3'=2, arg4'=0, T, cost: 1

Step with 9

	Trace

	9[T]
	
	Blocked

	[{}, {}]

Step with 7

	Trace

	9[T], 7[(arg2 > 0 /\ -arg2+arg4 <= 0 /\ 1+arg4 > 0 /\ arg2-arg3 == 0)]
	
	Blocked

	[{}, {6[T]}, {}]

Step with 8

	Trace

	9[T], 7[(arg2 > 0 /\ -arg2+arg4 <= 0 /\ 1+arg4 > 0 /\ arg2-arg3 == 0)], 8[(-1+arg2 > 0 /\ arg3 > 0 /\ -1+arg1 > 0)]
	
	Blocked

	[{}, {6[T]}, {}, {}]

Nonterm

Start location: __init
Program variables: arg1 arg2 arg3 arg4
   6: f79_0_loop_GE -> f100_0_loop_InvokeMethod : arg2'=4+arg2, arg3'=arg4, arg4'=arg4p2, (arg2 > 0 /\ -arg2+arg4 > 0 /\ arg2-arg3 == 0), cost: 1
   7: f79_0_loop_GE -> f100_0_loop_InvokeMethod : arg2'=2+arg2, arg3'=1+arg4, arg4'=arg4p3, (arg2 > 0 /\ -arg2+arg4 <= 0 /\ 1+arg4 > 0 /\ arg2-arg3 == 0), cost: 1
  10: f79_0_loop_GE -> LoAT_sink : (arg2-arg4 >= 0 /\ arg2 > 0 /\ 1+arg4 > 0 /\ 1+arg2 > 0 /\ arg2-arg3 >= 0 /\ -1+n >= 0 /\ -1+arg1 > 0 /\ -arg2+arg3 >= 0), cost: NONTERM
  11: f79_0_loop_GE -> f79_0_loop_GE : arg1'=arg2+2*n, arg2'=arg2+2*n, arg3'=arg2+2*n, arg4'=n+arg4, (arg2-arg4 >= 0 /\ arg2 > 0 /\ 1+arg4 > 0 /\ 1+arg2 > 0 /\ arg2-arg3 >= 0 /\ -1+n >= 0 /\ -1+arg1 > 0 /\ -arg2+arg3 >= 0), cost: 1
   8: f100_0_loop_InvokeMethod -> f79_0_loop_GE : arg1'=arg2, arg3'=arg2, arg4'=arg3, (-1+arg2 > 0 /\ arg3 > 0 /\ -1+arg1 > 0), cost: 1
   9: __init -> f79_0_loop_GE : arg1'=2, arg2'=2, arg3'=2, arg4'=0, T, cost: 1

	Certificate of Non-Termination

	Original rule:
	f79_0_loop_GE -> f79_0_loop_GE : arg1'=2+arg2, arg2'=2+arg2, arg3'=2+arg2, arg4'=1+arg4, (arg2 > 0 /\ -arg2+arg4 <= 0 /\ 1+arg4 > 0 /\ 1+arg2 > 0 /\ arg2-arg3 == 0 /\ -1+arg1 > 0), cost: 1
	New rule:
	f79_0_loop_GE -> LoAT_sink : (arg2-arg4 >= 0 /\ arg2 > 0 /\ 1+arg4 > 0 /\ 1+arg2 > 0 /\ arg2-arg3 >= 0 /\ -1+n >= 0 /\ -1+arg1 > 0 /\ -arg2+arg3 >= 0), cost: NONTERM

		arg2-arg4 >= 0 [0]: monotonic increase yields arg2-arg4 >= 0
		
		arg2 > 0 [0]: monotonic increase yields arg2 > 0
		
		1+arg4 > 0 [0]: monotonic increase yields 1+arg4 > 0
		
		1+arg2 > 0 [0]: monotonic increase yields 1+arg2 > 0, dependencies: arg2 > 0
		
		arg2-arg3 >= 0 [0]: monotonic increase yields arg2-arg3 >= 0
		
		-1+arg1 > 0 [0]: monotonic increase yields -1+arg1 > 0, dependencies: arg2 > 0
		
		-arg2+arg3 >= 0 [0]: monotonic increase yields -arg2+arg3 >= 0
		
		Replacement map: {arg2-arg4 >= 0 -> arg2-arg4 >= 0, arg2 > 0 -> arg2 > 0, 1+arg4 > 0 -> 1+arg4 > 0, 1+arg2 > 0 -> 1+arg2 > 0, arg2-arg3 >= 0 -> arg2-arg3 >= 0, -1+arg1 > 0 -> -1+arg1 > 0, -arg2+arg3 >= 0 -> -arg2+arg3 >= 0}

	Loop Acceleration

	Original rule:
	f79_0_loop_GE -> f79_0_loop_GE : arg1'=2+arg2, arg2'=2+arg2, arg3'=2+arg2, arg4'=1+arg4, (arg2 > 0 /\ -arg2+arg4 <= 0 /\ 1+arg4 > 0 /\ 1+arg2 > 0 /\ arg2-arg3 == 0 /\ -1+arg1 > 0), cost: 1
	New rule:
	f79_0_loop_GE -> f79_0_loop_GE : arg1'=arg2+2*n, arg2'=arg2+2*n, arg3'=arg2+2*n, arg4'=n+arg4, (arg2-arg4 >= 0 /\ arg2 > 0 /\ 1+arg4 > 0 /\ 1+arg2 > 0 /\ arg2-arg3 >= 0 /\ -1+n >= 0 /\ -1+arg1 > 0 /\ -arg2+arg3 >= 0), cost: 1

		arg2-arg4 >= 0 [0]: monotonic increase yields arg2-arg4 >= 0
		
		arg2 > 0 [0]: monotonic increase yields arg2 > 0
		
		1+arg4 > 0 [0]: monotonic increase yields 1+arg4 > 0
		
		1+arg2 > 0 [0]: monotonic increase yields 1+arg2 > 0, dependencies: arg2 > 0
		
		arg2-arg3 >= 0 [0]: monotonic increase yields arg2-arg3 >= 0
		
		-1+arg1 > 0 [0]: monotonic increase yields -1+arg1 > 0, dependencies: arg2 > 0
		
		-arg2+arg3 >= 0 [0]: monotonic increase yields -arg2+arg3 >= 0
		
		Replacement map: {arg2-arg4 >= 0 -> arg2-arg4 >= 0, arg2 > 0 -> arg2 > 0, 1+arg4 > 0 -> 1+arg4 > 0, 1+arg2 > 0 -> 1+arg2 > 0, arg2-arg3 >= 0 -> arg2-arg3 >= 0, -1+arg1 > 0 -> -1+arg1 > 0, -arg2+arg3 >= 0 -> -arg2+arg3 >= 0}

Step with 10

	Trace

	9[T], 10[(arg2-arg4 >= 0 /\ arg2 > 0 /\ 1+arg4 > 0 /\ 1+arg2 > 0 /\ arg2-arg3 >= 0 /\ -1+n >= 0 /\ -1+arg1 > 0 /\ -arg2+arg3 >= 0)]
	
	Blocked

	[{}, {6[T]}, {10[T]}]

Refute

	Counterexample

	[ arg1=2 arg2=2 arg3=2 arg4=0 ] 9 [ arg1=arg1 arg2=arg2 arg3=arg3 arg4=arg4 ] 10
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
