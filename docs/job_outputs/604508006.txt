NO

Initial ITS

Start location: __init
Program variables: arg1 arg2 arg3
   0: f1_0_main_Load -> f50_0_increase_GE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (1+arg2 > 0 /\ -arg1p1+arg2 == 0 /\ arg1 > 0), cost: 1
   1: f50_0_increase_GE -> f79_0_increase_LE : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, (-arg2p2+arg1 == 0 /\ -10+arg1 < 0 /\ arg1-arg1p2 == 0 /\ -arg3p2+arg1 == 0), cost: 1
   2: f79_0_increase_LE -> f50_0_increase_GE : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, (1+arg1-arg1p3 == 0 /\ -arg3 == 0 /\ -arg2 == 0), cost: 1
   3: f79_0_increase_LE -> f79_0_increase_LE : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, (-arg3+arg2 == 0 /\ 1-arg3p4+arg2 == 0 /\ arg1-arg1p4 == 0 /\ 1-arg2p4+arg2 == 0 /\ arg2 > 0), cost: 1
   4: __init -> f1_0_main_Load : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2 arg3
   1: f50_0_increase_GE -> f79_0_increase_LE : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, (-arg2p2+arg1 == 0 /\ -10+arg1 < 0 /\ arg1-arg1p2 == 0 /\ -arg3p2+arg1 == 0), cost: 1
   2: f79_0_increase_LE -> f50_0_increase_GE : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, (1+arg1-arg1p3 == 0 /\ -arg3 == 0 /\ -arg2 == 0), cost: 1
   3: f79_0_increase_LE -> f79_0_increase_LE : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, (-arg3+arg2 == 0 /\ 1-arg3p4+arg2 == 0 /\ arg1-arg1p4 == 0 /\ 1-arg2p4+arg2 == 0 /\ arg2 > 0), cost: 1
   5: __init -> f50_0_increase_GE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (1+arg2p5 > 0 /\ -arg1p1+arg2p5 == 0 /\ arg1p5 > 0), cost: 1

	Eliminating location f1_0_main_Load by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_Load : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, T, cost: 1
	Second rule:
	f1_0_main_Load -> f50_0_increase_GE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (1+arg2 > 0 /\ -arg1p1+arg2 == 0 /\ arg1 > 0), cost: 1
	New rule:
	__init -> f50_0_increase_GE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (1+arg2p5 > 0 /\ -arg1p1+arg2p5 == 0 /\ arg1p5 > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 4

Simplified Transitions

Start location: __init
Program variables: arg1 arg2 arg3
   6: f50_0_increase_GE -> f79_0_increase_LE : arg2'=arg1, arg3'=arg1, -10+arg1 < 0, cost: 1
   7: f79_0_increase_LE -> f50_0_increase_GE : arg1'=1+arg1, arg2'=arg2p3, arg3'=arg3p3, (-arg3 == 0 /\ -arg2 == 0), cost: 1
   8: f79_0_increase_LE -> f79_0_increase_LE : arg2'=1+arg2, arg3'=1+arg2, (-arg3+arg2 == 0 /\ arg2 > 0), cost: 1
   9: __init -> f50_0_increase_GE : arg1'=arg2p5, arg2'=arg2p1, arg3'=arg3p1, (1+arg2p5 > 0), cost: 1

	Propagated Equalities

	Original rule:
	f50_0_increase_GE -> f79_0_increase_LE : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, (-arg2p2+arg1 == 0 /\ -10+arg1 < 0 /\ arg1-arg1p2 == 0 /\ -arg3p2+arg1 == 0), cost: 1
	New rule:
	f50_0_increase_GE -> f79_0_increase_LE : arg1'=arg1, arg2'=arg1, arg3'=arg1, (0 == 0 /\ -10+arg1 < 0), cost: 1
	
		propagated equality arg2p2 = arg1
		
		propagated equality arg1p2 = arg1
		
		propagated equality arg3p2 = arg1
		
	Simplified Guard

	Original rule:
	f50_0_increase_GE -> f79_0_increase_LE : arg1'=arg1, arg2'=arg1, arg3'=arg1, (0 == 0 /\ -10+arg1 < 0), cost: 1
	New rule:
	f50_0_increase_GE -> f79_0_increase_LE : arg1'=arg1, arg2'=arg1, arg3'=arg1, -10+arg1 < 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	f50_0_increase_GE -> f79_0_increase_LE : arg1'=arg1, arg2'=arg1, arg3'=arg1, -10+arg1 < 0, cost: 1
	New rule:
	f50_0_increase_GE -> f79_0_increase_LE : arg2'=arg1, arg3'=arg1, -10+arg1 < 0, cost: 1
	
	Propagated Equalities

	Original rule:
	f79_0_increase_LE -> f50_0_increase_GE : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, (1+arg1-arg1p3 == 0 /\ -arg3 == 0 /\ -arg2 == 0), cost: 1
	New rule:
	f79_0_increase_LE -> f50_0_increase_GE : arg1'=1+arg1, arg2'=arg2p3, arg3'=arg3p3, (0 == 0 /\ -arg3 == 0 /\ -arg2 == 0), cost: 1
	
		propagated equality arg1p3 = 1+arg1
		
	Simplified Guard

	Original rule:
	f79_0_increase_LE -> f50_0_increase_GE : arg1'=1+arg1, arg2'=arg2p3, arg3'=arg3p3, (0 == 0 /\ -arg3 == 0 /\ -arg2 == 0), cost: 1
	New rule:
	f79_0_increase_LE -> f50_0_increase_GE : arg1'=1+arg1, arg2'=arg2p3, arg3'=arg3p3, (-arg3 == 0 /\ -arg2 == 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f79_0_increase_LE -> f79_0_increase_LE : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, (-arg3+arg2 == 0 /\ 1-arg3p4+arg2 == 0 /\ arg1-arg1p4 == 0 /\ 1-arg2p4+arg2 == 0 /\ arg2 > 0), cost: 1
	New rule:
	f79_0_increase_LE -> f79_0_increase_LE : arg1'=arg1, arg2'=1+arg2, arg3'=1+arg2, (0 == 0 /\ -arg3+arg2 == 0 /\ arg2 > 0), cost: 1
	
		propagated equality arg3p4 = 1+arg2
		
		propagated equality arg1p4 = arg1
		
		propagated equality arg2p4 = 1+arg2
		
	Simplified Guard

	Original rule:
	f79_0_increase_LE -> f79_0_increase_LE : arg1'=arg1, arg2'=1+arg2, arg3'=1+arg2, (0 == 0 /\ -arg3+arg2 == 0 /\ arg2 > 0), cost: 1
	New rule:
	f79_0_increase_LE -> f79_0_increase_LE : arg1'=arg1, arg2'=1+arg2, arg3'=1+arg2, (-arg3+arg2 == 0 /\ arg2 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f79_0_increase_LE -> f79_0_increase_LE : arg1'=arg1, arg2'=1+arg2, arg3'=1+arg2, (-arg3+arg2 == 0 /\ arg2 > 0), cost: 1
	New rule:
	f79_0_increase_LE -> f79_0_increase_LE : arg2'=1+arg2, arg3'=1+arg2, (-arg3+arg2 == 0 /\ arg2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	__init -> f50_0_increase_GE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (1+arg2p5 > 0 /\ -arg1p1+arg2p5 == 0 /\ arg1p5 > 0), cost: 1
	New rule:
	__init -> f50_0_increase_GE : arg1'=arg2p5, arg2'=arg2p1, arg3'=arg3p1, (0 == 0 /\ 1+arg2p5 > 0 /\ arg1p5 > 0), cost: 1
	
		propagated equality arg1p1 = arg2p5
		
	Simplified Guard

	Original rule:
	__init -> f50_0_increase_GE : arg1'=arg2p5, arg2'=arg2p1, arg3'=arg3p1, (0 == 0 /\ 1+arg2p5 > 0 /\ arg1p5 > 0), cost: 1
	New rule:
	__init -> f50_0_increase_GE : arg1'=arg2p5, arg2'=arg2p1, arg3'=arg3p1, (1+arg2p5 > 0 /\ arg1p5 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	__init -> f50_0_increase_GE : arg1'=arg2p5, arg2'=arg2p1, arg3'=arg3p1, (1+arg2p5 > 0 /\ arg1p5 > 0), cost: 1
	New rule:
	__init -> f50_0_increase_GE : arg1'=arg2p5, arg2'=arg2p1, arg3'=arg3p1, (1+arg2p5 > 0), cost: 1

Step with 9

	Trace

	9[(1+arg2p5 > 0)]
	
	Blocked

	[{}, {}]

Step with 6

	Trace

	9[(1+arg2p5 > 0)], 6[(-10+arg1 < 0)]
	
	Blocked

	[{}, {}, {}]

Step with 7

	Trace

	9[(1+arg2p5 > 0)], 6[(-10+arg1 < 0)], 7[(-arg3 == 0 /\ -arg2 == 0)]
	
	Blocked

	[{}, {}, {}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 6

	Trace

	9[(1+arg2p5 > 0)], 6[(-10+arg1 < 0)], 7[(-arg3 == 0 /\ -arg2 == 0)], 6[(-10+arg1 < 0)]
	
	Blocked

	[{}, {}, {}, {}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2 arg3
   6: f50_0_increase_GE -> f79_0_increase_LE : arg2'=arg1, arg3'=arg1, -10+arg1 < 0, cost: 1
   7: f79_0_increase_LE -> f50_0_increase_GE : arg1'=1+arg1, arg2'=arg2p3, arg3'=arg3p3, (-arg3 == 0 /\ -arg2 == 0), cost: 1
   8: f79_0_increase_LE -> f79_0_increase_LE : arg2'=1+arg2, arg3'=1+arg2, (-arg3+arg2 == 0 /\ arg2 > 0), cost: 1
  10: f79_0_increase_LE -> f79_0_increase_LE : arg1'=n+arg1, arg2'=n+arg1, arg3'=n+arg1, (arg3 >= 0 /\ -1+arg3-arg1 <= 0 /\ -arg3 >= 0 /\ 10-n-arg1 > 0 /\ -1+n >= 0 /\ 1-n-arg1 >= 0 /\ -1-arg1+arg2 <= 0 /\ arg2 >= 0 /\ -arg2 >= 0), cost: 1
   9: __init -> f50_0_increase_GE : arg1'=arg2p5, arg2'=arg2p1, arg3'=arg3p1, (1+arg2p5 > 0), cost: 1

	Loop Acceleration

	Original rule:
	f79_0_increase_LE -> f79_0_increase_LE : arg1'=1+arg1, arg2'=1+arg1, arg3'=1+arg1, (-arg3 == 0 /\ -9+arg1 < 0 /\ -arg2 == 0), cost: 1
	New rule:
	f79_0_increase_LE -> f79_0_increase_LE : arg1'=n+arg1, arg2'=n+arg1, arg3'=n+arg1, (arg3 >= 0 /\ -1+arg3-arg1 <= 0 /\ -arg3 >= 0 /\ 10-n-arg1 > 0 /\ -1+n >= 0 /\ 1-n-arg1 >= 0 /\ -1-arg1+arg2 <= 0 /\ arg2 >= 0 /\ -arg2 >= 0), cost: 1

		9-arg1 > 0 [0]: montonic decrease yields 10-n-arg1 > 0
		
		9-arg1 > 0 [1]: eventual increase yields (1 <= 0 /\ 9-arg1 > 0)
		
		arg3 >= 0 [0]: eventual increase yields (arg3 >= 0 /\ -1+arg3-arg1 <= 0)
		
		-arg3 >= 0 [0]: eventual decrease yields (-arg3 >= 0 /\ 1-n-arg1 >= 0)
		
		arg2 >= 0 [0]: eventual increase yields (-1-arg1+arg2 <= 0 /\ arg2 >= 0)
		
		-arg2 >= 0 [0]: eventual decrease yields (1-n-arg1 >= 0 /\ -arg2 >= 0)
		
		Replacement map: {9-arg1 > 0 -> 10-n-arg1 > 0, arg3 >= 0 -> (arg3 >= 0 /\ -1+arg3-arg1 <= 0), -arg3 >= 0 -> (-arg3 >= 0 /\ 1-n-arg1 >= 0), arg2 >= 0 -> (-1-arg1+arg2 <= 0 /\ arg2 >= 0), -arg2 >= 0 -> (1-n-arg1 >= 0 /\ -arg2 >= 0)}

	Trace

	9[(1+arg2p5 > 0)], 6[(-10+arg1 < 0)], 10[(arg3 >= 0 /\ -1+arg3-arg1 <= 0 /\ -arg3 >= 0 /\ 10-n-arg1 > 0 /\ -1+n >= 0 /\ 1-n-arg1 >= 0 /\ -1-arg1+arg2 <= 0 /\ arg2 >= 0 /\ -arg2 >= 0)]
	
	Blocked

	[{}, {}, {}, {10[T]}]

Step with 8

	Trace

	9[(1+arg2p5 > 0)], 6[(-10+arg1 < 0)], 10[(arg3 >= 0 /\ -1+arg3-arg1 <= 0 /\ -arg3 >= 0 /\ 10-n-arg1 > 0 /\ -1+n >= 0 /\ 1-n-arg1 >= 0 /\ -1-arg1+arg2 <= 0 /\ arg2 >= 0 /\ -arg2 >= 0)], 8[(-arg3+arg2 == 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {}, {7[T], 10[T]}, {}]

Nonterm

Start location: __init
Program variables: arg1 arg2 arg3
   6: f50_0_increase_GE -> f79_0_increase_LE : arg2'=arg1, arg3'=arg1, -10+arg1 < 0, cost: 1
   7: f79_0_increase_LE -> f50_0_increase_GE : arg1'=1+arg1, arg2'=arg2p3, arg3'=arg3p3, (-arg3 == 0 /\ -arg2 == 0), cost: 1
   8: f79_0_increase_LE -> f79_0_increase_LE : arg2'=1+arg2, arg3'=1+arg2, (-arg3+arg2 == 0 /\ arg2 > 0), cost: 1
  10: f79_0_increase_LE -> f79_0_increase_LE : arg1'=n+arg1, arg2'=n+arg1, arg3'=n+arg1, (arg3 >= 0 /\ -1+arg3-arg1 <= 0 /\ -arg3 >= 0 /\ 10-n-arg1 > 0 /\ -1+n >= 0 /\ 1-n-arg1 >= 0 /\ -1-arg1+arg2 <= 0 /\ arg2 >= 0 /\ -arg2 >= 0), cost: 1
  11: f79_0_increase_LE -> LoAT_sink : (-arg3+arg2 >= 0 /\ -1+n2 >= 0 /\ arg3-arg2 >= 0 /\ arg2 > 0), cost: NONTERM
  12: f79_0_increase_LE -> f79_0_increase_LE : arg2'=n2+arg2, arg3'=n2+arg2, (-arg3+arg2 >= 0 /\ -1+n2 >= 0 /\ arg3-arg2 >= 0 /\ arg2 > 0), cost: 1
   9: __init -> f50_0_increase_GE : arg1'=arg2p5, arg2'=arg2p1, arg3'=arg3p1, (1+arg2p5 > 0), cost: 1

	Certificate of Non-Termination

	Original rule:
	f79_0_increase_LE -> f79_0_increase_LE : arg2'=1+arg2, arg3'=1+arg2, (-arg3+arg2 == 0 /\ arg2 > 0), cost: 1
	New rule:
	f79_0_increase_LE -> LoAT_sink : (-arg3+arg2 >= 0 /\ -1+n2 >= 0 /\ arg3-arg2 >= 0 /\ arg2 > 0), cost: NONTERM

		-arg3+arg2 >= 0 [0]: monotonic increase yields -arg3+arg2 >= 0
		
		arg3-arg2 >= 0 [0]: monotonic increase yields arg3-arg2 >= 0
		
		arg2 > 0 [0]: monotonic increase yields arg2 > 0
		
		Replacement map: {-arg3+arg2 >= 0 -> -arg3+arg2 >= 0, arg3-arg2 >= 0 -> arg3-arg2 >= 0, arg2 > 0 -> arg2 > 0}

	Loop Acceleration

	Original rule:
	f79_0_increase_LE -> f79_0_increase_LE : arg2'=1+arg2, arg3'=1+arg2, (-arg3+arg2 == 0 /\ arg2 > 0), cost: 1
	New rule:
	f79_0_increase_LE -> f79_0_increase_LE : arg2'=n2+arg2, arg3'=n2+arg2, (-arg3+arg2 >= 0 /\ -1+n2 >= 0 /\ arg3-arg2 >= 0 /\ arg2 > 0), cost: 1

		-arg3+arg2 >= 0 [0]: monotonic increase yields -arg3+arg2 >= 0
		
		arg3-arg2 >= 0 [0]: monotonic increase yields arg3-arg2 >= 0
		
		arg2 > 0 [0]: monotonic increase yields arg2 > 0
		
		Replacement map: {-arg3+arg2 >= 0 -> -arg3+arg2 >= 0, arg3-arg2 >= 0 -> arg3-arg2 >= 0, arg2 > 0 -> arg2 > 0}

Step with 11

	Trace

	9[(1+arg2p5 > 0)], 6[(-10+arg1 < 0)], 10[(arg3 >= 0 /\ -1+arg3-arg1 <= 0 /\ -arg3 >= 0 /\ 10-n-arg1 > 0 /\ -1+n >= 0 /\ 1-n-arg1 >= 0 /\ -1-arg1+arg2 <= 0 /\ arg2 >= 0 /\ -arg2 >= 0)], 11[(-arg3+arg2 >= 0 /\ -1+n2 >= 0 /\ arg3-arg2 >= 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {}, {7[T], 10[T]}, {11[T]}]

Refute

	Counterexample

	[ arg1=0 arg2=0 arg3=0 ] 9 [ arg1=0 arg2=0 arg3=0 ] 6 [ arg1=1 arg2=1 arg3=1 ] 10 [ arg1=arg1 arg2=arg2 arg3=arg3 ] 11
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
