unknown

Initial ITS

Start location: __init
Program variables: arg1 arg2
   0: f164_0_createList_Return -> f346_0_main_NULL : arg1'=arg1p1, arg2'=arg2p1, (-arg1p1 == 0 /\ arg2p1 > 0 /\ arg2p1-arg1 <= 0 /\ 2+arg2-arg1 <= 0 /\ arg1 > 0), cost: 1
   2: f346_0_main_NULL -> f346_0_main_NULL : arg1'=arg1p3, arg2'=arg2p3, (-6+arg2 > 0 /\ 7+arg2p3-arg2 <= 0 /\ 1-arg1p3 == 0 /\ 1+arg2p3 > 0 /\ -arg1 == 0), cost: 1
   3: f346_0_main_NULL -> f346_0_main_NULL : arg1'=arg1p4, arg2'=arg2p4, (arg2 > 0 /\ -2+arg2p4 > 0 /\ 2+arg2-arg2p4 >= 0 /\ 2-arg1p4 == 0 /\ 1-arg1 == 0), cost: 1
   4: f346_0_main_NULL -> f346_0_main_NULL : arg1'=arg1p5, arg2'=arg2p5, (-arg1p5 == 0 /\ arg2 > 0 /\ -4+arg2p5 > 0 /\ 2-arg1 == 0 /\ -4-arg2+arg2p5 <= 0), cost: 1
   1: f1_0_main_Load -> f346_0_main_NULL : arg1'=arg1p2, arg2'=arg2p2, (-arg1p2 == 0 /\ arg2 > 0 /\ 1+x6 > 0 /\ arg2p2 > 0 /\ arg1 > 0), cost: 1
   5: f1_0_main_Load -> f188_0_createList_LE : arg1'=arg1p6, arg2'=arg2p6, (arg2 > 0 /\ 1+arg1p6 > 0 /\ arg1 > 0), cost: 1
   6: f188_0_createList_LE -> f188_0_createList_LE : arg1'=arg1p7, arg2'=arg2p7, (-1-arg1p7+arg1 == 0 /\ arg1 > 0), cost: 1
   7: __init -> f1_0_main_Load : arg1'=arg1p8, arg2'=arg2p8, T, cost: 1

Simplified Transitions

Start location: __init
Program variables: arg1 arg2
   8: f164_0_createList_Return -> f346_0_main_NULL : arg1'=0, arg2'=arg2p1, (arg2p1 > 0 /\ arg2p1-arg1 <= 0 /\ 2+arg2-arg1 <= 0 /\ arg1 > 0), cost: 1
  10: f346_0_main_NULL -> f346_0_main_NULL : arg1'=1, arg2'=arg2p3, (-6+arg2 > 0 /\ 7+arg2p3-arg2 <= 0 /\ 1+arg2p3 > 0 /\ -arg1 == 0), cost: 1
  11: f346_0_main_NULL -> f346_0_main_NULL : arg1'=2, arg2'=arg2p4, (arg2 > 0 /\ -2+arg2p4 > 0 /\ 2+arg2-arg2p4 >= 0 /\ 1-arg1 == 0), cost: 1
  12: f346_0_main_NULL -> f346_0_main_NULL : arg1'=0, arg2'=arg2p5, (arg2 > 0 /\ -4+arg2p5 > 0 /\ 2-arg1 == 0 /\ -4-arg2+arg2p5 <= 0), cost: 1
   5: f1_0_main_Load -> f188_0_createList_LE : arg1'=arg1p6, arg2'=arg2p6, (arg2 > 0 /\ 1+arg1p6 > 0 /\ arg1 > 0), cost: 1
   9: f1_0_main_Load -> f346_0_main_NULL : arg1'=0, arg2'=arg2p2, (arg2 > 0 /\ arg2p2 > 0 /\ arg1 > 0), cost: 1
  13: f188_0_createList_LE -> f188_0_createList_LE : arg1'=-1+arg1, arg2'=arg2p7, arg1 > 0, cost: 1
   7: __init -> f1_0_main_Load : arg1'=arg1p8, arg2'=arg2p8, T, cost: 1

	Propagated Equalities

	Original rule:
	f164_0_createList_Return -> f346_0_main_NULL : arg1'=arg1p1, arg2'=arg2p1, (-arg1p1 == 0 /\ arg2p1 > 0 /\ arg2p1-arg1 <= 0 /\ 2+arg2-arg1 <= 0 /\ arg1 > 0), cost: 1
	New rule:
	f164_0_createList_Return -> f346_0_main_NULL : arg1'=0, arg2'=arg2p1, (0 == 0 /\ arg2p1 > 0 /\ arg2p1-arg1 <= 0 /\ 2+arg2-arg1 <= 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg1p1 = 0
		
	Simplified Guard

	Original rule:
	f164_0_createList_Return -> f346_0_main_NULL : arg1'=0, arg2'=arg2p1, (0 == 0 /\ arg2p1 > 0 /\ arg2p1-arg1 <= 0 /\ 2+arg2-arg1 <= 0 /\ arg1 > 0), cost: 1
	New rule:
	f164_0_createList_Return -> f346_0_main_NULL : arg1'=0, arg2'=arg2p1, (arg2p1 > 0 /\ arg2p1-arg1 <= 0 /\ 2+arg2-arg1 <= 0 /\ arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f1_0_main_Load -> f346_0_main_NULL : arg1'=arg1p2, arg2'=arg2p2, (-arg1p2 == 0 /\ arg2 > 0 /\ 1+x6 > 0 /\ arg2p2 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f346_0_main_NULL : arg1'=0, arg2'=arg2p2, (0 == 0 /\ arg2 > 0 /\ 1+x6 > 0 /\ arg2p2 > 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg1p2 = 0
		
	Simplified Guard

	Original rule:
	f1_0_main_Load -> f346_0_main_NULL : arg1'=0, arg2'=arg2p2, (0 == 0 /\ arg2 > 0 /\ 1+x6 > 0 /\ arg2p2 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f346_0_main_NULL : arg1'=0, arg2'=arg2p2, (arg2 > 0 /\ 1+x6 > 0 /\ arg2p2 > 0 /\ arg1 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	f1_0_main_Load -> f346_0_main_NULL : arg1'=0, arg2'=arg2p2, (arg2 > 0 /\ 1+x6 > 0 /\ arg2p2 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f346_0_main_NULL : arg1'=0, arg2'=arg2p2, (arg2 > 0 /\ arg2p2 > 0 /\ arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f346_0_main_NULL -> f346_0_main_NULL : arg1'=arg1p3, arg2'=arg2p3, (-6+arg2 > 0 /\ 7+arg2p3-arg2 <= 0 /\ 1-arg1p3 == 0 /\ 1+arg2p3 > 0 /\ -arg1 == 0), cost: 1
	New rule:
	f346_0_main_NULL -> f346_0_main_NULL : arg1'=1, arg2'=arg2p3, (0 == 0 /\ -6+arg2 > 0 /\ 7+arg2p3-arg2 <= 0 /\ 1+arg2p3 > 0 /\ -arg1 == 0), cost: 1
	
		propagated equality arg1p3 = 1
		
	Simplified Guard

	Original rule:
	f346_0_main_NULL -> f346_0_main_NULL : arg1'=1, arg2'=arg2p3, (0 == 0 /\ -6+arg2 > 0 /\ 7+arg2p3-arg2 <= 0 /\ 1+arg2p3 > 0 /\ -arg1 == 0), cost: 1
	New rule:
	f346_0_main_NULL -> f346_0_main_NULL : arg1'=1, arg2'=arg2p3, (-6+arg2 > 0 /\ 7+arg2p3-arg2 <= 0 /\ 1+arg2p3 > 0 /\ -arg1 == 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f346_0_main_NULL -> f346_0_main_NULL : arg1'=arg1p4, arg2'=arg2p4, (arg2 > 0 /\ -2+arg2p4 > 0 /\ 2+arg2-arg2p4 >= 0 /\ 2-arg1p4 == 0 /\ 1-arg1 == 0), cost: 1
	New rule:
	f346_0_main_NULL -> f346_0_main_NULL : arg1'=2, arg2'=arg2p4, (0 == 0 /\ arg2 > 0 /\ -2+arg2p4 > 0 /\ 2+arg2-arg2p4 >= 0 /\ 1-arg1 == 0), cost: 1
	
		propagated equality arg1p4 = 2
		
	Simplified Guard

	Original rule:
	f346_0_main_NULL -> f346_0_main_NULL : arg1'=2, arg2'=arg2p4, (0 == 0 /\ arg2 > 0 /\ -2+arg2p4 > 0 /\ 2+arg2-arg2p4 >= 0 /\ 1-arg1 == 0), cost: 1
	New rule:
	f346_0_main_NULL -> f346_0_main_NULL : arg1'=2, arg2'=arg2p4, (arg2 > 0 /\ -2+arg2p4 > 0 /\ 2+arg2-arg2p4 >= 0 /\ 1-arg1 == 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f346_0_main_NULL -> f346_0_main_NULL : arg1'=arg1p5, arg2'=arg2p5, (-arg1p5 == 0 /\ arg2 > 0 /\ -4+arg2p5 > 0 /\ 2-arg1 == 0 /\ -4-arg2+arg2p5 <= 0), cost: 1
	New rule:
	f346_0_main_NULL -> f346_0_main_NULL : arg1'=0, arg2'=arg2p5, (0 == 0 /\ arg2 > 0 /\ -4+arg2p5 > 0 /\ 2-arg1 == 0 /\ -4-arg2+arg2p5 <= 0), cost: 1
	
		propagated equality arg1p5 = 0
		
	Simplified Guard

	Original rule:
	f346_0_main_NULL -> f346_0_main_NULL : arg1'=0, arg2'=arg2p5, (0 == 0 /\ arg2 > 0 /\ -4+arg2p5 > 0 /\ 2-arg1 == 0 /\ -4-arg2+arg2p5 <= 0), cost: 1
	New rule:
	f346_0_main_NULL -> f346_0_main_NULL : arg1'=0, arg2'=arg2p5, (arg2 > 0 /\ -4+arg2p5 > 0 /\ 2-arg1 == 0 /\ -4-arg2+arg2p5 <= 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f188_0_createList_LE -> f188_0_createList_LE : arg1'=arg1p7, arg2'=arg2p7, (-1-arg1p7+arg1 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f188_0_createList_LE -> f188_0_createList_LE : arg1'=-1+arg1, arg2'=arg2p7, (0 == 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg1p7 = -1+arg1
		
	Simplified Guard

	Original rule:
	f188_0_createList_LE -> f188_0_createList_LE : arg1'=-1+arg1, arg2'=arg2p7, (0 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f188_0_createList_LE -> f188_0_createList_LE : arg1'=-1+arg1, arg2'=arg2p7, arg1 > 0, cost: 1

Step with 7

	Trace

	7[T]
	
	Blocked

	[{}, {}]

Step with 5

	Trace

	7[T], 5[(arg2 > 0 /\ 1+arg1p6 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {}]

Step with 13

	Trace

	7[T], 5[(arg2 > 0 /\ 1+arg1p6 > 0 /\ arg1 > 0)], 13[(arg1 > 0)]
	
	Blocked

	[{}, {}, {}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2
   8: f164_0_createList_Return -> f346_0_main_NULL : arg1'=0, arg2'=arg2p1, (arg2p1 > 0 /\ arg2p1-arg1 <= 0 /\ 2+arg2-arg1 <= 0 /\ arg1 > 0), cost: 1
  10: f346_0_main_NULL -> f346_0_main_NULL : arg1'=1, arg2'=arg2p3, (-6+arg2 > 0 /\ 7+arg2p3-arg2 <= 0 /\ 1+arg2p3 > 0 /\ -arg1 == 0), cost: 1
  11: f346_0_main_NULL -> f346_0_main_NULL : arg1'=2, arg2'=arg2p4, (arg2 > 0 /\ -2+arg2p4 > 0 /\ 2+arg2-arg2p4 >= 0 /\ 1-arg1 == 0), cost: 1
  12: f346_0_main_NULL -> f346_0_main_NULL : arg1'=0, arg2'=arg2p5, (arg2 > 0 /\ -4+arg2p5 > 0 /\ 2-arg1 == 0 /\ -4-arg2+arg2p5 <= 0), cost: 1
   5: f1_0_main_Load -> f188_0_createList_LE : arg1'=arg1p6, arg2'=arg2p6, (arg2 > 0 /\ 1+arg1p6 > 0 /\ arg1 > 0), cost: 1
   9: f1_0_main_Load -> f346_0_main_NULL : arg1'=0, arg2'=arg2p2, (arg2 > 0 /\ arg2p2 > 0 /\ arg1 > 0), cost: 1
  13: f188_0_createList_LE -> f188_0_createList_LE : arg1'=-1+arg1, arg2'=arg2p7, arg1 > 0, cost: 1
  14: f188_0_createList_LE -> f188_0_createList_LE : arg1'=-n+arg1, arg2'=arg2p7, (1-n+arg1 > 0 /\ -1+n >= 0), cost: 1
   7: __init -> f1_0_main_Load : arg1'=arg1p8, arg2'=arg2p8, T, cost: 1

	Loop Acceleration

	Original rule:
	f188_0_createList_LE -> f188_0_createList_LE : arg1'=-1+arg1, arg2'=arg2p7, (arg1 > 0), cost: 1
	New rule:
	f188_0_createList_LE -> f188_0_createList_LE : arg1'=-n+arg1, arg2'=arg2p7, (1-n+arg1 > 0 /\ -1+n >= 0), cost: 1

		arg1 > 0 [0]: montonic decrease yields 1-n+arg1 > 0
		
		arg1 > 0 [1]: eventual increase yields (1 <= 0 /\ arg1 > 0)
		
		Replacement map: {arg1 > 0 -> 1-n+arg1 > 0}

	Trace

	7[T], 5[(arg2 > 0 /\ 1+arg1p6 > 0 /\ arg1 > 0)], 14[(1-n+arg1 > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {}, {}, {13[T], 14[T]}]

Backtrack

	Trace

	7[T], 5[(arg2 > 0 /\ 1+arg1p6 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {14[T]}]

Step with 13

	Trace

	7[T], 5[(arg2 > 0 /\ 1+arg1p6 > 0 /\ arg1 > 0)], 13[(arg1 > 0)]
	
	Blocked

	[{}, {}, {14[T]}, {}]

Covered

	Trace

	7[T], 5[(arg2 > 0 /\ 1+arg1p6 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {13[T], 14[T]}]

Backtrack

	Trace

	7[T]
	
	Blocked

	[{}, {5[T]}]

Step with 9

	Trace

	7[T], 9[(arg2 > 0 /\ arg2p2 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {5[T]}, {}]

Step with 10

	Trace

	7[T], 9[(arg2 > 0 /\ arg2p2 > 0 /\ arg1 > 0)], 10[(-6+arg2 > 0 /\ 7+arg2p3-arg2 <= 0 /\ 1+arg2p3 > 0 /\ -arg1 == 0)]
	
	Blocked

	[{}, {5[T]}, {}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 11

	Trace

	7[T], 9[(arg2 > 0 /\ arg2p2 > 0 /\ arg1 > 0)], 10[(-6+arg2 > 0 /\ 7+arg2p3-arg2 <= 0 /\ 1+arg2p3 > 0 /\ -arg1 == 0)], 11[(arg2 > 0 /\ -2+arg2p4 > 0 /\ 2+arg2-arg2p4 >= 0 /\ 1-arg1 == 0)]
	
	Blocked

	[{}, {5[T]}, {}, {10[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Acceleration Failed

marked recursive suffix as redundant

Step with 12

	Trace

	7[T], 9[(arg2 > 0 /\ arg2p2 > 0 /\ arg1 > 0)], 10[(-6+arg2 > 0 /\ 7+arg2p3-arg2 <= 0 /\ 1+arg2p3 > 0 /\ -arg1 == 0)], 11[(arg2 > 0 /\ -2+arg2p4 > 0 /\ 2+arg2-arg2p4 >= 0 /\ 1-arg1 == 0)], 12[(arg2 > 0 /\ -4+arg2p5 > 0 /\ 2-arg1 == 0 /\ -4-arg2+arg2p5 <= 0)]
	
	Blocked

	[{}, {5[T]}, {}, {10[T]}, {11[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Acceleration Failed

marked recursive suffix as redundant

Acceleration Failed

marked recursive suffix as redundant

Backtrack

	Trace

	7[T], 9[(arg2 > 0 /\ arg2p2 > 0 /\ arg1 > 0)], 10[(-6+arg2 > 0 /\ 7+arg2p3-arg2 <= 0 /\ 1+arg2p3 > 0 /\ -arg1 == 0)], 11[(arg2 > 0 /\ -2+arg2p4 > 0 /\ 2+arg2-arg2p4 >= 0 /\ 1-arg1 == 0)]
	
	Blocked

	[{}, {5[T]}, {}, {10[T]}, {11[T], 12[T]}]

Backtrack

	Trace

	7[T], 9[(arg2 > 0 /\ arg2p2 > 0 /\ arg1 > 0)], 10[(-6+arg2 > 0 /\ 7+arg2p3-arg2 <= 0 /\ 1+arg2p3 > 0 /\ -arg1 == 0)]
	
	Blocked

	[{}, {5[T]}, {}, {10[T], 11[T]}]

Backtrack

	Trace

	7[T], 9[(arg2 > 0 /\ arg2p2 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {5[T]}, {10[T]}]

Backtrack

	Trace

	7[T]
	
	Blocked

	[{}, {5[T], 9[T]}]

Backtrack

	Trace

	Blocked

	[{7[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
