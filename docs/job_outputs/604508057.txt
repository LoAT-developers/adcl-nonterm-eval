NO

Initial ITS

Start location: __init
Program variables: arg1 arg2
   0: f1_0_main_ConstantStackPush -> f40_0_sum_InvokeMethod : arg1'=arg1p1, arg2'=arg2p1, (-2-arg2p1-arg2 == 0 /\ 1+arg2 > 0 /\ arg2 >= 0 /\ -1-arg1p1-arg2 == 0 /\ 2+arg2 > 0 /\ arg1 > 0), cost: 1
   1: f40_0_sum_InvokeMethod -> f40_0_sum_InvokeMethod : arg1'=arg1p2, arg2'=arg2p2, (-1-arg2p2+arg2 == 0 /\ arg2-arg1 < 0 /\ -1+arg2 < 0 /\ arg2-arg1p2 == 0 /\ arg2 < 0 /\ -1+arg1 < 0), cost: 1
   2: __init -> f1_0_main_ConstantStackPush : arg1'=arg1p3, arg2'=arg2p3, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2
   1: f40_0_sum_InvokeMethod -> f40_0_sum_InvokeMethod : arg1'=arg1p2, arg2'=arg2p2, (-1-arg2p2+arg2 == 0 /\ arg2-arg1 < 0 /\ -1+arg2 < 0 /\ arg2-arg1p2 == 0 /\ arg2 < 0 /\ -1+arg1 < 0), cost: 1
   3: __init -> f40_0_sum_InvokeMethod : arg1'=arg1p1, arg2'=arg2p1, (2+arg2p3 > 0 /\ 1+arg2p3 > 0 /\ -2-arg2p1-arg2p3 == 0 /\ -1-arg1p1-arg2p3 == 0 /\ arg1p3 > 0 /\ arg2p3 >= 0), cost: 1

	Eliminating location f1_0_main_ConstantStackPush by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_ConstantStackPush : arg1'=arg1p3, arg2'=arg2p3, T, cost: 1
	Second rule:
	f1_0_main_ConstantStackPush -> f40_0_sum_InvokeMethod : arg1'=arg1p1, arg2'=arg2p1, (-2-arg2p1-arg2 == 0 /\ 1+arg2 > 0 /\ arg2 >= 0 /\ -1-arg1p1-arg2 == 0 /\ 2+arg2 > 0 /\ arg1 > 0), cost: 1
	New rule:
	__init -> f40_0_sum_InvokeMethod : arg1'=arg1p1, arg2'=arg2p1, (2+arg2p3 > 0 /\ 1+arg2p3 > 0 /\ -2-arg2p1-arg2p3 == 0 /\ -1-arg1p1-arg2p3 == 0 /\ arg1p3 > 0 /\ arg2p3 >= 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 2

Simplified Transitions

Start location: __init
Program variables: arg1 arg2
   4: f40_0_sum_InvokeMethod -> f40_0_sum_InvokeMethod : arg1'=arg2, arg2'=-1+arg2, (arg2-arg1 < 0 /\ -1+arg2 < 0 /\ arg2 < 0 /\ -1+arg1 < 0), cost: 1
   5: __init -> f40_0_sum_InvokeMethod : arg1'=-1-arg2p3, arg2'=-2-arg2p3, (2+arg2p3 > 0 /\ 1+arg2p3 > 0 /\ arg2p3 >= 0), cost: 1

	Propagated Equalities

	Original rule:
	f40_0_sum_InvokeMethod -> f40_0_sum_InvokeMethod : arg1'=arg1p2, arg2'=arg2p2, (-1-arg2p2+arg2 == 0 /\ arg2-arg1 < 0 /\ -1+arg2 < 0 /\ arg2-arg1p2 == 0 /\ arg2 < 0 /\ -1+arg1 < 0), cost: 1
	New rule:
	f40_0_sum_InvokeMethod -> f40_0_sum_InvokeMethod : arg1'=arg2, arg2'=-1+arg2, (0 == 0 /\ arg2-arg1 < 0 /\ -1+arg2 < 0 /\ arg2 < 0 /\ -1+arg1 < 0), cost: 1
	
		propagated equality arg2p2 = -1+arg2
		
		propagated equality arg1p2 = arg2
		
	Simplified Guard

	Original rule:
	f40_0_sum_InvokeMethod -> f40_0_sum_InvokeMethod : arg1'=arg2, arg2'=-1+arg2, (0 == 0 /\ arg2-arg1 < 0 /\ -1+arg2 < 0 /\ arg2 < 0 /\ -1+arg1 < 0), cost: 1
	New rule:
	f40_0_sum_InvokeMethod -> f40_0_sum_InvokeMethod : arg1'=arg2, arg2'=-1+arg2, (arg2-arg1 < 0 /\ -1+arg2 < 0 /\ arg2 < 0 /\ -1+arg1 < 0), cost: 1
	
	Propagated Equalities

	Original rule:
	__init -> f40_0_sum_InvokeMethod : arg1'=arg1p1, arg2'=arg2p1, (2+arg2p3 > 0 /\ 1+arg2p3 > 0 /\ -2-arg2p1-arg2p3 == 0 /\ -1-arg1p1-arg2p3 == 0 /\ arg1p3 > 0 /\ arg2p3 >= 0), cost: 1
	New rule:
	__init -> f40_0_sum_InvokeMethod : arg1'=-1-arg2p3, arg2'=-2-arg2p3, (0 == 0 /\ 2+arg2p3 > 0 /\ 1+arg2p3 > 0 /\ arg1p3 > 0 /\ arg2p3 >= 0), cost: 1
	
		propagated equality arg2p1 = -2-arg2p3
		
		propagated equality arg1p1 = -1-arg2p3
		
	Simplified Guard

	Original rule:
	__init -> f40_0_sum_InvokeMethod : arg1'=-1-arg2p3, arg2'=-2-arg2p3, (0 == 0 /\ 2+arg2p3 > 0 /\ 1+arg2p3 > 0 /\ arg1p3 > 0 /\ arg2p3 >= 0), cost: 1
	New rule:
	__init -> f40_0_sum_InvokeMethod : arg1'=-1-arg2p3, arg2'=-2-arg2p3, (2+arg2p3 > 0 /\ 1+arg2p3 > 0 /\ arg1p3 > 0 /\ arg2p3 >= 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	__init -> f40_0_sum_InvokeMethod : arg1'=-1-arg2p3, arg2'=-2-arg2p3, (2+arg2p3 > 0 /\ 1+arg2p3 > 0 /\ arg1p3 > 0 /\ arg2p3 >= 0), cost: 1
	New rule:
	__init -> f40_0_sum_InvokeMethod : arg1'=-1-arg2p3, arg2'=-2-arg2p3, (2+arg2p3 > 0 /\ 1+arg2p3 > 0 /\ arg2p3 >= 0), cost: 1

Step with 5

	Trace

	5[(2+arg2p3 > 0 /\ 1+arg2p3 > 0 /\ arg2p3 >= 0)]
	
	Blocked

	[{}, {}]

Step with 4

	Trace

	5[(2+arg2p3 > 0 /\ 1+arg2p3 > 0 /\ arg2p3 >= 0)], 4[(arg2-arg1 < 0 /\ -1+arg2 < 0 /\ arg2 < 0 /\ -1+arg1 < 0)]
	
	Blocked

	[{}, {}, {}]

Nonterm

Start location: __init
Program variables: arg1 arg2
   4: f40_0_sum_InvokeMethod -> f40_0_sum_InvokeMethod : arg1'=arg2, arg2'=-1+arg2, (arg2-arg1 < 0 /\ -1+arg2 < 0 /\ arg2 < 0 /\ -1+arg1 < 0), cost: 1
   6: f40_0_sum_InvokeMethod -> LoAT_sink : (1-arg2 > 0 /\ -arg2 > 0 /\ -arg2+arg1 > 0 /\ -1+n >= 0 /\ 1-arg1 > 0), cost: NONTERM
   7: f40_0_sum_InvokeMethod -> f40_0_sum_InvokeMethod : arg1'=1+arg2-n, arg2'=arg2-n, (1-arg2 > 0 /\ -arg2 > 0 /\ -arg2+arg1 > 0 /\ -1+n >= 0 /\ 1-arg1 > 0), cost: 1
   5: __init -> f40_0_sum_InvokeMethod : arg1'=-1-arg2p3, arg2'=-2-arg2p3, (2+arg2p3 > 0 /\ 1+arg2p3 > 0 /\ arg2p3 >= 0), cost: 1

	Certificate of Non-Termination

	Original rule:
	f40_0_sum_InvokeMethod -> f40_0_sum_InvokeMethod : arg1'=arg2, arg2'=-1+arg2, (arg2-arg1 < 0 /\ -1+arg2 < 0 /\ arg2 < 0 /\ -1+arg1 < 0), cost: 1
	New rule:
	f40_0_sum_InvokeMethod -> LoAT_sink : (1-arg2 > 0 /\ -arg2 > 0 /\ -arg2+arg1 > 0 /\ -1+n >= 0 /\ 1-arg1 > 0), cost: NONTERM

		1-arg2 > 0 [0]: monotonic increase yields 1-arg2 > 0
		
		-arg2 > 0 [0]: monotonic increase yields -arg2 > 0
		
		-arg2+arg1 > 0 [0]: monotonic increase yields -arg2+arg1 > 0
		
		1-arg1 > 0 [0]: monotonic increase yields 1-arg1 > 0, dependencies: -arg2 > 0
		
		Replacement map: {1-arg2 > 0 -> 1-arg2 > 0, -arg2 > 0 -> -arg2 > 0, -arg2+arg1 > 0 -> -arg2+arg1 > 0, 1-arg1 > 0 -> 1-arg1 > 0}

	Loop Acceleration

	Original rule:
	f40_0_sum_InvokeMethod -> f40_0_sum_InvokeMethod : arg1'=arg2, arg2'=-1+arg2, (arg2-arg1 < 0 /\ -1+arg2 < 0 /\ arg2 < 0 /\ -1+arg1 < 0), cost: 1
	New rule:
	f40_0_sum_InvokeMethod -> f40_0_sum_InvokeMethod : arg1'=1+arg2-n, arg2'=arg2-n, (1-arg2 > 0 /\ -arg2 > 0 /\ -arg2+arg1 > 0 /\ -1+n >= 0 /\ 1-arg1 > 0), cost: 1

		1-arg2 > 0 [0]: monotonic increase yields 1-arg2 > 0
		
		-arg2 > 0 [0]: monotonic increase yields -arg2 > 0
		
		-arg2+arg1 > 0 [0]: monotonic increase yields -arg2+arg1 > 0
		
		1-arg1 > 0 [0]: monotonic increase yields 1-arg1 > 0, dependencies: -arg2 > 0
		
		Replacement map: {1-arg2 > 0 -> 1-arg2 > 0, -arg2 > 0 -> -arg2 > 0, -arg2+arg1 > 0 -> -arg2+arg1 > 0, 1-arg1 > 0 -> 1-arg1 > 0}

Step with 6

	Trace

	5[(2+arg2p3 > 0 /\ 1+arg2p3 > 0 /\ arg2p3 >= 0)], 6[(1-arg2 > 0 /\ -arg2 > 0 /\ -arg2+arg1 > 0 /\ -1+n >= 0 /\ 1-arg1 > 0)]
	
	Blocked

	[{}, {}, {6[T]}]

Refute

	Counterexample

	[ arg1=-1 arg2=-2 ] 5 [ arg1=arg1 arg2=arg2 ] 6
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
