unknown

Initial ITS

Start location: [1]
Program variables: i j m n
   0: [1] -> [2] : n'=nondet, T, cost: 1
   1: [2] -> [3] : m'=nondet1, T, cost: 1
   2: [3] -> [5] : (-m+n > 0 /\ m > 0), cost: 1
  16: [3] -> [4] : (-m+n <= 0 \/ m <= 0), cost: 1
   3: [5] -> [6] : i'=0, T, cost: 1
   4: [6] -> [7] : j'=0, T, cost: 1
   5: [7] -> [8] : i-n < 0, cost: 1
  14: [7] -> [15] : i-n >= 0, cost: 1
   6: [8] -> [10] : j-m < 0, cost: 1
   9: [8] -> [12] : j-m >= 0, cost: 1
  13: [9] -> [7] : T, cost: 1
   7: [10] -> [11] : j'=1+j, T, cost: 1
   8: [11] -> [9] : T, cost: 1
  10: [12] -> [13] : j'=0, T, cost: 1
  11: [13] -> [14] : i'=1+i, T, cost: 1
  12: [14] -> [9] : T, cost: 1
  15: [15] -> [4] : T, cost: 1

Chained Linear Paths

Start location: [1]
Program variables: i j m n
  17: [1] -> [3] : m'=nondet1, n'=nondet, T, cost: 1
  16: [3] -> [4] : (-m+n <= 0 \/ m <= 0), cost: 1
  19: [3] -> [7] : i'=0, j'=0, (-m+n > 0 /\ m > 0), cost: 1
   5: [7] -> [8] : i-n < 0, cost: 1
  20: [7] -> [4] : i-n >= 0, cost: 1
  23: [8] -> [9] : j'=1+j, j-m < 0, cost: 1
  25: [8] -> [9] : i'=1+i, j'=0, j-m >= 0, cost: 1
  13: [9] -> [7] : T, cost: 1

	Eliminating location [2] by chaining:

	Applied chaining

	First rule:
	[1] -> [2] : n'=nondet, T, cost: 1
	Second rule:
	[2] -> [3] : m'=nondet1, T, cost: 1
	New rule:
	[1] -> [3] : m'=nondet1, n'=nondet, T, cost: 1
	
	Applied deletion

	Removed the following rules: 0 1
	
	Eliminating location [5] by chaining:

	Applied chaining

	First rule:
	[3] -> [5] : (-m+n > 0 /\ m > 0), cost: 1
	Second rule:
	[5] -> [6] : i'=0, T, cost: 1
	New rule:
	[3] -> [6] : i'=0, (-m+n > 0 /\ m > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 2 3
	
	Eliminating location [6] by chaining:

	Applied chaining

	First rule:
	[3] -> [6] : i'=0, (-m+n > 0 /\ m > 0), cost: 1
	Second rule:
	[6] -> [7] : j'=0, T, cost: 1
	New rule:
	[3] -> [7] : i'=0, j'=0, (-m+n > 0 /\ m > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 4 18
	
	Eliminating location [15] by chaining:

	Applied chaining

	First rule:
	[7] -> [15] : i-n >= 0, cost: 1
	Second rule:
	[15] -> [4] : T, cost: 1
	New rule:
	[7] -> [4] : i-n >= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 14 15
	
	Eliminating location [10] by chaining:

	Applied chaining

	First rule:
	[8] -> [10] : j-m < 0, cost: 1
	Second rule:
	[10] -> [11] : j'=1+j, T, cost: 1
	New rule:
	[8] -> [11] : j'=1+j, j-m < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 6 7
	
	Eliminating location [12] by chaining:

	Applied chaining

	First rule:
	[8] -> [12] : j-m >= 0, cost: 1
	Second rule:
	[12] -> [13] : j'=0, T, cost: 1
	New rule:
	[8] -> [13] : j'=0, j-m >= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 9 10
	
	Eliminating location [11] by chaining:

	Applied chaining

	First rule:
	[8] -> [11] : j'=1+j, j-m < 0, cost: 1
	Second rule:
	[11] -> [9] : T, cost: 1
	New rule:
	[8] -> [9] : j'=1+j, j-m < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 8 21
	
	Eliminating location [13] by chaining:

	Applied chaining

	First rule:
	[8] -> [13] : j'=0, j-m >= 0, cost: 1
	Second rule:
	[13] -> [14] : i'=1+i, T, cost: 1
	New rule:
	[8] -> [14] : i'=1+i, j'=0, j-m >= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 11 22
	
	Eliminating location [14] by chaining:

	Applied chaining

	First rule:
	[8] -> [14] : i'=1+i, j'=0, j-m >= 0, cost: 1
	Second rule:
	[14] -> [9] : T, cost: 1
	New rule:
	[8] -> [9] : i'=1+i, j'=0, j-m >= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 12 24

Step with 17

	Trace

	17[T]
	
	Blocked

	[{}, {}]

Step with 16

	Trace

	17[T], 16[(-m+n <= 0)]
	
	Blocked

	[{}, {}, {}]

Backtrack

	Trace

	17[T]
	
	Blocked

	[{}, {16[-m+n <= 0]}]

Step with 16

	Trace

	17[T], 16[(m <= 0)]
	
	Blocked

	[{}, {16[-m+n <= 0]}, {}]

Backtrack

	Trace

	17[T]
	
	Blocked

	[{}, {16[(-m+n <= 0 /\ m <= 0)]}]

Step with 19

	Trace

	17[T], 19[(-m+n > 0 /\ m > 0)]
	
	Blocked

	[{}, {16[T]}, {}]

Step with 5

	Trace

	17[T], 19[(-m+n > 0 /\ m > 0)], 5[(i-n < 0)]
	
	Blocked

	[{}, {16[T]}, {20[T]}, {}]

Step with 23

	Trace

	17[T], 19[(-m+n > 0 /\ m > 0)], 5[(i-n < 0)], 23[(j-m < 0)]
	
	Blocked

	[{}, {16[T]}, {20[T]}, {}, {}]

Step with 13

	Trace

	17[T], 19[(-m+n > 0 /\ m > 0)], 5[(i-n < 0)], 23[(j-m < 0)], 13[T]
	
	Blocked

	[{}, {16[T]}, {20[T]}, {}, {}, {}]

Accelerate

Start location: [1]
Program variables: i j m n
  17: [1] -> [3] : m'=nondet1, n'=nondet, T, cost: 1
  16: [3] -> [4] : (-m+n <= 0 \/ m <= 0), cost: 1
  19: [3] -> [7] : i'=0, j'=0, (-m+n > 0 /\ m > 0), cost: 1
   5: [7] -> [8] : i-n < 0, cost: 1
  20: [7] -> [4] : i-n >= 0, cost: 1
  26: [7] -> [7] : j'=j+n8, (-i+n > 0 /\ -1+n8 >= 0 /\ 1-j-n8+m > 0), cost: 1
  23: [8] -> [9] : j'=1+j, j-m < 0, cost: 1
  25: [8] -> [9] : i'=1+i, j'=0, j-m >= 0, cost: 1
  13: [9] -> [7] : T, cost: 1

	Loop Acceleration

	Original rule:
	[7] -> [7] : j'=1+j, (i-n < 0 /\ j-m < 0), cost: 1
	New rule:
	[7] -> [7] : j'=j+n8, (-i+n > 0 /\ -1+n8 >= 0 /\ 1-j-n8+m > 0), cost: 1

		-i+n > 0 [0]: monotonic increase yields -i+n > 0
		
		-j+m > 0 [0]: montonic decrease yields 1-j-n8+m > 0
		
		-j+m > 0 [1]: eventual increase yields (1 <= 0 /\ -j+m > 0)
		
		Replacement map: {-i+n > 0 -> -i+n > 0, -j+m > 0 -> 1-j-n8+m > 0}

	Trace

	17[T], 19[(-m+n > 0 /\ m > 0)], 26[(-i+n > 0 /\ -1+n8 >= 0 /\ 1-j-n8+m > 0)]
	
	Blocked

	[{}, {16[T]}, {20[T]}, {26[T]}]

Step with 5

	Trace

	17[T], 19[(-m+n > 0 /\ m > 0)], 26[(-i+n > 0 /\ -1+n8 >= 0 /\ 1-j-n8+m > 0)], 5[(i-n < 0)]
	
	Blocked

	[{}, {16[T]}, {20[T]}, {20[T], 26[T]}, {}]

Step with 23

	Trace

	17[T], 19[(-m+n > 0 /\ m > 0)], 26[(-i+n > 0 /\ -1+n8 >= 0 /\ 1-j-n8+m > 0)], 5[(i-n < 0)], 23[(j-m < 0)]
	
	Blocked

	[{}, {16[T]}, {20[T]}, {20[T], 26[T]}, {}, {}]

Step with 13

	Trace

	17[T], 19[(-m+n > 0 /\ m > 0)], 26[(-i+n > 0 /\ -1+n8 >= 0 /\ 1-j-n8+m > 0)], 5[(i-n < 0)], 23[(j-m < 0)], 13[T]
	
	Blocked

	[{}, {16[T]}, {20[T]}, {20[T], 26[T]}, {}, {}, {}]

Covered

	Trace

	17[T], 19[(-m+n > 0 /\ m > 0)], 26[(-i+n > 0 /\ -1+n8 >= 0 /\ 1-j-n8+m > 0)], 5[(i-n < 0)], 23[(j-m < 0)]
	
	Blocked

	[{}, {16[T]}, {20[T]}, {20[T], 26[T]}, {}, {13[T]}]

Backtrack

	Trace

	17[T], 19[(-m+n > 0 /\ m > 0)], 26[(-i+n > 0 /\ -1+n8 >= 0 /\ 1-j-n8+m > 0)], 5[(i-n < 0)]
	
	Blocked

	[{}, {16[T]}, {20[T]}, {20[T], 26[T]}, {23[T]}]

Step with 25

	Trace

	17[T], 19[(-m+n > 0 /\ m > 0)], 26[(-i+n > 0 /\ -1+n8 >= 0 /\ 1-j-n8+m > 0)], 5[(i-n < 0)], 25[(j-m >= 0)]
	
	Blocked

	[{}, {16[T]}, {20[T]}, {20[T], 26[T]}, {23[T]}, {}]

Step with 13

	Trace

	17[T], 19[(-m+n > 0 /\ m > 0)], 26[(-i+n > 0 /\ -1+n8 >= 0 /\ 1-j-n8+m > 0)], 5[(i-n < 0)], 25[(j-m >= 0)], 13[T]
	
	Blocked

	[{}, {16[T]}, {20[T]}, {20[T], 26[T]}, {23[T]}, {}, {}]

Accelerate and Drop

Start location: [1]
Program variables: i j m n
  17: [1] -> [3] : m'=nondet1, n'=nondet, T, cost: 1
  16: [3] -> [4] : (-m+n <= 0 \/ m <= 0), cost: 1
  19: [3] -> [7] : i'=0, j'=0, (-m+n > 0 /\ m > 0), cost: 1
   5: [7] -> [8] : i-n < 0, cost: 1
  20: [7] -> [4] : i-n >= 0, cost: 1
  26: [7] -> [7] : j'=j+n8, (-i+n > 0 /\ -1+n8 >= 0 /\ 1-j-n8+m > 0), cost: 1
  27: [7] -> [7] : i'=i+n15, j'=0, (1-i-n15+n > 0 /\ -1+n15 >= 0 /\ j-m >= 0 /\ -m >= 0), cost: 1
  23: [8] -> [9] : j'=1+j, j-m < 0, cost: 1
  25: [8] -> [9] : i'=1+i, j'=0, j-m >= 0, cost: 1
  13: [9] -> [7] : T, cost: 1

	Loop Acceleration

	Original rule:
	[7] -> [7] : i'=1+i, j'=0, (i-n < 0 /\ j-m >= 0), cost: 1
	New rule:
	[7] -> [7] : i'=i+n15, j'=0, (1-i-n15+n > 0 /\ -1+n15 >= 0 /\ j-m >= 0 /\ -m >= 0), cost: 1

		-i+n > 0 [0]: montonic decrease yields 1-i-n15+n > 0
		
		-i+n > 0 [1]: eventual increase yields (-i+n > 0 /\ 1 <= 0)
		
		j-m >= 0 [0]: eventual decrease yields (j-m >= 0 /\ -m >= 0)
		
		j-m >= 0 [1]: eventual increase yields (j <= 0 /\ j-m >= 0)
		
		Replacement map: {-i+n > 0 -> 1-i-n15+n > 0, j-m >= 0 -> (j-m >= 0 /\ -m >= 0)}

	Trace

	17[T], 19[(-m+n > 0 /\ m > 0)], 26[(-i+n > 0 /\ -1+n8 >= 0 /\ 1-j-n8+m > 0)]
	
	Blocked

	[{}, {16[T]}, {20[T]}, {20[T], 26[T]}]

Step with 5

	Trace

	17[T], 19[(-m+n > 0 /\ m > 0)], 26[(-i+n > 0 /\ -1+n8 >= 0 /\ 1-j-n8+m > 0)], 5[(i-n < 0)]
	
	Blocked

	[{}, {16[T]}, {20[T]}, {20[T], 26[T]}, {}]

Step with 25

	Trace

	17[T], 19[(-m+n > 0 /\ m > 0)], 26[(-i+n > 0 /\ -1+n8 >= 0 /\ 1-j-n8+m > 0)], 5[(i-n < 0)], 25[(j-m >= 0)]
	
	Blocked

	[{}, {16[T]}, {20[T]}, {20[T], 26[T]}, {}, {}]

Step with 13

	Trace

	17[T], 19[(-m+n > 0 /\ m > 0)], 26[(-i+n > 0 /\ -1+n8 >= 0 /\ 1-j-n8+m > 0)], 5[(i-n < 0)], 25[(j-m >= 0)], 13[T]
	
	Blocked

	[{}, {16[T]}, {20[T]}, {20[T], 26[T]}, {}, {}, {}]

Covered

	Trace

	17[T], 19[(-m+n > 0 /\ m > 0)], 26[(-i+n > 0 /\ -1+n8 >= 0 /\ 1-j-n8+m > 0)], 5[(i-n < 0)], 25[(j-m >= 0)]
	
	Blocked

	[{}, {16[T]}, {20[T]}, {20[T], 26[T]}, {}, {13[T]}]

Backtrack

	Trace

	17[T], 19[(-m+n > 0 /\ m > 0)], 26[(-i+n > 0 /\ -1+n8 >= 0 /\ 1-j-n8+m > 0)], 5[(i-n < 0)]
	
	Blocked

	[{}, {16[T]}, {20[T]}, {20[T], 26[T]}, {25[T]}]

Step with 23

	Trace

	17[T], 19[(-m+n > 0 /\ m > 0)], 26[(-i+n > 0 /\ -1+n8 >= 0 /\ 1-j-n8+m > 0)], 5[(i-n < 0)], 23[(j-m < 0)]
	
	Blocked

	[{}, {16[T]}, {20[T]}, {20[T], 26[T]}, {25[T]}, {}]

Step with 13

	Trace

	17[T], 19[(-m+n > 0 /\ m > 0)], 26[(-i+n > 0 /\ -1+n8 >= 0 /\ 1-j-n8+m > 0)], 5[(i-n < 0)], 23[(j-m < 0)], 13[T]
	
	Blocked

	[{}, {16[T]}, {20[T]}, {20[T], 26[T]}, {25[T]}, {}, {}]

Covered

	Trace

	17[T], 19[(-m+n > 0 /\ m > 0)], 26[(-i+n > 0 /\ -1+n8 >= 0 /\ 1-j-n8+m > 0)], 5[(i-n < 0)], 23[(j-m < 0)]
	
	Blocked

	[{}, {16[T]}, {20[T]}, {20[T], 26[T]}, {25[T]}, {13[T]}]

Backtrack

	Trace

	17[T], 19[(-m+n > 0 /\ m > 0)], 26[(-i+n > 0 /\ -1+n8 >= 0 /\ 1-j-n8+m > 0)], 5[(i-n < 0)]
	
	Blocked

	[{}, {16[T]}, {20[T]}, {20[T], 26[T]}, {23[T], 25[T]}]

Backtrack

	Trace

	17[T], 19[(-m+n > 0 /\ m > 0)], 26[(-i+n > 0 /\ -1+n8 >= 0 /\ 1-j-n8+m > 0)]
	
	Blocked

	[{}, {16[T]}, {20[T]}, {5[T], 20[T], 26[T]}]

Backtrack

	Trace

	17[T], 19[(-m+n > 0 /\ m > 0)]
	
	Blocked

	[{}, {16[T]}, {20[T], 26[T]}]

Step with 5

	Trace

	17[T], 19[(-m+n > 0 /\ m > 0)], 5[(i-n < 0)]
	
	Blocked

	[{}, {16[T]}, {20[T], 26[T]}, {}]

Step with 23

	Trace

	17[T], 19[(-m+n > 0 /\ m > 0)], 5[(i-n < 0)], 23[(j-m < 0)]
	
	Blocked

	[{}, {16[T]}, {20[T], 26[T]}, {}, {}]

Step with 13

	Trace

	17[T], 19[(-m+n > 0 /\ m > 0)], 5[(i-n < 0)], 23[(j-m < 0)], 13[T]
	
	Blocked

	[{}, {16[T]}, {20[T], 26[T]}, {}, {}, {}]

Covered

	Trace

	17[T], 19[(-m+n > 0 /\ m > 0)], 5[(i-n < 0)], 23[(j-m < 0)]
	
	Blocked

	[{}, {16[T]}, {20[T], 26[T]}, {}, {13[T]}]

Backtrack

	Trace

	17[T], 19[(-m+n > 0 /\ m > 0)], 5[(i-n < 0)]
	
	Blocked

	[{}, {16[T]}, {20[T], 26[T]}, {23[T]}]

Backtrack

	Trace

	17[T], 19[(-m+n > 0 /\ m > 0)]
	
	Blocked

	[{}, {16[T]}, {5[T], 20[T], 26[T]}]

Backtrack

	Trace

	17[T]
	
	Blocked

	[{}, {16[T], 19[T]}]

Backtrack

	Trace

	Blocked

	[{17[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
