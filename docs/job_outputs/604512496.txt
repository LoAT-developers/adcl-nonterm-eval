NO

Initial ITS

Start location: [1]
Program variables: choose death life temp
   0: [1] -> [2] : choose'=2, T, cost: 1
   1: [2] -> [3] : life'=13, T, cost: 1
   2: [3] -> [4] : death'=17, T, cost: 1
   3: [4] -> [5] : life-death < 0, cost: 1
  12: [4] -> [12] : life-death >= 0, cost: 1
   4: [5] -> [6] : temp'=death, T, cost: 1
   5: [6] -> [7] : death'=1+life, T, cost: 1
   6: [7] -> [8] : life'=temp, T, cost: 1
   7: [8] -> [10] : (-death+choose < 0 \/ -life+choose < 0), cost: 1
  10: [8] -> [9] : (-death+choose >= 0 /\ -life+choose >= 0), cost: 1
  11: [9] -> [4] : T, cost: 1
   8: [10] -> [11] : life'=choose, T, cost: 1
   9: [11] -> [9] : T, cost: 1

Chained Linear Paths

Start location: [1]
Program variables: choose death life temp
  14: [1] -> [4] : choose'=2, death'=17, life'=13, T, cost: 1
  12: [4] -> [12] : life-death >= 0, cost: 1
  17: [4] -> [8] : death'=1+life, life'=death, temp'=death, life-death < 0, cost: 1
  10: [8] -> [9] : (-death+choose >= 0 /\ -life+choose >= 0), cost: 1
  19: [8] -> [9] : life'=choose, (-death+choose < 0 \/ -life+choose < 0), cost: 1
  11: [9] -> [4] : T, cost: 1

	Eliminating location [2] by chaining:

	Applied chaining

	First rule:
	[1] -> [2] : choose'=2, T, cost: 1
	Second rule:
	[2] -> [3] : life'=13, T, cost: 1
	New rule:
	[1] -> [3] : choose'=2, life'=13, T, cost: 1
	
	Applied deletion

	Removed the following rules: 0 1
	
	Eliminating location [3] by chaining:

	Applied chaining

	First rule:
	[1] -> [3] : choose'=2, life'=13, T, cost: 1
	Second rule:
	[3] -> [4] : death'=17, T, cost: 1
	New rule:
	[1] -> [4] : choose'=2, death'=17, life'=13, T, cost: 1
	
	Applied deletion

	Removed the following rules: 2 13
	
	Eliminating location [5] by chaining:

	Applied chaining

	First rule:
	[4] -> [5] : life-death < 0, cost: 1
	Second rule:
	[5] -> [6] : temp'=death, T, cost: 1
	New rule:
	[4] -> [6] : temp'=death, life-death < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 3 4
	
	Eliminating location [6] by chaining:

	Applied chaining

	First rule:
	[4] -> [6] : temp'=death, life-death < 0, cost: 1
	Second rule:
	[6] -> [7] : death'=1+life, T, cost: 1
	New rule:
	[4] -> [7] : death'=1+life, temp'=death, life-death < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 5 15
	
	Eliminating location [7] by chaining:

	Applied chaining

	First rule:
	[4] -> [7] : death'=1+life, temp'=death, life-death < 0, cost: 1
	Second rule:
	[7] -> [8] : life'=temp, T, cost: 1
	New rule:
	[4] -> [8] : death'=1+life, life'=death, temp'=death, life-death < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 6 16
	
	Eliminating location [10] by chaining:

	Applied chaining

	First rule:
	[8] -> [10] : (-death+choose < 0 \/ -life+choose < 0), cost: 1
	Second rule:
	[10] -> [11] : life'=choose, T, cost: 1
	New rule:
	[8] -> [11] : life'=choose, (-death+choose < 0 \/ -life+choose < 0), cost: 1
	
	Applied deletion

	Removed the following rules: 7 8
	
	Eliminating location [11] by chaining:

	Applied chaining

	First rule:
	[8] -> [11] : life'=choose, (-death+choose < 0 \/ -life+choose < 0), cost: 1
	Second rule:
	[11] -> [9] : T, cost: 1
	New rule:
	[8] -> [9] : life'=choose, (-death+choose < 0 \/ -life+choose < 0), cost: 1
	
	Applied deletion

	Removed the following rules: 9 18

Step with 14

	Trace

	14[T]
	
	Blocked

	[{}, {}]

Step with 17

	Trace

	14[T], 17[(life-death < 0)]
	
	Blocked

	[{}, {12[T]}, {}]

Step with 19

	Trace

	14[T], 17[(life-death < 0)], 19[(-death+choose < 0)]
	
	Blocked

	[{}, {12[T]}, {10[T]}, {}]

Step with 11

	Trace

	14[T], 17[(life-death < 0)], 19[(-death+choose < 0)], 11[T]
	
	Blocked

	[{}, {12[T]}, {10[T]}, {}, {}]

Nonterm

Start location: [1]
Program variables: choose death life temp
  14: [1] -> [4] : choose'=2, death'=17, life'=13, T, cost: 1
  12: [4] -> [12] : life-death >= 0, cost: 1
  17: [4] -> [8] : death'=1+life, life'=death, temp'=death, life-death < 0, cost: 1
  20: [4] -> LoAT_sink : (1+life-choose > 0 /\ 1 > 0 /\ -life+death > 0 /\ -1+n >= 0), cost: NONTERM
  21: [4] -> [4] : death'=1+choose, life'=choose, temp'=1+choose, (1+life-choose > 0 /\ -life+death > 0), cost: 1
  10: [8] -> [9] : (-death+choose >= 0 /\ -life+choose >= 0), cost: 1
  19: [8] -> [9] : life'=choose, (-death+choose < 0 \/ -life+choose < 0), cost: 1
  11: [9] -> [4] : T, cost: 1

	unrolling

	Original rule:
	[4] -> [4] : death'=1+life, life'=choose, temp'=death, (life-death < 0 /\ -1-life+choose < 0), cost: 1
	New rule:
	[4] -> [4] : death'=1+choose, life'=choose, temp'=1+choose, (life-death < 0 /\ -1-life+choose < 0 /\ -1 < 0), cost: 1
	
	Certificate of Non-Termination

	Original rule:
	[4] -> [4] : death'=1+choose, life'=choose, temp'=1+choose, (life-death < 0 /\ -1-life+choose < 0 /\ -1 < 0), cost: 1
	New rule:
	[4] -> LoAT_sink : (1+life-choose > 0 /\ 1 > 0 /\ -life+death > 0 /\ -1+n >= 0), cost: NONTERM

		1+life-choose > 0 [0]: monotonic increase yields 1+life-choose > 0
		
		1 > 0 [0]: monotonic increase yields 1 > 0
		
		-life+death > 0 [0]: monotonic increase yields -life+death > 0
		
		Replacement map: {1+life-choose > 0 -> 1+life-choose > 0, 1 > 0 -> 1 > 0, -life+death > 0 -> -life+death > 0}

	Loop Acceleration

	Original rule:
	[4] -> [4] : death'=1+choose, life'=choose, temp'=1+choose, (life-death < 0 /\ -1-life+choose < 0 /\ -1 < 0), cost: 1
	New rule:
	[4] -> [4] : death'=1+choose, life'=choose, temp'=1+choose, (1+life-choose > 0 /\ 1 > 0 /\ -life+death > 0 /\ -1+n >= 0), cost: 1

		1+life-choose > 0 [0]: monotonic increase yields 1+life-choose > 0
		
		1 > 0 [0]: monotonic increase yields 1 > 0
		
		-life+death > 0 [0]: monotonic increase yields -life+death > 0
		
		Replacement map: {1+life-choose > 0 -> 1+life-choose > 0, 1 > 0 -> 1 > 0, -life+death > 0 -> -life+death > 0}

	Simplified Guard

	Original rule:
	[4] -> [4] : death'=1+choose, life'=choose, temp'=1+choose, (1+life-choose > 0 /\ 1 > 0 /\ -life+death > 0 /\ -1+n >= 0), cost: 1
	New rule:
	[4] -> [4] : death'=1+choose, life'=choose, temp'=1+choose, (1+life-choose > 0 /\ -life+death > 0 /\ -1+n >= 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	[4] -> [4] : death'=1+choose, life'=choose, temp'=1+choose, (1+life-choose > 0 /\ -life+death > 0 /\ -1+n >= 0), cost: 1
	New rule:
	[4] -> [4] : death'=1+choose, life'=choose, temp'=1+choose, (1+life-choose > 0 /\ -life+death > 0), cost: 1

Step with 20

	Trace

	14[T], 20[(1+life-choose > 0 /\ 1 > 0 /\ -life+death > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {12[T]}, {20[T]}]

Refute

	Counterexample

	[ choose=2 death=17 life=13 temp=0 ] 14 [ choose=choose death=death life=life temp=0 ] 20
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
