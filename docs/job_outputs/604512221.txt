NO

Initial ITS

Start location: [1]
Program variables: x y
   0: [1] -> [2] : x'=nondet, T, cost: 1
   1: [2] -> [3] : y'=nondet1, T, cost: 1
   2: [3] -> [4] : (y > 0 /\ x > 0), cost: 1
   5: [3] -> [6] : (y <= 0 \/ x <= 0), cost: 1
   3: [4] -> [5] : x'=10*y-2*x, T, cost: 1
   4: [5] -> [3] : T, cost: 1

Chained Linear Paths

Start location: [1]
Program variables: x y
   6: [1] -> [3] : x'=nondet, y'=nondet1, T, cost: 1
   5: [3] -> [6] : (y <= 0 \/ x <= 0), cost: 1
   8: [3] -> [3] : x'=10*y-2*x, (y > 0 /\ x > 0), cost: 1

	Eliminating location [2] by chaining:

	Applied chaining

	First rule:
	[1] -> [2] : x'=nondet, T, cost: 1
	Second rule:
	[2] -> [3] : y'=nondet1, T, cost: 1
	New rule:
	[1] -> [3] : x'=nondet, y'=nondet1, T, cost: 1
	
	Applied deletion

	Removed the following rules: 0 1
	
	Eliminating location [4] by chaining:

	Applied chaining

	First rule:
	[3] -> [4] : (y > 0 /\ x > 0), cost: 1
	Second rule:
	[4] -> [5] : x'=10*y-2*x, T, cost: 1
	New rule:
	[3] -> [5] : x'=10*y-2*x, (y > 0 /\ x > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 2 3
	
	Eliminating location [5] by chaining:

	Applied chaining

	First rule:
	[3] -> [5] : x'=10*y-2*x, (y > 0 /\ x > 0), cost: 1
	Second rule:
	[5] -> [3] : T, cost: 1
	New rule:
	[3] -> [3] : x'=10*y-2*x, (y > 0 /\ x > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 4 7

Unrolled Loops

Start location: [1]
Program variables: x y
   6: [1] -> [3] : x'=nondet, y'=nondet1, T, cost: 1
   5: [3] -> [6] : (y <= 0 \/ x <= 0), cost: 1
   8: [3] -> [3] : x'=10*y-2*x, (y > 0 /\ x > 0), cost: 1
   9: [3] -> [3] : x'=-10*y+4*x, (10*y-2*x > 0 /\ y > 0 /\ x > 0), cost: 1

	Unrolling

	Original rule:
	[3] -> [3] : x'=10*y-2*x, (y > 0 /\ x > 0), cost: 1
	New rule:
	[3] -> [3] : x'=-10*y+4*x, (10*y-2*x > 0 /\ y > 0 /\ x > 0), cost: 1

Step with 6

	Trace

	6[T]
	
	Blocked

	[{}, {}]

Step with 5

	Trace

	6[T], 5[(y <= 0)]
	
	Blocked

	[{}, {}, {}]

Backtrack

	Trace

	6[T]
	
	Blocked

	[{}, {5[y <= 0]}]

Step with 5

	Trace

	6[T], 5[(x <= 0)]
	
	Blocked

	[{}, {5[y <= 0]}, {}]

Backtrack

	Trace

	6[T]
	
	Blocked

	[{}, {5[(y <= 0 /\ x <= 0)]}]

Step with 8

	Trace

	6[T], 8[(y > 0 /\ x > 0)]
	
	Blocked

	[{}, {5[T]}, {}]

Nonterm

Start location: [1]
Program variables: x y
   6: [1] -> [3] : x'=nondet, y'=nondet1, T, cost: 1
   5: [3] -> [6] : (y <= 0 \/ x <= 0), cost: 1
   8: [3] -> [3] : x'=10*y-2*x, (y > 0 /\ x > 0), cost: 1
   9: [3] -> [3] : x'=-10*y+4*x, (10*y-2*x > 0 /\ y > 0 /\ x > 0), cost: 1
  10: [3] -> LoAT_sink : (10*y-2*x > 0 /\ 10*y-3*x <= 0 /\ -20*y+6*x <= 0 /\ y > 0 /\ x > 0), cost: NONTERM

	unrolling

	Original rule:
	[3] -> [3] : x'=10*y-2*x, (y > 0 /\ x > 0), cost: 1
	New rule:
	[3] -> [3] : x'=-10*y+4*x, (10*y-2*x > 0 /\ y > 0 /\ x > 0), cost: 1
	
	Certificate of Non-Termination

	Original rule:
	[3] -> [3] : x'=-10*y+4*x, (10*y-2*x > 0 /\ y > 0 /\ x > 0), cost: 1
	New rule:
	[3] -> LoAT_sink : (10*y-2*x > 0 /\ 10*y-3*x <= 0 /\ -20*y+6*x <= 0 /\ y > 0 /\ x > 0), cost: NONTERM

		10*y-2*x > 0 [0]: montonic decrease yields -2*4^(-1+n)*x+10/3*y+20/3*y*4^(-1+n) > 0, dependencies: y > 0
		
		10*y-2*x > 0 [1]: eventual decrease yields (10*y-2*x > 0 /\ -2*4^(-1+n)*x+10/3*y+20/3*y*4^(-1+n) > 0)
		
		10*y-2*x > 0 [2]: eventual increase yields (10*y-2*x > 0 /\ -20*y+6*x <= 0)
		
		y > 0 [0]: monotonic increase yields y > 0
		
		x > 0 [0]: montonic decrease yields 4^(-1+n)*x+10/3*y-10/3*y*4^(-1+n) > 0, dependencies: 10*y-2*x > 0
		
		x > 0 [1]: eventual increase yields (10*y-3*x <= 0 /\ x > 0)
		
		Replacement map: {10*y-2*x > 0 -> (10*y-2*x > 0 /\ -20*y+6*x <= 0), y > 0 -> y > 0, x > 0 -> (10*y-3*x <= 0 /\ x > 0)}

Step with 10

	Trace

	6[T], 10[(10*y-2*x > 0 /\ 10*y-3*x <= 0 /\ -20*y+6*x <= 0 /\ y > 0 /\ x > 0)]
	
	Blocked

	[{}, {5[T]}, {10[T]}]

Refute

	Counterexample

	[ x=10 y=3 ] 6 [ x=x y=y ] 10
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
