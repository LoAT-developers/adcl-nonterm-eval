YES

Solver Timeout: 4
Global Timeout: 300
Maximum number of concurrent processes: 900
*******************************************************************************************
*********************** UNPROCESSED TRANSITION SYSTEMS PER FUNCTION ***********************
*******************************************************************************************


List of LLVMGraphs + assumeNodes + staticAssertNodes [1] :

+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++
+                                                                  +
Init Location: 0
Transitions:
<l0, l1, true, seq{main__func_return_ -> 0, main_i -> Â¿functionCall(__VERIFIER_nondet_int), main_j -> Â¿functionCall(__VERIFIER_nondet_int), main_c -> 0}>
<l1, l2, true>
<l2, l10, not((main_i >= 0))>
<l2, l3, (main_i >= 0)>
<l3, l4, true, seq{main_j -> 0}>
<l4, l5, true>
<l5, l8, not((main_j <= (main_i - 1)))>
<l5, l6, (main_j <= (main_i - 1))>
<l6, l7, true, seq{main_j -> (main_j + 1), main_c -> (main_c + 1)}>
<l7, l5, true>
<l8, l9, true, seq{main_i -> (main_i - 1)}>
<l9, l2, true>
<l10, l11, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

+ Assume Nodes [0]: ++++++++++++++++++++++++++++++++++++++++++++++++
       
+ Static Assert Nodes [0]: +++++++++++++++++++++++++++++++++++++++++
       
+ After preprocess (paralelization): ++++++++++++++++++++++++++++++

Init Location: 0
Transitions:
<l0, l12, true, seq{main__func_return_ -> 0}>
<l12, l13, true, seq{varCall_1 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l13, l14, true, seq{main_i -> varCall_1}>
<l14, l15, true, seq{varCall_2 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l15, l1, true, seq{main_j -> varCall_2, main_c -> 0}>
<l1, l2, true>
<l2, l3, (main_i >= 0)>
<l2, l10, not((main_i >= 0))>
<l3, l4, true, seq{main_j -> 0}>
<l4, l5, true>
<l5, l6, (main_j <= (main_i - 1))>
<l5, l8, not((main_j <= (main_i - 1)))>
<l6, l7, true, seq{main_j -> (main_j + 1), main_c -> (main_c + 1)}>
<l7, l5, true>
<l8, l9, true, seq{main_i -> (main_i - 1)}>
<l9, l2, true>
<l10, l11, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:
11, 
Accepting locations:

Asserts:

+                                                                  +
+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++


Function Return and Parameters Information [2 functions]:
    function name: __VERIFIER_nondet_int [1 return + 0 parameters]        demangled: __VERIFIER_nondet_int
        __VERIFIER_nondet_int__func_return_      [function result] : int
    function name: main [1 return + 0 parameters]        demangled: main
        main__func_return_      [function result] : int


AST Ident Scanner Information [5 idents]:
__VERIFIER_nondet_int | function | [integer, ()] | <line: 3, col: 1> | <line: 7, col: 9> <line: 8, col: 9>
main | function | [integer, ()] | <line: 5, col: 1>
c | local variable | integer | <line: 6, col: 5> | <line: 9, col: 5> <line: 14, col: 13> <line: 14, col: 17>
i | local variable | integer | <line: 6, col: 5> | <line: 7, col: 5> <line: 10, col: 12> <line: 12, col: 21> <line: 16, col: 9> <line: 16, col: 13>
j | local variable | integer | <line: 6, col: 5> | <line: 8, col: 5> <line: 11, col: 9> <line: 12, col: 16> <line: 13, col: 13> <line: 13, col: 17>

Main function: main
Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l5, (main_c = 0) /\ (main_i = undef3) /\ (undef3 >= 0), par{main_j -> 0}>
<l0, l11, (main_c = 0) /\ (main_i = undef3) /\ not((undef3 >= 0)), par{main_j -> undef4}>
<l5, l5, (main_j <= (main_i - 1)), par{main_c -> (main_c + 1), main_j -> (main_j + 1)}>
<l5, l5, not((main_j <= (main_i - 1))) /\ ((main_i - 1) >= 0), par{main_i -> (main_i - 1), main_j -> 0}>
<l5, l11, not((main_j <= (main_i - 1))) /\ not(((main_i - 1) >= 0)), par{main_i -> (main_i - 1)}>

Fresh variables:
undef3, undef4, 

Undef variables:
undef3, undef4, 

Abstraction variables:

Exit nodes:
11, 
Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l5, l5, 1 + main_j <= main_i, {main_c -> 1 + main_c, main_j -> 1 + main_j, rest remain the same}>
<l5, l5, main_i <= main_j /\ 1 <= main_i, {main_i -> -1 + main_i, main_j -> 0, rest remain the same}>
Variables:
main_c, main_i, main_j

Graph 2:
Transitions:
Variables:

Precedence: 
Graph 0

Graph 1
<l0, l5, 0 <= undef3 /\ main_c = 0 /\ main_i = undef3, {main_j -> 0, rest remain the same}>

Graph 2
<l0, l11, 1 + undef3 <= 0 /\ main_c = 0 /\ main_i = undef3, {main_j -> undef4, rest remain the same}>
<l5, l11, main_i <= 0 /\ main_i <= main_j, {main_i -> -1 + main_i, rest remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 5 , 1 )
( 11 , 2 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.002298

Checking conditional termination of SCC {l5}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000587s
[33mRanking function: [36m-1 + main_i[0m
New Graphs: 
Transitions:
<l5, l5, 1 + main_j <= main_i, {main_c -> 1 + main_c, main_j -> 1 + main_j, rest remain the same}>
Variables:
main_c, main_i, main_j
Checking conditional termination of SCC {l5}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000275s
[33mRanking function: [36m-1 + main_i - main_j[0m
New Graphs: 
Proving termination of subgraph 2
Analyzing SCC {l11}...
No cycles found.

[32mProgram Terminates[0m
