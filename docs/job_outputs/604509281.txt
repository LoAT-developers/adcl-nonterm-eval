YES

Solver Timeout: 4
Global Timeout: 300
No parsing errors!
Init Location: 0
Transitions:
<l0, l6, true>
<l1, l2, (undef4 > ~(1)) /\ (arg2 > 1) /\ (undef1 > ~(1)) /\ (undef5 > undef2) /\ (undef5 > ~(1)) /\ (arg1 > 0), par{arg1 -> undef1, arg2 -> undef2, arg3 -> undef3}>
<l1, l2, (undef9 > ~(1)) /\ (arg2 > 1) /\ (undef7 < 1) /\ (undef6 > ~(1)) /\ (arg1 > 0), par{arg1 -> undef6, arg2 -> undef7, arg3 -> undef8}>
<l2, l3, (arg2 > 0), par{arg3 -> arg2}>
<l3, l4, (undef16 > ~(1)) /\ (arg2 > 0) /\ (undef16 < undef17) /\ (arg3 > ~(1)) /\ (undef16 < arg3) /\ (undef18 > undef16) /\ (undef19 < arg2) /\ (undef16 < undef19) /\ (undef20 > undef16) /\ (arg1 >= undef21) /\ ((arg1 - (2 * undef22)) = 0)>
<l4, l3, (undef26 > ~(1)) /\ (arg2 > 0) /\ (undef26 < undef25) /\ (arg3 > ~(1)) /\ (undef26 < arg3) /\ (undef27 > undef26) /\ (undef24 < arg2) /\ (undef26 < undef24) /\ (undef28 > undef26) /\ ((arg1 - (2 * undef29)) = 0) /\ (arg1 >= undef23) /\ ((arg1 - (2 * undef29)) >= 0) /\ ((arg1 - (2 * undef29)) < 2) /\ ((arg1 - (2 * undef23)) < 2) /\ ((arg1 - (2 * undef23)) >= 0), par{arg1 -> undef23, arg2 -> undef24, arg3 -> undef25}>
<l3, l4, (arg3 > ~(1)) /\ (arg2 > 0) /\ (undef33 < arg3) /\ (undef34 < arg2) /\ ((arg1 - (2 * undef35)) = 1) /\ (arg1 >= undef36) /\ (undef34 > ~(1)) /\ (undef34 >= undef37) /\ (undef33 > 0)>
<l4, l3, (arg3 > ~(1)) /\ (arg2 > 0) /\ (undef40 < arg3) /\ (undef41 < arg2) /\ ((arg1 - (2 * undef42)) = 1) /\ (arg1 >= undef38) /\ (undef41 > ~(1)) /\ (undef40 > 0) /\ (undef41 >= undef39) /\ ((arg1 - (2 * undef42)) >= 0) /\ ((arg1 - (2 * undef42)) < 2) /\ ((arg1 - (2 * undef38)) < 2) /\ ((arg1 - (2 * undef38)) >= 0), par{arg1 -> undef38, arg2 -> undef39, arg3 -> undef40}>
<l3, l4, (arg3 > ~(1)) /\ (arg2 > 0) /\ (undef46 < arg3) /\ (undef46 < arg2) /\ ((arg1 - (2 * undef47)) = 1) /\ (undef46 > 0) /\ (arg1 >= undef48)>
<l4, l3, (arg3 > ~(1)) /\ (arg2 > 0) /\ (undef50 < arg3) /\ (undef50 < arg2) /\ ((arg1 - (2 * undef52)) = 1) /\ (arg1 >= undef49) /\ (undef50 > 0) /\ ((arg1 - (2 * undef52)) >= 0) /\ ((arg1 - (2 * undef52)) < 2) /\ ((arg1 - (2 * undef49)) < 2) /\ ((arg1 - (2 * undef49)) >= 0), par{arg1 -> undef49, arg2 -> undef50, arg3 -> undef50}>
<l1, l5, (undef56 > ~(1)) /\ (arg2 > 1) /\ (undef57 > ~(1)) /\ (arg1 > 0), par{arg1 -> (undef57 - 1), arg2 -> undef54, arg3 -> undef55}>
<l5, l5, (arg1 > 0), par{arg1 -> (arg1 - 1), arg2 -> undef59, arg3 -> undef60}>
<l6, l1, true, par{arg1 -> undef61, arg2 -> undef62, arg3 -> undef63}>

Fresh variables:
undef1, undef2, undef3, undef4, undef5, undef6, undef7, undef8, undef9, undef16, undef17, undef18, undef19, undef20, undef21, undef22, undef23, undef24, undef25, undef26, undef27, undef28, undef29, undef33, undef34, undef35, undef36, undef37, undef38, undef39, undef40, undef41, undef42, undef46, undef47, undef48, undef49, undef50, undef52, undef54, undef55, undef56, undef57, undef59, undef60, undef61, undef62, undef63, 

Undef variables:
undef1, undef2, undef3, undef4, undef5, undef6, undef7, undef8, undef9, undef16, undef17, undef18, undef19, undef20, undef21, undef22, undef23, undef24, undef25, undef26, undef27, undef28, undef29, undef33, undef34, undef35, undef36, undef37, undef38, undef39, undef40, undef41, undef42, undef46, undef47, undef48, undef49, undef50, undef52, undef54, undef55, undef56, undef57, undef59, undef60, undef61, undef62, undef63, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l3, (undef4 > ~(1)) /\ (undef62 > 1) /\ (undef1 > ~(1)) /\ (undef5 > undef2) /\ (undef5 > ~(1)) /\ (undef61 > 0) /\ (undef2 > 0), par{arg1 -> undef1, arg2 -> undef2, arg3 -> undef2}>
<l0, l5, (undef56 > ~(1)) /\ (undef62 > 1) /\ (undef57 > ~(1)) /\ (undef61 > 0), par{arg1 -> (undef57 - 1), arg2 -> undef54, arg3 -> undef55}>
<l3, l3, (undef16 > ~(1)) /\ (arg2 > 0) /\ (undef16 < undef17) /\ (arg3 > ~(1)) /\ (undef16 < arg3) /\ (undef18 > undef16) /\ (undef19 < arg2) /\ (undef16 < undef19) /\ (undef20 > undef16) /\ (arg1 >= undef21) /\ ((arg1 - (2 * undef22)) = 0) /\ (undef26 > ~(1)) /\ (arg2 > 0) /\ (undef26 < undef25) /\ (arg3 > ~(1)) /\ (undef26 < arg3) /\ (undef27 > undef26) /\ (undef24 < arg2) /\ (undef26 < undef24) /\ (undef28 > undef26) /\ ((arg1 - (2 * undef29)) = 0) /\ (arg1 >= undef23) /\ ((arg1 - (2 * undef29)) >= 0) /\ ((arg1 - (2 * undef29)) < 2) /\ ((arg1 - (2 * undef23)) < 2) /\ ((arg1 - (2 * undef23)) >= 0), par{arg1 -> undef23, arg2 -> undef24, arg3 -> undef25}>
<l3, l3, (arg3 > ~(1)) /\ (arg2 > 0) /\ (undef33 < arg3) /\ (undef34 < arg2) /\ ((arg1 - (2 * undef35)) = 1) /\ (arg1 >= undef36) /\ (undef34 > ~(1)) /\ (undef34 >= undef37) /\ (undef33 > 0) /\ (arg3 > ~(1)) /\ (arg2 > 0) /\ (undef40 < arg3) /\ (undef41 < arg2) /\ ((arg1 - (2 * undef42)) = 1) /\ (arg1 >= undef38) /\ (undef41 > ~(1)) /\ (undef40 > 0) /\ (undef41 >= undef39) /\ ((arg1 - (2 * undef42)) >= 0) /\ ((arg1 - (2 * undef42)) < 2) /\ ((arg1 - (2 * undef38)) < 2) /\ ((arg1 - (2 * undef38)) >= 0), par{arg1 -> undef38, arg2 -> undef39, arg3 -> undef40}>
<l3, l3, (arg3 > ~(1)) /\ (arg2 > 0) /\ (undef33 < arg3) /\ (undef34 < arg2) /\ ((arg1 - (2 * undef35)) = 1) /\ (arg1 >= undef36) /\ (undef34 > ~(1)) /\ (undef34 >= undef37) /\ (undef33 > 0) /\ (arg3 > ~(1)) /\ (arg2 > 0) /\ (undef50 < arg3) /\ (undef50 < arg2) /\ ((arg1 - (2 * undef52)) = 1) /\ (arg1 >= undef49) /\ (undef50 > 0) /\ ((arg1 - (2 * undef52)) >= 0) /\ ((arg1 - (2 * undef52)) < 2) /\ ((arg1 - (2 * undef49)) < 2) /\ ((arg1 - (2 * undef49)) >= 0), par{arg1 -> undef49, arg2 -> undef50, arg3 -> undef50}>
<l3, l3, (arg3 > ~(1)) /\ (arg2 > 0) /\ (undef46 < arg3) /\ (undef46 < arg2) /\ ((arg1 - (2 * undef47)) = 1) /\ (undef46 > 0) /\ (arg1 >= undef48) /\ (arg3 > ~(1)) /\ (arg2 > 0) /\ (undef40 < arg3) /\ (undef41 < arg2) /\ ((arg1 - (2 * undef42)) = 1) /\ (arg1 >= undef38) /\ (undef41 > ~(1)) /\ (undef40 > 0) /\ (undef41 >= undef39) /\ ((arg1 - (2 * undef42)) >= 0) /\ ((arg1 - (2 * undef42)) < 2) /\ ((arg1 - (2 * undef38)) < 2) /\ ((arg1 - (2 * undef38)) >= 0), par{arg1 -> undef38, arg2 -> undef39, arg3 -> undef40}>
<l3, l3, (arg3 > ~(1)) /\ (arg2 > 0) /\ (undef46 < arg3) /\ (undef46 < arg2) /\ ((arg1 - (2 * undef47)) = 1) /\ (undef46 > 0) /\ (arg1 >= undef48) /\ (arg3 > ~(1)) /\ (arg2 > 0) /\ (undef50 < arg3) /\ (undef50 < arg2) /\ ((arg1 - (2 * undef52)) = 1) /\ (arg1 >= undef49) /\ (undef50 > 0) /\ ((arg1 - (2 * undef52)) >= 0) /\ ((arg1 - (2 * undef52)) < 2) /\ ((arg1 - (2 * undef49)) < 2) /\ ((arg1 - (2 * undef49)) >= 0), par{arg1 -> undef49, arg2 -> undef50, arg3 -> undef50}>
<l5, l5, (arg1 > 0), par{arg1 -> (arg1 - 1), arg2 -> undef59, arg3 -> undef60}>

Fresh variables:
undef1, undef2, undef3, undef4, undef5, undef6, undef7, undef8, undef9, undef16, undef17, undef18, undef19, undef20, undef21, undef22, undef23, undef24, undef25, undef26, undef27, undef28, undef29, undef33, undef34, undef35, undef36, undef37, undef38, undef39, undef40, undef41, undef42, undef46, undef47, undef48, undef49, undef50, undef52, undef54, undef55, undef56, undef57, undef59, undef60, undef61, undef62, undef63, 

Undef variables:
undef1, undef2, undef3, undef4, undef5, undef6, undef7, undef8, undef9, undef16, undef17, undef18, undef19, undef20, undef21, undef22, undef23, undef24, undef25, undef26, undef27, undef28, undef29, undef33, undef34, undef35, undef36, undef37, undef38, undef39, undef40, undef41, undef42, undef46, undef47, undef48, undef49, undef50, undef52, undef54, undef55, undef56, undef57, undef59, undef60, undef61, undef62, undef63, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l5, l5, 1 <= arg1, {arg1 -> -1 + arg1, arg2 -> undef59, arg3 -> undef60, rest remain the same}>
Variables:
arg1, arg2, arg3

Graph 2:
Transitions:
<l3, l3, 1 <= arg2 /\ 1 + undef19 <= arg2 /\ 1 + undef24 <= arg2 /\ 1 + undef16 <= arg3 /\ 1 + undef26 <= arg3 /\ 1 + undef16 <= undef17 /\ 1 + undef16 <= undef18 /\ 1 + undef16 <= undef19 /\ 1 + undef16 <= undef20 /\ 1 + undef26 <= undef24 /\ 1 + undef26 <= undef25 /\ 1 + undef26 <= undef27 /\ 1 + undef26 <= undef28 /\ arg1 <= 1 + 2*undef23 /\ undef21 <= arg1 /\ undef23 <= arg1 /\ 2*undef23 <= arg1 /\ 0 <= arg3 /\ 0 <= undef16 /\ 0 <= undef26 /\ arg1 = 2*undef22 /\ arg1 = 2*undef29, {arg1 -> undef23, arg2 -> undef24, arg3 -> undef25, rest remain the same}>
<l3, l3, 1 <= arg2 /\ 1 + undef34 <= arg2 /\ 1 + undef41 <= arg2 /\ 1 + undef33 <= arg3 /\ 1 + undef40 <= arg3 /\ 1 <= undef33 /\ 1 <= undef40 /\ arg1 <= 1 + 2*undef38 /\ undef36 <= arg1 /\ undef38 <= arg1 /\ 2*undef38 <= arg1 /\ 0 <= arg3 /\ 0 <= undef34 /\ undef37 <= undef34 /\ undef39 <= undef41 /\ 0 <= undef41 /\ arg1 = 1 + 2*undef35 /\ arg1 = 1 + 2*undef42, {arg1 -> undef38, arg2 -> undef39, arg3 -> undef40, rest remain the same}>
<l3, l3, 1 <= arg2 /\ 1 + undef34 <= arg2 /\ 1 + undef50 <= arg2 /\ 1 + undef33 <= arg3 /\ 1 + undef50 <= arg3 /\ 1 <= undef33 /\ 1 <= undef50 /\ arg1 <= 1 + 2*undef49 /\ undef36 <= arg1 /\ undef49 <= arg1 /\ 2*undef49 <= arg1 /\ 0 <= arg3 /\ 0 <= undef34 /\ undef37 <= undef34 /\ arg1 = 1 + 2*undef35 /\ arg1 = 1 + 2*undef52, {arg1 -> undef49, arg2 -> undef50, arg3 -> undef50, rest remain the same}>
<l3, l3, 1 <= arg2 /\ 1 + undef41 <= arg2 /\ 1 + undef46 <= arg2 /\ 1 + undef40 <= arg3 /\ 1 + undef46 <= arg3 /\ 1 <= undef40 /\ 1 <= undef46 /\ arg1 <= 1 + 2*undef38 /\ undef38 <= arg1 /\ 2*undef38 <= arg1 /\ undef48 <= arg1 /\ 0 <= arg3 /\ undef39 <= undef41 /\ 0 <= undef41 /\ arg1 = 1 + 2*undef42 /\ arg1 = 1 + 2*undef47, {arg1 -> undef38, arg2 -> undef39, arg3 -> undef40, rest remain the same}>
<l3, l3, 1 <= arg2 /\ 1 + undef46 <= arg2 /\ 1 + undef50 <= arg2 /\ 1 + undef46 <= arg3 /\ 1 + undef50 <= arg3 /\ 1 <= undef46 /\ 1 <= undef50 /\ arg1 <= 1 + 2*undef49 /\ undef48 <= arg1 /\ undef49 <= arg1 /\ 2*undef49 <= arg1 /\ 0 <= arg3 /\ arg1 = 1 + 2*undef47 /\ arg1 = 1 + 2*undef52, {arg1 -> undef49, arg2 -> undef50, arg3 -> undef50, rest remain the same}>
Variables:
arg1, arg2, arg3

Precedence: 
Graph 0

Graph 1
<l0, l5, 1 <= undef61 /\ 0 <= undef56 /\ 0 <= undef57 /\ 2 <= undef62, {arg1 -> -1 + undef57, arg2 -> undef54, arg3 -> undef55, rest remain the same}>

Graph 2
<l0, l3, 1 + undef2 <= undef5 /\ 1 <= undef2 /\ 1 <= undef61 /\ 0 <= undef1 /\ 0 <= undef4 /\ 0 <= undef5 /\ 2 <= undef62, {arg1 -> undef1, arg2 -> undef2, arg3 -> undef2, rest remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 3 , 2 )
( 5 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.001219

Checking conditional termination of SCC {l5}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000366s
[33mRanking function: [36m-1 + arg1[0m
New Graphs: 
Proving termination of subgraph 2
Checking unfeasibility...
Time used: 0.012522

Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.006603s
[33mRanking function: [36m-2 + arg2[0m
New Graphs: 
Transitions:
<l3, l3, 1 <= arg2 /\ 1 + undef34 <= arg2 /\ 1 + undef41 <= arg2 /\ 1 + undef33 <= arg3 /\ 1 + undef40 <= arg3 /\ 1 <= undef33 /\ 1 <= undef40 /\ arg1 <= 1 + 2*undef38 /\ undef36 <= arg1 /\ undef38 <= arg1 /\ 2*undef38 <= arg1 /\ 0 <= arg3 /\ 0 <= undef34 /\ undef37 <= undef34 /\ undef39 <= undef41 /\ 0 <= undef41 /\ arg1 = 1 + 2*undef35 /\ arg1 = 1 + 2*undef42, {arg1 -> undef38, arg2 -> undef39, arg3 -> undef40, rest remain the same}>
Variables:
arg1, arg2, arg3
Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.001166s
[33mRanking function: [36m-1 + arg2[0m
New Graphs: 
[32mProgram Terminates[0m
