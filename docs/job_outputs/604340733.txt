YES

Solver Timeout: 4
Global Timeout: 300
Maximum number of concurrent processes: 900
*******************************************************************************************
*********************** UNPROCESSED TRANSITION SYSTEMS PER FUNCTION ***********************
*******************************************************************************************


List of LLVMGraphs + assumeNodes + staticAssertNodes [1] :

+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++
+                                                                  +
Init Location: 0
Transitions:
<l0, l1, true, seq{main__func_return_ -> 0, main_x -> Â¿functionCall(__VERIFIER_nondet_int), main_i -> Â¿functionCall(__VERIFIER_nondet_int), main_n -> Â¿functionCall(__VERIFIER_nondet_int), main_m -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l1, l2, true>
<l2, l5, not((main_x < main_n))>
<l2, l3, (main_x < main_n)>
<l3, l4, true, seq{main_i -> (main_i + 1), main_x -> (main_x + 1)}>
<l4, l2, true>
<l5, l6, true>
<l6, l9, not((main_x < main_m))>
<l6, l7, (main_x < main_m)>
<l7, l8, true, seq{main_i -> (main_i + 1), main_x -> (main_x + 1)}>
<l8, l6, true>
<l9, l10, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

+ Assume Nodes [0]: ++++++++++++++++++++++++++++++++++++++++++++++++
       
+ Static Assert Nodes [0]: +++++++++++++++++++++++++++++++++++++++++
       
+ After preprocess (paralelization): ++++++++++++++++++++++++++++++

Init Location: 0
Transitions:
<l0, l11, true, seq{main__func_return_ -> 0}>
<l11, l12, true, seq{varCall_1 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l12, l13, true, seq{main_x -> varCall_1}>
<l13, l14, true, seq{varCall_2 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l14, l15, true, seq{main_i -> varCall_2}>
<l15, l16, true, seq{varCall_3 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l16, l17, true, seq{main_n -> varCall_3}>
<l17, l18, true, seq{varCall_4 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l18, l1, true, seq{main_m -> varCall_4}>
<l1, l2, true>
<l2, l3, (main_x < main_n)>
<l2, l5, not((main_x < main_n))>
<l3, l4, true, seq{main_i -> (main_i + 1), main_x -> (main_x + 1)}>
<l4, l2, true>
<l5, l6, true>
<l6, l7, (main_x < main_m)>
<l6, l9, not((main_x < main_m))>
<l7, l8, true, seq{main_i -> (main_i + 1), main_x -> (main_x + 1)}>
<l8, l6, true>
<l9, l10, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:
10, 
Accepting locations:

Asserts:

+                                                                  +
+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++


Function Return and Parameters Information [2 functions]:
    function name: __VERIFIER_nondet_int [1 return + 0 parameters]        demangled: __VERIFIER_nondet_int
        __VERIFIER_nondet_int__func_return_      [function result] : int
    function name: main [1 return + 0 parameters]        demangled: main
        main__func_return_      [function result] : int


AST Ident Scanner Information [6 idents]:
__VERIFIER_nondet_int | function | [integer, ()] | <line: 11, col: 1> | <line: 15, col: 6> <line: 16, col: 6> <line: 17, col: 6> <line: 18, col: 6>
main | function | [integer, ()] | <line: 13, col: 1>
x | local variable | integer | <line: 14, col: 5> | <line: 15, col: 2> <line: 19, col: 9> <line: 21, col: 3> <line: 21, col: 7> <line: 23, col: 9> <line: 25, col: 3> <line: 25, col: 7>
i | local variable | integer | <line: 14, col: 5> | <line: 16, col: 2> <line: 20, col: 3> <line: 20, col: 7> <line: 24, col: 3> <line: 24, col: 7>
n | local variable | integer | <line: 14, col: 5> | <line: 17, col: 2> <line: 19, col: 13>
m | local variable | integer | <line: 14, col: 5> | <line: 18, col: 2> <line: 23, col: 13>

Main function: main
Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l2, (main_x = undef5) /\ (main_i = undef6) /\ (main_n = undef7) /\ (main_m = undef8)>
<l2, l2, (main_x < main_n), par{main_x -> (main_x + 1), main_i -> (main_i + 1)}>
<l2, l6, not((main_x < main_n))>
<l6, l6, (main_x < main_m), par{main_x -> (main_x + 1), main_i -> (main_i + 1)}>
<l6, l10, not((main_x < main_m))>

Fresh variables:
undef5, undef6, undef7, undef8, 

Undef variables:
undef5, undef6, undef7, undef8, 

Abstraction variables:

Exit nodes:
10, 
Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l2, l2, 1 + main_x <= main_n, {main_x -> 1 + main_x, main_i -> 1 + main_i, rest remain the same}>
Variables:
main_x, main_i, main_n

Graph 2:
Transitions:
<l6, l6, 1 + main_x <= main_m, {main_x -> 1 + main_x, main_i -> 1 + main_i, rest remain the same}>
Variables:
main_x, main_i, main_m

Graph 3:
Transitions:
Variables:

Precedence: 
Graph 0

Graph 1
<l0, l2, main_x = undef5 /\ main_i = undef6 /\ main_n = undef7 /\ main_m = undef8, {all remain the same}>

Graph 2
<l2, l6, main_n <= main_x, {all remain the same}>

Graph 3
<l6, l10, main_m <= main_x, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 2 , 1 )
( 6 , 2 )
( 10 , 3 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.001283

Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000365s
[33mRanking function: [36m-1 - main_x + main_n[0m
New Graphs: 
Proving termination of subgraph 2
Checking unfeasibility...
Time used: 0.000942

Checking conditional termination of SCC {l6}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000369s
[33mRanking function: [36m-1 - main_x + main_m[0m
New Graphs: 
Proving termination of subgraph 3
Analyzing SCC {l10}...
No cycles found.

[32mProgram Terminates[0m
