YES

Solver Timeout: 4
Global Timeout: 300
Maximum number of concurrent processes: 900
*******************************************************************************************
*********************** UNPROCESSED TRANSITION SYSTEMS PER FUNCTION ***********************
*******************************************************************************************


List of LLVMGraphs + assumeNodes + staticAssertNodes [1] :

+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++
+                                                                  +
Init Location: 0
Transitions:
<l0, l1, true, seq{main__func_return_ -> 0, main_x -> Â¿functionCall(__VERIFIER_nondet_int), main_y -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l1, l2, true>
<l2, l12, not((main_y > 0))>
<l2, l3, (main_y > 0)>
<l3, l12, not((main_x > 0))>
<l3, l4, (main_x > 0)>
<l4, l5, true, seq{main_tmp -> main_y, main_xtmp -> main_x}>
<l5, l6, true>
<l6, l10, not((main_xtmp >= main_y))>
<l6, l7, (main_xtmp >= main_y)>
<l7, l10, not((main_y > 0))>
<l7, l8, (main_y > 0)>
<l8, l9, true, seq{main_xtmp -> (main_xtmp - main_y)}>
<l9, l6, true>
<l10, l11, true, seq{main_y -> main_xtmp, main_x -> main_tmp}>
<l11, l2, true>
<l12, l13, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

+ Assume Nodes [0]: ++++++++++++++++++++++++++++++++++++++++++++++++
       
+ Static Assert Nodes [0]: +++++++++++++++++++++++++++++++++++++++++
       
+ After preprocess (paralelization): ++++++++++++++++++++++++++++++

Init Location: 0
Transitions:
<l0, l14, true, seq{main__func_return_ -> 0}>
<l14, l15, true, seq{varCall_1 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l15, l16, true, seq{main_x -> varCall_1}>
<l16, l17, true, seq{varCall_2 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l17, l1, true, seq{main_y -> varCall_2}>
<l1, l2, true>
<l2, l3, (main_y > 0)>
<l2, l12, not((main_y > 0))>
<l3, l4, (main_x > 0)>
<l3, l12, not((main_x > 0))>
<l4, l5, true, seq{main_tmp -> main_y, main_xtmp -> main_x}>
<l5, l6, true>
<l6, l7, (main_xtmp >= main_y)>
<l6, l10, not((main_xtmp >= main_y))>
<l7, l8, (main_y > 0)>
<l7, l10, not((main_y > 0))>
<l8, l9, true, seq{main_xtmp -> (main_xtmp - main_y)}>
<l9, l6, true>
<l10, l11, true, seq{main_y -> main_xtmp, main_x -> main_tmp}>
<l11, l2, true>
<l12, l13, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:
13, 
Accepting locations:

Asserts:

+                                                                  +
+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++


Function Return and Parameters Information [2 functions]:
    function name: __VERIFIER_nondet_int [1 return + 0 parameters]        demangled: __VERIFIER_nondet_int
        __VERIFIER_nondet_int__func_return_      [function result] : int
    function name: main [1 return + 0 parameters]        demangled: main
        main__func_return_      [function result] : int


AST Ident Scanner Information [6 idents]:
__VERIFIER_nondet_int | function | [integer, ()] | <line: 3, col: 1> | <line: 10, col: 9> <line: 11, col: 9>
main | function | [integer, ()] | <line: 5, col: 1>
x | local variable | integer | <line: 6, col: 5> | <line: 10, col: 5> <line: 13, col: 20> <line: 15, col: 16> <line: 22, col: 9>
y | local variable | integer | <line: 7, col: 5> | <line: 11, col: 5> <line: 13, col: 11> <line: 14, col: 15> <line: 17, col: 21> <line: 17, col: 26> <line: 18, col: 27> <line: 21, col: 9>
tmp | local variable | integer | <line: 8, col: 5> | <line: 14, col: 9> <line: 22, col: 13>
xtmp | local variable | integer | <line: 9, col: 5> | <line: 15, col: 9> <line: 17, col: 15> <line: 18, col: 13> <line: 18, col: 20> <line: 21, col: 13>

Main function: main
Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l6, (main_y = undef4) /\ (undef4 > 0) /\ (undef3 > 0), par{main_tmp -> undef4, main_xtmp -> undef3}>
<l0, l13, (main_y = undef4) /\ (undef4 > 0) /\ not((undef3 > 0))>
<l0, l13, (main_y = undef4) /\ not((undef4 > 0))>
<l6, l6, (main_xtmp >= main_y) /\ (main_y > 0), par{main_xtmp -> (main_xtmp - main_y)}>
<l6, l6, (main_xtmp >= main_y) /\ not((main_y > 0)) /\ (main_xtmp > 0) /\ (main_tmp > 0), par{main_y -> main_xtmp, main_tmp -> main_xtmp, main_xtmp -> main_tmp}>
<l6, l13, (main_xtmp >= main_y) /\ not((main_y > 0)) /\ (main_xtmp > 0) /\ not((main_tmp > 0)), par{main_y -> main_xtmp}>
<l6, l13, (main_xtmp >= main_y) /\ not((main_y > 0)) /\ not((main_xtmp > 0)), par{main_y -> main_xtmp}>
<l6, l6, not((main_xtmp >= main_y)) /\ (main_xtmp > 0) /\ (main_tmp > 0), par{main_y -> main_xtmp, main_tmp -> main_xtmp, main_xtmp -> main_tmp}>
<l6, l13, not((main_xtmp >= main_y)) /\ (main_xtmp > 0) /\ not((main_tmp > 0)), par{main_y -> main_xtmp}>
<l6, l13, not((main_xtmp >= main_y)) /\ not((main_xtmp > 0)), par{main_y -> main_xtmp}>

Fresh variables:
undef3, undef4, 

Undef variables:
undef3, undef4, 

Abstraction variables:

Exit nodes:
13, 
Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l6, l6, main_y <= main_xtmp /\ 1 <= main_y, {main_xtmp -> -main_y + main_xtmp, rest remain the same}>
<l6, l6, main_y <= 0 /\ main_y <= main_xtmp /\ 1 <= main_tmp /\ 1 <= main_xtmp, {main_y -> main_xtmp, main_tmp -> main_xtmp, main_xtmp -> main_tmp, rest remain the same}>
<l6, l6, 1 + main_xtmp <= main_y /\ 1 <= main_tmp /\ 1 <= main_xtmp, {main_y -> main_xtmp, main_tmp -> main_xtmp, main_xtmp -> main_tmp, rest remain the same}>
Variables:
main_y, main_xtmp, main_tmp

Graph 2:
Transitions:
Variables:

Precedence: 
Graph 0

Graph 1
<l0, l6, 1 <= undef3 /\ 1 <= undef4 /\ main_y = undef4, {main_tmp -> undef4, main_xtmp -> undef3, rest remain the same}>

Graph 2
<l0, l13, undef3 <= 0 /\ 1 <= undef4 /\ main_y = undef4, {all remain the same}>
<l0, l13, undef4 <= 0 /\ main_y = undef4, {all remain the same}>
<l6, l13, main_y <= 0 /\ main_y <= main_xtmp /\ main_tmp <= 0 /\ 1 <= main_xtmp, {main_y -> main_xtmp, rest remain the same}>
<l6, l13, main_y <= 0 /\ main_y <= main_xtmp /\ main_xtmp <= 0, {main_y -> main_xtmp, rest remain the same}>
<l6, l13, main_tmp <= 0 /\ 1 + main_xtmp <= main_y /\ 1 <= main_xtmp, {main_y -> main_xtmp, rest remain the same}>
<l6, l13, main_xtmp <= 0 /\ 1 + main_xtmp <= main_y, {main_y -> main_xtmp, rest remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 6 , 1 )
( 13 , 2 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.005713
[33mSome transition disabled by a set of invariant(s):[0m
[36mInvariant at l6: main_tmp <= main_y[0m

[33mStrengthening and disabling transitions...[0m
> It's unfeasible. Removing transition: 
<l6, l6, main_y <= 0 /\ main_y <= main_xtmp /\ 1 <= main_tmp /\ 1 <= main_xtmp, {main_y -> main_xtmp, main_tmp -> main_xtmp, main_xtmp -> main_tmp, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l6, l6, main_y <= main_xtmp /\ main_tmp <= main_y /\ 1 <= main_y, {main_xtmp -> -main_y + main_xtmp, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l6, l6, main_tmp <= main_y /\ 1 + main_xtmp <= main_y /\ 1 <= main_tmp /\ 1 <= main_xtmp, {main_y -> main_xtmp, main_tmp -> main_xtmp, main_xtmp -> main_tmp, rest remain the same}>
Checking unfeasibility...
Time used: 0.003299

Checking conditional termination of SCC {l6}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000814s
[33mRanking function: [36m-11 + 4*main_y + 3*main_xtmp[0m
New Graphs: 
Transitions:
<l6, l6, main_y <= main_xtmp /\ main_tmp <= main_y /\ 1 <= main_y, {main_xtmp -> -main_y + main_xtmp, rest remain the same}>
Variables:
main_y, main_tmp, main_xtmp
Checking conditional termination of SCC {l6}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000399s
[33mRanking function: [36m-main_y + main_xtmp[0m
New Graphs: 
Proving termination of subgraph 2
Analyzing SCC {l13}...
No cycles found.

[32mProgram Terminates[0m
