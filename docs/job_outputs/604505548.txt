NO

Initial ITS
Start location: __init
   0: f1_0_main_Load -> f325_0_loop_GT : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (-20-arg2P0 == 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ 20-arg1P0 == 0 /\ arg2-arg3P0 == 0), cost: 1
   1: f325_0_loop_GT -> f325_0_loop_GT : arg2'=arg2P1, arg1'=arg1P1, arg3'=arg3P1, (-arg2P1-arg1 == 0 /\ -5+arg1-arg3 < 0 /\ -arg1+arg3 <= 0 /\ arg1-arg1P1 == 0 /\ -arg2+arg3 >= 0 /\ -arg3-arg3P1 == 0), cost: 1
   2: f325_0_loop_GT -> f325_0_loop_GT : arg2'=arg2P2, arg1'=arg1P2, arg3'=arg3P2, (-5+arg1-arg3 >= 0 /\ -arg1+arg3 <= 0 /\ -5+arg1+arg3 < 0 /\ -arg3-arg3P2 == 0 /\ -arg2+arg3 >= 0 /\ -arg1P2+arg1 == 0 /\ -arg2P2-arg1 == 0), cost: 1
   3: f325_0_loop_GT -> f325_0_loop_GT : arg2'=arg2P3, arg1'=arg1P3, arg3'=arg3P3, (1-arg1P3+arg1 == 0 /\ arg1-arg3 >= 0 /\ -5+arg1-arg3 >= 0 /\ -1+arg3 < 0 /\ -1-arg2P3-arg1 == 0 /\ -5+arg1+arg3 >= 0 /\ -1-arg3P3+arg3 == 0 /\ arg2-arg3 <= 0), cost: 1
   4: f325_0_loop_GT -> f325_0_loop_GT : arg2'=arg2P4, arg1'=arg1P4, arg3'=arg3P4, (arg1-arg3 >= 0 /\ -5+arg1-arg3 >= 0 /\ -1-arg3P4+arg3 == 0 /\ 1-arg1P4+arg1 == 0 /\ -1+arg3 > 0 /\ -5+arg1+arg3 >= 0 /\ -1-arg2P4-arg1 == 0 /\ arg2-arg3 <= 0), cost: 1
   5: f325_0_loop_GT -> f325_0_loop_GT : arg2'=arg2P5, arg1'=arg1P5, arg3'=arg3P5, (-5+arg1 > 0 /\ -1-arg1P5 == 0 /\ -2+arg2 < 0 /\ 1-arg3 == 0 /\ -arg3P5 == 0 /\ 1-arg2P5 == 0), cost: 1
   6: __init -> f1_0_main_Load : arg2'=arg2P6, arg1'=arg1P6, arg3'=arg3P6, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_Load -> f325_0_loop_GT : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (-20-arg2P0 == 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ 20-arg1P0 == 0 /\ arg2-arg3P0 == 0), cost: 1
New rule:
f1_0_main_Load -> f325_0_loop_GT : arg2'=-20, arg1'=20, arg3'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f325_0_loop_GT -> f325_0_loop_GT : arg2'=arg2P1, arg1'=arg1P1, arg3'=arg3P1, (-arg2P1-arg1 == 0 /\ -5+arg1-arg3 < 0 /\ -arg1+arg3 <= 0 /\ arg1-arg1P1 == 0 /\ -arg2+arg3 >= 0 /\ -arg3-arg3P1 == 0), cost: 1
New rule:
f325_0_loop_GT -> f325_0_loop_GT : arg2'=-arg1, arg3'=-arg3, (-arg1+arg3 <= 0 /\ 5-arg1+arg3 > 0 /\ -arg2+arg3 >= 0), cost: 1

Applied preprocessing
Original rule:
f325_0_loop_GT -> f325_0_loop_GT : arg2'=arg2P2, arg1'=arg1P2, arg3'=arg3P2, (-5+arg1-arg3 >= 0 /\ -arg1+arg3 <= 0 /\ -5+arg1+arg3 < 0 /\ -arg3-arg3P2 == 0 /\ -arg2+arg3 >= 0 /\ -arg1P2+arg1 == 0 /\ -arg2P2-arg1 == 0), cost: 1
New rule:
f325_0_loop_GT -> f325_0_loop_GT : arg2'=-arg1, arg3'=-arg3, (5-arg1-arg3 > 0 /\ -5+arg1-arg3 >= 0 /\ -arg2+arg3 >= 0), cost: 1

Applied preprocessing
Original rule:
f325_0_loop_GT -> f325_0_loop_GT : arg2'=arg2P3, arg1'=arg1P3, arg3'=arg3P3, (1-arg1P3+arg1 == 0 /\ arg1-arg3 >= 0 /\ -5+arg1-arg3 >= 0 /\ -1+arg3 < 0 /\ -1-arg2P3-arg1 == 0 /\ -5+arg1+arg3 >= 0 /\ -1-arg3P3+arg3 == 0 /\ arg2-arg3 <= 0), cost: 1
New rule:
f325_0_loop_GT -> f325_0_loop_GT : arg2'=-1-arg1, arg1'=1+arg1, arg3'=-1+arg3, (1-arg3 > 0 /\ -5+arg1+arg3 >= 0 /\ arg2-arg3 <= 0), cost: 1

Applied preprocessing
Original rule:
f325_0_loop_GT -> f325_0_loop_GT : arg2'=arg2P4, arg1'=arg1P4, arg3'=arg3P4, (arg1-arg3 >= 0 /\ -5+arg1-arg3 >= 0 /\ -1-arg3P4+arg3 == 0 /\ 1-arg1P4+arg1 == 0 /\ -1+arg3 > 0 /\ -5+arg1+arg3 >= 0 /\ -1-arg2P4-arg1 == 0 /\ arg2-arg3 <= 0), cost: 1
New rule:
f325_0_loop_GT -> f325_0_loop_GT : arg2'=-1-arg1, arg1'=1+arg1, arg3'=-1+arg3, (-5+arg1-arg3 >= 0 /\ -1+arg3 > 0 /\ arg2-arg3 <= 0), cost: 1

Applied preprocessing
Original rule:
f325_0_loop_GT -> f325_0_loop_GT : arg2'=arg2P5, arg1'=arg1P5, arg3'=arg3P5, (-5+arg1 > 0 /\ -1-arg1P5 == 0 /\ -2+arg2 < 0 /\ 1-arg3 == 0 /\ -arg3P5 == 0 /\ 1-arg2P5 == 0), cost: 1
New rule:
f325_0_loop_GT -> f325_0_loop_GT : arg2'=1, arg1'=-1, arg3'=0, (-5+arg1 > 0 /\ -1+arg3 == 0 /\ 2-arg2 > 0), cost: 1

Simplified rules
Start location: __init
   7: f1_0_main_Load -> f325_0_loop_GT : arg2'=-20, arg1'=20, arg3'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
   8: f325_0_loop_GT -> f325_0_loop_GT : arg2'=-arg1, arg3'=-arg3, (-arg1+arg3 <= 0 /\ 5-arg1+arg3 > 0 /\ -arg2+arg3 >= 0), cost: 1
   9: f325_0_loop_GT -> f325_0_loop_GT : arg2'=-arg1, arg3'=-arg3, (5-arg1-arg3 > 0 /\ -5+arg1-arg3 >= 0 /\ -arg2+arg3 >= 0), cost: 1
  10: f325_0_loop_GT -> f325_0_loop_GT : arg2'=-1-arg1, arg1'=1+arg1, arg3'=-1+arg3, (1-arg3 > 0 /\ -5+arg1+arg3 >= 0 /\ arg2-arg3 <= 0), cost: 1
  11: f325_0_loop_GT -> f325_0_loop_GT : arg2'=-1-arg1, arg1'=1+arg1, arg3'=-1+arg3, (-5+arg1-arg3 >= 0 /\ -1+arg3 > 0 /\ arg2-arg3 <= 0), cost: 1
  12: f325_0_loop_GT -> f325_0_loop_GT : arg2'=1, arg1'=-1, arg3'=0, (-5+arg1 > 0 /\ -1+arg3 == 0 /\ 2-arg2 > 0), cost: 1
   6: __init -> f1_0_main_Load : arg2'=arg2P6, arg1'=arg1P6, arg3'=arg3P6, TRUE, cost: 1


Applied unrolling
Original rule:
f325_0_loop_GT -> f325_0_loop_GT : arg2'=-arg1, arg3'=-arg3, (-arg1+arg3 <= 0 /\ 5-arg1+arg3 > 0 /\ -arg2+arg3 >= 0), cost: 1
New rule:
f325_0_loop_GT -> f325_0_loop_GT : arg2'=-arg1, arg3'=arg3, (5-arg1-arg3 > 0 /\ arg1-arg3 >= 0 /\ -arg1+arg3 <= 0 /\ -arg1-arg3 <= 0 /\ 5-arg1+arg3 > 0 /\ -arg2+arg3 >= 0), cost: 2

Applied acceleration
Original rule:
f325_0_loop_GT -> f325_0_loop_GT : arg2'=-arg1, arg3'=arg3, (5-arg1-arg3 > 0 /\ arg1-arg3 >= 0 /\ -arg1+arg3 <= 0 /\ -arg1-arg3 <= 0 /\ 5-arg1+arg3 > 0 /\ -arg2+arg3 >= 0), cost: 2
New rule:
f325_0_loop_GT -> f325_0_loop_GT : arg2'=-arg1, arg3'=arg3, (5-arg1-arg3 > 0 /\ arg1-arg3 >= 0 /\ -1+n >= 0 /\ 5-arg1+arg3 > 0 /\ -arg2+arg3 >= 0 /\ arg1+arg3 >= 0), cost: 2*n
Sub-proof via acceration calculus written to file:///tmp/tmpnam_LgFbGd.txt

Applied nonterm
Original rule:
f325_0_loop_GT -> f325_0_loop_GT : arg2'=-arg1, arg3'=arg3, (5-arg1-arg3 > 0 /\ arg1-arg3 >= 0 /\ -arg1+arg3 <= 0 /\ -arg1-arg3 <= 0 /\ 5-arg1+arg3 > 0 /\ -arg2+arg3 >= 0), cost: 2
New rule:
f325_0_loop_GT -> [3] : (5-arg1-arg3 > 0 /\ arg1-arg3 >= 0 /\ -arg2-arg1 <= 0 /\ 5-arg1+arg3 > 0 /\ -arg2+arg3 >= 0 /\ arg1+arg3 >= 0), cost: NONTERM
Sub-proof via acceration calculus written to file:///tmp/tmpnam_BccCJj.txt

Applied nonterm
Original rule:
f325_0_loop_GT -> f325_0_loop_GT : arg2'=-1-arg1, arg1'=1+arg1, arg3'=-1+arg3, (1-arg3 > 0 /\ -5+arg1+arg3 >= 0 /\ arg2-arg3 <= 0), cost: 1
New rule:
f325_0_loop_GT -> [3] : (1-arg3 > 0 /\ -5+arg1+arg3 >= 0 /\ -arg2+arg3 >= 0 /\ -1+n0 >= 0), cost: NONTERM
Sub-proof via acceration calculus written to file:///tmp/tmpnam_bilmkP.txt

Applied acceleration
Original rule:
f325_0_loop_GT -> f325_0_loop_GT : arg2'=-1-arg1, arg1'=1+arg1, arg3'=-1+arg3, (-5+arg1-arg3 >= 0 /\ -1+arg3 > 0 /\ arg2-arg3 <= 0), cost: 1
New rule:
f325_0_loop_GT -> f325_0_loop_GT : arg2'=-arg1-n1, arg1'=arg1+n1, arg3'=-n1+arg3, (-n1+arg3 > 0 /\ -5+arg1-arg3 >= 0 /\ -1+arg3 > 0 /\ -1+n1 >= 0 /\ -arg2+arg3 >= 0), cost: n1
Sub-proof via acceration calculus written to file:///tmp/tmpnam_nDefOO.txt

Applied instantiation
Original rule:
f325_0_loop_GT -> f325_0_loop_GT : arg2'=-arg1-n1, arg1'=arg1+n1, arg3'=-n1+arg3, (-n1+arg3 > 0 /\ -5+arg1-arg3 >= 0 /\ -1+arg3 > 0 /\ -1+n1 >= 0 /\ -arg2+arg3 >= 0), cost: n1
New rule:
f325_0_loop_GT -> f325_0_loop_GT : arg2'=1-arg1-arg3, arg1'=-1+arg1+arg3, arg3'=1, (1 > 0 /\ -5+arg1-arg3 >= 0 /\ -1+arg3 > 0 /\ -2+arg3 >= 0 /\ -arg2+arg3 >= 0), cost: -1+arg3

Applied chaining
First rule:
f325_0_loop_GT -> f325_0_loop_GT : arg2'=-arg1, arg3'=-arg3, (5-arg1-arg3 > 0 /\ -5+arg1-arg3 >= 0 /\ -arg2+arg3 >= 0), cost: 1
Second rule:
f325_0_loop_GT -> f325_0_loop_GT : arg2'=-arg1, arg3'=-arg3, (-arg1+arg3 <= 0 /\ 5-arg1+arg3 > 0 /\ -arg2+arg3 >= 0), cost: 1
New rule:
f325_0_loop_GT -> f325_0_loop_GT : arg2'=-arg1, (5-arg1-arg3 > 0 /\ -5+arg1-arg3 >= 0 /\ -arg1-arg3 <= 0 /\ -arg2+arg3 >= 0), cost: 2

Applied acceleration
Original rule:
f325_0_loop_GT -> f325_0_loop_GT : arg2'=-arg1, (5-arg1-arg3 > 0 /\ -5+arg1-arg3 >= 0 /\ -arg1-arg3 <= 0 /\ -arg2+arg3 >= 0), cost: 2
New rule:
f325_0_loop_GT -> f325_0_loop_GT : arg2'=-arg1, (5-arg1-arg3 > 0 /\ -5+arg1-arg3 >= 0 /\ -1+n4 >= 0 /\ -arg2+arg3 >= 0 /\ arg1+arg3 >= 0), cost: 2*n4
Sub-proof via acceration calculus written to file:///tmp/tmpnam_LBlpLK.txt

Applied nonterm
Original rule:
f325_0_loop_GT -> f325_0_loop_GT : arg2'=-arg1, (5-arg1-arg3 > 0 /\ -5+arg1-arg3 >= 0 /\ -arg1-arg3 <= 0 /\ -arg2+arg3 >= 0), cost: 2
New rule:
f325_0_loop_GT -> [3] : (5-arg1-arg3 > 0 /\ -5+arg1-arg3 >= 0 /\ -arg2-arg1 <= 0 /\ -arg2+arg3 >= 0 /\ arg1+arg3 >= 0), cost: NONTERM
Sub-proof via acceration calculus written to file:///tmp/tmpnam_hghIpb.txt

Applied chaining
First rule:
f325_0_loop_GT -> f325_0_loop_GT : arg2'=-arg1, arg3'=-arg3, (-arg1+arg3 <= 0 /\ 5-arg1+arg3 > 0 /\ -arg2+arg3 >= 0), cost: 1
Second rule:
f325_0_loop_GT -> [3] : (5-arg1-arg3 > 0 /\ -5+arg1-arg3 >= 0 /\ -arg2-arg1 <= 0 /\ -arg2+arg3 >= 0 /\ arg1+arg3 >= 0), cost: NONTERM
New rule:
f325_0_loop_GT -> [3] : (0 <= 0 /\ arg1-arg3 >= 0 /\ -arg1+arg3 <= 0 /\ -5+arg1+arg3 >= 0 /\ 5-arg1+arg3 > 0 /\ -arg2+arg3 >= 0), cost: NONTERM

Applied chaining
First rule:
f325_0_loop_GT -> f325_0_loop_GT : arg2'=-arg1, arg3'=-arg3, (-arg1+arg3 <= 0 /\ 5-arg1+arg3 > 0 /\ -arg2+arg3 >= 0), cost: 1
Second rule:
f325_0_loop_GT -> f325_0_loop_GT : arg2'=-arg1, arg3'=-arg3, (5-arg1-arg3 > 0 /\ -5+arg1-arg3 >= 0 /\ -arg2+arg3 >= 0), cost: 1
New rule:
f325_0_loop_GT -> f325_0_loop_GT : arg2'=-arg1, (-arg1+arg3 <= 0 /\ -5+arg1+arg3 >= 0 /\ 5-arg1+arg3 > 0 /\ -arg2+arg3 >= 0), cost: 2

Applied nonterm
Original rule:
f325_0_loop_GT -> f325_0_loop_GT : arg2'=-arg1, (-arg1+arg3 <= 0 /\ -5+arg1+arg3 >= 0 /\ 5-arg1+arg3 > 0 /\ -arg2+arg3 >= 0), cost: 2
New rule:
f325_0_loop_GT -> [3] : (-1+n5 >= 0 /\ arg1-arg3 >= 0 /\ -5+arg1+arg3 >= 0 /\ 5-arg1+arg3 > 0 /\ -arg2+arg3 >= 0), cost: NONTERM
Sub-proof via acceration calculus written to file:///tmp/tmpnam_keMLED.txt

Applied chaining
First rule:
f325_0_loop_GT -> f325_0_loop_GT : arg2'=-arg1, arg3'=-arg3, (5-arg1-arg3 > 0 /\ -5+arg1-arg3 >= 0 /\ -arg2+arg3 >= 0), cost: 1
Second rule:
f325_0_loop_GT -> [3] : (-1+n5 >= 0 /\ arg1-arg3 >= 0 /\ -5+arg1+arg3 >= 0 /\ 5-arg1+arg3 > 0 /\ -arg2+arg3 >= 0), cost: NONTERM
New rule:
f325_0_loop_GT -> [3] : (-1+n5 >= 0 /\ 5-arg1-arg3 > 0 /\ arg1-arg3 >= 0 /\ -5+arg1-arg3 >= 0 /\ -arg2+arg3 >= 0 /\ arg1+arg3 >= 0), cost: NONTERM

Applied simplification
Original rule:
f325_0_loop_GT -> [3] : (5-arg1-arg3 > 0 /\ arg1-arg3 >= 0 /\ -arg2-arg1 <= 0 /\ 5-arg1+arg3 > 0 /\ -arg2+arg3 >= 0 /\ arg1+arg3 >= 0), cost: NONTERM
New rule:
f325_0_loop_GT -> [3] : (5-arg1-arg3 > 0 /\ arg1-arg3 >= 0 /\ -arg2-arg1 <= 0 /\ 5-arg1+arg3 > 0 /\ -arg2+arg3 >= 0), cost: NONTERM

Applied simplification
Original rule:
f325_0_loop_GT -> f325_0_loop_GT : arg2'=1-arg1-arg3, arg1'=-1+arg1+arg3, arg3'=1, (1 > 0 /\ -5+arg1-arg3 >= 0 /\ -1+arg3 > 0 /\ -2+arg3 >= 0 /\ -arg2+arg3 >= 0), cost: -1+arg3
New rule:
f325_0_loop_GT -> f325_0_loop_GT : arg2'=1-arg1-arg3, arg1'=-1+arg1+arg3, arg3'=1, (-5+arg1-arg3 >= 0 /\ -2+arg3 >= 0 /\ -arg2+arg3 >= 0), cost: -1+arg3

Applied simplification
Original rule:
f325_0_loop_GT -> [3] : (5-arg1-arg3 > 0 /\ -5+arg1-arg3 >= 0 /\ -arg2-arg1 <= 0 /\ -arg2+arg3 >= 0 /\ arg1+arg3 >= 0), cost: NONTERM
New rule:
f325_0_loop_GT -> [3] : (5-arg1-arg3 > 0 /\ -5+arg1-arg3 >= 0 /\ -arg2-arg1 <= 0 /\ -arg2+arg3 >= 0), cost: NONTERM

Applied simplification
Original rule:
f325_0_loop_GT -> [3] : (0 <= 0 /\ arg1-arg3 >= 0 /\ -arg1+arg3 <= 0 /\ -5+arg1+arg3 >= 0 /\ 5-arg1+arg3 > 0 /\ -arg2+arg3 >= 0), cost: NONTERM
New rule:
f325_0_loop_GT -> [3] : (-arg1+arg3 <= 0 /\ -5+arg1+arg3 >= 0 /\ 5-arg1+arg3 > 0 /\ -arg2+arg3 >= 0), cost: NONTERM

Applied simplification
Original rule:
f325_0_loop_GT -> [3] : (-1+n5 >= 0 /\ 5-arg1-arg3 > 0 /\ arg1-arg3 >= 0 /\ -5+arg1-arg3 >= 0 /\ -arg2+arg3 >= 0 /\ arg1+arg3 >= 0), cost: NONTERM
New rule:
f325_0_loop_GT -> [3] : (-1+n5 >= 0 /\ 5-arg1-arg3 > 0 /\ -5+arg1-arg3 >= 0 /\ -arg2+arg3 >= 0 /\ arg1+arg3 >= 0), cost: NONTERM

Applied deletion
Removed the following rules: 8 10 11

Accelerated simple loops
Start location: __init
   7: f1_0_main_Load -> f325_0_loop_GT : arg2'=-20, arg1'=20, arg3'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
   9: f325_0_loop_GT -> f325_0_loop_GT : arg2'=-arg1, arg3'=-arg3, (5-arg1-arg3 > 0 /\ -5+arg1-arg3 >= 0 /\ -arg2+arg3 >= 0), cost: 1
  12: f325_0_loop_GT -> f325_0_loop_GT : arg2'=1, arg1'=-1, arg3'=0, (-5+arg1 > 0 /\ -1+arg3 == 0 /\ 2-arg2 > 0), cost: 1
  13: f325_0_loop_GT -> f325_0_loop_GT : arg2'=-arg1, arg3'=arg3, (5-arg1-arg3 > 0 /\ arg1-arg3 >= 0 /\ -1+n >= 0 /\ 5-arg1+arg3 > 0 /\ -arg2+arg3 >= 0 /\ arg1+arg3 >= 0), cost: 2*n
  15: f325_0_loop_GT -> [3] : (1-arg3 > 0 /\ -5+arg1+arg3 >= 0 /\ -arg2+arg3 >= 0 /\ -1+n0 >= 0), cost: NONTERM
  19: f325_0_loop_GT -> [3] : (-1+n5 >= 0 /\ arg1-arg3 >= 0 /\ -5+arg1+arg3 >= 0 /\ 5-arg1+arg3 > 0 /\ -arg2+arg3 >= 0), cost: NONTERM
  21: f325_0_loop_GT -> [3] : (5-arg1-arg3 > 0 /\ arg1-arg3 >= 0 /\ -arg2-arg1 <= 0 /\ 5-arg1+arg3 > 0 /\ -arg2+arg3 >= 0), cost: NONTERM
  22: f325_0_loop_GT -> f325_0_loop_GT : arg2'=1-arg1-arg3, arg1'=-1+arg1+arg3, arg3'=1, (-5+arg1-arg3 >= 0 /\ -2+arg3 >= 0 /\ -arg2+arg3 >= 0), cost: -1+arg3
  23: f325_0_loop_GT -> [3] : (5-arg1-arg3 > 0 /\ -5+arg1-arg3 >= 0 /\ -arg2-arg1 <= 0 /\ -arg2+arg3 >= 0), cost: NONTERM
  24: f325_0_loop_GT -> [3] : (-arg1+arg3 <= 0 /\ -5+arg1+arg3 >= 0 /\ 5-arg1+arg3 > 0 /\ -arg2+arg3 >= 0), cost: NONTERM
  25: f325_0_loop_GT -> [3] : (-1+n5 >= 0 /\ 5-arg1-arg3 > 0 /\ -5+arg1-arg3 >= 0 /\ -arg2+arg3 >= 0 /\ arg1+arg3 >= 0), cost: NONTERM
   6: __init -> f1_0_main_Load : arg2'=arg2P6, arg1'=arg1P6, arg3'=arg3P6, TRUE, cost: 1


Applied chaining
First rule:
f1_0_main_Load -> f325_0_loop_GT : arg2'=-20, arg1'=20, arg3'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
Second rule:
f325_0_loop_GT -> f325_0_loop_GT : arg2'=1, arg1'=-1, arg3'=0, (-5+arg1 > 0 /\ -1+arg3 == 0 /\ 2-arg2 > 0), cost: 1
New rule:
f1_0_main_Load -> f325_0_loop_GT : arg2'=1, arg1'=-1, arg3'=0, (arg1 > 0 /\ -1+arg2 == 0), cost: 2

Applied chaining
First rule:
f1_0_main_Load -> f325_0_loop_GT : arg2'=-20, arg1'=20, arg3'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
Second rule:
f325_0_loop_GT -> [3] : (1-arg3 > 0 /\ -5+arg1+arg3 >= 0 /\ -arg2+arg3 >= 0 /\ -1+n0 >= 0), cost: NONTERM
New rule:
f1_0_main_Load -> [3] : (arg2 == 0 /\ arg1 > 0), cost: NONTERM

Applied chaining
First rule:
f1_0_main_Load -> f325_0_loop_GT : arg2'=-20, arg1'=20, arg3'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
Second rule:
f325_0_loop_GT -> [3] : (-1+n5 >= 0 /\ arg1-arg3 >= 0 /\ -5+arg1+arg3 >= 0 /\ 5-arg1+arg3 > 0 /\ -arg2+arg3 >= 0), cost: NONTERM
New rule:
f1_0_main_Load -> [3] : (-15+arg2 > 0 /\ -20+arg2 <= 0 /\ arg1 > 0), cost: NONTERM

Applied chaining
First rule:
f1_0_main_Load -> f325_0_loop_GT : arg2'=-20, arg1'=20, arg3'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
Second rule:
f325_0_loop_GT -> f325_0_loop_GT : arg2'=1-arg1-arg3, arg1'=-1+arg1+arg3, arg3'=1, (-5+arg1-arg3 >= 0 /\ -2+arg3 >= 0 /\ -arg2+arg3 >= 0), cost: -1+arg3
New rule:
f1_0_main_Load -> f325_0_loop_GT : arg2'=-19-arg2, arg1'=19+arg2, arg3'=1, (-2+arg2 >= 0 /\ -15+arg2 <= 0 /\ arg1 > 0), cost: arg2

Applied chaining
First rule:
f1_0_main_Load -> f325_0_loop_GT : arg2'=-20, arg1'=20, arg3'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
Second rule:
f325_0_loop_GT -> [3] : (-arg1+arg3 <= 0 /\ -5+arg1+arg3 >= 0 /\ 5-arg1+arg3 > 0 /\ -arg2+arg3 >= 0), cost: NONTERM
New rule:
f1_0_main_Load -> [3] : (-15+arg2 > 0 /\ -20+arg2 <= 0 /\ arg1 > 0), cost: NONTERM

Applied deletion
Removed the following rules: 9 12 13 15 19 21 22 23 24 25

Chained accelerated rules with incoming rules
Start location: __init
   7: f1_0_main_Load -> f325_0_loop_GT : arg2'=-20, arg1'=20, arg3'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
  26: f1_0_main_Load -> f325_0_loop_GT : arg2'=1, arg1'=-1, arg3'=0, (arg1 > 0 /\ -1+arg2 == 0), cost: 2
  27: f1_0_main_Load -> [3] : (arg2 == 0 /\ arg1 > 0), cost: NONTERM
  28: f1_0_main_Load -> [3] : (-15+arg2 > 0 /\ -20+arg2 <= 0 /\ arg1 > 0), cost: NONTERM
  29: f1_0_main_Load -> f325_0_loop_GT : arg2'=-19-arg2, arg1'=19+arg2, arg3'=1, (-2+arg2 >= 0 /\ -15+arg2 <= 0 /\ arg1 > 0), cost: arg2
   6: __init -> f1_0_main_Load : arg2'=arg2P6, arg1'=arg1P6, arg3'=arg3P6, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
  27: f1_0_main_Load -> [3] : (arg2 == 0 /\ arg1 > 0), cost: NONTERM
  28: f1_0_main_Load -> [3] : (-15+arg2 > 0 /\ -20+arg2 <= 0 /\ arg1 > 0), cost: NONTERM
   6: __init -> f1_0_main_Load : arg2'=arg2P6, arg1'=arg1P6, arg3'=arg3P6, TRUE, cost: 1


Eliminating location f1_0_main_Load by chaining:

Applied chaining
First rule:
__init -> f1_0_main_Load : arg2'=arg2P6, arg1'=arg1P6, arg3'=arg3P6, TRUE, cost: 1
Second rule:
f1_0_main_Load -> [3] : (arg2 == 0 /\ arg1 > 0), cost: NONTERM
New rule:
__init -> [3] : (arg1P6 > 0 /\ arg2P6 == 0), cost: NONTERM

Applied chaining
First rule:
__init -> f1_0_main_Load : arg2'=arg2P6, arg1'=arg1P6, arg3'=arg3P6, TRUE, cost: 1
Second rule:
f1_0_main_Load -> [3] : (-15+arg2 > 0 /\ -20+arg2 <= 0 /\ arg1 > 0), cost: NONTERM
New rule:
__init -> [3] : (arg1P6 > 0 /\ -20+arg2P6 <= 0 /\ -15+arg2P6 > 0), cost: NONTERM

Applied deletion
Removed the following rules: 6 27 28

Eliminated locations on tree-shaped paths
Start location: __init
  30: __init -> [3] : (arg1P6 > 0 /\ arg2P6 == 0), cost: NONTERM
  31: __init -> [3] : (arg1P6 > 0 /\ -20+arg2P6 <= 0 /\ -15+arg2P6 > 0), cost: NONTERM


Computing asymptotic complexity
Proved nontermination of rule 30 via SMT.

Proved the following lower bound
Complexity:  Nonterm
Cpx degree: Nonterm

Solved cost: NONTERM
Rule cost:   NONTERM
Rule guard:  (arg1P6 > 0 /\ arg2P6 == 0)
