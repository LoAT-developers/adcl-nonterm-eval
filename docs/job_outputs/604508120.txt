NO

Initial ITS

Start location: __init
Program variables: arg1 arg2 arg3
   0: f1_0_main_Load -> f169_0_loop_EQ : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (-arg3p1+arg2 == 0 /\ 1+arg2 > 0 /\ 1-arg2p1 == 0 /\ 1-arg1p1 == 0 /\ arg1 > 0), cost: 1
   1: f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, (arg3 < 0 /\ arg3-arg2 <= 0 /\ arg3+arg2 >= 0 /\ 1-arg2p2+arg2 == 0 /\ -1+arg3-arg2 < 0 /\ arg1 > 0 /\ -arg3p2 == 0 /\ 1-arg1p2+arg2 == 0 /\ arg2 > 0), cost: 1
   2: f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, (arg3 > 0 /\ arg3-arg2 <= 0 /\ arg3+arg2 >= 0 /\ -1+arg3-arg2 < 0 /\ 1-arg2p3+arg2 == 0 /\ arg1 > 0 /\ -arg3p3 == 0 /\ 1-arg1p3+arg2 == 0 /\ arg2 > 0), cost: 1
   3: f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, (1-arg1p4+arg2 == 0 /\ arg3 < 0 /\ arg3+arg2 < 0 /\ 1-arg3-arg3p4 == 0 /\ arg1 > 0 /\ 1-arg2p4+arg2 == 0 /\ arg2 > 0), cost: 1
   4: f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, (1-arg2p5+arg2 == 0 /\ arg3 > 0 /\ 1-arg1p5+arg2 == 0 /\ arg3+arg2 < 0 /\ 1-arg3-arg3p5 == 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
   5: f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, (-arg3+arg2 < 0 /\ 1-arg3+arg2 <= 0 /\ 1-arg2p6+arg2 == 0 /\ -1+arg3 > 0 /\ arg3+arg2 >= 0 /\ -1-arg3p6-arg3 == 0 /\ 1-arg1p6+arg2 == 0 /\ arg1 > 0 /\ 2+arg3 > 0 /\ arg2 > 0), cost: 1
   6: __init -> f1_0_main_Load : arg1'=arg1p7, arg2'=arg2p7, arg3'=arg3p7, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2 arg3
   1: f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, (arg3 < 0 /\ arg3-arg2 <= 0 /\ arg3+arg2 >= 0 /\ 1-arg2p2+arg2 == 0 /\ -1+arg3-arg2 < 0 /\ arg1 > 0 /\ -arg3p2 == 0 /\ 1-arg1p2+arg2 == 0 /\ arg2 > 0), cost: 1
   2: f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, (arg3 > 0 /\ arg3-arg2 <= 0 /\ arg3+arg2 >= 0 /\ -1+arg3-arg2 < 0 /\ 1-arg2p3+arg2 == 0 /\ arg1 > 0 /\ -arg3p3 == 0 /\ 1-arg1p3+arg2 == 0 /\ arg2 > 0), cost: 1
   3: f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, (1-arg1p4+arg2 == 0 /\ arg3 < 0 /\ arg3+arg2 < 0 /\ 1-arg3-arg3p4 == 0 /\ arg1 > 0 /\ 1-arg2p4+arg2 == 0 /\ arg2 > 0), cost: 1
   4: f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, (1-arg2p5+arg2 == 0 /\ arg3 > 0 /\ 1-arg1p5+arg2 == 0 /\ arg3+arg2 < 0 /\ 1-arg3-arg3p5 == 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
   5: f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, (-arg3+arg2 < 0 /\ 1-arg3+arg2 <= 0 /\ 1-arg2p6+arg2 == 0 /\ -1+arg3 > 0 /\ arg3+arg2 >= 0 /\ -1-arg3p6-arg3 == 0 /\ 1-arg1p6+arg2 == 0 /\ arg1 > 0 /\ 2+arg3 > 0 /\ arg2 > 0), cost: 1
   7: __init -> f169_0_loop_EQ : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (1-arg2p1 == 0 /\ -arg3p1+arg2p7 == 0 /\ 1+arg2p7 > 0 /\ arg1p7 > 0 /\ 1-arg1p1 == 0), cost: 1

	Eliminating location f1_0_main_Load by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_Load : arg1'=arg1p7, arg2'=arg2p7, arg3'=arg3p7, T, cost: 1
	Second rule:
	f1_0_main_Load -> f169_0_loop_EQ : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (-arg3p1+arg2 == 0 /\ 1+arg2 > 0 /\ 1-arg2p1 == 0 /\ 1-arg1p1 == 0 /\ arg1 > 0), cost: 1
	New rule:
	__init -> f169_0_loop_EQ : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (1-arg2p1 == 0 /\ -arg3p1+arg2p7 == 0 /\ 1+arg2p7 > 0 /\ arg1p7 > 0 /\ 1-arg1p1 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 6

Simplified Transitions

Start location: __init
Program variables: arg1 arg2 arg3
   8: f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=1+arg2, arg2'=1+arg2, arg3'=0, (arg3 < 0 /\ arg3-arg2 <= 0 /\ arg3+arg2 >= 0 /\ -1+arg3-arg2 < 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
   9: f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=1+arg2, arg2'=1+arg2, arg3'=0, (arg3 > 0 /\ arg3-arg2 <= 0 /\ arg3+arg2 >= 0 /\ -1+arg3-arg2 < 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
  10: f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=1+arg2, arg2'=1+arg2, arg3'=1-arg3, (arg3 < 0 /\ arg3+arg2 < 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
  11: f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=1+arg2, arg2'=1+arg2, arg3'=1-arg3, (arg3 > 0 /\ arg3+arg2 < 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
  12: f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=1+arg2, arg2'=1+arg2, arg3'=-1-arg3, (-arg3+arg2 < 0 /\ 1-arg3+arg2 <= 0 /\ -1+arg3 > 0 /\ arg3+arg2 >= 0 /\ arg1 > 0 /\ 2+arg3 > 0 /\ arg2 > 0), cost: 1
  13: __init -> f169_0_loop_EQ : arg1'=1, arg2'=1, arg3'=arg2p7, (1+arg2p7 > 0), cost: 1

	Propagated Equalities

	Original rule:
	f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, (arg3 < 0 /\ arg3-arg2 <= 0 /\ arg3+arg2 >= 0 /\ 1-arg2p2+arg2 == 0 /\ -1+arg3-arg2 < 0 /\ arg1 > 0 /\ -arg3p2 == 0 /\ 1-arg1p2+arg2 == 0 /\ arg2 > 0), cost: 1
	New rule:
	f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=1+arg2, arg2'=1+arg2, arg3'=0, (0 == 0 /\ arg3 < 0 /\ arg3-arg2 <= 0 /\ arg3+arg2 >= 0 /\ -1+arg3-arg2 < 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
	
		propagated equality arg2p2 = 1+arg2
		
		propagated equality arg3p2 = 0
		
		propagated equality arg1p2 = 1+arg2
		
	Simplified Guard

	Original rule:
	f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=1+arg2, arg2'=1+arg2, arg3'=0, (0 == 0 /\ arg3 < 0 /\ arg3-arg2 <= 0 /\ arg3+arg2 >= 0 /\ -1+arg3-arg2 < 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
	New rule:
	f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=1+arg2, arg2'=1+arg2, arg3'=0, (arg3 < 0 /\ arg3-arg2 <= 0 /\ arg3+arg2 >= 0 /\ -1+arg3-arg2 < 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, (arg3 > 0 /\ arg3-arg2 <= 0 /\ arg3+arg2 >= 0 /\ -1+arg3-arg2 < 0 /\ 1-arg2p3+arg2 == 0 /\ arg1 > 0 /\ -arg3p3 == 0 /\ 1-arg1p3+arg2 == 0 /\ arg2 > 0), cost: 1
	New rule:
	f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=1+arg2, arg2'=1+arg2, arg3'=0, (0 == 0 /\ arg3 > 0 /\ arg3-arg2 <= 0 /\ arg3+arg2 >= 0 /\ -1+arg3-arg2 < 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
	
		propagated equality arg2p3 = 1+arg2
		
		propagated equality arg3p3 = 0
		
		propagated equality arg1p3 = 1+arg2
		
	Simplified Guard

	Original rule:
	f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=1+arg2, arg2'=1+arg2, arg3'=0, (0 == 0 /\ arg3 > 0 /\ arg3-arg2 <= 0 /\ arg3+arg2 >= 0 /\ -1+arg3-arg2 < 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
	New rule:
	f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=1+arg2, arg2'=1+arg2, arg3'=0, (arg3 > 0 /\ arg3-arg2 <= 0 /\ arg3+arg2 >= 0 /\ -1+arg3-arg2 < 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, (1-arg1p4+arg2 == 0 /\ arg3 < 0 /\ arg3+arg2 < 0 /\ 1-arg3-arg3p4 == 0 /\ arg1 > 0 /\ 1-arg2p4+arg2 == 0 /\ arg2 > 0), cost: 1
	New rule:
	f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=1+arg2, arg2'=1+arg2, arg3'=1-arg3, (0 == 0 /\ arg3 < 0 /\ arg3+arg2 < 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
	
		propagated equality arg1p4 = 1+arg2
		
		propagated equality arg3p4 = 1-arg3
		
		propagated equality arg2p4 = 1+arg2
		
	Simplified Guard

	Original rule:
	f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=1+arg2, arg2'=1+arg2, arg3'=1-arg3, (0 == 0 /\ arg3 < 0 /\ arg3+arg2 < 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
	New rule:
	f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=1+arg2, arg2'=1+arg2, arg3'=1-arg3, (arg3 < 0 /\ arg3+arg2 < 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, (1-arg2p5+arg2 == 0 /\ arg3 > 0 /\ 1-arg1p5+arg2 == 0 /\ arg3+arg2 < 0 /\ 1-arg3-arg3p5 == 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
	New rule:
	f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=1+arg2, arg2'=1+arg2, arg3'=1-arg3, (0 == 0 /\ arg3 > 0 /\ arg3+arg2 < 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
	
		propagated equality arg2p5 = 1+arg2
		
		propagated equality arg1p5 = 1+arg2
		
		propagated equality arg3p5 = 1-arg3
		
	Simplified Guard

	Original rule:
	f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=1+arg2, arg2'=1+arg2, arg3'=1-arg3, (0 == 0 /\ arg3 > 0 /\ arg3+arg2 < 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
	New rule:
	f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=1+arg2, arg2'=1+arg2, arg3'=1-arg3, (arg3 > 0 /\ arg3+arg2 < 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, (-arg3+arg2 < 0 /\ 1-arg3+arg2 <= 0 /\ 1-arg2p6+arg2 == 0 /\ -1+arg3 > 0 /\ arg3+arg2 >= 0 /\ -1-arg3p6-arg3 == 0 /\ 1-arg1p6+arg2 == 0 /\ arg1 > 0 /\ 2+arg3 > 0 /\ arg2 > 0), cost: 1
	New rule:
	f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=1+arg2, arg2'=1+arg2, arg3'=-1-arg3, (0 == 0 /\ -arg3+arg2 < 0 /\ 1-arg3+arg2 <= 0 /\ -1+arg3 > 0 /\ arg3+arg2 >= 0 /\ arg1 > 0 /\ 2+arg3 > 0 /\ arg2 > 0), cost: 1
	
		propagated equality arg2p6 = 1+arg2
		
		propagated equality arg3p6 = -1-arg3
		
		propagated equality arg1p6 = 1+arg2
		
	Simplified Guard

	Original rule:
	f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=1+arg2, arg2'=1+arg2, arg3'=-1-arg3, (0 == 0 /\ -arg3+arg2 < 0 /\ 1-arg3+arg2 <= 0 /\ -1+arg3 > 0 /\ arg3+arg2 >= 0 /\ arg1 > 0 /\ 2+arg3 > 0 /\ arg2 > 0), cost: 1
	New rule:
	f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=1+arg2, arg2'=1+arg2, arg3'=-1-arg3, (-arg3+arg2 < 0 /\ 1-arg3+arg2 <= 0 /\ -1+arg3 > 0 /\ arg3+arg2 >= 0 /\ arg1 > 0 /\ 2+arg3 > 0 /\ arg2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	__init -> f169_0_loop_EQ : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (1-arg2p1 == 0 /\ -arg3p1+arg2p7 == 0 /\ 1+arg2p7 > 0 /\ arg1p7 > 0 /\ 1-arg1p1 == 0), cost: 1
	New rule:
	__init -> f169_0_loop_EQ : arg1'=1, arg2'=1, arg3'=arg2p7, (0 == 0 /\ 1+arg2p7 > 0 /\ arg1p7 > 0), cost: 1
	
		propagated equality arg2p1 = 1
		
		propagated equality arg3p1 = arg2p7
		
		propagated equality arg1p1 = 1
		
	Simplified Guard

	Original rule:
	__init -> f169_0_loop_EQ : arg1'=1, arg2'=1, arg3'=arg2p7, (0 == 0 /\ 1+arg2p7 > 0 /\ arg1p7 > 0), cost: 1
	New rule:
	__init -> f169_0_loop_EQ : arg1'=1, arg2'=1, arg3'=arg2p7, (1+arg2p7 > 0 /\ arg1p7 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	__init -> f169_0_loop_EQ : arg1'=1, arg2'=1, arg3'=arg2p7, (1+arg2p7 > 0 /\ arg1p7 > 0), cost: 1
	New rule:
	__init -> f169_0_loop_EQ : arg1'=1, arg2'=1, arg3'=arg2p7, (1+arg2p7 > 0), cost: 1

Unrolled Loops

Start location: __init
Program variables: arg1 arg2 arg3
   8: f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=1+arg2, arg2'=1+arg2, arg3'=0, (arg3 < 0 /\ arg3-arg2 <= 0 /\ arg3+arg2 >= 0 /\ -1+arg3-arg2 < 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
   9: f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=1+arg2, arg2'=1+arg2, arg3'=0, (arg3 > 0 /\ arg3-arg2 <= 0 /\ arg3+arg2 >= 0 /\ -1+arg3-arg2 < 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
  10: f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=1+arg2, arg2'=1+arg2, arg3'=1-arg3, (arg3 < 0 /\ arg3+arg2 < 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
  11: f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=1+arg2, arg2'=1+arg2, arg3'=1-arg3, (arg3 > 0 /\ arg3+arg2 < 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
  12: f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=1+arg2, arg2'=1+arg2, arg3'=-1-arg3, (-arg3+arg2 < 0 /\ 1-arg3+arg2 <= 0 /\ -1+arg3 > 0 /\ arg3+arg2 >= 0 /\ arg1 > 0 /\ 2+arg3 > 0 /\ arg2 > 0), cost: 1
  14: f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=2+arg2, arg2'=2+arg2, (arg3 < 0 /\ 1+arg2 > 0 /\ 1-arg3 < 0 /\ 2-arg3+arg2 < 0 /\ arg3+arg2 < 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
  15: f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=2+arg2, arg2'=2+arg2, (arg3 > 0 /\ 1+arg2 > 0 /\ 1-arg3 > 0 /\ 2-arg3+arg2 < 0 /\ arg3+arg2 < 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
  16: f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=2+arg2, arg2'=2+arg2, (-arg3+arg2 < 0 /\ -arg3+arg2 >= 0 /\ 1-arg3+arg2 <= 0 /\ 1+arg2 > 0 /\ -2-arg3 > 0 /\ 1-arg3 > 0 /\ -1+arg3 > 0 /\ arg3+arg2 >= 0 /\ arg1 > 0 /\ 3+arg3+arg2 <= 0 /\ 2+arg3 > 0 /\ 2+arg3+arg2 < 0 /\ arg2 > 0), cost: 1
  13: __init -> f169_0_loop_EQ : arg1'=1, arg2'=1, arg3'=arg2p7, (1+arg2p7 > 0), cost: 1

	Unrolling

	Original rule:
	f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=1+arg2, arg2'=1+arg2, arg3'=1-arg3, (arg3 < 0 /\ arg3+arg2 < 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
	New rule:
	f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=2+arg2, arg2'=2+arg2, arg3'=arg3, (arg3 < 0 /\ 1+arg2 > 0 /\ 1-arg3 < 0 /\ 2-arg3+arg2 < 0 /\ arg3+arg2 < 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=2+arg2, arg2'=2+arg2, arg3'=arg3, (arg3 < 0 /\ 1+arg2 > 0 /\ 1-arg3 < 0 /\ 2-arg3+arg2 < 0 /\ arg3+arg2 < 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
	New rule:
	f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=2+arg2, arg2'=2+arg2, (arg3 < 0 /\ 1+arg2 > 0 /\ 1-arg3 < 0 /\ 2-arg3+arg2 < 0 /\ arg3+arg2 < 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
	
	Unrolling

	Original rule:
	f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=1+arg2, arg2'=1+arg2, arg3'=1-arg3, (arg3 > 0 /\ arg3+arg2 < 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
	New rule:
	f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=2+arg2, arg2'=2+arg2, arg3'=arg3, (arg3 > 0 /\ 1+arg2 > 0 /\ 1-arg3 > 0 /\ 2-arg3+arg2 < 0 /\ arg3+arg2 < 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=2+arg2, arg2'=2+arg2, arg3'=arg3, (arg3 > 0 /\ 1+arg2 > 0 /\ 1-arg3 > 0 /\ 2-arg3+arg2 < 0 /\ arg3+arg2 < 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
	New rule:
	f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=2+arg2, arg2'=2+arg2, (arg3 > 0 /\ 1+arg2 > 0 /\ 1-arg3 > 0 /\ 2-arg3+arg2 < 0 /\ arg3+arg2 < 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
	
	Unrolling

	Original rule:
	f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=1+arg2, arg2'=1+arg2, arg3'=-1-arg3, (-arg3+arg2 < 0 /\ 1-arg3+arg2 <= 0 /\ -1+arg3 > 0 /\ arg3+arg2 >= 0 /\ arg1 > 0 /\ 2+arg3 > 0 /\ arg2 > 0), cost: 1
	New rule:
	f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=2+arg2, arg2'=2+arg2, arg3'=arg3, (-arg3+arg2 < 0 /\ -arg3+arg2 >= 0 /\ 1-arg3+arg2 <= 0 /\ 1+arg2 > 0 /\ -2-arg3 > 0 /\ 1-arg3 > 0 /\ -1+arg3 > 0 /\ arg3+arg2 >= 0 /\ arg1 > 0 /\ 3+arg3+arg2 <= 0 /\ 2+arg3 > 0 /\ 2+arg3+arg2 < 0 /\ arg2 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=2+arg2, arg2'=2+arg2, arg3'=arg3, (-arg3+arg2 < 0 /\ -arg3+arg2 >= 0 /\ 1-arg3+arg2 <= 0 /\ 1+arg2 > 0 /\ -2-arg3 > 0 /\ 1-arg3 > 0 /\ -1+arg3 > 0 /\ arg3+arg2 >= 0 /\ arg1 > 0 /\ 3+arg3+arg2 <= 0 /\ 2+arg3 > 0 /\ 2+arg3+arg2 < 0 /\ arg2 > 0), cost: 1
	New rule:
	f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=2+arg2, arg2'=2+arg2, (-arg3+arg2 < 0 /\ -arg3+arg2 >= 0 /\ 1-arg3+arg2 <= 0 /\ 1+arg2 > 0 /\ -2-arg3 > 0 /\ 1-arg3 > 0 /\ -1+arg3 > 0 /\ arg3+arg2 >= 0 /\ arg1 > 0 /\ 3+arg3+arg2 <= 0 /\ 2+arg3 > 0 /\ 2+arg3+arg2 < 0 /\ arg2 > 0), cost: 1

Step with 13

	Trace

	13[(1+arg2p7 > 0)]
	
	Blocked

	[{}, {}]

Step with 9

	Trace

	13[(1+arg2p7 > 0)], 9[(arg3 > 0 /\ arg3-arg2 <= 0 /\ arg3+arg2 >= 0 /\ -1+arg3-arg2 < 0 /\ arg1 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {8[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Backtrack

	Trace

	13[(1+arg2p7 > 0)]
	
	Blocked

	[{}, {8[T], 9[T]}]

Step with 12

	Trace

	13[(1+arg2p7 > 0)], 12[(-arg3+arg2 < 0 /\ 1-arg3+arg2 <= 0 /\ -1+arg3 > 0 /\ arg3+arg2 >= 0 /\ arg1 > 0 /\ 2+arg3 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {8[T], 9[T], 10[T], 11[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 10

	Trace

	13[(1+arg2p7 > 0)], 12[(-arg3+arg2 < 0 /\ 1-arg3+arg2 <= 0 /\ -1+arg3 > 0 /\ arg3+arg2 >= 0 /\ arg1 > 0 /\ 2+arg3 > 0 /\ arg2 > 0)], 10[(arg3 < 0 /\ arg3+arg2 < 0 /\ arg1 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {8[T], 9[T], 10[T], 11[T]}, {8[T], 9[T], 12[T], 14[T], 15[T], 16[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Nonterm

Start location: __init
Program variables: arg1 arg2 arg3
   8: f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=1+arg2, arg2'=1+arg2, arg3'=0, (arg3 < 0 /\ arg3-arg2 <= 0 /\ arg3+arg2 >= 0 /\ -1+arg3-arg2 < 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
   9: f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=1+arg2, arg2'=1+arg2, arg3'=0, (arg3 > 0 /\ arg3-arg2 <= 0 /\ arg3+arg2 >= 0 /\ -1+arg3-arg2 < 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
  10: f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=1+arg2, arg2'=1+arg2, arg3'=1-arg3, (arg3 < 0 /\ arg3+arg2 < 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
  11: f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=1+arg2, arg2'=1+arg2, arg3'=1-arg3, (arg3 > 0 /\ arg3+arg2 < 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
  12: f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=1+arg2, arg2'=1+arg2, arg3'=-1-arg3, (-arg3+arg2 < 0 /\ 1-arg3+arg2 <= 0 /\ -1+arg3 > 0 /\ arg3+arg2 >= 0 /\ arg1 > 0 /\ 2+arg3 > 0 /\ arg2 > 0), cost: 1
  14: f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=2+arg2, arg2'=2+arg2, (arg3 < 0 /\ 1+arg2 > 0 /\ 1-arg3 < 0 /\ 2-arg3+arg2 < 0 /\ arg3+arg2 < 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
  15: f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=2+arg2, arg2'=2+arg2, (arg3 > 0 /\ 1+arg2 > 0 /\ 1-arg3 > 0 /\ 2-arg3+arg2 < 0 /\ arg3+arg2 < 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
  16: f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=2+arg2, arg2'=2+arg2, (-arg3+arg2 < 0 /\ -arg3+arg2 >= 0 /\ 1-arg3+arg2 <= 0 /\ 1+arg2 > 0 /\ -2-arg3 > 0 /\ 1-arg3 > 0 /\ -1+arg3 > 0 /\ arg3+arg2 >= 0 /\ arg1 > 0 /\ 3+arg3+arg2 <= 0 /\ 2+arg3 > 0 /\ 2+arg3+arg2 < 0 /\ arg2 > 0), cost: 1
  17: f169_0_loop_EQ -> LoAT_sink : (1+arg2 > 0 /\ arg3-arg2 > 0 /\ -1+arg3 > 0 /\ -1+n >= 0 /\ arg3+arg2 >= 0 /\ -1+arg3-arg2 >= 0 /\ 1+arg3 > 0 /\ arg1 > 0 /\ 2+arg3 > 0 /\ arg2 > 0), cost: NONTERM
  18: f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=2*n+arg2, arg2'=2*n+arg2, arg3'=arg3+2*n, (1+arg2 > 0 /\ arg3-arg2 > 0 /\ -1+arg3 > 0 /\ -1+n >= 0 /\ arg3+arg2 >= 0 /\ -1+arg3-arg2 >= 0 /\ 1+arg3 > 0 /\ arg1 > 0 /\ 2+arg3 > 0 /\ arg2 > 0), cost: 1
  13: __init -> f169_0_loop_EQ : arg1'=1, arg2'=1, arg3'=arg2p7, (1+arg2p7 > 0), cost: 1

	Certificate of Non-Termination

	Original rule:
	f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=2+arg2, arg2'=2+arg2, arg3'=2+arg3, (-arg3+arg2 < 0 /\ 1-arg3+arg2 <= 0 /\ 1+arg2 > 0 /\ -1+arg3 > 0 /\ arg3+arg2 >= 0 /\ -1-arg3 < 0 /\ arg1 > 0 /\ 2+arg3 > 0 /\ arg2 > 0), cost: 1
	New rule:
	f169_0_loop_EQ -> LoAT_sink : (1+arg2 > 0 /\ arg3-arg2 > 0 /\ -1+arg3 > 0 /\ -1+n >= 0 /\ arg3+arg2 >= 0 /\ -1+arg3-arg2 >= 0 /\ 1+arg3 > 0 /\ arg1 > 0 /\ 2+arg3 > 0 /\ arg2 > 0), cost: NONTERM

		1+arg2 > 0 [0]: monotonic increase yields 1+arg2 > 0
		
		arg3-arg2 > 0 [0]: monotonic increase yields arg3-arg2 > 0
		
		-1+arg3 > 0 [0]: monotonic increase yields -1+arg3 > 0, dependencies: 1+arg2 > 0 arg3-arg2 > 0
		
		arg3+arg2 >= 0 [0]: monotonic increase yields arg3+arg2 >= 0, dependencies: 1+arg2 > 0 arg3-arg2 > 0
		
		-1+arg3-arg2 >= 0 [0]: monotonic increase yields -1+arg3-arg2 >= 0, dependencies: arg3-arg2 > 0
		
		1+arg3 > 0 [0]: monotonic increase yields 1+arg3 > 0, dependencies: 1+arg2 > 0 arg3-arg2 > 0
		
		arg1 > 0 [0]: monotonic increase yields arg1 > 0, dependencies: 1+arg2 > 0
		
		2+arg3 > 0 [0]: monotonic increase yields 2+arg3 > 0, dependencies: 1+arg2 > 0 arg3-arg2 > 0
		
		arg2 > 0 [0]: monotonic increase yields arg2 > 0, dependencies: 1+arg2 > 0
		
		Replacement map: {1+arg2 > 0 -> 1+arg2 > 0, arg3-arg2 > 0 -> arg3-arg2 > 0, -1+arg3 > 0 -> -1+arg3 > 0, arg3+arg2 >= 0 -> arg3+arg2 >= 0, -1+arg3-arg2 >= 0 -> -1+arg3-arg2 >= 0, 1+arg3 > 0 -> 1+arg3 > 0, arg1 > 0 -> arg1 > 0, 2+arg3 > 0 -> 2+arg3 > 0, arg2 > 0 -> arg2 > 0}

	Loop Acceleration

	Original rule:
	f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=2+arg2, arg2'=2+arg2, arg3'=2+arg3, (-arg3+arg2 < 0 /\ 1-arg3+arg2 <= 0 /\ 1+arg2 > 0 /\ -1+arg3 > 0 /\ arg3+arg2 >= 0 /\ -1-arg3 < 0 /\ arg1 > 0 /\ 2+arg3 > 0 /\ arg2 > 0), cost: 1
	New rule:
	f169_0_loop_EQ -> f169_0_loop_EQ : arg1'=2*n+arg2, arg2'=2*n+arg2, arg3'=arg3+2*n, (1+arg2 > 0 /\ arg3-arg2 > 0 /\ -1+arg3 > 0 /\ -1+n >= 0 /\ arg3+arg2 >= 0 /\ -1+arg3-arg2 >= 0 /\ 1+arg3 > 0 /\ arg1 > 0 /\ 2+arg3 > 0 /\ arg2 > 0), cost: 1

		1+arg2 > 0 [0]: monotonic increase yields 1+arg2 > 0
		
		arg3-arg2 > 0 [0]: monotonic increase yields arg3-arg2 > 0
		
		-1+arg3 > 0 [0]: monotonic increase yields -1+arg3 > 0, dependencies: 1+arg2 > 0 arg3-arg2 > 0
		
		arg3+arg2 >= 0 [0]: monotonic increase yields arg3+arg2 >= 0, dependencies: 1+arg2 > 0 arg3-arg2 > 0
		
		-1+arg3-arg2 >= 0 [0]: monotonic increase yields -1+arg3-arg2 >= 0, dependencies: arg3-arg2 > 0
		
		1+arg3 > 0 [0]: monotonic increase yields 1+arg3 > 0, dependencies: 1+arg2 > 0 arg3-arg2 > 0
		
		arg1 > 0 [0]: monotonic increase yields arg1 > 0, dependencies: 1+arg2 > 0
		
		2+arg3 > 0 [0]: monotonic increase yields 2+arg3 > 0, dependencies: 1+arg2 > 0 arg3-arg2 > 0
		
		arg2 > 0 [0]: monotonic increase yields arg2 > 0, dependencies: 1+arg2 > 0
		
		Replacement map: {1+arg2 > 0 -> 1+arg2 > 0, arg3-arg2 > 0 -> arg3-arg2 > 0, -1+arg3 > 0 -> -1+arg3 > 0, arg3+arg2 >= 0 -> arg3+arg2 >= 0, -1+arg3-arg2 >= 0 -> -1+arg3-arg2 >= 0, 1+arg3 > 0 -> 1+arg3 > 0, arg1 > 0 -> arg1 > 0, 2+arg3 > 0 -> 2+arg3 > 0, arg2 > 0 -> arg2 > 0}

Step with 17

	Trace

	13[(1+arg2p7 > 0)], 17[(1+arg2 > 0 /\ arg3-arg2 > 0 /\ -1+arg3 > 0 /\ -1+n >= 0 /\ arg3+arg2 >= 0 /\ -1+arg3-arg2 >= 0 /\ 1+arg3 > 0 /\ arg1 > 0 /\ 2+arg3 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {8[T], 9[T], 10[T], 11[T]}, {17[T]}]

Refute

	Counterexample

	[ arg1=1 arg2=1 arg3=2 ] 13 [ arg1=arg1 arg2=arg2 arg3=arg3 ] 17
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
