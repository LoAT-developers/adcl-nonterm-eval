unknown

Initial ITS

Start location: l7
Program variables: result_4^0 x_5^0 y_6^0
   0: l0 -> l1 : result_4^0'=result_4^post1, x_5^0'=x_5^post1, y_6^0'=y_6^post1, (-x_5^post1+x_5^0 == 0 /\ -y_6^post1+y_6^0 == 0 /\ result_4^0-result_4^post1 == 0), cost: 1
   1: l1 -> l3 : result_4^0'=result_4^post2, x_5^0'=x_5^post2, y_6^0'=y_6^post2, (result_4^0-result_4^post2 == 0 /\ -y_6^post2+y_6^0 == 0 /\ -x_5^0+y_6^0 <= 0 /\ -x_5^post2+x_5^0 == 0), cost: 1
   5: l1 -> l5 : result_4^0'=result_4^post6, x_5^0'=x_5^post6, y_6^0'=y_6^post6, (-1-x_5^0+x_5^post6 == 0 /\ -result_4^post6+result_4^0 == 0 /\ -y_6^post6+y_6^0 == 0 /\ x_5^0-y_6^0 <= 0 /\ -x_5^0+y_6^0 <= 0), cost: 1
   7: l1 -> l6 : result_4^0'=result_4^post8, x_5^0'=x_5^post8, y_6^0'=y_6^post8, (y_6^0-y_6^post8 == 0 /\ 1+x_5^0-y_6^0 <= 0 /\ -1-x_5^0+x_5^post8 == 0 /\ -result_4^post8+result_4^0 == 0), cost: 1
   2: l3 -> l4 : result_4^0'=result_4^post3, x_5^0'=x_5^post3, y_6^0'=y_6^post3, (result_4^0-result_4^post3 == 0 /\ -y_6^post3+y_6^0 == 0 /\ 1+x_5^0-y_6^0 <= 0 /\ -x_5^post3+x_5^0 == 0), cost: 1
   3: l3 -> l4 : result_4^0'=result_4^post4, x_5^0'=x_5^post4, y_6^0'=y_6^post4, (-x_5^post4+x_5^0 == 0 /\ -y_6^post4+y_6^0 == 0 /\ result_4^0-result_4^post4 == 0 /\ 1-x_5^0+y_6^0 <= 0), cost: 1
   4: l4 -> l2 : result_4^0'=result_4^post5, x_5^0'=x_5^post5, y_6^0'=y_6^post5, (0 == 0 /\ x_5^0-x_5^post5 == 0 /\ -y_6^post5+y_6^0 == 0), cost: 1
   6: l5 -> l1 : result_4^0'=result_4^post7, x_5^0'=x_5^post7, y_6^0'=y_6^post7, (-y_6^post7+y_6^0 == 0 /\ -result_4^post7+result_4^0 == 0 /\ x_5^0-x_5^post7 == 0), cost: 1
   8: l6 -> l1 : result_4^0'=result_4^post9, x_5^0'=x_5^post9, y_6^0'=y_6^post9, (x_5^0-x_5^post9 == 0 /\ -result_4^post9+result_4^0 == 0 /\ -y_6^post9+y_6^0 == 0), cost: 1
   9: l7 -> l0 : result_4^0'=result_4^post10, x_5^0'=x_5^post10, y_6^0'=y_6^post10, (x_5^0-x_5^post10 == 0 /\ -result_4^post10+result_4^0 == 0 /\ -y_6^post10+y_6^0 == 0), cost: 1

Chained Linear Paths

Start location: l7
Program variables: result_4^0 x_5^0 y_6^0
   1: l1 -> l3 : result_4^0'=result_4^post2, x_5^0'=x_5^post2, y_6^0'=y_6^post2, (result_4^0-result_4^post2 == 0 /\ -y_6^post2+y_6^0 == 0 /\ -x_5^0+y_6^0 <= 0 /\ -x_5^post2+x_5^0 == 0), cost: 1
  11: l1 -> l1 : result_4^0'=result_4^post7, x_5^0'=x_5^post7, y_6^0'=y_6^post7, (-result_4^post7+result_4^post6 == 0 /\ -1-x_5^0+x_5^post6 == 0 /\ -result_4^post6+result_4^0 == 0 /\ -y_6^post6+y_6^0 == 0 /\ x_5^0-y_6^0 <= 0 /\ -x_5^post7+x_5^post6 == 0 /\ -y_6^post7+y_6^post6 == 0 /\ -x_5^0+y_6^0 <= 0), cost: 1
  12: l1 -> l1 : result_4^0'=result_4^post9, x_5^0'=x_5^post9, y_6^0'=y_6^post9, (y_6^0-y_6^post8 == 0 /\ -x_5^post9+x_5^post8 == 0 /\ 1+x_5^0-y_6^0 <= 0 /\ -1-x_5^0+x_5^post8 == 0 /\ -y_6^post9+y_6^post8 == 0 /\ -result_4^post8+result_4^0 == 0 /\ -result_4^post9+result_4^post8 == 0), cost: 1
   2: l3 -> l4 : result_4^0'=result_4^post3, x_5^0'=x_5^post3, y_6^0'=y_6^post3, (result_4^0-result_4^post3 == 0 /\ -y_6^post3+y_6^0 == 0 /\ 1+x_5^0-y_6^0 <= 0 /\ -x_5^post3+x_5^0 == 0), cost: 1
   3: l3 -> l4 : result_4^0'=result_4^post4, x_5^0'=x_5^post4, y_6^0'=y_6^post4, (-x_5^post4+x_5^0 == 0 /\ -y_6^post4+y_6^0 == 0 /\ result_4^0-result_4^post4 == 0 /\ 1-x_5^0+y_6^0 <= 0), cost: 1
   4: l4 -> l2 : result_4^0'=result_4^post5, x_5^0'=x_5^post5, y_6^0'=y_6^post5, (0 == 0 /\ x_5^0-x_5^post5 == 0 /\ -y_6^post5+y_6^0 == 0), cost: 1
  10: l7 -> l1 : result_4^0'=result_4^post1, x_5^0'=x_5^post1, y_6^0'=y_6^post1, (-x_5^post1+x_5^post10 == 0 /\ result_4^post10-result_4^post1 == 0 /\ -y_6^post1+y_6^post10 == 0 /\ x_5^0-x_5^post10 == 0 /\ -result_4^post10+result_4^0 == 0 /\ -y_6^post10+y_6^0 == 0), cost: 1

	Eliminating location l0 by chaining:

	Applied chaining

	First rule:
	l7 -> l0 : result_4^0'=result_4^post10, x_5^0'=x_5^post10, y_6^0'=y_6^post10, (x_5^0-x_5^post10 == 0 /\ -result_4^post10+result_4^0 == 0 /\ -y_6^post10+y_6^0 == 0), cost: 1
	Second rule:
	l0 -> l1 : result_4^0'=result_4^post1, x_5^0'=x_5^post1, y_6^0'=y_6^post1, (-x_5^post1+x_5^0 == 0 /\ -y_6^post1+y_6^0 == 0 /\ result_4^0-result_4^post1 == 0), cost: 1
	New rule:
	l7 -> l1 : result_4^0'=result_4^post1, x_5^0'=x_5^post1, y_6^0'=y_6^post1, (-x_5^post1+x_5^post10 == 0 /\ result_4^post10-result_4^post1 == 0 /\ -y_6^post1+y_6^post10 == 0 /\ x_5^0-x_5^post10 == 0 /\ -result_4^post10+result_4^0 == 0 /\ -y_6^post10+y_6^0 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 9
	
	Eliminating location l5 by chaining:

	Applied chaining

	First rule:
	l1 -> l5 : result_4^0'=result_4^post6, x_5^0'=x_5^post6, y_6^0'=y_6^post6, (-1-x_5^0+x_5^post6 == 0 /\ -result_4^post6+result_4^0 == 0 /\ -y_6^post6+y_6^0 == 0 /\ x_5^0-y_6^0 <= 0 /\ -x_5^0+y_6^0 <= 0), cost: 1
	Second rule:
	l5 -> l1 : result_4^0'=result_4^post7, x_5^0'=x_5^post7, y_6^0'=y_6^post7, (-y_6^post7+y_6^0 == 0 /\ -result_4^post7+result_4^0 == 0 /\ x_5^0-x_5^post7 == 0), cost: 1
	New rule:
	l1 -> l1 : result_4^0'=result_4^post7, x_5^0'=x_5^post7, y_6^0'=y_6^post7, (-result_4^post7+result_4^post6 == 0 /\ -1-x_5^0+x_5^post6 == 0 /\ -result_4^post6+result_4^0 == 0 /\ -y_6^post6+y_6^0 == 0 /\ x_5^0-y_6^0 <= 0 /\ -x_5^post7+x_5^post6 == 0 /\ -y_6^post7+y_6^post6 == 0 /\ -x_5^0+y_6^0 <= 0), cost: 1
	
	Applied deletion

	Removed the following rules: 5 6
	
	Eliminating location l6 by chaining:

	Applied chaining

	First rule:
	l1 -> l6 : result_4^0'=result_4^post8, x_5^0'=x_5^post8, y_6^0'=y_6^post8, (y_6^0-y_6^post8 == 0 /\ 1+x_5^0-y_6^0 <= 0 /\ -1-x_5^0+x_5^post8 == 0 /\ -result_4^post8+result_4^0 == 0), cost: 1
	Second rule:
	l6 -> l1 : result_4^0'=result_4^post9, x_5^0'=x_5^post9, y_6^0'=y_6^post9, (x_5^0-x_5^post9 == 0 /\ -result_4^post9+result_4^0 == 0 /\ -y_6^post9+y_6^0 == 0), cost: 1
	New rule:
	l1 -> l1 : result_4^0'=result_4^post9, x_5^0'=x_5^post9, y_6^0'=y_6^post9, (y_6^0-y_6^post8 == 0 /\ -x_5^post9+x_5^post8 == 0 /\ 1+x_5^0-y_6^0 <= 0 /\ -1-x_5^0+x_5^post8 == 0 /\ -y_6^post9+y_6^post8 == 0 /\ -result_4^post8+result_4^0 == 0 /\ -result_4^post9+result_4^post8 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 7 8

Simplified Transitions

Start location: l7
Program variables: result_4^0 x_5^0 y_6^0
  13: l1 -> l3 : -x_5^0+y_6^0 <= 0, cost: 1
  18: l1 -> l1 : x_5^0'=1+x_5^0, (x_5^0-y_6^0 <= 0 /\ x_5^0-y_6^0 == 0 /\ -x_5^0+y_6^0 <= 0), cost: 1
  19: l1 -> l1 : x_5^0'=1+x_5^0, 1+x_5^0-y_6^0 <= 0, cost: 1
  14: l3 -> l4 : 1+x_5^0-y_6^0 <= 0, cost: 1
  15: l3 -> l4 : 1-x_5^0+y_6^0 <= 0, cost: 1
  16: l4 -> l2 : result_4^0'=result_4^post5, T, cost: 1
  17: l7 -> l1 : T, cost: 1

	Propagated Equalities

	Original rule:
	l1 -> l3 : result_4^0'=result_4^post2, x_5^0'=x_5^post2, y_6^0'=y_6^post2, (result_4^0-result_4^post2 == 0 /\ -y_6^post2+y_6^0 == 0 /\ -x_5^0+y_6^0 <= 0 /\ -x_5^post2+x_5^0 == 0), cost: 1
	New rule:
	l1 -> l3 : result_4^0'=result_4^0, x_5^0'=x_5^0, y_6^0'=y_6^0, (0 == 0 /\ -x_5^0+y_6^0 <= 0), cost: 1
	
		propagated equality result_4^post2 = result_4^0
		
		propagated equality y_6^post2 = y_6^0
		
		propagated equality x_5^post2 = x_5^0
		
	Simplified Guard

	Original rule:
	l1 -> l3 : result_4^0'=result_4^0, x_5^0'=x_5^0, y_6^0'=y_6^0, (0 == 0 /\ -x_5^0+y_6^0 <= 0), cost: 1
	New rule:
	l1 -> l3 : result_4^0'=result_4^0, x_5^0'=x_5^0, y_6^0'=y_6^0, -x_5^0+y_6^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l1 -> l3 : result_4^0'=result_4^0, x_5^0'=x_5^0, y_6^0'=y_6^0, -x_5^0+y_6^0 <= 0, cost: 1
	New rule:
	l1 -> l3 : -x_5^0+y_6^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l3 -> l4 : result_4^0'=result_4^post3, x_5^0'=x_5^post3, y_6^0'=y_6^post3, (result_4^0-result_4^post3 == 0 /\ -y_6^post3+y_6^0 == 0 /\ 1+x_5^0-y_6^0 <= 0 /\ -x_5^post3+x_5^0 == 0), cost: 1
	New rule:
	l3 -> l4 : result_4^0'=result_4^0, x_5^0'=x_5^0, y_6^0'=y_6^0, (0 == 0 /\ 1+x_5^0-y_6^0 <= 0), cost: 1
	
		propagated equality result_4^post3 = result_4^0
		
		propagated equality y_6^post3 = y_6^0
		
		propagated equality x_5^post3 = x_5^0
		
	Simplified Guard

	Original rule:
	l3 -> l4 : result_4^0'=result_4^0, x_5^0'=x_5^0, y_6^0'=y_6^0, (0 == 0 /\ 1+x_5^0-y_6^0 <= 0), cost: 1
	New rule:
	l3 -> l4 : result_4^0'=result_4^0, x_5^0'=x_5^0, y_6^0'=y_6^0, 1+x_5^0-y_6^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l3 -> l4 : result_4^0'=result_4^0, x_5^0'=x_5^0, y_6^0'=y_6^0, 1+x_5^0-y_6^0 <= 0, cost: 1
	New rule:
	l3 -> l4 : 1+x_5^0-y_6^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l3 -> l4 : result_4^0'=result_4^post4, x_5^0'=x_5^post4, y_6^0'=y_6^post4, (-x_5^post4+x_5^0 == 0 /\ -y_6^post4+y_6^0 == 0 /\ result_4^0-result_4^post4 == 0 /\ 1-x_5^0+y_6^0 <= 0), cost: 1
	New rule:
	l3 -> l4 : result_4^0'=result_4^0, x_5^0'=x_5^0, y_6^0'=y_6^0, (0 == 0 /\ 1-x_5^0+y_6^0 <= 0), cost: 1
	
		propagated equality x_5^post4 = x_5^0
		
		propagated equality y_6^post4 = y_6^0
		
		propagated equality result_4^post4 = result_4^0
		
	Simplified Guard

	Original rule:
	l3 -> l4 : result_4^0'=result_4^0, x_5^0'=x_5^0, y_6^0'=y_6^0, (0 == 0 /\ 1-x_5^0+y_6^0 <= 0), cost: 1
	New rule:
	l3 -> l4 : result_4^0'=result_4^0, x_5^0'=x_5^0, y_6^0'=y_6^0, 1-x_5^0+y_6^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l3 -> l4 : result_4^0'=result_4^0, x_5^0'=x_5^0, y_6^0'=y_6^0, 1-x_5^0+y_6^0 <= 0, cost: 1
	New rule:
	l3 -> l4 : 1-x_5^0+y_6^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l4 -> l2 : result_4^0'=result_4^post5, x_5^0'=x_5^post5, y_6^0'=y_6^post5, (0 == 0 /\ x_5^0-x_5^post5 == 0 /\ -y_6^post5+y_6^0 == 0), cost: 1
	New rule:
	l4 -> l2 : result_4^0'=result_4^post5, x_5^0'=x_5^0, y_6^0'=y_6^0, 0 == 0, cost: 1
	
		propagated equality x_5^post5 = x_5^0
		
		propagated equality y_6^post5 = y_6^0
		
	Simplified Guard

	Original rule:
	l4 -> l2 : result_4^0'=result_4^post5, x_5^0'=x_5^0, y_6^0'=y_6^0, 0 == 0, cost: 1
	New rule:
	l4 -> l2 : result_4^0'=result_4^post5, x_5^0'=x_5^0, y_6^0'=y_6^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l4 -> l2 : result_4^0'=result_4^post5, x_5^0'=x_5^0, y_6^0'=y_6^0, T, cost: 1
	New rule:
	l4 -> l2 : result_4^0'=result_4^post5, T, cost: 1
	
	Propagated Equalities

	Original rule:
	l7 -> l1 : result_4^0'=result_4^post1, x_5^0'=x_5^post1, y_6^0'=y_6^post1, (-x_5^post1+x_5^post10 == 0 /\ result_4^post10-result_4^post1 == 0 /\ -y_6^post1+y_6^post10 == 0 /\ x_5^0-x_5^post10 == 0 /\ -result_4^post10+result_4^0 == 0 /\ -y_6^post10+y_6^0 == 0), cost: 1
	New rule:
	l7 -> l1 : result_4^0'=result_4^post10, x_5^0'=x_5^post10, y_6^0'=y_6^post10, (0 == 0 /\ x_5^0-x_5^post10 == 0 /\ -result_4^post10+result_4^0 == 0 /\ -y_6^post10+y_6^0 == 0), cost: 1
	
		propagated equality x_5^post1 = x_5^post10
		
		propagated equality result_4^post1 = result_4^post10
		
		propagated equality y_6^post1 = y_6^post10
		
	Propagated Equalities

	Original rule:
	l7 -> l1 : result_4^0'=result_4^post10, x_5^0'=x_5^post10, y_6^0'=y_6^post10, (0 == 0 /\ x_5^0-x_5^post10 == 0 /\ -result_4^post10+result_4^0 == 0 /\ -y_6^post10+y_6^0 == 0), cost: 1
	New rule:
	l7 -> l1 : result_4^0'=result_4^0, x_5^0'=x_5^0, y_6^0'=y_6^0, 0 == 0, cost: 1
	
		propagated equality x_5^post10 = x_5^0
		
		propagated equality result_4^post10 = result_4^0
		
		propagated equality y_6^post10 = y_6^0
		
	Simplified Guard

	Original rule:
	l7 -> l1 : result_4^0'=result_4^0, x_5^0'=x_5^0, y_6^0'=y_6^0, 0 == 0, cost: 1
	New rule:
	l7 -> l1 : result_4^0'=result_4^0, x_5^0'=x_5^0, y_6^0'=y_6^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l7 -> l1 : result_4^0'=result_4^0, x_5^0'=x_5^0, y_6^0'=y_6^0, T, cost: 1
	New rule:
	l7 -> l1 : T, cost: 1
	
	made implied equalities explicit

	Original rule:
	l1 -> l1 : result_4^0'=result_4^post7, x_5^0'=x_5^post7, y_6^0'=y_6^post7, (-result_4^post7+result_4^post6 == 0 /\ -1-x_5^0+x_5^post6 == 0 /\ -result_4^post6+result_4^0 == 0 /\ -y_6^post6+y_6^0 == 0 /\ x_5^0-y_6^0 <= 0 /\ -x_5^post7+x_5^post6 == 0 /\ -y_6^post7+y_6^post6 == 0 /\ -x_5^0+y_6^0 <= 0), cost: 1
	New rule:
	l1 -> l1 : result_4^0'=result_4^post7, x_5^0'=x_5^post7, y_6^0'=y_6^post7, (-result_4^post7+result_4^post6 == 0 /\ -1-x_5^0+x_5^post6 == 0 /\ -result_4^post6+result_4^0 == 0 /\ -y_6^post6+y_6^0 == 0 /\ x_5^0-y_6^0 <= 0 /\ x_5^0-y_6^0 == 0 /\ -x_5^post7+x_5^post6 == 0 /\ -y_6^post7+y_6^post6 == 0 /\ -x_5^0+y_6^0 <= 0), cost: 1
	
	Propagated Equalities

	Original rule:
	l1 -> l1 : result_4^0'=result_4^post7, x_5^0'=x_5^post7, y_6^0'=y_6^post7, (-result_4^post7+result_4^post6 == 0 /\ -1-x_5^0+x_5^post6 == 0 /\ -result_4^post6+result_4^0 == 0 /\ -y_6^post6+y_6^0 == 0 /\ x_5^0-y_6^0 <= 0 /\ x_5^0-y_6^0 == 0 /\ -x_5^post7+x_5^post6 == 0 /\ -y_6^post7+y_6^post6 == 0 /\ -x_5^0+y_6^0 <= 0), cost: 1
	New rule:
	l1 -> l1 : result_4^0'=result_4^post6, x_5^0'=x_5^post6, y_6^0'=y_6^post6, (0 == 0 /\ -1-x_5^0+x_5^post6 == 0 /\ -result_4^post6+result_4^0 == 0 /\ -y_6^post6+y_6^0 == 0 /\ x_5^0-y_6^0 <= 0 /\ x_5^0-y_6^0 == 0 /\ -x_5^0+y_6^0 <= 0), cost: 1
	
		propagated equality result_4^post7 = result_4^post6
		
		propagated equality x_5^post7 = x_5^post6
		
		propagated equality y_6^post7 = y_6^post6
		
	Propagated Equalities

	Original rule:
	l1 -> l1 : result_4^0'=result_4^post6, x_5^0'=x_5^post6, y_6^0'=y_6^post6, (0 == 0 /\ -1-x_5^0+x_5^post6 == 0 /\ -result_4^post6+result_4^0 == 0 /\ -y_6^post6+y_6^0 == 0 /\ x_5^0-y_6^0 <= 0 /\ x_5^0-y_6^0 == 0 /\ -x_5^0+y_6^0 <= 0), cost: 1
	New rule:
	l1 -> l1 : result_4^0'=result_4^0, x_5^0'=1+x_5^0, y_6^0'=y_6^0, (0 == 0 /\ x_5^0-y_6^0 <= 0 /\ x_5^0-y_6^0 == 0 /\ -x_5^0+y_6^0 <= 0), cost: 1
	
		propagated equality x_5^post6 = 1+x_5^0
		
		propagated equality result_4^post6 = result_4^0
		
		propagated equality y_6^post6 = y_6^0
		
	Simplified Guard

	Original rule:
	l1 -> l1 : result_4^0'=result_4^0, x_5^0'=1+x_5^0, y_6^0'=y_6^0, (0 == 0 /\ x_5^0-y_6^0 <= 0 /\ x_5^0-y_6^0 == 0 /\ -x_5^0+y_6^0 <= 0), cost: 1
	New rule:
	l1 -> l1 : result_4^0'=result_4^0, x_5^0'=1+x_5^0, y_6^0'=y_6^0, (x_5^0-y_6^0 <= 0 /\ x_5^0-y_6^0 == 0 /\ -x_5^0+y_6^0 <= 0), cost: 1
	
	made implied equalities explicit

	Original rule:
	l1 -> l1 : result_4^0'=result_4^0, x_5^0'=1+x_5^0, y_6^0'=y_6^0, (x_5^0-y_6^0 <= 0 /\ x_5^0-y_6^0 == 0 /\ -x_5^0+y_6^0 <= 0), cost: 1
	New rule:
	l1 -> l1 : result_4^0'=result_4^0, x_5^0'=1+x_5^0, y_6^0'=y_6^0, (x_5^0-y_6^0 <= 0 /\ x_5^0-y_6^0 == 0 /\ -x_5^0+y_6^0 <= 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	l1 -> l1 : result_4^0'=result_4^0, x_5^0'=1+x_5^0, y_6^0'=y_6^0, (x_5^0-y_6^0 <= 0 /\ x_5^0-y_6^0 == 0 /\ -x_5^0+y_6^0 <= 0), cost: 1
	New rule:
	l1 -> l1 : x_5^0'=1+x_5^0, (x_5^0-y_6^0 <= 0 /\ x_5^0-y_6^0 == 0 /\ -x_5^0+y_6^0 <= 0), cost: 1
	
	Propagated Equalities

	Original rule:
	l1 -> l1 : result_4^0'=result_4^post9, x_5^0'=x_5^post9, y_6^0'=y_6^post9, (y_6^0-y_6^post8 == 0 /\ -x_5^post9+x_5^post8 == 0 /\ 1+x_5^0-y_6^0 <= 0 /\ -1-x_5^0+x_5^post8 == 0 /\ -y_6^post9+y_6^post8 == 0 /\ -result_4^post8+result_4^0 == 0 /\ -result_4^post9+result_4^post8 == 0), cost: 1
	New rule:
	l1 -> l1 : result_4^0'=result_4^post8, x_5^0'=x_5^post8, y_6^0'=y_6^post8, (0 == 0 /\ y_6^0-y_6^post8 == 0 /\ 1+x_5^0-y_6^0 <= 0 /\ -1-x_5^0+x_5^post8 == 0 /\ -result_4^post8+result_4^0 == 0), cost: 1
	
		propagated equality x_5^post9 = x_5^post8
		
		propagated equality y_6^post9 = y_6^post8
		
		propagated equality result_4^post9 = result_4^post8
		
	Propagated Equalities

	Original rule:
	l1 -> l1 : result_4^0'=result_4^post8, x_5^0'=x_5^post8, y_6^0'=y_6^post8, (0 == 0 /\ y_6^0-y_6^post8 == 0 /\ 1+x_5^0-y_6^0 <= 0 /\ -1-x_5^0+x_5^post8 == 0 /\ -result_4^post8+result_4^0 == 0), cost: 1
	New rule:
	l1 -> l1 : result_4^0'=result_4^0, x_5^0'=1+x_5^0, y_6^0'=y_6^0, (0 == 0 /\ 1+x_5^0-y_6^0 <= 0), cost: 1
	
		propagated equality y_6^post8 = y_6^0
		
		propagated equality x_5^post8 = 1+x_5^0
		
		propagated equality result_4^post8 = result_4^0
		
	Simplified Guard

	Original rule:
	l1 -> l1 : result_4^0'=result_4^0, x_5^0'=1+x_5^0, y_6^0'=y_6^0, (0 == 0 /\ 1+x_5^0-y_6^0 <= 0), cost: 1
	New rule:
	l1 -> l1 : result_4^0'=result_4^0, x_5^0'=1+x_5^0, y_6^0'=y_6^0, 1+x_5^0-y_6^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l1 -> l1 : result_4^0'=result_4^0, x_5^0'=1+x_5^0, y_6^0'=y_6^0, 1+x_5^0-y_6^0 <= 0, cost: 1
	New rule:
	l1 -> l1 : x_5^0'=1+x_5^0, 1+x_5^0-y_6^0 <= 0, cost: 1

Step with 17

	Trace

	17[T]
	
	Blocked

	[{}, {}]

Step with 13

	Trace

	17[T], 13[(-x_5^0+y_6^0 <= 0)]
	
	Blocked

	[{}, {}, {}]

Step with 15

	Trace

	17[T], 13[(-x_5^0+y_6^0 <= 0)], 15[(1-x_5^0+y_6^0 <= 0)]
	
	Blocked

	[{}, {}, {14[T]}, {}]

Step with 16

	Trace

	17[T], 13[(-x_5^0+y_6^0 <= 0)], 15[(1-x_5^0+y_6^0 <= 0)], 16[T]
	
	Blocked

	[{}, {}, {14[T]}, {}, {}]

Backtrack

	Trace

	17[T], 13[(-x_5^0+y_6^0 <= 0)], 15[(1-x_5^0+y_6^0 <= 0)]
	
	Blocked

	[{}, {}, {14[T]}, {16[T]}]

Backtrack

	Trace

	17[T], 13[(-x_5^0+y_6^0 <= 0)]
	
	Blocked

	[{}, {}, {14[T], 15[T]}]

Backtrack

	Trace

	17[T]
	
	Blocked

	[{}, {13[T]}]

Step with 18

	Trace

	17[T], 18[(x_5^0-y_6^0 <= 0 /\ x_5^0-y_6^0 == 0 /\ -x_5^0+y_6^0 <= 0)]
	
	Blocked

	[{}, {13[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 13

	Trace

	17[T], 18[(x_5^0-y_6^0 <= 0 /\ x_5^0-y_6^0 == 0 /\ -x_5^0+y_6^0 <= 0)], 13[(-x_5^0+y_6^0 <= 0)]
	
	Blocked

	[{}, {13[T]}, {18[T], 19[T]}, {}]

Step with 15

	Trace

	17[T], 18[(x_5^0-y_6^0 <= 0 /\ x_5^0-y_6^0 == 0 /\ -x_5^0+y_6^0 <= 0)], 13[(-x_5^0+y_6^0 <= 0)], 15[(1-x_5^0+y_6^0 <= 0)]
	
	Blocked

	[{}, {13[T]}, {18[T], 19[T]}, {}, {}]

Step with 16

	Trace

	17[T], 18[(x_5^0-y_6^0 <= 0 /\ x_5^0-y_6^0 == 0 /\ -x_5^0+y_6^0 <= 0)], 13[(-x_5^0+y_6^0 <= 0)], 15[(1-x_5^0+y_6^0 <= 0)], 16[T]
	
	Blocked

	[{}, {13[T]}, {18[T], 19[T]}, {}, {}, {}]

Backtrack

	Trace

	17[T], 18[(x_5^0-y_6^0 <= 0 /\ x_5^0-y_6^0 == 0 /\ -x_5^0+y_6^0 <= 0)], 13[(-x_5^0+y_6^0 <= 0)], 15[(1-x_5^0+y_6^0 <= 0)]
	
	Blocked

	[{}, {13[T]}, {18[T], 19[T]}, {}, {16[T]}]

Backtrack

	Trace

	17[T], 18[(x_5^0-y_6^0 <= 0 /\ x_5^0-y_6^0 == 0 /\ -x_5^0+y_6^0 <= 0)], 13[(-x_5^0+y_6^0 <= 0)]
	
	Blocked

	[{}, {13[T]}, {18[T], 19[T]}, {15[T]}]

Backtrack

	Trace

	17[T], 18[(x_5^0-y_6^0 <= 0 /\ x_5^0-y_6^0 == 0 /\ -x_5^0+y_6^0 <= 0)]
	
	Blocked

	[{}, {13[T]}, {13[T], 18[T], 19[T]}]

Backtrack

	Trace

	17[T]
	
	Blocked

	[{}, {13[T], 18[T]}]

Step with 19

	Trace

	17[T], 19[(1+x_5^0-y_6^0 <= 0)]
	
	Blocked

	[{}, {13[T], 18[T]}, {}]

Accelerate

Start location: l7
Program variables: result_4^0 x_5^0 y_6^0
  13: l1 -> l3 : -x_5^0+y_6^0 <= 0, cost: 1
  18: l1 -> l1 : x_5^0'=1+x_5^0, (x_5^0-y_6^0 <= 0 /\ x_5^0-y_6^0 == 0 /\ -x_5^0+y_6^0 <= 0), cost: 1
  19: l1 -> l1 : x_5^0'=1+x_5^0, 1+x_5^0-y_6^0 <= 0, cost: 1
  20: l1 -> l1 : x_5^0'=x_5^0+n, (-x_5^0+y_6^0-n >= 0 /\ -1+n >= 0), cost: 1
  14: l3 -> l4 : 1+x_5^0-y_6^0 <= 0, cost: 1
  15: l3 -> l4 : 1-x_5^0+y_6^0 <= 0, cost: 1
  16: l4 -> l2 : result_4^0'=result_4^post5, T, cost: 1
  17: l7 -> l1 : T, cost: 1

	Loop Acceleration

	Original rule:
	l1 -> l1 : x_5^0'=1+x_5^0, (1+x_5^0-y_6^0 <= 0), cost: 1
	New rule:
	l1 -> l1 : x_5^0'=x_5^0+n, (-x_5^0+y_6^0-n >= 0 /\ -1+n >= 0), cost: 1

		-1-x_5^0+y_6^0 >= 0 [0]: montonic decrease yields -x_5^0+y_6^0-n >= 0
		
		-1-x_5^0+y_6^0 >= 0 [1]: eventual increase yields (-1-x_5^0+y_6^0 >= 0 /\ 1 <= 0)
		
		Replacement map: {-1-x_5^0+y_6^0 >= 0 -> -x_5^0+y_6^0-n >= 0}

	Trace

	17[T], 20[(-x_5^0+y_6^0-n >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {13[T], 18[T]}, {19[T], 20[T]}]

Step with 13

	Trace

	17[T], 20[(-x_5^0+y_6^0-n >= 0 /\ -1+n >= 0)], 13[(-x_5^0+y_6^0 <= 0)]
	
	Blocked

	[{}, {13[T], 18[T]}, {19[T], 20[T]}, {}]

Backtrack

	Trace

	17[T], 20[(-x_5^0+y_6^0-n >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {13[T], 18[T]}, {13[T], 19[T], 20[T]}]

Step with 18

	Trace

	17[T], 20[(-x_5^0+y_6^0-n >= 0 /\ -1+n >= 0)], 18[(x_5^0-y_6^0 <= 0 /\ x_5^0-y_6^0 == 0 /\ -x_5^0+y_6^0 <= 0)]
	
	Blocked

	[{}, {13[T], 18[T]}, {13[T], 19[T], 20[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 13

	Trace

	17[T], 20[(-x_5^0+y_6^0-n >= 0 /\ -1+n >= 0)], 18[(x_5^0-y_6^0 <= 0 /\ x_5^0-y_6^0 == 0 /\ -x_5^0+y_6^0 <= 0)], 13[(-x_5^0+y_6^0 <= 0)]
	
	Blocked

	[{}, {13[T], 18[T]}, {13[T], 19[T], 20[T]}, {18[T], 19[T], 20[T]}, {}]

Step with 15

	Trace

	17[T], 20[(-x_5^0+y_6^0-n >= 0 /\ -1+n >= 0)], 18[(x_5^0-y_6^0 <= 0 /\ x_5^0-y_6^0 == 0 /\ -x_5^0+y_6^0 <= 0)], 13[(-x_5^0+y_6^0 <= 0)], 15[(1-x_5^0+y_6^0 <= 0)]
	
	Blocked

	[{}, {13[T], 18[T]}, {13[T], 19[T], 20[T]}, {18[T], 19[T], 20[T]}, {}, {}]

Step with 16

	Trace

	17[T], 20[(-x_5^0+y_6^0-n >= 0 /\ -1+n >= 0)], 18[(x_5^0-y_6^0 <= 0 /\ x_5^0-y_6^0 == 0 /\ -x_5^0+y_6^0 <= 0)], 13[(-x_5^0+y_6^0 <= 0)], 15[(1-x_5^0+y_6^0 <= 0)], 16[T]
	
	Blocked

	[{}, {13[T], 18[T]}, {13[T], 19[T], 20[T]}, {18[T], 19[T], 20[T]}, {}, {}, {}]

Backtrack

	Trace

	17[T], 20[(-x_5^0+y_6^0-n >= 0 /\ -1+n >= 0)], 18[(x_5^0-y_6^0 <= 0 /\ x_5^0-y_6^0 == 0 /\ -x_5^0+y_6^0 <= 0)], 13[(-x_5^0+y_6^0 <= 0)], 15[(1-x_5^0+y_6^0 <= 0)]
	
	Blocked

	[{}, {13[T], 18[T]}, {13[T], 19[T], 20[T]}, {18[T], 19[T], 20[T]}, {}, {16[T]}]

Backtrack

	Trace

	17[T], 20[(-x_5^0+y_6^0-n >= 0 /\ -1+n >= 0)], 18[(x_5^0-y_6^0 <= 0 /\ x_5^0-y_6^0 == 0 /\ -x_5^0+y_6^0 <= 0)], 13[(-x_5^0+y_6^0 <= 0)]
	
	Blocked

	[{}, {13[T], 18[T]}, {13[T], 19[T], 20[T]}, {18[T], 19[T], 20[T]}, {15[T]}]

Backtrack

	Trace

	17[T], 20[(-x_5^0+y_6^0-n >= 0 /\ -1+n >= 0)], 18[(x_5^0-y_6^0 <= 0 /\ x_5^0-y_6^0 == 0 /\ -x_5^0+y_6^0 <= 0)]
	
	Blocked

	[{}, {13[T], 18[T]}, {13[T], 19[T], 20[T]}, {13[T], 18[T], 19[T], 20[T]}]

Backtrack

	Trace

	17[T], 20[(-x_5^0+y_6^0-n >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {13[T], 18[T]}, {13[T], 18[T], 19[T], 20[T]}]

Backtrack

	Trace

	17[T]
	
	Blocked

	[{}, {13[T], 18[T], 20[T]}]

Step with 19

	Trace

	17[T], 19[(1+x_5^0-y_6^0 <= 0)]
	
	Blocked

	[{}, {13[T], 18[T], 20[T]}, {}]

Covered

	Trace

	17[T]
	
	Blocked

	[{}, {13[T], 18[T], 19[T], 20[T]}]

Backtrack

	Trace

	Blocked

	[{17[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
