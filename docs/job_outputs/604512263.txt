NO

Initial ITS

Start location: [1]
Program variables: i
   0: [1] -> [2] : i'=0, T, cost: 1
   1: [2] -> [3] : -100+i < 0, cost: 1
   9: [2] -> [9] : -100+i >= 0, cost: 1
   2: [3] -> [5] : -50+i < 0, cost: 1
   5: [3] -> [7] : -50+i >= 0, cost: 1
   8: [4] -> [2] : T, cost: 1
   3: [5] -> [6] : i'=1+i, T, cost: 1
   4: [6] -> [4] : T, cost: 1
   6: [7] -> [8] : i'=-1+i, T, cost: 1
   7: [8] -> [4] : T, cost: 1

Chained Linear Paths

Start location: [1]
Program variables: i
   0: [1] -> [2] : i'=0, T, cost: 1
   1: [2] -> [3] : -100+i < 0, cost: 1
   9: [2] -> [9] : -100+i >= 0, cost: 1
  12: [3] -> [4] : i'=1+i, -50+i < 0, cost: 1
  13: [3] -> [4] : i'=-1+i, -50+i >= 0, cost: 1
   8: [4] -> [2] : T, cost: 1

	Eliminating location [5] by chaining:

	Applied chaining

	First rule:
	[3] -> [5] : -50+i < 0, cost: 1
	Second rule:
	[5] -> [6] : i'=1+i, T, cost: 1
	New rule:
	[3] -> [6] : i'=1+i, -50+i < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 2 3
	
	Eliminating location [7] by chaining:

	Applied chaining

	First rule:
	[3] -> [7] : -50+i >= 0, cost: 1
	Second rule:
	[7] -> [8] : i'=-1+i, T, cost: 1
	New rule:
	[3] -> [8] : i'=-1+i, -50+i >= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 5 6
	
	Eliminating location [6] by chaining:

	Applied chaining

	First rule:
	[3] -> [6] : i'=1+i, -50+i < 0, cost: 1
	Second rule:
	[6] -> [4] : T, cost: 1
	New rule:
	[3] -> [4] : i'=1+i, -50+i < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 4 10
	
	Eliminating location [8] by chaining:

	Applied chaining

	First rule:
	[3] -> [8] : i'=-1+i, -50+i >= 0, cost: 1
	Second rule:
	[8] -> [4] : T, cost: 1
	New rule:
	[3] -> [4] : i'=-1+i, -50+i >= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 7 11

Step with 0

	Trace

	0[T]
	
	Blocked

	[{}, {}]

Step with 1

	Trace

	0[T], 1[(-100+i < 0)]
	
	Blocked

	[{}, {9[T]}, {}]

Step with 12

	Trace

	0[T], 1[(-100+i < 0)], 12[(-50+i < 0)]
	
	Blocked

	[{}, {9[T]}, {}, {}]

Step with 8

	Trace

	0[T], 1[(-100+i < 0)], 12[(-50+i < 0)], 8[T]
	
	Blocked

	[{}, {9[T]}, {}, {}, {}]

Accelerate

Start location: [1]
Program variables: i
   0: [1] -> [2] : i'=0, T, cost: 1
   1: [2] -> [3] : -100+i < 0, cost: 1
   9: [2] -> [9] : -100+i >= 0, cost: 1
  14: [2] -> [2] : i'=n+i, (-1+n >= 0 /\ 100-i > 0 /\ 51-n-i > 0), cost: 1
  12: [3] -> [4] : i'=1+i, -50+i < 0, cost: 1
  13: [3] -> [4] : i'=-1+i, -50+i >= 0, cost: 1
   8: [4] -> [2] : T, cost: 1

	Loop Acceleration

	Original rule:
	[2] -> [2] : i'=1+i, (-50+i < 0 /\ -100+i < 0), cost: 1
	New rule:
	[2] -> [2] : i'=n+i, (-1+n >= 0 /\ 100-i > 0 /\ 51-n-i > 0), cost: 1

		100-i > 0 [0]: monotonic increase yields 100-i > 0, dependencies: 50-i > 0
		
		100-i > 0 [1]: montonic decrease yields 101-n-i > 0, dependencies: 50-i > 0
		
		100-i > 0 [2]: eventual decrease yields (100-i > 0 /\ 101-n-i > 0)
		
		100-i > 0 [3]: eventual increase yields (1 <= 0 /\ 100-i > 0)
		
		50-i > 0 [0]: montonic decrease yields 51-n-i > 0
		
		50-i > 0 [1]: eventual increase yields (1 <= 0 /\ 50-i > 0)
		
		Replacement map: {100-i > 0 -> 100-i > 0, 50-i > 0 -> 51-n-i > 0}

	Trace

	0[T], 14[(-1+n >= 0 /\ 100-i > 0 /\ 51-n-i > 0)]
	
	Blocked

	[{}, {9[T]}, {14[T]}]

Step with 1

	Trace

	0[T], 14[(-1+n >= 0 /\ 100-i > 0 /\ 51-n-i > 0)], 1[(-100+i < 0)]
	
	Blocked

	[{}, {9[T]}, {9[T], 14[T]}, {}]

Step with 12

	Trace

	0[T], 14[(-1+n >= 0 /\ 100-i > 0 /\ 51-n-i > 0)], 1[(-100+i < 0)], 12[(-50+i < 0)]
	
	Blocked

	[{}, {9[T]}, {9[T], 14[T]}, {}, {}]

Step with 8

	Trace

	0[T], 14[(-1+n >= 0 /\ 100-i > 0 /\ 51-n-i > 0)], 1[(-100+i < 0)], 12[(-50+i < 0)], 8[T]
	
	Blocked

	[{}, {9[T]}, {9[T], 14[T]}, {}, {}, {}]

Covered

	Trace

	0[T], 14[(-1+n >= 0 /\ 100-i > 0 /\ 51-n-i > 0)], 1[(-100+i < 0)], 12[(-50+i < 0)]
	
	Blocked

	[{}, {9[T]}, {9[T], 14[T]}, {}, {8[T]}]

Backtrack

	Trace

	0[T], 14[(-1+n >= 0 /\ 100-i > 0 /\ 51-n-i > 0)], 1[(-100+i < 0)]
	
	Blocked

	[{}, {9[T]}, {9[T], 14[T]}, {12[T]}]

Step with 13

	Trace

	0[T], 14[(-1+n >= 0 /\ 100-i > 0 /\ 51-n-i > 0)], 1[(-100+i < 0)], 13[(-50+i >= 0)]
	
	Blocked

	[{}, {9[T]}, {9[T], 14[T]}, {12[T]}, {}]

Step with 8

	Trace

	0[T], 14[(-1+n >= 0 /\ 100-i > 0 /\ 51-n-i > 0)], 1[(-100+i < 0)], 13[(-50+i >= 0)], 8[T]
	
	Blocked

	[{}, {9[T]}, {9[T], 14[T]}, {12[T]}, {}, {}]

Accelerate

Start location: [1]
Program variables: i
   0: [1] -> [2] : i'=0, T, cost: 1
   1: [2] -> [3] : -100+i < 0, cost: 1
   9: [2] -> [9] : -100+i >= 0, cost: 1
  14: [2] -> [2] : i'=n+i, (-1+n >= 0 /\ 100-i > 0 /\ 51-n-i > 0), cost: 1
  15: [2] -> [2] : i'=-n2+i, (-1+n2 >= 0 /\ 100-i > 0 /\ -49-n2+i >= 0), cost: 1
  12: [3] -> [4] : i'=1+i, -50+i < 0, cost: 1
  13: [3] -> [4] : i'=-1+i, -50+i >= 0, cost: 1
   8: [4] -> [2] : T, cost: 1

	Loop Acceleration

	Original rule:
	[2] -> [2] : i'=-1+i, (-50+i >= 0 /\ -100+i < 0), cost: 1
	New rule:
	[2] -> [2] : i'=-n2+i, (-1+n2 >= 0 /\ 100-i > 0 /\ -49-n2+i >= 0), cost: 1

		-50+i >= 0 [0]: montonic decrease yields -49-n2+i >= 0
		
		-50+i >= 0 [1]: eventual increase yields (-50+i >= 0 /\ 1 <= 0)
		
		100-i > 0 [0]: monotonic increase yields 100-i > 0
		
		Replacement map: {-50+i >= 0 -> -49-n2+i >= 0, 100-i > 0 -> 100-i > 0}

	Trace

	0[T], 14[(-1+n >= 0 /\ 100-i > 0 /\ 51-n-i > 0)], 15[(-1+n2 >= 0 /\ 100-i > 0 /\ -49-n2+i >= 0)]
	
	Blocked

	[{}, {9[T]}, {9[T], 14[T]}, {15[T]}]

Accelerate

Start location: [1]
Program variables: i
   0: [1] -> [2] : i'=0, T, cost: 1
   1: [2] -> [3] : -100+i < 0, cost: 1
   9: [2] -> [9] : -100+i >= 0, cost: 1
  14: [2] -> [2] : i'=n+i, (-1+n >= 0 /\ 100-i > 0 /\ 51-n-i > 0), cost: 1
  15: [2] -> [2] : i'=-n2+i, (-1+n2 >= 0 /\ 100-i > 0 /\ -49-n2+i >= 0), cost: 1
  16: [2] -> LoAT_sink : (-1+n2 >= 0 /\ -49-n2+i+n1 >= 0 /\ 100-i-n1 > 0 /\ 100-i > 0 /\ 51-i-n1 > 0 /\ -n2+n1 <= 0 /\ -1+n1 >= 0), cost: NONTERM
  17: [2] -> [2] : i'=-n2*n3+n1*n3+i, (-1+n2 >= 0 /\ -49-n2+i+n1 >= 0 /\ 51+n2*(-1+n3)-i-n1-n1*(-1+n3) > 0 /\ 100-i > 0 /\ 51-i-n1 > 0 /\ 100+n2*(-1+n3)-i-n1-n1*(-1+n3) > 0 /\ -1+n1 >= 0 /\ -1+n3 >= 0), cost: 1
  12: [3] -> [4] : i'=1+i, -50+i < 0, cost: 1
  13: [3] -> [4] : i'=-1+i, -50+i >= 0, cost: 1
   8: [4] -> [2] : T, cost: 1

	Certificate of Non-Termination

	Original rule:
	[2] -> [2] : i'=-n2+i+n1, (-1+n2 >= 0 /\ -49-n2+i+n1 >= 0 /\ 100-i-n1 > 0 /\ 100-i > 0 /\ 51-i-n1 > 0 /\ -1+n1 >= 0), cost: 1
	New rule:
	[2] -> LoAT_sink : (-1+n2 >= 0 /\ -49-n2+i+n1 >= 0 /\ 100-i-n1 > 0 /\ 100-i > 0 /\ 51-i-n1 > 0 /\ -n2+n1 <= 0 /\ -1+n1 >= 0), cost: NONTERM

		-1+n2 >= 0 [0]: monotonic increase yields -1+n2 >= 0
		
		-49-n2+i+n1 >= 0 [0]: monotonic increase yields -49-n2+i+n1 >= 0, dependencies: 51-i-n1 > 0 -1+n1 >= 0
		
		-49-n2+i+n1 >= 0 [1]: eventual decrease yields (-49-n2+i+n1 >= 0 /\ -49-n2*(-1+n3)-n2+i+n1+n1*(-1+n3) >= 0)
		
		-49-n2+i+n1 >= 0 [2]: eventual increase yields (-49-n2+i+n1 >= 0 /\ n2-n1 <= 0)
		
		100-i-n1 > 0 [0]: montonic decrease yields 100+n2*(-1+n3)-i-n1-n1*(-1+n3) > 0, dependencies: 51-i-n1 > 0
		
		100-i-n1 > 0 [1]: eventual decrease yields (100-i-n1 > 0 /\ 100+n2*(-1+n3)-i-n1-n1*(-1+n3) > 0)
		
		100-i-n1 > 0 [2]: eventual increase yields (100-i-n1 > 0 /\ -n2+n1 <= 0)
		
		100-i > 0 [0]: monotonic increase yields 100-i > 0, dependencies: -1+n2 >= 0 100-i-n1 > 0
		
		51-i-n1 > 0 [0]: eventual decrease yields (51+n2*(-1+n3)-i-n1-n1*(-1+n3) > 0 /\ 51-i-n1 > 0)
		
		51-i-n1 > 0 [1]: eventual increase yields (51-i-n1 > 0 /\ -n2+n1 <= 0)
		
		-1+n1 >= 0 [0]: monotonic increase yields -1+n1 >= 0
		
		Replacement map: {-1+n2 >= 0 -> -1+n2 >= 0, -49-n2+i+n1 >= 0 -> -49-n2+i+n1 >= 0, 100-i-n1 > 0 -> (100-i-n1 > 0 /\ -n2+n1 <= 0), 100-i > 0 -> 100-i > 0, 51-i-n1 > 0 -> (51-i-n1 > 0 /\ -n2+n1 <= 0), -1+n1 >= 0 -> -1+n1 >= 0}

	Loop Acceleration

	Original rule:
	[2] -> [2] : i'=-n2+i+n1, (-1+n2 >= 0 /\ -49-n2+i+n1 >= 0 /\ 100-i-n1 > 0 /\ 100-i > 0 /\ 51-i-n1 > 0 /\ -1+n1 >= 0), cost: 1
	New rule:
	[2] -> [2] : i'=-n2*n3+n1*n3+i, (-1+n2 >= 0 /\ -49-n2+i+n1 >= 0 /\ 51+n2*(-1+n3)-i-n1-n1*(-1+n3) > 0 /\ 100-i > 0 /\ 51-i-n1 > 0 /\ 100+n2*(-1+n3)-i-n1-n1*(-1+n3) > 0 /\ -1+n1 >= 0 /\ -1+n3 >= 0), cost: 1

		-1+n2 >= 0 [0]: monotonic increase yields -1+n2 >= 0
		
		-49-n2+i+n1 >= 0 [0]: monotonic increase yields -49-n2+i+n1 >= 0, dependencies: 51-i-n1 > 0 -1+n1 >= 0
		
		-49-n2+i+n1 >= 0 [1]: eventual decrease yields (-49-n2+i+n1 >= 0 /\ -49-n2*(-1+n3)-n2+i+n1+n1*(-1+n3) >= 0)
		
		-49-n2+i+n1 >= 0 [2]: eventual increase yields (-49-n2+i+n1 >= 0 /\ n2-n1 <= 0)
		
		100-i-n1 > 0 [0]: montonic decrease yields 100+n2*(-1+n3)-i-n1-n1*(-1+n3) > 0, dependencies: 51-i-n1 > 0
		
		100-i-n1 > 0 [1]: eventual decrease yields (100-i-n1 > 0 /\ 100+n2*(-1+n3)-i-n1-n1*(-1+n3) > 0)
		
		100-i-n1 > 0 [2]: eventual increase yields (100-i-n1 > 0 /\ -n2+n1 <= 0)
		
		100-i > 0 [0]: monotonic increase yields 100-i > 0, dependencies: -1+n2 >= 0 100-i-n1 > 0
		
		51-i-n1 > 0 [0]: eventual decrease yields (51+n2*(-1+n3)-i-n1-n1*(-1+n3) > 0 /\ 51-i-n1 > 0)
		
		51-i-n1 > 0 [1]: eventual increase yields (51-i-n1 > 0 /\ -n2+n1 <= 0)
		
		-1+n1 >= 0 [0]: monotonic increase yields -1+n1 >= 0
		
		Replacement map: {-1+n2 >= 0 -> -1+n2 >= 0, -49-n2+i+n1 >= 0 -> -49-n2+i+n1 >= 0, 100-i-n1 > 0 -> 100+n2*(-1+n3)-i-n1-n1*(-1+n3) > 0, 100-i > 0 -> 100-i > 0, 51-i-n1 > 0 -> (51+n2*(-1+n3)-i-n1-n1*(-1+n3) > 0 /\ 51-i-n1 > 0), -1+n1 >= 0 -> -1+n1 >= 0}

	Trace

	0[T], 17[(-1+n2 >= 0 /\ -49-n2+i+n1 >= 0 /\ 51+n2*(-1+n3)-i-n1-n1*(-1+n3) > 0 /\ 100-i > 0 /\ 51-i-n1 > 0 /\ 100+n2*(-1+n3)-i-n1-n1*(-1+n3) > 0 /\ -1+n1 >= 0 /\ -1+n3 >= 0)]
	
	Blocked

	[{}, {9[T]}, {17[T]}]

Step with 16

	Trace

	0[T], 17[(-1+n2 >= 0 /\ -49-n2+i+n1 >= 0 /\ 51+n2*(-1+n3)-i-n1-n1*(-1+n3) > 0 /\ 100-i > 0 /\ 51-i-n1 > 0 /\ 100+n2*(-1+n3)-i-n1-n1*(-1+n3) > 0 /\ -1+n1 >= 0 /\ -1+n3 >= 0)], 16[(-1+n2 >= 0 /\ -49-n2+i+n1 >= 0 /\ 100-i-n1 > 0 /\ 100-i > 0 /\ 51-i-n1 > 0 /\ -n2+n1 <= 0 /\ -1+n1 >= 0)]
	
	Blocked

	[{}, {9[T]}, {17[T]}]

Refute

	Counterexample

	[ i=0 ] 0 [ i=49 ] 17 [ i=i ] 16
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
