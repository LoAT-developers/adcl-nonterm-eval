NO

Initial ITS

Start location: __init
Program variables: arg1 arg2 arg3
   0: f93_0_mk_Return -> f148_0_main_InvokeMethod : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (-arg2p1+arg2 == 0 /\ 1+arg2 > 0 /\ arg1p1-arg1 <= 0 /\ arg1p1 > 0 /\ arg1 > 0), cost: 1
   2: f148_0_main_InvokeMethod -> f341_0_main_GE : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, (1+arg2 > 0 /\ -arg1p3 == 0 /\ arg1 > 0), cost: 1
   7: f148_0_main_InvokeMethod -> f165_0_mk_LE : arg1'=arg1p8, arg2'=arg2p8, arg3'=arg3p8, (arg2-arg2p8 == 0 /\ -1+arg2-arg1p8 == 0 /\ arg1 > 0), cost: 1
   8: f148_0_main_InvokeMethod -> f165_0_mk_LE : arg1'=arg1p9, arg2'=arg2p9, arg3'=arg3p9, (arg2-arg2p9 == 0 /\ 1+arg2 > 0 /\ -1-arg1p9+arg2 == 0 /\ arg1 > 0), cost: 1
   1: f1_0_main_ConstantStackPush -> f148_0_main_InvokeMethod : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, (1+arg2 > 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ -arg2p2+arg2 == 0 /\ arg1 > 0), cost: 1
   6: f1_0_main_ConstantStackPush -> f165_0_mk_LE : arg1'=arg1p7, arg2'=arg2p7, arg3'=arg3p7, (1+arg2 > 0 /\ -1+arg2-arg1p7 == 0 /\ arg2-arg2p7 == 0 /\ arg1 > 0), cost: 1
   3: f341_0_main_GE -> f475_0_main_GE : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, (-arg2p4 == 0 /\ -3+arg1 < 0 /\ -arg1p4+arg1 == 0), cost: 1
  10: f341_0_main_GE -> f291_0_length_NULL : arg1'=arg1p11, arg2'=arg2p11, arg3'=arg3p11, (1+arg2p11 > 0 /\ -3+arg1 < 0 /\ 1+arg1p11 > 0), cost: 1
   4: f475_0_main_GE -> f341_0_main_GE : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, (arg3-arg2 <= 0 /\ 1-arg1p5+arg1 == 0), cost: 1
   5: f475_0_main_GE -> f475_0_main_GE : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, (-3+arg1 < 0 /\ arg3-arg2 > 0 /\ arg3 > 0 /\ -arg1p6+arg1 == 0 /\ -arg3p6+arg3 == 0 /\ 1+arg2-arg2p6 == 0), cost: 1
  12: f475_0_main_GE -> f541_0_bubble_NULL : arg1'=arg1p13, arg2'=arg2p13, arg3'=arg3p13, (1+arg1p13 > 0 /\ -3+arg1 < 0 /\ arg3-arg2 > 0 /\ arg3 > 0 /\ 1+arg2p13 > 0), cost: 1
   9: f165_0_mk_LE -> f165_0_mk_LE : arg1'=arg1p10, arg2'=arg2p10, arg3'=arg3p10, (-arg2p10+arg1 == 0 /\ arg2 > 0 /\ -1-arg1p10+arg1 == 0), cost: 1
  11: f291_0_length_NULL -> f291_0_length_NULL : arg1'=arg1p12, arg2'=arg2p12, arg3'=arg3p12, (arg2 > 0 /\ 1+arg2p12 > 0 /\ 1+arg1p12-arg1 <= 0 /\ 1-arg2+arg2p12 <= 0 /\ 1+arg1p12-arg2 <= 0 /\ 1+arg2p12-arg1 <= 0 /\ 1+arg1p12 > 0 /\ arg1 > 0), cost: 1
  13: f541_0_bubble_NULL -> f541_0_bubble_NULL : arg1'=arg1p14, arg2'=arg2p14, arg3'=arg3p14, (-2+arg1 > 0 /\ 2+arg2p14-arg1 <= 0 /\ 2-arg2+arg1p14 <= 0 /\ -2+arg2 > 0 /\ 2+arg1p14-arg1 <= 0 /\ arg1p14 > 0 /\ 2-arg2+arg2p14 <= 0 /\ -x40+x41 >= 0 /\ arg2p14 > 0), cost: 1
  14: f541_0_bubble_NULL -> f541_0_bubble_NULL : arg1'=arg1p15, arg2'=arg2p15, arg3'=arg3p15, (-2+arg1 > 0 /\ arg1p15 > 0 /\ arg1p15-arg1 <= 0 /\ arg1p15-arg2 <= 0 /\ -2+arg2 > 0 /\ arg2p15-arg1 <= 0 /\ arg2p15 > 0 /\ x47-x46 < 0 /\ -arg2+arg2p15 <= 0), cost: 1
  15: __init -> f1_0_main_ConstantStackPush : arg1'=arg1p16, arg2'=arg2p16, arg3'=arg3p16, T, cost: 1

Simplified Transitions

Start location: __init
Program variables: arg1 arg2 arg3
  16: f93_0_mk_Return -> f148_0_main_InvokeMethod : arg1'=arg1p1, arg3'=arg3p1, (1+arg2 > 0 /\ arg1p1-arg1 <= 0 /\ arg1p1 > 0 /\ arg1 > 0), cost: 1
  18: f148_0_main_InvokeMethod -> f341_0_main_GE : arg1'=0, arg2'=arg2p3, arg3'=arg3p3, (1+arg2 > 0 /\ arg1 > 0), cost: 1
  23: f148_0_main_InvokeMethod -> f165_0_mk_LE : arg1'=-1+arg2, arg3'=arg3p8, arg1 > 0, cost: 1
  24: f148_0_main_InvokeMethod -> f165_0_mk_LE : arg1'=-1+arg2, arg3'=arg3p9, (1+arg2 > 0 /\ arg1 > 0), cost: 1
  17: f1_0_main_ConstantStackPush -> f148_0_main_InvokeMethod : arg1'=arg1p2, arg3'=arg3p2, (1+arg2 > 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0), cost: 1
  22: f1_0_main_ConstantStackPush -> f165_0_mk_LE : arg1'=-1+arg2, arg3'=arg3p7, (1+arg2 > 0 /\ arg1 > 0), cost: 1
  10: f341_0_main_GE -> f291_0_length_NULL : arg1'=arg1p11, arg2'=arg2p11, arg3'=arg3p11, (1+arg2p11 > 0 /\ -3+arg1 < 0 /\ 1+arg1p11 > 0), cost: 1
  19: f341_0_main_GE -> f475_0_main_GE : arg2'=0, arg3'=arg3p4, -3+arg1 < 0, cost: 1
  12: f475_0_main_GE -> f541_0_bubble_NULL : arg1'=arg1p13, arg2'=arg2p13, arg3'=arg3p13, (1+arg1p13 > 0 /\ -3+arg1 < 0 /\ arg3-arg2 > 0 /\ arg3 > 0 /\ 1+arg2p13 > 0), cost: 1
  20: f475_0_main_GE -> f341_0_main_GE : arg1'=1+arg1, arg2'=arg2p5, arg3'=arg3p5, arg3-arg2 <= 0, cost: 1
  21: f475_0_main_GE -> f475_0_main_GE : arg2'=1+arg2, (-3+arg1 < 0 /\ arg3-arg2 > 0 /\ arg3 > 0), cost: 1
  25: f165_0_mk_LE -> f165_0_mk_LE : arg1'=-1+arg1, arg2'=arg1, arg3'=arg3p10, arg2 > 0, cost: 1
  11: f291_0_length_NULL -> f291_0_length_NULL : arg1'=arg1p12, arg2'=arg2p12, arg3'=arg3p12, (arg2 > 0 /\ 1+arg2p12 > 0 /\ 1+arg1p12-arg1 <= 0 /\ 1-arg2+arg2p12 <= 0 /\ 1+arg1p12-arg2 <= 0 /\ 1+arg2p12-arg1 <= 0 /\ 1+arg1p12 > 0 /\ arg1 > 0), cost: 1
  26: f541_0_bubble_NULL -> f541_0_bubble_NULL : arg1'=arg1p14, arg2'=arg2p14, arg3'=arg3p14, (-2+arg1 > 0 /\ 2+arg2p14-arg1 <= 0 /\ 2-arg2+arg1p14 <= 0 /\ -2+arg2 > 0 /\ 2+arg1p14-arg1 <= 0 /\ arg1p14 > 0 /\ 2-arg2+arg2p14 <= 0 /\ arg2p14 > 0), cost: 1
  27: f541_0_bubble_NULL -> f541_0_bubble_NULL : arg1'=arg1p15, arg2'=arg2p15, arg3'=arg3p15, (-2+arg1 > 0 /\ arg1p15 > 0 /\ arg1p15-arg1 <= 0 /\ arg1p15-arg2 <= 0 /\ -2+arg2 > 0 /\ arg2p15-arg1 <= 0 /\ arg2p15 > 0 /\ -arg2+arg2p15 <= 0), cost: 1
  15: __init -> f1_0_main_ConstantStackPush : arg1'=arg1p16, arg2'=arg2p16, arg3'=arg3p16, T, cost: 1

	Propagated Equalities

	Original rule:
	f93_0_mk_Return -> f148_0_main_InvokeMethod : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (-arg2p1+arg2 == 0 /\ 1+arg2 > 0 /\ arg1p1-arg1 <= 0 /\ arg1p1 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f93_0_mk_Return -> f148_0_main_InvokeMethod : arg1'=arg1p1, arg2'=arg2, arg3'=arg3p1, (0 == 0 /\ 1+arg2 > 0 /\ arg1p1-arg1 <= 0 /\ arg1p1 > 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg2p1 = arg2
		
	Simplified Guard

	Original rule:
	f93_0_mk_Return -> f148_0_main_InvokeMethod : arg1'=arg1p1, arg2'=arg2, arg3'=arg3p1, (0 == 0 /\ 1+arg2 > 0 /\ arg1p1-arg1 <= 0 /\ arg1p1 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f93_0_mk_Return -> f148_0_main_InvokeMethod : arg1'=arg1p1, arg2'=arg2, arg3'=arg3p1, (1+arg2 > 0 /\ arg1p1-arg1 <= 0 /\ arg1p1 > 0 /\ arg1 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f93_0_mk_Return -> f148_0_main_InvokeMethod : arg1'=arg1p1, arg2'=arg2, arg3'=arg3p1, (1+arg2 > 0 /\ arg1p1-arg1 <= 0 /\ arg1p1 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f93_0_mk_Return -> f148_0_main_InvokeMethod : arg1'=arg1p1, arg3'=arg3p1, (1+arg2 > 0 /\ arg1p1-arg1 <= 0 /\ arg1p1 > 0 /\ arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f1_0_main_ConstantStackPush -> f148_0_main_InvokeMethod : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, (1+arg2 > 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ -arg2p2+arg2 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f1_0_main_ConstantStackPush -> f148_0_main_InvokeMethod : arg1'=arg1p2, arg2'=arg2, arg3'=arg3p2, (0 == 0 /\ 1+arg2 > 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg2p2 = arg2
		
	Simplified Guard

	Original rule:
	f1_0_main_ConstantStackPush -> f148_0_main_InvokeMethod : arg1'=arg1p2, arg2'=arg2, arg3'=arg3p2, (0 == 0 /\ 1+arg2 > 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f1_0_main_ConstantStackPush -> f148_0_main_InvokeMethod : arg1'=arg1p2, arg2'=arg2, arg3'=arg3p2, (1+arg2 > 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f1_0_main_ConstantStackPush -> f148_0_main_InvokeMethod : arg1'=arg1p2, arg2'=arg2, arg3'=arg3p2, (1+arg2 > 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f1_0_main_ConstantStackPush -> f148_0_main_InvokeMethod : arg1'=arg1p2, arg3'=arg3p2, (1+arg2 > 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f148_0_main_InvokeMethod -> f341_0_main_GE : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, (1+arg2 > 0 /\ -arg1p3 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f148_0_main_InvokeMethod -> f341_0_main_GE : arg1'=0, arg2'=arg2p3, arg3'=arg3p3, (0 == 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg1p3 = 0
		
	Simplified Guard

	Original rule:
	f148_0_main_InvokeMethod -> f341_0_main_GE : arg1'=0, arg2'=arg2p3, arg3'=arg3p3, (0 == 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f148_0_main_InvokeMethod -> f341_0_main_GE : arg1'=0, arg2'=arg2p3, arg3'=arg3p3, (1+arg2 > 0 /\ arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f341_0_main_GE -> f475_0_main_GE : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, (-arg2p4 == 0 /\ -3+arg1 < 0 /\ -arg1p4+arg1 == 0), cost: 1
	New rule:
	f341_0_main_GE -> f475_0_main_GE : arg1'=arg1, arg2'=0, arg3'=arg3p4, (0 == 0 /\ -3+arg1 < 0), cost: 1
	
		propagated equality arg2p4 = 0
		
		propagated equality arg1p4 = arg1
		
	Simplified Guard

	Original rule:
	f341_0_main_GE -> f475_0_main_GE : arg1'=arg1, arg2'=0, arg3'=arg3p4, (0 == 0 /\ -3+arg1 < 0), cost: 1
	New rule:
	f341_0_main_GE -> f475_0_main_GE : arg1'=arg1, arg2'=0, arg3'=arg3p4, -3+arg1 < 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	f341_0_main_GE -> f475_0_main_GE : arg1'=arg1, arg2'=0, arg3'=arg3p4, -3+arg1 < 0, cost: 1
	New rule:
	f341_0_main_GE -> f475_0_main_GE : arg2'=0, arg3'=arg3p4, -3+arg1 < 0, cost: 1
	
	Propagated Equalities

	Original rule:
	f475_0_main_GE -> f341_0_main_GE : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, (arg3-arg2 <= 0 /\ 1-arg1p5+arg1 == 0), cost: 1
	New rule:
	f475_0_main_GE -> f341_0_main_GE : arg1'=1+arg1, arg2'=arg2p5, arg3'=arg3p5, (0 == 0 /\ arg3-arg2 <= 0), cost: 1
	
		propagated equality arg1p5 = 1+arg1
		
	Simplified Guard

	Original rule:
	f475_0_main_GE -> f341_0_main_GE : arg1'=1+arg1, arg2'=arg2p5, arg3'=arg3p5, (0 == 0 /\ arg3-arg2 <= 0), cost: 1
	New rule:
	f475_0_main_GE -> f341_0_main_GE : arg1'=1+arg1, arg2'=arg2p5, arg3'=arg3p5, arg3-arg2 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	f475_0_main_GE -> f475_0_main_GE : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, (-3+arg1 < 0 /\ arg3-arg2 > 0 /\ arg3 > 0 /\ -arg1p6+arg1 == 0 /\ -arg3p6+arg3 == 0 /\ 1+arg2-arg2p6 == 0), cost: 1
	New rule:
	f475_0_main_GE -> f475_0_main_GE : arg1'=arg1, arg2'=1+arg2, arg3'=arg3, (0 == 0 /\ -3+arg1 < 0 /\ arg3-arg2 > 0 /\ arg3 > 0), cost: 1
	
		propagated equality arg1p6 = arg1
		
		propagated equality arg3p6 = arg3
		
		propagated equality arg2p6 = 1+arg2
		
	Simplified Guard

	Original rule:
	f475_0_main_GE -> f475_0_main_GE : arg1'=arg1, arg2'=1+arg2, arg3'=arg3, (0 == 0 /\ -3+arg1 < 0 /\ arg3-arg2 > 0 /\ arg3 > 0), cost: 1
	New rule:
	f475_0_main_GE -> f475_0_main_GE : arg1'=arg1, arg2'=1+arg2, arg3'=arg3, (-3+arg1 < 0 /\ arg3-arg2 > 0 /\ arg3 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f475_0_main_GE -> f475_0_main_GE : arg1'=arg1, arg2'=1+arg2, arg3'=arg3, (-3+arg1 < 0 /\ arg3-arg2 > 0 /\ arg3 > 0), cost: 1
	New rule:
	f475_0_main_GE -> f475_0_main_GE : arg2'=1+arg2, (-3+arg1 < 0 /\ arg3-arg2 > 0 /\ arg3 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f1_0_main_ConstantStackPush -> f165_0_mk_LE : arg1'=arg1p7, arg2'=arg2p7, arg3'=arg3p7, (1+arg2 > 0 /\ -1+arg2-arg1p7 == 0 /\ arg2-arg2p7 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f1_0_main_ConstantStackPush -> f165_0_mk_LE : arg1'=-1+arg2, arg2'=arg2, arg3'=arg3p7, (0 == 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg1p7 = -1+arg2
		
		propagated equality arg2p7 = arg2
		
	Simplified Guard

	Original rule:
	f1_0_main_ConstantStackPush -> f165_0_mk_LE : arg1'=-1+arg2, arg2'=arg2, arg3'=arg3p7, (0 == 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f1_0_main_ConstantStackPush -> f165_0_mk_LE : arg1'=-1+arg2, arg2'=arg2, arg3'=arg3p7, (1+arg2 > 0 /\ arg1 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f1_0_main_ConstantStackPush -> f165_0_mk_LE : arg1'=-1+arg2, arg2'=arg2, arg3'=arg3p7, (1+arg2 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f1_0_main_ConstantStackPush -> f165_0_mk_LE : arg1'=-1+arg2, arg3'=arg3p7, (1+arg2 > 0 /\ arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f148_0_main_InvokeMethod -> f165_0_mk_LE : arg1'=arg1p8, arg2'=arg2p8, arg3'=arg3p8, (arg2-arg2p8 == 0 /\ -1+arg2-arg1p8 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f148_0_main_InvokeMethod -> f165_0_mk_LE : arg1'=-1+arg2, arg2'=arg2, arg3'=arg3p8, (0 == 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg2p8 = arg2
		
		propagated equality arg1p8 = -1+arg2
		
	Simplified Guard

	Original rule:
	f148_0_main_InvokeMethod -> f165_0_mk_LE : arg1'=-1+arg2, arg2'=arg2, arg3'=arg3p8, (0 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f148_0_main_InvokeMethod -> f165_0_mk_LE : arg1'=-1+arg2, arg2'=arg2, arg3'=arg3p8, arg1 > 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	f148_0_main_InvokeMethod -> f165_0_mk_LE : arg1'=-1+arg2, arg2'=arg2, arg3'=arg3p8, arg1 > 0, cost: 1
	New rule:
	f148_0_main_InvokeMethod -> f165_0_mk_LE : arg1'=-1+arg2, arg3'=arg3p8, arg1 > 0, cost: 1
	
	Propagated Equalities

	Original rule:
	f148_0_main_InvokeMethod -> f165_0_mk_LE : arg1'=arg1p9, arg2'=arg2p9, arg3'=arg3p9, (arg2-arg2p9 == 0 /\ 1+arg2 > 0 /\ -1-arg1p9+arg2 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f148_0_main_InvokeMethod -> f165_0_mk_LE : arg1'=-1+arg2, arg2'=arg2, arg3'=arg3p9, (0 == 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg2p9 = arg2
		
		propagated equality arg1p9 = -1+arg2
		
	Simplified Guard

	Original rule:
	f148_0_main_InvokeMethod -> f165_0_mk_LE : arg1'=-1+arg2, arg2'=arg2, arg3'=arg3p9, (0 == 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f148_0_main_InvokeMethod -> f165_0_mk_LE : arg1'=-1+arg2, arg2'=arg2, arg3'=arg3p9, (1+arg2 > 0 /\ arg1 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f148_0_main_InvokeMethod -> f165_0_mk_LE : arg1'=-1+arg2, arg2'=arg2, arg3'=arg3p9, (1+arg2 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f148_0_main_InvokeMethod -> f165_0_mk_LE : arg1'=-1+arg2, arg3'=arg3p9, (1+arg2 > 0 /\ arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f165_0_mk_LE -> f165_0_mk_LE : arg1'=arg1p10, arg2'=arg2p10, arg3'=arg3p10, (-arg2p10+arg1 == 0 /\ arg2 > 0 /\ -1-arg1p10+arg1 == 0), cost: 1
	New rule:
	f165_0_mk_LE -> f165_0_mk_LE : arg1'=-1+arg1, arg2'=arg1, arg3'=arg3p10, (0 == 0 /\ arg2 > 0), cost: 1
	
		propagated equality arg2p10 = arg1
		
		propagated equality arg1p10 = -1+arg1
		
	Simplified Guard

	Original rule:
	f165_0_mk_LE -> f165_0_mk_LE : arg1'=-1+arg1, arg2'=arg1, arg3'=arg3p10, (0 == 0 /\ arg2 > 0), cost: 1
	New rule:
	f165_0_mk_LE -> f165_0_mk_LE : arg1'=-1+arg1, arg2'=arg1, arg3'=arg3p10, arg2 > 0, cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	f541_0_bubble_NULL -> f541_0_bubble_NULL : arg1'=arg1p14, arg2'=arg2p14, arg3'=arg3p14, (-2+arg1 > 0 /\ 2+arg2p14-arg1 <= 0 /\ 2-arg2+arg1p14 <= 0 /\ -2+arg2 > 0 /\ 2+arg1p14-arg1 <= 0 /\ arg1p14 > 0 /\ 2-arg2+arg2p14 <= 0 /\ -x40+x41 >= 0 /\ arg2p14 > 0), cost: 1
	New rule:
	f541_0_bubble_NULL -> f541_0_bubble_NULL : arg1'=arg1p14, arg2'=arg2p14, arg3'=arg3p14, (-2+arg1 > 0 /\ 2+arg2p14-arg1 <= 0 /\ 2-arg2+arg1p14 <= 0 /\ -2+arg2 > 0 /\ 2+arg1p14-arg1 <= 0 /\ arg1p14 > 0 /\ 2-arg2+arg2p14 <= 0 /\ arg2p14 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	f541_0_bubble_NULL -> f541_0_bubble_NULL : arg1'=arg1p15, arg2'=arg2p15, arg3'=arg3p15, (-2+arg1 > 0 /\ arg1p15 > 0 /\ arg1p15-arg1 <= 0 /\ arg1p15-arg2 <= 0 /\ -2+arg2 > 0 /\ arg2p15-arg1 <= 0 /\ arg2p15 > 0 /\ x47-x46 < 0 /\ -arg2+arg2p15 <= 0), cost: 1
	New rule:
	f541_0_bubble_NULL -> f541_0_bubble_NULL : arg1'=arg1p15, arg2'=arg2p15, arg3'=arg3p15, (-2+arg1 > 0 /\ arg1p15 > 0 /\ arg1p15-arg1 <= 0 /\ arg1p15-arg2 <= 0 /\ -2+arg2 > 0 /\ arg2p15-arg1 <= 0 /\ arg2p15 > 0 /\ -arg2+arg2p15 <= 0), cost: 1

Step with 15

	Trace

	15[T]
	
	Blocked

	[{}, {}]

Step with 17

	Trace

	15[T], 17[(1+arg2 > 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {}]

Step with 18

	Trace

	15[T], 17[(1+arg2 > 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0)], 18[(1+arg2 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {}, {}]

Step with 10

	Trace

	15[T], 17[(1+arg2 > 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0)], 18[(1+arg2 > 0 /\ arg1 > 0)], 10[(1+arg2p11 > 0 /\ -3+arg1 < 0 /\ 1+arg1p11 > 0)]
	
	Blocked

	[{}, {}, {}, {}, {}]

Step with 11

	Trace

	15[T], 17[(1+arg2 > 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0)], 18[(1+arg2 > 0 /\ arg1 > 0)], 10[(1+arg2p11 > 0 /\ -3+arg1 < 0 /\ 1+arg1p11 > 0)], 11[(arg2 > 0 /\ 1+arg2p12 > 0 /\ 1+arg1p12-arg1 <= 0 /\ 1-arg2+arg2p12 <= 0 /\ 1+arg1p12-arg2 <= 0 /\ 1+arg2p12-arg1 <= 0 /\ 1+arg1p12 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {}, {}, {}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 11

	Trace

	15[T], 17[(1+arg2 > 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0)], 18[(1+arg2 > 0 /\ arg1 > 0)], 10[(1+arg2p11 > 0 /\ -3+arg1 < 0 /\ 1+arg1p11 > 0)], 11[(arg2 > 0 /\ 1+arg2p12 > 0 /\ 1+arg1p12-arg1 <= 0 /\ 1-arg2+arg2p12 <= 0 /\ 1+arg1p12-arg2 <= 0 /\ 1+arg2p12-arg1 <= 0 /\ 1+arg1p12 > 0 /\ arg1 > 0)], 11[(arg2 > 0 /\ 1+arg2p12 > 0 /\ 1+arg1p12-arg1 <= 0 /\ 1-arg2+arg2p12 <= 0 /\ 1+arg1p12-arg2 <= 0 /\ 1+arg2p12-arg1 <= 0 /\ 1+arg1p12 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {}, {}, {}, {}, {}]

Covered

	Trace

	15[T], 17[(1+arg2 > 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0)], 18[(1+arg2 > 0 /\ arg1 > 0)], 10[(1+arg2p11 > 0 /\ -3+arg1 < 0 /\ 1+arg1p11 > 0)], 11[(arg2 > 0 /\ 1+arg2p12 > 0 /\ 1+arg1p12-arg1 <= 0 /\ 1-arg2+arg2p12 <= 0 /\ 1+arg1p12-arg2 <= 0 /\ 1+arg2p12-arg1 <= 0 /\ 1+arg1p12 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {}, {}, {}, {11[T]}]

Backtrack

	Trace

	15[T], 17[(1+arg2 > 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0)], 18[(1+arg2 > 0 /\ arg1 > 0)], 10[(1+arg2p11 > 0 /\ -3+arg1 < 0 /\ 1+arg1p11 > 0)]
	
	Blocked

	[{}, {}, {}, {}, {11[T]}]

Backtrack

	Trace

	15[T], 17[(1+arg2 > 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0)], 18[(1+arg2 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {}, {10[T]}]

Step with 19

	Trace

	15[T], 17[(1+arg2 > 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0)], 18[(1+arg2 > 0 /\ arg1 > 0)], 19[(-3+arg1 < 0)]
	
	Blocked

	[{}, {}, {}, {10[T]}, {}]

Step with 12

	Trace

	15[T], 17[(1+arg2 > 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0)], 18[(1+arg2 > 0 /\ arg1 > 0)], 19[(-3+arg1 < 0)], 12[(1+arg1p13 > 0 /\ -3+arg1 < 0 /\ arg3-arg2 > 0 /\ arg3 > 0 /\ 1+arg2p13 > 0)]
	
	Blocked

	[{}, {}, {}, {10[T]}, {}, {}]

Step with 26

	Trace

	15[T], 17[(1+arg2 > 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0)], 18[(1+arg2 > 0 /\ arg1 > 0)], 19[(-3+arg1 < 0)], 12[(1+arg1p13 > 0 /\ -3+arg1 < 0 /\ arg3-arg2 > 0 /\ arg3 > 0 /\ 1+arg2p13 > 0)], 26[(-2+arg1 > 0 /\ 2+arg2p14-arg1 <= 0 /\ 2-arg2+arg1p14 <= 0 /\ -2+arg2 > 0 /\ 2+arg1p14-arg1 <= 0 /\ arg1p14 > 0 /\ 2-arg2+arg2p14 <= 0 /\ arg2p14 > 0)]
	
	Blocked

	[{}, {}, {}, {10[T]}, {}, {}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 26

	Trace

	15[T], 17[(1+arg2 > 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0)], 18[(1+arg2 > 0 /\ arg1 > 0)], 19[(-3+arg1 < 0)], 12[(1+arg1p13 > 0 /\ -3+arg1 < 0 /\ arg3-arg2 > 0 /\ arg3 > 0 /\ 1+arg2p13 > 0)], 26[(-2+arg1 > 0 /\ 2+arg2p14-arg1 <= 0 /\ 2-arg2+arg1p14 <= 0 /\ -2+arg2 > 0 /\ 2+arg1p14-arg1 <= 0 /\ arg1p14 > 0 /\ 2-arg2+arg2p14 <= 0 /\ arg2p14 > 0)], 26[(-2+arg1 > 0 /\ 2+arg2p14-arg1 <= 0 /\ 2-arg2+arg1p14 <= 0 /\ -2+arg2 > 0 /\ 2+arg1p14-arg1 <= 0 /\ arg1p14 > 0 /\ 2-arg2+arg2p14 <= 0 /\ arg2p14 > 0)]
	
	Blocked

	[{}, {}, {}, {10[T]}, {}, {}, {}, {}]

Covered

	Trace

	15[T], 17[(1+arg2 > 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0)], 18[(1+arg2 > 0 /\ arg1 > 0)], 19[(-3+arg1 < 0)], 12[(1+arg1p13 > 0 /\ -3+arg1 < 0 /\ arg3-arg2 > 0 /\ arg3 > 0 /\ 1+arg2p13 > 0)], 26[(-2+arg1 > 0 /\ 2+arg2p14-arg1 <= 0 /\ 2-arg2+arg1p14 <= 0 /\ -2+arg2 > 0 /\ 2+arg1p14-arg1 <= 0 /\ arg1p14 > 0 /\ 2-arg2+arg2p14 <= 0 /\ arg2p14 > 0)]
	
	Blocked

	[{}, {}, {}, {10[T]}, {}, {}, {26[T]}]

Step with 27

	Trace

	15[T], 17[(1+arg2 > 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0)], 18[(1+arg2 > 0 /\ arg1 > 0)], 19[(-3+arg1 < 0)], 12[(1+arg1p13 > 0 /\ -3+arg1 < 0 /\ arg3-arg2 > 0 /\ arg3 > 0 /\ 1+arg2p13 > 0)], 26[(-2+arg1 > 0 /\ 2+arg2p14-arg1 <= 0 /\ 2-arg2+arg1p14 <= 0 /\ -2+arg2 > 0 /\ 2+arg1p14-arg1 <= 0 /\ arg1p14 > 0 /\ 2-arg2+arg2p14 <= 0 /\ arg2p14 > 0)], 27[(-2+arg1 > 0 /\ arg1p15 > 0 /\ arg1p15-arg1 <= 0 /\ arg1p15-arg2 <= 0 /\ -2+arg2 > 0 /\ arg2p15-arg1 <= 0 /\ arg2p15 > 0 /\ -arg2+arg2p15 <= 0)]
	
	Blocked

	[{}, {}, {}, {10[T]}, {}, {}, {26[T]}, {}]

Nonterm

Start location: __init
Program variables: arg1 arg2 arg3
  16: f93_0_mk_Return -> f148_0_main_InvokeMethod : arg1'=arg1p1, arg3'=arg3p1, (1+arg2 > 0 /\ arg1p1-arg1 <= 0 /\ arg1p1 > 0 /\ arg1 > 0), cost: 1
  18: f148_0_main_InvokeMethod -> f341_0_main_GE : arg1'=0, arg2'=arg2p3, arg3'=arg3p3, (1+arg2 > 0 /\ arg1 > 0), cost: 1
  23: f148_0_main_InvokeMethod -> f165_0_mk_LE : arg1'=-1+arg2, arg3'=arg3p8, arg1 > 0, cost: 1
  24: f148_0_main_InvokeMethod -> f165_0_mk_LE : arg1'=-1+arg2, arg3'=arg3p9, (1+arg2 > 0 /\ arg1 > 0), cost: 1
  17: f1_0_main_ConstantStackPush -> f148_0_main_InvokeMethod : arg1'=arg1p2, arg3'=arg3p2, (1+arg2 > 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0), cost: 1
  22: f1_0_main_ConstantStackPush -> f165_0_mk_LE : arg1'=-1+arg2, arg3'=arg3p7, (1+arg2 > 0 /\ arg1 > 0), cost: 1
  10: f341_0_main_GE -> f291_0_length_NULL : arg1'=arg1p11, arg2'=arg2p11, arg3'=arg3p11, (1+arg2p11 > 0 /\ -3+arg1 < 0 /\ 1+arg1p11 > 0), cost: 1
  19: f341_0_main_GE -> f475_0_main_GE : arg2'=0, arg3'=arg3p4, -3+arg1 < 0, cost: 1
  12: f475_0_main_GE -> f541_0_bubble_NULL : arg1'=arg1p13, arg2'=arg2p13, arg3'=arg3p13, (1+arg1p13 > 0 /\ -3+arg1 < 0 /\ arg3-arg2 > 0 /\ arg3 > 0 /\ 1+arg2p13 > 0), cost: 1
  20: f475_0_main_GE -> f341_0_main_GE : arg1'=1+arg1, arg2'=arg2p5, arg3'=arg3p5, arg3-arg2 <= 0, cost: 1
  21: f475_0_main_GE -> f475_0_main_GE : arg2'=1+arg2, (-3+arg1 < 0 /\ arg3-arg2 > 0 /\ arg3 > 0), cost: 1
  25: f165_0_mk_LE -> f165_0_mk_LE : arg1'=-1+arg1, arg2'=arg1, arg3'=arg3p10, arg2 > 0, cost: 1
  11: f291_0_length_NULL -> f291_0_length_NULL : arg1'=arg1p12, arg2'=arg2p12, arg3'=arg3p12, (arg2 > 0 /\ 1+arg2p12 > 0 /\ 1+arg1p12-arg1 <= 0 /\ 1-arg2+arg2p12 <= 0 /\ 1+arg1p12-arg2 <= 0 /\ 1+arg2p12-arg1 <= 0 /\ 1+arg1p12 > 0 /\ arg1 > 0), cost: 1
  26: f541_0_bubble_NULL -> f541_0_bubble_NULL : arg1'=arg1p14, arg2'=arg2p14, arg3'=arg3p14, (-2+arg1 > 0 /\ 2+arg2p14-arg1 <= 0 /\ 2-arg2+arg1p14 <= 0 /\ -2+arg2 > 0 /\ 2+arg1p14-arg1 <= 0 /\ arg1p14 > 0 /\ 2-arg2+arg2p14 <= 0 /\ arg2p14 > 0), cost: 1
  27: f541_0_bubble_NULL -> f541_0_bubble_NULL : arg1'=arg1p15, arg2'=arg2p15, arg3'=arg3p15, (-2+arg1 > 0 /\ arg1p15 > 0 /\ arg1p15-arg1 <= 0 /\ arg1p15-arg2 <= 0 /\ -2+arg2 > 0 /\ arg2p15-arg1 <= 0 /\ arg2p15 > 0 /\ -arg2+arg2p15 <= 0), cost: 1
  28: f541_0_bubble_NULL -> LoAT_sink : (-2+arg1 > 0 /\ -arg1p15+arg2 >= 0 /\ arg1p15 > 0 /\ -arg2p15+arg1 >= 0 /\ -2+arg2 > 0 /\ -arg1p15+arg1 <= 0 /\ -arg1p15+arg1 >= 0 /\ arg2p15 > 0 /\ arg2-arg2p15 <= 0 /\ arg2-arg2p15 >= 0), cost: NONTERM
  29: f541_0_bubble_NULL -> f541_0_bubble_NULL : arg1'=arg2p15, arg2'=arg2p15, arg3'=arg3p15, (-2+arg2p15 > 0 /\ -arg2p15+arg1 >= 0 /\ arg2p15 > 0 /\ arg2-arg2p15 >= 0), cost: 1
  15: __init -> f1_0_main_ConstantStackPush : arg1'=arg1p16, arg2'=arg2p16, arg3'=arg3p16, T, cost: 1

	Certificate of Non-Termination

	Original rule:
	f541_0_bubble_NULL -> f541_0_bubble_NULL : arg1'=arg1p15, arg2'=arg2p15, arg3'=arg3p15, (-2+arg1 > 0 /\ arg1p15 > 0 /\ arg1p15-arg1 <= 0 /\ arg1p15-arg2 <= 0 /\ -2+arg2 > 0 /\ arg2p15-arg1 <= 0 /\ arg2p15 > 0 /\ -arg2+arg2p15 <= 0), cost: 1
	New rule:
	f541_0_bubble_NULL -> LoAT_sink : (-2+arg1 > 0 /\ -arg1p15+arg2 >= 0 /\ arg1p15 > 0 /\ -arg2p15+arg1 >= 0 /\ -2+arg2 > 0 /\ -arg1p15+arg1 <= 0 /\ -arg1p15+arg1 >= 0 /\ arg2p15 > 0 /\ arg2-arg2p15 <= 0 /\ arg2-arg2p15 >= 0), cost: NONTERM

		-2+arg1 > 0 [0]: montonic decrease yields -2+arg1p15 > 0, dependencies: -arg1p15+arg1 >= 0
		
		-2+arg1 > 0 [1]: eventual decrease yields (-2+arg1 > 0 /\ -2+arg1p15 > 0)
		
		-2+arg1 > 0 [2]: eventual increase yields (-2+arg1 > 0 /\ -arg1p15+arg1 <= 0)
		
		-arg1p15+arg2 >= 0 [0]: montonic decrease yields -arg1p15+arg2p15 >= 0, dependencies: arg2-arg2p15 >= 0
		
		-arg1p15+arg2 >= 0 [1]: eventual decrease yields (-arg1p15+arg2 >= 0 /\ -arg1p15+arg2p15 >= 0)
		
		-arg1p15+arg2 >= 0 [2]: eventual increase yields (-arg1p15+arg2 >= 0 /\ arg2-arg2p15 <= 0)
		
		arg1p15 > 0 [0]: monotonic increase yields arg1p15 > 0
		
		-arg2p15+arg1 >= 0 [0]: montonic decrease yields arg1p15-arg2p15 >= 0, dependencies: -arg1p15+arg1 >= 0
		
		-arg2p15+arg1 >= 0 [1]: eventual decrease yields (-arg2p15+arg1 >= 0 /\ arg1p15-arg2p15 >= 0)
		
		-arg2p15+arg1 >= 0 [2]: eventual increase yields (-arg2p15+arg1 >= 0 /\ -arg1p15+arg1 <= 0)
		
		-2+arg2 > 0 [0]: montonic decrease yields -2+arg2p15 > 0, dependencies: arg2-arg2p15 >= 0
		
		-2+arg2 > 0 [1]: eventual decrease yields (-2+arg2p15 > 0 /\ -2+arg2 > 0)
		
		-2+arg2 > 0 [2]: eventual increase yields (-2+arg2 > 0 /\ arg2-arg2p15 <= 0)
		
		-arg1p15+arg1 >= 0 [0]: monotonic increase yields -arg1p15+arg1 >= 0
		
		arg2p15 > 0 [0]: monotonic increase yields arg2p15 > 0
		
		arg2-arg2p15 >= 0 [0]: monotonic increase yields arg2-arg2p15 >= 0
		
		Replacement map: {-2+arg1 > 0 -> (-2+arg1 > 0 /\ -arg1p15+arg1 <= 0), -arg1p15+arg2 >= 0 -> (-arg1p15+arg2 >= 0 /\ arg2-arg2p15 <= 0), arg1p15 > 0 -> arg1p15 > 0, -arg2p15+arg1 >= 0 -> (-arg2p15+arg1 >= 0 /\ -arg1p15+arg1 <= 0), -2+arg2 > 0 -> (-2+arg2 > 0 /\ arg2-arg2p15 <= 0), -arg1p15+arg1 >= 0 -> -arg1p15+arg1 >= 0, arg2p15 > 0 -> arg2p15 > 0, arg2-arg2p15 >= 0 -> arg2-arg2p15 >= 0}

	Loop Acceleration

	Original rule:
	f541_0_bubble_NULL -> f541_0_bubble_NULL : arg1'=arg1p15, arg2'=arg2p15, arg3'=arg3p15, (-2+arg1 > 0 /\ arg1p15 > 0 /\ arg1p15-arg1 <= 0 /\ arg1p15-arg2 <= 0 /\ -2+arg2 > 0 /\ arg2p15-arg1 <= 0 /\ arg2p15 > 0 /\ -arg2+arg2p15 <= 0), cost: 1
	New rule:
	f541_0_bubble_NULL -> f541_0_bubble_NULL : arg1'=arg1p15, arg2'=arg2p15, arg3'=arg3p15, (-2+arg2p15 > 0 /\ -1+n >= 0 /\ arg1p15 > 0 /\ arg1p15-arg2p15 >= 0 /\ -arg1p15+arg2p15 >= 0 /\ -arg1p15+arg1 >= 0 /\ arg2p15 > 0 /\ -2+arg1p15 > 0 /\ arg2-arg2p15 >= 0), cost: 1

		-2+arg1 > 0 [0]: montonic decrease yields -2+arg1p15 > 0, dependencies: -arg1p15+arg1 >= 0
		
		-2+arg1 > 0 [1]: eventual decrease yields (-2+arg1 > 0 /\ -2+arg1p15 > 0)
		
		-2+arg1 > 0 [2]: eventual increase yields (-2+arg1 > 0 /\ -arg1p15+arg1 <= 0)
		
		-arg1p15+arg2 >= 0 [0]: montonic decrease yields -arg1p15+arg2p15 >= 0, dependencies: arg2-arg2p15 >= 0
		
		-arg1p15+arg2 >= 0 [1]: eventual decrease yields (-arg1p15+arg2 >= 0 /\ -arg1p15+arg2p15 >= 0)
		
		-arg1p15+arg2 >= 0 [2]: eventual increase yields (-arg1p15+arg2 >= 0 /\ arg2-arg2p15 <= 0)
		
		arg1p15 > 0 [0]: monotonic increase yields arg1p15 > 0
		
		-arg2p15+arg1 >= 0 [0]: montonic decrease yields arg1p15-arg2p15 >= 0, dependencies: -arg1p15+arg1 >= 0
		
		-arg2p15+arg1 >= 0 [1]: eventual decrease yields (-arg2p15+arg1 >= 0 /\ arg1p15-arg2p15 >= 0)
		
		-arg2p15+arg1 >= 0 [2]: eventual increase yields (-arg2p15+arg1 >= 0 /\ -arg1p15+arg1 <= 0)
		
		-2+arg2 > 0 [0]: montonic decrease yields -2+arg2p15 > 0, dependencies: arg2-arg2p15 >= 0
		
		-2+arg2 > 0 [1]: eventual decrease yields (-2+arg2p15 > 0 /\ -2+arg2 > 0)
		
		-2+arg2 > 0 [2]: eventual increase yields (-2+arg2 > 0 /\ arg2-arg2p15 <= 0)
		
		-arg1p15+arg1 >= 0 [0]: monotonic increase yields -arg1p15+arg1 >= 0
		
		arg2p15 > 0 [0]: monotonic increase yields arg2p15 > 0
		
		arg2-arg2p15 >= 0 [0]: monotonic increase yields arg2-arg2p15 >= 0
		
		Replacement map: {-2+arg1 > 0 -> -2+arg1p15 > 0, -arg1p15+arg2 >= 0 -> -arg1p15+arg2p15 >= 0, arg1p15 > 0 -> arg1p15 > 0, -arg2p15+arg1 >= 0 -> arg1p15-arg2p15 >= 0, -2+arg2 > 0 -> -2+arg2p15 > 0, -arg1p15+arg1 >= 0 -> -arg1p15+arg1 >= 0, arg2p15 > 0 -> arg2p15 > 0, arg2-arg2p15 >= 0 -> arg2-arg2p15 >= 0}

	made implied equalities explicit

	Original rule:
	f541_0_bubble_NULL -> f541_0_bubble_NULL : arg1'=arg1p15, arg2'=arg2p15, arg3'=arg3p15, (-2+arg2p15 > 0 /\ -1+n >= 0 /\ arg1p15 > 0 /\ arg1p15-arg2p15 >= 0 /\ -arg1p15+arg2p15 >= 0 /\ -arg1p15+arg1 >= 0 /\ arg2p15 > 0 /\ -2+arg1p15 > 0 /\ arg2-arg2p15 >= 0), cost: 1
	New rule:
	f541_0_bubble_NULL -> f541_0_bubble_NULL : arg1'=arg1p15, arg2'=arg2p15, arg3'=arg3p15, (-2+arg2p15 > 0 /\ -1+n >= 0 /\ arg1p15 > 0 /\ arg1p15-arg2p15 >= 0 /\ -arg1p15+arg2p15 >= 0 /\ -arg1p15+arg2p15 == 0 /\ -arg1p15+arg1 >= 0 /\ arg2p15 > 0 /\ -2+arg1p15 > 0 /\ arg2-arg2p15 >= 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f541_0_bubble_NULL -> f541_0_bubble_NULL : arg1'=arg1p15, arg2'=arg2p15, arg3'=arg3p15, (-2+arg2p15 > 0 /\ -1+n >= 0 /\ arg1p15 > 0 /\ arg1p15-arg2p15 >= 0 /\ -arg1p15+arg2p15 >= 0 /\ -arg1p15+arg2p15 == 0 /\ -arg1p15+arg1 >= 0 /\ arg2p15 > 0 /\ -2+arg1p15 > 0 /\ arg2-arg2p15 >= 0), cost: 1
	New rule:
	f541_0_bubble_NULL -> f541_0_bubble_NULL : arg1'=arg2p15, arg2'=arg2p15, arg3'=arg3p15, (0 >= 0 /\ 0 == 0 /\ -2+arg2p15 > 0 /\ -1+n >= 0 /\ -arg2p15+arg1 >= 0 /\ arg2p15 > 0 /\ arg2-arg2p15 >= 0), cost: 1
	
		propagated equality arg1p15 = arg2p15
		
	Simplified Guard

	Original rule:
	f541_0_bubble_NULL -> f541_0_bubble_NULL : arg1'=arg2p15, arg2'=arg2p15, arg3'=arg3p15, (0 >= 0 /\ 0 == 0 /\ -2+arg2p15 > 0 /\ -1+n >= 0 /\ -arg2p15+arg1 >= 0 /\ arg2p15 > 0 /\ arg2-arg2p15 >= 0), cost: 1
	New rule:
	f541_0_bubble_NULL -> f541_0_bubble_NULL : arg1'=arg2p15, arg2'=arg2p15, arg3'=arg3p15, (-2+arg2p15 > 0 /\ -1+n >= 0 /\ -arg2p15+arg1 >= 0 /\ arg2p15 > 0 /\ arg2-arg2p15 >= 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	f541_0_bubble_NULL -> f541_0_bubble_NULL : arg1'=arg2p15, arg2'=arg2p15, arg3'=arg3p15, (-2+arg2p15 > 0 /\ -1+n >= 0 /\ -arg2p15+arg1 >= 0 /\ arg2p15 > 0 /\ arg2-arg2p15 >= 0), cost: 1
	New rule:
	f541_0_bubble_NULL -> f541_0_bubble_NULL : arg1'=arg2p15, arg2'=arg2p15, arg3'=arg3p15, (-2+arg2p15 > 0 /\ -arg2p15+arg1 >= 0 /\ arg2p15 > 0 /\ arg2-arg2p15 >= 0), cost: 1

Step with 28

	Trace

	15[T], 17[(1+arg2 > 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0)], 18[(1+arg2 > 0 /\ arg1 > 0)], 19[(-3+arg1 < 0)], 12[(1+arg1p13 > 0 /\ -3+arg1 < 0 /\ arg3-arg2 > 0 /\ arg3 > 0 /\ 1+arg2p13 > 0)], 26[(-2+arg1 > 0 /\ 2+arg2p14-arg1 <= 0 /\ 2-arg2+arg1p14 <= 0 /\ -2+arg2 > 0 /\ 2+arg1p14-arg1 <= 0 /\ arg1p14 > 0 /\ 2-arg2+arg2p14 <= 0 /\ arg2p14 > 0)], 28[(-2+arg1 > 0 /\ -arg1p15+arg2 >= 0 /\ arg1p15 > 0 /\ -arg2p15+arg1 >= 0 /\ -2+arg2 > 0 /\ -arg1p15+arg1 <= 0 /\ -arg1p15+arg1 >= 0 /\ arg2p15 > 0 /\ arg2-arg2p15 <= 0 /\ arg2-arg2p15 >= 0)]
	
	Blocked

	[{}, {}, {}, {10[T]}, {}, {}, {26[T]}, {28[T]}]

Refute

	Counterexample

	[ arg1=1 arg2=0 arg3=0 ] 15 [ arg1=1 arg2=0 arg3=0 ] 17 [ arg1=0 arg2=0 arg3=0 ] 18 [ arg1=0 arg2=0 arg3=1 ] 19 [ arg1=5 arg2=5 arg3=0 ] 12 [ arg1=3 arg2=3 arg3=0 ] 26 [ arg1=arg1 arg2=arg2 arg3=arg3 ] 28
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
