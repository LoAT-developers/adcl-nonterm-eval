NO

Initial ITS

Start location: l6
Program variables: __disjvr_0^0 __disjvr_1^0 delta^0 delta_new^0 deltaext^0 deltaext_new^0 deltext^0 wnt^0 wntext^0
   0: l0 -> l2 : __disjvr_0^0'=__disjvr_0^post1, __disjvr_1^0'=__disjvr_1^post1, delta^0'=delta^post1, delta_new^0'=delta_new^post1, deltaext^0'=deltaext^post1, deltaext_new^0'=deltaext_new^post1, deltext^0'=deltext^post1, wnt^0'=wnt^post1, wntext^0'=wntext^post1, (__disjvr_0^post1-__disjvr_0^0 == 0 /\ deltaext^0-deltaext^post1 == 0 /\ -__disjvr_0^post1+__disjvr_0^0 == 0 /\ delta_new^0-delta_new^post1 == 0 /\ -deltaext_new^post1+deltaext_new^0 == 0 /\ __disjvr_1^0-__disjvr_1^post1 == 0 /\ wnt^0-wnt^post1 == 0 /\ -wntext^post1+wntext^0 == 0 /\ -delta^post1+delta^0 == 0 /\ deltext^0-deltext^post1 == 0), cost: 1
   2: l0 -> l3 : __disjvr_0^0'=__disjvr_0^post3, __disjvr_1^0'=__disjvr_1^post3, delta^0'=delta^post3, delta_new^0'=delta_new^post3, deltaext^0'=deltaext^post3, deltaext_new^0'=deltaext_new^post3, deltext^0'=deltext^post3, wnt^0'=wnt^post3, wntext^0'=wntext^post3, (deltext^0-deltext^post3 == 0 /\ -delta_new^post3+delta_new^0 == 0 /\ -delta^post3+delta^0 == 0 /\ -deltaext_new^post3+deltaext_new^0 == 0 /\ deltaext^0-deltaext^post3 == 0 /\ wnt^0-wnt^post3 == 0 /\ -wntext^post3+wntext^0 == 0 /\ __disjvr_1^0-__disjvr_1^post3 == 0 /\ -__disjvr_0^post3+__disjvr_0^0 == 0 /\ -__disjvr_1^0+__disjvr_1^post3 == 0), cost: 1
   1: l2 -> l1 : __disjvr_0^0'=__disjvr_0^post2, __disjvr_1^0'=__disjvr_1^post2, delta^0'=delta^post2, delta_new^0'=delta_new^post2, deltaext^0'=deltaext^post2, deltaext_new^0'=deltaext_new^post2, deltext^0'=deltext^post2, wnt^0'=wnt^post2, wntext^0'=wntext^post2, (__disjvr_1^0-__disjvr_1^post2 == 0 /\ wntext^0-wntext^post2 == 0 /\ -delta_new^post2+delta_new^0 == 0 /\ -deltext^post2+deltext^0 == 0 /\ -__disjvr_0^post2+__disjvr_0^0 == 0 /\ deltaext_new^0-deltaext_new^post2 == 0 /\ -delta_new^0+delta^post2 == 0 /\ deltaext^post2-deltaext_new^0 == 0 /\ wnt^0-wnt^post2 == 0), cost: 1
   8: l1 -> l4 : __disjvr_0^0'=__disjvr_0^post9, __disjvr_1^0'=__disjvr_1^post9, delta^0'=delta^post9, delta_new^0'=delta_new^post9, deltaext^0'=deltaext^post9, deltaext_new^0'=deltaext_new^post9, deltext^0'=deltext^post9, wnt^0'=wnt^post9, wntext^0'=wntext^post9, (deltaext^0-deltaext^post9 == 0 /\ __disjvr_1^0-__disjvr_1^post9 == 0 /\ -deltaext^0+deltaext_new^post9 == 0 /\ -3-wnt^0+2*deltaext^0 <= 0 /\ -delta_new^post9+delta_new^0 == 0 /\ -wntext^post9+wntext^0 == 0 /\ -delta^post9+delta^0 == 0 /\ -__disjvr_0^post9+__disjvr_0^0 == 0 /\ -deltext^post9+deltext^0 == 0 /\ wnt^0-wnt^post9 == 0 /\ 3+wnt^0-2*deltaext^0 <= 0), cost: 1
   9: l1 -> l4 : __disjvr_0^0'=__disjvr_0^post10, __disjvr_1^0'=__disjvr_1^post10, delta^0'=delta^post10, delta_new^0'=delta_new^post10, deltaext^0'=deltaext^post10, deltaext_new^0'=deltaext_new^post10, deltext^0'=deltext^post10, wnt^0'=wnt^post10, wntext^0'=wntext^post10, (wnt^0-wnt^post10 == 0 /\ -2-wnt^0+2*deltaext^0 <= 0 /\ deltext^0-deltext^post10 == 0 /\ deltaext^0-deltaext^post10 == 0 /\ -delta^post10+delta^0 == 0 /\ -deltaext^0+deltaext_new^post10 == 0 /\ delta_new^0-delta_new^post10 == 0 /\ -wntext^post10+wntext^0 == 0 /\ -__disjvr_0^post10+__disjvr_0^0 == 0 /\ 2+wnt^0-2*deltaext^0 <= 0 /\ __disjvr_1^0-__disjvr_1^post10 == 0), cost: 1
  10: l1 -> l4 : __disjvr_0^0'=__disjvr_0^post11, __disjvr_1^0'=__disjvr_1^post11, delta^0'=delta^post11, delta_new^0'=delta_new^post11, deltaext^0'=deltaext^post11, deltaext_new^0'=deltaext_new^post11, deltext^0'=deltext^post11, wnt^0'=wnt^post11, wntext^0'=wntext^post11, (4+wnt^0-2*deltaext^0 <= 0 /\ 1-deltaext^0+deltaext_new^post11 == 0 /\ -__disjvr_1^post11+__disjvr_1^0 == 0 /\ -wnt^post11+wnt^0 == 0 /\ deltext^0-deltext^post11 == 0 /\ -__disjvr_0^post11+__disjvr_0^0 == 0 /\ deltaext^0-deltaext^post11 == 0 /\ delta_new^0-delta_new^post11 == 0 /\ -wntext^post11+wntext^0 == 0 /\ -delta^post11+delta^0 == 0), cost: 1
  11: l1 -> l4 : __disjvr_0^0'=__disjvr_0^post12, __disjvr_1^0'=__disjvr_1^post12, delta^0'=delta^post12, delta_new^0'=delta_new^post12, deltaext^0'=deltaext^post12, deltaext_new^0'=deltaext_new^post12, deltext^0'=deltext^post12, wnt^0'=wnt^post12, wntext^0'=wntext^post12, (-__disjvr_0^post12+__disjvr_0^0 == 0 /\ -1-deltaext^0+deltaext_new^post12 == 0 /\ deltaext^0-deltaext^post12 == 0 /\ delta_new^0-delta_new^post12 == 0 /\ wnt^0-wnt^post12 == 0 /\ -1-wnt^0+2*deltaext^0 <= 0 /\ -wntext^post12+wntext^0 == 0 /\ -__disjvr_1^post12+__disjvr_1^0 == 0 /\ -delta^post12+delta^0 == 0 /\ deltext^0-deltext^post12 == 0), cost: 1
   3: l3 -> l1 : __disjvr_0^0'=__disjvr_0^post4, __disjvr_1^0'=__disjvr_1^post4, delta^0'=delta^post4, delta_new^0'=delta_new^post4, deltaext^0'=deltaext^post4, deltaext_new^0'=deltaext_new^post4, deltext^0'=deltext^post4, wnt^0'=wnt^post4, wntext^0'=wntext^post4, (-delta_new^0+delta^post4 == 0 /\ deltaext^post4-deltaext_new^0 == 0 /\ deltext^0-deltext^post4 == 0 /\ wnt^0-wnt^post4 == 0 /\ __disjvr_0^0-__disjvr_0^post4 == 0 /\ -deltaext_new^post4+deltaext_new^0 == 0 /\ delta_new^0-delta_new^post4 == 0 /\ -wntext^post4+wntext^0 == 0 /\ __disjvr_1^0-__disjvr_1^post4 == 0), cost: 1
   4: l4 -> l0 : __disjvr_0^0'=__disjvr_0^post5, __disjvr_1^0'=__disjvr_1^post5, delta^0'=delta^post5, delta_new^0'=delta_new^post5, deltaext^0'=deltaext^post5, deltaext_new^0'=deltaext_new^post5, deltext^0'=deltext^post5, wnt^0'=wnt^post5, wntext^0'=wntext^post5, (-wntext^post5+wntext^0 == 0 /\ deltext^0-deltext^post5 == 0 /\ -delta^post5+delta^0 == 0 /\ -deltaext^post5+deltaext^0 == 0 /\ -1-deltaext^0-wntext^0+2*delta^0 <= 0 /\ 1+deltaext^0+wntext^0-2*delta^0 <= 0 /\ delta_new^post5-delta^0 == 0 /\ wnt^0-wnt^post5 == 0 /\ -__disjvr_0^post5+__disjvr_0^0 == 0 /\ -__disjvr_1^post5+__disjvr_1^0 == 0 /\ -deltaext_new^post5+deltaext_new^0 == 0), cost: 1
   5: l4 -> l0 : __disjvr_0^0'=__disjvr_0^post6, __disjvr_1^0'=__disjvr_1^post6, delta^0'=delta^post6, delta_new^0'=delta_new^post6, deltaext^0'=deltaext^post6, deltaext_new^0'=deltaext_new^post6, deltext^0'=deltext^post6, wnt^0'=wnt^post6, wntext^0'=wntext^post6, (-wntext^post6+wntext^0 == 0 /\ -wnt^post6+wnt^0 == 0 /\ -__disjvr_0^post6+__disjvr_0^0 == 0 /\ -deltaext_new^post6+deltaext_new^0 == 0 /\ -__disjvr_1^post6+__disjvr_1^0 == 0 /\ deltaext^0+wntext^0-2*delta^0 <= 0 /\ deltext^0-deltext^post6 == 0 /\ -deltaext^0-wntext^0+2*delta^0 <= 0 /\ -deltaext^post6+deltaext^0 == 0 /\ -delta^post6+delta^0 == 0 /\ delta_new^post6-delta^0 == 0), cost: 1
   6: l4 -> l0 : __disjvr_0^0'=__disjvr_0^post7, __disjvr_1^0'=__disjvr_1^post7, delta^0'=delta^post7, delta_new^0'=delta_new^post7, deltaext^0'=deltaext^post7, deltaext_new^0'=deltaext_new^post7, deltext^0'=deltext^post7, wnt^0'=wnt^post7, wntext^0'=wntext^post7, (2+deltaext^0+wntext^0-2*delta^0 <= 0 /\ -wntext^post7+wntext^0 == 0 /\ -__disjvr_0^post7+__disjvr_0^0 == 0 /\ -deltaext^post7+deltaext^0 == 0 /\ deltext^0-deltext^post7 == 0 /\ __disjvr_1^0-__disjvr_1^post7 == 0 /\ 1+delta_new^post7-delta^0 == 0 /\ -delta^post7+delta^0 == 0 /\ wnt^0-wnt^post7 == 0 /\ -deltaext_new^post7+deltaext_new^0 == 0), cost: 1
   7: l4 -> l0 : __disjvr_0^0'=__disjvr_0^post8, __disjvr_1^0'=__disjvr_1^post8, delta^0'=delta^post8, delta_new^0'=delta_new^post8, deltaext^0'=deltaext^post8, deltaext_new^0'=deltaext_new^post8, deltext^0'=deltext^post8, wnt^0'=wnt^post8, wntext^0'=wntext^post8, (deltext^0-deltext^post8 == 0 /\ -delta^post8+delta^0 == 0 /\ deltaext^0-deltaext^post8 == 0 /\ -wntext^post8+wntext^0 == 0 /\ wnt^0-wnt^post8 == 0 /\ __disjvr_1^0-__disjvr_1^post8 == 0 /\ -__disjvr_0^post8+__disjvr_0^0 == 0 /\ -1+delta_new^post8-delta^0 == 0 /\ 1-deltaext^0-wntext^0+2*delta^0 <= 0 /\ -deltaext_new^post8+deltaext_new^0 == 0), cost: 1
  12: l5 -> l1 : __disjvr_0^0'=__disjvr_0^post13, __disjvr_1^0'=__disjvr_1^post13, delta^0'=delta^post13, delta_new^0'=delta_new^post13, deltaext^0'=deltaext^post13, deltaext_new^0'=deltaext_new^post13, deltext^0'=deltext^post13, wnt^0'=wnt^post13, wntext^0'=wntext^post13, (-3+delta^0 <= 0 /\ delta_new^0-delta_new^post13 == 0 /\ -3+deltext^0 <= 0 /\ -wnt^0 <= 0 /\ -deltaext^0 <= 0 /\ -delta^post13+delta^0 == 0 /\ -deltaext^post13+deltaext^0 == 0 /\ -wntext^post13+wntext^0 == 0 /\ -wntext^0 <= 0 /\ -3+wntext^0 <= 0 /\ deltext^0-deltext^post13 == 0 /\ -deltaext_new^post13+deltaext_new^0 == 0 /\ -__disjvr_1^post13+__disjvr_1^0 == 0 /\ -delta^0 <= 0 /\ -3+wnt^0 <= 0 /\ -__disjvr_0^post13+__disjvr_0^0 == 0 /\ wnt^0-wnt^post13 == 0), cost: 1
  13: l6 -> l5 : __disjvr_0^0'=__disjvr_0^post14, __disjvr_1^0'=__disjvr_1^post14, delta^0'=delta^post14, delta_new^0'=delta_new^post14, deltaext^0'=deltaext^post14, deltaext_new^0'=deltaext_new^post14, deltext^0'=deltext^post14, wnt^0'=wnt^post14, wntext^0'=wntext^post14, (-delta^post14+delta^0 == 0 /\ -delta_new^post14+delta_new^0 == 0 /\ deltaext^0-deltaext^post14 == 0 /\ -deltaext_new^post14+deltaext_new^0 == 0 /\ __disjvr_1^0-__disjvr_1^post14 == 0 /\ -__disjvr_0^post14+__disjvr_0^0 == 0 /\ wnt^0-wnt^post14 == 0 /\ -wntext^post14+wntext^0 == 0 /\ deltext^0-deltext^post14 == 0), cost: 1

Chained Linear Paths

Start location: l6
Program variables: __disjvr_0^0 __disjvr_1^0 delta^0 delta_new^0 deltaext^0 deltaext_new^0 deltext^0 wnt^0 wntext^0
  15: l0 -> l1 : __disjvr_0^0'=__disjvr_0^post2, __disjvr_1^0'=__disjvr_1^post2, delta^0'=delta^post2, delta_new^0'=delta_new^post2, deltaext^0'=deltaext^post2, deltaext_new^0'=deltaext_new^post2, deltext^0'=deltext^post2, wnt^0'=wnt^post2, wntext^0'=wntext^post2, (__disjvr_0^post1-__disjvr_0^0 == 0 /\ -delta_new^post2+delta_new^post1 == 0 /\ deltaext_new^post1-deltaext_new^post2 == 0 /\ deltaext^0-deltaext^post1 == 0 /\ -__disjvr_1^post2+__disjvr_1^post1 == 0 /\ -__disjvr_0^post1+__disjvr_0^0 == 0 /\ delta_new^0-delta_new^post1 == 0 /\ -deltaext_new^post1+deltaext_new^0 == 0 /\ wntext^post1-wntext^post2 == 0 /\ -wnt^post2+wnt^post1 == 0 /\ -deltext^post2+deltext^post1 == 0 /\ -delta_new^post1+delta^post2 == 0 /\ __disjvr_1^0-__disjvr_1^post1 == 0 /\ wnt^0-wnt^post1 == 0 /\ -wntext^post1+wntext^0 == 0 /\ -__disjvr_0^post2+__disjvr_0^post1 == 0 /\ -delta^post1+delta^0 == 0 /\ deltext^0-deltext^post1 == 0 /\ -deltaext_new^post1+deltaext^post2 == 0), cost: 1
  16: l0 -> l1 : __disjvr_0^0'=__disjvr_0^post4, __disjvr_1^0'=__disjvr_1^post4, delta^0'=delta^post4, delta_new^0'=delta_new^post4, deltaext^0'=deltaext^post4, deltaext_new^0'=deltaext_new^post4, deltext^0'=deltext^post4, wnt^0'=wnt^post4, wntext^0'=wntext^post4, (deltext^0-deltext^post3 == 0 /\ -wnt^post4+wnt^post3 == 0 /\ -delta_new^post3+delta_new^0 == 0 /\ -delta^post3+delta^0 == 0 /\ -deltaext_new^post3+deltaext_new^0 == 0 /\ -delta_new^post3+delta^post4 == 0 /\ -deltaext_new^post4+deltaext_new^post3 == 0 /\ deltaext^0-deltaext^post3 == 0 /\ wnt^0-wnt^post3 == 0 /\ -wntext^post3+wntext^0 == 0 /\ __disjvr_1^0-__disjvr_1^post3 == 0 /\ delta_new^post3-delta_new^post4 == 0 /\ -deltext^post4+deltext^post3 == 0 /\ -wntext^post4+wntext^post3 == 0 /\ -__disjvr_0^post3+__disjvr_0^0 == 0 /\ deltaext^post4-deltaext_new^post3 == 0 /\ -__disjvr_1^post4+__disjvr_1^post3 == 0 /\ -__disjvr_1^0+__disjvr_1^post3 == 0 /\ __disjvr_0^post3-__disjvr_0^post4 == 0), cost: 1
   8: l1 -> l4 : __disjvr_0^0'=__disjvr_0^post9, __disjvr_1^0'=__disjvr_1^post9, delta^0'=delta^post9, delta_new^0'=delta_new^post9, deltaext^0'=deltaext^post9, deltaext_new^0'=deltaext_new^post9, deltext^0'=deltext^post9, wnt^0'=wnt^post9, wntext^0'=wntext^post9, (deltaext^0-deltaext^post9 == 0 /\ __disjvr_1^0-__disjvr_1^post9 == 0 /\ -deltaext^0+deltaext_new^post9 == 0 /\ -3-wnt^0+2*deltaext^0 <= 0 /\ -delta_new^post9+delta_new^0 == 0 /\ -wntext^post9+wntext^0 == 0 /\ -delta^post9+delta^0 == 0 /\ -__disjvr_0^post9+__disjvr_0^0 == 0 /\ -deltext^post9+deltext^0 == 0 /\ wnt^0-wnt^post9 == 0 /\ 3+wnt^0-2*deltaext^0 <= 0), cost: 1
   9: l1 -> l4 : __disjvr_0^0'=__disjvr_0^post10, __disjvr_1^0'=__disjvr_1^post10, delta^0'=delta^post10, delta_new^0'=delta_new^post10, deltaext^0'=deltaext^post10, deltaext_new^0'=deltaext_new^post10, deltext^0'=deltext^post10, wnt^0'=wnt^post10, wntext^0'=wntext^post10, (wnt^0-wnt^post10 == 0 /\ -2-wnt^0+2*deltaext^0 <= 0 /\ deltext^0-deltext^post10 == 0 /\ deltaext^0-deltaext^post10 == 0 /\ -delta^post10+delta^0 == 0 /\ -deltaext^0+deltaext_new^post10 == 0 /\ delta_new^0-delta_new^post10 == 0 /\ -wntext^post10+wntext^0 == 0 /\ -__disjvr_0^post10+__disjvr_0^0 == 0 /\ 2+wnt^0-2*deltaext^0 <= 0 /\ __disjvr_1^0-__disjvr_1^post10 == 0), cost: 1
  10: l1 -> l4 : __disjvr_0^0'=__disjvr_0^post11, __disjvr_1^0'=__disjvr_1^post11, delta^0'=delta^post11, delta_new^0'=delta_new^post11, deltaext^0'=deltaext^post11, deltaext_new^0'=deltaext_new^post11, deltext^0'=deltext^post11, wnt^0'=wnt^post11, wntext^0'=wntext^post11, (4+wnt^0-2*deltaext^0 <= 0 /\ 1-deltaext^0+deltaext_new^post11 == 0 /\ -__disjvr_1^post11+__disjvr_1^0 == 0 /\ -wnt^post11+wnt^0 == 0 /\ deltext^0-deltext^post11 == 0 /\ -__disjvr_0^post11+__disjvr_0^0 == 0 /\ deltaext^0-deltaext^post11 == 0 /\ delta_new^0-delta_new^post11 == 0 /\ -wntext^post11+wntext^0 == 0 /\ -delta^post11+delta^0 == 0), cost: 1
  11: l1 -> l4 : __disjvr_0^0'=__disjvr_0^post12, __disjvr_1^0'=__disjvr_1^post12, delta^0'=delta^post12, delta_new^0'=delta_new^post12, deltaext^0'=deltaext^post12, deltaext_new^0'=deltaext_new^post12, deltext^0'=deltext^post12, wnt^0'=wnt^post12, wntext^0'=wntext^post12, (-__disjvr_0^post12+__disjvr_0^0 == 0 /\ -1-deltaext^0+deltaext_new^post12 == 0 /\ deltaext^0-deltaext^post12 == 0 /\ delta_new^0-delta_new^post12 == 0 /\ wnt^0-wnt^post12 == 0 /\ -1-wnt^0+2*deltaext^0 <= 0 /\ -wntext^post12+wntext^0 == 0 /\ -__disjvr_1^post12+__disjvr_1^0 == 0 /\ -delta^post12+delta^0 == 0 /\ deltext^0-deltext^post12 == 0), cost: 1
   4: l4 -> l0 : __disjvr_0^0'=__disjvr_0^post5, __disjvr_1^0'=__disjvr_1^post5, delta^0'=delta^post5, delta_new^0'=delta_new^post5, deltaext^0'=deltaext^post5, deltaext_new^0'=deltaext_new^post5, deltext^0'=deltext^post5, wnt^0'=wnt^post5, wntext^0'=wntext^post5, (-wntext^post5+wntext^0 == 0 /\ deltext^0-deltext^post5 == 0 /\ -delta^post5+delta^0 == 0 /\ -deltaext^post5+deltaext^0 == 0 /\ -1-deltaext^0-wntext^0+2*delta^0 <= 0 /\ 1+deltaext^0+wntext^0-2*delta^0 <= 0 /\ delta_new^post5-delta^0 == 0 /\ wnt^0-wnt^post5 == 0 /\ -__disjvr_0^post5+__disjvr_0^0 == 0 /\ -__disjvr_1^post5+__disjvr_1^0 == 0 /\ -deltaext_new^post5+deltaext_new^0 == 0), cost: 1
   5: l4 -> l0 : __disjvr_0^0'=__disjvr_0^post6, __disjvr_1^0'=__disjvr_1^post6, delta^0'=delta^post6, delta_new^0'=delta_new^post6, deltaext^0'=deltaext^post6, deltaext_new^0'=deltaext_new^post6, deltext^0'=deltext^post6, wnt^0'=wnt^post6, wntext^0'=wntext^post6, (-wntext^post6+wntext^0 == 0 /\ -wnt^post6+wnt^0 == 0 /\ -__disjvr_0^post6+__disjvr_0^0 == 0 /\ -deltaext_new^post6+deltaext_new^0 == 0 /\ -__disjvr_1^post6+__disjvr_1^0 == 0 /\ deltaext^0+wntext^0-2*delta^0 <= 0 /\ deltext^0-deltext^post6 == 0 /\ -deltaext^0-wntext^0+2*delta^0 <= 0 /\ -deltaext^post6+deltaext^0 == 0 /\ -delta^post6+delta^0 == 0 /\ delta_new^post6-delta^0 == 0), cost: 1
   6: l4 -> l0 : __disjvr_0^0'=__disjvr_0^post7, __disjvr_1^0'=__disjvr_1^post7, delta^0'=delta^post7, delta_new^0'=delta_new^post7, deltaext^0'=deltaext^post7, deltaext_new^0'=deltaext_new^post7, deltext^0'=deltext^post7, wnt^0'=wnt^post7, wntext^0'=wntext^post7, (2+deltaext^0+wntext^0-2*delta^0 <= 0 /\ -wntext^post7+wntext^0 == 0 /\ -__disjvr_0^post7+__disjvr_0^0 == 0 /\ -deltaext^post7+deltaext^0 == 0 /\ deltext^0-deltext^post7 == 0 /\ __disjvr_1^0-__disjvr_1^post7 == 0 /\ 1+delta_new^post7-delta^0 == 0 /\ -delta^post7+delta^0 == 0 /\ wnt^0-wnt^post7 == 0 /\ -deltaext_new^post7+deltaext_new^0 == 0), cost: 1
   7: l4 -> l0 : __disjvr_0^0'=__disjvr_0^post8, __disjvr_1^0'=__disjvr_1^post8, delta^0'=delta^post8, delta_new^0'=delta_new^post8, deltaext^0'=deltaext^post8, deltaext_new^0'=deltaext_new^post8, deltext^0'=deltext^post8, wnt^0'=wnt^post8, wntext^0'=wntext^post8, (deltext^0-deltext^post8 == 0 /\ -delta^post8+delta^0 == 0 /\ deltaext^0-deltaext^post8 == 0 /\ -wntext^post8+wntext^0 == 0 /\ wnt^0-wnt^post8 == 0 /\ __disjvr_1^0-__disjvr_1^post8 == 0 /\ -__disjvr_0^post8+__disjvr_0^0 == 0 /\ -1+delta_new^post8-delta^0 == 0 /\ 1-deltaext^0-wntext^0+2*delta^0 <= 0 /\ -deltaext_new^post8+deltaext_new^0 == 0), cost: 1
  14: l6 -> l1 : __disjvr_0^0'=__disjvr_0^post13, __disjvr_1^0'=__disjvr_1^post13, delta^0'=delta^post13, delta_new^0'=delta_new^post13, deltaext^0'=deltaext^post13, deltaext_new^0'=deltaext_new^post13, deltext^0'=deltext^post13, wnt^0'=wnt^post13, wntext^0'=wntext^post13, (deltext^post14-deltext^post13 == 0 /\ delta_new^post14-delta_new^post13 == 0 /\ -delta^post14+delta^0 == 0 /\ deltaext_new^post14-deltaext_new^post13 == 0 /\ -delta_new^post14+delta_new^0 == 0 /\ -wntext^post14 <= 0 /\ deltaext^0-deltaext^post14 == 0 /\ -deltaext_new^post14+deltaext_new^0 == 0 /\ wntext^post14-wntext^post13 == 0 /\ -delta^post14 <= 0 /\ delta^post14-delta^post13 == 0 /\ -3+wnt^post14 <= 0 /\ __disjvr_1^0-__disjvr_1^post14 == 0 /\ -3+wntext^post14 <= 0 /\ -__disjvr_0^post14+__disjvr_0^0 == 0 /\ -__disjvr_1^post13+__disjvr_1^post14 == 0 /\ __disjvr_0^post14-__disjvr_0^post13 == 0 /\ -deltaext^post13+deltaext^post14 == 0 /\ -deltaext^post14 <= 0 /\ -wnt^post14 <= 0 /\ wnt^0-wnt^post14 == 0 /\ -3+delta^post14 <= 0 /\ -3+deltext^post14 <= 0 /\ -wntext^post14+wntext^0 == 0 /\ wnt^post14-wnt^post13 == 0 /\ deltext^0-deltext^post14 == 0), cost: 1

	Eliminating location l5 by chaining:

	Applied chaining

	First rule:
	l6 -> l5 : __disjvr_0^0'=__disjvr_0^post14, __disjvr_1^0'=__disjvr_1^post14, delta^0'=delta^post14, delta_new^0'=delta_new^post14, deltaext^0'=deltaext^post14, deltaext_new^0'=deltaext_new^post14, deltext^0'=deltext^post14, wnt^0'=wnt^post14, wntext^0'=wntext^post14, (-delta^post14+delta^0 == 0 /\ -delta_new^post14+delta_new^0 == 0 /\ deltaext^0-deltaext^post14 == 0 /\ -deltaext_new^post14+deltaext_new^0 == 0 /\ __disjvr_1^0-__disjvr_1^post14 == 0 /\ -__disjvr_0^post14+__disjvr_0^0 == 0 /\ wnt^0-wnt^post14 == 0 /\ -wntext^post14+wntext^0 == 0 /\ deltext^0-deltext^post14 == 0), cost: 1
	Second rule:
	l5 -> l1 : __disjvr_0^0'=__disjvr_0^post13, __disjvr_1^0'=__disjvr_1^post13, delta^0'=delta^post13, delta_new^0'=delta_new^post13, deltaext^0'=deltaext^post13, deltaext_new^0'=deltaext_new^post13, deltext^0'=deltext^post13, wnt^0'=wnt^post13, wntext^0'=wntext^post13, (-3+delta^0 <= 0 /\ delta_new^0-delta_new^post13 == 0 /\ -3+deltext^0 <= 0 /\ -wnt^0 <= 0 /\ -deltaext^0 <= 0 /\ -delta^post13+delta^0 == 0 /\ -deltaext^post13+deltaext^0 == 0 /\ -wntext^post13+wntext^0 == 0 /\ -wntext^0 <= 0 /\ -3+wntext^0 <= 0 /\ deltext^0-deltext^post13 == 0 /\ -deltaext_new^post13+deltaext_new^0 == 0 /\ -__disjvr_1^post13+__disjvr_1^0 == 0 /\ -delta^0 <= 0 /\ -3+wnt^0 <= 0 /\ -__disjvr_0^post13+__disjvr_0^0 == 0 /\ wnt^0-wnt^post13 == 0), cost: 1
	New rule:
	l6 -> l1 : __disjvr_0^0'=__disjvr_0^post13, __disjvr_1^0'=__disjvr_1^post13, delta^0'=delta^post13, delta_new^0'=delta_new^post13, deltaext^0'=deltaext^post13, deltaext_new^0'=deltaext_new^post13, deltext^0'=deltext^post13, wnt^0'=wnt^post13, wntext^0'=wntext^post13, (deltext^post14-deltext^post13 == 0 /\ delta_new^post14-delta_new^post13 == 0 /\ -delta^post14+delta^0 == 0 /\ deltaext_new^post14-deltaext_new^post13 == 0 /\ -delta_new^post14+delta_new^0 == 0 /\ -wntext^post14 <= 0 /\ deltaext^0-deltaext^post14 == 0 /\ -deltaext_new^post14+deltaext_new^0 == 0 /\ wntext^post14-wntext^post13 == 0 /\ -delta^post14 <= 0 /\ delta^post14-delta^post13 == 0 /\ -3+wnt^post14 <= 0 /\ __disjvr_1^0-__disjvr_1^post14 == 0 /\ -3+wntext^post14 <= 0 /\ -__disjvr_0^post14+__disjvr_0^0 == 0 /\ -__disjvr_1^post13+__disjvr_1^post14 == 0 /\ __disjvr_0^post14-__disjvr_0^post13 == 0 /\ -deltaext^post13+deltaext^post14 == 0 /\ -deltaext^post14 <= 0 /\ -wnt^post14 <= 0 /\ wnt^0-wnt^post14 == 0 /\ -3+delta^post14 <= 0 /\ -3+deltext^post14 <= 0 /\ -wntext^post14+wntext^0 == 0 /\ wnt^post14-wnt^post13 == 0 /\ deltext^0-deltext^post14 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 12 13
	
	Eliminating location l2 by chaining:

	Applied chaining

	First rule:
	l0 -> l2 : __disjvr_0^0'=__disjvr_0^post1, __disjvr_1^0'=__disjvr_1^post1, delta^0'=delta^post1, delta_new^0'=delta_new^post1, deltaext^0'=deltaext^post1, deltaext_new^0'=deltaext_new^post1, deltext^0'=deltext^post1, wnt^0'=wnt^post1, wntext^0'=wntext^post1, (__disjvr_0^post1-__disjvr_0^0 == 0 /\ deltaext^0-deltaext^post1 == 0 /\ -__disjvr_0^post1+__disjvr_0^0 == 0 /\ delta_new^0-delta_new^post1 == 0 /\ -deltaext_new^post1+deltaext_new^0 == 0 /\ __disjvr_1^0-__disjvr_1^post1 == 0 /\ wnt^0-wnt^post1 == 0 /\ -wntext^post1+wntext^0 == 0 /\ -delta^post1+delta^0 == 0 /\ deltext^0-deltext^post1 == 0), cost: 1
	Second rule:
	l2 -> l1 : __disjvr_0^0'=__disjvr_0^post2, __disjvr_1^0'=__disjvr_1^post2, delta^0'=delta^post2, delta_new^0'=delta_new^post2, deltaext^0'=deltaext^post2, deltaext_new^0'=deltaext_new^post2, deltext^0'=deltext^post2, wnt^0'=wnt^post2, wntext^0'=wntext^post2, (__disjvr_1^0-__disjvr_1^post2 == 0 /\ wntext^0-wntext^post2 == 0 /\ -delta_new^post2+delta_new^0 == 0 /\ -deltext^post2+deltext^0 == 0 /\ -__disjvr_0^post2+__disjvr_0^0 == 0 /\ deltaext_new^0-deltaext_new^post2 == 0 /\ -delta_new^0+delta^post2 == 0 /\ deltaext^post2-deltaext_new^0 == 0 /\ wnt^0-wnt^post2 == 0), cost: 1
	New rule:
	l0 -> l1 : __disjvr_0^0'=__disjvr_0^post2, __disjvr_1^0'=__disjvr_1^post2, delta^0'=delta^post2, delta_new^0'=delta_new^post2, deltaext^0'=deltaext^post2, deltaext_new^0'=deltaext_new^post2, deltext^0'=deltext^post2, wnt^0'=wnt^post2, wntext^0'=wntext^post2, (__disjvr_0^post1-__disjvr_0^0 == 0 /\ -delta_new^post2+delta_new^post1 == 0 /\ deltaext_new^post1-deltaext_new^post2 == 0 /\ deltaext^0-deltaext^post1 == 0 /\ -__disjvr_1^post2+__disjvr_1^post1 == 0 /\ -__disjvr_0^post1+__disjvr_0^0 == 0 /\ delta_new^0-delta_new^post1 == 0 /\ -deltaext_new^post1+deltaext_new^0 == 0 /\ wntext^post1-wntext^post2 == 0 /\ -wnt^post2+wnt^post1 == 0 /\ -deltext^post2+deltext^post1 == 0 /\ -delta_new^post1+delta^post2 == 0 /\ __disjvr_1^0-__disjvr_1^post1 == 0 /\ wnt^0-wnt^post1 == 0 /\ -wntext^post1+wntext^0 == 0 /\ -__disjvr_0^post2+__disjvr_0^post1 == 0 /\ -delta^post1+delta^0 == 0 /\ deltext^0-deltext^post1 == 0 /\ -deltaext_new^post1+deltaext^post2 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 1
	
	Eliminating location l3 by chaining:

	Applied chaining

	First rule:
	l0 -> l3 : __disjvr_0^0'=__disjvr_0^post3, __disjvr_1^0'=__disjvr_1^post3, delta^0'=delta^post3, delta_new^0'=delta_new^post3, deltaext^0'=deltaext^post3, deltaext_new^0'=deltaext_new^post3, deltext^0'=deltext^post3, wnt^0'=wnt^post3, wntext^0'=wntext^post3, (deltext^0-deltext^post3 == 0 /\ -delta_new^post3+delta_new^0 == 0 /\ -delta^post3+delta^0 == 0 /\ -deltaext_new^post3+deltaext_new^0 == 0 /\ deltaext^0-deltaext^post3 == 0 /\ wnt^0-wnt^post3 == 0 /\ -wntext^post3+wntext^0 == 0 /\ __disjvr_1^0-__disjvr_1^post3 == 0 /\ -__disjvr_0^post3+__disjvr_0^0 == 0 /\ -__disjvr_1^0+__disjvr_1^post3 == 0), cost: 1
	Second rule:
	l3 -> l1 : __disjvr_0^0'=__disjvr_0^post4, __disjvr_1^0'=__disjvr_1^post4, delta^0'=delta^post4, delta_new^0'=delta_new^post4, deltaext^0'=deltaext^post4, deltaext_new^0'=deltaext_new^post4, deltext^0'=deltext^post4, wnt^0'=wnt^post4, wntext^0'=wntext^post4, (-delta_new^0+delta^post4 == 0 /\ deltaext^post4-deltaext_new^0 == 0 /\ deltext^0-deltext^post4 == 0 /\ wnt^0-wnt^post4 == 0 /\ __disjvr_0^0-__disjvr_0^post4 == 0 /\ -deltaext_new^post4+deltaext_new^0 == 0 /\ delta_new^0-delta_new^post4 == 0 /\ -wntext^post4+wntext^0 == 0 /\ __disjvr_1^0-__disjvr_1^post4 == 0), cost: 1
	New rule:
	l0 -> l1 : __disjvr_0^0'=__disjvr_0^post4, __disjvr_1^0'=__disjvr_1^post4, delta^0'=delta^post4, delta_new^0'=delta_new^post4, deltaext^0'=deltaext^post4, deltaext_new^0'=deltaext_new^post4, deltext^0'=deltext^post4, wnt^0'=wnt^post4, wntext^0'=wntext^post4, (deltext^0-deltext^post3 == 0 /\ -wnt^post4+wnt^post3 == 0 /\ -delta_new^post3+delta_new^0 == 0 /\ -delta^post3+delta^0 == 0 /\ -deltaext_new^post3+deltaext_new^0 == 0 /\ -delta_new^post3+delta^post4 == 0 /\ -deltaext_new^post4+deltaext_new^post3 == 0 /\ deltaext^0-deltaext^post3 == 0 /\ wnt^0-wnt^post3 == 0 /\ -wntext^post3+wntext^0 == 0 /\ __disjvr_1^0-__disjvr_1^post3 == 0 /\ delta_new^post3-delta_new^post4 == 0 /\ -deltext^post4+deltext^post3 == 0 /\ -wntext^post4+wntext^post3 == 0 /\ -__disjvr_0^post3+__disjvr_0^0 == 0 /\ deltaext^post4-deltaext_new^post3 == 0 /\ -__disjvr_1^post4+__disjvr_1^post3 == 0 /\ -__disjvr_1^0+__disjvr_1^post3 == 0 /\ __disjvr_0^post3-__disjvr_0^post4 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 2 3

Simplified Transitions

Start location: l6
Program variables: delta^0 delta_new^0 deltaext^0 deltaext_new^0 deltext^0 wnt^0 wntext^0
  26: l0 -> l1 : delta^0'=delta_new^0, deltaext^0'=deltaext_new^0, T, cost: 1
  27: l0 -> l1 : delta^0'=delta_new^0, deltaext^0'=deltaext_new^0, T, cost: 1
  21: l1 -> l4 : deltaext_new^0'=deltaext^0, (-3-wnt^0+2*deltaext^0 <= 0 /\ -3-wnt^0+2*deltaext^0 == 0 /\ 3+wnt^0-2*deltaext^0 <= 0), cost: 1
  22: l1 -> l4 : deltaext_new^0'=deltaext^0, (-2-wnt^0+2*deltaext^0 <= 0 /\ -2-wnt^0+2*deltaext^0 == 0 /\ 2+wnt^0-2*deltaext^0 <= 0), cost: 1
  23: l1 -> l4 : deltaext_new^0'=-1+deltaext^0, 4+wnt^0-2*deltaext^0 <= 0, cost: 1
  24: l1 -> l4 : deltaext_new^0'=1+deltaext^0, -1-wnt^0+2*deltaext^0 <= 0, cost: 1
  17: l4 -> l0 : delta_new^0'=delta^0, (-1-deltaext^0-wntext^0+2*delta^0 <= 0 /\ -1-deltaext^0-wntext^0+2*delta^0 == 0 /\ 1+deltaext^0+wntext^0-2*delta^0 <= 0), cost: 1
  18: l4 -> l0 : delta_new^0'=delta^0, (deltaext^0+wntext^0-2*delta^0 <= 0 /\ deltaext^0+wntext^0-2*delta^0 == 0 /\ -deltaext^0-wntext^0+2*delta^0 <= 0), cost: 1
  19: l4 -> l0 : delta_new^0'=-1+delta^0, 2+deltaext^0+wntext^0-2*delta^0 <= 0, cost: 1
  20: l4 -> l0 : delta_new^0'=1+delta^0, 1-deltaext^0-wntext^0+2*delta^0 <= 0, cost: 1
  25: l6 -> l1 : (-3+delta^0 <= 0 /\ -3+deltext^0 <= 0 /\ -wnt^0 <= 0 /\ -deltaext^0 <= 0 /\ -wntext^0 <= 0 /\ -3+wntext^0 <= 0 /\ -delta^0 <= 0 /\ -3+wnt^0 <= 0), cost: 1

	made implied equalities explicit

	Original rule:
	l4 -> l0 : __disjvr_0^0'=__disjvr_0^post5, __disjvr_1^0'=__disjvr_1^post5, delta^0'=delta^post5, delta_new^0'=delta_new^post5, deltaext^0'=deltaext^post5, deltaext_new^0'=deltaext_new^post5, deltext^0'=deltext^post5, wnt^0'=wnt^post5, wntext^0'=wntext^post5, (-wntext^post5+wntext^0 == 0 /\ deltext^0-deltext^post5 == 0 /\ -delta^post5+delta^0 == 0 /\ -deltaext^post5+deltaext^0 == 0 /\ -1-deltaext^0-wntext^0+2*delta^0 <= 0 /\ 1+deltaext^0+wntext^0-2*delta^0 <= 0 /\ delta_new^post5-delta^0 == 0 /\ wnt^0-wnt^post5 == 0 /\ -__disjvr_0^post5+__disjvr_0^0 == 0 /\ -__disjvr_1^post5+__disjvr_1^0 == 0 /\ -deltaext_new^post5+deltaext_new^0 == 0), cost: 1
	New rule:
	l4 -> l0 : __disjvr_0^0'=__disjvr_0^post5, __disjvr_1^0'=__disjvr_1^post5, delta^0'=delta^post5, delta_new^0'=delta_new^post5, deltaext^0'=deltaext^post5, deltaext_new^0'=deltaext_new^post5, deltext^0'=deltext^post5, wnt^0'=wnt^post5, wntext^0'=wntext^post5, (-wntext^post5+wntext^0 == 0 /\ deltext^0-deltext^post5 == 0 /\ -delta^post5+delta^0 == 0 /\ -deltaext^post5+deltaext^0 == 0 /\ -1-deltaext^0-wntext^0+2*delta^0 <= 0 /\ -1-deltaext^0-wntext^0+2*delta^0 == 0 /\ 1+deltaext^0+wntext^0-2*delta^0 <= 0 /\ delta_new^post5-delta^0 == 0 /\ wnt^0-wnt^post5 == 0 /\ -__disjvr_0^post5+__disjvr_0^0 == 0 /\ -__disjvr_1^post5+__disjvr_1^0 == 0 /\ -deltaext_new^post5+deltaext_new^0 == 0), cost: 1
	
	Propagated Equalities

	Original rule:
	l4 -> l0 : __disjvr_0^0'=__disjvr_0^post5, __disjvr_1^0'=__disjvr_1^post5, delta^0'=delta^post5, delta_new^0'=delta_new^post5, deltaext^0'=deltaext^post5, deltaext_new^0'=deltaext_new^post5, deltext^0'=deltext^post5, wnt^0'=wnt^post5, wntext^0'=wntext^post5, (-wntext^post5+wntext^0 == 0 /\ deltext^0-deltext^post5 == 0 /\ -delta^post5+delta^0 == 0 /\ -deltaext^post5+deltaext^0 == 0 /\ -1-deltaext^0-wntext^0+2*delta^0 <= 0 /\ -1-deltaext^0-wntext^0+2*delta^0 == 0 /\ 1+deltaext^0+wntext^0-2*delta^0 <= 0 /\ delta_new^post5-delta^0 == 0 /\ wnt^0-wnt^post5 == 0 /\ -__disjvr_0^post5+__disjvr_0^0 == 0 /\ -__disjvr_1^post5+__disjvr_1^0 == 0 /\ -deltaext_new^post5+deltaext_new^0 == 0), cost: 1
	New rule:
	l4 -> l0 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta^0, delta_new^0'=delta^0, deltaext^0'=deltaext^0, deltaext_new^0'=deltaext_new^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, (0 == 0 /\ -1-deltaext^0-wntext^0+2*delta^0 <= 0 /\ -1-deltaext^0-wntext^0+2*delta^0 == 0 /\ 1+deltaext^0+wntext^0-2*delta^0 <= 0), cost: 1
	
		propagated equality wntext^post5 = wntext^0
		
		propagated equality deltext^post5 = deltext^0
		
		propagated equality delta^post5 = delta^0
		
		propagated equality deltaext^post5 = deltaext^0
		
		propagated equality delta_new^post5 = delta^0
		
		propagated equality wnt^post5 = wnt^0
		
		propagated equality __disjvr_0^post5 = __disjvr_0^0
		
		propagated equality __disjvr_1^post5 = __disjvr_1^0
		
		propagated equality deltaext_new^post5 = deltaext_new^0
		
	Simplified Guard

	Original rule:
	l4 -> l0 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta^0, delta_new^0'=delta^0, deltaext^0'=deltaext^0, deltaext_new^0'=deltaext_new^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, (0 == 0 /\ -1-deltaext^0-wntext^0+2*delta^0 <= 0 /\ -1-deltaext^0-wntext^0+2*delta^0 == 0 /\ 1+deltaext^0+wntext^0-2*delta^0 <= 0), cost: 1
	New rule:
	l4 -> l0 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta^0, delta_new^0'=delta^0, deltaext^0'=deltaext^0, deltaext_new^0'=deltaext_new^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, (-1-deltaext^0-wntext^0+2*delta^0 <= 0 /\ -1-deltaext^0-wntext^0+2*delta^0 == 0 /\ 1+deltaext^0+wntext^0-2*delta^0 <= 0), cost: 1
	
	made implied equalities explicit

	Original rule:
	l4 -> l0 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta^0, delta_new^0'=delta^0, deltaext^0'=deltaext^0, deltaext_new^0'=deltaext_new^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, (-1-deltaext^0-wntext^0+2*delta^0 <= 0 /\ -1-deltaext^0-wntext^0+2*delta^0 == 0 /\ 1+deltaext^0+wntext^0-2*delta^0 <= 0), cost: 1
	New rule:
	l4 -> l0 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta^0, delta_new^0'=delta^0, deltaext^0'=deltaext^0, deltaext_new^0'=deltaext_new^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, (-1-deltaext^0-wntext^0+2*delta^0 <= 0 /\ -1-deltaext^0-wntext^0+2*delta^0 == 0 /\ 1+deltaext^0+wntext^0-2*delta^0 <= 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	l4 -> l0 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta^0, delta_new^0'=delta^0, deltaext^0'=deltaext^0, deltaext_new^0'=deltaext_new^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, (-1-deltaext^0-wntext^0+2*delta^0 <= 0 /\ -1-deltaext^0-wntext^0+2*delta^0 == 0 /\ 1+deltaext^0+wntext^0-2*delta^0 <= 0), cost: 1
	New rule:
	l4 -> l0 : delta_new^0'=delta^0, (-1-deltaext^0-wntext^0+2*delta^0 <= 0 /\ -1-deltaext^0-wntext^0+2*delta^0 == 0 /\ 1+deltaext^0+wntext^0-2*delta^0 <= 0), cost: 1
	
	made implied equalities explicit

	Original rule:
	l4 -> l0 : __disjvr_0^0'=__disjvr_0^post6, __disjvr_1^0'=__disjvr_1^post6, delta^0'=delta^post6, delta_new^0'=delta_new^post6, deltaext^0'=deltaext^post6, deltaext_new^0'=deltaext_new^post6, deltext^0'=deltext^post6, wnt^0'=wnt^post6, wntext^0'=wntext^post6, (-wntext^post6+wntext^0 == 0 /\ -wnt^post6+wnt^0 == 0 /\ -__disjvr_0^post6+__disjvr_0^0 == 0 /\ -deltaext_new^post6+deltaext_new^0 == 0 /\ -__disjvr_1^post6+__disjvr_1^0 == 0 /\ deltaext^0+wntext^0-2*delta^0 <= 0 /\ deltext^0-deltext^post6 == 0 /\ -deltaext^0-wntext^0+2*delta^0 <= 0 /\ -deltaext^post6+deltaext^0 == 0 /\ -delta^post6+delta^0 == 0 /\ delta_new^post6-delta^0 == 0), cost: 1
	New rule:
	l4 -> l0 : __disjvr_0^0'=__disjvr_0^post6, __disjvr_1^0'=__disjvr_1^post6, delta^0'=delta^post6, delta_new^0'=delta_new^post6, deltaext^0'=deltaext^post6, deltaext_new^0'=deltaext_new^post6, deltext^0'=deltext^post6, wnt^0'=wnt^post6, wntext^0'=wntext^post6, (-wntext^post6+wntext^0 == 0 /\ -wnt^post6+wnt^0 == 0 /\ -__disjvr_0^post6+__disjvr_0^0 == 0 /\ -deltaext_new^post6+deltaext_new^0 == 0 /\ -__disjvr_1^post6+__disjvr_1^0 == 0 /\ deltaext^0+wntext^0-2*delta^0 <= 0 /\ deltaext^0+wntext^0-2*delta^0 == 0 /\ deltext^0-deltext^post6 == 0 /\ -deltaext^0-wntext^0+2*delta^0 <= 0 /\ -deltaext^post6+deltaext^0 == 0 /\ -delta^post6+delta^0 == 0 /\ delta_new^post6-delta^0 == 0), cost: 1
	
	Propagated Equalities

	Original rule:
	l4 -> l0 : __disjvr_0^0'=__disjvr_0^post6, __disjvr_1^0'=__disjvr_1^post6, delta^0'=delta^post6, delta_new^0'=delta_new^post6, deltaext^0'=deltaext^post6, deltaext_new^0'=deltaext_new^post6, deltext^0'=deltext^post6, wnt^0'=wnt^post6, wntext^0'=wntext^post6, (-wntext^post6+wntext^0 == 0 /\ -wnt^post6+wnt^0 == 0 /\ -__disjvr_0^post6+__disjvr_0^0 == 0 /\ -deltaext_new^post6+deltaext_new^0 == 0 /\ -__disjvr_1^post6+__disjvr_1^0 == 0 /\ deltaext^0+wntext^0-2*delta^0 <= 0 /\ deltaext^0+wntext^0-2*delta^0 == 0 /\ deltext^0-deltext^post6 == 0 /\ -deltaext^0-wntext^0+2*delta^0 <= 0 /\ -deltaext^post6+deltaext^0 == 0 /\ -delta^post6+delta^0 == 0 /\ delta_new^post6-delta^0 == 0), cost: 1
	New rule:
	l4 -> l0 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta^0, delta_new^0'=delta^0, deltaext^0'=deltaext^0, deltaext_new^0'=deltaext_new^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, (0 == 0 /\ deltaext^0+wntext^0-2*delta^0 <= 0 /\ deltaext^0+wntext^0-2*delta^0 == 0 /\ -deltaext^0-wntext^0+2*delta^0 <= 0), cost: 1
	
		propagated equality wntext^post6 = wntext^0
		
		propagated equality wnt^post6 = wnt^0
		
		propagated equality __disjvr_0^post6 = __disjvr_0^0
		
		propagated equality deltaext_new^post6 = deltaext_new^0
		
		propagated equality __disjvr_1^post6 = __disjvr_1^0
		
		propagated equality deltext^post6 = deltext^0
		
		propagated equality deltaext^post6 = deltaext^0
		
		propagated equality delta^post6 = delta^0
		
		propagated equality delta_new^post6 = delta^0
		
	Simplified Guard

	Original rule:
	l4 -> l0 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta^0, delta_new^0'=delta^0, deltaext^0'=deltaext^0, deltaext_new^0'=deltaext_new^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, (0 == 0 /\ deltaext^0+wntext^0-2*delta^0 <= 0 /\ deltaext^0+wntext^0-2*delta^0 == 0 /\ -deltaext^0-wntext^0+2*delta^0 <= 0), cost: 1
	New rule:
	l4 -> l0 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta^0, delta_new^0'=delta^0, deltaext^0'=deltaext^0, deltaext_new^0'=deltaext_new^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, (deltaext^0+wntext^0-2*delta^0 <= 0 /\ deltaext^0+wntext^0-2*delta^0 == 0 /\ -deltaext^0-wntext^0+2*delta^0 <= 0), cost: 1
	
	made implied equalities explicit

	Original rule:
	l4 -> l0 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta^0, delta_new^0'=delta^0, deltaext^0'=deltaext^0, deltaext_new^0'=deltaext_new^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, (deltaext^0+wntext^0-2*delta^0 <= 0 /\ deltaext^0+wntext^0-2*delta^0 == 0 /\ -deltaext^0-wntext^0+2*delta^0 <= 0), cost: 1
	New rule:
	l4 -> l0 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta^0, delta_new^0'=delta^0, deltaext^0'=deltaext^0, deltaext_new^0'=deltaext_new^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, (deltaext^0+wntext^0-2*delta^0 <= 0 /\ deltaext^0+wntext^0-2*delta^0 == 0 /\ -deltaext^0-wntext^0+2*delta^0 <= 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	l4 -> l0 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta^0, delta_new^0'=delta^0, deltaext^0'=deltaext^0, deltaext_new^0'=deltaext_new^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, (deltaext^0+wntext^0-2*delta^0 <= 0 /\ deltaext^0+wntext^0-2*delta^0 == 0 /\ -deltaext^0-wntext^0+2*delta^0 <= 0), cost: 1
	New rule:
	l4 -> l0 : delta_new^0'=delta^0, (deltaext^0+wntext^0-2*delta^0 <= 0 /\ deltaext^0+wntext^0-2*delta^0 == 0 /\ -deltaext^0-wntext^0+2*delta^0 <= 0), cost: 1
	
	Propagated Equalities

	Original rule:
	l4 -> l0 : __disjvr_0^0'=__disjvr_0^post7, __disjvr_1^0'=__disjvr_1^post7, delta^0'=delta^post7, delta_new^0'=delta_new^post7, deltaext^0'=deltaext^post7, deltaext_new^0'=deltaext_new^post7, deltext^0'=deltext^post7, wnt^0'=wnt^post7, wntext^0'=wntext^post7, (2+deltaext^0+wntext^0-2*delta^0 <= 0 /\ -wntext^post7+wntext^0 == 0 /\ -__disjvr_0^post7+__disjvr_0^0 == 0 /\ -deltaext^post7+deltaext^0 == 0 /\ deltext^0-deltext^post7 == 0 /\ __disjvr_1^0-__disjvr_1^post7 == 0 /\ 1+delta_new^post7-delta^0 == 0 /\ -delta^post7+delta^0 == 0 /\ wnt^0-wnt^post7 == 0 /\ -deltaext_new^post7+deltaext_new^0 == 0), cost: 1
	New rule:
	l4 -> l0 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta^0, delta_new^0'=-1+delta^0, deltaext^0'=deltaext^0, deltaext_new^0'=deltaext_new^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, (0 == 0 /\ 2+deltaext^0+wntext^0-2*delta^0 <= 0), cost: 1
	
		propagated equality wntext^post7 = wntext^0
		
		propagated equality __disjvr_0^post7 = __disjvr_0^0
		
		propagated equality deltaext^post7 = deltaext^0
		
		propagated equality deltext^post7 = deltext^0
		
		propagated equality __disjvr_1^post7 = __disjvr_1^0
		
		propagated equality delta_new^post7 = -1+delta^0
		
		propagated equality delta^post7 = delta^0
		
		propagated equality wnt^post7 = wnt^0
		
		propagated equality deltaext_new^post7 = deltaext_new^0
		
	Simplified Guard

	Original rule:
	l4 -> l0 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta^0, delta_new^0'=-1+delta^0, deltaext^0'=deltaext^0, deltaext_new^0'=deltaext_new^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, (0 == 0 /\ 2+deltaext^0+wntext^0-2*delta^0 <= 0), cost: 1
	New rule:
	l4 -> l0 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta^0, delta_new^0'=-1+delta^0, deltaext^0'=deltaext^0, deltaext_new^0'=deltaext_new^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, 2+deltaext^0+wntext^0-2*delta^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l4 -> l0 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta^0, delta_new^0'=-1+delta^0, deltaext^0'=deltaext^0, deltaext_new^0'=deltaext_new^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, 2+deltaext^0+wntext^0-2*delta^0 <= 0, cost: 1
	New rule:
	l4 -> l0 : delta_new^0'=-1+delta^0, 2+deltaext^0+wntext^0-2*delta^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l4 -> l0 : __disjvr_0^0'=__disjvr_0^post8, __disjvr_1^0'=__disjvr_1^post8, delta^0'=delta^post8, delta_new^0'=delta_new^post8, deltaext^0'=deltaext^post8, deltaext_new^0'=deltaext_new^post8, deltext^0'=deltext^post8, wnt^0'=wnt^post8, wntext^0'=wntext^post8, (deltext^0-deltext^post8 == 0 /\ -delta^post8+delta^0 == 0 /\ deltaext^0-deltaext^post8 == 0 /\ -wntext^post8+wntext^0 == 0 /\ wnt^0-wnt^post8 == 0 /\ __disjvr_1^0-__disjvr_1^post8 == 0 /\ -__disjvr_0^post8+__disjvr_0^0 == 0 /\ -1+delta_new^post8-delta^0 == 0 /\ 1-deltaext^0-wntext^0+2*delta^0 <= 0 /\ -deltaext_new^post8+deltaext_new^0 == 0), cost: 1
	New rule:
	l4 -> l0 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta^0, delta_new^0'=1+delta^0, deltaext^0'=deltaext^0, deltaext_new^0'=deltaext_new^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, (0 == 0 /\ 1-deltaext^0-wntext^0+2*delta^0 <= 0), cost: 1
	
		propagated equality deltext^post8 = deltext^0
		
		propagated equality delta^post8 = delta^0
		
		propagated equality deltaext^post8 = deltaext^0
		
		propagated equality wntext^post8 = wntext^0
		
		propagated equality wnt^post8 = wnt^0
		
		propagated equality __disjvr_1^post8 = __disjvr_1^0
		
		propagated equality __disjvr_0^post8 = __disjvr_0^0
		
		propagated equality delta_new^post8 = 1+delta^0
		
		propagated equality deltaext_new^post8 = deltaext_new^0
		
	Simplified Guard

	Original rule:
	l4 -> l0 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta^0, delta_new^0'=1+delta^0, deltaext^0'=deltaext^0, deltaext_new^0'=deltaext_new^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, (0 == 0 /\ 1-deltaext^0-wntext^0+2*delta^0 <= 0), cost: 1
	New rule:
	l4 -> l0 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta^0, delta_new^0'=1+delta^0, deltaext^0'=deltaext^0, deltaext_new^0'=deltaext_new^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, 1-deltaext^0-wntext^0+2*delta^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l4 -> l0 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta^0, delta_new^0'=1+delta^0, deltaext^0'=deltaext^0, deltaext_new^0'=deltaext_new^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, 1-deltaext^0-wntext^0+2*delta^0 <= 0, cost: 1
	New rule:
	l4 -> l0 : delta_new^0'=1+delta^0, 1-deltaext^0-wntext^0+2*delta^0 <= 0, cost: 1
	
	made implied equalities explicit

	Original rule:
	l1 -> l4 : __disjvr_0^0'=__disjvr_0^post9, __disjvr_1^0'=__disjvr_1^post9, delta^0'=delta^post9, delta_new^0'=delta_new^post9, deltaext^0'=deltaext^post9, deltaext_new^0'=deltaext_new^post9, deltext^0'=deltext^post9, wnt^0'=wnt^post9, wntext^0'=wntext^post9, (deltaext^0-deltaext^post9 == 0 /\ __disjvr_1^0-__disjvr_1^post9 == 0 /\ -deltaext^0+deltaext_new^post9 == 0 /\ -3-wnt^0+2*deltaext^0 <= 0 /\ -delta_new^post9+delta_new^0 == 0 /\ -wntext^post9+wntext^0 == 0 /\ -delta^post9+delta^0 == 0 /\ -__disjvr_0^post9+__disjvr_0^0 == 0 /\ -deltext^post9+deltext^0 == 0 /\ wnt^0-wnt^post9 == 0 /\ 3+wnt^0-2*deltaext^0 <= 0), cost: 1
	New rule:
	l1 -> l4 : __disjvr_0^0'=__disjvr_0^post9, __disjvr_1^0'=__disjvr_1^post9, delta^0'=delta^post9, delta_new^0'=delta_new^post9, deltaext^0'=deltaext^post9, deltaext_new^0'=deltaext_new^post9, deltext^0'=deltext^post9, wnt^0'=wnt^post9, wntext^0'=wntext^post9, (deltaext^0-deltaext^post9 == 0 /\ __disjvr_1^0-__disjvr_1^post9 == 0 /\ -deltaext^0+deltaext_new^post9 == 0 /\ -3-wnt^0+2*deltaext^0 <= 0 /\ -3-wnt^0+2*deltaext^0 == 0 /\ -delta_new^post9+delta_new^0 == 0 /\ -wntext^post9+wntext^0 == 0 /\ -delta^post9+delta^0 == 0 /\ -__disjvr_0^post9+__disjvr_0^0 == 0 /\ -deltext^post9+deltext^0 == 0 /\ wnt^0-wnt^post9 == 0 /\ 3+wnt^0-2*deltaext^0 <= 0), cost: 1
	
	Propagated Equalities

	Original rule:
	l1 -> l4 : __disjvr_0^0'=__disjvr_0^post9, __disjvr_1^0'=__disjvr_1^post9, delta^0'=delta^post9, delta_new^0'=delta_new^post9, deltaext^0'=deltaext^post9, deltaext_new^0'=deltaext_new^post9, deltext^0'=deltext^post9, wnt^0'=wnt^post9, wntext^0'=wntext^post9, (deltaext^0-deltaext^post9 == 0 /\ __disjvr_1^0-__disjvr_1^post9 == 0 /\ -deltaext^0+deltaext_new^post9 == 0 /\ -3-wnt^0+2*deltaext^0 <= 0 /\ -3-wnt^0+2*deltaext^0 == 0 /\ -delta_new^post9+delta_new^0 == 0 /\ -wntext^post9+wntext^0 == 0 /\ -delta^post9+delta^0 == 0 /\ -__disjvr_0^post9+__disjvr_0^0 == 0 /\ -deltext^post9+deltext^0 == 0 /\ wnt^0-wnt^post9 == 0 /\ 3+wnt^0-2*deltaext^0 <= 0), cost: 1
	New rule:
	l1 -> l4 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta^0, delta_new^0'=delta_new^0, deltaext^0'=deltaext^0, deltaext_new^0'=deltaext^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, (0 == 0 /\ -3-wnt^0+2*deltaext^0 <= 0 /\ -3-wnt^0+2*deltaext^0 == 0 /\ 3+wnt^0-2*deltaext^0 <= 0), cost: 1
	
		propagated equality deltaext^post9 = deltaext^0
		
		propagated equality __disjvr_1^post9 = __disjvr_1^0
		
		propagated equality deltaext_new^post9 = deltaext^0
		
		propagated equality delta_new^post9 = delta_new^0
		
		propagated equality wntext^post9 = wntext^0
		
		propagated equality delta^post9 = delta^0
		
		propagated equality __disjvr_0^post9 = __disjvr_0^0
		
		propagated equality deltext^post9 = deltext^0
		
		propagated equality wnt^post9 = wnt^0
		
	Simplified Guard

	Original rule:
	l1 -> l4 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta^0, delta_new^0'=delta_new^0, deltaext^0'=deltaext^0, deltaext_new^0'=deltaext^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, (0 == 0 /\ -3-wnt^0+2*deltaext^0 <= 0 /\ -3-wnt^0+2*deltaext^0 == 0 /\ 3+wnt^0-2*deltaext^0 <= 0), cost: 1
	New rule:
	l1 -> l4 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta^0, delta_new^0'=delta_new^0, deltaext^0'=deltaext^0, deltaext_new^0'=deltaext^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, (-3-wnt^0+2*deltaext^0 <= 0 /\ -3-wnt^0+2*deltaext^0 == 0 /\ 3+wnt^0-2*deltaext^0 <= 0), cost: 1
	
	made implied equalities explicit

	Original rule:
	l1 -> l4 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta^0, delta_new^0'=delta_new^0, deltaext^0'=deltaext^0, deltaext_new^0'=deltaext^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, (-3-wnt^0+2*deltaext^0 <= 0 /\ -3-wnt^0+2*deltaext^0 == 0 /\ 3+wnt^0-2*deltaext^0 <= 0), cost: 1
	New rule:
	l1 -> l4 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta^0, delta_new^0'=delta_new^0, deltaext^0'=deltaext^0, deltaext_new^0'=deltaext^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, (-3-wnt^0+2*deltaext^0 <= 0 /\ -3-wnt^0+2*deltaext^0 == 0 /\ 3+wnt^0-2*deltaext^0 <= 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	l1 -> l4 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta^0, delta_new^0'=delta_new^0, deltaext^0'=deltaext^0, deltaext_new^0'=deltaext^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, (-3-wnt^0+2*deltaext^0 <= 0 /\ -3-wnt^0+2*deltaext^0 == 0 /\ 3+wnt^0-2*deltaext^0 <= 0), cost: 1
	New rule:
	l1 -> l4 : deltaext_new^0'=deltaext^0, (-3-wnt^0+2*deltaext^0 <= 0 /\ -3-wnt^0+2*deltaext^0 == 0 /\ 3+wnt^0-2*deltaext^0 <= 0), cost: 1
	
	made implied equalities explicit

	Original rule:
	l1 -> l4 : __disjvr_0^0'=__disjvr_0^post10, __disjvr_1^0'=__disjvr_1^post10, delta^0'=delta^post10, delta_new^0'=delta_new^post10, deltaext^0'=deltaext^post10, deltaext_new^0'=deltaext_new^post10, deltext^0'=deltext^post10, wnt^0'=wnt^post10, wntext^0'=wntext^post10, (wnt^0-wnt^post10 == 0 /\ -2-wnt^0+2*deltaext^0 <= 0 /\ deltext^0-deltext^post10 == 0 /\ deltaext^0-deltaext^post10 == 0 /\ -delta^post10+delta^0 == 0 /\ -deltaext^0+deltaext_new^post10 == 0 /\ delta_new^0-delta_new^post10 == 0 /\ -wntext^post10+wntext^0 == 0 /\ -__disjvr_0^post10+__disjvr_0^0 == 0 /\ 2+wnt^0-2*deltaext^0 <= 0 /\ __disjvr_1^0-__disjvr_1^post10 == 0), cost: 1
	New rule:
	l1 -> l4 : __disjvr_0^0'=__disjvr_0^post10, __disjvr_1^0'=__disjvr_1^post10, delta^0'=delta^post10, delta_new^0'=delta_new^post10, deltaext^0'=deltaext^post10, deltaext_new^0'=deltaext_new^post10, deltext^0'=deltext^post10, wnt^0'=wnt^post10, wntext^0'=wntext^post10, (wnt^0-wnt^post10 == 0 /\ -2-wnt^0+2*deltaext^0 <= 0 /\ -2-wnt^0+2*deltaext^0 == 0 /\ deltext^0-deltext^post10 == 0 /\ deltaext^0-deltaext^post10 == 0 /\ -delta^post10+delta^0 == 0 /\ -deltaext^0+deltaext_new^post10 == 0 /\ delta_new^0-delta_new^post10 == 0 /\ -wntext^post10+wntext^0 == 0 /\ -__disjvr_0^post10+__disjvr_0^0 == 0 /\ 2+wnt^0-2*deltaext^0 <= 0 /\ __disjvr_1^0-__disjvr_1^post10 == 0), cost: 1
	
	Propagated Equalities

	Original rule:
	l1 -> l4 : __disjvr_0^0'=__disjvr_0^post10, __disjvr_1^0'=__disjvr_1^post10, delta^0'=delta^post10, delta_new^0'=delta_new^post10, deltaext^0'=deltaext^post10, deltaext_new^0'=deltaext_new^post10, deltext^0'=deltext^post10, wnt^0'=wnt^post10, wntext^0'=wntext^post10, (wnt^0-wnt^post10 == 0 /\ -2-wnt^0+2*deltaext^0 <= 0 /\ -2-wnt^0+2*deltaext^0 == 0 /\ deltext^0-deltext^post10 == 0 /\ deltaext^0-deltaext^post10 == 0 /\ -delta^post10+delta^0 == 0 /\ -deltaext^0+deltaext_new^post10 == 0 /\ delta_new^0-delta_new^post10 == 0 /\ -wntext^post10+wntext^0 == 0 /\ -__disjvr_0^post10+__disjvr_0^0 == 0 /\ 2+wnt^0-2*deltaext^0 <= 0 /\ __disjvr_1^0-__disjvr_1^post10 == 0), cost: 1
	New rule:
	l1 -> l4 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta^0, delta_new^0'=delta_new^0, deltaext^0'=deltaext^0, deltaext_new^0'=deltaext^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, (0 == 0 /\ -2-wnt^0+2*deltaext^0 <= 0 /\ -2-wnt^0+2*deltaext^0 == 0 /\ 2+wnt^0-2*deltaext^0 <= 0), cost: 1
	
		propagated equality wnt^post10 = wnt^0
		
		propagated equality deltext^post10 = deltext^0
		
		propagated equality deltaext^post10 = deltaext^0
		
		propagated equality delta^post10 = delta^0
		
		propagated equality deltaext_new^post10 = deltaext^0
		
		propagated equality delta_new^post10 = delta_new^0
		
		propagated equality wntext^post10 = wntext^0
		
		propagated equality __disjvr_0^post10 = __disjvr_0^0
		
		propagated equality __disjvr_1^post10 = __disjvr_1^0
		
	Simplified Guard

	Original rule:
	l1 -> l4 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta^0, delta_new^0'=delta_new^0, deltaext^0'=deltaext^0, deltaext_new^0'=deltaext^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, (0 == 0 /\ -2-wnt^0+2*deltaext^0 <= 0 /\ -2-wnt^0+2*deltaext^0 == 0 /\ 2+wnt^0-2*deltaext^0 <= 0), cost: 1
	New rule:
	l1 -> l4 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta^0, delta_new^0'=delta_new^0, deltaext^0'=deltaext^0, deltaext_new^0'=deltaext^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, (-2-wnt^0+2*deltaext^0 <= 0 /\ -2-wnt^0+2*deltaext^0 == 0 /\ 2+wnt^0-2*deltaext^0 <= 0), cost: 1
	
	made implied equalities explicit

	Original rule:
	l1 -> l4 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta^0, delta_new^0'=delta_new^0, deltaext^0'=deltaext^0, deltaext_new^0'=deltaext^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, (-2-wnt^0+2*deltaext^0 <= 0 /\ -2-wnt^0+2*deltaext^0 == 0 /\ 2+wnt^0-2*deltaext^0 <= 0), cost: 1
	New rule:
	l1 -> l4 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta^0, delta_new^0'=delta_new^0, deltaext^0'=deltaext^0, deltaext_new^0'=deltaext^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, (-2-wnt^0+2*deltaext^0 <= 0 /\ -2-wnt^0+2*deltaext^0 == 0 /\ 2+wnt^0-2*deltaext^0 <= 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	l1 -> l4 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta^0, delta_new^0'=delta_new^0, deltaext^0'=deltaext^0, deltaext_new^0'=deltaext^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, (-2-wnt^0+2*deltaext^0 <= 0 /\ -2-wnt^0+2*deltaext^0 == 0 /\ 2+wnt^0-2*deltaext^0 <= 0), cost: 1
	New rule:
	l1 -> l4 : deltaext_new^0'=deltaext^0, (-2-wnt^0+2*deltaext^0 <= 0 /\ -2-wnt^0+2*deltaext^0 == 0 /\ 2+wnt^0-2*deltaext^0 <= 0), cost: 1
	
	Propagated Equalities

	Original rule:
	l1 -> l4 : __disjvr_0^0'=__disjvr_0^post11, __disjvr_1^0'=__disjvr_1^post11, delta^0'=delta^post11, delta_new^0'=delta_new^post11, deltaext^0'=deltaext^post11, deltaext_new^0'=deltaext_new^post11, deltext^0'=deltext^post11, wnt^0'=wnt^post11, wntext^0'=wntext^post11, (4+wnt^0-2*deltaext^0 <= 0 /\ 1-deltaext^0+deltaext_new^post11 == 0 /\ -__disjvr_1^post11+__disjvr_1^0 == 0 /\ -wnt^post11+wnt^0 == 0 /\ deltext^0-deltext^post11 == 0 /\ -__disjvr_0^post11+__disjvr_0^0 == 0 /\ deltaext^0-deltaext^post11 == 0 /\ delta_new^0-delta_new^post11 == 0 /\ -wntext^post11+wntext^0 == 0 /\ -delta^post11+delta^0 == 0), cost: 1
	New rule:
	l1 -> l4 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta^0, delta_new^0'=delta_new^0, deltaext^0'=deltaext^0, deltaext_new^0'=-1+deltaext^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, (0 == 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 1
	
		propagated equality deltaext_new^post11 = -1+deltaext^0
		
		propagated equality __disjvr_1^post11 = __disjvr_1^0
		
		propagated equality wnt^post11 = wnt^0
		
		propagated equality deltext^post11 = deltext^0
		
		propagated equality __disjvr_0^post11 = __disjvr_0^0
		
		propagated equality deltaext^post11 = deltaext^0
		
		propagated equality delta_new^post11 = delta_new^0
		
		propagated equality wntext^post11 = wntext^0
		
		propagated equality delta^post11 = delta^0
		
	Simplified Guard

	Original rule:
	l1 -> l4 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta^0, delta_new^0'=delta_new^0, deltaext^0'=deltaext^0, deltaext_new^0'=-1+deltaext^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, (0 == 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 1
	New rule:
	l1 -> l4 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta^0, delta_new^0'=delta_new^0, deltaext^0'=deltaext^0, deltaext_new^0'=-1+deltaext^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, 4+wnt^0-2*deltaext^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l1 -> l4 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta^0, delta_new^0'=delta_new^0, deltaext^0'=deltaext^0, deltaext_new^0'=-1+deltaext^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, 4+wnt^0-2*deltaext^0 <= 0, cost: 1
	New rule:
	l1 -> l4 : deltaext_new^0'=-1+deltaext^0, 4+wnt^0-2*deltaext^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l1 -> l4 : __disjvr_0^0'=__disjvr_0^post12, __disjvr_1^0'=__disjvr_1^post12, delta^0'=delta^post12, delta_new^0'=delta_new^post12, deltaext^0'=deltaext^post12, deltaext_new^0'=deltaext_new^post12, deltext^0'=deltext^post12, wnt^0'=wnt^post12, wntext^0'=wntext^post12, (-__disjvr_0^post12+__disjvr_0^0 == 0 /\ -1-deltaext^0+deltaext_new^post12 == 0 /\ deltaext^0-deltaext^post12 == 0 /\ delta_new^0-delta_new^post12 == 0 /\ wnt^0-wnt^post12 == 0 /\ -1-wnt^0+2*deltaext^0 <= 0 /\ -wntext^post12+wntext^0 == 0 /\ -__disjvr_1^post12+__disjvr_1^0 == 0 /\ -delta^post12+delta^0 == 0 /\ deltext^0-deltext^post12 == 0), cost: 1
	New rule:
	l1 -> l4 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta^0, delta_new^0'=delta_new^0, deltaext^0'=deltaext^0, deltaext_new^0'=1+deltaext^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, (0 == 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 1
	
		propagated equality __disjvr_0^post12 = __disjvr_0^0
		
		propagated equality deltaext_new^post12 = 1+deltaext^0
		
		propagated equality deltaext^post12 = deltaext^0
		
		propagated equality delta_new^post12 = delta_new^0
		
		propagated equality wnt^post12 = wnt^0
		
		propagated equality wntext^post12 = wntext^0
		
		propagated equality __disjvr_1^post12 = __disjvr_1^0
		
		propagated equality delta^post12 = delta^0
		
		propagated equality deltext^post12 = deltext^0
		
	Simplified Guard

	Original rule:
	l1 -> l4 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta^0, delta_new^0'=delta_new^0, deltaext^0'=deltaext^0, deltaext_new^0'=1+deltaext^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, (0 == 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 1
	New rule:
	l1 -> l4 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta^0, delta_new^0'=delta_new^0, deltaext^0'=deltaext^0, deltaext_new^0'=1+deltaext^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, -1-wnt^0+2*deltaext^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l1 -> l4 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta^0, delta_new^0'=delta_new^0, deltaext^0'=deltaext^0, deltaext_new^0'=1+deltaext^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, -1-wnt^0+2*deltaext^0 <= 0, cost: 1
	New rule:
	l1 -> l4 : deltaext_new^0'=1+deltaext^0, -1-wnt^0+2*deltaext^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l6 -> l1 : __disjvr_0^0'=__disjvr_0^post13, __disjvr_1^0'=__disjvr_1^post13, delta^0'=delta^post13, delta_new^0'=delta_new^post13, deltaext^0'=deltaext^post13, deltaext_new^0'=deltaext_new^post13, deltext^0'=deltext^post13, wnt^0'=wnt^post13, wntext^0'=wntext^post13, (deltext^post14-deltext^post13 == 0 /\ delta_new^post14-delta_new^post13 == 0 /\ -delta^post14+delta^0 == 0 /\ deltaext_new^post14-deltaext_new^post13 == 0 /\ -delta_new^post14+delta_new^0 == 0 /\ -wntext^post14 <= 0 /\ deltaext^0-deltaext^post14 == 0 /\ -deltaext_new^post14+deltaext_new^0 == 0 /\ wntext^post14-wntext^post13 == 0 /\ -delta^post14 <= 0 /\ delta^post14-delta^post13 == 0 /\ -3+wnt^post14 <= 0 /\ __disjvr_1^0-__disjvr_1^post14 == 0 /\ -3+wntext^post14 <= 0 /\ -__disjvr_0^post14+__disjvr_0^0 == 0 /\ -__disjvr_1^post13+__disjvr_1^post14 == 0 /\ __disjvr_0^post14-__disjvr_0^post13 == 0 /\ -deltaext^post13+deltaext^post14 == 0 /\ -deltaext^post14 <= 0 /\ -wnt^post14 <= 0 /\ wnt^0-wnt^post14 == 0 /\ -3+delta^post14 <= 0 /\ -3+deltext^post14 <= 0 /\ -wntext^post14+wntext^0 == 0 /\ wnt^post14-wnt^post13 == 0 /\ deltext^0-deltext^post14 == 0), cost: 1
	New rule:
	l6 -> l1 : __disjvr_0^0'=__disjvr_0^post14, __disjvr_1^0'=__disjvr_1^post14, delta^0'=delta^post14, delta_new^0'=delta_new^post14, deltaext^0'=deltaext^post14, deltaext_new^0'=deltaext_new^post14, deltext^0'=deltext^post14, wnt^0'=wnt^post14, wntext^0'=wntext^post14, (0 == 0 /\ -delta^post14+delta^0 == 0 /\ -delta_new^post14+delta_new^0 == 0 /\ -wntext^post14 <= 0 /\ deltaext^0-deltaext^post14 == 0 /\ -deltaext_new^post14+deltaext_new^0 == 0 /\ -delta^post14 <= 0 /\ -3+wnt^post14 <= 0 /\ __disjvr_1^0-__disjvr_1^post14 == 0 /\ -3+wntext^post14 <= 0 /\ -__disjvr_0^post14+__disjvr_0^0 == 0 /\ -deltaext^post14 <= 0 /\ -wnt^post14 <= 0 /\ wnt^0-wnt^post14 == 0 /\ -3+delta^post14 <= 0 /\ -3+deltext^post14 <= 0 /\ -wntext^post14+wntext^0 == 0 /\ deltext^0-deltext^post14 == 0), cost: 1
	
		propagated equality deltext^post13 = deltext^post14
		
		propagated equality delta_new^post13 = delta_new^post14
		
		propagated equality deltaext_new^post13 = deltaext_new^post14
		
		propagated equality wntext^post13 = wntext^post14
		
		propagated equality delta^post13 = delta^post14
		
		propagated equality __disjvr_1^post13 = __disjvr_1^post14
		
		propagated equality __disjvr_0^post13 = __disjvr_0^post14
		
		propagated equality deltaext^post13 = deltaext^post14
		
		propagated equality wnt^post13 = wnt^post14
		
	Propagated Equalities

	Original rule:
	l6 -> l1 : __disjvr_0^0'=__disjvr_0^post14, __disjvr_1^0'=__disjvr_1^post14, delta^0'=delta^post14, delta_new^0'=delta_new^post14, deltaext^0'=deltaext^post14, deltaext_new^0'=deltaext_new^post14, deltext^0'=deltext^post14, wnt^0'=wnt^post14, wntext^0'=wntext^post14, (0 == 0 /\ -delta^post14+delta^0 == 0 /\ -delta_new^post14+delta_new^0 == 0 /\ -wntext^post14 <= 0 /\ deltaext^0-deltaext^post14 == 0 /\ -deltaext_new^post14+deltaext_new^0 == 0 /\ -delta^post14 <= 0 /\ -3+wnt^post14 <= 0 /\ __disjvr_1^0-__disjvr_1^post14 == 0 /\ -3+wntext^post14 <= 0 /\ -__disjvr_0^post14+__disjvr_0^0 == 0 /\ -deltaext^post14 <= 0 /\ -wnt^post14 <= 0 /\ wnt^0-wnt^post14 == 0 /\ -3+delta^post14 <= 0 /\ -3+deltext^post14 <= 0 /\ -wntext^post14+wntext^0 == 0 /\ deltext^0-deltext^post14 == 0), cost: 1
	New rule:
	l6 -> l1 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta^0, delta_new^0'=delta_new^0, deltaext^0'=deltaext^0, deltaext_new^0'=deltaext_new^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, (0 == 0 /\ -3+delta^0 <= 0 /\ -3+deltext^0 <= 0 /\ -wnt^0 <= 0 /\ -deltaext^0 <= 0 /\ -wntext^0 <= 0 /\ -3+wntext^0 <= 0 /\ -delta^0 <= 0 /\ -3+wnt^0 <= 0), cost: 1
	
		propagated equality delta^post14 = delta^0
		
		propagated equality delta_new^post14 = delta_new^0
		
		propagated equality deltaext^post14 = deltaext^0
		
		propagated equality deltaext_new^post14 = deltaext_new^0
		
		propagated equality __disjvr_1^post14 = __disjvr_1^0
		
		propagated equality __disjvr_0^post14 = __disjvr_0^0
		
		propagated equality wnt^post14 = wnt^0
		
		propagated equality wntext^post14 = wntext^0
		
		propagated equality deltext^post14 = deltext^0
		
	Simplified Guard

	Original rule:
	l6 -> l1 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta^0, delta_new^0'=delta_new^0, deltaext^0'=deltaext^0, deltaext_new^0'=deltaext_new^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, (0 == 0 /\ -3+delta^0 <= 0 /\ -3+deltext^0 <= 0 /\ -wnt^0 <= 0 /\ -deltaext^0 <= 0 /\ -wntext^0 <= 0 /\ -3+wntext^0 <= 0 /\ -delta^0 <= 0 /\ -3+wnt^0 <= 0), cost: 1
	New rule:
	l6 -> l1 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta^0, delta_new^0'=delta_new^0, deltaext^0'=deltaext^0, deltaext_new^0'=deltaext_new^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, (-3+delta^0 <= 0 /\ -3+deltext^0 <= 0 /\ -wnt^0 <= 0 /\ -deltaext^0 <= 0 /\ -wntext^0 <= 0 /\ -3+wntext^0 <= 0 /\ -delta^0 <= 0 /\ -3+wnt^0 <= 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	l6 -> l1 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta^0, delta_new^0'=delta_new^0, deltaext^0'=deltaext^0, deltaext_new^0'=deltaext_new^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, (-3+delta^0 <= 0 /\ -3+deltext^0 <= 0 /\ -wnt^0 <= 0 /\ -deltaext^0 <= 0 /\ -wntext^0 <= 0 /\ -3+wntext^0 <= 0 /\ -delta^0 <= 0 /\ -3+wnt^0 <= 0), cost: 1
	New rule:
	l6 -> l1 : (-3+delta^0 <= 0 /\ -3+deltext^0 <= 0 /\ -wnt^0 <= 0 /\ -deltaext^0 <= 0 /\ -wntext^0 <= 0 /\ -3+wntext^0 <= 0 /\ -delta^0 <= 0 /\ -3+wnt^0 <= 0), cost: 1
	
	Propagated Equalities

	Original rule:
	l0 -> l1 : __disjvr_0^0'=__disjvr_0^post2, __disjvr_1^0'=__disjvr_1^post2, delta^0'=delta^post2, delta_new^0'=delta_new^post2, deltaext^0'=deltaext^post2, deltaext_new^0'=deltaext_new^post2, deltext^0'=deltext^post2, wnt^0'=wnt^post2, wntext^0'=wntext^post2, (__disjvr_0^post1-__disjvr_0^0 == 0 /\ -delta_new^post2+delta_new^post1 == 0 /\ deltaext_new^post1-deltaext_new^post2 == 0 /\ deltaext^0-deltaext^post1 == 0 /\ -__disjvr_1^post2+__disjvr_1^post1 == 0 /\ -__disjvr_0^post1+__disjvr_0^0 == 0 /\ delta_new^0-delta_new^post1 == 0 /\ -deltaext_new^post1+deltaext_new^0 == 0 /\ wntext^post1-wntext^post2 == 0 /\ -wnt^post2+wnt^post1 == 0 /\ -deltext^post2+deltext^post1 == 0 /\ -delta_new^post1+delta^post2 == 0 /\ __disjvr_1^0-__disjvr_1^post1 == 0 /\ wnt^0-wnt^post1 == 0 /\ -wntext^post1+wntext^0 == 0 /\ -__disjvr_0^post2+__disjvr_0^post1 == 0 /\ -delta^post1+delta^0 == 0 /\ deltext^0-deltext^post1 == 0 /\ -deltaext_new^post1+deltaext^post2 == 0), cost: 1
	New rule:
	l0 -> l1 : __disjvr_0^0'=__disjvr_0^post1, __disjvr_1^0'=__disjvr_1^post1, delta^0'=delta_new^post1, delta_new^0'=delta_new^post1, deltaext^0'=deltaext_new^post1, deltaext_new^0'=deltaext_new^post1, deltext^0'=deltext^post1, wnt^0'=wnt^post1, wntext^0'=wntext^post1, (0 == 0 /\ __disjvr_0^post1-__disjvr_0^0 == 0 /\ deltaext^0-deltaext^post1 == 0 /\ -__disjvr_0^post1+__disjvr_0^0 == 0 /\ delta_new^0-delta_new^post1 == 0 /\ -deltaext_new^post1+deltaext_new^0 == 0 /\ __disjvr_1^0-__disjvr_1^post1 == 0 /\ wnt^0-wnt^post1 == 0 /\ -wntext^post1+wntext^0 == 0 /\ -delta^post1+delta^0 == 0 /\ deltext^0-deltext^post1 == 0), cost: 1
	
		propagated equality delta_new^post2 = delta_new^post1
		
		propagated equality deltaext_new^post2 = deltaext_new^post1
		
		propagated equality __disjvr_1^post2 = __disjvr_1^post1
		
		propagated equality wntext^post2 = wntext^post1
		
		propagated equality wnt^post2 = wnt^post1
		
		propagated equality deltext^post2 = deltext^post1
		
		propagated equality delta^post2 = delta_new^post1
		
		propagated equality __disjvr_0^post2 = __disjvr_0^post1
		
		propagated equality deltaext^post2 = deltaext_new^post1
		
	Propagated Equalities

	Original rule:
	l0 -> l1 : __disjvr_0^0'=__disjvr_0^post1, __disjvr_1^0'=__disjvr_1^post1, delta^0'=delta_new^post1, delta_new^0'=delta_new^post1, deltaext^0'=deltaext_new^post1, deltaext_new^0'=deltaext_new^post1, deltext^0'=deltext^post1, wnt^0'=wnt^post1, wntext^0'=wntext^post1, (0 == 0 /\ __disjvr_0^post1-__disjvr_0^0 == 0 /\ deltaext^0-deltaext^post1 == 0 /\ -__disjvr_0^post1+__disjvr_0^0 == 0 /\ delta_new^0-delta_new^post1 == 0 /\ -deltaext_new^post1+deltaext_new^0 == 0 /\ __disjvr_1^0-__disjvr_1^post1 == 0 /\ wnt^0-wnt^post1 == 0 /\ -wntext^post1+wntext^0 == 0 /\ -delta^post1+delta^0 == 0 /\ deltext^0-deltext^post1 == 0), cost: 1
	New rule:
	l0 -> l1 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta_new^0, delta_new^0'=delta_new^0, deltaext^0'=deltaext_new^0, deltaext_new^0'=deltaext_new^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, 0 == 0, cost: 1
	
		propagated equality __disjvr_0^post1 = __disjvr_0^0
		
		propagated equality deltaext^post1 = deltaext^0
		
		propagated equality delta_new^post1 = delta_new^0
		
		propagated equality deltaext_new^post1 = deltaext_new^0
		
		propagated equality __disjvr_1^post1 = __disjvr_1^0
		
		propagated equality wnt^post1 = wnt^0
		
		propagated equality wntext^post1 = wntext^0
		
		propagated equality delta^post1 = delta^0
		
		propagated equality deltext^post1 = deltext^0
		
	Simplified Guard

	Original rule:
	l0 -> l1 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta_new^0, delta_new^0'=delta_new^0, deltaext^0'=deltaext_new^0, deltaext_new^0'=deltaext_new^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, 0 == 0, cost: 1
	New rule:
	l0 -> l1 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta_new^0, delta_new^0'=delta_new^0, deltaext^0'=deltaext_new^0, deltaext_new^0'=deltaext_new^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l1 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta_new^0, delta_new^0'=delta_new^0, deltaext^0'=deltaext_new^0, deltaext_new^0'=deltaext_new^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, T, cost: 1
	New rule:
	l0 -> l1 : delta^0'=delta_new^0, deltaext^0'=deltaext_new^0, T, cost: 1
	
	Propagated Equalities

	Original rule:
	l0 -> l1 : __disjvr_0^0'=__disjvr_0^post4, __disjvr_1^0'=__disjvr_1^post4, delta^0'=delta^post4, delta_new^0'=delta_new^post4, deltaext^0'=deltaext^post4, deltaext_new^0'=deltaext_new^post4, deltext^0'=deltext^post4, wnt^0'=wnt^post4, wntext^0'=wntext^post4, (deltext^0-deltext^post3 == 0 /\ -wnt^post4+wnt^post3 == 0 /\ -delta_new^post3+delta_new^0 == 0 /\ -delta^post3+delta^0 == 0 /\ -deltaext_new^post3+deltaext_new^0 == 0 /\ -delta_new^post3+delta^post4 == 0 /\ -deltaext_new^post4+deltaext_new^post3 == 0 /\ deltaext^0-deltaext^post3 == 0 /\ wnt^0-wnt^post3 == 0 /\ -wntext^post3+wntext^0 == 0 /\ __disjvr_1^0-__disjvr_1^post3 == 0 /\ delta_new^post3-delta_new^post4 == 0 /\ -deltext^post4+deltext^post3 == 0 /\ -wntext^post4+wntext^post3 == 0 /\ -__disjvr_0^post3+__disjvr_0^0 == 0 /\ deltaext^post4-deltaext_new^post3 == 0 /\ -__disjvr_1^post4+__disjvr_1^post3 == 0 /\ -__disjvr_1^0+__disjvr_1^post3 == 0 /\ __disjvr_0^post3-__disjvr_0^post4 == 0), cost: 1
	New rule:
	l0 -> l1 : __disjvr_0^0'=__disjvr_0^post3, __disjvr_1^0'=__disjvr_1^post3, delta^0'=delta_new^post3, delta_new^0'=delta_new^post3, deltaext^0'=deltaext_new^post3, deltaext_new^0'=deltaext_new^post3, deltext^0'=deltext^post3, wnt^0'=wnt^post3, wntext^0'=wntext^post3, (0 == 0 /\ deltext^0-deltext^post3 == 0 /\ -delta_new^post3+delta_new^0 == 0 /\ -delta^post3+delta^0 == 0 /\ -deltaext_new^post3+deltaext_new^0 == 0 /\ deltaext^0-deltaext^post3 == 0 /\ wnt^0-wnt^post3 == 0 /\ -wntext^post3+wntext^0 == 0 /\ __disjvr_1^0-__disjvr_1^post3 == 0 /\ -__disjvr_0^post3+__disjvr_0^0 == 0 /\ -__disjvr_1^0+__disjvr_1^post3 == 0), cost: 1
	
		propagated equality wnt^post4 = wnt^post3
		
		propagated equality delta^post4 = delta_new^post3
		
		propagated equality deltaext_new^post4 = deltaext_new^post3
		
		propagated equality delta_new^post4 = delta_new^post3
		
		propagated equality deltext^post4 = deltext^post3
		
		propagated equality wntext^post4 = wntext^post3
		
		propagated equality deltaext^post4 = deltaext_new^post3
		
		propagated equality __disjvr_1^post4 = __disjvr_1^post3
		
		propagated equality __disjvr_0^post4 = __disjvr_0^post3
		
	Propagated Equalities

	Original rule:
	l0 -> l1 : __disjvr_0^0'=__disjvr_0^post3, __disjvr_1^0'=__disjvr_1^post3, delta^0'=delta_new^post3, delta_new^0'=delta_new^post3, deltaext^0'=deltaext_new^post3, deltaext_new^0'=deltaext_new^post3, deltext^0'=deltext^post3, wnt^0'=wnt^post3, wntext^0'=wntext^post3, (0 == 0 /\ deltext^0-deltext^post3 == 0 /\ -delta_new^post3+delta_new^0 == 0 /\ -delta^post3+delta^0 == 0 /\ -deltaext_new^post3+deltaext_new^0 == 0 /\ deltaext^0-deltaext^post3 == 0 /\ wnt^0-wnt^post3 == 0 /\ -wntext^post3+wntext^0 == 0 /\ __disjvr_1^0-__disjvr_1^post3 == 0 /\ -__disjvr_0^post3+__disjvr_0^0 == 0 /\ -__disjvr_1^0+__disjvr_1^post3 == 0), cost: 1
	New rule:
	l0 -> l1 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta_new^0, delta_new^0'=delta_new^0, deltaext^0'=deltaext_new^0, deltaext_new^0'=deltaext_new^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, 0 == 0, cost: 1
	
		propagated equality deltext^post3 = deltext^0
		
		propagated equality delta_new^post3 = delta_new^0
		
		propagated equality delta^post3 = delta^0
		
		propagated equality deltaext_new^post3 = deltaext_new^0
		
		propagated equality deltaext^post3 = deltaext^0
		
		propagated equality wnt^post3 = wnt^0
		
		propagated equality wntext^post3 = wntext^0
		
		propagated equality __disjvr_1^post3 = __disjvr_1^0
		
		propagated equality __disjvr_0^post3 = __disjvr_0^0
		
	Simplified Guard

	Original rule:
	l0 -> l1 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta_new^0, delta_new^0'=delta_new^0, deltaext^0'=deltaext_new^0, deltaext_new^0'=deltaext_new^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, 0 == 0, cost: 1
	New rule:
	l0 -> l1 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta_new^0, delta_new^0'=delta_new^0, deltaext^0'=deltaext_new^0, deltaext_new^0'=deltaext_new^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l1 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, delta^0'=delta_new^0, delta_new^0'=delta_new^0, deltaext^0'=deltaext_new^0, deltaext_new^0'=deltaext_new^0, deltext^0'=deltext^0, wnt^0'=wnt^0, wntext^0'=wntext^0, T, cost: 1
	New rule:
	l0 -> l1 : delta^0'=delta_new^0, deltaext^0'=deltaext_new^0, T, cost: 1

Step with 25

	Trace

	25[(-3+delta^0 <= 0 /\ -3+deltext^0 <= 0 /\ -wnt^0 <= 0 /\ -deltaext^0 <= 0 /\ -wntext^0 <= 0 /\ -3+wntext^0 <= 0 /\ -delta^0 <= 0 /\ -3+wnt^0 <= 0)]
	
	Blocked

	[{}, {}]

Step with 21

	Trace

	25[(-3+delta^0 <= 0 /\ -3+deltext^0 <= 0 /\ -wnt^0 <= 0 /\ -deltaext^0 <= 0 /\ -wntext^0 <= 0 /\ -3+wntext^0 <= 0 /\ -delta^0 <= 0 /\ -3+wnt^0 <= 0)], 21[(-3-wnt^0+2*deltaext^0 <= 0 /\ -3-wnt^0+2*deltaext^0 == 0 /\ 3+wnt^0-2*deltaext^0 <= 0)]
	
	Blocked

	[{}, {}, {}]

Step with 17

	Trace

	25[(-3+delta^0 <= 0 /\ -3+deltext^0 <= 0 /\ -wnt^0 <= 0 /\ -deltaext^0 <= 0 /\ -wntext^0 <= 0 /\ -3+wntext^0 <= 0 /\ -delta^0 <= 0 /\ -3+wnt^0 <= 0)], 21[(-3-wnt^0+2*deltaext^0 <= 0 /\ -3-wnt^0+2*deltaext^0 == 0 /\ 3+wnt^0-2*deltaext^0 <= 0)], 17[(-1-deltaext^0-wntext^0+2*delta^0 <= 0 /\ -1-deltaext^0-wntext^0+2*delta^0 == 0 /\ 1+deltaext^0+wntext^0-2*delta^0 <= 0)]
	
	Blocked

	[{}, {}, {}, {}]

Step with 26

	Trace

	25[(-3+delta^0 <= 0 /\ -3+deltext^0 <= 0 /\ -wnt^0 <= 0 /\ -deltaext^0 <= 0 /\ -wntext^0 <= 0 /\ -3+wntext^0 <= 0 /\ -delta^0 <= 0 /\ -3+wnt^0 <= 0)], 21[(-3-wnt^0+2*deltaext^0 <= 0 /\ -3-wnt^0+2*deltaext^0 == 0 /\ 3+wnt^0-2*deltaext^0 <= 0)], 17[(-1-deltaext^0-wntext^0+2*delta^0 <= 0 /\ -1-deltaext^0-wntext^0+2*delta^0 == 0 /\ 1+deltaext^0+wntext^0-2*delta^0 <= 0)], 26[T]
	
	Blocked

	[{}, {}, {}, {}, {}]

Nonterm

Start location: l6
Program variables: delta^0 delta_new^0 deltaext^0 deltaext_new^0 deltext^0 wnt^0 wntext^0
  26: l0 -> l1 : delta^0'=delta_new^0, deltaext^0'=deltaext_new^0, T, cost: 1
  27: l0 -> l1 : delta^0'=delta_new^0, deltaext^0'=deltaext_new^0, T, cost: 1
  21: l1 -> l4 : deltaext_new^0'=deltaext^0, (-3-wnt^0+2*deltaext^0 <= 0 /\ -3-wnt^0+2*deltaext^0 == 0 /\ 3+wnt^0-2*deltaext^0 <= 0), cost: 1
  22: l1 -> l4 : deltaext_new^0'=deltaext^0, (-2-wnt^0+2*deltaext^0 <= 0 /\ -2-wnt^0+2*deltaext^0 == 0 /\ 2+wnt^0-2*deltaext^0 <= 0), cost: 1
  23: l1 -> l4 : deltaext_new^0'=-1+deltaext^0, 4+wnt^0-2*deltaext^0 <= 0, cost: 1
  24: l1 -> l4 : deltaext_new^0'=1+deltaext^0, -1-wnt^0+2*deltaext^0 <= 0, cost: 1
  28: l1 -> LoAT_sink : (-1+n >= 0 /\ -1-deltaext^0-wntext^0+2*delta^0 >= 0 /\ 1+deltaext^0+wntext^0-2*delta^0 >= 0 /\ -3-wnt^0+2*deltaext^0 >= 0 /\ 3+wnt^0-2*deltaext^0 >= 0), cost: NONTERM
  17: l4 -> l0 : delta_new^0'=delta^0, (-1-deltaext^0-wntext^0+2*delta^0 <= 0 /\ -1-deltaext^0-wntext^0+2*delta^0 == 0 /\ 1+deltaext^0+wntext^0-2*delta^0 <= 0), cost: 1
  18: l4 -> l0 : delta_new^0'=delta^0, (deltaext^0+wntext^0-2*delta^0 <= 0 /\ deltaext^0+wntext^0-2*delta^0 == 0 /\ -deltaext^0-wntext^0+2*delta^0 <= 0), cost: 1
  19: l4 -> l0 : delta_new^0'=-1+delta^0, 2+deltaext^0+wntext^0-2*delta^0 <= 0, cost: 1
  20: l4 -> l0 : delta_new^0'=1+delta^0, 1-deltaext^0-wntext^0+2*delta^0 <= 0, cost: 1
  25: l6 -> l1 : (-3+delta^0 <= 0 /\ -3+deltext^0 <= 0 /\ -wnt^0 <= 0 /\ -deltaext^0 <= 0 /\ -wntext^0 <= 0 /\ -3+wntext^0 <= 0 /\ -delta^0 <= 0 /\ -3+wnt^0 <= 0), cost: 1

	Certificate of Non-Termination

	Original rule:
	l1 -> l1 : delta_new^0'=delta^0, deltaext_new^0'=deltaext^0, (-1-deltaext^0-wntext^0+2*delta^0 <= 0 /\ -1-deltaext^0-wntext^0+2*delta^0 == 0 /\ 1+deltaext^0+wntext^0-2*delta^0 <= 0 /\ -3-wnt^0+2*deltaext^0 <= 0 /\ -3-wnt^0+2*deltaext^0 == 0 /\ 3+wnt^0-2*deltaext^0 <= 0), cost: 1
	New rule:
	l1 -> LoAT_sink : (-1+n >= 0 /\ -1-deltaext^0-wntext^0+2*delta^0 >= 0 /\ 1+deltaext^0+wntext^0-2*delta^0 >= 0 /\ -3-wnt^0+2*deltaext^0 >= 0 /\ 3+wnt^0-2*deltaext^0 >= 0), cost: NONTERM

		-1-deltaext^0-wntext^0+2*delta^0 >= 0 [0]: monotonic increase yields -1-deltaext^0-wntext^0+2*delta^0 >= 0
		
		1+deltaext^0+wntext^0-2*delta^0 >= 0 [0]: monotonic increase yields 1+deltaext^0+wntext^0-2*delta^0 >= 0
		
		-3-wnt^0+2*deltaext^0 >= 0 [0]: monotonic increase yields -3-wnt^0+2*deltaext^0 >= 0
		
		3+wnt^0-2*deltaext^0 >= 0 [0]: monotonic increase yields 3+wnt^0-2*deltaext^0 >= 0
		
		Replacement map: {-1-deltaext^0-wntext^0+2*delta^0 >= 0 -> -1-deltaext^0-wntext^0+2*delta^0 >= 0, 1+deltaext^0+wntext^0-2*delta^0 >= 0 -> 1+deltaext^0+wntext^0-2*delta^0 >= 0, -3-wnt^0+2*deltaext^0 >= 0 -> -3-wnt^0+2*deltaext^0 >= 0, 3+wnt^0-2*deltaext^0 >= 0 -> 3+wnt^0-2*deltaext^0 >= 0}

Step with 28

	Trace

	25[(-3+delta^0 <= 0 /\ -3+deltext^0 <= 0 /\ -wnt^0 <= 0 /\ -deltaext^0 <= 0 /\ -wntext^0 <= 0 /\ -3+wntext^0 <= 0 /\ -delta^0 <= 0 /\ -3+wnt^0 <= 0)], 28[(-1+n >= 0 /\ -1-deltaext^0-wntext^0+2*delta^0 >= 0 /\ 1+deltaext^0+wntext^0-2*delta^0 >= 0 /\ -3-wnt^0+2*deltaext^0 >= 0 /\ 3+wnt^0-2*deltaext^0 >= 0)]
	
	Blocked

	[{}, {}, {28[T]}]

Refute

	Counterexample

	[ delta^0=2 delta_new^0=0 deltaext^0=2 deltaext_new^0=0 deltext^0=0 wnt^0=1 wntext^0=1 ] 25 [ delta^0=2 delta_new^0=0 deltaext^0=2 deltaext_new^0=0 deltext^0=0 wnt^0=1 wntext^0=1 ] 28
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
