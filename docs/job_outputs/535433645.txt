WORST_CASE(Omega(0),?)

Initial ITS
Start location: __init
   0: f1_0_main_Load -> f1_0_main_Load\' : arg2'=arg2P0, arg1'=arg1P0, (-arg1P0+arg1 == 0 /\ 1+arg2 > 0 /\ 1+x20 > 0 /\ arg1 > 0 /\ arg2-arg2P0 == 0), cost: 1
   1: f1_0_main_Load\' -> f80_0_main_EQ : arg2'=arg2P1, arg1'=arg1P1, (1+arg2 > 0 /\ -arg2P1-3*x80+arg1P1 == 0 /\ arg1 > 0 /\ -3*x80+arg1P1 >= 0 /\ -3-3*x80+arg1P1 < 0 /\ 1+arg1P1 > 0), cost: 1
   2: f80_0_main_EQ -> f80_0_main_EQ\' : arg2'=arg2P2, arg1'=arg1P2, (arg2 > 0 /\ arg2-arg2P2 == 0 /\ -arg1P2+arg1 == 0), cost: 1
   3: f80_0_main_EQ\' -> f80_0_main_EQ : arg2'=arg2P3, arg1'=arg1P3, (-2-3*x110+arg1 < 0 /\ 1+arg1-arg1P3 == 0 /\ 1-3*x110+arg1 >= 0 /\ arg2 > 0 /\ 1-3*x110-arg2P3+arg1 == 0), cost: 1
   4: __init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_Load -> f1_0_main_Load\' : arg2'=arg2P0, arg1'=arg1P0, (-arg1P0+arg1 == 0 /\ 1+arg2 > 0 /\ 1+x20 > 0 /\ arg1 > 0 /\ arg2-arg2P0 == 0), cost: 1
New rule:
f1_0_main_Load -> f1_0_main_Load\' : (1+arg2 > 0 /\ arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f1_0_main_Load\' -> f80_0_main_EQ : arg2'=arg2P1, arg1'=arg1P1, (1+arg2 > 0 /\ -arg2P1-3*x80+arg1P1 == 0 /\ arg1 > 0 /\ -3*x80+arg1P1 >= 0 /\ -3-3*x80+arg1P1 < 0 /\ 1+arg1P1 > 0), cost: 1
New rule:
f1_0_main_Load\' -> f80_0_main_EQ : arg2'=-3*x80+arg1P1, arg1'=arg1P1, (1+arg2 > 0 /\ arg1 > 0 /\ -3*x80+arg1P1 >= 0 /\ 3+3*x80-arg1P1 > 0 /\ 1+arg1P1 > 0), cost: 1

Applied preprocessing
Original rule:
f80_0_main_EQ -> f80_0_main_EQ\' : arg2'=arg2P2, arg1'=arg1P2, (arg2 > 0 /\ arg2-arg2P2 == 0 /\ -arg1P2+arg1 == 0), cost: 1
New rule:
f80_0_main_EQ -> f80_0_main_EQ\' : arg2 > 0, cost: 1

Applied preprocessing
Original rule:
f80_0_main_EQ\' -> f80_0_main_EQ : arg2'=arg2P3, arg1'=arg1P3, (-2-3*x110+arg1 < 0 /\ 1+arg1-arg1P3 == 0 /\ 1-3*x110+arg1 >= 0 /\ arg2 > 0 /\ 1-3*x110-arg2P3+arg1 == 0), cost: 1
New rule:
f80_0_main_EQ\' -> f80_0_main_EQ : arg2'=1-3*x110+arg1, arg1'=1+arg1, (2+3*x110-arg1 > 0 /\ 1-3*x110+arg1 >= 0 /\ arg2 > 0), cost: 1

Simplified rules
Start location: __init
   5: f1_0_main_Load -> f1_0_main_Load\' : (1+arg2 > 0 /\ arg1 > 0), cost: 1
   6: f1_0_main_Load\' -> f80_0_main_EQ : arg2'=-3*x80+arg1P1, arg1'=arg1P1, (1+arg2 > 0 /\ arg1 > 0 /\ -3*x80+arg1P1 >= 0 /\ 3+3*x80-arg1P1 > 0 /\ 1+arg1P1 > 0), cost: 1
   7: f80_0_main_EQ -> f80_0_main_EQ\' : arg2 > 0, cost: 1
   8: f80_0_main_EQ\' -> f80_0_main_EQ : arg2'=1-3*x110+arg1, arg1'=1+arg1, (2+3*x110-arg1 > 0 /\ 1-3*x110+arg1 >= 0 /\ arg2 > 0), cost: 1
   4: __init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, TRUE, cost: 1


Eliminating location f1_0_main_Load by chaining:

Applied chaining
First rule:
__init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, TRUE, cost: 1
Second rule:
f1_0_main_Load -> f1_0_main_Load\' : (1+arg2 > 0 /\ arg1 > 0), cost: 1
New rule:
__init -> f1_0_main_Load\' : arg2'=arg2P4, arg1'=arg1P4, (arg1P4 > 0 /\ 1+arg2P4 > 0), cost: 2

Applied deletion
Removed the following rules: 4 5

Eliminating location f1_0_main_Load\' by chaining:

Applied chaining
First rule:
__init -> f1_0_main_Load\' : arg2'=arg2P4, arg1'=arg1P4, (arg1P4 > 0 /\ 1+arg2P4 > 0), cost: 2
Second rule:
f1_0_main_Load\' -> f80_0_main_EQ : arg2'=-3*x80+arg1P1, arg1'=arg1P1, (1+arg2 > 0 /\ arg1 > 0 /\ -3*x80+arg1P1 >= 0 /\ 3+3*x80-arg1P1 > 0 /\ 1+arg1P1 > 0), cost: 1
New rule:
__init -> f80_0_main_EQ : arg2'=-3*x80+arg1P1, arg1'=arg1P1, (arg1P4 > 0 /\ -3*x80+arg1P1 >= 0 /\ 3+3*x80-arg1P1 > 0 /\ 1+arg1P1 > 0 /\ 1+arg2P4 > 0), cost: 3

Applied deletion
Removed the following rules: 6 9

Eliminating location f80_0_main_EQ\' by chaining:

Applied chaining
First rule:
f80_0_main_EQ -> f80_0_main_EQ\' : arg2 > 0, cost: 1
Second rule:
f80_0_main_EQ\' -> f80_0_main_EQ : arg2'=1-3*x110+arg1, arg1'=1+arg1, (2+3*x110-arg1 > 0 /\ 1-3*x110+arg1 >= 0 /\ arg2 > 0), cost: 1
New rule:
f80_0_main_EQ -> f80_0_main_EQ : arg2'=1-3*x110+arg1, arg1'=1+arg1, (2+3*x110-arg1 > 0 /\ 1-3*x110+arg1 >= 0 /\ arg2 > 0), cost: 2

Applied deletion
Removed the following rules: 7 8

Eliminated locations on linear paths
Start location: __init
  11: f80_0_main_EQ -> f80_0_main_EQ : arg2'=1-3*x110+arg1, arg1'=1+arg1, (2+3*x110-arg1 > 0 /\ 1-3*x110+arg1 >= 0 /\ arg2 > 0), cost: 2
  10: __init -> f80_0_main_EQ : arg2'=-3*x80+arg1P1, arg1'=arg1P1, (arg1P4 > 0 /\ -3*x80+arg1P1 >= 0 /\ 3+3*x80-arg1P1 > 0 /\ 1+arg1P1 > 0 /\ 1+arg2P4 > 0), cost: 3


Applied acceleration
Original rule:
f80_0_main_EQ -> f80_0_main_EQ : arg2'=1-3*x110+arg1, arg1'=1+arg1, (2+3*x110-arg1 > 0 /\ 1-3*x110+arg1 >= 0 /\ arg2 > 0), cost: 2
New rule:
f80_0_main_EQ -> f80_0_main_EQ : arg2'=n-3*x110+arg1, arg1'=n+arg1, (1-3*x110+arg1 >= 0 /\ arg2 > 0 /\ -1+3*x110+arg2-arg1 <= 0 /\ 3-n+3*x110-arg1 > 0 /\ -1+n >= 0), cost: 2*n
Sub-proof via acceration calculus written to file:///tmp/tmpnam_gKpCop.txt

Applied instantiation
Original rule:
f80_0_main_EQ -> f80_0_main_EQ : arg2'=n-3*x110+arg1, arg1'=n+arg1, (1-3*x110+arg1 >= 0 /\ arg2 > 0 /\ -1+3*x110+arg2-arg1 <= 0 /\ 3-n+3*x110-arg1 > 0 /\ -1+n >= 0), cost: 2*n
New rule:
f80_0_main_EQ -> f80_0_main_EQ : arg2'=2, arg1'=2+3*x110, (1 > 0 /\ 1-3*x110+arg1 >= 0 /\ arg2 > 0 /\ 1+3*x110-arg1 >= 0 /\ -1+3*x110+arg2-arg1 <= 0), cost: 4+6*x110-2*arg1

Applied simplification
Original rule:
f80_0_main_EQ -> f80_0_main_EQ : arg2'=2, arg1'=2+3*x110, (1 > 0 /\ 1-3*x110+arg1 >= 0 /\ arg2 > 0 /\ 1+3*x110-arg1 >= 0 /\ -1+3*x110+arg2-arg1 <= 0), cost: 4+6*x110-2*arg1
New rule:
f80_0_main_EQ -> f80_0_main_EQ : arg2'=2, arg1'=2+3*x110, (arg2 > 0 /\ 1+3*x110-arg1 >= 0 /\ -1+3*x110+arg2-arg1 <= 0), cost: 4+6*x110-2*arg1

Applied deletion
Removed the following rules: 11

Accelerated simple loops
Start location: __init
  13: f80_0_main_EQ -> f80_0_main_EQ : arg2'=2, arg1'=2+3*x110, (arg2 > 0 /\ 1+3*x110-arg1 >= 0 /\ -1+3*x110+arg2-arg1 <= 0), cost: 4+6*x110-2*arg1
  10: __init -> f80_0_main_EQ : arg2'=-3*x80+arg1P1, arg1'=arg1P1, (arg1P4 > 0 /\ -3*x80+arg1P1 >= 0 /\ 3+3*x80-arg1P1 > 0 /\ 1+arg1P1 > 0 /\ 1+arg2P4 > 0), cost: 3


Applied chaining
First rule:
__init -> f80_0_main_EQ : arg2'=-3*x80+arg1P1, arg1'=arg1P1, (arg1P4 > 0 /\ -3*x80+arg1P1 >= 0 /\ 3+3*x80-arg1P1 > 0 /\ 1+arg1P1 > 0 /\ 1+arg2P4 > 0), cost: 3
Second rule:
f80_0_main_EQ -> f80_0_main_EQ : arg2'=2, arg1'=2+3*x110, (arg2 > 0 /\ 1+3*x110-arg1 >= 0 /\ -1+3*x110+arg2-arg1 <= 0), cost: 4+6*x110-2*arg1
New rule:
__init -> f80_0_main_EQ : arg2'=2, arg1'=2+3*x110, (-1+3*x110-3*x80 <= 0 /\ 1+3*x110-arg1P1 >= 0 /\ -3*x80+arg1P1 > 0 /\ 1+arg1P1 > 0), cost: 7+6*x110-2*arg1P1

Applied deletion
Removed the following rules: 13

Chained accelerated rules with incoming rules
Start location: __init
  10: __init -> f80_0_main_EQ : arg2'=-3*x80+arg1P1, arg1'=arg1P1, (arg1P4 > 0 /\ -3*x80+arg1P1 >= 0 /\ 3+3*x80-arg1P1 > 0 /\ 1+arg1P1 > 0 /\ 1+arg2P4 > 0), cost: 3
  14: __init -> f80_0_main_EQ : arg2'=2, arg1'=2+3*x110, (-1+3*x110-3*x80 <= 0 /\ 1+3*x110-arg1P1 >= 0 /\ -3*x80+arg1P1 > 0 /\ 1+arg1P1 > 0), cost: 7+6*x110-2*arg1P1


Removed unreachable locations and irrelevant leafs
Start location: __init
  <empty>


Computing asymptotic complexity

Proved the following lower bound
Complexity:  Unknown
Cpx degree: ?

Solved cost: 0
Rule cost:   0

