NO

Initial ITS

Start location: __init
Program variables: arg1 arg2
   0: f1_0_main_ConstantStackPush -> f124_0_main_GT : arg1'=arg1p1, arg2'=arg2p1, (-arg2p1 == 0 /\ -arg1p1 == 0), cost: 1
   1: f124_0_main_GT -> f124_0_main_GT : arg1'=arg1p2, arg2'=arg2p2, (-arg1+arg2 >= 0 /\ 1+arg1 > 0 /\ -arg2p2+arg2 == 0 /\ -1-arg1+arg2 >= 0 /\ 1+arg1-arg1p2 == 0 /\ 1+arg2 > 0), cost: 1
   2: f124_0_main_GT -> f124_0_main_GT : arg1'=arg1p3, arg2'=arg2p3, (-arg1+arg2 >= 0 /\ -arg1+arg2 == 0 /\ 1+arg1 > 0 /\ 1+arg1-arg1p3 == 0 /\ 2+arg2-arg2p3 == 0 /\ 1+arg2 > 0), cost: 1
   3: __init -> f1_0_main_ConstantStackPush : arg1'=arg1p4, arg2'=arg2p4, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2
   1: f124_0_main_GT -> f124_0_main_GT : arg1'=arg1p2, arg2'=arg2p2, (-arg1+arg2 >= 0 /\ 1+arg1 > 0 /\ -arg2p2+arg2 == 0 /\ -1-arg1+arg2 >= 0 /\ 1+arg1-arg1p2 == 0 /\ 1+arg2 > 0), cost: 1
   2: f124_0_main_GT -> f124_0_main_GT : arg1'=arg1p3, arg2'=arg2p3, (-arg1+arg2 >= 0 /\ -arg1+arg2 == 0 /\ 1+arg1 > 0 /\ 1+arg1-arg1p3 == 0 /\ 2+arg2-arg2p3 == 0 /\ 1+arg2 > 0), cost: 1
   4: __init -> f124_0_main_GT : arg1'=arg1p1, arg2'=arg2p1, (-arg2p1 == 0 /\ -arg1p1 == 0), cost: 1

	Eliminating location f1_0_main_ConstantStackPush by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_ConstantStackPush : arg1'=arg1p4, arg2'=arg2p4, T, cost: 1
	Second rule:
	f1_0_main_ConstantStackPush -> f124_0_main_GT : arg1'=arg1p1, arg2'=arg2p1, (-arg2p1 == 0 /\ -arg1p1 == 0), cost: 1
	New rule:
	__init -> f124_0_main_GT : arg1'=arg1p1, arg2'=arg2p1, (-arg2p1 == 0 /\ -arg1p1 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 3

Simplified Transitions

Start location: __init
Program variables: arg1 arg2
   5: f124_0_main_GT -> f124_0_main_GT : arg1'=1+arg1, (-arg1+arg2 >= 0 /\ 1+arg1 > 0 /\ -1-arg1+arg2 >= 0 /\ 1+arg2 > 0), cost: 1
   6: f124_0_main_GT -> f124_0_main_GT : arg1'=1+arg1, arg2'=2+arg2, (-arg1+arg2 >= 0 /\ -arg1+arg2 == 0 /\ 1+arg1 > 0 /\ 1+arg2 > 0), cost: 1
   7: __init -> f124_0_main_GT : arg1'=0, arg2'=0, T, cost: 1

	Propagated Equalities

	Original rule:
	f124_0_main_GT -> f124_0_main_GT : arg1'=arg1p2, arg2'=arg2p2, (-arg1+arg2 >= 0 /\ 1+arg1 > 0 /\ -arg2p2+arg2 == 0 /\ -1-arg1+arg2 >= 0 /\ 1+arg1-arg1p2 == 0 /\ 1+arg2 > 0), cost: 1
	New rule:
	f124_0_main_GT -> f124_0_main_GT : arg1'=1+arg1, arg2'=arg2, (0 == 0 /\ -arg1+arg2 >= 0 /\ 1+arg1 > 0 /\ -1-arg1+arg2 >= 0 /\ 1+arg2 > 0), cost: 1
	
		propagated equality arg2p2 = arg2
		
		propagated equality arg1p2 = 1+arg1
		
	Simplified Guard

	Original rule:
	f124_0_main_GT -> f124_0_main_GT : arg1'=1+arg1, arg2'=arg2, (0 == 0 /\ -arg1+arg2 >= 0 /\ 1+arg1 > 0 /\ -1-arg1+arg2 >= 0 /\ 1+arg2 > 0), cost: 1
	New rule:
	f124_0_main_GT -> f124_0_main_GT : arg1'=1+arg1, arg2'=arg2, (-arg1+arg2 >= 0 /\ 1+arg1 > 0 /\ -1-arg1+arg2 >= 0 /\ 1+arg2 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f124_0_main_GT -> f124_0_main_GT : arg1'=1+arg1, arg2'=arg2, (-arg1+arg2 >= 0 /\ 1+arg1 > 0 /\ -1-arg1+arg2 >= 0 /\ 1+arg2 > 0), cost: 1
	New rule:
	f124_0_main_GT -> f124_0_main_GT : arg1'=1+arg1, (-arg1+arg2 >= 0 /\ 1+arg1 > 0 /\ -1-arg1+arg2 >= 0 /\ 1+arg2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f124_0_main_GT -> f124_0_main_GT : arg1'=arg1p3, arg2'=arg2p3, (-arg1+arg2 >= 0 /\ -arg1+arg2 == 0 /\ 1+arg1 > 0 /\ 1+arg1-arg1p3 == 0 /\ 2+arg2-arg2p3 == 0 /\ 1+arg2 > 0), cost: 1
	New rule:
	f124_0_main_GT -> f124_0_main_GT : arg1'=1+arg1, arg2'=2+arg2, (0 == 0 /\ -arg1+arg2 >= 0 /\ -arg1+arg2 == 0 /\ 1+arg1 > 0 /\ 1+arg2 > 0), cost: 1
	
		propagated equality arg1p3 = 1+arg1
		
		propagated equality arg2p3 = 2+arg2
		
	Simplified Guard

	Original rule:
	f124_0_main_GT -> f124_0_main_GT : arg1'=1+arg1, arg2'=2+arg2, (0 == 0 /\ -arg1+arg2 >= 0 /\ -arg1+arg2 == 0 /\ 1+arg1 > 0 /\ 1+arg2 > 0), cost: 1
	New rule:
	f124_0_main_GT -> f124_0_main_GT : arg1'=1+arg1, arg2'=2+arg2, (-arg1+arg2 >= 0 /\ -arg1+arg2 == 0 /\ 1+arg1 > 0 /\ 1+arg2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	__init -> f124_0_main_GT : arg1'=arg1p1, arg2'=arg2p1, (-arg2p1 == 0 /\ -arg1p1 == 0), cost: 1
	New rule:
	__init -> f124_0_main_GT : arg1'=0, arg2'=0, 0 == 0, cost: 1
	
		propagated equality arg2p1 = 0
		
		propagated equality arg1p1 = 0
		
	Simplified Guard

	Original rule:
	__init -> f124_0_main_GT : arg1'=0, arg2'=0, 0 == 0, cost: 1
	New rule:
	__init -> f124_0_main_GT : arg1'=0, arg2'=0, T, cost: 1

Step with 7

	Trace

	7[T]
	
	Blocked

	[{}, {}]

Step with 6

	Trace

	7[T], 6[(-arg1+arg2 >= 0 /\ -arg1+arg2 == 0 /\ 1+arg1 > 0 /\ 1+arg2 > 0)]
	
	Blocked

	[{}, {5[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 5

	Trace

	7[T], 6[(-arg1+arg2 >= 0 /\ -arg1+arg2 == 0 /\ 1+arg1 > 0 /\ 1+arg2 > 0)], 5[(-arg1+arg2 >= 0 /\ 1+arg1 > 0 /\ -1-arg1+arg2 >= 0 /\ 1+arg2 > 0)]
	
	Blocked

	[{}, {5[T]}, {6[T]}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2
   5: f124_0_main_GT -> f124_0_main_GT : arg1'=1+arg1, (-arg1+arg2 >= 0 /\ 1+arg1 > 0 /\ -1-arg1+arg2 >= 0 /\ 1+arg2 > 0), cost: 1
   6: f124_0_main_GT -> f124_0_main_GT : arg1'=1+arg1, arg2'=2+arg2, (-arg1+arg2 >= 0 /\ -arg1+arg2 == 0 /\ 1+arg1 > 0 /\ 1+arg2 > 0), cost: 1
   8: f124_0_main_GT -> f124_0_main_GT : arg1'=n+arg1, (-1+n >= 0 /\ 1+arg1 > 0 /\ -n-arg1+arg2 >= 0 /\ 1-n-arg1+arg2 >= 0 /\ 1+arg2 > 0), cost: 1
   7: __init -> f124_0_main_GT : arg1'=0, arg2'=0, T, cost: 1

	Loop Acceleration

	Original rule:
	f124_0_main_GT -> f124_0_main_GT : arg1'=1+arg1, (-arg1+arg2 >= 0 /\ 1+arg1 > 0 /\ -1-arg1+arg2 >= 0 /\ 1+arg2 > 0), cost: 1
	New rule:
	f124_0_main_GT -> f124_0_main_GT : arg1'=n+arg1, (-1+n >= 0 /\ 1+arg1 > 0 /\ -n-arg1+arg2 >= 0 /\ 1-n-arg1+arg2 >= 0 /\ 1+arg2 > 0), cost: 1

		-arg1+arg2 >= 0 [0]: montonic decrease yields 1-n-arg1+arg2 >= 0
		
		-arg1+arg2 >= 0 [1]: eventual increase yields (1 <= 0 /\ -arg1+arg2 >= 0)
		
		1+arg1 > 0 [0]: monotonic increase yields 1+arg1 > 0
		
		-1-arg1+arg2 >= 0 [0]: montonic decrease yields -n-arg1+arg2 >= 0
		
		-1-arg1+arg2 >= 0 [1]: eventual increase yields (1 <= 0 /\ -1-arg1+arg2 >= 0)
		
		1+arg2 > 0 [0]: monotonic increase yields 1+arg2 > 0, dependencies: -arg1+arg2 >= 0 1+arg1 > 0
		
		Replacement map: {-arg1+arg2 >= 0 -> 1-n-arg1+arg2 >= 0, 1+arg1 > 0 -> 1+arg1 > 0, -1-arg1+arg2 >= 0 -> -n-arg1+arg2 >= 0, 1+arg2 > 0 -> 1+arg2 > 0}

	Trace

	7[T], 6[(-arg1+arg2 >= 0 /\ -arg1+arg2 == 0 /\ 1+arg1 > 0 /\ 1+arg2 > 0)], 8[(-1+n >= 0 /\ 1+arg1 > 0 /\ -n-arg1+arg2 >= 0 /\ 1-n-arg1+arg2 >= 0 /\ 1+arg2 > 0)]
	
	Blocked

	[{}, {5[T]}, {6[T]}, {5[T], 8[T]}]

Nonterm

Start location: __init
Program variables: arg1 arg2
   5: f124_0_main_GT -> f124_0_main_GT : arg1'=1+arg1, (-arg1+arg2 >= 0 /\ 1+arg1 > 0 /\ -1-arg1+arg2 >= 0 /\ 1+arg2 > 0), cost: 1
   6: f124_0_main_GT -> f124_0_main_GT : arg1'=1+arg1, arg2'=2+arg2, (-arg1+arg2 >= 0 /\ -arg1+arg2 == 0 /\ 1+arg1 > 0 /\ 1+arg2 > 0), cost: 1
   8: f124_0_main_GT -> f124_0_main_GT : arg1'=n+arg1, (-1+n >= 0 /\ 1+arg1 > 0 /\ -n-arg1+arg2 >= 0 /\ 1-n-arg1+arg2 >= 0 /\ 1+arg2 > 0), cost: 1
   9: f124_0_main_GT -> LoAT_sink : (2+arg1 > 0 /\ -arg1+arg2 >= 0 /\ -1+n <= 0 /\ -1+n >= 0 /\ 1+arg1 > 0 /\ arg1-arg2 >= 0 /\ 3+arg2 > 0 /\ 2-n-arg1+arg2 >= 0 /\ 1-n-arg1+arg2 >= 0 /\ 1+arg2 > 0), cost: NONTERM
  10: f124_0_main_GT -> f124_0_main_GT : arg1'=arg1+n*n2+n2, arg2'=arg2+2*n2, (2+arg1 > 0 /\ -1+n >= 0 /\ 1+arg1 > 0 /\ arg1-arg2 >= 0 /\ 3+arg2 > 0 /\ 2-n-arg1+arg2 >= 0 /\ 1-n-arg1+arg2 >= 0 /\ -1+n2 >= 0 /\ -1-arg1-n*(-1+n2)+arg2+n2 >= 0 /\ 1+arg2 > 0), cost: 1
   7: __init -> f124_0_main_GT : arg1'=0, arg2'=0, T, cost: 1

	Certificate of Non-Termination

	Original rule:
	f124_0_main_GT -> f124_0_main_GT : arg1'=1+n+arg1, arg2'=2+arg2, (2+arg1 > 0 /\ -arg1+arg2 >= 0 /\ -arg1+arg2 == 0 /\ -1+n >= 0 /\ 1+arg1 > 0 /\ 3+arg2 > 0 /\ 2-n-arg1+arg2 >= 0 /\ 1-n-arg1+arg2 >= 0 /\ 1+arg2 > 0), cost: 1
	New rule:
	f124_0_main_GT -> LoAT_sink : (2+arg1 > 0 /\ -arg1+arg2 >= 0 /\ -1+n <= 0 /\ -1+n >= 0 /\ 1+arg1 > 0 /\ arg1-arg2 >= 0 /\ 3+arg2 > 0 /\ 2-n-arg1+arg2 >= 0 /\ 1-n-arg1+arg2 >= 0 /\ 1+arg2 > 0), cost: NONTERM

		2+arg1 > 0 [0]: monotonic increase yields 2+arg1 > 0, dependencies: -1+n >= 0
		
		2+arg1 > 0 [1]: montonic decrease yields 1+arg1+n*(-1+n2)+n2 > 0, dependencies: 1+arg1 > 0
		
		2+arg1 > 0 [2]: eventual decrease yields (2+arg1 > 0 /\ 1+arg1+n*(-1+n2)+n2 > 0), dependencies: -1+n >= 0
		
		2+arg1 > 0 [3]: eventual increase yields (2+arg1 > 0 /\ -1-n <= 0), dependencies: -1+n >= 0
		
		-arg1+arg2 >= 0 [0]: montonic decrease yields -1-arg1-n*(-1+n2)+arg2+n2 >= 0, dependencies: -1+n >= 0
		
		-arg1+arg2 >= 0 [1]: eventual decrease yields (-arg1+arg2 >= 0 /\ -1-arg1-n*(-1+n2)+arg2+n2 >= 0), dependencies: -1+n >= 0
		
		-arg1+arg2 >= 0 [2]: eventual increase yields (-arg1+arg2 >= 0 /\ -1+n <= 0)
		
		-1+n >= 0 [0]: monotonic increase yields -1+n >= 0
		
		1+arg1 > 0 [0]: monotonic increase yields 1+arg1 > 0, dependencies: 2+arg1 > 0 -1+n >= 0
		
		arg1-arg2 >= 0 [0]: monotonic increase yields arg1-arg2 >= 0, dependencies: -1+n >= 0
		
		3+arg2 > 0 [0]: monotonic increase yields 3+arg2 > 0, dependencies: 2+arg1 > 0 -arg1+arg2 >= 0
		
		2-n-arg1+arg2 >= 0 [0]: monotonic increase yields 2-n-arg1+arg2 >= 0, dependencies: arg1-arg2 >= 0 1-n-arg1+arg2 >= 0
		
		2-n-arg1+arg2 >= 0 [1]: montonic decrease yields 1-n-arg1-n*(-1+n2)+arg2+n2 >= 0, dependencies: -arg1+arg2 >= 0
		
		2-n-arg1+arg2 >= 0 [2]: eventual increase yields (-1+n <= 0 /\ 2-n-arg1+arg2 >= 0)
		
		1-n-arg1+arg2 >= 0 [0]: monotonic increase yields 1-n-arg1+arg2 >= 0, dependencies: arg1-arg2 >= 0
		
		1+arg2 > 0 [0]: monotonic increase yields 1+arg2 > 0, dependencies: 2+arg1 > 0 -arg1+arg2 >= 0
		
		Replacement map: {2+arg1 > 0 -> 2+arg1 > 0, -arg1+arg2 >= 0 -> (-arg1+arg2 >= 0 /\ -1+n <= 0), -1+n >= 0 -> -1+n >= 0, 1+arg1 > 0 -> 1+arg1 > 0, arg1-arg2 >= 0 -> arg1-arg2 >= 0, 3+arg2 > 0 -> 3+arg2 > 0, 2-n-arg1+arg2 >= 0 -> 2-n-arg1+arg2 >= 0, 1-n-arg1+arg2 >= 0 -> 1-n-arg1+arg2 >= 0, 1+arg2 > 0 -> 1+arg2 > 0}

	Loop Acceleration

	Original rule:
	f124_0_main_GT -> f124_0_main_GT : arg1'=1+n+arg1, arg2'=2+arg2, (2+arg1 > 0 /\ -arg1+arg2 >= 0 /\ -arg1+arg2 == 0 /\ -1+n >= 0 /\ 1+arg1 > 0 /\ 3+arg2 > 0 /\ 2-n-arg1+arg2 >= 0 /\ 1-n-arg1+arg2 >= 0 /\ 1+arg2 > 0), cost: 1
	New rule:
	f124_0_main_GT -> f124_0_main_GT : arg1'=arg1+n*n2+n2, arg2'=arg2+2*n2, (2+arg1 > 0 /\ -1+n >= 0 /\ 1+arg1 > 0 /\ arg1-arg2 >= 0 /\ 3+arg2 > 0 /\ 2-n-arg1+arg2 >= 0 /\ 1-n-arg1+arg2 >= 0 /\ -1+n2 >= 0 /\ -1-arg1-n*(-1+n2)+arg2+n2 >= 0 /\ 1+arg2 > 0), cost: 1

		2+arg1 > 0 [0]: monotonic increase yields 2+arg1 > 0, dependencies: -1+n >= 0
		
		2+arg1 > 0 [1]: montonic decrease yields 1+arg1+n*(-1+n2)+n2 > 0, dependencies: 1+arg1 > 0
		
		2+arg1 > 0 [2]: eventual decrease yields (2+arg1 > 0 /\ 1+arg1+n*(-1+n2)+n2 > 0), dependencies: -1+n >= 0
		
		2+arg1 > 0 [3]: eventual increase yields (2+arg1 > 0 /\ -1-n <= 0), dependencies: -1+n >= 0
		
		-arg1+arg2 >= 0 [0]: montonic decrease yields -1-arg1-n*(-1+n2)+arg2+n2 >= 0, dependencies: -1+n >= 0
		
		-arg1+arg2 >= 0 [1]: eventual decrease yields (-arg1+arg2 >= 0 /\ -1-arg1-n*(-1+n2)+arg2+n2 >= 0), dependencies: -1+n >= 0
		
		-arg1+arg2 >= 0 [2]: eventual increase yields (-arg1+arg2 >= 0 /\ -1+n <= 0)
		
		-1+n >= 0 [0]: monotonic increase yields -1+n >= 0
		
		1+arg1 > 0 [0]: monotonic increase yields 1+arg1 > 0, dependencies: 2+arg1 > 0 -1+n >= 0
		
		arg1-arg2 >= 0 [0]: monotonic increase yields arg1-arg2 >= 0, dependencies: -1+n >= 0
		
		3+arg2 > 0 [0]: monotonic increase yields 3+arg2 > 0, dependencies: 2+arg1 > 0 -arg1+arg2 >= 0
		
		2-n-arg1+arg2 >= 0 [0]: monotonic increase yields 2-n-arg1+arg2 >= 0, dependencies: arg1-arg2 >= 0 1-n-arg1+arg2 >= 0
		
		2-n-arg1+arg2 >= 0 [1]: montonic decrease yields 1-n-arg1-n*(-1+n2)+arg2+n2 >= 0, dependencies: -arg1+arg2 >= 0
		
		2-n-arg1+arg2 >= 0 [2]: eventual increase yields (-1+n <= 0 /\ 2-n-arg1+arg2 >= 0)
		
		1-n-arg1+arg2 >= 0 [0]: monotonic increase yields 1-n-arg1+arg2 >= 0, dependencies: arg1-arg2 >= 0
		
		1+arg2 > 0 [0]: monotonic increase yields 1+arg2 > 0, dependencies: 2+arg1 > 0 -arg1+arg2 >= 0
		
		Replacement map: {2+arg1 > 0 -> 2+arg1 > 0, -arg1+arg2 >= 0 -> -1-arg1-n*(-1+n2)+arg2+n2 >= 0, -1+n >= 0 -> -1+n >= 0, 1+arg1 > 0 -> 1+arg1 > 0, arg1-arg2 >= 0 -> arg1-arg2 >= 0, 3+arg2 > 0 -> 3+arg2 > 0, 2-n-arg1+arg2 >= 0 -> 2-n-arg1+arg2 >= 0, 1-n-arg1+arg2 >= 0 -> 1-n-arg1+arg2 >= 0, 1+arg2 > 0 -> 1+arg2 > 0}

Step with 9

	Trace

	7[T], 9[(2+arg1 > 0 /\ -arg1+arg2 >= 0 /\ -1+n <= 0 /\ -1+n >= 0 /\ 1+arg1 > 0 /\ arg1-arg2 >= 0 /\ 3+arg2 > 0 /\ 2-n-arg1+arg2 >= 0 /\ 1-n-arg1+arg2 >= 0 /\ 1+arg2 > 0)]
	
	Blocked

	[{}, {5[T]}, {9[T]}]

Refute

	Counterexample

	[ arg1=0 arg2=0 ] 7 [ arg1=arg1 arg2=arg2 ] 9
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
