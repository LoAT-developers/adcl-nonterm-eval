NO

Initial ITS

Start location: __init
Program variables: arg1 arg2
   0: f1_0_main_Load -> f172_0_even_NE : arg1'=arg1p1, arg2'=arg2p1, (-5 < 0 /\ 1+arg2 > 0 /\ -5-arg1p1+arg2 == 0 /\ arg1 > 0), cost: 1
   1: f172_0_even_NE -> f137_0_odd_NE : arg1'=arg1p2, arg2'=arg2p2, (-2+arg1 < 0 /\ -1-arg1p2+arg1 == 0 /\ -1 < 0 /\ -1+arg1 < 0 /\ arg1 < 0), cost: 1
   2: f172_0_even_NE -> f137_0_odd_NE : arg1'=arg1p3, arg2'=arg2p3, (-1-arg1p3+arg1 == 0 /\ -1 < 0 /\ -1+arg1 > 0), cost: 1
   3: f137_0_odd_NE -> f172_0_even_NE : arg1'=arg1p4, arg2'=arg2p4, (-2+arg1 < 0 /\ -1-arg1p4+arg1 == 0 /\ -1 < 0 /\ -1+arg1 < 0 /\ arg1 < 0), cost: 1
   4: f137_0_odd_NE -> f172_0_even_NE : arg1'=arg1p5, arg2'=arg2p5, (-1-arg1p5+arg1 == 0 /\ -1 < 0 /\ -1+arg1 > 0), cost: 1
   5: __init -> f1_0_main_Load : arg1'=arg1p6, arg2'=arg2p6, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2
   1: f172_0_even_NE -> f137_0_odd_NE : arg1'=arg1p2, arg2'=arg2p2, (-2+arg1 < 0 /\ -1-arg1p2+arg1 == 0 /\ -1 < 0 /\ -1+arg1 < 0 /\ arg1 < 0), cost: 1
   2: f172_0_even_NE -> f137_0_odd_NE : arg1'=arg1p3, arg2'=arg2p3, (-1-arg1p3+arg1 == 0 /\ -1 < 0 /\ -1+arg1 > 0), cost: 1
   3: f137_0_odd_NE -> f172_0_even_NE : arg1'=arg1p4, arg2'=arg2p4, (-2+arg1 < 0 /\ -1-arg1p4+arg1 == 0 /\ -1 < 0 /\ -1+arg1 < 0 /\ arg1 < 0), cost: 1
   4: f137_0_odd_NE -> f172_0_even_NE : arg1'=arg1p5, arg2'=arg2p5, (-1-arg1p5+arg1 == 0 /\ -1 < 0 /\ -1+arg1 > 0), cost: 1
   6: __init -> f172_0_even_NE : arg1'=arg1p1, arg2'=arg2p1, (-5 < 0 /\ arg1p6 > 0 /\ 1+arg2p6 > 0 /\ -5-arg1p1+arg2p6 == 0), cost: 1

	Eliminating location f1_0_main_Load by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_Load : arg1'=arg1p6, arg2'=arg2p6, T, cost: 1
	Second rule:
	f1_0_main_Load -> f172_0_even_NE : arg1'=arg1p1, arg2'=arg2p1, (-5 < 0 /\ 1+arg2 > 0 /\ -5-arg1p1+arg2 == 0 /\ arg1 > 0), cost: 1
	New rule:
	__init -> f172_0_even_NE : arg1'=arg1p1, arg2'=arg2p1, (-5 < 0 /\ arg1p6 > 0 /\ 1+arg2p6 > 0 /\ -5-arg1p1+arg2p6 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 5

Simplified Transitions

Start location: __init
Program variables: arg1 arg2
   7: f172_0_even_NE -> f137_0_odd_NE : arg1'=-1+arg1, arg2'=arg2p2, (-2+arg1 < 0 /\ -1+arg1 < 0 /\ arg1 < 0), cost: 1
   8: f172_0_even_NE -> f137_0_odd_NE : arg1'=-1+arg1, arg2'=arg2p3, -1+arg1 > 0, cost: 1
   9: f137_0_odd_NE -> f172_0_even_NE : arg1'=-1+arg1, arg2'=arg2p4, (-2+arg1 < 0 /\ -1+arg1 < 0 /\ arg1 < 0), cost: 1
  10: f137_0_odd_NE -> f172_0_even_NE : arg1'=-1+arg1, arg2'=arg2p5, -1+arg1 > 0, cost: 1
  11: __init -> f172_0_even_NE : arg1'=-5+arg2p6, arg2'=arg2p1, (1+arg2p6 > 0), cost: 1

	Propagated Equalities

	Original rule:
	f172_0_even_NE -> f137_0_odd_NE : arg1'=arg1p2, arg2'=arg2p2, (-2+arg1 < 0 /\ -1-arg1p2+arg1 == 0 /\ -1 < 0 /\ -1+arg1 < 0 /\ arg1 < 0), cost: 1
	New rule:
	f172_0_even_NE -> f137_0_odd_NE : arg1'=-1+arg1, arg2'=arg2p2, (0 == 0 /\ -2+arg1 < 0 /\ -1 < 0 /\ -1+arg1 < 0 /\ arg1 < 0), cost: 1
	
		propagated equality arg1p2 = -1+arg1
		
	Simplified Guard

	Original rule:
	f172_0_even_NE -> f137_0_odd_NE : arg1'=-1+arg1, arg2'=arg2p2, (0 == 0 /\ -2+arg1 < 0 /\ -1 < 0 /\ -1+arg1 < 0 /\ arg1 < 0), cost: 1
	New rule:
	f172_0_even_NE -> f137_0_odd_NE : arg1'=-1+arg1, arg2'=arg2p2, (-2+arg1 < 0 /\ -1+arg1 < 0 /\ arg1 < 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f172_0_even_NE -> f137_0_odd_NE : arg1'=arg1p3, arg2'=arg2p3, (-1-arg1p3+arg1 == 0 /\ -1 < 0 /\ -1+arg1 > 0), cost: 1
	New rule:
	f172_0_even_NE -> f137_0_odd_NE : arg1'=-1+arg1, arg2'=arg2p3, (0 == 0 /\ -1 < 0 /\ -1+arg1 > 0), cost: 1
	
		propagated equality arg1p3 = -1+arg1
		
	Simplified Guard

	Original rule:
	f172_0_even_NE -> f137_0_odd_NE : arg1'=-1+arg1, arg2'=arg2p3, (0 == 0 /\ -1 < 0 /\ -1+arg1 > 0), cost: 1
	New rule:
	f172_0_even_NE -> f137_0_odd_NE : arg1'=-1+arg1, arg2'=arg2p3, -1+arg1 > 0, cost: 1
	
	Propagated Equalities

	Original rule:
	f137_0_odd_NE -> f172_0_even_NE : arg1'=arg1p4, arg2'=arg2p4, (-2+arg1 < 0 /\ -1-arg1p4+arg1 == 0 /\ -1 < 0 /\ -1+arg1 < 0 /\ arg1 < 0), cost: 1
	New rule:
	f137_0_odd_NE -> f172_0_even_NE : arg1'=-1+arg1, arg2'=arg2p4, (0 == 0 /\ -2+arg1 < 0 /\ -1 < 0 /\ -1+arg1 < 0 /\ arg1 < 0), cost: 1
	
		propagated equality arg1p4 = -1+arg1
		
	Simplified Guard

	Original rule:
	f137_0_odd_NE -> f172_0_even_NE : arg1'=-1+arg1, arg2'=arg2p4, (0 == 0 /\ -2+arg1 < 0 /\ -1 < 0 /\ -1+arg1 < 0 /\ arg1 < 0), cost: 1
	New rule:
	f137_0_odd_NE -> f172_0_even_NE : arg1'=-1+arg1, arg2'=arg2p4, (-2+arg1 < 0 /\ -1+arg1 < 0 /\ arg1 < 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f137_0_odd_NE -> f172_0_even_NE : arg1'=arg1p5, arg2'=arg2p5, (-1-arg1p5+arg1 == 0 /\ -1 < 0 /\ -1+arg1 > 0), cost: 1
	New rule:
	f137_0_odd_NE -> f172_0_even_NE : arg1'=-1+arg1, arg2'=arg2p5, (0 == 0 /\ -1 < 0 /\ -1+arg1 > 0), cost: 1
	
		propagated equality arg1p5 = -1+arg1
		
	Simplified Guard

	Original rule:
	f137_0_odd_NE -> f172_0_even_NE : arg1'=-1+arg1, arg2'=arg2p5, (0 == 0 /\ -1 < 0 /\ -1+arg1 > 0), cost: 1
	New rule:
	f137_0_odd_NE -> f172_0_even_NE : arg1'=-1+arg1, arg2'=arg2p5, -1+arg1 > 0, cost: 1
	
	Propagated Equalities

	Original rule:
	__init -> f172_0_even_NE : arg1'=arg1p1, arg2'=arg2p1, (-5 < 0 /\ arg1p6 > 0 /\ 1+arg2p6 > 0 /\ -5-arg1p1+arg2p6 == 0), cost: 1
	New rule:
	__init -> f172_0_even_NE : arg1'=-5+arg2p6, arg2'=arg2p1, (0 == 0 /\ -5 < 0 /\ arg1p6 > 0 /\ 1+arg2p6 > 0), cost: 1
	
		propagated equality arg1p1 = -5+arg2p6
		
	Simplified Guard

	Original rule:
	__init -> f172_0_even_NE : arg1'=-5+arg2p6, arg2'=arg2p1, (0 == 0 /\ -5 < 0 /\ arg1p6 > 0 /\ 1+arg2p6 > 0), cost: 1
	New rule:
	__init -> f172_0_even_NE : arg1'=-5+arg2p6, arg2'=arg2p1, (arg1p6 > 0 /\ 1+arg2p6 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	__init -> f172_0_even_NE : arg1'=-5+arg2p6, arg2'=arg2p1, (arg1p6 > 0 /\ 1+arg2p6 > 0), cost: 1
	New rule:
	__init -> f172_0_even_NE : arg1'=-5+arg2p6, arg2'=arg2p1, (1+arg2p6 > 0), cost: 1

Step with 11

	Trace

	11[(1+arg2p6 > 0)]
	
	Blocked

	[{}, {}]

Step with 7

	Trace

	11[(1+arg2p6 > 0)], 7[(-2+arg1 < 0 /\ -1+arg1 < 0 /\ arg1 < 0)]
	
	Blocked

	[{}, {}, {}]

Step with 9

	Trace

	11[(1+arg2p6 > 0)], 7[(-2+arg1 < 0 /\ -1+arg1 < 0 /\ arg1 < 0)], 9[(-2+arg1 < 0 /\ -1+arg1 < 0 /\ arg1 < 0)]
	
	Blocked

	[{}, {}, {}, {}]

Nonterm

Start location: __init
Program variables: arg1 arg2
   7: f172_0_even_NE -> f137_0_odd_NE : arg1'=-1+arg1, arg2'=arg2p2, (-2+arg1 < 0 /\ -1+arg1 < 0 /\ arg1 < 0), cost: 1
   8: f172_0_even_NE -> f137_0_odd_NE : arg1'=-1+arg1, arg2'=arg2p3, -1+arg1 > 0, cost: 1
  12: f172_0_even_NE -> LoAT_sink : (-1+n >= 0 /\ 2-arg1 > 0 /\ 3-arg1 > 0 /\ 1-arg1 > 0 /\ -arg1 > 0), cost: NONTERM
  13: f172_0_even_NE -> f172_0_even_NE : arg1'=-2*n+arg1, arg2'=arg2p4, (-1+n >= 0 /\ 2-arg1 > 0 /\ 3-arg1 > 0 /\ 1-arg1 > 0 /\ -arg1 > 0), cost: 1
   9: f137_0_odd_NE -> f172_0_even_NE : arg1'=-1+arg1, arg2'=arg2p4, (-2+arg1 < 0 /\ -1+arg1 < 0 /\ arg1 < 0), cost: 1
  10: f137_0_odd_NE -> f172_0_even_NE : arg1'=-1+arg1, arg2'=arg2p5, -1+arg1 > 0, cost: 1
  11: __init -> f172_0_even_NE : arg1'=-5+arg2p6, arg2'=arg2p1, (1+arg2p6 > 0), cost: 1

	Certificate of Non-Termination

	Original rule:
	f172_0_even_NE -> f172_0_even_NE : arg1'=-2+arg1, arg2'=arg2p4, (-2+arg1 < 0 /\ -3+arg1 < 0 /\ -1+arg1 < 0 /\ arg1 < 0), cost: 1
	New rule:
	f172_0_even_NE -> LoAT_sink : (-1+n >= 0 /\ 2-arg1 > 0 /\ 3-arg1 > 0 /\ 1-arg1 > 0 /\ -arg1 > 0), cost: NONTERM

		2-arg1 > 0 [0]: monotonic increase yields 2-arg1 > 0
		
		3-arg1 > 0 [0]: monotonic increase yields 3-arg1 > 0, dependencies: 2-arg1 > 0
		
		1-arg1 > 0 [0]: monotonic increase yields 1-arg1 > 0, dependencies: 2-arg1 > 0
		
		-arg1 > 0 [0]: monotonic increase yields -arg1 > 0, dependencies: 1-arg1 > 0
		
		Replacement map: {2-arg1 > 0 -> 2-arg1 > 0, 3-arg1 > 0 -> 3-arg1 > 0, 1-arg1 > 0 -> 1-arg1 > 0, -arg1 > 0 -> -arg1 > 0}

	Loop Acceleration

	Original rule:
	f172_0_even_NE -> f172_0_even_NE : arg1'=-2+arg1, arg2'=arg2p4, (-2+arg1 < 0 /\ -3+arg1 < 0 /\ -1+arg1 < 0 /\ arg1 < 0), cost: 1
	New rule:
	f172_0_even_NE -> f172_0_even_NE : arg1'=-2*n+arg1, arg2'=arg2p4, (-1+n >= 0 /\ 2-arg1 > 0 /\ 3-arg1 > 0 /\ 1-arg1 > 0 /\ -arg1 > 0), cost: 1

		2-arg1 > 0 [0]: monotonic increase yields 2-arg1 > 0
		
		3-arg1 > 0 [0]: monotonic increase yields 3-arg1 > 0, dependencies: 2-arg1 > 0
		
		1-arg1 > 0 [0]: monotonic increase yields 1-arg1 > 0, dependencies: 2-arg1 > 0
		
		-arg1 > 0 [0]: monotonic increase yields -arg1 > 0, dependencies: 1-arg1 > 0
		
		Replacement map: {2-arg1 > 0 -> 2-arg1 > 0, 3-arg1 > 0 -> 3-arg1 > 0, 1-arg1 > 0 -> 1-arg1 > 0, -arg1 > 0 -> -arg1 > 0}

Step with 12

	Trace

	11[(1+arg2p6 > 0)], 12[(-1+n >= 0 /\ 2-arg1 > 0 /\ 3-arg1 > 0 /\ 1-arg1 > 0 /\ -arg1 > 0)]
	
	Blocked

	[{}, {}, {12[T]}]

Refute

	Counterexample

	[ arg1=-5 arg2=0 ] 11 [ arg1=arg1 arg2=arg2 ] 12
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
