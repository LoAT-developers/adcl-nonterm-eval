unknown

Initial ITS

Start location: l6
Program variables: a^0 ret_returnone3^0 tmp^0
   0: l0 -> l1 : a^0'=a^post1, ret_returnone3^0'=ret_returnone3^post1, tmp^0'=tmp^post1, (3-a^0 <= 0 /\ -ret_returnone3^post1+ret_returnone3^0 == 0 /\ -tmp^post1+tmp^0 == 0 /\ a^0-a^post1 == 0), cost: 1
   1: l0 -> l1 : a^0'=a^post2, ret_returnone3^0'=ret_returnone3^post2, tmp^0'=tmp^post2, (a^0-a^post2 == 0 /\ -1+a^0 <= 0 /\ -tmp^post2+tmp^0 == 0 /\ -ret_returnone3^post2+ret_returnone3^0 == 0), cost: 1
   2: l0 -> l2 : a^0'=a^post3, ret_returnone3^0'=ret_returnone3^post3, tmp^0'=tmp^post3, (2-a^0 <= 0 /\ a^0-a^post3 == 0 /\ -2+a^0 <= 0 /\ -1+tmp^post3 == 0 /\ -ret_returnone3^post3+ret_returnone3^0 == 0), cost: 1
   7: l1 -> l2 : a^0'=a^post8, ret_returnone3^0'=ret_returnone3^post8, tmp^0'=tmp^post8, (ret_returnone3^0-ret_returnone3^post8 == 0 /\ -a^post8+a^0 == 0 /\ tmp^post8 == 0), cost: 1
   3: l2 -> l3 : a^0'=a^post4, ret_returnone3^0'=ret_returnone3^post4, tmp^0'=tmp^post4, (-ret_returnone3^post4+ret_returnone3^0 == 0 /\ -tmp^post4+tmp^0 == 0 /\ a^0-a^post4 == 0), cost: 1
   4: l4 -> l0 : a^0'=a^post5, ret_returnone3^0'=ret_returnone3^post5, tmp^0'=tmp^post5, (2-a^0 <= 0 /\ ret_returnone3^0-ret_returnone3^post5 == 0 /\ -tmp^post5+tmp^0 == 0 /\ -a^post5+a^0 == 0), cost: 1
   5: l4 -> l0 : a^0'=a^post6, ret_returnone3^0'=ret_returnone3^post6, tmp^0'=tmp^post6, (-a^post6+a^0 == 0 /\ -tmp^post6+tmp^0 == 0 /\ ret_returnone3^0-ret_returnone3^post6 == 0 /\ a^0 <= 0), cost: 1
   6: l4 -> l2 : a^0'=a^post7, ret_returnone3^0'=ret_returnone3^post7, tmp^0'=tmp^post7, (-1+tmp^post7 == 0 /\ 1-a^0 <= 0 /\ -1+a^0 <= 0 /\ -a^post7+a^0 == 0 /\ ret_returnone3^0-ret_returnone3^post7 == 0), cost: 1
   8: l5 -> l4 : a^0'=a^post9, ret_returnone3^0'=ret_returnone3^post9, tmp^0'=tmp^post9, (-tmp^post9+tmp^0 == 0 /\ 1+a^1 == 0 /\ -1+ret_returnone3^post9 == 0 /\ a^post9-ret_returnone3^post9 == 0), cost: 1
   9: l6 -> l5 : a^0'=a^post10, ret_returnone3^0'=ret_returnone3^post10, tmp^0'=tmp^post10, (-a^post10+a^0 == 0 /\ -tmp^post10+tmp^0 == 0 /\ ret_returnone3^0-ret_returnone3^post10 == 0), cost: 1

Chained Linear Paths

Start location: l6
Program variables: a^0 ret_returnone3^0 tmp^0
   0: l0 -> l1 : a^0'=a^post1, ret_returnone3^0'=ret_returnone3^post1, tmp^0'=tmp^post1, (3-a^0 <= 0 /\ -ret_returnone3^post1+ret_returnone3^0 == 0 /\ -tmp^post1+tmp^0 == 0 /\ a^0-a^post1 == 0), cost: 1
   1: l0 -> l1 : a^0'=a^post2, ret_returnone3^0'=ret_returnone3^post2, tmp^0'=tmp^post2, (a^0-a^post2 == 0 /\ -1+a^0 <= 0 /\ -tmp^post2+tmp^0 == 0 /\ -ret_returnone3^post2+ret_returnone3^0 == 0), cost: 1
   2: l0 -> l2 : a^0'=a^post3, ret_returnone3^0'=ret_returnone3^post3, tmp^0'=tmp^post3, (2-a^0 <= 0 /\ a^0-a^post3 == 0 /\ -2+a^0 <= 0 /\ -1+tmp^post3 == 0 /\ -ret_returnone3^post3+ret_returnone3^0 == 0), cost: 1
   7: l1 -> l2 : a^0'=a^post8, ret_returnone3^0'=ret_returnone3^post8, tmp^0'=tmp^post8, (ret_returnone3^0-ret_returnone3^post8 == 0 /\ -a^post8+a^0 == 0 /\ tmp^post8 == 0), cost: 1
   3: l2 -> l3 : a^0'=a^post4, ret_returnone3^0'=ret_returnone3^post4, tmp^0'=tmp^post4, (-ret_returnone3^post4+ret_returnone3^0 == 0 /\ -tmp^post4+tmp^0 == 0 /\ a^0-a^post4 == 0), cost: 1
   4: l4 -> l0 : a^0'=a^post5, ret_returnone3^0'=ret_returnone3^post5, tmp^0'=tmp^post5, (2-a^0 <= 0 /\ ret_returnone3^0-ret_returnone3^post5 == 0 /\ -tmp^post5+tmp^0 == 0 /\ -a^post5+a^0 == 0), cost: 1
   5: l4 -> l0 : a^0'=a^post6, ret_returnone3^0'=ret_returnone3^post6, tmp^0'=tmp^post6, (-a^post6+a^0 == 0 /\ -tmp^post6+tmp^0 == 0 /\ ret_returnone3^0-ret_returnone3^post6 == 0 /\ a^0 <= 0), cost: 1
   6: l4 -> l2 : a^0'=a^post7, ret_returnone3^0'=ret_returnone3^post7, tmp^0'=tmp^post7, (-1+tmp^post7 == 0 /\ 1-a^0 <= 0 /\ -1+a^0 <= 0 /\ -a^post7+a^0 == 0 /\ ret_returnone3^0-ret_returnone3^post7 == 0), cost: 1
  10: l6 -> l4 : a^0'=a^post9, ret_returnone3^0'=ret_returnone3^post9, tmp^0'=tmp^post9, (1+a^1 == 0 /\ tmp^post10-tmp^post9 == 0 /\ -a^post10+a^0 == 0 /\ -tmp^post10+tmp^0 == 0 /\ -1+ret_returnone3^post9 == 0 /\ ret_returnone3^0-ret_returnone3^post10 == 0 /\ a^post9-ret_returnone3^post9 == 0), cost: 1

	Eliminating location l5 by chaining:

	Applied chaining

	First rule:
	l6 -> l5 : a^0'=a^post10, ret_returnone3^0'=ret_returnone3^post10, tmp^0'=tmp^post10, (-a^post10+a^0 == 0 /\ -tmp^post10+tmp^0 == 0 /\ ret_returnone3^0-ret_returnone3^post10 == 0), cost: 1
	Second rule:
	l5 -> l4 : a^0'=a^post9, ret_returnone3^0'=ret_returnone3^post9, tmp^0'=tmp^post9, (-tmp^post9+tmp^0 == 0 /\ 1+a^1 == 0 /\ -1+ret_returnone3^post9 == 0 /\ a^post9-ret_returnone3^post9 == 0), cost: 1
	New rule:
	l6 -> l4 : a^0'=a^post9, ret_returnone3^0'=ret_returnone3^post9, tmp^0'=tmp^post9, (1+a^1 == 0 /\ tmp^post10-tmp^post9 == 0 /\ -a^post10+a^0 == 0 /\ -tmp^post10+tmp^0 == 0 /\ -1+ret_returnone3^post9 == 0 /\ ret_returnone3^0-ret_returnone3^post10 == 0 /\ a^post9-ret_returnone3^post9 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 8 9

Simplified Transitions

Start location: l6
Program variables: a^0 ret_returnone3^0 tmp^0
  11: l0 -> l1 : 3-a^0 <= 0, cost: 1
  12: l0 -> l1 : -1+a^0 <= 0, cost: 1
  13: l0 -> l2 : tmp^0'=1, (2-a^0 <= 0 /\ 2-a^0 == 0 /\ -2+a^0 <= 0), cost: 1
  18: l1 -> l2 : tmp^0'=0, T, cost: 1
  14: l2 -> l3 : T, cost: 1
  15: l4 -> l0 : 2-a^0 <= 0, cost: 1
  16: l4 -> l0 : a^0 <= 0, cost: 1
  17: l4 -> l2 : tmp^0'=1, (1-a^0 <= 0 /\ 1-a^0 == 0 /\ -1+a^0 <= 0), cost: 1
  19: l6 -> l4 : a^0'=1, ret_returnone3^0'=1, T, cost: 1

	Propagated Equalities

	Original rule:
	l0 -> l1 : a^0'=a^post1, ret_returnone3^0'=ret_returnone3^post1, tmp^0'=tmp^post1, (3-a^0 <= 0 /\ -ret_returnone3^post1+ret_returnone3^0 == 0 /\ -tmp^post1+tmp^0 == 0 /\ a^0-a^post1 == 0), cost: 1
	New rule:
	l0 -> l1 : a^0'=a^0, ret_returnone3^0'=ret_returnone3^0, tmp^0'=tmp^0, (0 == 0 /\ 3-a^0 <= 0), cost: 1
	
		propagated equality ret_returnone3^post1 = ret_returnone3^0
		
		propagated equality tmp^post1 = tmp^0
		
		propagated equality a^post1 = a^0
		
	Simplified Guard

	Original rule:
	l0 -> l1 : a^0'=a^0, ret_returnone3^0'=ret_returnone3^0, tmp^0'=tmp^0, (0 == 0 /\ 3-a^0 <= 0), cost: 1
	New rule:
	l0 -> l1 : a^0'=a^0, ret_returnone3^0'=ret_returnone3^0, tmp^0'=tmp^0, 3-a^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l1 : a^0'=a^0, ret_returnone3^0'=ret_returnone3^0, tmp^0'=tmp^0, 3-a^0 <= 0, cost: 1
	New rule:
	l0 -> l1 : 3-a^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l0 -> l1 : a^0'=a^post2, ret_returnone3^0'=ret_returnone3^post2, tmp^0'=tmp^post2, (a^0-a^post2 == 0 /\ -1+a^0 <= 0 /\ -tmp^post2+tmp^0 == 0 /\ -ret_returnone3^post2+ret_returnone3^0 == 0), cost: 1
	New rule:
	l0 -> l1 : a^0'=a^0, ret_returnone3^0'=ret_returnone3^0, tmp^0'=tmp^0, (0 == 0 /\ -1+a^0 <= 0), cost: 1
	
		propagated equality a^post2 = a^0
		
		propagated equality tmp^post2 = tmp^0
		
		propagated equality ret_returnone3^post2 = ret_returnone3^0
		
	Simplified Guard

	Original rule:
	l0 -> l1 : a^0'=a^0, ret_returnone3^0'=ret_returnone3^0, tmp^0'=tmp^0, (0 == 0 /\ -1+a^0 <= 0), cost: 1
	New rule:
	l0 -> l1 : a^0'=a^0, ret_returnone3^0'=ret_returnone3^0, tmp^0'=tmp^0, -1+a^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l1 : a^0'=a^0, ret_returnone3^0'=ret_returnone3^0, tmp^0'=tmp^0, -1+a^0 <= 0, cost: 1
	New rule:
	l0 -> l1 : -1+a^0 <= 0, cost: 1
	
	made implied equalities explicit

	Original rule:
	l0 -> l2 : a^0'=a^post3, ret_returnone3^0'=ret_returnone3^post3, tmp^0'=tmp^post3, (2-a^0 <= 0 /\ a^0-a^post3 == 0 /\ -2+a^0 <= 0 /\ -1+tmp^post3 == 0 /\ -ret_returnone3^post3+ret_returnone3^0 == 0), cost: 1
	New rule:
	l0 -> l2 : a^0'=a^post3, ret_returnone3^0'=ret_returnone3^post3, tmp^0'=tmp^post3, (2-a^0 <= 0 /\ 2-a^0 == 0 /\ a^0-a^post3 == 0 /\ -2+a^0 <= 0 /\ -1+tmp^post3 == 0 /\ -ret_returnone3^post3+ret_returnone3^0 == 0), cost: 1
	
	Propagated Equalities

	Original rule:
	l0 -> l2 : a^0'=a^post3, ret_returnone3^0'=ret_returnone3^post3, tmp^0'=tmp^post3, (2-a^0 <= 0 /\ 2-a^0 == 0 /\ a^0-a^post3 == 0 /\ -2+a^0 <= 0 /\ -1+tmp^post3 == 0 /\ -ret_returnone3^post3+ret_returnone3^0 == 0), cost: 1
	New rule:
	l0 -> l2 : a^0'=a^0, ret_returnone3^0'=ret_returnone3^0, tmp^0'=1, (0 == 0 /\ 2-a^0 <= 0 /\ 2-a^0 == 0 /\ -2+a^0 <= 0), cost: 1
	
		propagated equality a^post3 = a^0
		
		propagated equality tmp^post3 = 1
		
		propagated equality ret_returnone3^post3 = ret_returnone3^0
		
	Simplified Guard

	Original rule:
	l0 -> l2 : a^0'=a^0, ret_returnone3^0'=ret_returnone3^0, tmp^0'=1, (0 == 0 /\ 2-a^0 <= 0 /\ 2-a^0 == 0 /\ -2+a^0 <= 0), cost: 1
	New rule:
	l0 -> l2 : a^0'=a^0, ret_returnone3^0'=ret_returnone3^0, tmp^0'=1, (2-a^0 <= 0 /\ 2-a^0 == 0 /\ -2+a^0 <= 0), cost: 1
	
	made implied equalities explicit

	Original rule:
	l0 -> l2 : a^0'=a^0, ret_returnone3^0'=ret_returnone3^0, tmp^0'=1, (2-a^0 <= 0 /\ 2-a^0 == 0 /\ -2+a^0 <= 0), cost: 1
	New rule:
	l0 -> l2 : a^0'=a^0, ret_returnone3^0'=ret_returnone3^0, tmp^0'=1, (2-a^0 <= 0 /\ 2-a^0 == 0 /\ -2+a^0 <= 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l2 : a^0'=a^0, ret_returnone3^0'=ret_returnone3^0, tmp^0'=1, (2-a^0 <= 0 /\ 2-a^0 == 0 /\ -2+a^0 <= 0), cost: 1
	New rule:
	l0 -> l2 : tmp^0'=1, (2-a^0 <= 0 /\ 2-a^0 == 0 /\ -2+a^0 <= 0), cost: 1
	
	Propagated Equalities

	Original rule:
	l2 -> l3 : a^0'=a^post4, ret_returnone3^0'=ret_returnone3^post4, tmp^0'=tmp^post4, (-ret_returnone3^post4+ret_returnone3^0 == 0 /\ -tmp^post4+tmp^0 == 0 /\ a^0-a^post4 == 0), cost: 1
	New rule:
	l2 -> l3 : a^0'=a^0, ret_returnone3^0'=ret_returnone3^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	
		propagated equality ret_returnone3^post4 = ret_returnone3^0
		
		propagated equality tmp^post4 = tmp^0
		
		propagated equality a^post4 = a^0
		
	Simplified Guard

	Original rule:
	l2 -> l3 : a^0'=a^0, ret_returnone3^0'=ret_returnone3^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	New rule:
	l2 -> l3 : a^0'=a^0, ret_returnone3^0'=ret_returnone3^0, tmp^0'=tmp^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l2 -> l3 : a^0'=a^0, ret_returnone3^0'=ret_returnone3^0, tmp^0'=tmp^0, T, cost: 1
	New rule:
	l2 -> l3 : T, cost: 1
	
	Propagated Equalities

	Original rule:
	l4 -> l0 : a^0'=a^post5, ret_returnone3^0'=ret_returnone3^post5, tmp^0'=tmp^post5, (2-a^0 <= 0 /\ ret_returnone3^0-ret_returnone3^post5 == 0 /\ -tmp^post5+tmp^0 == 0 /\ -a^post5+a^0 == 0), cost: 1
	New rule:
	l4 -> l0 : a^0'=a^0, ret_returnone3^0'=ret_returnone3^0, tmp^0'=tmp^0, (0 == 0 /\ 2-a^0 <= 0), cost: 1
	
		propagated equality ret_returnone3^post5 = ret_returnone3^0
		
		propagated equality tmp^post5 = tmp^0
		
		propagated equality a^post5 = a^0
		
	Simplified Guard

	Original rule:
	l4 -> l0 : a^0'=a^0, ret_returnone3^0'=ret_returnone3^0, tmp^0'=tmp^0, (0 == 0 /\ 2-a^0 <= 0), cost: 1
	New rule:
	l4 -> l0 : a^0'=a^0, ret_returnone3^0'=ret_returnone3^0, tmp^0'=tmp^0, 2-a^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l4 -> l0 : a^0'=a^0, ret_returnone3^0'=ret_returnone3^0, tmp^0'=tmp^0, 2-a^0 <= 0, cost: 1
	New rule:
	l4 -> l0 : 2-a^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l4 -> l0 : a^0'=a^post6, ret_returnone3^0'=ret_returnone3^post6, tmp^0'=tmp^post6, (-a^post6+a^0 == 0 /\ -tmp^post6+tmp^0 == 0 /\ ret_returnone3^0-ret_returnone3^post6 == 0 /\ a^0 <= 0), cost: 1
	New rule:
	l4 -> l0 : a^0'=a^0, ret_returnone3^0'=ret_returnone3^0, tmp^0'=tmp^0, (0 == 0 /\ a^0 <= 0), cost: 1
	
		propagated equality a^post6 = a^0
		
		propagated equality tmp^post6 = tmp^0
		
		propagated equality ret_returnone3^post6 = ret_returnone3^0
		
	Simplified Guard

	Original rule:
	l4 -> l0 : a^0'=a^0, ret_returnone3^0'=ret_returnone3^0, tmp^0'=tmp^0, (0 == 0 /\ a^0 <= 0), cost: 1
	New rule:
	l4 -> l0 : a^0'=a^0, ret_returnone3^0'=ret_returnone3^0, tmp^0'=tmp^0, a^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l4 -> l0 : a^0'=a^0, ret_returnone3^0'=ret_returnone3^0, tmp^0'=tmp^0, a^0 <= 0, cost: 1
	New rule:
	l4 -> l0 : a^0 <= 0, cost: 1
	
	made implied equalities explicit

	Original rule:
	l4 -> l2 : a^0'=a^post7, ret_returnone3^0'=ret_returnone3^post7, tmp^0'=tmp^post7, (-1+tmp^post7 == 0 /\ 1-a^0 <= 0 /\ -1+a^0 <= 0 /\ -a^post7+a^0 == 0 /\ ret_returnone3^0-ret_returnone3^post7 == 0), cost: 1
	New rule:
	l4 -> l2 : a^0'=a^post7, ret_returnone3^0'=ret_returnone3^post7, tmp^0'=tmp^post7, (-1+tmp^post7 == 0 /\ 1-a^0 <= 0 /\ 1-a^0 == 0 /\ -1+a^0 <= 0 /\ -a^post7+a^0 == 0 /\ ret_returnone3^0-ret_returnone3^post7 == 0), cost: 1
	
	Propagated Equalities

	Original rule:
	l4 -> l2 : a^0'=a^post7, ret_returnone3^0'=ret_returnone3^post7, tmp^0'=tmp^post7, (-1+tmp^post7 == 0 /\ 1-a^0 <= 0 /\ 1-a^0 == 0 /\ -1+a^0 <= 0 /\ -a^post7+a^0 == 0 /\ ret_returnone3^0-ret_returnone3^post7 == 0), cost: 1
	New rule:
	l4 -> l2 : a^0'=a^0, ret_returnone3^0'=ret_returnone3^0, tmp^0'=1, (0 == 0 /\ 1-a^0 <= 0 /\ 1-a^0 == 0 /\ -1+a^0 <= 0), cost: 1
	
		propagated equality tmp^post7 = 1
		
		propagated equality a^post7 = a^0
		
		propagated equality ret_returnone3^post7 = ret_returnone3^0
		
	Simplified Guard

	Original rule:
	l4 -> l2 : a^0'=a^0, ret_returnone3^0'=ret_returnone3^0, tmp^0'=1, (0 == 0 /\ 1-a^0 <= 0 /\ 1-a^0 == 0 /\ -1+a^0 <= 0), cost: 1
	New rule:
	l4 -> l2 : a^0'=a^0, ret_returnone3^0'=ret_returnone3^0, tmp^0'=1, (1-a^0 <= 0 /\ 1-a^0 == 0 /\ -1+a^0 <= 0), cost: 1
	
	made implied equalities explicit

	Original rule:
	l4 -> l2 : a^0'=a^0, ret_returnone3^0'=ret_returnone3^0, tmp^0'=1, (1-a^0 <= 0 /\ 1-a^0 == 0 /\ -1+a^0 <= 0), cost: 1
	New rule:
	l4 -> l2 : a^0'=a^0, ret_returnone3^0'=ret_returnone3^0, tmp^0'=1, (1-a^0 <= 0 /\ 1-a^0 == 0 /\ -1+a^0 <= 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	l4 -> l2 : a^0'=a^0, ret_returnone3^0'=ret_returnone3^0, tmp^0'=1, (1-a^0 <= 0 /\ 1-a^0 == 0 /\ -1+a^0 <= 0), cost: 1
	New rule:
	l4 -> l2 : tmp^0'=1, (1-a^0 <= 0 /\ 1-a^0 == 0 /\ -1+a^0 <= 0), cost: 1
	
	Propagated Equalities

	Original rule:
	l1 -> l2 : a^0'=a^post8, ret_returnone3^0'=ret_returnone3^post8, tmp^0'=tmp^post8, (ret_returnone3^0-ret_returnone3^post8 == 0 /\ -a^post8+a^0 == 0 /\ tmp^post8 == 0), cost: 1
	New rule:
	l1 -> l2 : a^0'=a^0, ret_returnone3^0'=ret_returnone3^0, tmp^0'=0, 0 == 0, cost: 1
	
		propagated equality ret_returnone3^post8 = ret_returnone3^0
		
		propagated equality a^post8 = a^0
		
		propagated equality tmp^post8 = 0
		
	Simplified Guard

	Original rule:
	l1 -> l2 : a^0'=a^0, ret_returnone3^0'=ret_returnone3^0, tmp^0'=0, 0 == 0, cost: 1
	New rule:
	l1 -> l2 : a^0'=a^0, ret_returnone3^0'=ret_returnone3^0, tmp^0'=0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l1 -> l2 : a^0'=a^0, ret_returnone3^0'=ret_returnone3^0, tmp^0'=0, T, cost: 1
	New rule:
	l1 -> l2 : tmp^0'=0, T, cost: 1
	
	Propagated Equalities

	Original rule:
	l6 -> l4 : a^0'=a^post9, ret_returnone3^0'=ret_returnone3^post9, tmp^0'=tmp^post9, (1+a^1 == 0 /\ tmp^post10-tmp^post9 == 0 /\ -a^post10+a^0 == 0 /\ -tmp^post10+tmp^0 == 0 /\ -1+ret_returnone3^post9 == 0 /\ ret_returnone3^0-ret_returnone3^post10 == 0 /\ a^post9-ret_returnone3^post9 == 0), cost: 1
	New rule:
	l6 -> l4 : a^0'=1, ret_returnone3^0'=1, tmp^0'=tmp^post10, (0 == 0 /\ 1+a^1 == 0 /\ -a^post10+a^0 == 0 /\ -tmp^post10+tmp^0 == 0 /\ ret_returnone3^0-ret_returnone3^post10 == 0), cost: 1
	
		propagated equality tmp^post9 = tmp^post10
		
		propagated equality ret_returnone3^post9 = 1
		
		propagated equality a^post9 = 1
		
	Propagated Equalities

	Original rule:
	l6 -> l4 : a^0'=1, ret_returnone3^0'=1, tmp^0'=tmp^post10, (0 == 0 /\ 1+a^1 == 0 /\ -a^post10+a^0 == 0 /\ -tmp^post10+tmp^0 == 0 /\ ret_returnone3^0-ret_returnone3^post10 == 0), cost: 1
	New rule:
	l6 -> l4 : a^0'=1, ret_returnone3^0'=1, tmp^0'=tmp^0, 0 == 0, cost: 1
	
		propagated equality a^1 = -1
		
		propagated equality a^post10 = a^0
		
		propagated equality tmp^post10 = tmp^0
		
		propagated equality ret_returnone3^post10 = ret_returnone3^0
		
	Simplified Guard

	Original rule:
	l6 -> l4 : a^0'=1, ret_returnone3^0'=1, tmp^0'=tmp^0, 0 == 0, cost: 1
	New rule:
	l6 -> l4 : a^0'=1, ret_returnone3^0'=1, tmp^0'=tmp^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l6 -> l4 : a^0'=1, ret_returnone3^0'=1, tmp^0'=tmp^0, T, cost: 1
	New rule:
	l6 -> l4 : a^0'=1, ret_returnone3^0'=1, T, cost: 1

Step with 19

	Trace

	19[T]
	
	Blocked

	[{}, {}]

Step with 17

	Trace

	19[T], 17[(1-a^0 <= 0 /\ 1-a^0 == 0 /\ -1+a^0 <= 0)]
	
	Blocked

	[{}, {15[T], 16[T]}, {}]

Step with 14

	Trace

	19[T], 17[(1-a^0 <= 0 /\ 1-a^0 == 0 /\ -1+a^0 <= 0)], 14[T]
	
	Blocked

	[{}, {15[T], 16[T]}, {}, {}]

Backtrack

	Trace

	19[T], 17[(1-a^0 <= 0 /\ 1-a^0 == 0 /\ -1+a^0 <= 0)]
	
	Blocked

	[{}, {15[T], 16[T]}, {14[T]}]

Backtrack

	Trace

	19[T]
	
	Blocked

	[{}, {15[T], 16[T], 17[T]}]

Backtrack

	Trace

	Blocked

	[{19[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
