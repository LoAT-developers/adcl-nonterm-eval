YES

Solver Timeout: 4
Global Timeout: 300
No parsing errors!
Init Location: 0
Transitions:
<l0, l4, true>
<l1, l2, (arg2 > ~(1)) /\ (undef1 > ~(1)) /\ (arg1 > 0), par{arg1 -> undef1, arg2 -> undef2}>
<l2, l3, (arg1 > 1), par{arg1 -> 0, arg2 -> arg1}>
<l3, l2, (arg2 < 2), par{arg2 -> undef6}>
<l3, l3, (arg2 > 1), par{arg1 -> (arg1 + 1), arg2 -> (arg2 - 2)}>
<l4, l1, true, par{arg1 -> undef9, arg2 -> undef10}>

Fresh variables:
undef1, undef2, undef6, undef9, undef10, 

Undef variables:
undef1, undef2, undef6, undef9, undef10, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l3, (arg1 = 0) /\ (arg2 = undef1) /\ (undef10 > ~(1)) /\ (undef1 > ~(1)) /\ (undef9 > 0) /\ (undef1 > 1)>
<l3, l3, (arg2 < 2) /\ (arg1 > 1), par{arg1 -> 0, arg2 -> arg1}>
<l3, l3, (arg2 > 1), par{arg1 -> (arg1 + 1), arg2 -> (arg2 - 2)}>

Fresh variables:
undef1, undef2, undef6, undef9, undef10, 

Undef variables:
undef1, undef2, undef6, undef9, undef10, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l3, l3, arg2 <= 1 /\ 2 <= arg1, {arg1 -> 0, arg2 -> arg1, rest remain the same}>
<l3, l3, 2 <= arg2, {arg1 -> 1 + arg1, arg2 -> -2 + arg2, rest remain the same}>
Variables:
arg1, arg2

Precedence: 
Graph 0

Graph 1
<l0, l3, 1 <= undef9 /\ 0 <= undef10 /\ 2 <= undef1 /\ arg1 = 0 /\ arg2 = undef1, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 3 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.04348

Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.001048s

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.013464s
Trying to remove transition: <l3, l3, 2 <= arg2, {arg1 -> 1 + arg1, arg2 -> -2 + arg2, rest remain the same}>
Solving with 1 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 0.054835s
Time used: 0.05466
Trying to remove transition: <l3, l3, arg2 <= 1 /\ 2 <= arg1, {arg1 -> 0, arg2 -> arg1, rest remain the same}>
Solving with 1 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 0.017919s
Time used: 0.017194
Solving with 1 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 0.015852s
Time used: 0.015308

LOG: SAT solveNonLinear - Elapsed time: 0.015852s
Cost: 0; Total time: 0.015308
[33mTermination implied by a set of invariant(s):[0m
[36mInvariant at l3: 0 <= arg2[0m
[ Invariant Graph ]
[33mStrengthening and disabling transitions...[0m

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l3, l3, arg2 <= 1 /\ 0 <= arg2 /\ 2 <= arg1, {arg1 -> 0, arg2 -> arg1, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l3, l3, 2 <= arg2, {arg1 -> 1 + arg1, arg2 -> -2 + arg2, rest remain the same}>
[ Termination Graph ]
[33mStrengthening and disabling transitions...[0m

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l3, l3, arg2 <= 1 /\ 0 <= arg2 /\ 2 <= arg1, {arg1 -> 0, arg2 -> arg1, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l3, l3, 2 <= arg2, {arg1 -> 1 + arg1, arg2 -> -2 + arg2, rest remain the same}>
[33mRanking function: [36m3*arg1 + 2*arg2[0m
New Graphs: 
Transitions:
<l3, l3, 2 <= arg2, {arg1 -> 1 + arg1, arg2 -> -2 + arg2, rest remain the same}>
Variables:
arg1, arg2
Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000630s
[33mRanking function: [36m-1 + (1 / 2)*arg2[0m
New Graphs: 
INVARIANTS: 
3: 0 <= arg2 , 
Quasi-INVARIANTS to narrow Graph: 
3: 
[32mProgram Terminates[0m
