WORST_CASE(Omega(0),?)

Initial ITS
Start location: l6
   0: l0 -> l2 : deltext^0'=deltext^post0, delta_new^0'=delta_new^post0, wntext^0'=wntext^post0, deltaext_new^0'=deltaext_new^post0, delta^0'=delta^post0, wnt^0'=wnt^post0, deltaext^0'=deltaext^post0, (deltext^0-deltext^post0 == 0 /\ -delta_new^post0+delta_new^0 == 0 /\ -deltaext^post0+deltaext^0 == 0 /\ -wnt^post0+wnt^0 == 0 /\ 1-delta_new^0+delta^0 <= 0 /\ -delta^post0+delta^0 == 0 /\ deltaext_new^0-deltaext_new^post0 == 0 /\ wntext^0-wntext^post0 == 0), cost: 1
   1: l0 -> l2 : deltext^0'=deltext^post1, delta_new^0'=delta_new^post1, wntext^0'=wntext^post1, deltaext_new^0'=deltaext_new^post1, delta^0'=delta^post1, wnt^0'=wnt^post1, deltaext^0'=deltaext^post1, (-delta^post1+delta^0 == 0 /\ 1+delta_new^0-delta^0 <= 0 /\ wntext^0-wntext^post1 == 0 /\ deltext^0-deltext^post1 == 0 /\ delta_new^0-delta_new^post1 == 0 /\ -deltaext^post1+deltaext^0 == 0 /\ deltaext_new^0-deltaext_new^post1 == 0 /\ -wnt^post1+wnt^0 == 0), cost: 1
   3: l0 -> l3 : deltext^0'=deltext^post3, delta_new^0'=delta_new^post3, wntext^0'=wntext^post3, deltaext_new^0'=deltaext_new^post3, delta^0'=delta^post3, wnt^0'=wnt^post3, deltaext^0'=deltaext^post3, (-deltaext^post3+deltaext^0 == 0 /\ -wntext^post3+wntext^0 == 0 /\ delta_new^0-delta_new^post3 == 0 /\ deltext^0-deltext^post3 == 0 /\ -deltaext_new^post3+deltaext_new^0 == 0 /\ wnt^0-wnt^post3 == 0 /\ 1-deltaext_new^0+deltaext^0 <= 0 /\ delta^0-delta^post3 == 0), cost: 1
   4: l0 -> l3 : deltext^0'=deltext^post4, delta_new^0'=delta_new^post4, wntext^0'=wntext^post4, deltaext_new^0'=deltaext_new^post4, delta^0'=delta^post4, wnt^0'=wnt^post4, deltaext^0'=deltaext^post4, (-wntext^post4+wntext^0 == 0 /\ -deltaext^post4+deltaext^0 == 0 /\ deltext^0-deltext^post4 == 0 /\ 1+deltaext_new^0-deltaext^0 <= 0 /\ -deltaext_new^post4+deltaext_new^0 == 0 /\ delta^0-delta^post4 == 0 /\ wnt^0-wnt^post4 == 0 /\ delta_new^0-delta_new^post4 == 0), cost: 1
   2: l2 -> l1 : deltext^0'=deltext^post2, delta_new^0'=delta_new^post2, wntext^0'=wntext^post2, deltaext_new^0'=deltaext_new^post2, delta^0'=delta^post2, wnt^0'=wnt^post2, deltaext^0'=deltaext^post2, (delta_new^0-delta_new^post2 == 0 /\ deltext^0-deltext^post2 == 0 /\ -delta_new^0+delta^post2 == 0 /\ -wnt^post2+wnt^0 == 0 /\ wntext^0-wntext^post2 == 0 /\ -deltaext_new^post2+deltaext_new^0 == 0 /\ -deltaext_new^0+deltaext^post2 == 0), cost: 1
  10: l1 -> l4 : deltext^0'=deltext^post10, delta_new^0'=delta_new^post10, wntext^0'=wntext^post10, deltaext_new^0'=deltaext_new^post10, delta^0'=delta^post10, wnt^0'=wnt^post10, deltaext^0'=deltaext^post10, (3+wnt^0-2*deltaext^0 <= 0 /\ deltext^0-deltext^post10 == 0 /\ -wntext^post10+wntext^0 == 0 /\ deltaext_new^post10-deltaext^0 == 0 /\ -3-wnt^0+2*deltaext^0 <= 0 /\ wnt^0-wnt^post10 == 0 /\ delta_new^0-delta_new^post10 == 0 /\ -deltaext^post10+deltaext^0 == 0 /\ delta^0-delta^post10 == 0), cost: 1
  11: l1 -> l4 : deltext^0'=deltext^post11, delta_new^0'=delta_new^post11, wntext^0'=wntext^post11, deltaext_new^0'=deltaext_new^post11, delta^0'=delta^post11, wnt^0'=wnt^post11, deltaext^0'=deltaext^post11, (-deltaext^post11+deltaext^0 == 0 /\ 2+wnt^0-2*deltaext^0 <= 0 /\ delta^0-delta^post11 == 0 /\ -wntext^post11+wntext^0 == 0 /\ -wnt^post11+wnt^0 == 0 /\ deltext^0-deltext^post11 == 0 /\ -2-wnt^0+2*deltaext^0 <= 0 /\ -delta_new^post11+delta_new^0 == 0 /\ deltaext_new^post11-deltaext^0 == 0), cost: 1
  12: l1 -> l4 : deltext^0'=deltext^post12, delta_new^0'=delta_new^post12, wntext^0'=wntext^post12, deltaext_new^0'=deltaext_new^post12, delta^0'=delta^post12, wnt^0'=wnt^post12, deltaext^0'=deltaext^post12, (-deltaext^post12+deltaext^0 == 0 /\ wntext^0-wntext^post12 == 0 /\ -delta^post12+delta^0 == 0 /\ 1-deltaext^0+deltaext_new^post12 == 0 /\ delta_new^0-delta_new^post12 == 0 /\ deltext^0-deltext^post12 == 0 /\ -wnt^post12+wnt^0 == 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 1
  13: l1 -> l4 : deltext^0'=deltext^post13, delta_new^0'=delta_new^post13, wntext^0'=wntext^post13, deltaext_new^0'=deltaext_new^post13, delta^0'=delta^post13, wnt^0'=wnt^post13, deltaext^0'=deltaext^post13, (-wnt^post13+wnt^0 == 0 /\ -deltaext^post13+deltaext^0 == 0 /\ wntext^0-wntext^post13 == 0 /\ -1-wnt^0+2*deltaext^0 <= 0 /\ delta_new^0-delta_new^post13 == 0 /\ -delta^post13+delta^0 == 0 /\ deltext^0-deltext^post13 == 0 /\ -1+deltaext_new^post13-deltaext^0 == 0), cost: 1
   5: l3 -> l1 : deltext^0'=deltext^post5, delta_new^0'=delta_new^post5, wntext^0'=wntext^post5, deltaext_new^0'=deltaext_new^post5, delta^0'=delta^post5, wnt^0'=wnt^post5, deltaext^0'=deltaext^post5, (deltaext_new^0-deltaext_new^post5 == 0 /\ -wntext^post5+wntext^0 == 0 /\ deltaext^post5-deltaext_new^0 == 0 /\ -wnt^post5+wnt^0 == 0 /\ -delta_new^0+delta^post5 == 0 /\ delta_new^0-delta_new^post5 == 0 /\ deltext^0-deltext^post5 == 0), cost: 1
   6: l4 -> l0 : deltext^0'=deltext^post6, delta_new^0'=delta_new^post6, wntext^0'=wntext^post6, deltaext_new^0'=deltaext_new^post6, delta^0'=delta^post6, wnt^0'=wnt^post6, deltaext^0'=deltaext^post6, (deltext^0-deltext^post6 == 0 /\ 1+wntext^0-2*delta^0+deltaext^0 <= 0 /\ -delta^post6+delta^0 == 0 /\ -wnt^post6+wnt^0 == 0 /\ deltaext_new^0-deltaext_new^post6 == 0 /\ -deltaext^post6+deltaext^0 == 0 /\ -1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ wntext^0-wntext^post6 == 0 /\ delta_new^post6-delta^0 == 0), cost: 1
   7: l4 -> l0 : deltext^0'=deltext^post7, delta_new^0'=delta_new^post7, wntext^0'=wntext^post7, deltaext_new^0'=deltaext_new^post7, delta^0'=delta^post7, wnt^0'=wnt^post7, deltaext^0'=deltaext^post7, (delta_new^post7-delta^0 == 0 /\ -wntext^0+2*delta^0-deltaext^0 <= 0 /\ -deltaext_new^post7+deltaext_new^0 == 0 /\ -deltaext^post7+deltaext^0 == 0 /\ -wnt^post7+wnt^0 == 0 /\ wntext^0-2*delta^0+deltaext^0 <= 0 /\ wntext^0-wntext^post7 == 0 /\ deltext^0-deltext^post7 == 0 /\ -delta^post7+delta^0 == 0), cost: 1
   8: l4 -> l0 : deltext^0'=deltext^post8, delta_new^0'=delta_new^post8, wntext^0'=wntext^post8, deltaext_new^0'=deltaext_new^post8, delta^0'=delta^post8, wnt^0'=wnt^post8, deltaext^0'=deltaext^post8, (-wnt^post8+wnt^0 == 0 /\ 2+wntext^0-2*delta^0+deltaext^0 <= 0 /\ -delta^post8+delta^0 == 0 /\ deltaext^0-deltaext^post8 == 0 /\ -deltaext_new^post8+deltaext_new^0 == 0 /\ 1+delta_new^post8-delta^0 == 0 /\ wntext^0-wntext^post8 == 0 /\ deltext^0-deltext^post8 == 0), cost: 1
   9: l4 -> l0 : deltext^0'=deltext^post9, delta_new^0'=delta_new^post9, wntext^0'=wntext^post9, deltaext_new^0'=deltaext_new^post9, delta^0'=delta^post9, wnt^0'=wnt^post9, deltaext^0'=deltaext^post9, (1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ -1-delta^0+delta_new^post9 == 0 /\ deltext^0-deltext^post9 == 0 /\ deltaext^0-deltaext^post9 == 0 /\ wnt^0-wnt^post9 == 0 /\ wntext^0-wntext^post9 == 0 /\ -deltaext_new^post9+deltaext_new^0 == 0 /\ -delta^post9+delta^0 == 0), cost: 1
  14: l5 -> l1 : deltext^0'=deltext^post14, delta_new^0'=delta_new^post14, wntext^0'=wntext^post14, deltaext_new^0'=deltaext_new^post14, delta^0'=delta^post14, wnt^0'=wnt^post14, deltaext^0'=deltaext^post14, (-wnt^post14+wnt^0 == 0 /\ -wntext^0 <= 0 /\ -delta^post14+delta^0 == 0 /\ -3+deltext^0 <= 0 /\ wntext^0-wntext^post14 == 0 /\ -3+delta^0 <= 0 /\ -deltaext^0 <= 0 /\ -3+wnt^0 <= 0 /\ delta_new^0-delta_new^post14 == 0 /\ -wnt^0 <= 0 /\ -deltaext^post14+deltaext^0 == 0 /\ -delta^0 <= 0 /\ -deltext^post14+deltext^0 == 0 /\ -3+wntext^0 <= 0 /\ deltaext_new^0-deltaext_new^post14 == 0), cost: 1
  15: l6 -> l5 : deltext^0'=deltext^post15, delta_new^0'=delta_new^post15, wntext^0'=wntext^post15, deltaext_new^0'=deltaext_new^post15, delta^0'=delta^post15, wnt^0'=wnt^post15, deltaext^0'=deltaext^post15, (deltaext^0-deltaext^post15 == 0 /\ -delta^post15+delta^0 == 0 /\ -deltaext_new^post15+deltaext_new^0 == 0 /\ wntext^0-wntext^post15 == 0 /\ -wnt^post15+wnt^0 == 0 /\ delta_new^0-delta_new^post15 == 0 /\ deltext^0-deltext^post15 == 0), cost: 1


Applied preprocessing
Original rule:
l0 -> l2 : deltext^0'=deltext^post0, delta_new^0'=delta_new^post0, wntext^0'=wntext^post0, deltaext_new^0'=deltaext_new^post0, delta^0'=delta^post0, wnt^0'=wnt^post0, deltaext^0'=deltaext^post0, (deltext^0-deltext^post0 == 0 /\ -delta_new^post0+delta_new^0 == 0 /\ -deltaext^post0+deltaext^0 == 0 /\ -wnt^post0+wnt^0 == 0 /\ 1-delta_new^0+delta^0 <= 0 /\ -delta^post0+delta^0 == 0 /\ deltaext_new^0-deltaext_new^post0 == 0 /\ wntext^0-wntext^post0 == 0), cost: 1
New rule:
l0 -> l2 : 1-delta_new^0+delta^0 <= 0, cost: 1

Applied preprocessing
Original rule:
l0 -> l2 : deltext^0'=deltext^post1, delta_new^0'=delta_new^post1, wntext^0'=wntext^post1, deltaext_new^0'=deltaext_new^post1, delta^0'=delta^post1, wnt^0'=wnt^post1, deltaext^0'=deltaext^post1, (-delta^post1+delta^0 == 0 /\ 1+delta_new^0-delta^0 <= 0 /\ wntext^0-wntext^post1 == 0 /\ deltext^0-deltext^post1 == 0 /\ delta_new^0-delta_new^post1 == 0 /\ -deltaext^post1+deltaext^0 == 0 /\ deltaext_new^0-deltaext_new^post1 == 0 /\ -wnt^post1+wnt^0 == 0), cost: 1
New rule:
l0 -> l2 : 1+delta_new^0-delta^0 <= 0, cost: 1

Applied preprocessing
Original rule:
l2 -> l1 : deltext^0'=deltext^post2, delta_new^0'=delta_new^post2, wntext^0'=wntext^post2, deltaext_new^0'=deltaext_new^post2, delta^0'=delta^post2, wnt^0'=wnt^post2, deltaext^0'=deltaext^post2, (delta_new^0-delta_new^post2 == 0 /\ deltext^0-deltext^post2 == 0 /\ -delta_new^0+delta^post2 == 0 /\ -wnt^post2+wnt^0 == 0 /\ wntext^0-wntext^post2 == 0 /\ -deltaext_new^post2+deltaext_new^0 == 0 /\ -deltaext_new^0+deltaext^post2 == 0), cost: 1
New rule:
l2 -> l1 : delta^0'=delta_new^0, deltaext^0'=deltaext_new^0, TRUE, cost: 1

Applied preprocessing
Original rule:
l0 -> l3 : deltext^0'=deltext^post3, delta_new^0'=delta_new^post3, wntext^0'=wntext^post3, deltaext_new^0'=deltaext_new^post3, delta^0'=delta^post3, wnt^0'=wnt^post3, deltaext^0'=deltaext^post3, (-deltaext^post3+deltaext^0 == 0 /\ -wntext^post3+wntext^0 == 0 /\ delta_new^0-delta_new^post3 == 0 /\ deltext^0-deltext^post3 == 0 /\ -deltaext_new^post3+deltaext_new^0 == 0 /\ wnt^0-wnt^post3 == 0 /\ 1-deltaext_new^0+deltaext^0 <= 0 /\ delta^0-delta^post3 == 0), cost: 1
New rule:
l0 -> l3 : 1-deltaext_new^0+deltaext^0 <= 0, cost: 1

Applied preprocessing
Original rule:
l0 -> l3 : deltext^0'=deltext^post4, delta_new^0'=delta_new^post4, wntext^0'=wntext^post4, deltaext_new^0'=deltaext_new^post4, delta^0'=delta^post4, wnt^0'=wnt^post4, deltaext^0'=deltaext^post4, (-wntext^post4+wntext^0 == 0 /\ -deltaext^post4+deltaext^0 == 0 /\ deltext^0-deltext^post4 == 0 /\ 1+deltaext_new^0-deltaext^0 <= 0 /\ -deltaext_new^post4+deltaext_new^0 == 0 /\ delta^0-delta^post4 == 0 /\ wnt^0-wnt^post4 == 0 /\ delta_new^0-delta_new^post4 == 0), cost: 1
New rule:
l0 -> l3 : 1+deltaext_new^0-deltaext^0 <= 0, cost: 1

Applied preprocessing
Original rule:
l3 -> l1 : deltext^0'=deltext^post5, delta_new^0'=delta_new^post5, wntext^0'=wntext^post5, deltaext_new^0'=deltaext_new^post5, delta^0'=delta^post5, wnt^0'=wnt^post5, deltaext^0'=deltaext^post5, (deltaext_new^0-deltaext_new^post5 == 0 /\ -wntext^post5+wntext^0 == 0 /\ deltaext^post5-deltaext_new^0 == 0 /\ -wnt^post5+wnt^0 == 0 /\ -delta_new^0+delta^post5 == 0 /\ delta_new^0-delta_new^post5 == 0 /\ deltext^0-deltext^post5 == 0), cost: 1
New rule:
l3 -> l1 : delta^0'=delta_new^0, deltaext^0'=deltaext_new^0, TRUE, cost: 1

Applied preprocessing
Original rule:
l4 -> l0 : deltext^0'=deltext^post6, delta_new^0'=delta_new^post6, wntext^0'=wntext^post6, deltaext_new^0'=deltaext_new^post6, delta^0'=delta^post6, wnt^0'=wnt^post6, deltaext^0'=deltaext^post6, (deltext^0-deltext^post6 == 0 /\ 1+wntext^0-2*delta^0+deltaext^0 <= 0 /\ -delta^post6+delta^0 == 0 /\ -wnt^post6+wnt^0 == 0 /\ deltaext_new^0-deltaext_new^post6 == 0 /\ -deltaext^post6+deltaext^0 == 0 /\ -1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ wntext^0-wntext^post6 == 0 /\ delta_new^post6-delta^0 == 0), cost: 1
New rule:
l4 -> l0 : delta_new^0'=delta^0, 1+wntext^0-2*delta^0+deltaext^0 == 0, cost: 1

Applied preprocessing
Original rule:
l4 -> l0 : deltext^0'=deltext^post7, delta_new^0'=delta_new^post7, wntext^0'=wntext^post7, deltaext_new^0'=deltaext_new^post7, delta^0'=delta^post7, wnt^0'=wnt^post7, deltaext^0'=deltaext^post7, (delta_new^post7-delta^0 == 0 /\ -wntext^0+2*delta^0-deltaext^0 <= 0 /\ -deltaext_new^post7+deltaext_new^0 == 0 /\ -deltaext^post7+deltaext^0 == 0 /\ -wnt^post7+wnt^0 == 0 /\ wntext^0-2*delta^0+deltaext^0 <= 0 /\ wntext^0-wntext^post7 == 0 /\ deltext^0-deltext^post7 == 0 /\ -delta^post7+delta^0 == 0), cost: 1
New rule:
l4 -> l0 : delta_new^0'=delta^0, -wntext^0+2*delta^0-deltaext^0 == 0, cost: 1

Applied preprocessing
Original rule:
l4 -> l0 : deltext^0'=deltext^post8, delta_new^0'=delta_new^post8, wntext^0'=wntext^post8, deltaext_new^0'=deltaext_new^post8, delta^0'=delta^post8, wnt^0'=wnt^post8, deltaext^0'=deltaext^post8, (-wnt^post8+wnt^0 == 0 /\ 2+wntext^0-2*delta^0+deltaext^0 <= 0 /\ -delta^post8+delta^0 == 0 /\ deltaext^0-deltaext^post8 == 0 /\ -deltaext_new^post8+deltaext_new^0 == 0 /\ 1+delta_new^post8-delta^0 == 0 /\ wntext^0-wntext^post8 == 0 /\ deltext^0-deltext^post8 == 0), cost: 1
New rule:
l4 -> l0 : delta_new^0'=-1+delta^0, 2+wntext^0-2*delta^0+deltaext^0 <= 0, cost: 1

Applied preprocessing
Original rule:
l4 -> l0 : deltext^0'=deltext^post9, delta_new^0'=delta_new^post9, wntext^0'=wntext^post9, deltaext_new^0'=deltaext_new^post9, delta^0'=delta^post9, wnt^0'=wnt^post9, deltaext^0'=deltaext^post9, (1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ -1-delta^0+delta_new^post9 == 0 /\ deltext^0-deltext^post9 == 0 /\ deltaext^0-deltaext^post9 == 0 /\ wnt^0-wnt^post9 == 0 /\ wntext^0-wntext^post9 == 0 /\ -deltaext_new^post9+deltaext_new^0 == 0 /\ -delta^post9+delta^0 == 0), cost: 1
New rule:
l4 -> l0 : delta_new^0'=1+delta^0, 1-wntext^0+2*delta^0-deltaext^0 <= 0, cost: 1

Applied preprocessing
Original rule:
l1 -> l4 : deltext^0'=deltext^post10, delta_new^0'=delta_new^post10, wntext^0'=wntext^post10, deltaext_new^0'=deltaext_new^post10, delta^0'=delta^post10, wnt^0'=wnt^post10, deltaext^0'=deltaext^post10, (3+wnt^0-2*deltaext^0 <= 0 /\ deltext^0-deltext^post10 == 0 /\ -wntext^post10+wntext^0 == 0 /\ deltaext_new^post10-deltaext^0 == 0 /\ -3-wnt^0+2*deltaext^0 <= 0 /\ wnt^0-wnt^post10 == 0 /\ delta_new^0-delta_new^post10 == 0 /\ -deltaext^post10+deltaext^0 == 0 /\ delta^0-delta^post10 == 0), cost: 1
New rule:
l1 -> l4 : deltaext_new^0'=deltaext^0, 3+wnt^0-2*deltaext^0 == 0, cost: 1

Applied preprocessing
Original rule:
l1 -> l4 : deltext^0'=deltext^post11, delta_new^0'=delta_new^post11, wntext^0'=wntext^post11, deltaext_new^0'=deltaext_new^post11, delta^0'=delta^post11, wnt^0'=wnt^post11, deltaext^0'=deltaext^post11, (-deltaext^post11+deltaext^0 == 0 /\ 2+wnt^0-2*deltaext^0 <= 0 /\ delta^0-delta^post11 == 0 /\ -wntext^post11+wntext^0 == 0 /\ -wnt^post11+wnt^0 == 0 /\ deltext^0-deltext^post11 == 0 /\ -2-wnt^0+2*deltaext^0 <= 0 /\ -delta_new^post11+delta_new^0 == 0 /\ deltaext_new^post11-deltaext^0 == 0), cost: 1
New rule:
l1 -> l4 : deltaext_new^0'=deltaext^0, 2+wnt^0-2*deltaext^0 == 0, cost: 1

Applied preprocessing
Original rule:
l1 -> l4 : deltext^0'=deltext^post12, delta_new^0'=delta_new^post12, wntext^0'=wntext^post12, deltaext_new^0'=deltaext_new^post12, delta^0'=delta^post12, wnt^0'=wnt^post12, deltaext^0'=deltaext^post12, (-deltaext^post12+deltaext^0 == 0 /\ wntext^0-wntext^post12 == 0 /\ -delta^post12+delta^0 == 0 /\ 1-deltaext^0+deltaext_new^post12 == 0 /\ delta_new^0-delta_new^post12 == 0 /\ deltext^0-deltext^post12 == 0 /\ -wnt^post12+wnt^0 == 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 1
New rule:
l1 -> l4 : deltaext_new^0'=-1+deltaext^0, 4+wnt^0-2*deltaext^0 <= 0, cost: 1

Applied preprocessing
Original rule:
l1 -> l4 : deltext^0'=deltext^post13, delta_new^0'=delta_new^post13, wntext^0'=wntext^post13, deltaext_new^0'=deltaext_new^post13, delta^0'=delta^post13, wnt^0'=wnt^post13, deltaext^0'=deltaext^post13, (-wnt^post13+wnt^0 == 0 /\ -deltaext^post13+deltaext^0 == 0 /\ wntext^0-wntext^post13 == 0 /\ -1-wnt^0+2*deltaext^0 <= 0 /\ delta_new^0-delta_new^post13 == 0 /\ -delta^post13+delta^0 == 0 /\ deltext^0-deltext^post13 == 0 /\ -1+deltaext_new^post13-deltaext^0 == 0), cost: 1
New rule:
l1 -> l4 : deltaext_new^0'=1+deltaext^0, -1-wnt^0+2*deltaext^0 <= 0, cost: 1

Applied preprocessing
Original rule:
l5 -> l1 : deltext^0'=deltext^post14, delta_new^0'=delta_new^post14, wntext^0'=wntext^post14, deltaext_new^0'=deltaext_new^post14, delta^0'=delta^post14, wnt^0'=wnt^post14, deltaext^0'=deltaext^post14, (-wnt^post14+wnt^0 == 0 /\ -wntext^0 <= 0 /\ -delta^post14+delta^0 == 0 /\ -3+deltext^0 <= 0 /\ wntext^0-wntext^post14 == 0 /\ -3+delta^0 <= 0 /\ -deltaext^0 <= 0 /\ -3+wnt^0 <= 0 /\ delta_new^0-delta_new^post14 == 0 /\ -wnt^0 <= 0 /\ -deltaext^post14+deltaext^0 == 0 /\ -delta^0 <= 0 /\ -deltext^post14+deltext^0 == 0 /\ -3+wntext^0 <= 0 /\ deltaext_new^0-deltaext_new^post14 == 0), cost: 1
New rule:
l5 -> l1 : (-3+deltext^0 <= 0 /\ -3+delta^0 <= 0 /\ wntext^0 >= 0 /\ -3+wnt^0 <= 0 /\ delta^0 >= 0 /\ wnt^0 >= 0 /\ deltaext^0 >= 0 /\ -3+wntext^0 <= 0), cost: 1

Applied preprocessing
Original rule:
l6 -> l5 : deltext^0'=deltext^post15, delta_new^0'=delta_new^post15, wntext^0'=wntext^post15, deltaext_new^0'=deltaext_new^post15, delta^0'=delta^post15, wnt^0'=wnt^post15, deltaext^0'=deltaext^post15, (deltaext^0-deltaext^post15 == 0 /\ -delta^post15+delta^0 == 0 /\ -deltaext_new^post15+deltaext_new^0 == 0 /\ wntext^0-wntext^post15 == 0 /\ -wnt^post15+wnt^0 == 0 /\ delta_new^0-delta_new^post15 == 0 /\ deltext^0-deltext^post15 == 0), cost: 1
New rule:
l6 -> l5 : TRUE, cost: 1

Simplified rules
Start location: l6
  16: l0 -> l2 : 1-delta_new^0+delta^0 <= 0, cost: 1
  17: l0 -> l2 : 1+delta_new^0-delta^0 <= 0, cost: 1
  19: l0 -> l3 : 1-deltaext_new^0+deltaext^0 <= 0, cost: 1
  20: l0 -> l3 : 1+deltaext_new^0-deltaext^0 <= 0, cost: 1
  18: l2 -> l1 : delta^0'=delta_new^0, deltaext^0'=deltaext_new^0, TRUE, cost: 1
  26: l1 -> l4 : deltaext_new^0'=deltaext^0, 3+wnt^0-2*deltaext^0 == 0, cost: 1
  27: l1 -> l4 : deltaext_new^0'=deltaext^0, 2+wnt^0-2*deltaext^0 == 0, cost: 1
  28: l1 -> l4 : deltaext_new^0'=-1+deltaext^0, 4+wnt^0-2*deltaext^0 <= 0, cost: 1
  29: l1 -> l4 : deltaext_new^0'=1+deltaext^0, -1-wnt^0+2*deltaext^0 <= 0, cost: 1
  21: l3 -> l1 : delta^0'=delta_new^0, deltaext^0'=deltaext_new^0, TRUE, cost: 1
  22: l4 -> l0 : delta_new^0'=delta^0, 1+wntext^0-2*delta^0+deltaext^0 == 0, cost: 1
  23: l4 -> l0 : delta_new^0'=delta^0, -wntext^0+2*delta^0-deltaext^0 == 0, cost: 1
  24: l4 -> l0 : delta_new^0'=-1+delta^0, 2+wntext^0-2*delta^0+deltaext^0 <= 0, cost: 1
  25: l4 -> l0 : delta_new^0'=1+delta^0, 1-wntext^0+2*delta^0-deltaext^0 <= 0, cost: 1
  30: l5 -> l1 : (-3+deltext^0 <= 0 /\ -3+delta^0 <= 0 /\ wntext^0 >= 0 /\ -3+wnt^0 <= 0 /\ delta^0 >= 0 /\ wnt^0 >= 0 /\ deltaext^0 >= 0 /\ -3+wntext^0 <= 0), cost: 1
  31: l6 -> l5 : TRUE, cost: 1


Eliminating location l5 by chaining:

Applied chaining
First rule:
l6 -> l5 : TRUE, cost: 1
Second rule:
l5 -> l1 : (-3+deltext^0 <= 0 /\ -3+delta^0 <= 0 /\ wntext^0 >= 0 /\ -3+wnt^0 <= 0 /\ delta^0 >= 0 /\ wnt^0 >= 0 /\ deltaext^0 >= 0 /\ -3+wntext^0 <= 0), cost: 1
New rule:
l6 -> l1 : (-3+deltext^0 <= 0 /\ -3+delta^0 <= 0 /\ wntext^0 >= 0 /\ -3+wnt^0 <= 0 /\ delta^0 >= 0 /\ wnt^0 >= 0 /\ deltaext^0 >= 0 /\ -3+wntext^0 <= 0), cost: 2

Applied deletion
Removed the following rules: 30 31

Eliminated locations on linear paths
Start location: l6
  16: l0 -> l2 : 1-delta_new^0+delta^0 <= 0, cost: 1
  17: l0 -> l2 : 1+delta_new^0-delta^0 <= 0, cost: 1
  19: l0 -> l3 : 1-deltaext_new^0+deltaext^0 <= 0, cost: 1
  20: l0 -> l3 : 1+deltaext_new^0-deltaext^0 <= 0, cost: 1
  18: l2 -> l1 : delta^0'=delta_new^0, deltaext^0'=deltaext_new^0, TRUE, cost: 1
  26: l1 -> l4 : deltaext_new^0'=deltaext^0, 3+wnt^0-2*deltaext^0 == 0, cost: 1
  27: l1 -> l4 : deltaext_new^0'=deltaext^0, 2+wnt^0-2*deltaext^0 == 0, cost: 1
  28: l1 -> l4 : deltaext_new^0'=-1+deltaext^0, 4+wnt^0-2*deltaext^0 <= 0, cost: 1
  29: l1 -> l4 : deltaext_new^0'=1+deltaext^0, -1-wnt^0+2*deltaext^0 <= 0, cost: 1
  21: l3 -> l1 : delta^0'=delta_new^0, deltaext^0'=deltaext_new^0, TRUE, cost: 1
  22: l4 -> l0 : delta_new^0'=delta^0, 1+wntext^0-2*delta^0+deltaext^0 == 0, cost: 1
  23: l4 -> l0 : delta_new^0'=delta^0, -wntext^0+2*delta^0-deltaext^0 == 0, cost: 1
  24: l4 -> l0 : delta_new^0'=-1+delta^0, 2+wntext^0-2*delta^0+deltaext^0 <= 0, cost: 1
  25: l4 -> l0 : delta_new^0'=1+delta^0, 1-wntext^0+2*delta^0-deltaext^0 <= 0, cost: 1
  32: l6 -> l1 : (-3+deltext^0 <= 0 /\ -3+delta^0 <= 0 /\ wntext^0 >= 0 /\ -3+wnt^0 <= 0 /\ delta^0 >= 0 /\ wnt^0 >= 0 /\ deltaext^0 >= 0 /\ -3+wntext^0 <= 0), cost: 2


Eliminating location l4 by chaining:

Applied chaining
First rule:
l1 -> l4 : deltaext_new^0'=deltaext^0, 3+wnt^0-2*deltaext^0 == 0, cost: 1
Second rule:
l4 -> l0 : delta_new^0'=delta^0, 1+wntext^0-2*delta^0+deltaext^0 == 0, cost: 1
New rule:
l1 -> l0 : delta_new^0'=delta^0, deltaext_new^0'=deltaext^0, (3+wnt^0-2*deltaext^0 == 0 /\ 1+wntext^0-2*delta^0+deltaext^0 == 0), cost: 2

Applied chaining
First rule:
l1 -> l4 : deltaext_new^0'=deltaext^0, 3+wnt^0-2*deltaext^0 == 0, cost: 1
Second rule:
l4 -> l0 : delta_new^0'=delta^0, -wntext^0+2*delta^0-deltaext^0 == 0, cost: 1
New rule:
l1 -> l0 : delta_new^0'=delta^0, deltaext_new^0'=deltaext^0, (-wntext^0+2*delta^0-deltaext^0 == 0 /\ 3+wnt^0-2*deltaext^0 == 0), cost: 2

Applied chaining
First rule:
l1 -> l4 : deltaext_new^0'=deltaext^0, 3+wnt^0-2*deltaext^0 == 0, cost: 1
Second rule:
l4 -> l0 : delta_new^0'=-1+delta^0, 2+wntext^0-2*delta^0+deltaext^0 <= 0, cost: 1
New rule:
l1 -> l0 : delta_new^0'=-1+delta^0, deltaext_new^0'=deltaext^0, (2+wntext^0-2*delta^0+deltaext^0 <= 0 /\ 3+wnt^0-2*deltaext^0 == 0), cost: 2

Applied chaining
First rule:
l1 -> l4 : deltaext_new^0'=deltaext^0, 3+wnt^0-2*deltaext^0 == 0, cost: 1
Second rule:
l4 -> l0 : delta_new^0'=1+delta^0, 1-wntext^0+2*delta^0-deltaext^0 <= 0, cost: 1
New rule:
l1 -> l0 : delta_new^0'=1+delta^0, deltaext_new^0'=deltaext^0, (1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ 3+wnt^0-2*deltaext^0 == 0), cost: 2

Applied chaining
First rule:
l1 -> l4 : deltaext_new^0'=deltaext^0, 2+wnt^0-2*deltaext^0 == 0, cost: 1
Second rule:
l4 -> l0 : delta_new^0'=delta^0, 1+wntext^0-2*delta^0+deltaext^0 == 0, cost: 1
New rule:
l1 -> l0 : delta_new^0'=delta^0, deltaext_new^0'=deltaext^0, (2+wnt^0-2*deltaext^0 == 0 /\ 1+wntext^0-2*delta^0+deltaext^0 == 0), cost: 2

Applied chaining
First rule:
l1 -> l4 : deltaext_new^0'=deltaext^0, 2+wnt^0-2*deltaext^0 == 0, cost: 1
Second rule:
l4 -> l0 : delta_new^0'=delta^0, -wntext^0+2*delta^0-deltaext^0 == 0, cost: 1
New rule:
l1 -> l0 : delta_new^0'=delta^0, deltaext_new^0'=deltaext^0, (-wntext^0+2*delta^0-deltaext^0 == 0 /\ 2+wnt^0-2*deltaext^0 == 0), cost: 2

Applied chaining
First rule:
l1 -> l4 : deltaext_new^0'=deltaext^0, 2+wnt^0-2*deltaext^0 == 0, cost: 1
Second rule:
l4 -> l0 : delta_new^0'=-1+delta^0, 2+wntext^0-2*delta^0+deltaext^0 <= 0, cost: 1
New rule:
l1 -> l0 : delta_new^0'=-1+delta^0, deltaext_new^0'=deltaext^0, (2+wnt^0-2*deltaext^0 == 0 /\ 2+wntext^0-2*delta^0+deltaext^0 <= 0), cost: 2

Applied chaining
First rule:
l1 -> l4 : deltaext_new^0'=deltaext^0, 2+wnt^0-2*deltaext^0 == 0, cost: 1
Second rule:
l4 -> l0 : delta_new^0'=1+delta^0, 1-wntext^0+2*delta^0-deltaext^0 <= 0, cost: 1
New rule:
l1 -> l0 : delta_new^0'=1+delta^0, deltaext_new^0'=deltaext^0, (1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ 2+wnt^0-2*deltaext^0 == 0), cost: 2

Applied chaining
First rule:
l1 -> l4 : deltaext_new^0'=-1+deltaext^0, 4+wnt^0-2*deltaext^0 <= 0, cost: 1
Second rule:
l4 -> l0 : delta_new^0'=delta^0, 1+wntext^0-2*delta^0+deltaext^0 == 0, cost: 1
New rule:
l1 -> l0 : delta_new^0'=delta^0, deltaext_new^0'=-1+deltaext^0, (1+wntext^0-2*delta^0+deltaext^0 == 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 2

Applied chaining
First rule:
l1 -> l4 : deltaext_new^0'=-1+deltaext^0, 4+wnt^0-2*deltaext^0 <= 0, cost: 1
Second rule:
l4 -> l0 : delta_new^0'=delta^0, -wntext^0+2*delta^0-deltaext^0 == 0, cost: 1
New rule:
l1 -> l0 : delta_new^0'=delta^0, deltaext_new^0'=-1+deltaext^0, (-wntext^0+2*delta^0-deltaext^0 == 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 2

Applied chaining
First rule:
l1 -> l4 : deltaext_new^0'=-1+deltaext^0, 4+wnt^0-2*deltaext^0 <= 0, cost: 1
Second rule:
l4 -> l0 : delta_new^0'=-1+delta^0, 2+wntext^0-2*delta^0+deltaext^0 <= 0, cost: 1
New rule:
l1 -> l0 : delta_new^0'=-1+delta^0, deltaext_new^0'=-1+deltaext^0, (2+wntext^0-2*delta^0+deltaext^0 <= 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 2

Applied chaining
First rule:
l1 -> l4 : deltaext_new^0'=-1+deltaext^0, 4+wnt^0-2*deltaext^0 <= 0, cost: 1
Second rule:
l4 -> l0 : delta_new^0'=1+delta^0, 1-wntext^0+2*delta^0-deltaext^0 <= 0, cost: 1
New rule:
l1 -> l0 : delta_new^0'=1+delta^0, deltaext_new^0'=-1+deltaext^0, (1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 2

Applied chaining
First rule:
l1 -> l4 : deltaext_new^0'=1+deltaext^0, -1-wnt^0+2*deltaext^0 <= 0, cost: 1
Second rule:
l4 -> l0 : delta_new^0'=delta^0, 1+wntext^0-2*delta^0+deltaext^0 == 0, cost: 1
New rule:
l1 -> l0 : delta_new^0'=delta^0, deltaext_new^0'=1+deltaext^0, (1+wntext^0-2*delta^0+deltaext^0 == 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 2

Applied chaining
First rule:
l1 -> l4 : deltaext_new^0'=1+deltaext^0, -1-wnt^0+2*deltaext^0 <= 0, cost: 1
Second rule:
l4 -> l0 : delta_new^0'=delta^0, -wntext^0+2*delta^0-deltaext^0 == 0, cost: 1
New rule:
l1 -> l0 : delta_new^0'=delta^0, deltaext_new^0'=1+deltaext^0, (-wntext^0+2*delta^0-deltaext^0 == 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 2

Applied chaining
First rule:
l1 -> l4 : deltaext_new^0'=1+deltaext^0, -1-wnt^0+2*deltaext^0 <= 0, cost: 1
Second rule:
l4 -> l0 : delta_new^0'=-1+delta^0, 2+wntext^0-2*delta^0+deltaext^0 <= 0, cost: 1
New rule:
l1 -> l0 : delta_new^0'=-1+delta^0, deltaext_new^0'=1+deltaext^0, (2+wntext^0-2*delta^0+deltaext^0 <= 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 2

Applied chaining
First rule:
l1 -> l4 : deltaext_new^0'=1+deltaext^0, -1-wnt^0+2*deltaext^0 <= 0, cost: 1
Second rule:
l4 -> l0 : delta_new^0'=1+delta^0, 1-wntext^0+2*delta^0-deltaext^0 <= 0, cost: 1
New rule:
l1 -> l0 : delta_new^0'=1+delta^0, deltaext_new^0'=1+deltaext^0, (1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 2

Applied deletion
Removed the following rules: 22 23 24 25 26 27 28 29

Eliminating location l2 by chaining:

Applied chaining
First rule:
l0 -> l2 : 1-delta_new^0+delta^0 <= 0, cost: 1
Second rule:
l2 -> l1 : delta^0'=delta_new^0, deltaext^0'=deltaext_new^0, TRUE, cost: 1
New rule:
l0 -> l1 : delta^0'=delta_new^0, deltaext^0'=deltaext_new^0, 1-delta_new^0+delta^0 <= 0, cost: 2

Applied chaining
First rule:
l0 -> l2 : 1+delta_new^0-delta^0 <= 0, cost: 1
Second rule:
l2 -> l1 : delta^0'=delta_new^0, deltaext^0'=deltaext_new^0, TRUE, cost: 1
New rule:
l0 -> l1 : delta^0'=delta_new^0, deltaext^0'=deltaext_new^0, 1+delta_new^0-delta^0 <= 0, cost: 2

Applied deletion
Removed the following rules: 16 17 18

Eliminating location l3 by chaining:

Applied chaining
First rule:
l0 -> l3 : 1-deltaext_new^0+deltaext^0 <= 0, cost: 1
Second rule:
l3 -> l1 : delta^0'=delta_new^0, deltaext^0'=deltaext_new^0, TRUE, cost: 1
New rule:
l0 -> l1 : delta^0'=delta_new^0, deltaext^0'=deltaext_new^0, 1-deltaext_new^0+deltaext^0 <= 0, cost: 2

Applied chaining
First rule:
l0 -> l3 : 1+deltaext_new^0-deltaext^0 <= 0, cost: 1
Second rule:
l3 -> l1 : delta^0'=delta_new^0, deltaext^0'=deltaext_new^0, TRUE, cost: 1
New rule:
l0 -> l1 : delta^0'=delta_new^0, deltaext^0'=deltaext_new^0, 1+deltaext_new^0-deltaext^0 <= 0, cost: 2

Applied deletion
Removed the following rules: 19 20 21

Eliminated locations on tree-shaped paths
Start location: l6
  49: l0 -> l1 : delta^0'=delta_new^0, deltaext^0'=deltaext_new^0, 1-delta_new^0+delta^0 <= 0, cost: 2
  50: l0 -> l1 : delta^0'=delta_new^0, deltaext^0'=deltaext_new^0, 1+delta_new^0-delta^0 <= 0, cost: 2
  51: l0 -> l1 : delta^0'=delta_new^0, deltaext^0'=deltaext_new^0, 1-deltaext_new^0+deltaext^0 <= 0, cost: 2
  52: l0 -> l1 : delta^0'=delta_new^0, deltaext^0'=deltaext_new^0, 1+deltaext_new^0-deltaext^0 <= 0, cost: 2
  33: l1 -> l0 : delta_new^0'=delta^0, deltaext_new^0'=deltaext^0, (3+wnt^0-2*deltaext^0 == 0 /\ 1+wntext^0-2*delta^0+deltaext^0 == 0), cost: 2
  34: l1 -> l0 : delta_new^0'=delta^0, deltaext_new^0'=deltaext^0, (-wntext^0+2*delta^0-deltaext^0 == 0 /\ 3+wnt^0-2*deltaext^0 == 0), cost: 2
  35: l1 -> l0 : delta_new^0'=-1+delta^0, deltaext_new^0'=deltaext^0, (2+wntext^0-2*delta^0+deltaext^0 <= 0 /\ 3+wnt^0-2*deltaext^0 == 0), cost: 2
  36: l1 -> l0 : delta_new^0'=1+delta^0, deltaext_new^0'=deltaext^0, (1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ 3+wnt^0-2*deltaext^0 == 0), cost: 2
  37: l1 -> l0 : delta_new^0'=delta^0, deltaext_new^0'=deltaext^0, (2+wnt^0-2*deltaext^0 == 0 /\ 1+wntext^0-2*delta^0+deltaext^0 == 0), cost: 2
  38: l1 -> l0 : delta_new^0'=delta^0, deltaext_new^0'=deltaext^0, (-wntext^0+2*delta^0-deltaext^0 == 0 /\ 2+wnt^0-2*deltaext^0 == 0), cost: 2
  39: l1 -> l0 : delta_new^0'=-1+delta^0, deltaext_new^0'=deltaext^0, (2+wnt^0-2*deltaext^0 == 0 /\ 2+wntext^0-2*delta^0+deltaext^0 <= 0), cost: 2
  40: l1 -> l0 : delta_new^0'=1+delta^0, deltaext_new^0'=deltaext^0, (1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ 2+wnt^0-2*deltaext^0 == 0), cost: 2
  41: l1 -> l0 : delta_new^0'=delta^0, deltaext_new^0'=-1+deltaext^0, (1+wntext^0-2*delta^0+deltaext^0 == 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 2
  42: l1 -> l0 : delta_new^0'=delta^0, deltaext_new^0'=-1+deltaext^0, (-wntext^0+2*delta^0-deltaext^0 == 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 2
  43: l1 -> l0 : delta_new^0'=-1+delta^0, deltaext_new^0'=-1+deltaext^0, (2+wntext^0-2*delta^0+deltaext^0 <= 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 2
  44: l1 -> l0 : delta_new^0'=1+delta^0, deltaext_new^0'=-1+deltaext^0, (1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 2
  45: l1 -> l0 : delta_new^0'=delta^0, deltaext_new^0'=1+deltaext^0, (1+wntext^0-2*delta^0+deltaext^0 == 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 2
  46: l1 -> l0 : delta_new^0'=delta^0, deltaext_new^0'=1+deltaext^0, (-wntext^0+2*delta^0-deltaext^0 == 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 2
  47: l1 -> l0 : delta_new^0'=-1+delta^0, deltaext_new^0'=1+deltaext^0, (2+wntext^0-2*delta^0+deltaext^0 <= 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 2
  48: l1 -> l0 : delta_new^0'=1+delta^0, deltaext_new^0'=1+deltaext^0, (1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 2
  32: l6 -> l1 : (-3+deltext^0 <= 0 /\ -3+delta^0 <= 0 /\ wntext^0 >= 0 /\ -3+wnt^0 <= 0 /\ delta^0 >= 0 /\ wnt^0 >= 0 /\ deltaext^0 >= 0 /\ -3+wntext^0 <= 0), cost: 2


Eliminating location l0 by chaining:

Applied chaining
First rule:
l1 -> l0 : delta_new^0'=-1+delta^0, deltaext_new^0'=deltaext^0, (2+wntext^0-2*delta^0+deltaext^0 <= 0 /\ 3+wnt^0-2*deltaext^0 == 0), cost: 2
Second rule:
l0 -> l1 : delta^0'=delta_new^0, deltaext^0'=deltaext_new^0, 1+delta_new^0-delta^0 <= 0, cost: 2
New rule:
l1 -> l1 : delta_new^0'=-1+delta^0, deltaext_new^0'=deltaext^0, delta^0'=-1+delta^0, deltaext^0'=deltaext^0, (0 <= 0 /\ 2+wntext^0-2*delta^0+deltaext^0 <= 0 /\ 3+wnt^0-2*deltaext^0 == 0), cost: 4

Applied simplification
Original rule:
l1 -> l1 : delta_new^0'=-1+delta^0, deltaext_new^0'=deltaext^0, delta^0'=-1+delta^0, deltaext^0'=deltaext^0, (0 <= 0 /\ 2+wntext^0-2*delta^0+deltaext^0 <= 0 /\ 3+wnt^0-2*deltaext^0 == 0), cost: 4
New rule:
l1 -> l1 : delta_new^0'=-1+delta^0, deltaext_new^0'=deltaext^0, delta^0'=-1+delta^0, deltaext^0'=deltaext^0, (2+wntext^0-2*delta^0+deltaext^0 <= 0 /\ 3+wnt^0-2*deltaext^0 == 0), cost: 4

Applied chaining
First rule:
l1 -> l0 : delta_new^0'=1+delta^0, deltaext_new^0'=deltaext^0, (1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ 3+wnt^0-2*deltaext^0 == 0), cost: 2
Second rule:
l0 -> l1 : delta^0'=delta_new^0, deltaext^0'=deltaext_new^0, 1-delta_new^0+delta^0 <= 0, cost: 2
New rule:
l1 -> l1 : delta_new^0'=1+delta^0, deltaext_new^0'=deltaext^0, delta^0'=1+delta^0, deltaext^0'=deltaext^0, (0 <= 0 /\ 1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ 3+wnt^0-2*deltaext^0 == 0), cost: 4

Applied simplification
Original rule:
l1 -> l1 : delta_new^0'=1+delta^0, deltaext_new^0'=deltaext^0, delta^0'=1+delta^0, deltaext^0'=deltaext^0, (0 <= 0 /\ 1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ 3+wnt^0-2*deltaext^0 == 0), cost: 4
New rule:
l1 -> l1 : delta_new^0'=1+delta^0, deltaext_new^0'=deltaext^0, delta^0'=1+delta^0, deltaext^0'=deltaext^0, (1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ 3+wnt^0-2*deltaext^0 == 0), cost: 4

Applied chaining
First rule:
l1 -> l0 : delta_new^0'=-1+delta^0, deltaext_new^0'=deltaext^0, (2+wnt^0-2*deltaext^0 == 0 /\ 2+wntext^0-2*delta^0+deltaext^0 <= 0), cost: 2
Second rule:
l0 -> l1 : delta^0'=delta_new^0, deltaext^0'=deltaext_new^0, 1+delta_new^0-delta^0 <= 0, cost: 2
New rule:
l1 -> l1 : delta_new^0'=-1+delta^0, deltaext_new^0'=deltaext^0, delta^0'=-1+delta^0, deltaext^0'=deltaext^0, (0 <= 0 /\ 2+wnt^0-2*deltaext^0 == 0 /\ 2+wntext^0-2*delta^0+deltaext^0 <= 0), cost: 4

Applied simplification
Original rule:
l1 -> l1 : delta_new^0'=-1+delta^0, deltaext_new^0'=deltaext^0, delta^0'=-1+delta^0, deltaext^0'=deltaext^0, (0 <= 0 /\ 2+wnt^0-2*deltaext^0 == 0 /\ 2+wntext^0-2*delta^0+deltaext^0 <= 0), cost: 4
New rule:
l1 -> l1 : delta_new^0'=-1+delta^0, deltaext_new^0'=deltaext^0, delta^0'=-1+delta^0, deltaext^0'=deltaext^0, (2+wnt^0-2*deltaext^0 == 0 /\ 2+wntext^0-2*delta^0+deltaext^0 <= 0), cost: 4

Applied chaining
First rule:
l1 -> l0 : delta_new^0'=1+delta^0, deltaext_new^0'=deltaext^0, (1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ 2+wnt^0-2*deltaext^0 == 0), cost: 2
Second rule:
l0 -> l1 : delta^0'=delta_new^0, deltaext^0'=deltaext_new^0, 1-delta_new^0+delta^0 <= 0, cost: 2
New rule:
l1 -> l1 : delta_new^0'=1+delta^0, deltaext_new^0'=deltaext^0, delta^0'=1+delta^0, deltaext^0'=deltaext^0, (0 <= 0 /\ 1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ 2+wnt^0-2*deltaext^0 == 0), cost: 4

Applied simplification
Original rule:
l1 -> l1 : delta_new^0'=1+delta^0, deltaext_new^0'=deltaext^0, delta^0'=1+delta^0, deltaext^0'=deltaext^0, (0 <= 0 /\ 1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ 2+wnt^0-2*deltaext^0 == 0), cost: 4
New rule:
l1 -> l1 : delta_new^0'=1+delta^0, deltaext_new^0'=deltaext^0, delta^0'=1+delta^0, deltaext^0'=deltaext^0, (1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ 2+wnt^0-2*deltaext^0 == 0), cost: 4

Applied chaining
First rule:
l1 -> l0 : delta_new^0'=delta^0, deltaext_new^0'=-1+deltaext^0, (1+wntext^0-2*delta^0+deltaext^0 == 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 2
Second rule:
l0 -> l1 : delta^0'=delta_new^0, deltaext^0'=deltaext_new^0, 1+deltaext_new^0-deltaext^0 <= 0, cost: 2
New rule:
l1 -> l1 : delta_new^0'=delta^0, deltaext_new^0'=-1+deltaext^0, delta^0'=delta^0, deltaext^0'=-1+deltaext^0, (0 <= 0 /\ 1+wntext^0-2*delta^0+deltaext^0 == 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 4

Applied simplification
Original rule:
l1 -> l1 : delta_new^0'=delta^0, deltaext_new^0'=-1+deltaext^0, delta^0'=delta^0, deltaext^0'=-1+deltaext^0, (0 <= 0 /\ 1+wntext^0-2*delta^0+deltaext^0 == 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 4
New rule:
l1 -> l1 : delta_new^0'=delta^0, deltaext_new^0'=-1+deltaext^0, delta^0'=delta^0, deltaext^0'=-1+deltaext^0, (1+wntext^0-2*delta^0+deltaext^0 == 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 4

Applied chaining
First rule:
l1 -> l0 : delta_new^0'=delta^0, deltaext_new^0'=-1+deltaext^0, (-wntext^0+2*delta^0-deltaext^0 == 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 2
Second rule:
l0 -> l1 : delta^0'=delta_new^0, deltaext^0'=deltaext_new^0, 1+deltaext_new^0-deltaext^0 <= 0, cost: 2
New rule:
l1 -> l1 : delta_new^0'=delta^0, deltaext_new^0'=-1+deltaext^0, delta^0'=delta^0, deltaext^0'=-1+deltaext^0, (0 <= 0 /\ -wntext^0+2*delta^0-deltaext^0 == 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 4

Applied simplification
Original rule:
l1 -> l1 : delta_new^0'=delta^0, deltaext_new^0'=-1+deltaext^0, delta^0'=delta^0, deltaext^0'=-1+deltaext^0, (0 <= 0 /\ -wntext^0+2*delta^0-deltaext^0 == 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 4
New rule:
l1 -> l1 : delta_new^0'=delta^0, deltaext_new^0'=-1+deltaext^0, delta^0'=delta^0, deltaext^0'=-1+deltaext^0, (-wntext^0+2*delta^0-deltaext^0 == 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 4

Applied chaining
First rule:
l1 -> l0 : delta_new^0'=-1+delta^0, deltaext_new^0'=-1+deltaext^0, (2+wntext^0-2*delta^0+deltaext^0 <= 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 2
Second rule:
l0 -> l1 : delta^0'=delta_new^0, deltaext^0'=deltaext_new^0, 1+delta_new^0-delta^0 <= 0, cost: 2
New rule:
l1 -> l1 : delta_new^0'=-1+delta^0, deltaext_new^0'=-1+deltaext^0, delta^0'=-1+delta^0, deltaext^0'=-1+deltaext^0, (0 <= 0 /\ 2+wntext^0-2*delta^0+deltaext^0 <= 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 4

Applied simplification
Original rule:
l1 -> l1 : delta_new^0'=-1+delta^0, deltaext_new^0'=-1+deltaext^0, delta^0'=-1+delta^0, deltaext^0'=-1+deltaext^0, (0 <= 0 /\ 2+wntext^0-2*delta^0+deltaext^0 <= 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 4
New rule:
l1 -> l1 : delta_new^0'=-1+delta^0, deltaext_new^0'=-1+deltaext^0, delta^0'=-1+delta^0, deltaext^0'=-1+deltaext^0, (2+wntext^0-2*delta^0+deltaext^0 <= 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 4

Applied chaining
First rule:
l1 -> l0 : delta_new^0'=-1+delta^0, deltaext_new^0'=-1+deltaext^0, (2+wntext^0-2*delta^0+deltaext^0 <= 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 2
Second rule:
l0 -> l1 : delta^0'=delta_new^0, deltaext^0'=deltaext_new^0, 1+deltaext_new^0-deltaext^0 <= 0, cost: 2
New rule:
l1 -> l1 : delta_new^0'=-1+delta^0, deltaext_new^0'=-1+deltaext^0, delta^0'=-1+delta^0, deltaext^0'=-1+deltaext^0, (0 <= 0 /\ 2+wntext^0-2*delta^0+deltaext^0 <= 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 4

Applied simplification
Original rule:
l1 -> l1 : delta_new^0'=-1+delta^0, deltaext_new^0'=-1+deltaext^0, delta^0'=-1+delta^0, deltaext^0'=-1+deltaext^0, (0 <= 0 /\ 2+wntext^0-2*delta^0+deltaext^0 <= 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 4
New rule:
l1 -> l1 : delta_new^0'=-1+delta^0, deltaext_new^0'=-1+deltaext^0, delta^0'=-1+delta^0, deltaext^0'=-1+deltaext^0, (2+wntext^0-2*delta^0+deltaext^0 <= 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 4

Applied chaining
First rule:
l1 -> l0 : delta_new^0'=1+delta^0, deltaext_new^0'=-1+deltaext^0, (1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 2
Second rule:
l0 -> l1 : delta^0'=delta_new^0, deltaext^0'=deltaext_new^0, 1-delta_new^0+delta^0 <= 0, cost: 2
New rule:
l1 -> l1 : delta_new^0'=1+delta^0, deltaext_new^0'=-1+deltaext^0, delta^0'=1+delta^0, deltaext^0'=-1+deltaext^0, (0 <= 0 /\ 1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 4

Applied simplification
Original rule:
l1 -> l1 : delta_new^0'=1+delta^0, deltaext_new^0'=-1+deltaext^0, delta^0'=1+delta^0, deltaext^0'=-1+deltaext^0, (0 <= 0 /\ 1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 4
New rule:
l1 -> l1 : delta_new^0'=1+delta^0, deltaext_new^0'=-1+deltaext^0, delta^0'=1+delta^0, deltaext^0'=-1+deltaext^0, (1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 4

Applied chaining
First rule:
l1 -> l0 : delta_new^0'=1+delta^0, deltaext_new^0'=-1+deltaext^0, (1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 2
Second rule:
l0 -> l1 : delta^0'=delta_new^0, deltaext^0'=deltaext_new^0, 1+deltaext_new^0-deltaext^0 <= 0, cost: 2
New rule:
l1 -> l1 : delta_new^0'=1+delta^0, deltaext_new^0'=-1+deltaext^0, delta^0'=1+delta^0, deltaext^0'=-1+deltaext^0, (0 <= 0 /\ 1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 4

Applied simplification
Original rule:
l1 -> l1 : delta_new^0'=1+delta^0, deltaext_new^0'=-1+deltaext^0, delta^0'=1+delta^0, deltaext^0'=-1+deltaext^0, (0 <= 0 /\ 1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 4
New rule:
l1 -> l1 : delta_new^0'=1+delta^0, deltaext_new^0'=-1+deltaext^0, delta^0'=1+delta^0, deltaext^0'=-1+deltaext^0, (1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 4

Applied chaining
First rule:
l1 -> l0 : delta_new^0'=delta^0, deltaext_new^0'=1+deltaext^0, (1+wntext^0-2*delta^0+deltaext^0 == 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 2
Second rule:
l0 -> l1 : delta^0'=delta_new^0, deltaext^0'=deltaext_new^0, 1-deltaext_new^0+deltaext^0 <= 0, cost: 2
New rule:
l1 -> l1 : delta_new^0'=delta^0, deltaext_new^0'=1+deltaext^0, delta^0'=delta^0, deltaext^0'=1+deltaext^0, (0 <= 0 /\ 1+wntext^0-2*delta^0+deltaext^0 == 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 4

Applied simplification
Original rule:
l1 -> l1 : delta_new^0'=delta^0, deltaext_new^0'=1+deltaext^0, delta^0'=delta^0, deltaext^0'=1+deltaext^0, (0 <= 0 /\ 1+wntext^0-2*delta^0+deltaext^0 == 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 4
New rule:
l1 -> l1 : delta_new^0'=delta^0, deltaext_new^0'=1+deltaext^0, delta^0'=delta^0, deltaext^0'=1+deltaext^0, (1+wntext^0-2*delta^0+deltaext^0 == 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 4

Applied chaining
First rule:
l1 -> l0 : delta_new^0'=delta^0, deltaext_new^0'=1+deltaext^0, (-wntext^0+2*delta^0-deltaext^0 == 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 2
Second rule:
l0 -> l1 : delta^0'=delta_new^0, deltaext^0'=deltaext_new^0, 1-deltaext_new^0+deltaext^0 <= 0, cost: 2
New rule:
l1 -> l1 : delta_new^0'=delta^0, deltaext_new^0'=1+deltaext^0, delta^0'=delta^0, deltaext^0'=1+deltaext^0, (0 <= 0 /\ -wntext^0+2*delta^0-deltaext^0 == 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 4

Applied simplification
Original rule:
l1 -> l1 : delta_new^0'=delta^0, deltaext_new^0'=1+deltaext^0, delta^0'=delta^0, deltaext^0'=1+deltaext^0, (0 <= 0 /\ -wntext^0+2*delta^0-deltaext^0 == 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 4
New rule:
l1 -> l1 : delta_new^0'=delta^0, deltaext_new^0'=1+deltaext^0, delta^0'=delta^0, deltaext^0'=1+deltaext^0, (-wntext^0+2*delta^0-deltaext^0 == 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 4

Applied chaining
First rule:
l1 -> l0 : delta_new^0'=-1+delta^0, deltaext_new^0'=1+deltaext^0, (2+wntext^0-2*delta^0+deltaext^0 <= 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 2
Second rule:
l0 -> l1 : delta^0'=delta_new^0, deltaext^0'=deltaext_new^0, 1+delta_new^0-delta^0 <= 0, cost: 2
New rule:
l1 -> l1 : delta_new^0'=-1+delta^0, deltaext_new^0'=1+deltaext^0, delta^0'=-1+delta^0, deltaext^0'=1+deltaext^0, (0 <= 0 /\ 2+wntext^0-2*delta^0+deltaext^0 <= 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 4

Applied simplification
Original rule:
l1 -> l1 : delta_new^0'=-1+delta^0, deltaext_new^0'=1+deltaext^0, delta^0'=-1+delta^0, deltaext^0'=1+deltaext^0, (0 <= 0 /\ 2+wntext^0-2*delta^0+deltaext^0 <= 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 4
New rule:
l1 -> l1 : delta_new^0'=-1+delta^0, deltaext_new^0'=1+deltaext^0, delta^0'=-1+delta^0, deltaext^0'=1+deltaext^0, (2+wntext^0-2*delta^0+deltaext^0 <= 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 4

Applied chaining
First rule:
l1 -> l0 : delta_new^0'=-1+delta^0, deltaext_new^0'=1+deltaext^0, (2+wntext^0-2*delta^0+deltaext^0 <= 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 2
Second rule:
l0 -> l1 : delta^0'=delta_new^0, deltaext^0'=deltaext_new^0, 1-deltaext_new^0+deltaext^0 <= 0, cost: 2
New rule:
l1 -> l1 : delta_new^0'=-1+delta^0, deltaext_new^0'=1+deltaext^0, delta^0'=-1+delta^0, deltaext^0'=1+deltaext^0, (0 <= 0 /\ 2+wntext^0-2*delta^0+deltaext^0 <= 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 4

Applied simplification
Original rule:
l1 -> l1 : delta_new^0'=-1+delta^0, deltaext_new^0'=1+deltaext^0, delta^0'=-1+delta^0, deltaext^0'=1+deltaext^0, (0 <= 0 /\ 2+wntext^0-2*delta^0+deltaext^0 <= 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 4
New rule:
l1 -> l1 : delta_new^0'=-1+delta^0, deltaext_new^0'=1+deltaext^0, delta^0'=-1+delta^0, deltaext^0'=1+deltaext^0, (2+wntext^0-2*delta^0+deltaext^0 <= 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 4

Applied chaining
First rule:
l1 -> l0 : delta_new^0'=1+delta^0, deltaext_new^0'=1+deltaext^0, (1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 2
Second rule:
l0 -> l1 : delta^0'=delta_new^0, deltaext^0'=deltaext_new^0, 1-delta_new^0+delta^0 <= 0, cost: 2
New rule:
l1 -> l1 : delta_new^0'=1+delta^0, deltaext_new^0'=1+deltaext^0, delta^0'=1+delta^0, deltaext^0'=1+deltaext^0, (0 <= 0 /\ 1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 4

Applied simplification
Original rule:
l1 -> l1 : delta_new^0'=1+delta^0, deltaext_new^0'=1+deltaext^0, delta^0'=1+delta^0, deltaext^0'=1+deltaext^0, (0 <= 0 /\ 1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 4
New rule:
l1 -> l1 : delta_new^0'=1+delta^0, deltaext_new^0'=1+deltaext^0, delta^0'=1+delta^0, deltaext^0'=1+deltaext^0, (1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 4

Applied chaining
First rule:
l1 -> l0 : delta_new^0'=1+delta^0, deltaext_new^0'=1+deltaext^0, (1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 2
Second rule:
l0 -> l1 : delta^0'=delta_new^0, deltaext^0'=deltaext_new^0, 1-deltaext_new^0+deltaext^0 <= 0, cost: 2
New rule:
l1 -> l1 : delta_new^0'=1+delta^0, deltaext_new^0'=1+deltaext^0, delta^0'=1+delta^0, deltaext^0'=1+deltaext^0, (0 <= 0 /\ 1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 4

Applied simplification
Original rule:
l1 -> l1 : delta_new^0'=1+delta^0, deltaext_new^0'=1+deltaext^0, delta^0'=1+delta^0, deltaext^0'=1+deltaext^0, (0 <= 0 /\ 1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 4
New rule:
l1 -> l1 : delta_new^0'=1+delta^0, deltaext_new^0'=1+deltaext^0, delta^0'=1+delta^0, deltaext^0'=1+deltaext^0, (1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 4

Applied deletion
Removed the following rules: 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52

Eliminated locations on tree-shaped paths
Start location: l6
  53: l1 -> l1 : delta_new^0'=-1+delta^0, deltaext_new^0'=deltaext^0, delta^0'=-1+delta^0, deltaext^0'=deltaext^0, (2+wntext^0-2*delta^0+deltaext^0 <= 0 /\ 3+wnt^0-2*deltaext^0 == 0), cost: 4
  54: l1 -> l1 : delta_new^0'=1+delta^0, deltaext_new^0'=deltaext^0, delta^0'=1+delta^0, deltaext^0'=deltaext^0, (1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ 3+wnt^0-2*deltaext^0 == 0), cost: 4
  55: l1 -> l1 : delta_new^0'=-1+delta^0, deltaext_new^0'=deltaext^0, delta^0'=-1+delta^0, deltaext^0'=deltaext^0, (2+wnt^0-2*deltaext^0 == 0 /\ 2+wntext^0-2*delta^0+deltaext^0 <= 0), cost: 4
  56: l1 -> l1 : delta_new^0'=1+delta^0, deltaext_new^0'=deltaext^0, delta^0'=1+delta^0, deltaext^0'=deltaext^0, (1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ 2+wnt^0-2*deltaext^0 == 0), cost: 4
  57: l1 -> l1 : delta_new^0'=delta^0, deltaext_new^0'=-1+deltaext^0, delta^0'=delta^0, deltaext^0'=-1+deltaext^0, (1+wntext^0-2*delta^0+deltaext^0 == 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 4
  58: l1 -> l1 : delta_new^0'=delta^0, deltaext_new^0'=-1+deltaext^0, delta^0'=delta^0, deltaext^0'=-1+deltaext^0, (-wntext^0+2*delta^0-deltaext^0 == 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 4
  59: l1 -> l1 : delta_new^0'=-1+delta^0, deltaext_new^0'=-1+deltaext^0, delta^0'=-1+delta^0, deltaext^0'=-1+deltaext^0, (2+wntext^0-2*delta^0+deltaext^0 <= 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 4
  60: l1 -> l1 : delta_new^0'=1+delta^0, deltaext_new^0'=-1+deltaext^0, delta^0'=1+delta^0, deltaext^0'=-1+deltaext^0, (1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 4
  61: l1 -> l1 : delta_new^0'=delta^0, deltaext_new^0'=1+deltaext^0, delta^0'=delta^0, deltaext^0'=1+deltaext^0, (1+wntext^0-2*delta^0+deltaext^0 == 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 4
  62: l1 -> l1 : delta_new^0'=delta^0, deltaext_new^0'=1+deltaext^0, delta^0'=delta^0, deltaext^0'=1+deltaext^0, (-wntext^0+2*delta^0-deltaext^0 == 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 4
  63: l1 -> l1 : delta_new^0'=-1+delta^0, deltaext_new^0'=1+deltaext^0, delta^0'=-1+delta^0, deltaext^0'=1+deltaext^0, (2+wntext^0-2*delta^0+deltaext^0 <= 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 4
  64: l1 -> l1 : delta_new^0'=1+delta^0, deltaext_new^0'=1+deltaext^0, delta^0'=1+delta^0, deltaext^0'=1+deltaext^0, (1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 4
  32: l6 -> l1 : (-3+deltext^0 <= 0 /\ -3+delta^0 <= 0 /\ wntext^0 >= 0 /\ -3+wnt^0 <= 0 /\ delta^0 >= 0 /\ wnt^0 >= 0 /\ deltaext^0 >= 0 /\ -3+wntext^0 <= 0), cost: 2


Applied simplification
Original rule:
l1 -> l1 : delta_new^0'=-1+delta^0, deltaext_new^0'=deltaext^0, delta^0'=-1+delta^0, deltaext^0'=deltaext^0, (2+wntext^0-2*delta^0+deltaext^0 <= 0 /\ 3+wnt^0-2*deltaext^0 == 0), cost: 4
New rule:
l1 -> l1 : delta_new^0'=-1+delta^0, deltaext_new^0'=deltaext^0, delta^0'=-1+delta^0, (2+wntext^0-2*delta^0+deltaext^0 <= 0 /\ 3+wnt^0-2*deltaext^0 == 0), cost: 4

Applied simplification
Original rule:
l1 -> l1 : delta_new^0'=1+delta^0, deltaext_new^0'=deltaext^0, delta^0'=1+delta^0, deltaext^0'=deltaext^0, (1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ 3+wnt^0-2*deltaext^0 == 0), cost: 4
New rule:
l1 -> l1 : delta_new^0'=1+delta^0, deltaext_new^0'=deltaext^0, delta^0'=1+delta^0, (1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ 3+wnt^0-2*deltaext^0 == 0), cost: 4

Applied simplification
Original rule:
l1 -> l1 : delta_new^0'=-1+delta^0, deltaext_new^0'=deltaext^0, delta^0'=-1+delta^0, deltaext^0'=deltaext^0, (2+wnt^0-2*deltaext^0 == 0 /\ 2+wntext^0-2*delta^0+deltaext^0 <= 0), cost: 4
New rule:
l1 -> l1 : delta_new^0'=-1+delta^0, deltaext_new^0'=deltaext^0, delta^0'=-1+delta^0, (2+wnt^0-2*deltaext^0 == 0 /\ 2+wntext^0-2*delta^0+deltaext^0 <= 0), cost: 4

Applied simplification
Original rule:
l1 -> l1 : delta_new^0'=1+delta^0, deltaext_new^0'=deltaext^0, delta^0'=1+delta^0, deltaext^0'=deltaext^0, (1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ 2+wnt^0-2*deltaext^0 == 0), cost: 4
New rule:
l1 -> l1 : delta_new^0'=1+delta^0, deltaext_new^0'=deltaext^0, delta^0'=1+delta^0, (1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ 2+wnt^0-2*deltaext^0 == 0), cost: 4

Applied simplification
Original rule:
l1 -> l1 : delta_new^0'=delta^0, deltaext_new^0'=-1+deltaext^0, delta^0'=delta^0, deltaext^0'=-1+deltaext^0, (1+wntext^0-2*delta^0+deltaext^0 == 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 4
New rule:
l1 -> l1 : delta_new^0'=delta^0, deltaext_new^0'=-1+deltaext^0, deltaext^0'=-1+deltaext^0, (1+wntext^0-2*delta^0+deltaext^0 == 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 4

Applied simplification
Original rule:
l1 -> l1 : delta_new^0'=delta^0, deltaext_new^0'=-1+deltaext^0, delta^0'=delta^0, deltaext^0'=-1+deltaext^0, (-wntext^0+2*delta^0-deltaext^0 == 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 4
New rule:
l1 -> l1 : delta_new^0'=delta^0, deltaext_new^0'=-1+deltaext^0, deltaext^0'=-1+deltaext^0, (-wntext^0+2*delta^0-deltaext^0 == 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 4

Applied simplification
Original rule:
l1 -> l1 : delta_new^0'=delta^0, deltaext_new^0'=1+deltaext^0, delta^0'=delta^0, deltaext^0'=1+deltaext^0, (1+wntext^0-2*delta^0+deltaext^0 == 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 4
New rule:
l1 -> l1 : delta_new^0'=delta^0, deltaext_new^0'=1+deltaext^0, deltaext^0'=1+deltaext^0, (1+wntext^0-2*delta^0+deltaext^0 == 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 4

Applied simplification
Original rule:
l1 -> l1 : delta_new^0'=delta^0, deltaext_new^0'=1+deltaext^0, delta^0'=delta^0, deltaext^0'=1+deltaext^0, (-wntext^0+2*delta^0-deltaext^0 == 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 4
New rule:
l1 -> l1 : delta_new^0'=delta^0, deltaext_new^0'=1+deltaext^0, deltaext^0'=1+deltaext^0, (-wntext^0+2*delta^0-deltaext^0 == 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 4

Simplified simple loops
Start location: l6
  59: l1 -> l1 : delta_new^0'=-1+delta^0, deltaext_new^0'=-1+deltaext^0, delta^0'=-1+delta^0, deltaext^0'=-1+deltaext^0, (2+wntext^0-2*delta^0+deltaext^0 <= 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 4
  60: l1 -> l1 : delta_new^0'=1+delta^0, deltaext_new^0'=-1+deltaext^0, delta^0'=1+delta^0, deltaext^0'=-1+deltaext^0, (1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 4
  63: l1 -> l1 : delta_new^0'=-1+delta^0, deltaext_new^0'=1+deltaext^0, delta^0'=-1+delta^0, deltaext^0'=1+deltaext^0, (2+wntext^0-2*delta^0+deltaext^0 <= 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 4
  64: l1 -> l1 : delta_new^0'=1+delta^0, deltaext_new^0'=1+deltaext^0, delta^0'=1+delta^0, deltaext^0'=1+deltaext^0, (1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 4
  65: l1 -> l1 : delta_new^0'=-1+delta^0, deltaext_new^0'=deltaext^0, delta^0'=-1+delta^0, (2+wntext^0-2*delta^0+deltaext^0 <= 0 /\ 3+wnt^0-2*deltaext^0 == 0), cost: 4
  66: l1 -> l1 : delta_new^0'=1+delta^0, deltaext_new^0'=deltaext^0, delta^0'=1+delta^0, (1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ 3+wnt^0-2*deltaext^0 == 0), cost: 4
  67: l1 -> l1 : delta_new^0'=-1+delta^0, deltaext_new^0'=deltaext^0, delta^0'=-1+delta^0, (2+wnt^0-2*deltaext^0 == 0 /\ 2+wntext^0-2*delta^0+deltaext^0 <= 0), cost: 4
  68: l1 -> l1 : delta_new^0'=1+delta^0, deltaext_new^0'=deltaext^0, delta^0'=1+delta^0, (1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ 2+wnt^0-2*deltaext^0 == 0), cost: 4
  69: l1 -> l1 : delta_new^0'=delta^0, deltaext_new^0'=-1+deltaext^0, deltaext^0'=-1+deltaext^0, (1+wntext^0-2*delta^0+deltaext^0 == 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 4
  70: l1 -> l1 : delta_new^0'=delta^0, deltaext_new^0'=-1+deltaext^0, deltaext^0'=-1+deltaext^0, (-wntext^0+2*delta^0-deltaext^0 == 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 4
  71: l1 -> l1 : delta_new^0'=delta^0, deltaext_new^0'=1+deltaext^0, deltaext^0'=1+deltaext^0, (1+wntext^0-2*delta^0+deltaext^0 == 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 4
  72: l1 -> l1 : delta_new^0'=delta^0, deltaext_new^0'=1+deltaext^0, deltaext^0'=1+deltaext^0, (-wntext^0+2*delta^0-deltaext^0 == 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 4
  32: l6 -> l1 : (-3+deltext^0 <= 0 /\ -3+delta^0 <= 0 /\ wntext^0 >= 0 /\ -3+wnt^0 <= 0 /\ delta^0 >= 0 /\ wnt^0 >= 0 /\ deltaext^0 >= 0 /\ -3+wntext^0 <= 0), cost: 2


Applied acceleration
Original rule:
l1 -> l1 : delta_new^0'=-1+delta^0, deltaext_new^0'=-1+deltaext^0, delta^0'=-1+delta^0, deltaext^0'=-1+deltaext^0, (2+wntext^0-2*delta^0+deltaext^0 <= 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 4
New rule:
l1 -> l1 : delta_new^0'=delta^0-n, deltaext_new^0'=deltaext^0-n, delta^0'=delta^0-n, deltaext^0'=deltaext^0-n, (-1+n >= 0 /\ -1-wntext^0+2*delta^0-deltaext^0-n >= 0 /\ -2-wnt^0+2*deltaext^0-2*n >= 0), cost: 4*n
Sub-proof via acceration calculus written to file:///tmp/tmpnam_ennIcc.txt

Applied instantiation
Original rule:
l1 -> l1 : delta_new^0'=delta^0-n, deltaext_new^0'=deltaext^0-n, delta^0'=delta^0-n, deltaext^0'=deltaext^0-n, (-1+n >= 0 /\ -1-wntext^0+2*delta^0-deltaext^0-n >= 0 /\ -2-wnt^0+2*deltaext^0-2*n >= 0), cost: 4*n
New rule:
l1 -> l1 : delta_new^0'=1+wntext^0-delta^0+deltaext^0, deltaext_new^0'=1+wntext^0-2*delta^0+2*deltaext^0, delta^0'=1+wntext^0-delta^0+deltaext^0, deltaext^0'=1+wntext^0-2*delta^0+2*deltaext^0, (0 >= 0 /\ -2-wntext^0+2*delta^0-deltaext^0 >= 0 /\ 2*wntext^0-4*delta^0-wnt^0+4*deltaext^0 >= 0), cost: -4-4*wntext^0+8*delta^0-4*deltaext^0

Applied acceleration
Original rule:
l1 -> l1 : delta_new^0'=1+delta^0, deltaext_new^0'=-1+deltaext^0, delta^0'=1+delta^0, deltaext^0'=-1+deltaext^0, (1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 4
New rule:
l1 -> l1 : delta_new^0'=delta^0+n0, deltaext_new^0'=deltaext^0-n0, delta^0'=delta^0+n0, deltaext^0'=deltaext^0-n0, (2+wntext^0-2*delta^0+deltaext^0-3*n0 >= 0 /\ -1+n0 >= 0 /\ -2-wnt^0+2*deltaext^0-2*n0 >= 0), cost: 4*n0
Sub-proof via acceration calculus written to file:///tmp/tmpnam_PmAHKM.txt

Applied acceleration
Original rule:
l1 -> l1 : delta_new^0'=-1+delta^0, deltaext_new^0'=1+deltaext^0, delta^0'=-1+delta^0, deltaext^0'=1+deltaext^0, (2+wntext^0-2*delta^0+deltaext^0 <= 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 4
New rule:
l1 -> l1 : delta_new^0'=delta^0-n1, deltaext_new^0'=n1+deltaext^0, delta^0'=delta^0-n1, deltaext^0'=n1+deltaext^0, (1-wntext^0+2*delta^0-3*n1-deltaext^0 >= 0 /\ 3-2*n1+wnt^0-2*deltaext^0 >= 0 /\ -1+n1 >= 0), cost: 4*n1
Sub-proof via acceration calculus written to file:///tmp/tmpnam_GJlJBj.txt

Applied acceleration
Original rule:
l1 -> l1 : delta_new^0'=1+delta^0, deltaext_new^0'=1+deltaext^0, delta^0'=1+delta^0, deltaext^0'=1+deltaext^0, (1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 4
New rule:
l1 -> l1 : delta_new^0'=n2+delta^0, deltaext_new^0'=n2+deltaext^0, delta^0'=n2+delta^0, deltaext^0'=n2+deltaext^0, (3-2*n2+wnt^0-2*deltaext^0 >= 0 /\ -n2+wntext^0-2*delta^0+deltaext^0 >= 0 /\ -1+n2 >= 0), cost: 4*n2
Sub-proof via acceration calculus written to file:///tmp/tmpnam_HnoDFa.txt

Applied instantiation
Original rule:
l1 -> l1 : delta_new^0'=n2+delta^0, deltaext_new^0'=n2+deltaext^0, delta^0'=n2+delta^0, deltaext^0'=n2+deltaext^0, (3-2*n2+wnt^0-2*deltaext^0 >= 0 /\ -n2+wntext^0-2*delta^0+deltaext^0 >= 0 /\ -1+n2 >= 0), cost: 4*n2
New rule:
l1 -> l1 : delta_new^0'=wntext^0-delta^0+deltaext^0, deltaext_new^0'=wntext^0-2*delta^0+2*deltaext^0, delta^0'=wntext^0-delta^0+deltaext^0, deltaext^0'=wntext^0-2*delta^0+2*deltaext^0, (0 >= 0 /\ 3-2*wntext^0+4*delta^0+wnt^0-4*deltaext^0 >= 0 /\ -1+wntext^0-2*delta^0+deltaext^0 >= 0), cost: 4*wntext^0-8*delta^0+4*deltaext^0

Applied acceleration
Original rule:
l1 -> l1 : delta_new^0'=-1+delta^0, deltaext_new^0'=deltaext^0, delta^0'=-1+delta^0, (2+wntext^0-2*delta^0+deltaext^0 <= 0 /\ 3+wnt^0-2*deltaext^0 == 0), cost: 4
New rule:
l1 -> l1 : delta_new^0'=-n3+delta^0, deltaext_new^0'=deltaext^0, delta^0'=-n3+delta^0, (-2*n3-wntext^0+2*delta^0-deltaext^0 >= 0 /\ 3+wnt^0-2*deltaext^0 >= 0 /\ -3-wnt^0+2*deltaext^0 >= 0 /\ -1+n3 >= 0), cost: 4*n3
Sub-proof via acceration calculus written to file:///tmp/tmpnam_CbCpKJ.txt

Applied acceleration
Original rule:
l1 -> l1 : delta_new^0'=1+delta^0, deltaext_new^0'=deltaext^0, delta^0'=1+delta^0, (1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ 3+wnt^0-2*deltaext^0 == 0), cost: 4
New rule:
l1 -> l1 : delta_new^0'=delta^0+n4, deltaext_new^0'=deltaext^0, delta^0'=delta^0+n4, (-1+n4 >= 0 /\ 3+wnt^0-2*deltaext^0 >= 0 /\ 1+wntext^0-2*delta^0+deltaext^0-2*n4 >= 0 /\ -3-wnt^0+2*deltaext^0 >= 0), cost: 4*n4
Sub-proof via acceration calculus written to file:///tmp/tmpnam_kHGgLA.txt

Applied acceleration
Original rule:
l1 -> l1 : delta_new^0'=-1+delta^0, deltaext_new^0'=deltaext^0, delta^0'=-1+delta^0, (2+wnt^0-2*deltaext^0 == 0 /\ 2+wntext^0-2*delta^0+deltaext^0 <= 0), cost: 4
New rule:
l1 -> l1 : delta_new^0'=-n5+delta^0, deltaext_new^0'=deltaext^0, delta^0'=-n5+delta^0, (-1+n5 >= 0 /\ 2+wnt^0-2*deltaext^0 >= 0 /\ -wntext^0-2*n5+2*delta^0-deltaext^0 >= 0 /\ -2-wnt^0+2*deltaext^0 >= 0), cost: 4*n5
Sub-proof via acceration calculus written to file:///tmp/tmpnam_FAEDBE.txt

Applied acceleration
Original rule:
l1 -> l1 : delta_new^0'=1+delta^0, deltaext_new^0'=deltaext^0, delta^0'=1+delta^0, (1-wntext^0+2*delta^0-deltaext^0 <= 0 /\ 2+wnt^0-2*deltaext^0 == 0), cost: 4
New rule:
l1 -> l1 : delta_new^0'=n6+delta^0, deltaext_new^0'=deltaext^0, delta^0'=n6+delta^0, (2+wnt^0-2*deltaext^0 >= 0 /\ 1+wntext^0-2*n6-2*delta^0+deltaext^0 >= 0 /\ -2-wnt^0+2*deltaext^0 >= 0 /\ -1+n6 >= 0), cost: 4*n6
Sub-proof via acceration calculus written to file:///tmp/tmpnam_eKPJLO.txt

Applied simplification
Original rule:
l1 -> l1 : delta_new^0'=1+wntext^0-delta^0+deltaext^0, deltaext_new^0'=1+wntext^0-2*delta^0+2*deltaext^0, delta^0'=1+wntext^0-delta^0+deltaext^0, deltaext^0'=1+wntext^0-2*delta^0+2*deltaext^0, (0 >= 0 /\ -2-wntext^0+2*delta^0-deltaext^0 >= 0 /\ 2*wntext^0-4*delta^0-wnt^0+4*deltaext^0 >= 0), cost: -4-4*wntext^0+8*delta^0-4*deltaext^0
New rule:
l1 -> l1 : delta_new^0'=1+wntext^0-delta^0+deltaext^0, deltaext_new^0'=1+wntext^0-2*delta^0+2*deltaext^0, delta^0'=1+wntext^0-delta^0+deltaext^0, deltaext^0'=1+wntext^0-2*delta^0+2*deltaext^0, (-2-wntext^0+2*delta^0-deltaext^0 >= 0 /\ 2*wntext^0-4*delta^0-wnt^0+4*deltaext^0 >= 0), cost: -4-4*wntext^0+8*delta^0-4*deltaext^0

Applied simplification
Original rule:
l1 -> l1 : delta_new^0'=wntext^0-delta^0+deltaext^0, deltaext_new^0'=wntext^0-2*delta^0+2*deltaext^0, delta^0'=wntext^0-delta^0+deltaext^0, deltaext^0'=wntext^0-2*delta^0+2*deltaext^0, (0 >= 0 /\ 3-2*wntext^0+4*delta^0+wnt^0-4*deltaext^0 >= 0 /\ -1+wntext^0-2*delta^0+deltaext^0 >= 0), cost: 4*wntext^0-8*delta^0+4*deltaext^0
New rule:
l1 -> l1 : delta_new^0'=wntext^0-delta^0+deltaext^0, deltaext_new^0'=wntext^0-2*delta^0+2*deltaext^0, delta^0'=wntext^0-delta^0+deltaext^0, deltaext^0'=wntext^0-2*delta^0+2*deltaext^0, (3-2*wntext^0+4*delta^0+wnt^0-4*deltaext^0 >= 0 /\ -1+wntext^0-2*delta^0+deltaext^0 >= 0), cost: 4*wntext^0-8*delta^0+4*deltaext^0

Applied deletion
Removed the following rules: 59 60 63 64 65 66 67 68

Accelerated simple loops
Start location: l6
  69: l1 -> l1 : delta_new^0'=delta^0, deltaext_new^0'=-1+deltaext^0, deltaext^0'=-1+deltaext^0, (1+wntext^0-2*delta^0+deltaext^0 == 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 4
  70: l1 -> l1 : delta_new^0'=delta^0, deltaext_new^0'=-1+deltaext^0, deltaext^0'=-1+deltaext^0, (-wntext^0+2*delta^0-deltaext^0 == 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 4
  71: l1 -> l1 : delta_new^0'=delta^0, deltaext_new^0'=1+deltaext^0, deltaext^0'=1+deltaext^0, (1+wntext^0-2*delta^0+deltaext^0 == 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 4
  72: l1 -> l1 : delta_new^0'=delta^0, deltaext_new^0'=1+deltaext^0, deltaext^0'=1+deltaext^0, (-wntext^0+2*delta^0-deltaext^0 == 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 4
  74: l1 -> l1 : delta_new^0'=delta^0+n0, deltaext_new^0'=deltaext^0-n0, delta^0'=delta^0+n0, deltaext^0'=deltaext^0-n0, (2+wntext^0-2*delta^0+deltaext^0-3*n0 >= 0 /\ -1+n0 >= 0 /\ -2-wnt^0+2*deltaext^0-2*n0 >= 0), cost: 4*n0
  75: l1 -> l1 : delta_new^0'=delta^0-n1, deltaext_new^0'=n1+deltaext^0, delta^0'=delta^0-n1, deltaext^0'=n1+deltaext^0, (1-wntext^0+2*delta^0-3*n1-deltaext^0 >= 0 /\ 3-2*n1+wnt^0-2*deltaext^0 >= 0 /\ -1+n1 >= 0), cost: 4*n1
  77: l1 -> l1 : delta_new^0'=-n3+delta^0, deltaext_new^0'=deltaext^0, delta^0'=-n3+delta^0, (-2*n3-wntext^0+2*delta^0-deltaext^0 >= 0 /\ 3+wnt^0-2*deltaext^0 >= 0 /\ -3-wnt^0+2*deltaext^0 >= 0 /\ -1+n3 >= 0), cost: 4*n3
  78: l1 -> l1 : delta_new^0'=delta^0+n4, deltaext_new^0'=deltaext^0, delta^0'=delta^0+n4, (-1+n4 >= 0 /\ 3+wnt^0-2*deltaext^0 >= 0 /\ 1+wntext^0-2*delta^0+deltaext^0-2*n4 >= 0 /\ -3-wnt^0+2*deltaext^0 >= 0), cost: 4*n4
  79: l1 -> l1 : delta_new^0'=-n5+delta^0, deltaext_new^0'=deltaext^0, delta^0'=-n5+delta^0, (-1+n5 >= 0 /\ 2+wnt^0-2*deltaext^0 >= 0 /\ -wntext^0-2*n5+2*delta^0-deltaext^0 >= 0 /\ -2-wnt^0+2*deltaext^0 >= 0), cost: 4*n5
  80: l1 -> l1 : delta_new^0'=n6+delta^0, deltaext_new^0'=deltaext^0, delta^0'=n6+delta^0, (2+wnt^0-2*deltaext^0 >= 0 /\ 1+wntext^0-2*n6-2*delta^0+deltaext^0 >= 0 /\ -2-wnt^0+2*deltaext^0 >= 0 /\ -1+n6 >= 0), cost: 4*n6
  81: l1 -> l1 : delta_new^0'=1+wntext^0-delta^0+deltaext^0, deltaext_new^0'=1+wntext^0-2*delta^0+2*deltaext^0, delta^0'=1+wntext^0-delta^0+deltaext^0, deltaext^0'=1+wntext^0-2*delta^0+2*deltaext^0, (-2-wntext^0+2*delta^0-deltaext^0 >= 0 /\ 2*wntext^0-4*delta^0-wnt^0+4*deltaext^0 >= 0), cost: -4-4*wntext^0+8*delta^0-4*deltaext^0
  82: l1 -> l1 : delta_new^0'=wntext^0-delta^0+deltaext^0, deltaext_new^0'=wntext^0-2*delta^0+2*deltaext^0, delta^0'=wntext^0-delta^0+deltaext^0, deltaext^0'=wntext^0-2*delta^0+2*deltaext^0, (3-2*wntext^0+4*delta^0+wnt^0-4*deltaext^0 >= 0 /\ -1+wntext^0-2*delta^0+deltaext^0 >= 0), cost: 4*wntext^0-8*delta^0+4*deltaext^0
  32: l6 -> l1 : (-3+deltext^0 <= 0 /\ -3+delta^0 <= 0 /\ wntext^0 >= 0 /\ -3+wnt^0 <= 0 /\ delta^0 >= 0 /\ wnt^0 >= 0 /\ deltaext^0 >= 0 /\ -3+wntext^0 <= 0), cost: 2


Applied chaining
First rule:
l6 -> l1 : (-3+deltext^0 <= 0 /\ -3+delta^0 <= 0 /\ wntext^0 >= 0 /\ -3+wnt^0 <= 0 /\ delta^0 >= 0 /\ wnt^0 >= 0 /\ deltaext^0 >= 0 /\ -3+wntext^0 <= 0), cost: 2
Second rule:
l1 -> l1 : delta_new^0'=delta^0, deltaext_new^0'=-1+deltaext^0, deltaext^0'=-1+deltaext^0, (1+wntext^0-2*delta^0+deltaext^0 == 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 4
New rule:
l6 -> l1 : delta_new^0'=delta^0, deltaext_new^0'=-1+deltaext^0, deltaext^0'=-1+deltaext^0, (-3+deltext^0 <= 0 /\ -3+delta^0 <= 0 /\ 1+wntext^0-2*delta^0+deltaext^0 == 0 /\ wntext^0 >= 0 /\ -3+wnt^0 <= 0 /\ wnt^0 >= 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 6

Applied chaining
First rule:
l6 -> l1 : (-3+deltext^0 <= 0 /\ -3+delta^0 <= 0 /\ wntext^0 >= 0 /\ -3+wnt^0 <= 0 /\ delta^0 >= 0 /\ wnt^0 >= 0 /\ deltaext^0 >= 0 /\ -3+wntext^0 <= 0), cost: 2
Second rule:
l1 -> l1 : delta_new^0'=delta^0, deltaext_new^0'=-1+deltaext^0, deltaext^0'=-1+deltaext^0, (-wntext^0+2*delta^0-deltaext^0 == 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 4
New rule:
l6 -> l1 : delta_new^0'=delta^0, deltaext_new^0'=-1+deltaext^0, deltaext^0'=-1+deltaext^0, (-wntext^0+2*delta^0-deltaext^0 == 0 /\ -3+deltext^0 <= 0 /\ -3+delta^0 <= 0 /\ wntext^0 >= 0 /\ -3+wnt^0 <= 0 /\ wnt^0 >= 0 /\ 4+wnt^0-2*deltaext^0 <= 0 /\ -3+wntext^0 <= 0), cost: 6

Applied chaining
First rule:
l6 -> l1 : (-3+deltext^0 <= 0 /\ -3+delta^0 <= 0 /\ wntext^0 >= 0 /\ -3+wnt^0 <= 0 /\ delta^0 >= 0 /\ wnt^0 >= 0 /\ deltaext^0 >= 0 /\ -3+wntext^0 <= 0), cost: 2
Second rule:
l1 -> l1 : delta_new^0'=delta^0, deltaext_new^0'=1+deltaext^0, deltaext^0'=1+deltaext^0, (1+wntext^0-2*delta^0+deltaext^0 == 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 4
New rule:
l6 -> l1 : delta_new^0'=delta^0, deltaext_new^0'=1+deltaext^0, deltaext^0'=1+deltaext^0, (-3+deltext^0 <= 0 /\ 1+wntext^0-2*delta^0+deltaext^0 == 0 /\ wntext^0 >= 0 /\ -3+wnt^0 <= 0 /\ -1-wnt^0+2*deltaext^0 <= 0 /\ wnt^0 >= 0 /\ deltaext^0 >= 0 /\ -3+wntext^0 <= 0), cost: 6

Applied chaining
First rule:
l6 -> l1 : (-3+deltext^0 <= 0 /\ -3+delta^0 <= 0 /\ wntext^0 >= 0 /\ -3+wnt^0 <= 0 /\ delta^0 >= 0 /\ wnt^0 >= 0 /\ deltaext^0 >= 0 /\ -3+wntext^0 <= 0), cost: 2
Second rule:
l1 -> l1 : delta_new^0'=delta^0, deltaext_new^0'=1+deltaext^0, deltaext^0'=1+deltaext^0, (-wntext^0+2*delta^0-deltaext^0 == 0 /\ -1-wnt^0+2*deltaext^0 <= 0), cost: 4
New rule:
l6 -> l1 : delta_new^0'=delta^0, deltaext_new^0'=1+deltaext^0, deltaext^0'=1+deltaext^0, (-wntext^0+2*delta^0-deltaext^0 == 0 /\ -3+deltext^0 <= 0 /\ wntext^0 >= 0 /\ -3+wnt^0 <= 0 /\ -1-wnt^0+2*deltaext^0 <= 0 /\ wnt^0 >= 0 /\ deltaext^0 >= 0 /\ -3+wntext^0 <= 0), cost: 6

Applied chaining
First rule:
l6 -> l1 : (-3+deltext^0 <= 0 /\ -3+delta^0 <= 0 /\ wntext^0 >= 0 /\ -3+wnt^0 <= 0 /\ delta^0 >= 0 /\ wnt^0 >= 0 /\ deltaext^0 >= 0 /\ -3+wntext^0 <= 0), cost: 2
Second rule:
l1 -> l1 : delta_new^0'=delta^0+n0, deltaext_new^0'=deltaext^0-n0, delta^0'=delta^0+n0, deltaext^0'=deltaext^0-n0, (2+wntext^0-2*delta^0+deltaext^0-3*n0 >= 0 /\ -1+n0 >= 0 /\ -2-wnt^0+2*deltaext^0-2*n0 >= 0), cost: 4*n0
New rule:
l6 -> l1 : delta_new^0'=delta^0+n0, deltaext_new^0'=deltaext^0-n0, delta^0'=delta^0+n0, deltaext^0'=deltaext^0-n0, (2+wntext^0-2*delta^0+deltaext^0-3*n0 >= 0 /\ -3+deltext^0 <= 0 /\ -1+n0 >= 0 /\ -3+delta^0 <= 0 /\ wntext^0 >= 0 /\ -3+wnt^0 <= 0 /\ delta^0 >= 0 /\ wnt^0 >= 0 /\ -2-wnt^0+2*deltaext^0-2*n0 >= 0 /\ -3+wntext^0 <= 0), cost: 2+4*n0

Applied chaining
First rule:
l6 -> l1 : (-3+deltext^0 <= 0 /\ -3+delta^0 <= 0 /\ wntext^0 >= 0 /\ -3+wnt^0 <= 0 /\ delta^0 >= 0 /\ wnt^0 >= 0 /\ deltaext^0 >= 0 /\ -3+wntext^0 <= 0), cost: 2
Second rule:
l1 -> l1 : delta_new^0'=delta^0-n1, deltaext_new^0'=n1+deltaext^0, delta^0'=delta^0-n1, deltaext^0'=n1+deltaext^0, (1-wntext^0+2*delta^0-3*n1-deltaext^0 >= 0 /\ 3-2*n1+wnt^0-2*deltaext^0 >= 0 /\ -1+n1 >= 0), cost: 4*n1
New rule:
l6 -> l1 : delta_new^0'=delta^0-n1, deltaext_new^0'=n1+deltaext^0, delta^0'=delta^0-n1, deltaext^0'=n1+deltaext^0, (-3+deltext^0 <= 0 /\ -3+delta^0 <= 0 /\ wntext^0 >= 0 /\ -3+wnt^0 <= 0 /\ wnt^0 >= 0 /\ 1-wntext^0+2*delta^0-3*n1-deltaext^0 >= 0 /\ 3-2*n1+wnt^0-2*deltaext^0 >= 0 /\ deltaext^0 >= 0 /\ -1+n1 >= 0 /\ -3+wntext^0 <= 0), cost: 2+4*n1

Applied chaining
First rule:
l6 -> l1 : (-3+deltext^0 <= 0 /\ -3+delta^0 <= 0 /\ wntext^0 >= 0 /\ -3+wnt^0 <= 0 /\ delta^0 >= 0 /\ wnt^0 >= 0 /\ deltaext^0 >= 0 /\ -3+wntext^0 <= 0), cost: 2
Second rule:
l1 -> l1 : delta_new^0'=-n3+delta^0, deltaext_new^0'=deltaext^0, delta^0'=-n3+delta^0, (-2*n3-wntext^0+2*delta^0-deltaext^0 >= 0 /\ 3+wnt^0-2*deltaext^0 >= 0 /\ -3-wnt^0+2*deltaext^0 >= 0 /\ -1+n3 >= 0), cost: 4*n3
New rule:
l6 -> l1 : delta_new^0'=-n3+delta^0, deltaext_new^0'=deltaext^0, delta^0'=-n3+delta^0, (-2*n3-wntext^0+2*delta^0-deltaext^0 >= 0 /\ -3+deltext^0 <= 0 /\ -3+delta^0 <= 0 /\ wntext^0 >= 0 /\ -3+wnt^0 <= 0 /\ wnt^0 >= 0 /\ -3-wnt^0+2*deltaext^0 == 0 /\ -1+n3 >= 0), cost: 2+4*n3

Applied chaining
First rule:
l6 -> l1 : (-3+deltext^0 <= 0 /\ -3+delta^0 <= 0 /\ wntext^0 >= 0 /\ -3+wnt^0 <= 0 /\ delta^0 >= 0 /\ wnt^0 >= 0 /\ deltaext^0 >= 0 /\ -3+wntext^0 <= 0), cost: 2
Second rule:
l1 -> l1 : delta_new^0'=delta^0+n4, deltaext_new^0'=deltaext^0, delta^0'=delta^0+n4, (-1+n4 >= 0 /\ 3+wnt^0-2*deltaext^0 >= 0 /\ 1+wntext^0-2*delta^0+deltaext^0-2*n4 >= 0 /\ -3-wnt^0+2*deltaext^0 >= 0), cost: 4*n4
New rule:
l6 -> l1 : delta_new^0'=delta^0+n4, deltaext_new^0'=deltaext^0, delta^0'=delta^0+n4, (-1+n4 >= 0 /\ -3+deltext^0 <= 0 /\ wntext^0 >= 0 /\ 1+wntext^0-2*delta^0+deltaext^0-2*n4 >= 0 /\ -3+wnt^0 <= 0 /\ delta^0 >= 0 /\ wnt^0 >= 0 /\ -3-wnt^0+2*deltaext^0 == 0 /\ -3+wntext^0 <= 0), cost: 2+4*n4

Applied chaining
First rule:
l6 -> l1 : (-3+deltext^0 <= 0 /\ -3+delta^0 <= 0 /\ wntext^0 >= 0 /\ -3+wnt^0 <= 0 /\ delta^0 >= 0 /\ wnt^0 >= 0 /\ deltaext^0 >= 0 /\ -3+wntext^0 <= 0), cost: 2
Second rule:
l1 -> l1 : delta_new^0'=-n5+delta^0, deltaext_new^0'=deltaext^0, delta^0'=-n5+delta^0, (-1+n5 >= 0 /\ 2+wnt^0-2*deltaext^0 >= 0 /\ -wntext^0-2*n5+2*delta^0-deltaext^0 >= 0 /\ -2-wnt^0+2*deltaext^0 >= 0), cost: 4*n5
New rule:
l6 -> l1 : delta_new^0'=-n5+delta^0, deltaext_new^0'=deltaext^0, delta^0'=-n5+delta^0, (-1+n5 >= 0 /\ -3+deltext^0 <= 0 /\ -3+delta^0 <= 0 /\ wntext^0 >= 0 /\ -3+wnt^0 <= 0 /\ -wntext^0-2*n5+2*delta^0-deltaext^0 >= 0 /\ -2-wnt^0+2*deltaext^0 == 0 /\ wnt^0 >= 0), cost: 2+4*n5

Applied chaining
First rule:
l6 -> l1 : (-3+deltext^0 <= 0 /\ -3+delta^0 <= 0 /\ wntext^0 >= 0 /\ -3+wnt^0 <= 0 /\ delta^0 >= 0 /\ wnt^0 >= 0 /\ deltaext^0 >= 0 /\ -3+wntext^0 <= 0), cost: 2
Second rule:
l1 -> l1 : delta_new^0'=n6+delta^0, deltaext_new^0'=deltaext^0, delta^0'=n6+delta^0, (2+wnt^0-2*deltaext^0 >= 0 /\ 1+wntext^0-2*n6-2*delta^0+deltaext^0 >= 0 /\ -2-wnt^0+2*deltaext^0 >= 0 /\ -1+n6 >= 0), cost: 4*n6
New rule:
l6 -> l1 : delta_new^0'=n6+delta^0, deltaext_new^0'=deltaext^0, delta^0'=n6+delta^0, (-3+deltext^0 <= 0 /\ 1+wntext^0-2*n6-2*delta^0+deltaext^0 >= 0 /\ wntext^0 >= 0 /\ -3+wnt^0 <= 0 /\ delta^0 >= 0 /\ -2-wnt^0+2*deltaext^0 == 0 /\ wnt^0 >= 0 /\ -3+wntext^0 <= 0 /\ -1+n6 >= 0), cost: 2+4*n6

Applied chaining
First rule:
l6 -> l1 : (-3+deltext^0 <= 0 /\ -3+delta^0 <= 0 /\ wntext^0 >= 0 /\ -3+wnt^0 <= 0 /\ delta^0 >= 0 /\ wnt^0 >= 0 /\ deltaext^0 >= 0 /\ -3+wntext^0 <= 0), cost: 2
Second rule:
l1 -> l1 : delta_new^0'=1+wntext^0-delta^0+deltaext^0, deltaext_new^0'=1+wntext^0-2*delta^0+2*deltaext^0, delta^0'=1+wntext^0-delta^0+deltaext^0, deltaext^0'=1+wntext^0-2*delta^0+2*deltaext^0, (-2-wntext^0+2*delta^0-deltaext^0 >= 0 /\ 2*wntext^0-4*delta^0-wnt^0+4*deltaext^0 >= 0), cost: -4-4*wntext^0+8*delta^0-4*deltaext^0
New rule:
l6 -> l1 : delta_new^0'=1+wntext^0-delta^0+deltaext^0, deltaext_new^0'=1+wntext^0-2*delta^0+2*deltaext^0, delta^0'=1+wntext^0-delta^0+deltaext^0, deltaext^0'=1+wntext^0-2*delta^0+2*deltaext^0, (-2-wntext^0+2*delta^0-deltaext^0 >= 0 /\ -3+deltext^0 <= 0 /\ -3+delta^0 <= 0 /\ wntext^0 >= 0 /\ 2*wntext^0-4*delta^0-wnt^0+4*deltaext^0 >= 0 /\ -3+wnt^0 <= 0 /\ wnt^0 >= 0), cost: -2-4*wntext^0+8*delta^0-4*deltaext^0

Applied chaining
First rule:
l6 -> l1 : (-3+deltext^0 <= 0 /\ -3+delta^0 <= 0 /\ wntext^0 >= 0 /\ -3+wnt^0 <= 0 /\ delta^0 >= 0 /\ wnt^0 >= 0 /\ deltaext^0 >= 0 /\ -3+wntext^0 <= 0), cost: 2
Second rule:
l1 -> l1 : delta_new^0'=wntext^0-delta^0+deltaext^0, deltaext_new^0'=wntext^0-2*delta^0+2*deltaext^0, delta^0'=wntext^0-delta^0+deltaext^0, deltaext^0'=wntext^0-2*delta^0+2*deltaext^0, (3-2*wntext^0+4*delta^0+wnt^0-4*deltaext^0 >= 0 /\ -1+wntext^0-2*delta^0+deltaext^0 >= 0), cost: 4*wntext^0-8*delta^0+4*deltaext^0
New rule:
l6 -> l1 : delta_new^0'=wntext^0-delta^0+deltaext^0, deltaext_new^0'=wntext^0-2*delta^0+2*deltaext^0, delta^0'=wntext^0-delta^0+deltaext^0, deltaext^0'=wntext^0-2*delta^0+2*deltaext^0, (-3+deltext^0 <= 0 /\ wntext^0 >= 0 /\ 3-2*wntext^0+4*delta^0+wnt^0-4*deltaext^0 >= 0 /\ -3+wnt^0 <= 0 /\ -1+wntext^0-2*delta^0+deltaext^0 >= 0 /\ delta^0 >= 0 /\ wnt^0 >= 0 /\ deltaext^0 >= 0 /\ -3+wntext^0 <= 0), cost: 2+4*wntext^0-8*delta^0+4*deltaext^0

Applied deletion
Removed the following rules: 69 70 71 72 74 75 77 78 79 80 81 82

Chained accelerated rules with incoming rules
Start location: l6
  32: l6 -> l1 : (-3+deltext^0 <= 0 /\ -3+delta^0 <= 0 /\ wntext^0 >= 0 /\ -3+wnt^0 <= 0 /\ delta^0 >= 0 /\ wnt^0 >= 0 /\ deltaext^0 >= 0 /\ -3+wntext^0 <= 0), cost: 2
  83: l6 -> l1 : delta_new^0'=delta^0, deltaext_new^0'=-1+deltaext^0, deltaext^0'=-1+deltaext^0, (-3+deltext^0 <= 0 /\ -3+delta^0 <= 0 /\ 1+wntext^0-2*delta^0+deltaext^0 == 0 /\ wntext^0 >= 0 /\ -3+wnt^0 <= 0 /\ wnt^0 >= 0 /\ 4+wnt^0-2*deltaext^0 <= 0), cost: 6
  84: l6 -> l1 : delta_new^0'=delta^0, deltaext_new^0'=-1+deltaext^0, deltaext^0'=-1+deltaext^0, (-wntext^0+2*delta^0-deltaext^0 == 0 /\ -3+deltext^0 <= 0 /\ -3+delta^0 <= 0 /\ wntext^0 >= 0 /\ -3+wnt^0 <= 0 /\ wnt^0 >= 0 /\ 4+wnt^0-2*deltaext^0 <= 0 /\ -3+wntext^0 <= 0), cost: 6
  85: l6 -> l1 : delta_new^0'=delta^0, deltaext_new^0'=1+deltaext^0, deltaext^0'=1+deltaext^0, (-3+deltext^0 <= 0 /\ 1+wntext^0-2*delta^0+deltaext^0 == 0 /\ wntext^0 >= 0 /\ -3+wnt^0 <= 0 /\ -1-wnt^0+2*deltaext^0 <= 0 /\ wnt^0 >= 0 /\ deltaext^0 >= 0 /\ -3+wntext^0 <= 0), cost: 6
  86: l6 -> l1 : delta_new^0'=delta^0, deltaext_new^0'=1+deltaext^0, deltaext^0'=1+deltaext^0, (-wntext^0+2*delta^0-deltaext^0 == 0 /\ -3+deltext^0 <= 0 /\ wntext^0 >= 0 /\ -3+wnt^0 <= 0 /\ -1-wnt^0+2*deltaext^0 <= 0 /\ wnt^0 >= 0 /\ deltaext^0 >= 0 /\ -3+wntext^0 <= 0), cost: 6
  87: l6 -> l1 : delta_new^0'=delta^0+n0, deltaext_new^0'=deltaext^0-n0, delta^0'=delta^0+n0, deltaext^0'=deltaext^0-n0, (2+wntext^0-2*delta^0+deltaext^0-3*n0 >= 0 /\ -3+deltext^0 <= 0 /\ -1+n0 >= 0 /\ -3+delta^0 <= 0 /\ wntext^0 >= 0 /\ -3+wnt^0 <= 0 /\ delta^0 >= 0 /\ wnt^0 >= 0 /\ -2-wnt^0+2*deltaext^0-2*n0 >= 0 /\ -3+wntext^0 <= 0), cost: 2+4*n0
  88: l6 -> l1 : delta_new^0'=delta^0-n1, deltaext_new^0'=n1+deltaext^0, delta^0'=delta^0-n1, deltaext^0'=n1+deltaext^0, (-3+deltext^0 <= 0 /\ -3+delta^0 <= 0 /\ wntext^0 >= 0 /\ -3+wnt^0 <= 0 /\ wnt^0 >= 0 /\ 1-wntext^0+2*delta^0-3*n1-deltaext^0 >= 0 /\ 3-2*n1+wnt^0-2*deltaext^0 >= 0 /\ deltaext^0 >= 0 /\ -1+n1 >= 0 /\ -3+wntext^0 <= 0), cost: 2+4*n1
  89: l6 -> l1 : delta_new^0'=-n3+delta^0, deltaext_new^0'=deltaext^0, delta^0'=-n3+delta^0, (-2*n3-wntext^0+2*delta^0-deltaext^0 >= 0 /\ -3+deltext^0 <= 0 /\ -3+delta^0 <= 0 /\ wntext^0 >= 0 /\ -3+wnt^0 <= 0 /\ wnt^0 >= 0 /\ -3-wnt^0+2*deltaext^0 == 0 /\ -1+n3 >= 0), cost: 2+4*n3
  90: l6 -> l1 : delta_new^0'=delta^0+n4, deltaext_new^0'=deltaext^0, delta^0'=delta^0+n4, (-1+n4 >= 0 /\ -3+deltext^0 <= 0 /\ wntext^0 >= 0 /\ 1+wntext^0-2*delta^0+deltaext^0-2*n4 >= 0 /\ -3+wnt^0 <= 0 /\ delta^0 >= 0 /\ wnt^0 >= 0 /\ -3-wnt^0+2*deltaext^0 == 0 /\ -3+wntext^0 <= 0), cost: 2+4*n4
  91: l6 -> l1 : delta_new^0'=-n5+delta^0, deltaext_new^0'=deltaext^0, delta^0'=-n5+delta^0, (-1+n5 >= 0 /\ -3+deltext^0 <= 0 /\ -3+delta^0 <= 0 /\ wntext^0 >= 0 /\ -3+wnt^0 <= 0 /\ -wntext^0-2*n5+2*delta^0-deltaext^0 >= 0 /\ -2-wnt^0+2*deltaext^0 == 0 /\ wnt^0 >= 0), cost: 2+4*n5
  92: l6 -> l1 : delta_new^0'=n6+delta^0, deltaext_new^0'=deltaext^0, delta^0'=n6+delta^0, (-3+deltext^0 <= 0 /\ 1+wntext^0-2*n6-2*delta^0+deltaext^0 >= 0 /\ wntext^0 >= 0 /\ -3+wnt^0 <= 0 /\ delta^0 >= 0 /\ -2-wnt^0+2*deltaext^0 == 0 /\ wnt^0 >= 0 /\ -3+wntext^0 <= 0 /\ -1+n6 >= 0), cost: 2+4*n6
  93: l6 -> l1 : delta_new^0'=1+wntext^0-delta^0+deltaext^0, deltaext_new^0'=1+wntext^0-2*delta^0+2*deltaext^0, delta^0'=1+wntext^0-delta^0+deltaext^0, deltaext^0'=1+wntext^0-2*delta^0+2*deltaext^0, (-2-wntext^0+2*delta^0-deltaext^0 >= 0 /\ -3+deltext^0 <= 0 /\ -3+delta^0 <= 0 /\ wntext^0 >= 0 /\ 2*wntext^0-4*delta^0-wnt^0+4*deltaext^0 >= 0 /\ -3+wnt^0 <= 0 /\ wnt^0 >= 0), cost: -2-4*wntext^0+8*delta^0-4*deltaext^0
  94: l6 -> l1 : delta_new^0'=wntext^0-delta^0+deltaext^0, deltaext_new^0'=wntext^0-2*delta^0+2*deltaext^0, delta^0'=wntext^0-delta^0+deltaext^0, deltaext^0'=wntext^0-2*delta^0+2*deltaext^0, (-3+deltext^0 <= 0 /\ wntext^0 >= 0 /\ 3-2*wntext^0+4*delta^0+wnt^0-4*deltaext^0 >= 0 /\ -3+wnt^0 <= 0 /\ -1+wntext^0-2*delta^0+deltaext^0 >= 0 /\ delta^0 >= 0 /\ wnt^0 >= 0 /\ deltaext^0 >= 0 /\ -3+wntext^0 <= 0), cost: 2+4*wntext^0-8*delta^0+4*deltaext^0


Removed unreachable locations and irrelevant leafs
Start location: l6
  <empty>


Computing asymptotic complexity

Proved the following lower bound
Complexity:  Unknown
Cpx degree: ?

Solved cost: 0
Rule cost:   0

