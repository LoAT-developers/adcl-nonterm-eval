YES

Solver Timeout: 4
Global Timeout: 300
Maximum number of concurrent processes: 900
*******************************************************************************************
*********************** UNPROCESSED TRANSITION SYSTEMS PER FUNCTION ***********************
*******************************************************************************************


List of LLVMGraphs + assumeNodes + staticAssertNodes [1] :

+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++
+                                                                  +
Init Location: 0
Transitions:
<l0, l1, true, seq{main__func_return_ -> 0, main_x -> Â¿functionCall(__VERIFIER_nondet_int), main_y -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l1, l2, true>
<l2, l17, not((main_x >= 2))>
<l2, l3, (main_x >= 2)>
<l3, l4, true, seq{main_x -> (main_x - 1), main_y -> (main_y + main_x)}>
<l4, l5, true>
<l5, l15, not((main_y >= (main_x + 1)))>
<l5, l6, (main_y >= (main_x + 1))>
<l6, l15, (Â¿functionCall(__VERIFIER_nondet_int) = 0)>
<l6, l7, not((Â¿functionCall(__VERIFIER_nondet_int) = 0))>
<l7, l8, true, seq{main_y -> (main_y - 1)}>
<l8, l9, true>
<l9, l13, not((main_y >= (main_x + 3)))>
<l9, l10, (main_y >= (main_x + 3))>
<l10, l13, (Â¿functionCall(__VERIFIER_nondet_int) = 0)>
<l10, l11, not((Â¿functionCall(__VERIFIER_nondet_int) = 0))>
<l11, l12, true, seq{main_x -> (main_x + 1), main_y -> (main_y - 2)}>
<l12, l9, true>
<l13, l14, true, seq{main_y -> (main_y - 1)}>
<l14, l5, true>
<l15, l16, true, seq{main_x -> (main_x - 1), main_y -> (main_y - main_x)}>
<l16, l2, true>
<l17, l18, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

+ Assume Nodes [0]: ++++++++++++++++++++++++++++++++++++++++++++++++
       
+ Static Assert Nodes [0]: +++++++++++++++++++++++++++++++++++++++++
       
+ After preprocess (paralelization): ++++++++++++++++++++++++++++++

Init Location: 0
Transitions:
<l0, l19, true, seq{main__func_return_ -> 0}>
<l19, l20, true, seq{varCall_1 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l20, l21, true, seq{main_x -> varCall_1}>
<l21, l22, true, seq{varCall_2 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l22, l1, true, seq{main_y -> varCall_2}>
<l1, l2, true>
<l2, l3, (main_x >= 2)>
<l2, l17, not((main_x >= 2))>
<l3, l4, true, seq{main_x -> (main_x - 1), main_y -> (main_y + main_x)}>
<l4, l5, true>
<l5, l6, (main_y >= (main_x + 1))>
<l5, l15, not((main_y >= (main_x + 1)))>
<l6, l23, true, seq{varCall_3 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l23, l15, (varCall_3 = 0)>
<l23, l7, (varCall_3 = 1)>
<l7, l8, true, seq{main_y -> (main_y - 1)}>
<l8, l9, true>
<l9, l10, (main_y >= (main_x + 3))>
<l9, l13, not((main_y >= (main_x + 3)))>
<l10, l24, true, seq{varCall_4 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l24, l13, (varCall_4 = 0)>
<l24, l11, (varCall_4 = 1)>
<l11, l12, true, seq{main_x -> (main_x + 1), main_y -> (main_y - 2)}>
<l12, l9, true>
<l13, l14, true, seq{main_y -> (main_y - 1)}>
<l14, l5, true>
<l15, l16, true, seq{main_x -> (main_x - 1), main_y -> (main_y - main_x)}>
<l16, l2, true>
<l17, l18, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:
18, 
Accepting locations:

Asserts:

+                                                                  +
+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++


Function Return and Parameters Information [2 functions]:
    function name: __VERIFIER_nondet_int [1 return + 0 parameters]        demangled: __VERIFIER_nondet_int
        __VERIFIER_nondet_int__func_return_      [function result] : int
    function name: main [1 return + 0 parameters]        demangled: main
        main__func_return_      [function result] : int


AST Ident Scanner Information [4 idents]:
__VERIFIER_nondet_int | function | [integer, ()] | <line: 11, col: 1> | <line: 15, col: 6> <line: 16, col: 6> <line: 20, col: 24> <line: 22, col: 25>
main | function | [integer, ()] | <line: 13, col: 1>
x | local variable | integer | <line: 14, col: 5> | <line: 15, col: 2> <line: 17, col: 9> <line: 18, col: 3> <line: 18, col: 7> <line: 19, col: 17> <line: 20, col: 15> <line: 22, col: 16> <line: 23, col: 5> <line: 23, col: 9> <line: 28, col: 3> <line: 28, col: 7> <line: 29, col: 17>
y | local variable | integer | <line: 14, col: 5> | <line: 16, col: 2> <line: 19, col: 9> <line: 19, col: 13> <line: 20, col: 10> <line: 21, col: 4> <line: 21, col: 8> <line: 22, col: 11> <line: 24, col: 17> <line: 24, col: 21> <line: 26, col: 4> <line: 26, col: 8> <line: 29, col: 9> <line: 29, col: 13>

Main function: main
Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l5, (undef5 >= 2), par{main_x -> (undef5 - 1), main_y -> (undef6 + (undef5 - 1))}>
<l0, l18, not((undef5 >= 2)), par{main_x -> undef5, main_y -> undef6}>
<l5, l5, (main_y >= (main_x + 1)) /\ (undef7 = 0) /\ ((main_x - 1) >= 2), par{main_x -> ((main_x - 1) - 1), main_y -> ((main_y - (main_x - 1)) + ((main_x - 1) - 1))}>
<l5, l18, (main_y >= (main_x + 1)) /\ (undef7 = 0) /\ not(((main_x - 1) >= 2)), par{main_x -> (main_x - 1), main_y -> (main_y - (main_x - 1))}>
<l5, l9, (main_y >= (main_x + 1)) /\ (undef7 = 1), par{main_y -> (main_y - 1)}>
<l5, l5, not((main_y >= (main_x + 1))) /\ ((main_x - 1) >= 2), par{main_x -> ((main_x - 1) - 1), main_y -> ((main_y - (main_x - 1)) + ((main_x - 1) - 1))}>
<l5, l18, not((main_y >= (main_x + 1))) /\ not(((main_x - 1) >= 2)), par{main_x -> (main_x - 1), main_y -> (main_y - (main_x - 1))}>
<l9, l5, (main_y >= (main_x + 3)) /\ (undef8 = 0), par{main_y -> (main_y - 1)}>
<l9, l9, (main_y >= (main_x + 3)) /\ (undef8 = 1), par{main_x -> (main_x + 1), main_y -> (main_y - 2)}>
<l9, l5, not((main_y >= (main_x + 3))), par{main_y -> (main_y - 1)}>

Fresh variables:
undef5, undef6, undef7, undef8, 

Undef variables:
undef5, undef6, undef7, undef8, 

Abstraction variables:

Exit nodes:
18, 
Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l5, l5, 1 + main_x <= main_y /\ 3 <= main_x /\ undef7 = 0, {main_x -> -2 + main_x, main_y -> -1 + main_y, rest remain the same}>
<l5, l9, 1 + main_x <= main_y /\ undef7 = 1, {main_y -> -1 + main_y, rest remain the same}>
<l5, l5, main_y <= main_x /\ 3 <= main_x, {main_x -> -2 + main_x, main_y -> -1 + main_y, rest remain the same}>
<l9, l5, 3 + main_x <= main_y /\ undef8 = 0, {main_y -> -1 + main_y, rest remain the same}>
<l9, l9, 3 + main_x <= main_y /\ undef8 = 1, {main_x -> 1 + main_x, main_y -> -2 + main_y, rest remain the same}>
<l9, l5, main_y <= 2 + main_x, {main_y -> -1 + main_y, rest remain the same}>
Variables:
main_x, main_y

Graph 2:
Transitions:
Variables:

Precedence: 
Graph 0

Graph 1
<l0, l5, 2 <= undef5, {main_x -> -1 + undef5, main_y -> -1 + undef5 + undef6, rest remain the same}>

Graph 2
<l0, l18, undef5 <= 1, {main_x -> undef5, main_y -> undef6, rest remain the same}>
<l5, l18, 1 + main_x <= main_y /\ main_x <= 2 /\ undef7 = 0, {main_x -> -1 + main_x, main_y -> 1 - main_x + main_y, rest remain the same}>
<l5, l18, main_y <= main_x /\ main_x <= 2, {main_x -> -1 + main_x, main_y -> 1 - main_x + main_y, rest remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 5 , 1 )
( 9 , 1 )
( 18 , 2 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.017181

Checking conditional termination of SCC {l5, l9}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.001867s
[33mRanking function: [36m-19 - 3*main_x + 7*main_y[0m
New Graphs: 
Transitions:
<l5, l9, 1 + main_x <= main_y /\ undef7 = 1, {main_y -> -1 + main_y, rest remain the same}>
<l5, l5, main_y <= main_x /\ 3 <= main_x, {main_x -> -2 + main_x, main_y -> -1 + main_y, rest remain the same}>
<l9, l5, 3 + main_x <= main_y /\ undef8 = 0, {main_y -> -1 + main_y, rest remain the same}>
<l9, l9, 3 + main_x <= main_y /\ undef8 = 1, {main_x -> 1 + main_x, main_y -> -2 + main_y, rest remain the same}>
<l9, l5, main_y <= 2 + main_x, {main_y -> -1 + main_y, rest remain the same}>
Variables:
main_x, main_y
Checking conditional termination of SCC {l5, l9}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000950s

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.069040s
[3946 : 3948]
[3946 : 3949]
Successful child: 3948
[ Invariant Graph ]
[33mStrengthening and disabling transitions...[0m

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l5, l5, 1 + main_x <= main_y /\ 3 <= main_x /\ undef7 = 0, {main_x -> -2 + main_x, main_y -> -1 + main_y, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l5, l9, 1 + main_x <= main_y /\ 1 <= main_x /\ undef7 = 1, {main_y -> -1 + main_y, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l5, l5, main_y <= main_x /\ 3 <= main_x, {main_x -> -2 + main_x, main_y -> -1 + main_y, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l9, l5, 1 <= main_x /\ 3 + main_x <= main_y /\ undef8 = 0, {main_y -> -1 + main_y, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l9, l9, 1 <= main_x /\ 3 + main_x <= main_y /\ undef8 = 1, {main_x -> 1 + main_x, main_y -> -2 + main_y, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l9, l5, 1 <= main_x /\ main_y <= 2 + main_x, {main_y -> -1 + main_y, rest remain the same}>
[ Termination Graph ]
[33mStrengthening and disabling transitions...[0m

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l5, l9, 1 + main_x <= main_y /\ 1 <= main_x /\ undef7 = 1, {main_y -> -1 + main_y, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l5, l5, main_y <= main_x /\ 3 <= main_x, {main_x -> -2 + main_x, main_y -> -1 + main_y, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l9, l5, 1 <= main_x /\ 3 + main_x <= main_y /\ undef8 = 0, {main_y -> -1 + main_y, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l9, l9, 1 <= main_x /\ 3 + main_x <= main_y /\ undef8 = 1, {main_x -> 1 + main_x, main_y -> -2 + main_y, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l9, l5, 1 <= main_x /\ main_y <= 2 + main_x, {main_y -> -1 + main_y, rest remain the same}>
[33mRanking function: [36m1 + main_x + main_y[0m
New Graphs: 
Transitions:
<l5, l5, main_y <= main_x /\ 3 <= main_x, {main_x -> -2 + main_x, main_y -> -1 + main_y, rest remain the same}>
Variables:
main_x, main_y
Checking conditional termination of SCC {l5}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000481s
[33mRanking function: [36mmain_x - main_y[0m
New Graphs: 
INVARIANTS: 
5: 1 <= main_x , 
9: 1 <= main_x , 
Quasi-INVARIANTS to narrow Graph: 
5: 
9: 
Proving termination of subgraph 2
Analyzing SCC {l18}...
No cycles found.

[32mProgram Terminates[0m
