unknown

Initial ITS

Start location: l4
Program variables: i^0 tmp^0
   0: l0 -> l1 : i^0'=i^post1, tmp^0'=tmp^post1, (tmp^0-tmp^post1 == 0 /\ 50-i^0 <= 0 /\ -i^post1+i^0 == 0), cost: 1
   1: l0 -> l2 : i^0'=i^post2, tmp^0'=tmp^post2, (-tmp^post2+tmp^0 == 0 /\ -49+i^0 <= 0 /\ -1-i^0+i^post2 == 0), cost: 1
   2: l2 -> l0 : i^0'=i^post3, tmp^0'=tmp^post3, (-i^post3+i^0 == 0 /\ tmp^0-tmp^post3 == 0), cost: 1
   3: l3 -> l2 : i^0'=i^post4, tmp^0'=tmp^post4, (0 == 0 /\ i^1 == 0 /\ i^post4 == 0), cost: 1
   4: l4 -> l3 : i^0'=i^post5, tmp^0'=tmp^post5, (-i^post5+i^0 == 0 /\ tmp^0-tmp^post5 == 0), cost: 1

Chained Linear Paths

Start location: l4
Program variables: i^0 tmp^0
   0: l0 -> l1 : i^0'=i^post1, tmp^0'=tmp^post1, (tmp^0-tmp^post1 == 0 /\ 50-i^0 <= 0 /\ -i^post1+i^0 == 0), cost: 1
   1: l0 -> l2 : i^0'=i^post2, tmp^0'=tmp^post2, (-tmp^post2+tmp^0 == 0 /\ -49+i^0 <= 0 /\ -1-i^0+i^post2 == 0), cost: 1
   2: l2 -> l0 : i^0'=i^post3, tmp^0'=tmp^post3, (-i^post3+i^0 == 0 /\ tmp^0-tmp^post3 == 0), cost: 1
   5: l4 -> l2 : i^0'=i^post4, tmp^0'=tmp^post4, (0 == 0 /\ i^1 == 0 /\ -i^post5+i^0 == 0 /\ i^post4 == 0 /\ tmp^0-tmp^post5 == 0), cost: 1

	Eliminating location l3 by chaining:

	Applied chaining

	First rule:
	l4 -> l3 : i^0'=i^post5, tmp^0'=tmp^post5, (-i^post5+i^0 == 0 /\ tmp^0-tmp^post5 == 0), cost: 1
	Second rule:
	l3 -> l2 : i^0'=i^post4, tmp^0'=tmp^post4, (0 == 0 /\ i^1 == 0 /\ i^post4 == 0), cost: 1
	New rule:
	l4 -> l2 : i^0'=i^post4, tmp^0'=tmp^post4, (0 == 0 /\ i^1 == 0 /\ -i^post5+i^0 == 0 /\ i^post4 == 0 /\ tmp^0-tmp^post5 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 3 4

Simplified Transitions

Start location: l4
Program variables: i^0 tmp^0
   6: l0 -> l1 : 50-i^0 <= 0, cost: 1
   7: l0 -> l2 : i^0'=1+i^0, -49+i^0 <= 0, cost: 1
   8: l2 -> l0 : T, cost: 1
   9: l4 -> l2 : i^0'=0, tmp^0'=tmp^post4, T, cost: 1

	Propagated Equalities

	Original rule:
	l0 -> l1 : i^0'=i^post1, tmp^0'=tmp^post1, (tmp^0-tmp^post1 == 0 /\ 50-i^0 <= 0 /\ -i^post1+i^0 == 0), cost: 1
	New rule:
	l0 -> l1 : i^0'=i^0, tmp^0'=tmp^0, (0 == 0 /\ 50-i^0 <= 0), cost: 1
	
		propagated equality tmp^post1 = tmp^0
		
		propagated equality i^post1 = i^0
		
	Simplified Guard

	Original rule:
	l0 -> l1 : i^0'=i^0, tmp^0'=tmp^0, (0 == 0 /\ 50-i^0 <= 0), cost: 1
	New rule:
	l0 -> l1 : i^0'=i^0, tmp^0'=tmp^0, 50-i^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l1 : i^0'=i^0, tmp^0'=tmp^0, 50-i^0 <= 0, cost: 1
	New rule:
	l0 -> l1 : 50-i^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l0 -> l2 : i^0'=i^post2, tmp^0'=tmp^post2, (-tmp^post2+tmp^0 == 0 /\ -49+i^0 <= 0 /\ -1-i^0+i^post2 == 0), cost: 1
	New rule:
	l0 -> l2 : i^0'=1+i^0, tmp^0'=tmp^0, (0 == 0 /\ -49+i^0 <= 0), cost: 1
	
		propagated equality tmp^post2 = tmp^0
		
		propagated equality i^post2 = 1+i^0
		
	Simplified Guard

	Original rule:
	l0 -> l2 : i^0'=1+i^0, tmp^0'=tmp^0, (0 == 0 /\ -49+i^0 <= 0), cost: 1
	New rule:
	l0 -> l2 : i^0'=1+i^0, tmp^0'=tmp^0, -49+i^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l2 : i^0'=1+i^0, tmp^0'=tmp^0, -49+i^0 <= 0, cost: 1
	New rule:
	l0 -> l2 : i^0'=1+i^0, -49+i^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l2 -> l0 : i^0'=i^post3, tmp^0'=tmp^post3, (-i^post3+i^0 == 0 /\ tmp^0-tmp^post3 == 0), cost: 1
	New rule:
	l2 -> l0 : i^0'=i^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	
		propagated equality i^post3 = i^0
		
		propagated equality tmp^post3 = tmp^0
		
	Simplified Guard

	Original rule:
	l2 -> l0 : i^0'=i^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	New rule:
	l2 -> l0 : i^0'=i^0, tmp^0'=tmp^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l2 -> l0 : i^0'=i^0, tmp^0'=tmp^0, T, cost: 1
	New rule:
	l2 -> l0 : T, cost: 1
	
	Propagated Equalities

	Original rule:
	l4 -> l2 : i^0'=i^post4, tmp^0'=tmp^post4, (0 == 0 /\ i^1 == 0 /\ -i^post5+i^0 == 0 /\ i^post4 == 0 /\ tmp^0-tmp^post5 == 0), cost: 1
	New rule:
	l4 -> l2 : i^0'=0, tmp^0'=tmp^post4, (0 == 0 /\ i^1 == 0 /\ -i^post5+i^0 == 0 /\ tmp^0-tmp^post5 == 0), cost: 1
	
		propagated equality i^post4 = 0
		
	Propagated Equalities

	Original rule:
	l4 -> l2 : i^0'=0, tmp^0'=tmp^post4, (0 == 0 /\ i^1 == 0 /\ -i^post5+i^0 == 0 /\ tmp^0-tmp^post5 == 0), cost: 1
	New rule:
	l4 -> l2 : i^0'=0, tmp^0'=tmp^post4, 0 == 0, cost: 1
	
		propagated equality i^1 = 0
		
		propagated equality i^post5 = i^0
		
		propagated equality tmp^post5 = tmp^0
		
	Simplified Guard

	Original rule:
	l4 -> l2 : i^0'=0, tmp^0'=tmp^post4, 0 == 0, cost: 1
	New rule:
	l4 -> l2 : i^0'=0, tmp^0'=tmp^post4, T, cost: 1

Step with 9

	Trace

	9[T]
	
	Blocked

	[{}, {}]

Step with 8

	Trace

	9[T], 8[T]
	
	Blocked

	[{}, {}, {}]

Step with 7

	Trace

	9[T], 8[T], 7[(-49+i^0 <= 0)]
	
	Blocked

	[{}, {}, {6[T]}, {}]

Accelerate

Start location: l4
Program variables: i^0 tmp^0
   6: l0 -> l1 : 50-i^0 <= 0, cost: 1
   7: l0 -> l2 : i^0'=1+i^0, -49+i^0 <= 0, cost: 1
   8: l2 -> l0 : T, cost: 1
  10: l2 -> l2 : i^0'=n+i^0, (50-n-i^0 >= 0 /\ -1+n >= 0), cost: 1
   9: l4 -> l2 : i^0'=0, tmp^0'=tmp^post4, T, cost: 1

	Loop Acceleration

	Original rule:
	l2 -> l2 : i^0'=1+i^0, -49+i^0 <= 0, cost: 1
	New rule:
	l2 -> l2 : i^0'=n+i^0, (50-n-i^0 >= 0 /\ -1+n >= 0), cost: 1

		49-i^0 >= 0 [0]: montonic decrease yields 50-n-i^0 >= 0
		
		49-i^0 >= 0 [1]: eventual increase yields (1 <= 0 /\ 49-i^0 >= 0)
		
		Replacement map: {49-i^0 >= 0 -> 50-n-i^0 >= 0}

	Trace

	9[T], 10[(50-n-i^0 >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {}, {10[T]}]

Step with 8

	Trace

	9[T], 10[(50-n-i^0 >= 0 /\ -1+n >= 0)], 8[T]
	
	Blocked

	[{}, {}, {10[T]}, {}]

Step with 7

	Trace

	9[T], 10[(50-n-i^0 >= 0 /\ -1+n >= 0)], 8[T], 7[(-49+i^0 <= 0)]
	
	Blocked

	[{}, {}, {10[T]}, {}, {}]

Covered

	Trace

	9[T], 10[(50-n-i^0 >= 0 /\ -1+n >= 0)], 8[T]
	
	Blocked

	[{}, {}, {10[T]}, {7[T]}]

Step with 6

	Trace

	9[T], 10[(50-n-i^0 >= 0 /\ -1+n >= 0)], 8[T], 6[(50-i^0 <= 0)]
	
	Blocked

	[{}, {}, {10[T]}, {7[T]}, {}]

Backtrack

	Trace

	9[T], 10[(50-n-i^0 >= 0 /\ -1+n >= 0)], 8[T]
	
	Blocked

	[{}, {}, {10[T]}, {6[T], 7[T]}]

Backtrack

	Trace

	9[T], 10[(50-n-i^0 >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {}, {8[T], 10[T]}]

Backtrack

	Trace

	9[T]
	
	Blocked

	[{}, {10[T]}]

Step with 8

	Trace

	9[T], 8[T]
	
	Blocked

	[{}, {10[T]}, {}]

Step with 7

	Trace

	9[T], 8[T], 7[(-49+i^0 <= 0)]
	
	Blocked

	[{}, {10[T]}, {6[T]}, {}]

Covered

	Trace

	9[T], 8[T]
	
	Blocked

	[{}, {10[T]}, {6[T], 7[T]}]

Backtrack

	Trace

	9[T]
	
	Blocked

	[{}, {8[T], 10[T]}]

Backtrack

	Trace

	Blocked

	[{9[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
