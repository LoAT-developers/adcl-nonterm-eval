NO

Initial ITS

Start location: __init
Program variables: arg1 arg2
   0: f1_0_main_Load -> f1_0_main_Load\' : arg1'=arg1p1, arg2'=arg2p1, (-arg2p1+arg2 == 0 /\ 1+x8 > 0 /\ -arg1p1+arg1 == 0 /\ x8-2*x9 == 0 /\ 1+x7 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1
   1: f1_0_main_Load\' -> f128_0_loop_GE : arg1'=arg1p2, arg2'=arg2p2, (x13-2*x14 >= 0 /\ x13-2*x14 == 0 /\ -2+x13-2*x14 < 0 /\ 1+x12 > 0 /\ -x12-arg1p2 == 0 /\ arg1 > 0 /\ 1+x13 > 0 /\ -1+arg2 > 0), cost: 1
   2: f128_0_loop_GE -> f128_0_loop_GE : arg1'=arg1p3, arg2'=arg2p3, (-1-arg1p3+arg1 == 0 /\ arg1 < 0), cost: 1
   3: __init -> f1_0_main_Load : arg1'=arg1p4, arg2'=arg2p4, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2
   2: f128_0_loop_GE -> f128_0_loop_GE : arg1'=arg1p3, arg2'=arg2p3, (-1-arg1p3+arg1 == 0 /\ arg1 < 0), cost: 1
   5: __init -> f128_0_loop_GE : arg1'=arg1p2, arg2'=arg2p2, (arg1p4 > 0 /\ arg1p4-arg1p1 == 0 /\ x13-2*x14 >= 0 /\ x13-2*x14 == 0 /\ arg1p1 > 0 /\ -2+x13-2*x14 < 0 /\ 1+x12 > 0 /\ 1+x8 > 0 /\ -x12-arg1p2 == 0 /\ x8-2*x9 == 0 /\ 1+x7 > 0 /\ -1+arg2p4 > 0 /\ arg2p4-arg2p1 == 0 /\ -1+arg2p1 > 0 /\ 1+x13 > 0), cost: 1

	Eliminating location f1_0_main_Load by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_Load : arg1'=arg1p4, arg2'=arg2p4, T, cost: 1
	Second rule:
	f1_0_main_Load -> f1_0_main_Load\' : arg1'=arg1p1, arg2'=arg2p1, (-arg2p1+arg2 == 0 /\ 1+x8 > 0 /\ -arg1p1+arg1 == 0 /\ x8-2*x9 == 0 /\ 1+x7 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1
	New rule:
	__init -> f1_0_main_Load\' : arg1'=arg1p1, arg2'=arg2p1, (arg1p4 > 0 /\ arg1p4-arg1p1 == 0 /\ 1+x8 > 0 /\ x8-2*x9 == 0 /\ 1+x7 > 0 /\ -1+arg2p4 > 0 /\ arg2p4-arg2p1 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 3
	
	Eliminating location f1_0_main_Load\' by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_Load\' : arg1'=arg1p1, arg2'=arg2p1, (arg1p4 > 0 /\ arg1p4-arg1p1 == 0 /\ 1+x8 > 0 /\ x8-2*x9 == 0 /\ 1+x7 > 0 /\ -1+arg2p4 > 0 /\ arg2p4-arg2p1 == 0), cost: 1
	Second rule:
	f1_0_main_Load\' -> f128_0_loop_GE : arg1'=arg1p2, arg2'=arg2p2, (x13-2*x14 >= 0 /\ x13-2*x14 == 0 /\ -2+x13-2*x14 < 0 /\ 1+x12 > 0 /\ -x12-arg1p2 == 0 /\ arg1 > 0 /\ 1+x13 > 0 /\ -1+arg2 > 0), cost: 1
	New rule:
	__init -> f128_0_loop_GE : arg1'=arg1p2, arg2'=arg2p2, (arg1p4 > 0 /\ arg1p4-arg1p1 == 0 /\ x13-2*x14 >= 0 /\ x13-2*x14 == 0 /\ arg1p1 > 0 /\ -2+x13-2*x14 < 0 /\ 1+x12 > 0 /\ 1+x8 > 0 /\ -x12-arg1p2 == 0 /\ x8-2*x9 == 0 /\ 1+x7 > 0 /\ -1+arg2p4 > 0 /\ arg2p4-arg2p1 == 0 /\ -1+arg2p1 > 0 /\ 1+x13 > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 1 4

Simplified Transitions

Start location: __init
Program variables: arg1 arg2
   6: f128_0_loop_GE -> f128_0_loop_GE : arg1'=-1+arg1, arg2'=arg2p3, arg1 < 0, cost: 1
   7: __init -> f128_0_loop_GE : arg1'=-x12, arg2'=arg2p2, (1+x12 > 0 /\ 1+2*x14 > 0 /\ 1+2*x9 > 0), cost: 1

	Propagated Equalities

	Original rule:
	f128_0_loop_GE -> f128_0_loop_GE : arg1'=arg1p3, arg2'=arg2p3, (-1-arg1p3+arg1 == 0 /\ arg1 < 0), cost: 1
	New rule:
	f128_0_loop_GE -> f128_0_loop_GE : arg1'=-1+arg1, arg2'=arg2p3, (0 == 0 /\ arg1 < 0), cost: 1
	
		propagated equality arg1p3 = -1+arg1
		
	Simplified Guard

	Original rule:
	f128_0_loop_GE -> f128_0_loop_GE : arg1'=-1+arg1, arg2'=arg2p3, (0 == 0 /\ arg1 < 0), cost: 1
	New rule:
	f128_0_loop_GE -> f128_0_loop_GE : arg1'=-1+arg1, arg2'=arg2p3, arg1 < 0, cost: 1
	
	Propagated Equalities

	Original rule:
	__init -> f128_0_loop_GE : arg1'=arg1p2, arg2'=arg2p2, (arg1p4 > 0 /\ arg1p4-arg1p1 == 0 /\ x13-2*x14 >= 0 /\ x13-2*x14 == 0 /\ arg1p1 > 0 /\ -2+x13-2*x14 < 0 /\ 1+x12 > 0 /\ 1+x8 > 0 /\ -x12-arg1p2 == 0 /\ x8-2*x9 == 0 /\ 1+x7 > 0 /\ -1+arg2p4 > 0 /\ arg2p4-arg2p1 == 0 /\ -1+arg2p1 > 0 /\ 1+x13 > 0), cost: 1
	New rule:
	__init -> f128_0_loop_GE : arg1'=-x12, arg2'=arg2p2, (0 == 0 /\ arg1p4 > 0 /\ arg1p4-arg1p1 == 0 /\ x13-2*x14 >= 0 /\ x13-2*x14 == 0 /\ arg1p1 > 0 /\ -2+x13-2*x14 < 0 /\ 1+x12 > 0 /\ 1+x8 > 0 /\ x8-2*x9 == 0 /\ 1+x7 > 0 /\ -1+arg2p4 > 0 /\ arg2p4-arg2p1 == 0 /\ -1+arg2p1 > 0 /\ 1+x13 > 0), cost: 1
	
		propagated equality arg1p2 = -x12
		
	Propagated Equalities

	Original rule:
	__init -> f128_0_loop_GE : arg1'=-x12, arg2'=arg2p2, (0 == 0 /\ arg1p4 > 0 /\ arg1p4-arg1p1 == 0 /\ x13-2*x14 >= 0 /\ x13-2*x14 == 0 /\ arg1p1 > 0 /\ -2+x13-2*x14 < 0 /\ 1+x12 > 0 /\ 1+x8 > 0 /\ x8-2*x9 == 0 /\ 1+x7 > 0 /\ -1+arg2p4 > 0 /\ arg2p4-arg2p1 == 0 /\ -1+arg2p1 > 0 /\ 1+x13 > 0), cost: 1
	New rule:
	__init -> f128_0_loop_GE : arg1'=-x12, arg2'=arg2p2, (0 >= 0 /\ 0 == 0 /\ arg1p4 > 0 /\ -2 < 0 /\ 1+x12 > 0 /\ 1+2*x14 > 0 /\ 1+2*x9 > 0 /\ 1+x7 > 0 /\ -1+arg2p4 > 0), cost: 1
	
		propagated equality arg1p1 = arg1p4
		
		propagated equality x13 = 2*x14
		
		propagated equality x8 = 2*x9
		
		propagated equality arg2p1 = arg2p4
		
	Simplified Guard

	Original rule:
	__init -> f128_0_loop_GE : arg1'=-x12, arg2'=arg2p2, (0 >= 0 /\ 0 == 0 /\ arg1p4 > 0 /\ -2 < 0 /\ 1+x12 > 0 /\ 1+2*x14 > 0 /\ 1+2*x9 > 0 /\ 1+x7 > 0 /\ -1+arg2p4 > 0), cost: 1
	New rule:
	__init -> f128_0_loop_GE : arg1'=-x12, arg2'=arg2p2, (arg1p4 > 0 /\ 1+x12 > 0 /\ 1+2*x14 > 0 /\ 1+2*x9 > 0 /\ 1+x7 > 0 /\ -1+arg2p4 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	__init -> f128_0_loop_GE : arg1'=-x12, arg2'=arg2p2, (arg1p4 > 0 /\ 1+x12 > 0 /\ 1+2*x14 > 0 /\ 1+2*x9 > 0 /\ 1+x7 > 0 /\ -1+arg2p4 > 0), cost: 1
	New rule:
	__init -> f128_0_loop_GE : arg1'=-x12, arg2'=arg2p2, (1+x12 > 0 /\ 1+2*x14 > 0 /\ 1+2*x9 > 0), cost: 1

Step with 7

	Trace

	7[(1+x12 > 0 /\ 1+2*x14 > 0 /\ 1+2*x9 > 0)]
	
	Blocked

	[{}, {}]

Step with 6

	Trace

	7[(1+x12 > 0 /\ 1+2*x14 > 0 /\ 1+2*x9 > 0)], 6[(arg1 < 0)]
	
	Blocked

	[{}, {}, {}]

Nonterm

Start location: __init
Program variables: arg1 arg2
   6: f128_0_loop_GE -> f128_0_loop_GE : arg1'=-1+arg1, arg2'=arg2p3, arg1 < 0, cost: 1
   8: f128_0_loop_GE -> LoAT_sink : (-arg1 > 0 /\ -1+n >= 0), cost: NONTERM
   9: f128_0_loop_GE -> f128_0_loop_GE : arg1'=-n+arg1, arg2'=arg2p3, (-arg1 > 0 /\ -1+n >= 0), cost: 1
   7: __init -> f128_0_loop_GE : arg1'=-x12, arg2'=arg2p2, (1+x12 > 0 /\ 1+2*x14 > 0 /\ 1+2*x9 > 0), cost: 1

	Certificate of Non-Termination

	Original rule:
	f128_0_loop_GE -> f128_0_loop_GE : arg1'=-1+arg1, arg2'=arg2p3, (arg1 < 0), cost: 1
	New rule:
	f128_0_loop_GE -> LoAT_sink : (-arg1 > 0 /\ -1+n >= 0), cost: NONTERM

		-arg1 > 0 [0]: monotonic increase yields -arg1 > 0
		
		Replacement map: {-arg1 > 0 -> -arg1 > 0}

	Loop Acceleration

	Original rule:
	f128_0_loop_GE -> f128_0_loop_GE : arg1'=-1+arg1, arg2'=arg2p3, (arg1 < 0), cost: 1
	New rule:
	f128_0_loop_GE -> f128_0_loop_GE : arg1'=-n+arg1, arg2'=arg2p3, (-arg1 > 0 /\ -1+n >= 0), cost: 1

		-arg1 > 0 [0]: monotonic increase yields -arg1 > 0
		
		Replacement map: {-arg1 > 0 -> -arg1 > 0}

Step with 8

	Trace

	7[(1+x12 > 0 /\ 1+2*x14 > 0 /\ 1+2*x9 > 0)], 8[(-arg1 > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {}, {8[T]}]

Refute

	Counterexample

	[ arg1=-1 arg2=0 ] 7 [ arg1=arg1 arg2=arg2 ] 8
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
