WORST_CASE(Omega(0),?)

Initial ITS
Start location: __init
   0: f1_0_main_Load -> f248_0_mod_LT : arg2'=arg2P0, arg4'=arg4P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ 1+arg2P0 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1
   1: f248_0_mod_LT -> f319_0_minus_EQ : arg2'=arg2P1, arg4'=arg4P1, arg1'=arg1P1, arg3'=arg3P1, (arg2 > 0 /\ arg2-arg1 <= 0 /\ -arg2P1+arg1 == 0 /\ -arg3P1+arg2 == 0 /\ arg2-arg1P1 == 0 /\ arg2-arg4P1 == 0), cost: 1
   2: f319_0_minus_EQ -> f248_0_mod_LT : arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg3'=arg3P2, (-arg4 == 0 /\ -arg3 == 0 /\ -arg1P2+arg2 == 0 /\ arg1-arg2P2 == 0), cost: 1
   3: f319_0_minus_EQ -> f319_0_minus_EQ : arg2'=arg2P3, arg4'=arg4P3, arg1'=arg1P3, arg3'=arg3P3, (-arg1P3+arg1 == 0 /\ 1-arg3P3+arg3 == 0 /\ -1+arg3 < 0 /\ 1+arg2-arg2P3 == 0 /\ arg3 < 0 /\ 1-arg4P3+arg3 == 0 /\ -arg4+arg3 == 0), cost: 1
   4: f319_0_minus_EQ -> f319_0_minus_EQ : arg2'=arg2P4, arg4'=arg4P4, arg1'=arg1P4, arg3'=arg3P4, (-arg1P4+arg1 == 0 /\ 1-arg4P4+arg3 == 0 /\ 1-arg3P4+arg3 == 0 /\ -1+arg3 < 0 /\ 1-arg2P4+arg2 == 0 /\ arg3 > 0 /\ -arg4+arg3 == 0), cost: 1
   5: f319_0_minus_EQ -> f319_0_minus_EQ : arg2'=arg2P5, arg4'=arg4P5, arg1'=arg1P5, arg3'=arg3P5, (-1+arg2-arg2P5 == 0 /\ -1+arg3-arg3P5 == 0 /\ arg3 > 0 /\ arg1-arg1P5 == 0 /\ -1-arg4P5+arg3 == 0 /\ -arg4+arg3 == 0), cost: 1
   6: __init -> f1_0_main_Load : arg2'=arg2P6, arg4'=arg4P6, arg1'=arg1P6, arg3'=arg3P6, TRUE, cost: 1


Removed rules with unsatisfiable guard
Start location: __init
   0: f1_0_main_Load -> f248_0_mod_LT : arg2'=arg2P0, arg4'=arg4P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ 1+arg2P0 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1
   1: f248_0_mod_LT -> f319_0_minus_EQ : arg2'=arg2P1, arg4'=arg4P1, arg1'=arg1P1, arg3'=arg3P1, (arg2 > 0 /\ arg2-arg1 <= 0 /\ -arg2P1+arg1 == 0 /\ -arg3P1+arg2 == 0 /\ arg2-arg1P1 == 0 /\ arg2-arg4P1 == 0), cost: 1
   2: f319_0_minus_EQ -> f248_0_mod_LT : arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg3'=arg3P2, (-arg4 == 0 /\ -arg3 == 0 /\ -arg1P2+arg2 == 0 /\ arg1-arg2P2 == 0), cost: 1
   3: f319_0_minus_EQ -> f319_0_minus_EQ : arg2'=arg2P3, arg4'=arg4P3, arg1'=arg1P3, arg3'=arg3P3, (-arg1P3+arg1 == 0 /\ 1-arg3P3+arg3 == 0 /\ -1+arg3 < 0 /\ 1+arg2-arg2P3 == 0 /\ arg3 < 0 /\ 1-arg4P3+arg3 == 0 /\ -arg4+arg3 == 0), cost: 1
   5: f319_0_minus_EQ -> f319_0_minus_EQ : arg2'=arg2P5, arg4'=arg4P5, arg1'=arg1P5, arg3'=arg3P5, (-1+arg2-arg2P5 == 0 /\ -1+arg3-arg3P5 == 0 /\ arg3 > 0 /\ arg1-arg1P5 == 0 /\ -1-arg4P5+arg3 == 0 /\ -arg4+arg3 == 0), cost: 1
   6: __init -> f1_0_main_Load : arg2'=arg2P6, arg4'=arg4P6, arg1'=arg1P6, arg3'=arg3P6, TRUE, cost: 1


Applied preprocessing
Original rule:
f248_0_mod_LT -> f319_0_minus_EQ : arg2'=arg2P1, arg4'=arg4P1, arg1'=arg1P1, arg3'=arg3P1, (arg2 > 0 /\ arg2-arg1 <= 0 /\ -arg2P1+arg1 == 0 /\ -arg3P1+arg2 == 0 /\ arg2-arg1P1 == 0 /\ arg2-arg4P1 == 0), cost: 1
New rule:
f248_0_mod_LT -> f319_0_minus_EQ : arg2'=arg1, arg4'=arg2, arg1'=arg2, arg3'=arg2, (arg2 > 0 /\ arg2-arg1 <= 0), cost: 1

Applied preprocessing
Original rule:
f319_0_minus_EQ -> f248_0_mod_LT : arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg3'=arg3P2, (-arg4 == 0 /\ -arg3 == 0 /\ -arg1P2+arg2 == 0 /\ arg1-arg2P2 == 0), cost: 1
New rule:
f319_0_minus_EQ -> f248_0_mod_LT : arg2'=arg1, arg4'=arg4P2, arg1'=arg2, arg3'=arg3P2, (arg4 == 0 /\ arg3 == 0), cost: 1

Applied preprocessing
Original rule:
f319_0_minus_EQ -> f319_0_minus_EQ : arg2'=arg2P3, arg4'=arg4P3, arg1'=arg1P3, arg3'=arg3P3, (-arg1P3+arg1 == 0 /\ 1-arg3P3+arg3 == 0 /\ -1+arg3 < 0 /\ 1+arg2-arg2P3 == 0 /\ arg3 < 0 /\ 1-arg4P3+arg3 == 0 /\ -arg4+arg3 == 0), cost: 1
New rule:
f319_0_minus_EQ -> f319_0_minus_EQ : arg2'=1+arg2, arg4'=1+arg3, arg3'=1+arg3, (-arg3 > 0 /\ -arg4+arg3 == 0), cost: 1

Applied preprocessing
Original rule:
f319_0_minus_EQ -> f319_0_minus_EQ : arg2'=arg2P5, arg4'=arg4P5, arg1'=arg1P5, arg3'=arg3P5, (-1+arg2-arg2P5 == 0 /\ -1+arg3-arg3P5 == 0 /\ arg3 > 0 /\ arg1-arg1P5 == 0 /\ -1-arg4P5+arg3 == 0 /\ -arg4+arg3 == 0), cost: 1
New rule:
f319_0_minus_EQ -> f319_0_minus_EQ : arg2'=-1+arg2, arg4'=-1+arg3, arg3'=-1+arg3, (arg3 > 0 /\ -arg4+arg3 == 0), cost: 1

Simplified rules
Start location: __init
   0: f1_0_main_Load -> f248_0_mod_LT : arg2'=arg2P0, arg4'=arg4P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ 1+arg2P0 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1
   7: f248_0_mod_LT -> f319_0_minus_EQ : arg2'=arg1, arg4'=arg2, arg1'=arg2, arg3'=arg2, (arg2 > 0 /\ arg2-arg1 <= 0), cost: 1
   8: f319_0_minus_EQ -> f248_0_mod_LT : arg2'=arg1, arg4'=arg4P2, arg1'=arg2, arg3'=arg3P2, (arg4 == 0 /\ arg3 == 0), cost: 1
   9: f319_0_minus_EQ -> f319_0_minus_EQ : arg2'=1+arg2, arg4'=1+arg3, arg3'=1+arg3, (-arg3 > 0 /\ -arg4+arg3 == 0), cost: 1
  10: f319_0_minus_EQ -> f319_0_minus_EQ : arg2'=-1+arg2, arg4'=-1+arg3, arg3'=-1+arg3, (arg3 > 0 /\ -arg4+arg3 == 0), cost: 1
   6: __init -> f1_0_main_Load : arg2'=arg2P6, arg4'=arg4P6, arg1'=arg1P6, arg3'=arg3P6, TRUE, cost: 1


Applied acceleration
Original rule:
f319_0_minus_EQ -> f319_0_minus_EQ : arg2'=1+arg2, arg4'=1+arg3, arg3'=1+arg3, (-arg3 > 0 /\ -arg4+arg3 == 0), cost: 1
New rule:
f319_0_minus_EQ -> f319_0_minus_EQ : arg2'=arg2+n, arg4'=n+arg3, arg3'=n+arg3, (-1+n >= 0 /\ 1-n-arg3 > 0 /\ arg4-arg3 >= 0 /\ -arg4+arg3 >= 0), cost: n
Sub-proof via acceration calculus written to file:///tmp/tmpnam_oChlOG.txt

Applied instantiation
Original rule:
f319_0_minus_EQ -> f319_0_minus_EQ : arg2'=arg2+n, arg4'=n+arg3, arg3'=n+arg3, (-1+n >= 0 /\ 1-n-arg3 > 0 /\ arg4-arg3 >= 0 /\ -arg4+arg3 >= 0), cost: n
New rule:
f319_0_minus_EQ -> f319_0_minus_EQ : arg2'=arg2-arg3, arg4'=0, arg3'=0, (1 > 0 /\ -1-arg3 >= 0 /\ arg4-arg3 >= 0 /\ -arg4+arg3 >= 0), cost: -arg3

Applied acceleration
Original rule:
f319_0_minus_EQ -> f319_0_minus_EQ : arg2'=-1+arg2, arg4'=-1+arg3, arg3'=-1+arg3, (arg3 > 0 /\ -arg4+arg3 == 0), cost: 1
New rule:
f319_0_minus_EQ -> f319_0_minus_EQ : arg2'=arg2-n0, arg4'=-n0+arg3, arg3'=-n0+arg3, (1-n0+arg3 > 0 /\ arg4-arg3 >= 0 /\ -1+n0 >= 0 /\ -arg4+arg3 >= 0), cost: n0
Sub-proof via acceration calculus written to file:///tmp/tmpnam_fgHMej.txt

Applied instantiation
Original rule:
f319_0_minus_EQ -> f319_0_minus_EQ : arg2'=arg2-n0, arg4'=-n0+arg3, arg3'=-n0+arg3, (1-n0+arg3 > 0 /\ arg4-arg3 >= 0 /\ -1+n0 >= 0 /\ -arg4+arg3 >= 0), cost: n0
New rule:
f319_0_minus_EQ -> f319_0_minus_EQ : arg2'=arg2-arg3, arg4'=0, arg3'=0, (1 > 0 /\ -1+arg3 >= 0 /\ arg4-arg3 >= 0 /\ -arg4+arg3 >= 0), cost: arg3

Applied simplification
Original rule:
f319_0_minus_EQ -> f319_0_minus_EQ : arg2'=arg2-arg3, arg4'=0, arg3'=0, (1 > 0 /\ -1-arg3 >= 0 /\ arg4-arg3 >= 0 /\ -arg4+arg3 >= 0), cost: -arg3
New rule:
f319_0_minus_EQ -> f319_0_minus_EQ : arg2'=arg2-arg3, arg4'=0, arg3'=0, (1+arg3 <= 0 /\ arg4-arg3 >= 0 /\ -arg4+arg3 >= 0), cost: -arg3

Applied simplification
Original rule:
f319_0_minus_EQ -> f319_0_minus_EQ : arg2'=arg2-arg3, arg4'=0, arg3'=0, (1 > 0 /\ -1+arg3 >= 0 /\ arg4-arg3 >= 0 /\ -arg4+arg3 >= 0), cost: arg3
New rule:
f319_0_minus_EQ -> f319_0_minus_EQ : arg2'=arg2-arg3, arg4'=0, arg3'=0, (-1+arg3 >= 0 /\ arg4-arg3 >= 0 /\ -arg4+arg3 >= 0), cost: arg3

Applied deletion
Removed the following rules: 9 10

Accelerated simple loops
Start location: __init
   0: f1_0_main_Load -> f248_0_mod_LT : arg2'=arg2P0, arg4'=arg4P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ 1+arg2P0 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1
   7: f248_0_mod_LT -> f319_0_minus_EQ : arg2'=arg1, arg4'=arg2, arg1'=arg2, arg3'=arg2, (arg2 > 0 /\ arg2-arg1 <= 0), cost: 1
   8: f319_0_minus_EQ -> f248_0_mod_LT : arg2'=arg1, arg4'=arg4P2, arg1'=arg2, arg3'=arg3P2, (arg4 == 0 /\ arg3 == 0), cost: 1
  13: f319_0_minus_EQ -> f319_0_minus_EQ : arg2'=arg2-arg3, arg4'=0, arg3'=0, (1+arg3 <= 0 /\ arg4-arg3 >= 0 /\ -arg4+arg3 >= 0), cost: -arg3
  14: f319_0_minus_EQ -> f319_0_minus_EQ : arg2'=arg2-arg3, arg4'=0, arg3'=0, (-1+arg3 >= 0 /\ arg4-arg3 >= 0 /\ -arg4+arg3 >= 0), cost: arg3
   6: __init -> f1_0_main_Load : arg2'=arg2P6, arg4'=arg4P6, arg1'=arg1P6, arg3'=arg3P6, TRUE, cost: 1


Applied chaining
First rule:
f248_0_mod_LT -> f319_0_minus_EQ : arg2'=arg1, arg4'=arg2, arg1'=arg2, arg3'=arg2, (arg2 > 0 /\ arg2-arg1 <= 0), cost: 1
Second rule:
f319_0_minus_EQ -> f319_0_minus_EQ : arg2'=arg2-arg3, arg4'=0, arg3'=0, (-1+arg3 >= 0 /\ arg4-arg3 >= 0 /\ -arg4+arg3 >= 0), cost: arg3
New rule:
f248_0_mod_LT -> f319_0_minus_EQ : arg2'=-arg2+arg1, arg4'=0, arg1'=arg2, arg3'=0, (arg2-arg1 <= 0 /\ -1+arg2 >= 0), cost: 1+arg2

Applied deletion
Removed the following rules: 13 14

Chained accelerated rules with incoming rules
Start location: __init
   0: f1_0_main_Load -> f248_0_mod_LT : arg2'=arg2P0, arg4'=arg4P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ 1+arg2P0 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1
   7: f248_0_mod_LT -> f319_0_minus_EQ : arg2'=arg1, arg4'=arg2, arg1'=arg2, arg3'=arg2, (arg2 > 0 /\ arg2-arg1 <= 0), cost: 1
  15: f248_0_mod_LT -> f319_0_minus_EQ : arg2'=-arg2+arg1, arg4'=0, arg1'=arg2, arg3'=0, (arg2-arg1 <= 0 /\ -1+arg2 >= 0), cost: 1+arg2
   8: f319_0_minus_EQ -> f248_0_mod_LT : arg2'=arg1, arg4'=arg4P2, arg1'=arg2, arg3'=arg3P2, (arg4 == 0 /\ arg3 == 0), cost: 1
   6: __init -> f1_0_main_Load : arg2'=arg2P6, arg4'=arg4P6, arg1'=arg1P6, arg3'=arg3P6, TRUE, cost: 1


Eliminating location f1_0_main_Load by chaining:

Applied chaining
First rule:
__init -> f1_0_main_Load : arg2'=arg2P6, arg4'=arg4P6, arg1'=arg1P6, arg3'=arg3P6, TRUE, cost: 1
Second rule:
f1_0_main_Load -> f248_0_mod_LT : arg2'=arg2P0, arg4'=arg4P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ 1+arg2P0 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1
New rule:
__init -> f248_0_mod_LT : arg2'=arg2P0, arg4'=arg4P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ 1+arg2P0 > 0 /\ arg1P6 > 0 /\ -1+arg2P6 > 0), cost: 2

Applied deletion
Removed the following rules: 0 6

Eliminated locations on linear paths
Start location: __init
   7: f248_0_mod_LT -> f319_0_minus_EQ : arg2'=arg1, arg4'=arg2, arg1'=arg2, arg3'=arg2, (arg2 > 0 /\ arg2-arg1 <= 0), cost: 1
  15: f248_0_mod_LT -> f319_0_minus_EQ : arg2'=-arg2+arg1, arg4'=0, arg1'=arg2, arg3'=0, (arg2-arg1 <= 0 /\ -1+arg2 >= 0), cost: 1+arg2
   8: f319_0_minus_EQ -> f248_0_mod_LT : arg2'=arg1, arg4'=arg4P2, arg1'=arg2, arg3'=arg3P2, (arg4 == 0 /\ arg3 == 0), cost: 1
  16: __init -> f248_0_mod_LT : arg2'=arg2P0, arg4'=arg4P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ 1+arg2P0 > 0 /\ arg1P6 > 0 /\ -1+arg2P6 > 0), cost: 2


Eliminating location f319_0_minus_EQ by chaining:

Applied chaining
First rule:
f248_0_mod_LT -> f319_0_minus_EQ : arg2'=-arg2+arg1, arg4'=0, arg1'=arg2, arg3'=0, (arg2-arg1 <= 0 /\ -1+arg2 >= 0), cost: 1+arg2
Second rule:
f319_0_minus_EQ -> f248_0_mod_LT : arg2'=arg1, arg4'=arg4P2, arg1'=arg2, arg3'=arg3P2, (arg4 == 0 /\ arg3 == 0), cost: 1
New rule:
f248_0_mod_LT -> f248_0_mod_LT : arg2'=arg2, arg4'=arg4P2, arg1'=-arg2+arg1, arg3'=arg3P2, (0 == 0 /\ arg2-arg1 <= 0 /\ -1+arg2 >= 0), cost: 2+arg2

Applied simplification
Original rule:
f248_0_mod_LT -> f248_0_mod_LT : arg2'=arg2, arg4'=arg4P2, arg1'=-arg2+arg1, arg3'=arg3P2, (0 == 0 /\ arg2-arg1 <= 0 /\ -1+arg2 >= 0), cost: 2+arg2
New rule:
f248_0_mod_LT -> f248_0_mod_LT : arg2'=arg2, arg4'=arg4P2, arg1'=-arg2+arg1, arg3'=arg3P2, (arg2-arg1 <= 0 /\ -1+arg2 >= 0), cost: 2+arg2

Applied deletion
Removed the following rules: 7 8 15

Eliminated locations on tree-shaped paths
Start location: __init
  17: f248_0_mod_LT -> f248_0_mod_LT : arg2'=arg2, arg4'=arg4P2, arg1'=-arg2+arg1, arg3'=arg3P2, (arg2-arg1 <= 0 /\ -1+arg2 >= 0), cost: 2+arg2
  16: __init -> f248_0_mod_LT : arg2'=arg2P0, arg4'=arg4P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ 1+arg2P0 > 0 /\ arg1P6 > 0 /\ -1+arg2P6 > 0), cost: 2


Applied simplification
Original rule:
f248_0_mod_LT -> f248_0_mod_LT : arg2'=arg2, arg4'=arg4P2, arg1'=-arg2+arg1, arg3'=arg3P2, (arg2-arg1 <= 0 /\ -1+arg2 >= 0), cost: 2+arg2
New rule:
f248_0_mod_LT -> f248_0_mod_LT : arg4'=arg4P2, arg1'=-arg2+arg1, arg3'=arg3P2, (arg2-arg1 <= 0 /\ -1+arg2 >= 0), cost: 2+arg2

Simplified simple loops
Start location: __init
  18: f248_0_mod_LT -> f248_0_mod_LT : arg4'=arg4P2, arg1'=-arg2+arg1, arg3'=arg3P2, (arg2-arg1 <= 0 /\ -1+arg2 >= 0), cost: 2+arg2
  16: __init -> f248_0_mod_LT : arg2'=arg2P0, arg4'=arg4P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ 1+arg2P0 > 0 /\ arg1P6 > 0 /\ -1+arg2P6 > 0), cost: 2


Applied acceleration
Original rule:
f248_0_mod_LT -> f248_0_mod_LT : arg4'=arg4P2, arg1'=-arg2+arg1, arg3'=arg3P2, (arg2-arg1 <= 0 /\ -1+arg2 >= 0), cost: 2+arg2
New rule:
f248_0_mod_LT -> f248_0_mod_LT : arg4'=arg4P2, arg1'=arg1-n1*arg2, arg3'=arg3P2, (-arg2+arg1-arg2*(-1+n1) >= 0 /\ -1+arg2 >= 0 /\ -1+n1 >= 0), cost: 2*n1+n1*arg2
Sub-proof via acceration calculus written to file:///tmp/tmpnam_bNaMNO.txt

Applied deletion
Removed the following rules: 18

Accelerated simple loops
Start location: __init
  19: f248_0_mod_LT -> f248_0_mod_LT : arg4'=arg4P2, arg1'=arg1-n1*arg2, arg3'=arg3P2, (-arg2+arg1-arg2*(-1+n1) >= 0 /\ -1+arg2 >= 0 /\ -1+n1 >= 0), cost: 2*n1+n1*arg2
  16: __init -> f248_0_mod_LT : arg2'=arg2P0, arg4'=arg4P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ 1+arg2P0 > 0 /\ arg1P6 > 0 /\ -1+arg2P6 > 0), cost: 2


Applied chaining
First rule:
__init -> f248_0_mod_LT : arg2'=arg2P0, arg4'=arg4P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ 1+arg2P0 > 0 /\ arg1P6 > 0 /\ -1+arg2P6 > 0), cost: 2
Second rule:
f248_0_mod_LT -> f248_0_mod_LT : arg4'=arg4P2, arg1'=arg1-n1*arg2, arg3'=arg3P2, (-arg2+arg1-arg2*(-1+n1) >= 0 /\ -1+arg2 >= 0 /\ -1+n1 >= 0), cost: 2*n1+n1*arg2
New rule:
__init -> f248_0_mod_LT : arg2'=arg2P0, arg4'=arg4P2, arg1'=arg1P0-n1*arg2P0, arg3'=arg3P2, (-1+arg2P0 >= 0 /\ -1+n1 >= 0 /\ -arg2P0+arg1P0-arg2P0*(-1+n1) >= 0), cost: 2+2*n1+n1*arg2P0

Applied deletion
Removed the following rules: 19

Chained accelerated rules with incoming rules
Start location: __init
  16: __init -> f248_0_mod_LT : arg2'=arg2P0, arg4'=arg4P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ 1+arg2P0 > 0 /\ arg1P6 > 0 /\ -1+arg2P6 > 0), cost: 2
  20: __init -> f248_0_mod_LT : arg2'=arg2P0, arg4'=arg4P2, arg1'=arg1P0-n1*arg2P0, arg3'=arg3P2, (-1+arg2P0 >= 0 /\ -1+n1 >= 0 /\ -arg2P0+arg1P0-arg2P0*(-1+n1) >= 0), cost: 2+2*n1+n1*arg2P0


Removed unreachable locations and irrelevant leafs
Start location: __init
  <empty>


Computing asymptotic complexity

Proved the following lower bound
Complexity:  Unknown
Cpx degree: ?

Solved cost: 0
Rule cost:   0

