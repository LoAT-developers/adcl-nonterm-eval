NO

Initial ITS

Start location: l4
Program variables: result_4^0 x_5^0 y_6^0
   0: l0 -> l1 : result_4^0'=result_4^post1, x_5^0'=x_5^post1, y_6^0'=y_6^post1, (-x_5^post1+x_5^0 == 0 /\ -y_6^post1+y_6^0 == 0 /\ result_4^0-result_4^post1 == 0), cost: 1
   1: l1 -> l2 : result_4^0'=result_4^post2, x_5^0'=x_5^post2, y_6^0'=y_6^post2, (0 == 0 /\ -y_6^post2+y_6^0 == 0 /\ x_5^post2-x_5^0-y_6^0 == 0 /\ 1+x_5^post2 <= 0), cost: 1
   2: l1 -> l3 : result_4^0'=result_4^post3, x_5^0'=x_5^post3, y_6^0'=y_6^post3, (x_5^post3-x_5^0-y_6^0 == 0 /\ -x_5^post3 <= 0 /\ result_4^0-result_4^post3 == 0 /\ -y_6^post3+y_6^0 == 0), cost: 1
   3: l3 -> l1 : result_4^0'=result_4^post4, x_5^0'=x_5^post4, y_6^0'=y_6^post4, (-x_5^post4+x_5^0 == 0 /\ -y_6^post4+y_6^0 == 0 /\ result_4^0-result_4^post4 == 0), cost: 1
   4: l4 -> l0 : result_4^0'=result_4^post5, x_5^0'=x_5^post5, y_6^0'=y_6^post5, (x_5^0-x_5^post5 == 0 /\ -y_6^post5+y_6^0 == 0 /\ -result_4^post5+result_4^0 == 0), cost: 1

Chained Linear Paths

Start location: l4
Program variables: result_4^0 x_5^0 y_6^0
   1: l1 -> l2 : result_4^0'=result_4^post2, x_5^0'=x_5^post2, y_6^0'=y_6^post2, (0 == 0 /\ -y_6^post2+y_6^0 == 0 /\ x_5^post2-x_5^0-y_6^0 == 0 /\ 1+x_5^post2 <= 0), cost: 1
   6: l1 -> l1 : result_4^0'=result_4^post4, x_5^0'=x_5^post4, y_6^0'=y_6^post4, (-x_5^post4+x_5^post3 == 0 /\ x_5^post3-x_5^0-y_6^0 == 0 /\ -x_5^post3 <= 0 /\ result_4^0-result_4^post3 == 0 /\ -result_4^post4+result_4^post3 == 0 /\ -y_6^post3+y_6^0 == 0 /\ -y_6^post4+y_6^post3 == 0), cost: 1
   5: l4 -> l1 : result_4^0'=result_4^post1, x_5^0'=x_5^post1, y_6^0'=y_6^post1, (result_4^post5-result_4^post1 == 0 /\ -x_5^post1+x_5^post5 == 0 /\ y_6^post5-y_6^post1 == 0 /\ x_5^0-x_5^post5 == 0 /\ -y_6^post5+y_6^0 == 0 /\ -result_4^post5+result_4^0 == 0), cost: 1

	Eliminating location l0 by chaining:

	Applied chaining

	First rule:
	l4 -> l0 : result_4^0'=result_4^post5, x_5^0'=x_5^post5, y_6^0'=y_6^post5, (x_5^0-x_5^post5 == 0 /\ -y_6^post5+y_6^0 == 0 /\ -result_4^post5+result_4^0 == 0), cost: 1
	Second rule:
	l0 -> l1 : result_4^0'=result_4^post1, x_5^0'=x_5^post1, y_6^0'=y_6^post1, (-x_5^post1+x_5^0 == 0 /\ -y_6^post1+y_6^0 == 0 /\ result_4^0-result_4^post1 == 0), cost: 1
	New rule:
	l4 -> l1 : result_4^0'=result_4^post1, x_5^0'=x_5^post1, y_6^0'=y_6^post1, (result_4^post5-result_4^post1 == 0 /\ -x_5^post1+x_5^post5 == 0 /\ y_6^post5-y_6^post1 == 0 /\ x_5^0-x_5^post5 == 0 /\ -y_6^post5+y_6^0 == 0 /\ -result_4^post5+result_4^0 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 4
	
	Eliminating location l3 by chaining:

	Applied chaining

	First rule:
	l1 -> l3 : result_4^0'=result_4^post3, x_5^0'=x_5^post3, y_6^0'=y_6^post3, (x_5^post3-x_5^0-y_6^0 == 0 /\ -x_5^post3 <= 0 /\ result_4^0-result_4^post3 == 0 /\ -y_6^post3+y_6^0 == 0), cost: 1
	Second rule:
	l3 -> l1 : result_4^0'=result_4^post4, x_5^0'=x_5^post4, y_6^0'=y_6^post4, (-x_5^post4+x_5^0 == 0 /\ -y_6^post4+y_6^0 == 0 /\ result_4^0-result_4^post4 == 0), cost: 1
	New rule:
	l1 -> l1 : result_4^0'=result_4^post4, x_5^0'=x_5^post4, y_6^0'=y_6^post4, (-x_5^post4+x_5^post3 == 0 /\ x_5^post3-x_5^0-y_6^0 == 0 /\ -x_5^post3 <= 0 /\ result_4^0-result_4^post3 == 0 /\ -result_4^post4+result_4^post3 == 0 /\ -y_6^post3+y_6^0 == 0 /\ -y_6^post4+y_6^post3 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 2 3

Simplified Transitions

Start location: l4
Program variables: result_4^0 x_5^0 y_6^0
   7: l1 -> l2 : result_4^0'=result_4^post2, x_5^0'=x_5^0+y_6^0, 1+x_5^0+y_6^0 <= 0, cost: 1
   9: l1 -> l1 : x_5^0'=x_5^0+y_6^0, -x_5^0-y_6^0 <= 0, cost: 1
   8: l4 -> l1 : T, cost: 1

	Propagated Equalities

	Original rule:
	l1 -> l2 : result_4^0'=result_4^post2, x_5^0'=x_5^post2, y_6^0'=y_6^post2, (0 == 0 /\ -y_6^post2+y_6^0 == 0 /\ x_5^post2-x_5^0-y_6^0 == 0 /\ 1+x_5^post2 <= 0), cost: 1
	New rule:
	l1 -> l2 : result_4^0'=result_4^post2, x_5^0'=x_5^0+y_6^0, y_6^0'=y_6^0, (0 == 0 /\ 1+x_5^0+y_6^0 <= 0), cost: 1
	
		propagated equality y_6^post2 = y_6^0
		
		propagated equality x_5^post2 = x_5^0+y_6^0
		
	Simplified Guard

	Original rule:
	l1 -> l2 : result_4^0'=result_4^post2, x_5^0'=x_5^0+y_6^0, y_6^0'=y_6^0, (0 == 0 /\ 1+x_5^0+y_6^0 <= 0), cost: 1
	New rule:
	l1 -> l2 : result_4^0'=result_4^post2, x_5^0'=x_5^0+y_6^0, y_6^0'=y_6^0, 1+x_5^0+y_6^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l1 -> l2 : result_4^0'=result_4^post2, x_5^0'=x_5^0+y_6^0, y_6^0'=y_6^0, 1+x_5^0+y_6^0 <= 0, cost: 1
	New rule:
	l1 -> l2 : result_4^0'=result_4^post2, x_5^0'=x_5^0+y_6^0, 1+x_5^0+y_6^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l4 -> l1 : result_4^0'=result_4^post1, x_5^0'=x_5^post1, y_6^0'=y_6^post1, (result_4^post5-result_4^post1 == 0 /\ -x_5^post1+x_5^post5 == 0 /\ y_6^post5-y_6^post1 == 0 /\ x_5^0-x_5^post5 == 0 /\ -y_6^post5+y_6^0 == 0 /\ -result_4^post5+result_4^0 == 0), cost: 1
	New rule:
	l4 -> l1 : result_4^0'=result_4^post5, x_5^0'=x_5^post5, y_6^0'=y_6^post5, (0 == 0 /\ x_5^0-x_5^post5 == 0 /\ -y_6^post5+y_6^0 == 0 /\ -result_4^post5+result_4^0 == 0), cost: 1
	
		propagated equality result_4^post1 = result_4^post5
		
		propagated equality x_5^post1 = x_5^post5
		
		propagated equality y_6^post1 = y_6^post5
		
	Propagated Equalities

	Original rule:
	l4 -> l1 : result_4^0'=result_4^post5, x_5^0'=x_5^post5, y_6^0'=y_6^post5, (0 == 0 /\ x_5^0-x_5^post5 == 0 /\ -y_6^post5+y_6^0 == 0 /\ -result_4^post5+result_4^0 == 0), cost: 1
	New rule:
	l4 -> l1 : result_4^0'=result_4^0, x_5^0'=x_5^0, y_6^0'=y_6^0, 0 == 0, cost: 1
	
		propagated equality x_5^post5 = x_5^0
		
		propagated equality y_6^post5 = y_6^0
		
		propagated equality result_4^post5 = result_4^0
		
	Simplified Guard

	Original rule:
	l4 -> l1 : result_4^0'=result_4^0, x_5^0'=x_5^0, y_6^0'=y_6^0, 0 == 0, cost: 1
	New rule:
	l4 -> l1 : result_4^0'=result_4^0, x_5^0'=x_5^0, y_6^0'=y_6^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l4 -> l1 : result_4^0'=result_4^0, x_5^0'=x_5^0, y_6^0'=y_6^0, T, cost: 1
	New rule:
	l4 -> l1 : T, cost: 1
	
	Propagated Equalities

	Original rule:
	l1 -> l1 : result_4^0'=result_4^post4, x_5^0'=x_5^post4, y_6^0'=y_6^post4, (-x_5^post4+x_5^post3 == 0 /\ x_5^post3-x_5^0-y_6^0 == 0 /\ -x_5^post3 <= 0 /\ result_4^0-result_4^post3 == 0 /\ -result_4^post4+result_4^post3 == 0 /\ -y_6^post3+y_6^0 == 0 /\ -y_6^post4+y_6^post3 == 0), cost: 1
	New rule:
	l1 -> l1 : result_4^0'=result_4^post3, x_5^0'=x_5^post3, y_6^0'=y_6^post3, (0 == 0 /\ x_5^post3-x_5^0-y_6^0 == 0 /\ -x_5^post3 <= 0 /\ result_4^0-result_4^post3 == 0 /\ -y_6^post3+y_6^0 == 0), cost: 1
	
		propagated equality x_5^post4 = x_5^post3
		
		propagated equality result_4^post4 = result_4^post3
		
		propagated equality y_6^post4 = y_6^post3
		
	Propagated Equalities

	Original rule:
	l1 -> l1 : result_4^0'=result_4^post3, x_5^0'=x_5^post3, y_6^0'=y_6^post3, (0 == 0 /\ x_5^post3-x_5^0-y_6^0 == 0 /\ -x_5^post3 <= 0 /\ result_4^0-result_4^post3 == 0 /\ -y_6^post3+y_6^0 == 0), cost: 1
	New rule:
	l1 -> l1 : result_4^0'=result_4^0, x_5^0'=x_5^0+y_6^0, y_6^0'=y_6^0, (0 == 0 /\ -x_5^0-y_6^0 <= 0), cost: 1
	
		propagated equality x_5^post3 = x_5^0+y_6^0
		
		propagated equality result_4^post3 = result_4^0
		
		propagated equality y_6^post3 = y_6^0
		
	Simplified Guard

	Original rule:
	l1 -> l1 : result_4^0'=result_4^0, x_5^0'=x_5^0+y_6^0, y_6^0'=y_6^0, (0 == 0 /\ -x_5^0-y_6^0 <= 0), cost: 1
	New rule:
	l1 -> l1 : result_4^0'=result_4^0, x_5^0'=x_5^0+y_6^0, y_6^0'=y_6^0, -x_5^0-y_6^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l1 -> l1 : result_4^0'=result_4^0, x_5^0'=x_5^0+y_6^0, y_6^0'=y_6^0, -x_5^0-y_6^0 <= 0, cost: 1
	New rule:
	l1 -> l1 : x_5^0'=x_5^0+y_6^0, -x_5^0-y_6^0 <= 0, cost: 1

Step with 8

	Trace

	8[T]
	
	Blocked

	[{}, {}]

Step with 7

	Trace

	8[T], 7[(1+x_5^0+y_6^0 <= 0)]
	
	Blocked

	[{}, {}, {}]

Backtrack

	Trace

	8[T]
	
	Blocked

	[{}, {7[T]}]

Step with 9

	Trace

	8[T], 9[(-x_5^0-y_6^0 <= 0)]
	
	Blocked

	[{}, {7[T]}, {}]

Nonterm

Start location: l4
Program variables: result_4^0 x_5^0 y_6^0
   7: l1 -> l2 : result_4^0'=result_4^post2, x_5^0'=x_5^0+y_6^0, 1+x_5^0+y_6^0 <= 0, cost: 1
   9: l1 -> l1 : x_5^0'=x_5^0+y_6^0, -x_5^0-y_6^0 <= 0, cost: 1
  10: l1 -> LoAT_sink : (x_5^0+y_6^0 >= 0 /\ -y_6^0 <= 0), cost: NONTERM
  11: l1 -> l1 : x_5^0'=x_5^0+n*y_6^0, (-1+n >= 0 /\ x_5^0+(-1+n)*y_6^0+y_6^0 >= 0 /\ x_5^0+y_6^0 >= 0), cost: 1
   8: l4 -> l1 : T, cost: 1

	Certificate of Non-Termination

	Original rule:
	l1 -> l1 : x_5^0'=x_5^0+y_6^0, (-x_5^0-y_6^0 <= 0), cost: 1
	New rule:
	l1 -> LoAT_sink : (x_5^0+y_6^0 >= 0 /\ -y_6^0 <= 0), cost: NONTERM

		x_5^0+y_6^0 >= 0 [0]: eventual decrease yields (x_5^0+(-1+n)*y_6^0+y_6^0 >= 0 /\ x_5^0+y_6^0 >= 0)
		
		x_5^0+y_6^0 >= 0 [1]: eventual increase yields (x_5^0+y_6^0 >= 0 /\ -y_6^0 <= 0)
		
		Replacement map: {x_5^0+y_6^0 >= 0 -> (x_5^0+y_6^0 >= 0 /\ -y_6^0 <= 0)}

	Loop Acceleration

	Original rule:
	l1 -> l1 : x_5^0'=x_5^0+y_6^0, (-x_5^0-y_6^0 <= 0), cost: 1
	New rule:
	l1 -> l1 : x_5^0'=x_5^0+n*y_6^0, (-1+n >= 0 /\ x_5^0+(-1+n)*y_6^0+y_6^0 >= 0 /\ x_5^0+y_6^0 >= 0), cost: 1

		x_5^0+y_6^0 >= 0 [0]: eventual decrease yields (x_5^0+(-1+n)*y_6^0+y_6^0 >= 0 /\ x_5^0+y_6^0 >= 0)
		
		x_5^0+y_6^0 >= 0 [1]: eventual increase yields (x_5^0+y_6^0 >= 0 /\ -y_6^0 <= 0)
		
		Replacement map: {x_5^0+y_6^0 >= 0 -> (x_5^0+(-1+n)*y_6^0+y_6^0 >= 0 /\ x_5^0+y_6^0 >= 0)}

Step with 10

	Trace

	8[T], 10[(x_5^0+y_6^0 >= 0 /\ -y_6^0 <= 0)]
	
	Blocked

	[{}, {7[T]}, {10[T]}]

Refute

	Counterexample

	[ result_4^0=0 x_5^0=0 y_6^0=0 ] 8 [ result_4^0=0 x_5^0=0 y_6^0=0 ] 10
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
