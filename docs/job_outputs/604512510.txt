NO

Initial ITS

Start location: [1]
Program variables: i j
   0: [1] -> [2] : i'=nondet, T, cost: 1
   1: [2] -> [3] : j'=nondet1, T, cost: 1
   2: [3] -> [4] : (-j+i < 0 \/ -j+i > 0), cost: 1
   6: [3] -> [7] : (-j+i <= 0 /\ -j+i >= 0), cost: 1
   3: [4] -> [5] : i'=-1+i, T, cost: 1
   4: [5] -> [6] : j'=1+j, T, cost: 1
   5: [6] -> [3] : T, cost: 1

Chained Linear Paths

Start location: [1]
Program variables: i j
   7: [1] -> [3] : i'=nondet, j'=nondet1, T, cost: 1
   6: [3] -> [7] : (-j+i <= 0 /\ -j+i >= 0), cost: 1
  10: [3] -> [3] : i'=-1+i, j'=1+j, (-j+i < 0 \/ -j+i > 0), cost: 1

	Eliminating location [2] by chaining:

	Applied chaining

	First rule:
	[1] -> [2] : i'=nondet, T, cost: 1
	Second rule:
	[2] -> [3] : j'=nondet1, T, cost: 1
	New rule:
	[1] -> [3] : i'=nondet, j'=nondet1, T, cost: 1
	
	Applied deletion

	Removed the following rules: 0 1
	
	Eliminating location [4] by chaining:

	Applied chaining

	First rule:
	[3] -> [4] : (-j+i < 0 \/ -j+i > 0), cost: 1
	Second rule:
	[4] -> [5] : i'=-1+i, T, cost: 1
	New rule:
	[3] -> [5] : i'=-1+i, (-j+i < 0 \/ -j+i > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 2 3
	
	Eliminating location [5] by chaining:

	Applied chaining

	First rule:
	[3] -> [5] : i'=-1+i, (-j+i < 0 \/ -j+i > 0), cost: 1
	Second rule:
	[5] -> [6] : j'=1+j, T, cost: 1
	New rule:
	[3] -> [6] : i'=-1+i, j'=1+j, (-j+i < 0 \/ -j+i > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 4 8
	
	Eliminating location [6] by chaining:

	Applied chaining

	First rule:
	[3] -> [6] : i'=-1+i, j'=1+j, (-j+i < 0 \/ -j+i > 0), cost: 1
	Second rule:
	[6] -> [3] : T, cost: 1
	New rule:
	[3] -> [3] : i'=-1+i, j'=1+j, (-j+i < 0 \/ -j+i > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 5 9

Step with 7

	Trace

	7[T]
	
	Blocked

	[{}, {}]

Step with 6

	Trace

	7[T], 6[(-j+i <= 0 /\ -j+i >= 0)]
	
	Blocked

	[{}, {}, {}]

Backtrack

	Trace

	7[T]
	
	Blocked

	[{}, {6[T]}]

Step with 10

	Trace

	7[T], 10[(-j+i > 0)]
	
	Blocked

	[{}, {6[T]}, {}]

Accelerate

Start location: [1]
Program variables: i j
   7: [1] -> [3] : i'=nondet, j'=nondet1, T, cost: 1
   6: [3] -> [7] : (-j+i <= 0 /\ -j+i >= 0), cost: 1
  10: [3] -> [3] : i'=-1+i, j'=1+j, (-j+i < 0 \/ -j+i > 0), cost: 1
  11: [3] -> [3] : i'=-n+i, j'=n+j, (2-2*n-j+i > 0 /\ -1+n >= 0), cost: 1

	Loop Acceleration

	Original rule:
	[3] -> [3] : i'=-1+i, j'=1+j, (-j+i > 0), cost: 1
	New rule:
	[3] -> [3] : i'=-n+i, j'=n+j, (2-2*n-j+i > 0 /\ -1+n >= 0), cost: 1

		-j+i > 0 [0]: montonic decrease yields 2-2*n-j+i > 0
		
		-j+i > 0 [1]: eventual increase yields (2 <= 0 /\ -j+i > 0)
		
		Replacement map: {-j+i > 0 -> 2-2*n-j+i > 0}

	Trace

	7[T], 11[(2-2*n-j+i > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {6[T]}, {10[-j+i > 0], 11[T]}]

Step with 6

	Trace

	7[T], 11[(2-2*n-j+i > 0 /\ -1+n >= 0)], 6[(-j+i <= 0 /\ -j+i >= 0)]
	
	Blocked

	[{}, {6[T]}, {10[-j+i > 0], 11[T]}, {}]

Backtrack

	Trace

	7[T], 11[(2-2*n-j+i > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {6[T]}, {6[T], 10[-j+i > 0], 11[T]}]

Step with 10

	Trace

	7[T], 11[(2-2*n-j+i > 0 /\ -1+n >= 0)], 10[(-j+i < 0)]
	
	Blocked

	[{}, {6[T]}, {6[T], 10[-j+i > 0], 11[T]}, {}]

Nonterm

Start location: [1]
Program variables: i j
   7: [1] -> [3] : i'=nondet, j'=nondet1, T, cost: 1
   6: [3] -> [7] : (-j+i <= 0 /\ -j+i >= 0), cost: 1
  10: [3] -> [3] : i'=-1+i, j'=1+j, (-j+i < 0 \/ -j+i > 0), cost: 1
  11: [3] -> [3] : i'=-n+i, j'=n+j, (2-2*n-j+i > 0 /\ -1+n >= 0), cost: 1
  12: [3] -> LoAT_sink : (-1+n2 >= 0 /\ j-i > 0), cost: NONTERM
  13: [3] -> [3] : i'=-n2+i, j'=n2+j, (-1+n2 >= 0 /\ j-i > 0), cost: 1

	Certificate of Non-Termination

	Original rule:
	[3] -> [3] : i'=-1+i, j'=1+j, (-j+i < 0), cost: 1
	New rule:
	[3] -> LoAT_sink : (-1+n2 >= 0 /\ j-i > 0), cost: NONTERM

		j-i > 0 [0]: monotonic increase yields j-i > 0
		
		Replacement map: {j-i > 0 -> j-i > 0}

	Loop Acceleration

	Original rule:
	[3] -> [3] : i'=-1+i, j'=1+j, (-j+i < 0), cost: 1
	New rule:
	[3] -> [3] : i'=-n2+i, j'=n2+j, (-1+n2 >= 0 /\ j-i > 0), cost: 1

		j-i > 0 [0]: monotonic increase yields j-i > 0
		
		Replacement map: {j-i > 0 -> j-i > 0}

Step with 12

	Trace

	7[T], 11[(2-2*n-j+i > 0 /\ -1+n >= 0)], 12[(-1+n2 >= 0 /\ j-i > 0)]
	
	Blocked

	[{}, {6[T]}, {6[T], 10[-j+i > 0], 11[T]}, {12[T]}]

Refute

	Counterexample

	[ i=1 j=0 ] 7 [ i=0 j=1 ] 11 [ i=i j=j ] 12
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
