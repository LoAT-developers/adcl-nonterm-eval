NO

Initial ITS

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5
   0: f1_0_main_Load -> f887_0_loop_aux_GT : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, arg5'=arg5p1, (15+arg2-arg3p1 == 0 /\ 15 > 0 /\ 20-arg1p1 == 0 /\ 1+arg2 > 0 /\ -arg2p1 == 0 /\ arg1 > 0), cost: 1
   1: f887_0_loop_aux_GT -> f961_0_loop_aux_NE : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, arg4'=arg4p2, arg5'=arg5p2, (-arg3p2+arg2 == 0 /\ -2-arg5p2+arg1 == 0 /\ arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ arg2 < 0 /\ arg3-arg1p2 == 0 /\ 1+arg3-arg4p2 == 0 /\ -arg2p2+arg1 == 0), cost: 1
   2: f887_0_loop_aux_GT -> f961_0_loop_aux_NE : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, arg4'=arg4p3, arg5'=arg5p3, (arg2-arg3p3 == 0 /\ arg3-arg1p3 == 0 /\ arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ -arg2p3+arg1 == 0 /\ 1-arg4p3+arg3 == 0 /\ arg2 > 0 /\ -2-arg5p3+arg1 == 0), cost: 1
   3: f887_0_loop_aux_GT -> f962_0_loop_aux_NE : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, arg4'=arg4p4, arg5'=arg5p4, (arg3-arg1p4 == 0 /\ arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ -arg2p4+arg1 == 0 /\ -arg2 == 0 /\ -2-arg4p4+arg1 == 0 /\ -1+arg3-arg3p4 == 0), cost: 1
   4: f887_0_loop_aux_GT -> f970_0_loop_aux_NE : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, arg4'=arg4p5, arg5'=arg5p5, (-arg3+arg1 == 0 /\ -1-arg2p5+arg1 == 0 /\ -2-arg3p5+arg1 == 0 /\ -arg1p5+arg1 == 0 /\ arg1 > 0), cost: 1
  17: f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg1'=arg1p18, arg2'=arg2p18, arg3'=arg3p18, arg4'=arg4p18, arg5'=arg5p18, (1-arg2p18 == 0 /\ -3+arg1 < 0 /\ -arg3 == 0 /\ 1-arg3p18 == 0 /\ -arg1p18+arg1 == 0 /\ arg1 > 0), cost: 1
  18: f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg1'=arg1p19, arg2'=arg2p19, arg3'=arg3p19, arg4'=arg4p19, arg5'=arg5p19, (-3+arg1 > 0 /\ 1-arg2p19 == 0 /\ -arg3 == 0 /\ -arg1p19+arg1 == 0 /\ 1-arg3p19 == 0), cost: 1
  20: f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg1'=arg1p21, arg2'=arg2p21, arg3'=arg3p21, arg4'=arg4p21, arg5'=arg5p21, (1-arg3p21 == 0 /\ -arg3 == 0 /\ 2-arg1p21 == 0 /\ 1-arg2p21 == 0 /\ 3-arg1 == 0), cost: 1
  21: f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg1'=arg1p22, arg2'=arg2p22, arg3'=arg3p22, arg4'=arg4p22, arg5'=arg5p22, (-arg1p22 == 0 /\ -arg3 == 0 /\ -1-arg3p22 == 0 /\ -arg2p22 == 0 /\ -arg1 == 0), cost: 1
   5: f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, arg4'=arg4p6, arg5'=arg5p6, (arg5-arg4 > 0 /\ -arg2p6+arg3 == 0 /\ -arg3p6+arg4 == 0 /\ arg2-arg1p6 == 0 /\ -arg2+arg1 < 0 /\ -1+arg4 > 0 /\ arg1 > 0), cost: 1
   6: f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1p7, arg2'=arg2p7, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, (arg5-arg4 > 0 /\ -arg1p7+arg2 == 0 /\ -arg2+arg1 > 0 /\ -1+arg4 > 0 /\ arg4-arg3p7 == 0 /\ arg3-arg2p7 == 0 /\ arg1 > 0), cost: 1
   7: f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1p8, arg2'=arg2p8, arg3'=arg3p8, arg4'=arg4p8, arg5'=arg5p8, (arg5-arg4 < 0 /\ arg3-arg2p8 == 0 /\ arg2-arg1p8 == 0 /\ -arg2+arg1 < 0 /\ -1+arg4 > 0 /\ arg1 > 0 /\ -arg3p8+arg4 == 0), cost: 1
   8: f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1p9, arg2'=arg2p9, arg3'=arg3p9, arg4'=arg4p9, arg5'=arg5p9, (arg5-arg4 < 0 /\ arg3-arg2p9 == 0 /\ -arg3p9+arg4 == 0 /\ -arg1p9+arg2 == 0 /\ -arg2+arg1 > 0 /\ -1+arg4 > 0 /\ arg1 > 0), cost: 1
  13: f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1p14, arg2'=arg2p14, arg3'=arg3p14, arg4'=arg4p14, arg5'=arg5p14, (1-arg2+arg4 <= 0 /\ -arg5+arg4 == 0 /\ -arg2p14+arg3 == 0 /\ -1-arg1p14+arg2 == 0 /\ -arg3p14+arg4 == 0 /\ arg1 > 0), cost: 1
   9: f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1p10, arg2'=arg2p10, arg3'=arg3p10, arg4'=arg4p10, arg5'=arg5p10, (-arg1p10+arg2 == 0 /\ arg2-arg1 > 0 /\ -arg3+arg4 > 0 /\ -arg2p10 == 0 /\ arg3-arg3p10 == 0 /\ arg1 > 0), cost: 1
  10: f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1p11, arg2'=arg2p11, arg3'=arg3p11, arg4'=arg4p11, arg5'=arg5p11, (arg2-arg1p11 == 0 /\ arg2-arg1 < 0 /\ -arg3+arg4 > 0 /\ -arg2p11 == 0 /\ arg3-arg3p11 == 0 /\ arg1 > 0), cost: 1
  11: f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1p12, arg2'=arg2p12, arg3'=arg3p12, arg4'=arg4p12, arg5'=arg5p12, (arg2-arg1 > 0 /\ -arg3+arg4 < 0 /\ -arg1p12+arg2 == 0 /\ -arg2p12 == 0 /\ -arg3p12+arg3 == 0 /\ arg1 > 0), cost: 1
  12: f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1p13, arg2'=arg2p13, arg3'=arg3p13, arg4'=arg4p13, arg5'=arg5p13, (arg2-arg1 < 0 /\ -arg1p13+arg2 == 0 /\ -arg3+arg4 < 0 /\ -arg2p13 == 0 /\ arg3-arg3p13 == 0 /\ arg1 > 0), cost: 1
  14: f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1p15, arg2'=arg2p15, arg3'=arg3p15, arg4'=arg4p15, arg5'=arg5p15, (arg3-arg4 == 0 /\ -arg2p15 == 0 /\ arg3-arg3p15 == 0 /\ -1-arg1p15+arg2 == 0 /\ 1+arg3-arg2 <= 0 /\ arg1 > 0), cost: 1
  15: f970_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1p16, arg2'=arg2p16, arg3'=arg3p16, arg4'=arg4p16, arg5'=arg5p16, (-arg2p16 == 0 /\ -arg3p16+arg2 == 0 /\ -arg1p16+arg1 == 0 /\ arg3-arg2 > 0), cost: 1
  16: f970_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1p17, arg2'=arg2p17, arg3'=arg3p17, arg4'=arg4p17, arg5'=arg5p17, (-arg2p17 == 0 /\ arg2-arg3p17 == 0 /\ -arg1p17+arg1 == 0 /\ arg3-arg2 < 0), cost: 1
  19: f970_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1p20, arg2'=arg2p20, arg3'=arg3p20, arg4'=arg4p20, arg5'=arg5p20, (1+arg2-arg1 <= 0 /\ arg2-arg1 < 0 /\ -arg2p20 == 0 /\ -1-arg1p20+arg1 == 0 /\ -arg3p20+arg2 == 0 /\ -arg3+arg2 == 0), cost: 1
  22: __init -> f1_0_main_Load : arg1'=arg1p23, arg2'=arg2p23, arg3'=arg3p23, arg4'=arg4p23, arg5'=arg5p23, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5
   1: f887_0_loop_aux_GT -> f961_0_loop_aux_NE : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, arg4'=arg4p2, arg5'=arg5p2, (-arg3p2+arg2 == 0 /\ -2-arg5p2+arg1 == 0 /\ arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ arg2 < 0 /\ arg3-arg1p2 == 0 /\ 1+arg3-arg4p2 == 0 /\ -arg2p2+arg1 == 0), cost: 1
   2: f887_0_loop_aux_GT -> f961_0_loop_aux_NE : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, arg4'=arg4p3, arg5'=arg5p3, (arg2-arg3p3 == 0 /\ arg3-arg1p3 == 0 /\ arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ -arg2p3+arg1 == 0 /\ 1-arg4p3+arg3 == 0 /\ arg2 > 0 /\ -2-arg5p3+arg1 == 0), cost: 1
   3: f887_0_loop_aux_GT -> f962_0_loop_aux_NE : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, arg4'=arg4p4, arg5'=arg5p4, (arg3-arg1p4 == 0 /\ arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ -arg2p4+arg1 == 0 /\ -arg2 == 0 /\ -2-arg4p4+arg1 == 0 /\ -1+arg3-arg3p4 == 0), cost: 1
   4: f887_0_loop_aux_GT -> f970_0_loop_aux_NE : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, arg4'=arg4p5, arg5'=arg5p5, (-arg3+arg1 == 0 /\ -1-arg2p5+arg1 == 0 /\ -2-arg3p5+arg1 == 0 /\ -arg1p5+arg1 == 0 /\ arg1 > 0), cost: 1
  17: f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg1'=arg1p18, arg2'=arg2p18, arg3'=arg3p18, arg4'=arg4p18, arg5'=arg5p18, (1-arg2p18 == 0 /\ -3+arg1 < 0 /\ -arg3 == 0 /\ 1-arg3p18 == 0 /\ -arg1p18+arg1 == 0 /\ arg1 > 0), cost: 1
  18: f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg1'=arg1p19, arg2'=arg2p19, arg3'=arg3p19, arg4'=arg4p19, arg5'=arg5p19, (-3+arg1 > 0 /\ 1-arg2p19 == 0 /\ -arg3 == 0 /\ -arg1p19+arg1 == 0 /\ 1-arg3p19 == 0), cost: 1
  20: f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg1'=arg1p21, arg2'=arg2p21, arg3'=arg3p21, arg4'=arg4p21, arg5'=arg5p21, (1-arg3p21 == 0 /\ -arg3 == 0 /\ 2-arg1p21 == 0 /\ 1-arg2p21 == 0 /\ 3-arg1 == 0), cost: 1
  21: f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg1'=arg1p22, arg2'=arg2p22, arg3'=arg3p22, arg4'=arg4p22, arg5'=arg5p22, (-arg1p22 == 0 /\ -arg3 == 0 /\ -1-arg3p22 == 0 /\ -arg2p22 == 0 /\ -arg1 == 0), cost: 1
   5: f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, arg4'=arg4p6, arg5'=arg5p6, (arg5-arg4 > 0 /\ -arg2p6+arg3 == 0 /\ -arg3p6+arg4 == 0 /\ arg2-arg1p6 == 0 /\ -arg2+arg1 < 0 /\ -1+arg4 > 0 /\ arg1 > 0), cost: 1
   6: f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1p7, arg2'=arg2p7, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, (arg5-arg4 > 0 /\ -arg1p7+arg2 == 0 /\ -arg2+arg1 > 0 /\ -1+arg4 > 0 /\ arg4-arg3p7 == 0 /\ arg3-arg2p7 == 0 /\ arg1 > 0), cost: 1
   7: f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1p8, arg2'=arg2p8, arg3'=arg3p8, arg4'=arg4p8, arg5'=arg5p8, (arg5-arg4 < 0 /\ arg3-arg2p8 == 0 /\ arg2-arg1p8 == 0 /\ -arg2+arg1 < 0 /\ -1+arg4 > 0 /\ arg1 > 0 /\ -arg3p8+arg4 == 0), cost: 1
   8: f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1p9, arg2'=arg2p9, arg3'=arg3p9, arg4'=arg4p9, arg5'=arg5p9, (arg5-arg4 < 0 /\ arg3-arg2p9 == 0 /\ -arg3p9+arg4 == 0 /\ -arg1p9+arg2 == 0 /\ -arg2+arg1 > 0 /\ -1+arg4 > 0 /\ arg1 > 0), cost: 1
  13: f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1p14, arg2'=arg2p14, arg3'=arg3p14, arg4'=arg4p14, arg5'=arg5p14, (1-arg2+arg4 <= 0 /\ -arg5+arg4 == 0 /\ -arg2p14+arg3 == 0 /\ -1-arg1p14+arg2 == 0 /\ -arg3p14+arg4 == 0 /\ arg1 > 0), cost: 1
   9: f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1p10, arg2'=arg2p10, arg3'=arg3p10, arg4'=arg4p10, arg5'=arg5p10, (-arg1p10+arg2 == 0 /\ arg2-arg1 > 0 /\ -arg3+arg4 > 0 /\ -arg2p10 == 0 /\ arg3-arg3p10 == 0 /\ arg1 > 0), cost: 1
  10: f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1p11, arg2'=arg2p11, arg3'=arg3p11, arg4'=arg4p11, arg5'=arg5p11, (arg2-arg1p11 == 0 /\ arg2-arg1 < 0 /\ -arg3+arg4 > 0 /\ -arg2p11 == 0 /\ arg3-arg3p11 == 0 /\ arg1 > 0), cost: 1
  11: f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1p12, arg2'=arg2p12, arg3'=arg3p12, arg4'=arg4p12, arg5'=arg5p12, (arg2-arg1 > 0 /\ -arg3+arg4 < 0 /\ -arg1p12+arg2 == 0 /\ -arg2p12 == 0 /\ -arg3p12+arg3 == 0 /\ arg1 > 0), cost: 1
  12: f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1p13, arg2'=arg2p13, arg3'=arg3p13, arg4'=arg4p13, arg5'=arg5p13, (arg2-arg1 < 0 /\ -arg1p13+arg2 == 0 /\ -arg3+arg4 < 0 /\ -arg2p13 == 0 /\ arg3-arg3p13 == 0 /\ arg1 > 0), cost: 1
  14: f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1p15, arg2'=arg2p15, arg3'=arg3p15, arg4'=arg4p15, arg5'=arg5p15, (arg3-arg4 == 0 /\ -arg2p15 == 0 /\ arg3-arg3p15 == 0 /\ -1-arg1p15+arg2 == 0 /\ 1+arg3-arg2 <= 0 /\ arg1 > 0), cost: 1
  15: f970_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1p16, arg2'=arg2p16, arg3'=arg3p16, arg4'=arg4p16, arg5'=arg5p16, (-arg2p16 == 0 /\ -arg3p16+arg2 == 0 /\ -arg1p16+arg1 == 0 /\ arg3-arg2 > 0), cost: 1
  16: f970_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1p17, arg2'=arg2p17, arg3'=arg3p17, arg4'=arg4p17, arg5'=arg5p17, (-arg2p17 == 0 /\ arg2-arg3p17 == 0 /\ -arg1p17+arg1 == 0 /\ arg3-arg2 < 0), cost: 1
  19: f970_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1p20, arg2'=arg2p20, arg3'=arg3p20, arg4'=arg4p20, arg5'=arg5p20, (1+arg2-arg1 <= 0 /\ arg2-arg1 < 0 /\ -arg2p20 == 0 /\ -1-arg1p20+arg1 == 0 /\ -arg3p20+arg2 == 0 /\ -arg3+arg2 == 0), cost: 1
  23: __init -> f887_0_loop_aux_GT : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, arg5'=arg5p1, (1+arg2p23 > 0 /\ 15 > 0 /\ 20-arg1p1 == 0 /\ arg1p23 > 0 /\ 15-arg3p1+arg2p23 == 0 /\ -arg2p1 == 0), cost: 1

	Eliminating location f1_0_main_Load by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_Load : arg1'=arg1p23, arg2'=arg2p23, arg3'=arg3p23, arg4'=arg4p23, arg5'=arg5p23, T, cost: 1
	Second rule:
	f1_0_main_Load -> f887_0_loop_aux_GT : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, arg5'=arg5p1, (15+arg2-arg3p1 == 0 /\ 15 > 0 /\ 20-arg1p1 == 0 /\ 1+arg2 > 0 /\ -arg2p1 == 0 /\ arg1 > 0), cost: 1
	New rule:
	__init -> f887_0_loop_aux_GT : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, arg5'=arg5p1, (1+arg2p23 > 0 /\ 15 > 0 /\ 20-arg1p1 == 0 /\ arg1p23 > 0 /\ 15-arg3p1+arg2p23 == 0 /\ -arg2p1 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 22

Simplified Transitions

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5
  24: f887_0_loop_aux_GT -> f961_0_loop_aux_NE : arg1'=arg3, arg2'=arg1, arg3'=arg2, arg4'=1+arg3, arg5'=-2+arg1, (arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ arg2 < 0), cost: 1
  25: f887_0_loop_aux_GT -> f961_0_loop_aux_NE : arg1'=arg3, arg2'=arg1, arg3'=arg2, arg4'=1+arg3, arg5'=-2+arg1, (arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ arg2 > 0), cost: 1
  26: f887_0_loop_aux_GT -> f962_0_loop_aux_NE : arg1'=arg3, arg2'=arg1, arg3'=-1+arg3, arg4'=-2+arg1, arg5'=arg5p4, (arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ -arg2 == 0), cost: 1
  27: f887_0_loop_aux_GT -> f970_0_loop_aux_NE : arg2'=-1+arg1, arg3'=-2+arg1, arg4'=arg4p5, arg5'=arg5p5, (-arg3+arg1 == 0 /\ arg1 > 0), cost: 1
  40: f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg2'=1, arg3'=1, arg4'=arg4p18, arg5'=arg5p18, (-3+arg1 < 0 /\ -arg3 == 0 /\ arg1 > 0), cost: 1
  41: f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg2'=1, arg3'=1, arg4'=arg4p19, arg5'=arg5p19, (-3+arg1 > 0 /\ -arg3 == 0), cost: 1
  43: f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg1'=2, arg2'=1, arg3'=1, arg4'=arg4p21, arg5'=arg5p21, (-arg3 == 0 /\ 3-arg1 == 0), cost: 1
  44: f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg1'=0, arg2'=0, arg3'=-1, arg4'=arg4p22, arg5'=arg5p22, (-arg3 == 0 /\ -arg1 == 0), cost: 1
  28: f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=arg3, arg3'=arg4, arg4'=arg4p6, arg5'=arg5p6, (arg5-arg4 > 0 /\ -arg2+arg1 < 0 /\ -1+arg4 > 0 /\ arg1 > 0), cost: 1
  29: f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=arg3, arg3'=arg4, arg4'=arg4p7, arg5'=arg5p7, (arg5-arg4 > 0 /\ -arg2+arg1 > 0 /\ -1+arg4 > 0 /\ arg1 > 0), cost: 1
  30: f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=arg3, arg3'=arg4, arg4'=arg4p8, arg5'=arg5p8, (arg5-arg4 < 0 /\ -arg2+arg1 < 0 /\ -1+arg4 > 0 /\ arg1 > 0), cost: 1
  31: f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=arg3, arg3'=arg4, arg4'=arg4p9, arg5'=arg5p9, (arg5-arg4 < 0 /\ -arg2+arg1 > 0 /\ -1+arg4 > 0 /\ arg1 > 0), cost: 1
  36: f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=-1+arg2, arg2'=arg3, arg3'=arg4, arg4'=arg4p14, arg5'=arg5p14, (1-arg2+arg4 <= 0 /\ -arg5+arg4 == 0 /\ arg1 > 0), cost: 1
  32: f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=0, arg4'=arg4p10, arg5'=arg5p10, (arg2-arg1 > 0 /\ -arg3+arg4 > 0 /\ arg1 > 0), cost: 1
  33: f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=0, arg4'=arg4p11, arg5'=arg5p11, (arg2-arg1 < 0 /\ -arg3+arg4 > 0 /\ arg1 > 0), cost: 1
  34: f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=0, arg4'=arg4p12, arg5'=arg5p12, (arg2-arg1 > 0 /\ -arg3+arg4 < 0 /\ arg1 > 0), cost: 1
  35: f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=0, arg4'=arg4p13, arg5'=arg5p13, (arg2-arg1 < 0 /\ -arg3+arg4 < 0 /\ arg1 > 0), cost: 1
  37: f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=-1+arg2, arg2'=0, arg4'=arg4p15, arg5'=arg5p15, (arg3-arg4 == 0 /\ 1+arg3-arg2 <= 0 /\ arg1 > 0), cost: 1
  38: f970_0_loop_aux_NE -> f887_0_loop_aux_GT : arg2'=0, arg3'=arg2, arg4'=arg4p16, arg5'=arg5p16, arg3-arg2 > 0, cost: 1
  39: f970_0_loop_aux_NE -> f887_0_loop_aux_GT : arg2'=0, arg3'=arg2, arg4'=arg4p17, arg5'=arg5p17, arg3-arg2 < 0, cost: 1
  42: f970_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=-1+arg1, arg2'=0, arg3'=arg2, arg4'=arg4p20, arg5'=arg5p20, (1+arg2-arg1 <= 0 /\ arg2-arg1 < 0 /\ -arg3+arg2 == 0), cost: 1
  45: __init -> f887_0_loop_aux_GT : arg1'=20, arg2'=0, arg3'=15+arg2p23, arg4'=arg4p1, arg5'=arg5p1, (1+arg2p23 > 0), cost: 1

	Propagated Equalities

	Original rule:
	f887_0_loop_aux_GT -> f961_0_loop_aux_NE : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, arg4'=arg4p2, arg5'=arg5p2, (-arg3p2+arg2 == 0 /\ -2-arg5p2+arg1 == 0 /\ arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ arg2 < 0 /\ arg3-arg1p2 == 0 /\ 1+arg3-arg4p2 == 0 /\ -arg2p2+arg1 == 0), cost: 1
	New rule:
	f887_0_loop_aux_GT -> f961_0_loop_aux_NE : arg1'=arg3, arg2'=arg1, arg3'=arg2, arg4'=1+arg3, arg5'=-2+arg1, (0 == 0 /\ arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ arg2 < 0), cost: 1
	
		propagated equality arg3p2 = arg2
		
		propagated equality arg5p2 = -2+arg1
		
		propagated equality arg1p2 = arg3
		
		propagated equality arg4p2 = 1+arg3
		
		propagated equality arg2p2 = arg1
		
	Simplified Guard

	Original rule:
	f887_0_loop_aux_GT -> f961_0_loop_aux_NE : arg1'=arg3, arg2'=arg1, arg3'=arg2, arg4'=1+arg3, arg5'=-2+arg1, (0 == 0 /\ arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ arg2 < 0), cost: 1
	New rule:
	f887_0_loop_aux_GT -> f961_0_loop_aux_NE : arg1'=arg3, arg2'=arg1, arg3'=arg2, arg4'=1+arg3, arg5'=-2+arg1, (arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ arg2 < 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f887_0_loop_aux_GT -> f961_0_loop_aux_NE : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, arg4'=arg4p3, arg5'=arg5p3, (arg2-arg3p3 == 0 /\ arg3-arg1p3 == 0 /\ arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ -arg2p3+arg1 == 0 /\ 1-arg4p3+arg3 == 0 /\ arg2 > 0 /\ -2-arg5p3+arg1 == 0), cost: 1
	New rule:
	f887_0_loop_aux_GT -> f961_0_loop_aux_NE : arg1'=arg3, arg2'=arg1, arg3'=arg2, arg4'=1+arg3, arg5'=-2+arg1, (0 == 0 /\ arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ arg2 > 0), cost: 1
	
		propagated equality arg3p3 = arg2
		
		propagated equality arg1p3 = arg3
		
		propagated equality arg2p3 = arg1
		
		propagated equality arg4p3 = 1+arg3
		
		propagated equality arg5p3 = -2+arg1
		
	Simplified Guard

	Original rule:
	f887_0_loop_aux_GT -> f961_0_loop_aux_NE : arg1'=arg3, arg2'=arg1, arg3'=arg2, arg4'=1+arg3, arg5'=-2+arg1, (0 == 0 /\ arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ arg2 > 0), cost: 1
	New rule:
	f887_0_loop_aux_GT -> f961_0_loop_aux_NE : arg1'=arg3, arg2'=arg1, arg3'=arg2, arg4'=1+arg3, arg5'=-2+arg1, (arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ arg2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f887_0_loop_aux_GT -> f962_0_loop_aux_NE : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, arg4'=arg4p4, arg5'=arg5p4, (arg3-arg1p4 == 0 /\ arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ -arg2p4+arg1 == 0 /\ -arg2 == 0 /\ -2-arg4p4+arg1 == 0 /\ -1+arg3-arg3p4 == 0), cost: 1
	New rule:
	f887_0_loop_aux_GT -> f962_0_loop_aux_NE : arg1'=arg3, arg2'=arg1, arg3'=-1+arg3, arg4'=-2+arg1, arg5'=arg5p4, (0 == 0 /\ arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ -arg2 == 0), cost: 1
	
		propagated equality arg1p4 = arg3
		
		propagated equality arg2p4 = arg1
		
		propagated equality arg4p4 = -2+arg1
		
		propagated equality arg3p4 = -1+arg3
		
	Simplified Guard

	Original rule:
	f887_0_loop_aux_GT -> f962_0_loop_aux_NE : arg1'=arg3, arg2'=arg1, arg3'=-1+arg3, arg4'=-2+arg1, arg5'=arg5p4, (0 == 0 /\ arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ -arg2 == 0), cost: 1
	New rule:
	f887_0_loop_aux_GT -> f962_0_loop_aux_NE : arg1'=arg3, arg2'=arg1, arg3'=-1+arg3, arg4'=-2+arg1, arg5'=arg5p4, (arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ -arg2 == 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f887_0_loop_aux_GT -> f970_0_loop_aux_NE : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, arg4'=arg4p5, arg5'=arg5p5, (-arg3+arg1 == 0 /\ -1-arg2p5+arg1 == 0 /\ -2-arg3p5+arg1 == 0 /\ -arg1p5+arg1 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f887_0_loop_aux_GT -> f970_0_loop_aux_NE : arg1'=arg1, arg2'=-1+arg1, arg3'=-2+arg1, arg4'=arg4p5, arg5'=arg5p5, (0 == 0 /\ -arg3+arg1 == 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg2p5 = -1+arg1
		
		propagated equality arg3p5 = -2+arg1
		
		propagated equality arg1p5 = arg1
		
	Simplified Guard

	Original rule:
	f887_0_loop_aux_GT -> f970_0_loop_aux_NE : arg1'=arg1, arg2'=-1+arg1, arg3'=-2+arg1, arg4'=arg4p5, arg5'=arg5p5, (0 == 0 /\ -arg3+arg1 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f887_0_loop_aux_GT -> f970_0_loop_aux_NE : arg1'=arg1, arg2'=-1+arg1, arg3'=-2+arg1, arg4'=arg4p5, arg5'=arg5p5, (-arg3+arg1 == 0 /\ arg1 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f887_0_loop_aux_GT -> f970_0_loop_aux_NE : arg1'=arg1, arg2'=-1+arg1, arg3'=-2+arg1, arg4'=arg4p5, arg5'=arg5p5, (-arg3+arg1 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f887_0_loop_aux_GT -> f970_0_loop_aux_NE : arg2'=-1+arg1, arg3'=-2+arg1, arg4'=arg4p5, arg5'=arg5p5, (-arg3+arg1 == 0 /\ arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, arg4'=arg4p6, arg5'=arg5p6, (arg5-arg4 > 0 /\ -arg2p6+arg3 == 0 /\ -arg3p6+arg4 == 0 /\ arg2-arg1p6 == 0 /\ -arg2+arg1 < 0 /\ -1+arg4 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=arg3, arg3'=arg4, arg4'=arg4p6, arg5'=arg5p6, (0 == 0 /\ arg5-arg4 > 0 /\ -arg2+arg1 < 0 /\ -1+arg4 > 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg2p6 = arg3
		
		propagated equality arg3p6 = arg4
		
		propagated equality arg1p6 = arg2
		
	Simplified Guard

	Original rule:
	f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=arg3, arg3'=arg4, arg4'=arg4p6, arg5'=arg5p6, (0 == 0 /\ arg5-arg4 > 0 /\ -arg2+arg1 < 0 /\ -1+arg4 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=arg3, arg3'=arg4, arg4'=arg4p6, arg5'=arg5p6, (arg5-arg4 > 0 /\ -arg2+arg1 < 0 /\ -1+arg4 > 0 /\ arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1p7, arg2'=arg2p7, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, (arg5-arg4 > 0 /\ -arg1p7+arg2 == 0 /\ -arg2+arg1 > 0 /\ -1+arg4 > 0 /\ arg4-arg3p7 == 0 /\ arg3-arg2p7 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=arg3, arg3'=arg4, arg4'=arg4p7, arg5'=arg5p7, (0 == 0 /\ arg5-arg4 > 0 /\ -arg2+arg1 > 0 /\ -1+arg4 > 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg1p7 = arg2
		
		propagated equality arg3p7 = arg4
		
		propagated equality arg2p7 = arg3
		
	Simplified Guard

	Original rule:
	f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=arg3, arg3'=arg4, arg4'=arg4p7, arg5'=arg5p7, (0 == 0 /\ arg5-arg4 > 0 /\ -arg2+arg1 > 0 /\ -1+arg4 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=arg3, arg3'=arg4, arg4'=arg4p7, arg5'=arg5p7, (arg5-arg4 > 0 /\ -arg2+arg1 > 0 /\ -1+arg4 > 0 /\ arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1p8, arg2'=arg2p8, arg3'=arg3p8, arg4'=arg4p8, arg5'=arg5p8, (arg5-arg4 < 0 /\ arg3-arg2p8 == 0 /\ arg2-arg1p8 == 0 /\ -arg2+arg1 < 0 /\ -1+arg4 > 0 /\ arg1 > 0 /\ -arg3p8+arg4 == 0), cost: 1
	New rule:
	f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=arg3, arg3'=arg4, arg4'=arg4p8, arg5'=arg5p8, (0 == 0 /\ arg5-arg4 < 0 /\ -arg2+arg1 < 0 /\ -1+arg4 > 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg2p8 = arg3
		
		propagated equality arg1p8 = arg2
		
		propagated equality arg3p8 = arg4
		
	Simplified Guard

	Original rule:
	f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=arg3, arg3'=arg4, arg4'=arg4p8, arg5'=arg5p8, (0 == 0 /\ arg5-arg4 < 0 /\ -arg2+arg1 < 0 /\ -1+arg4 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=arg3, arg3'=arg4, arg4'=arg4p8, arg5'=arg5p8, (arg5-arg4 < 0 /\ -arg2+arg1 < 0 /\ -1+arg4 > 0 /\ arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1p9, arg2'=arg2p9, arg3'=arg3p9, arg4'=arg4p9, arg5'=arg5p9, (arg5-arg4 < 0 /\ arg3-arg2p9 == 0 /\ -arg3p9+arg4 == 0 /\ -arg1p9+arg2 == 0 /\ -arg2+arg1 > 0 /\ -1+arg4 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=arg3, arg3'=arg4, arg4'=arg4p9, arg5'=arg5p9, (0 == 0 /\ arg5-arg4 < 0 /\ -arg2+arg1 > 0 /\ -1+arg4 > 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg2p9 = arg3
		
		propagated equality arg3p9 = arg4
		
		propagated equality arg1p9 = arg2
		
	Simplified Guard

	Original rule:
	f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=arg3, arg3'=arg4, arg4'=arg4p9, arg5'=arg5p9, (0 == 0 /\ arg5-arg4 < 0 /\ -arg2+arg1 > 0 /\ -1+arg4 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=arg3, arg3'=arg4, arg4'=arg4p9, arg5'=arg5p9, (arg5-arg4 < 0 /\ -arg2+arg1 > 0 /\ -1+arg4 > 0 /\ arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1p10, arg2'=arg2p10, arg3'=arg3p10, arg4'=arg4p10, arg5'=arg5p10, (-arg1p10+arg2 == 0 /\ arg2-arg1 > 0 /\ -arg3+arg4 > 0 /\ -arg2p10 == 0 /\ arg3-arg3p10 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=0, arg3'=arg3, arg4'=arg4p10, arg5'=arg5p10, (0 == 0 /\ arg2-arg1 > 0 /\ -arg3+arg4 > 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg1p10 = arg2
		
		propagated equality arg2p10 = 0
		
		propagated equality arg3p10 = arg3
		
	Simplified Guard

	Original rule:
	f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=0, arg3'=arg3, arg4'=arg4p10, arg5'=arg5p10, (0 == 0 /\ arg2-arg1 > 0 /\ -arg3+arg4 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=0, arg3'=arg3, arg4'=arg4p10, arg5'=arg5p10, (arg2-arg1 > 0 /\ -arg3+arg4 > 0 /\ arg1 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=0, arg3'=arg3, arg4'=arg4p10, arg5'=arg5p10, (arg2-arg1 > 0 /\ -arg3+arg4 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=0, arg4'=arg4p10, arg5'=arg5p10, (arg2-arg1 > 0 /\ -arg3+arg4 > 0 /\ arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1p11, arg2'=arg2p11, arg3'=arg3p11, arg4'=arg4p11, arg5'=arg5p11, (arg2-arg1p11 == 0 /\ arg2-arg1 < 0 /\ -arg3+arg4 > 0 /\ -arg2p11 == 0 /\ arg3-arg3p11 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=0, arg3'=arg3, arg4'=arg4p11, arg5'=arg5p11, (0 == 0 /\ arg2-arg1 < 0 /\ -arg3+arg4 > 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg1p11 = arg2
		
		propagated equality arg2p11 = 0
		
		propagated equality arg3p11 = arg3
		
	Simplified Guard

	Original rule:
	f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=0, arg3'=arg3, arg4'=arg4p11, arg5'=arg5p11, (0 == 0 /\ arg2-arg1 < 0 /\ -arg3+arg4 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=0, arg3'=arg3, arg4'=arg4p11, arg5'=arg5p11, (arg2-arg1 < 0 /\ -arg3+arg4 > 0 /\ arg1 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=0, arg3'=arg3, arg4'=arg4p11, arg5'=arg5p11, (arg2-arg1 < 0 /\ -arg3+arg4 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=0, arg4'=arg4p11, arg5'=arg5p11, (arg2-arg1 < 0 /\ -arg3+arg4 > 0 /\ arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1p12, arg2'=arg2p12, arg3'=arg3p12, arg4'=arg4p12, arg5'=arg5p12, (arg2-arg1 > 0 /\ -arg3+arg4 < 0 /\ -arg1p12+arg2 == 0 /\ -arg2p12 == 0 /\ -arg3p12+arg3 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=0, arg3'=arg3, arg4'=arg4p12, arg5'=arg5p12, (0 == 0 /\ arg2-arg1 > 0 /\ -arg3+arg4 < 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg1p12 = arg2
		
		propagated equality arg2p12 = 0
		
		propagated equality arg3p12 = arg3
		
	Simplified Guard

	Original rule:
	f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=0, arg3'=arg3, arg4'=arg4p12, arg5'=arg5p12, (0 == 0 /\ arg2-arg1 > 0 /\ -arg3+arg4 < 0 /\ arg1 > 0), cost: 1
	New rule:
	f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=0, arg3'=arg3, arg4'=arg4p12, arg5'=arg5p12, (arg2-arg1 > 0 /\ -arg3+arg4 < 0 /\ arg1 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=0, arg3'=arg3, arg4'=arg4p12, arg5'=arg5p12, (arg2-arg1 > 0 /\ -arg3+arg4 < 0 /\ arg1 > 0), cost: 1
	New rule:
	f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=0, arg4'=arg4p12, arg5'=arg5p12, (arg2-arg1 > 0 /\ -arg3+arg4 < 0 /\ arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1p13, arg2'=arg2p13, arg3'=arg3p13, arg4'=arg4p13, arg5'=arg5p13, (arg2-arg1 < 0 /\ -arg1p13+arg2 == 0 /\ -arg3+arg4 < 0 /\ -arg2p13 == 0 /\ arg3-arg3p13 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=0, arg3'=arg3, arg4'=arg4p13, arg5'=arg5p13, (0 == 0 /\ arg2-arg1 < 0 /\ -arg3+arg4 < 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg1p13 = arg2
		
		propagated equality arg2p13 = 0
		
		propagated equality arg3p13 = arg3
		
	Simplified Guard

	Original rule:
	f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=0, arg3'=arg3, arg4'=arg4p13, arg5'=arg5p13, (0 == 0 /\ arg2-arg1 < 0 /\ -arg3+arg4 < 0 /\ arg1 > 0), cost: 1
	New rule:
	f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=0, arg3'=arg3, arg4'=arg4p13, arg5'=arg5p13, (arg2-arg1 < 0 /\ -arg3+arg4 < 0 /\ arg1 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=0, arg3'=arg3, arg4'=arg4p13, arg5'=arg5p13, (arg2-arg1 < 0 /\ -arg3+arg4 < 0 /\ arg1 > 0), cost: 1
	New rule:
	f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=0, arg4'=arg4p13, arg5'=arg5p13, (arg2-arg1 < 0 /\ -arg3+arg4 < 0 /\ arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1p14, arg2'=arg2p14, arg3'=arg3p14, arg4'=arg4p14, arg5'=arg5p14, (1-arg2+arg4 <= 0 /\ -arg5+arg4 == 0 /\ -arg2p14+arg3 == 0 /\ -1-arg1p14+arg2 == 0 /\ -arg3p14+arg4 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=-1+arg2, arg2'=arg3, arg3'=arg4, arg4'=arg4p14, arg5'=arg5p14, (0 == 0 /\ 1-arg2+arg4 <= 0 /\ -arg5+arg4 == 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg2p14 = arg3
		
		propagated equality arg1p14 = -1+arg2
		
		propagated equality arg3p14 = arg4
		
	Simplified Guard

	Original rule:
	f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=-1+arg2, arg2'=arg3, arg3'=arg4, arg4'=arg4p14, arg5'=arg5p14, (0 == 0 /\ 1-arg2+arg4 <= 0 /\ -arg5+arg4 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=-1+arg2, arg2'=arg3, arg3'=arg4, arg4'=arg4p14, arg5'=arg5p14, (1-arg2+arg4 <= 0 /\ -arg5+arg4 == 0 /\ arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1p15, arg2'=arg2p15, arg3'=arg3p15, arg4'=arg4p15, arg5'=arg5p15, (arg3-arg4 == 0 /\ -arg2p15 == 0 /\ arg3-arg3p15 == 0 /\ -1-arg1p15+arg2 == 0 /\ 1+arg3-arg2 <= 0 /\ arg1 > 0), cost: 1
	New rule:
	f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=-1+arg2, arg2'=0, arg3'=arg3, arg4'=arg4p15, arg5'=arg5p15, (0 == 0 /\ arg3-arg4 == 0 /\ 1+arg3-arg2 <= 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg2p15 = 0
		
		propagated equality arg3p15 = arg3
		
		propagated equality arg1p15 = -1+arg2
		
	Simplified Guard

	Original rule:
	f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=-1+arg2, arg2'=0, arg3'=arg3, arg4'=arg4p15, arg5'=arg5p15, (0 == 0 /\ arg3-arg4 == 0 /\ 1+arg3-arg2 <= 0 /\ arg1 > 0), cost: 1
	New rule:
	f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=-1+arg2, arg2'=0, arg3'=arg3, arg4'=arg4p15, arg5'=arg5p15, (arg3-arg4 == 0 /\ 1+arg3-arg2 <= 0 /\ arg1 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=-1+arg2, arg2'=0, arg3'=arg3, arg4'=arg4p15, arg5'=arg5p15, (arg3-arg4 == 0 /\ 1+arg3-arg2 <= 0 /\ arg1 > 0), cost: 1
	New rule:
	f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=-1+arg2, arg2'=0, arg4'=arg4p15, arg5'=arg5p15, (arg3-arg4 == 0 /\ 1+arg3-arg2 <= 0 /\ arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f970_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1p16, arg2'=arg2p16, arg3'=arg3p16, arg4'=arg4p16, arg5'=arg5p16, (-arg2p16 == 0 /\ -arg3p16+arg2 == 0 /\ -arg1p16+arg1 == 0 /\ arg3-arg2 > 0), cost: 1
	New rule:
	f970_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1, arg2'=0, arg3'=arg2, arg4'=arg4p16, arg5'=arg5p16, (0 == 0 /\ arg3-arg2 > 0), cost: 1
	
		propagated equality arg2p16 = 0
		
		propagated equality arg3p16 = arg2
		
		propagated equality arg1p16 = arg1
		
	Simplified Guard

	Original rule:
	f970_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1, arg2'=0, arg3'=arg2, arg4'=arg4p16, arg5'=arg5p16, (0 == 0 /\ arg3-arg2 > 0), cost: 1
	New rule:
	f970_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1, arg2'=0, arg3'=arg2, arg4'=arg4p16, arg5'=arg5p16, arg3-arg2 > 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	f970_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1, arg2'=0, arg3'=arg2, arg4'=arg4p16, arg5'=arg5p16, arg3-arg2 > 0, cost: 1
	New rule:
	f970_0_loop_aux_NE -> f887_0_loop_aux_GT : arg2'=0, arg3'=arg2, arg4'=arg4p16, arg5'=arg5p16, arg3-arg2 > 0, cost: 1
	
	Propagated Equalities

	Original rule:
	f970_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1p17, arg2'=arg2p17, arg3'=arg3p17, arg4'=arg4p17, arg5'=arg5p17, (-arg2p17 == 0 /\ arg2-arg3p17 == 0 /\ -arg1p17+arg1 == 0 /\ arg3-arg2 < 0), cost: 1
	New rule:
	f970_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1, arg2'=0, arg3'=arg2, arg4'=arg4p17, arg5'=arg5p17, (0 == 0 /\ arg3-arg2 < 0), cost: 1
	
		propagated equality arg2p17 = 0
		
		propagated equality arg3p17 = arg2
		
		propagated equality arg1p17 = arg1
		
	Simplified Guard

	Original rule:
	f970_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1, arg2'=0, arg3'=arg2, arg4'=arg4p17, arg5'=arg5p17, (0 == 0 /\ arg3-arg2 < 0), cost: 1
	New rule:
	f970_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1, arg2'=0, arg3'=arg2, arg4'=arg4p17, arg5'=arg5p17, arg3-arg2 < 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	f970_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1, arg2'=0, arg3'=arg2, arg4'=arg4p17, arg5'=arg5p17, arg3-arg2 < 0, cost: 1
	New rule:
	f970_0_loop_aux_NE -> f887_0_loop_aux_GT : arg2'=0, arg3'=arg2, arg4'=arg4p17, arg5'=arg5p17, arg3-arg2 < 0, cost: 1
	
	Propagated Equalities

	Original rule:
	f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg1'=arg1p18, arg2'=arg2p18, arg3'=arg3p18, arg4'=arg4p18, arg5'=arg5p18, (1-arg2p18 == 0 /\ -3+arg1 < 0 /\ -arg3 == 0 /\ 1-arg3p18 == 0 /\ -arg1p18+arg1 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg1'=arg1, arg2'=1, arg3'=1, arg4'=arg4p18, arg5'=arg5p18, (0 == 0 /\ -3+arg1 < 0 /\ -arg3 == 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg2p18 = 1
		
		propagated equality arg3p18 = 1
		
		propagated equality arg1p18 = arg1
		
	Simplified Guard

	Original rule:
	f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg1'=arg1, arg2'=1, arg3'=1, arg4'=arg4p18, arg5'=arg5p18, (0 == 0 /\ -3+arg1 < 0 /\ -arg3 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg1'=arg1, arg2'=1, arg3'=1, arg4'=arg4p18, arg5'=arg5p18, (-3+arg1 < 0 /\ -arg3 == 0 /\ arg1 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg1'=arg1, arg2'=1, arg3'=1, arg4'=arg4p18, arg5'=arg5p18, (-3+arg1 < 0 /\ -arg3 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg2'=1, arg3'=1, arg4'=arg4p18, arg5'=arg5p18, (-3+arg1 < 0 /\ -arg3 == 0 /\ arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg1'=arg1p19, arg2'=arg2p19, arg3'=arg3p19, arg4'=arg4p19, arg5'=arg5p19, (-3+arg1 > 0 /\ 1-arg2p19 == 0 /\ -arg3 == 0 /\ -arg1p19+arg1 == 0 /\ 1-arg3p19 == 0), cost: 1
	New rule:
	f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg1'=arg1, arg2'=1, arg3'=1, arg4'=arg4p19, arg5'=arg5p19, (0 == 0 /\ -3+arg1 > 0 /\ -arg3 == 0), cost: 1
	
		propagated equality arg2p19 = 1
		
		propagated equality arg1p19 = arg1
		
		propagated equality arg3p19 = 1
		
	Simplified Guard

	Original rule:
	f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg1'=arg1, arg2'=1, arg3'=1, arg4'=arg4p19, arg5'=arg5p19, (0 == 0 /\ -3+arg1 > 0 /\ -arg3 == 0), cost: 1
	New rule:
	f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg1'=arg1, arg2'=1, arg3'=1, arg4'=arg4p19, arg5'=arg5p19, (-3+arg1 > 0 /\ -arg3 == 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg1'=arg1, arg2'=1, arg3'=1, arg4'=arg4p19, arg5'=arg5p19, (-3+arg1 > 0 /\ -arg3 == 0), cost: 1
	New rule:
	f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg2'=1, arg3'=1, arg4'=arg4p19, arg5'=arg5p19, (-3+arg1 > 0 /\ -arg3 == 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f970_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg1p20, arg2'=arg2p20, arg3'=arg3p20, arg4'=arg4p20, arg5'=arg5p20, (1+arg2-arg1 <= 0 /\ arg2-arg1 < 0 /\ -arg2p20 == 0 /\ -1-arg1p20+arg1 == 0 /\ -arg3p20+arg2 == 0 /\ -arg3+arg2 == 0), cost: 1
	New rule:
	f970_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=-1+arg1, arg2'=0, arg3'=arg2, arg4'=arg4p20, arg5'=arg5p20, (0 == 0 /\ 1+arg2-arg1 <= 0 /\ arg2-arg1 < 0 /\ -arg3+arg2 == 0), cost: 1
	
		propagated equality arg2p20 = 0
		
		propagated equality arg1p20 = -1+arg1
		
		propagated equality arg3p20 = arg2
		
	Simplified Guard

	Original rule:
	f970_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=-1+arg1, arg2'=0, arg3'=arg2, arg4'=arg4p20, arg5'=arg5p20, (0 == 0 /\ 1+arg2-arg1 <= 0 /\ arg2-arg1 < 0 /\ -arg3+arg2 == 0), cost: 1
	New rule:
	f970_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=-1+arg1, arg2'=0, arg3'=arg2, arg4'=arg4p20, arg5'=arg5p20, (1+arg2-arg1 <= 0 /\ arg2-arg1 < 0 /\ -arg3+arg2 == 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg1'=arg1p21, arg2'=arg2p21, arg3'=arg3p21, arg4'=arg4p21, arg5'=arg5p21, (1-arg3p21 == 0 /\ -arg3 == 0 /\ 2-arg1p21 == 0 /\ 1-arg2p21 == 0 /\ 3-arg1 == 0), cost: 1
	New rule:
	f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg1'=2, arg2'=1, arg3'=1, arg4'=arg4p21, arg5'=arg5p21, (0 == 0 /\ -arg3 == 0 /\ 3-arg1 == 0), cost: 1
	
		propagated equality arg3p21 = 1
		
		propagated equality arg1p21 = 2
		
		propagated equality arg2p21 = 1
		
	Simplified Guard

	Original rule:
	f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg1'=2, arg2'=1, arg3'=1, arg4'=arg4p21, arg5'=arg5p21, (0 == 0 /\ -arg3 == 0 /\ 3-arg1 == 0), cost: 1
	New rule:
	f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg1'=2, arg2'=1, arg3'=1, arg4'=arg4p21, arg5'=arg5p21, (-arg3 == 0 /\ 3-arg1 == 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg1'=arg1p22, arg2'=arg2p22, arg3'=arg3p22, arg4'=arg4p22, arg5'=arg5p22, (-arg1p22 == 0 /\ -arg3 == 0 /\ -1-arg3p22 == 0 /\ -arg2p22 == 0 /\ -arg1 == 0), cost: 1
	New rule:
	f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg1'=0, arg2'=0, arg3'=-1, arg4'=arg4p22, arg5'=arg5p22, (0 == 0 /\ -arg3 == 0 /\ -arg1 == 0), cost: 1
	
		propagated equality arg1p22 = 0
		
		propagated equality arg3p22 = -1
		
		propagated equality arg2p22 = 0
		
	Simplified Guard

	Original rule:
	f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg1'=0, arg2'=0, arg3'=-1, arg4'=arg4p22, arg5'=arg5p22, (0 == 0 /\ -arg3 == 0 /\ -arg1 == 0), cost: 1
	New rule:
	f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg1'=0, arg2'=0, arg3'=-1, arg4'=arg4p22, arg5'=arg5p22, (-arg3 == 0 /\ -arg1 == 0), cost: 1
	
	Propagated Equalities

	Original rule:
	__init -> f887_0_loop_aux_GT : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, arg5'=arg5p1, (1+arg2p23 > 0 /\ 15 > 0 /\ 20-arg1p1 == 0 /\ arg1p23 > 0 /\ 15-arg3p1+arg2p23 == 0 /\ -arg2p1 == 0), cost: 1
	New rule:
	__init -> f887_0_loop_aux_GT : arg1'=20, arg2'=0, arg3'=15+arg2p23, arg4'=arg4p1, arg5'=arg5p1, (0 == 0 /\ 1+arg2p23 > 0 /\ 15 > 0 /\ arg1p23 > 0), cost: 1
	
		propagated equality arg1p1 = 20
		
		propagated equality arg3p1 = 15+arg2p23
		
		propagated equality arg2p1 = 0
		
	Simplified Guard

	Original rule:
	__init -> f887_0_loop_aux_GT : arg1'=20, arg2'=0, arg3'=15+arg2p23, arg4'=arg4p1, arg5'=arg5p1, (0 == 0 /\ 1+arg2p23 > 0 /\ 15 > 0 /\ arg1p23 > 0), cost: 1
	New rule:
	__init -> f887_0_loop_aux_GT : arg1'=20, arg2'=0, arg3'=15+arg2p23, arg4'=arg4p1, arg5'=arg5p1, (1+arg2p23 > 0 /\ arg1p23 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	__init -> f887_0_loop_aux_GT : arg1'=20, arg2'=0, arg3'=15+arg2p23, arg4'=arg4p1, arg5'=arg5p1, (1+arg2p23 > 0 /\ arg1p23 > 0), cost: 1
	New rule:
	__init -> f887_0_loop_aux_GT : arg1'=20, arg2'=0, arg3'=15+arg2p23, arg4'=arg4p1, arg5'=arg5p1, (1+arg2p23 > 0), cost: 1

Step with 45

	Trace

	45[(1+arg2p23 > 0)]
	
	Blocked

	[{}, {}]

Step with 26

	Trace

	45[(1+arg2p23 > 0)], 26[(arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ -arg2 == 0)]
	
	Blocked

	[{}, {24[T], 25[T]}, {}]

Step with 32

	Trace

	45[(1+arg2p23 > 0)], 26[(arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ -arg2 == 0)], 32[(arg2-arg1 > 0 /\ -arg3+arg4 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {24[T], 25[T]}, {}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5
  24: f887_0_loop_aux_GT -> f961_0_loop_aux_NE : arg1'=arg3, arg2'=arg1, arg3'=arg2, arg4'=1+arg3, arg5'=-2+arg1, (arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ arg2 < 0), cost: 1
  25: f887_0_loop_aux_GT -> f961_0_loop_aux_NE : arg1'=arg3, arg2'=arg1, arg3'=arg2, arg4'=1+arg3, arg5'=-2+arg1, (arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ arg2 > 0), cost: 1
  26: f887_0_loop_aux_GT -> f962_0_loop_aux_NE : arg1'=arg3, arg2'=arg1, arg3'=-1+arg3, arg4'=-2+arg1, arg5'=arg5p4, (arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ -arg2 == 0), cost: 1
  27: f887_0_loop_aux_GT -> f970_0_loop_aux_NE : arg2'=-1+arg1, arg3'=-2+arg1, arg4'=arg4p5, arg5'=arg5p5, (-arg3+arg1 == 0 /\ arg1 > 0), cost: 1
  40: f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg2'=1, arg3'=1, arg4'=arg4p18, arg5'=arg5p18, (-3+arg1 < 0 /\ -arg3 == 0 /\ arg1 > 0), cost: 1
  41: f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg2'=1, arg3'=1, arg4'=arg4p19, arg5'=arg5p19, (-3+arg1 > 0 /\ -arg3 == 0), cost: 1
  43: f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg1'=2, arg2'=1, arg3'=1, arg4'=arg4p21, arg5'=arg5p21, (-arg3 == 0 /\ 3-arg1 == 0), cost: 1
  44: f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg1'=0, arg2'=0, arg3'=-1, arg4'=arg4p22, arg5'=arg5p22, (-arg3 == 0 /\ -arg1 == 0), cost: 1
  46: f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg2'=0, arg3'=-n+arg3, arg4'=arg4p10, arg5'=arg5p10, (-arg3+arg1 > 0 /\ 1-n+arg3 > 0 /\ -1+n >= 0 /\ 1+arg1 > 0 /\ -arg2 >= 0 /\ arg2 >= 0 /\ -1-arg3+arg1 > 0), cost: 1
  28: f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=arg3, arg3'=arg4, arg4'=arg4p6, arg5'=arg5p6, (arg5-arg4 > 0 /\ -arg2+arg1 < 0 /\ -1+arg4 > 0 /\ arg1 > 0), cost: 1
  29: f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=arg3, arg3'=arg4, arg4'=arg4p7, arg5'=arg5p7, (arg5-arg4 > 0 /\ -arg2+arg1 > 0 /\ -1+arg4 > 0 /\ arg1 > 0), cost: 1
  30: f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=arg3, arg3'=arg4, arg4'=arg4p8, arg5'=arg5p8, (arg5-arg4 < 0 /\ -arg2+arg1 < 0 /\ -1+arg4 > 0 /\ arg1 > 0), cost: 1
  31: f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=arg3, arg3'=arg4, arg4'=arg4p9, arg5'=arg5p9, (arg5-arg4 < 0 /\ -arg2+arg1 > 0 /\ -1+arg4 > 0 /\ arg1 > 0), cost: 1
  36: f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=-1+arg2, arg2'=arg3, arg3'=arg4, arg4'=arg4p14, arg5'=arg5p14, (1-arg2+arg4 <= 0 /\ -arg5+arg4 == 0 /\ arg1 > 0), cost: 1
  32: f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=0, arg4'=arg4p10, arg5'=arg5p10, (arg2-arg1 > 0 /\ -arg3+arg4 > 0 /\ arg1 > 0), cost: 1
  33: f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=0, arg4'=arg4p11, arg5'=arg5p11, (arg2-arg1 < 0 /\ -arg3+arg4 > 0 /\ arg1 > 0), cost: 1
  34: f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=0, arg4'=arg4p12, arg5'=arg5p12, (arg2-arg1 > 0 /\ -arg3+arg4 < 0 /\ arg1 > 0), cost: 1
  35: f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=0, arg4'=arg4p13, arg5'=arg5p13, (arg2-arg1 < 0 /\ -arg3+arg4 < 0 /\ arg1 > 0), cost: 1
  37: f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=-1+arg2, arg2'=0, arg4'=arg4p15, arg5'=arg5p15, (arg3-arg4 == 0 /\ 1+arg3-arg2 <= 0 /\ arg1 > 0), cost: 1
  38: f970_0_loop_aux_NE -> f887_0_loop_aux_GT : arg2'=0, arg3'=arg2, arg4'=arg4p16, arg5'=arg5p16, arg3-arg2 > 0, cost: 1
  39: f970_0_loop_aux_NE -> f887_0_loop_aux_GT : arg2'=0, arg3'=arg2, arg4'=arg4p17, arg5'=arg5p17, arg3-arg2 < 0, cost: 1
  42: f970_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=-1+arg1, arg2'=0, arg3'=arg2, arg4'=arg4p20, arg5'=arg5p20, (1+arg2-arg1 <= 0 /\ arg2-arg1 < 0 /\ -arg3+arg2 == 0), cost: 1
  45: __init -> f887_0_loop_aux_GT : arg1'=20, arg2'=0, arg3'=15+arg2p23, arg4'=arg4p1, arg5'=arg5p1, (1+arg2p23 > 0), cost: 1

	Loop Acceleration

	Original rule:
	f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg2'=0, arg3'=-1+arg3, arg4'=arg4p10, arg5'=arg5p10, (-arg3+arg1 > 0 /\ arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ -arg2 == 0 /\ -1-arg3+arg1 > 0), cost: 1
	New rule:
	f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg2'=0, arg3'=-n+arg3, arg4'=arg4p10, arg5'=arg5p10, (-arg3+arg1 > 0 /\ 1-n+arg3 > 0 /\ -1+n >= 0 /\ 1+arg1 > 0 /\ -arg2 >= 0 /\ arg2 >= 0 /\ -1-arg3+arg1 > 0), cost: 1

		-arg3+arg1 > 0 [0]: monotonic increase yields -arg3+arg1 > 0
		
		arg3 > 0 [0]: montonic decrease yields 1-n+arg3 > 0
		
		arg3 > 0 [1]: eventual increase yields (1 <= 0 /\ arg3 > 0)
		
		1+arg1 > 0 [0]: monotonic increase yields 1+arg1 > 0, dependencies: -arg3+arg1 > 0 arg3 > 0
		
		-arg2 >= 0 [0]: monotonic increase yields -arg2 >= 0
		
		arg2 >= 0 [0]: monotonic increase yields arg2 >= 0
		
		-1-arg3+arg1 > 0 [0]: monotonic increase yields -1-arg3+arg1 > 0
		
		Replacement map: {-arg3+arg1 > 0 -> -arg3+arg1 > 0, arg3 > 0 -> 1-n+arg3 > 0, 1+arg1 > 0 -> 1+arg1 > 0, -arg2 >= 0 -> -arg2 >= 0, arg2 >= 0 -> arg2 >= 0, -1-arg3+arg1 > 0 -> -1-arg3+arg1 > 0}

	Trace

	45[(1+arg2p23 > 0)], 46[(-arg3+arg1 > 0 /\ 1-n+arg3 > 0 /\ -1+n >= 0 /\ 1+arg1 > 0 /\ -arg2 >= 0 /\ arg2 >= 0 /\ -1-arg3+arg1 > 0)]
	
	Blocked

	[{}, {24[T], 25[T]}, {46[T]}]

Step with 26

	Trace

	45[(1+arg2p23 > 0)], 46[(-arg3+arg1 > 0 /\ 1-n+arg3 > 0 /\ -1+n >= 0 /\ 1+arg1 > 0 /\ -arg2 >= 0 /\ arg2 >= 0 /\ -1-arg3+arg1 > 0)], 26[(arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ -arg2 == 0)]
	
	Blocked

	[{}, {24[T], 25[T]}, {24[T], 25[T], 46[T]}, {}]

Step with 32

	Trace

	45[(1+arg2p23 > 0)], 46[(-arg3+arg1 > 0 /\ 1-n+arg3 > 0 /\ -1+n >= 0 /\ 1+arg1 > 0 /\ -arg2 >= 0 /\ arg2 >= 0 /\ -1-arg3+arg1 > 0)], 26[(arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ -arg2 == 0)], 32[(arg2-arg1 > 0 /\ -arg3+arg4 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {24[T], 25[T]}, {24[T], 25[T], 46[T]}, {}, {}]

Covered

	Trace

	45[(1+arg2p23 > 0)], 46[(-arg3+arg1 > 0 /\ 1-n+arg3 > 0 /\ -1+n >= 0 /\ 1+arg1 > 0 /\ -arg2 >= 0 /\ arg2 >= 0 /\ -1-arg3+arg1 > 0)], 26[(arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ -arg2 == 0)]
	
	Blocked

	[{}, {24[T], 25[T]}, {24[T], 25[T], 46[T]}, {32[T]}]

Backtrack

	Trace

	45[(1+arg2p23 > 0)], 46[(-arg3+arg1 > 0 /\ 1-n+arg3 > 0 /\ -1+n >= 0 /\ 1+arg1 > 0 /\ -arg2 >= 0 /\ arg2 >= 0 /\ -1-arg3+arg1 > 0)]
	
	Blocked

	[{}, {24[T], 25[T]}, {24[T], 25[T], 26[T], 46[T]}]

Step with 41

	Trace

	45[(1+arg2p23 > 0)], 46[(-arg3+arg1 > 0 /\ 1-n+arg3 > 0 /\ -1+n >= 0 /\ 1+arg1 > 0 /\ -arg2 >= 0 /\ arg2 >= 0 /\ -1-arg3+arg1 > 0)], 41[(-3+arg1 > 0 /\ -arg3 == 0)]
	
	Blocked

	[{}, {24[T], 25[T]}, {24[T], 25[T], 26[T], 27[T], 40[T], 46[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Acceleration Failed

marked recursive suffix as redundant

Step with 25

	Trace

	45[(1+arg2p23 > 0)], 46[(-arg3+arg1 > 0 /\ 1-n+arg3 > 0 /\ -1+n >= 0 /\ 1+arg1 > 0 /\ -arg2 >= 0 /\ arg2 >= 0 /\ -1-arg3+arg1 > 0)], 41[(-3+arg1 > 0 /\ -arg3 == 0)], 25[(arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {24[T], 25[T]}, {24[T], 25[T], 26[T], 27[T], 40[T], 46[T]}, {24[T], 41[T], 43[T], 44[T], 46[T]}, {}]

Step with 28

	Trace

	45[(1+arg2p23 > 0)], 46[(-arg3+arg1 > 0 /\ 1-n+arg3 > 0 /\ -1+n >= 0 /\ 1+arg1 > 0 /\ -arg2 >= 0 /\ arg2 >= 0 /\ -1-arg3+arg1 > 0)], 41[(-3+arg1 > 0 /\ -arg3 == 0)], 25[(arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ arg2 > 0)], 28[(arg5-arg4 > 0 /\ -arg2+arg1 < 0 /\ -1+arg4 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {24[T], 25[T]}, {24[T], 25[T], 26[T], 27[T], 40[T], 46[T]}, {24[T], 41[T], 43[T], 44[T], 46[T]}, {}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5
  24: f887_0_loop_aux_GT -> f961_0_loop_aux_NE : arg1'=arg3, arg2'=arg1, arg3'=arg2, arg4'=1+arg3, arg5'=-2+arg1, (arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ arg2 < 0), cost: 1
  25: f887_0_loop_aux_GT -> f961_0_loop_aux_NE : arg1'=arg3, arg2'=arg1, arg3'=arg2, arg4'=1+arg3, arg5'=-2+arg1, (arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ arg2 > 0), cost: 1
  26: f887_0_loop_aux_GT -> f962_0_loop_aux_NE : arg1'=arg3, arg2'=arg1, arg3'=-1+arg3, arg4'=-2+arg1, arg5'=arg5p4, (arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ -arg2 == 0), cost: 1
  27: f887_0_loop_aux_GT -> f970_0_loop_aux_NE : arg2'=-1+arg1, arg3'=-2+arg1, arg4'=arg4p5, arg5'=arg5p5, (-arg3+arg1 == 0 /\ arg1 > 0), cost: 1
  40: f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg2'=1, arg3'=1, arg4'=arg4p18, arg5'=arg5p18, (-3+arg1 < 0 /\ -arg3 == 0 /\ arg1 > 0), cost: 1
  41: f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg2'=1, arg3'=1, arg4'=arg4p19, arg5'=arg5p19, (-3+arg1 > 0 /\ -arg3 == 0), cost: 1
  43: f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg1'=2, arg2'=1, arg3'=1, arg4'=arg4p21, arg5'=arg5p21, (-arg3 == 0 /\ 3-arg1 == 0), cost: 1
  44: f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg1'=0, arg2'=0, arg3'=-1, arg4'=arg4p22, arg5'=arg5p22, (-arg3 == 0 /\ -arg1 == 0), cost: 1
  46: f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg2'=0, arg3'=-n+arg3, arg4'=arg4p10, arg5'=arg5p10, (-arg3+arg1 > 0 /\ 1-n+arg3 > 0 /\ -1+n >= 0 /\ 1+arg1 > 0 /\ -arg2 >= 0 /\ arg2 >= 0 /\ -1-arg3+arg1 > 0), cost: 1
  47: f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg3'=arg3+n2, arg4'=arg4p6, arg5'=arg5p6, (-arg3+arg1 > 0 /\ arg3 > 0 /\ 1+arg1 > 0 /\ -1+n2 >= 0 /\ arg2 > 0 /\ -2-arg3-n2+arg1 > 0), cost: 1
  28: f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=arg3, arg3'=arg4, arg4'=arg4p6, arg5'=arg5p6, (arg5-arg4 > 0 /\ -arg2+arg1 < 0 /\ -1+arg4 > 0 /\ arg1 > 0), cost: 1
  29: f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=arg3, arg3'=arg4, arg4'=arg4p7, arg5'=arg5p7, (arg5-arg4 > 0 /\ -arg2+arg1 > 0 /\ -1+arg4 > 0 /\ arg1 > 0), cost: 1
  30: f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=arg3, arg3'=arg4, arg4'=arg4p8, arg5'=arg5p8, (arg5-arg4 < 0 /\ -arg2+arg1 < 0 /\ -1+arg4 > 0 /\ arg1 > 0), cost: 1
  31: f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=arg3, arg3'=arg4, arg4'=arg4p9, arg5'=arg5p9, (arg5-arg4 < 0 /\ -arg2+arg1 > 0 /\ -1+arg4 > 0 /\ arg1 > 0), cost: 1
  36: f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=-1+arg2, arg2'=arg3, arg3'=arg4, arg4'=arg4p14, arg5'=arg5p14, (1-arg2+arg4 <= 0 /\ -arg5+arg4 == 0 /\ arg1 > 0), cost: 1
  32: f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=0, arg4'=arg4p10, arg5'=arg5p10, (arg2-arg1 > 0 /\ -arg3+arg4 > 0 /\ arg1 > 0), cost: 1
  33: f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=0, arg4'=arg4p11, arg5'=arg5p11, (arg2-arg1 < 0 /\ -arg3+arg4 > 0 /\ arg1 > 0), cost: 1
  34: f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=0, arg4'=arg4p12, arg5'=arg5p12, (arg2-arg1 > 0 /\ -arg3+arg4 < 0 /\ arg1 > 0), cost: 1
  35: f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=0, arg4'=arg4p13, arg5'=arg5p13, (arg2-arg1 < 0 /\ -arg3+arg4 < 0 /\ arg1 > 0), cost: 1
  37: f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=-1+arg2, arg2'=0, arg4'=arg4p15, arg5'=arg5p15, (arg3-arg4 == 0 /\ 1+arg3-arg2 <= 0 /\ arg1 > 0), cost: 1
  38: f970_0_loop_aux_NE -> f887_0_loop_aux_GT : arg2'=0, arg3'=arg2, arg4'=arg4p16, arg5'=arg5p16, arg3-arg2 > 0, cost: 1
  39: f970_0_loop_aux_NE -> f887_0_loop_aux_GT : arg2'=0, arg3'=arg2, arg4'=arg4p17, arg5'=arg5p17, arg3-arg2 < 0, cost: 1
  42: f970_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=-1+arg1, arg2'=0, arg3'=arg2, arg4'=arg4p20, arg5'=arg5p20, (1+arg2-arg1 <= 0 /\ arg2-arg1 < 0 /\ -arg3+arg2 == 0), cost: 1
  45: __init -> f887_0_loop_aux_GT : arg1'=20, arg2'=0, arg3'=15+arg2p23, arg4'=arg4p1, arg5'=arg5p1, (1+arg2p23 > 0), cost: 1

	Loop Acceleration

	Original rule:
	f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg3'=1+arg3, arg4'=arg4p6, arg5'=arg5p6, (-3-arg3+arg1 > 0 /\ arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ arg2 > 0), cost: 1
	New rule:
	f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg3'=arg3+n2, arg4'=arg4p6, arg5'=arg5p6, (-arg3+arg1 > 0 /\ arg3 > 0 /\ 1+arg1 > 0 /\ -1+n2 >= 0 /\ arg2 > 0 /\ -2-arg3-n2+arg1 > 0), cost: 1

		-3-arg3+arg1 > 0 [0]: montonic decrease yields -2-arg3-n2+arg1 > 0
		
		-3-arg3+arg1 > 0 [1]: eventual increase yields (-3-arg3+arg1 > 0 /\ 1 <= 0)
		
		-arg3+arg1 > 0 [0]: monotonic increase yields -arg3+arg1 > 0, dependencies: -3-arg3+arg1 > 0
		
		arg3 > 0 [0]: monotonic increase yields arg3 > 0
		
		1+arg1 > 0 [0]: monotonic increase yields 1+arg1 > 0, dependencies: -3-arg3+arg1 > 0 arg3 > 0
		
		arg2 > 0 [0]: monotonic increase yields arg2 > 0
		
		Replacement map: {-3-arg3+arg1 > 0 -> -2-arg3-n2+arg1 > 0, -arg3+arg1 > 0 -> -arg3+arg1 > 0, arg3 > 0 -> arg3 > 0, 1+arg1 > 0 -> 1+arg1 > 0, arg2 > 0 -> arg2 > 0}

	Trace

	45[(1+arg2p23 > 0)], 46[(-arg3+arg1 > 0 /\ 1-n+arg3 > 0 /\ -1+n >= 0 /\ 1+arg1 > 0 /\ -arg2 >= 0 /\ arg2 >= 0 /\ -1-arg3+arg1 > 0)], 41[(-3+arg1 > 0 /\ -arg3 == 0)], 47[(-arg3+arg1 > 0 /\ arg3 > 0 /\ 1+arg1 > 0 /\ -1+n2 >= 0 /\ arg2 > 0 /\ -2-arg3-n2+arg1 > 0)]
	
	Blocked

	[{}, {24[T], 25[T]}, {24[T], 25[T], 26[T], 27[T], 40[T], 46[T]}, {24[T], 41[T], 43[T], 44[T], 46[T]}, {47[T]}]

Acceleration Failed

marked recursive suffix as redundant

Acceleration Failed

marked recursive suffix as redundant

Step with 25

	Trace

	45[(1+arg2p23 > 0)], 46[(-arg3+arg1 > 0 /\ 1-n+arg3 > 0 /\ -1+n >= 0 /\ 1+arg1 > 0 /\ -arg2 >= 0 /\ arg2 >= 0 /\ -1-arg3+arg1 > 0)], 41[(-3+arg1 > 0 /\ -arg3 == 0)], 47[(-arg3+arg1 > 0 /\ arg3 > 0 /\ 1+arg1 > 0 /\ -1+n2 >= 0 /\ arg2 > 0 /\ -2-arg3-n2+arg1 > 0)], 25[(arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {24[T], 25[T]}, {24[T], 25[T], 26[T], 27[T], 40[T], 46[T]}, {24[T], 41[T], 43[T], 44[T], 46[T]}, {24[T], 47[T]}, {}]

Step with 28

	Trace

	45[(1+arg2p23 > 0)], 46[(-arg3+arg1 > 0 /\ 1-n+arg3 > 0 /\ -1+n >= 0 /\ 1+arg1 > 0 /\ -arg2 >= 0 /\ arg2 >= 0 /\ -1-arg3+arg1 > 0)], 41[(-3+arg1 > 0 /\ -arg3 == 0)], 47[(-arg3+arg1 > 0 /\ arg3 > 0 /\ 1+arg1 > 0 /\ -1+n2 >= 0 /\ arg2 > 0 /\ -2-arg3-n2+arg1 > 0)], 25[(arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ arg2 > 0)], 28[(arg5-arg4 > 0 /\ -arg2+arg1 < 0 /\ -1+arg4 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {24[T], 25[T]}, {24[T], 25[T], 26[T], 27[T], 40[T], 46[T]}, {24[T], 41[T], 43[T], 44[T], 46[T]}, {24[T], 47[T]}, {}, {}]

Covered

	Trace

	45[(1+arg2p23 > 0)], 46[(-arg3+arg1 > 0 /\ 1-n+arg3 > 0 /\ -1+n >= 0 /\ 1+arg1 > 0 /\ -arg2 >= 0 /\ arg2 >= 0 /\ -1-arg3+arg1 > 0)], 41[(-3+arg1 > 0 /\ -arg3 == 0)], 47[(-arg3+arg1 > 0 /\ arg3 > 0 /\ 1+arg1 > 0 /\ -1+n2 >= 0 /\ arg2 > 0 /\ -2-arg3-n2+arg1 > 0)], 25[(arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {24[T], 25[T]}, {24[T], 25[T], 26[T], 27[T], 40[T], 46[T]}, {24[T], 41[T], 43[T], 44[T], 46[T]}, {24[T], 47[T]}, {28[T]}]

Step with 36

	Trace

	45[(1+arg2p23 > 0)], 46[(-arg3+arg1 > 0 /\ 1-n+arg3 > 0 /\ -1+n >= 0 /\ 1+arg1 > 0 /\ -arg2 >= 0 /\ arg2 >= 0 /\ -1-arg3+arg1 > 0)], 41[(-3+arg1 > 0 /\ -arg3 == 0)], 47[(-arg3+arg1 > 0 /\ arg3 > 0 /\ 1+arg1 > 0 /\ -1+n2 >= 0 /\ arg2 > 0 /\ -2-arg3-n2+arg1 > 0)], 25[(arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ arg2 > 0)], 36[(1-arg2+arg4 <= 0 /\ -arg5+arg4 == 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {24[T], 25[T]}, {24[T], 25[T], 26[T], 27[T], 40[T], 46[T]}, {24[T], 41[T], 43[T], 44[T], 46[T]}, {24[T], 47[T]}, {28[T], 29[T], 30[T], 31[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Acceleration Failed

marked recursive suffix as redundant

Acceleration Failed

marked recursive suffix as redundant

Acceleration Failed

marked recursive suffix as redundant

Restart

Step with 45

	Trace

	45[(1+arg2p23 > 0)]
	
	Blocked

	[{}, {}]

Step with 26

	Trace

	45[(1+arg2p23 > 0)], 26[(arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ -arg2 == 0)]
	
	Blocked

	[{}, {}, {}]

Step with 32

	Trace

	45[(1+arg2p23 > 0)], 26[(arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ -arg2 == 0)], 32[(arg2-arg1 > 0 /\ -arg3+arg4 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {34[T]}, {}]

Covered

	Trace

	45[(1+arg2p23 > 0)], 26[(arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ -arg2 == 0)]
	
	Blocked

	[{}, {}, {32[T], 34[T]}]

Step with 37

	Trace

	45[(1+arg2p23 > 0)], 26[(arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ -arg2 == 0)], 37[(arg3-arg4 == 0 /\ 1+arg3-arg2 <= 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {32[T], 34[T], 35[T]}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5
  24: f887_0_loop_aux_GT -> f961_0_loop_aux_NE : arg1'=arg3, arg2'=arg1, arg3'=arg2, arg4'=1+arg3, arg5'=-2+arg1, (arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ arg2 < 0), cost: 1
  25: f887_0_loop_aux_GT -> f961_0_loop_aux_NE : arg1'=arg3, arg2'=arg1, arg3'=arg2, arg4'=1+arg3, arg5'=-2+arg1, (arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ arg2 > 0), cost: 1
  26: f887_0_loop_aux_GT -> f962_0_loop_aux_NE : arg1'=arg3, arg2'=arg1, arg3'=-1+arg3, arg4'=-2+arg1, arg5'=arg5p4, (arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ -arg2 == 0), cost: 1
  27: f887_0_loop_aux_GT -> f970_0_loop_aux_NE : arg2'=-1+arg1, arg3'=-2+arg1, arg4'=arg4p5, arg5'=arg5p5, (-arg3+arg1 == 0 /\ arg1 > 0), cost: 1
  40: f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg2'=1, arg3'=1, arg4'=arg4p18, arg5'=arg5p18, (-3+arg1 < 0 /\ -arg3 == 0 /\ arg1 > 0), cost: 1
  41: f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg2'=1, arg3'=1, arg4'=arg4p19, arg5'=arg5p19, (-3+arg1 > 0 /\ -arg3 == 0), cost: 1
  43: f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg1'=2, arg2'=1, arg3'=1, arg4'=arg4p21, arg5'=arg5p21, (-arg3 == 0 /\ 3-arg1 == 0), cost: 1
  44: f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg1'=0, arg2'=0, arg3'=-1, arg4'=arg4p22, arg5'=arg5p22, (-arg3 == 0 /\ -arg1 == 0), cost: 1
  46: f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg2'=0, arg3'=-n+arg3, arg4'=arg4p10, arg5'=arg5p10, (-arg3+arg1 > 0 /\ 1-n+arg3 > 0 /\ -1+n >= 0 /\ 1+arg1 > 0 /\ -arg2 >= 0 /\ arg2 >= 0 /\ -1-arg3+arg1 > 0), cost: 1
  47: f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg3'=arg3+n2, arg4'=arg4p6, arg5'=arg5p6, (-arg3+arg1 > 0 /\ arg3 > 0 /\ 1+arg1 > 0 /\ -1+n2 >= 0 /\ arg2 > 0 /\ -2-arg3-n2+arg1 > 0), cost: 1
  48: f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg1'=arg1-n3, arg2'=0, arg3'=arg3-n3, arg4'=arg4p15, arg5'=arg5p15, (-arg3+arg1 > 0 /\ -arg3+arg1 >= 0 /\ 1+arg1 > 0 /\ 1+arg3-n3 > 0 /\ 1+arg3-arg1 >= 0 /\ -arg2 >= 0 /\ arg2 >= 0 /\ -1-arg3+arg1 >= 0 /\ -1+n3 >= 0), cost: 1
  28: f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=arg3, arg3'=arg4, arg4'=arg4p6, arg5'=arg5p6, (arg5-arg4 > 0 /\ -arg2+arg1 < 0 /\ -1+arg4 > 0 /\ arg1 > 0), cost: 1
  29: f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=arg3, arg3'=arg4, arg4'=arg4p7, arg5'=arg5p7, (arg5-arg4 > 0 /\ -arg2+arg1 > 0 /\ -1+arg4 > 0 /\ arg1 > 0), cost: 1
  30: f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=arg3, arg3'=arg4, arg4'=arg4p8, arg5'=arg5p8, (arg5-arg4 < 0 /\ -arg2+arg1 < 0 /\ -1+arg4 > 0 /\ arg1 > 0), cost: 1
  31: f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=arg3, arg3'=arg4, arg4'=arg4p9, arg5'=arg5p9, (arg5-arg4 < 0 /\ -arg2+arg1 > 0 /\ -1+arg4 > 0 /\ arg1 > 0), cost: 1
  36: f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=-1+arg2, arg2'=arg3, arg3'=arg4, arg4'=arg4p14, arg5'=arg5p14, (1-arg2+arg4 <= 0 /\ -arg5+arg4 == 0 /\ arg1 > 0), cost: 1
  32: f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=0, arg4'=arg4p10, arg5'=arg5p10, (arg2-arg1 > 0 /\ -arg3+arg4 > 0 /\ arg1 > 0), cost: 1
  33: f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=0, arg4'=arg4p11, arg5'=arg5p11, (arg2-arg1 < 0 /\ -arg3+arg4 > 0 /\ arg1 > 0), cost: 1
  34: f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=0, arg4'=arg4p12, arg5'=arg5p12, (arg2-arg1 > 0 /\ -arg3+arg4 < 0 /\ arg1 > 0), cost: 1
  35: f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=0, arg4'=arg4p13, arg5'=arg5p13, (arg2-arg1 < 0 /\ -arg3+arg4 < 0 /\ arg1 > 0), cost: 1
  37: f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=-1+arg2, arg2'=0, arg4'=arg4p15, arg5'=arg5p15, (arg3-arg4 == 0 /\ 1+arg3-arg2 <= 0 /\ arg1 > 0), cost: 1
  38: f970_0_loop_aux_NE -> f887_0_loop_aux_GT : arg2'=0, arg3'=arg2, arg4'=arg4p16, arg5'=arg5p16, arg3-arg2 > 0, cost: 1
  39: f970_0_loop_aux_NE -> f887_0_loop_aux_GT : arg2'=0, arg3'=arg2, arg4'=arg4p17, arg5'=arg5p17, arg3-arg2 < 0, cost: 1
  42: f970_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=-1+arg1, arg2'=0, arg3'=arg2, arg4'=arg4p20, arg5'=arg5p20, (1+arg2-arg1 <= 0 /\ arg2-arg1 < 0 /\ -arg3+arg2 == 0), cost: 1
  45: __init -> f887_0_loop_aux_GT : arg1'=20, arg2'=0, arg3'=15+arg2p23, arg4'=arg4p1, arg5'=arg5p1, (1+arg2p23 > 0), cost: 1

	Loop Acceleration

	Original rule:
	f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg1'=-1+arg1, arg2'=0, arg3'=-1+arg3, arg4'=arg4p15, arg5'=arg5p15, (arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ arg3-arg1 <= 0 /\ 1+arg3-arg1 == 0 /\ -arg2 == 0), cost: 1
	New rule:
	f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg1'=arg1-n3, arg2'=0, arg3'=arg3-n3, arg4'=arg4p15, arg5'=arg5p15, (-arg3+arg1 > 0 /\ -arg3+arg1 >= 0 /\ 1+arg1 > 0 /\ 1+arg3-n3 > 0 /\ 1+arg3-arg1 >= 0 /\ -arg2 >= 0 /\ arg2 >= 0 /\ -1-arg3+arg1 >= 0 /\ -1+n3 >= 0), cost: 1

		-arg3+arg1 > 0 [0]: monotonic increase yields -arg3+arg1 > 0
		
		-arg3+arg1 >= 0 [0]: monotonic increase yields -arg3+arg1 >= 0, dependencies: -arg3+arg1 > 0
		
		arg3 > 0 [0]: montonic decrease yields 1+arg3-n3 > 0
		
		arg3 > 0 [1]: eventual increase yields (1 <= 0 /\ arg3 > 0)
		
		1+arg1 > 0 [0]: monotonic increase yields 1+arg1 > 0, dependencies: -arg3+arg1 > 0 arg3 > 0
		
		1+arg3-arg1 >= 0 [0]: monotonic increase yields 1+arg3-arg1 >= 0
		
		-arg2 >= 0 [0]: monotonic increase yields -arg2 >= 0
		
		arg2 >= 0 [0]: monotonic increase yields arg2 >= 0
		
		-1-arg3+arg1 >= 0 [0]: monotonic increase yields -1-arg3+arg1 >= 0, dependencies: -arg3+arg1 > 0
		
		Replacement map: {-arg3+arg1 > 0 -> -arg3+arg1 > 0, -arg3+arg1 >= 0 -> -arg3+arg1 >= 0, arg3 > 0 -> 1+arg3-n3 > 0, 1+arg1 > 0 -> 1+arg1 > 0, 1+arg3-arg1 >= 0 -> 1+arg3-arg1 >= 0, -arg2 >= 0 -> -arg2 >= 0, arg2 >= 0 -> arg2 >= 0, -1-arg3+arg1 >= 0 -> -1-arg3+arg1 >= 0}

	Trace

	45[(1+arg2p23 > 0)], 48[(-arg3+arg1 > 0 /\ -arg3+arg1 >= 0 /\ 1+arg1 > 0 /\ 1+arg3-n3 > 0 /\ 1+arg3-arg1 >= 0 /\ -arg2 >= 0 /\ arg2 >= 0 /\ -1-arg3+arg1 >= 0 /\ -1+n3 >= 0)]
	
	Blocked

	[{}, {}, {48[T]}]

Step with 26

	Trace

	45[(1+arg2p23 > 0)], 48[(-arg3+arg1 > 0 /\ -arg3+arg1 >= 0 /\ 1+arg1 > 0 /\ 1+arg3-n3 > 0 /\ 1+arg3-arg1 >= 0 /\ -arg2 >= 0 /\ arg2 >= 0 /\ -1-arg3+arg1 >= 0 /\ -1+n3 >= 0)], 26[(arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ -arg2 == 0)]
	
	Blocked

	[{}, {}, {48[T]}, {}]

Step with 37

	Trace

	45[(1+arg2p23 > 0)], 48[(-arg3+arg1 > 0 /\ -arg3+arg1 >= 0 /\ 1+arg1 > 0 /\ 1+arg3-n3 > 0 /\ 1+arg3-arg1 >= 0 /\ -arg2 >= 0 /\ arg2 >= 0 /\ -1-arg3+arg1 >= 0 /\ -1+n3 >= 0)], 26[(arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ -arg2 == 0)], 37[(arg3-arg4 == 0 /\ 1+arg3-arg2 <= 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {48[T]}, {}, {}]

Covered

	Trace

	45[(1+arg2p23 > 0)], 48[(-arg3+arg1 > 0 /\ -arg3+arg1 >= 0 /\ 1+arg1 > 0 /\ 1+arg3-n3 > 0 /\ 1+arg3-arg1 >= 0 /\ -arg2 >= 0 /\ arg2 >= 0 /\ -1-arg3+arg1 >= 0 /\ -1+n3 >= 0)], 26[(arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ -arg2 == 0)]
	
	Blocked

	[{}, {}, {48[T]}, {37[T]}]

Backtrack

	Trace

	45[(1+arg2p23 > 0)], 48[(-arg3+arg1 > 0 /\ -arg3+arg1 >= 0 /\ 1+arg1 > 0 /\ 1+arg3-n3 > 0 /\ 1+arg3-arg1 >= 0 /\ -arg2 >= 0 /\ arg2 >= 0 /\ -1-arg3+arg1 >= 0 /\ -1+n3 >= 0)]
	
	Blocked

	[{}, {}, {26[T], 48[T]}]

Step with 40

	Trace

	45[(1+arg2p23 > 0)], 48[(-arg3+arg1 > 0 /\ -arg3+arg1 >= 0 /\ 1+arg1 > 0 /\ 1+arg3-n3 > 0 /\ 1+arg3-arg1 >= 0 /\ -arg2 >= 0 /\ arg2 >= 0 /\ -1-arg3+arg1 >= 0 /\ -1+n3 >= 0)], 40[(-3+arg1 < 0 /\ -arg3 == 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {24[T], 25[T], 26[T], 41[T], 43[T], 44[T], 48[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Acceleration Failed

marked recursive suffix as redundant

Step with 27

	Trace

	45[(1+arg2p23 > 0)], 48[(-arg3+arg1 > 0 /\ -arg3+arg1 >= 0 /\ 1+arg1 > 0 /\ 1+arg3-n3 > 0 /\ 1+arg3-arg1 >= 0 /\ -arg2 >= 0 /\ arg2 >= 0 /\ -1-arg3+arg1 >= 0 /\ -1+n3 >= 0)], 40[(-3+arg1 < 0 /\ -arg3 == 0 /\ arg1 > 0)], 27[(-arg3+arg1 == 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {24[T], 25[T], 26[T], 41[T], 43[T], 44[T], 48[T]}, {40[T]}, {}]

Step with 39

	Trace

	45[(1+arg2p23 > 0)], 48[(-arg3+arg1 > 0 /\ -arg3+arg1 >= 0 /\ 1+arg1 > 0 /\ 1+arg3-n3 > 0 /\ 1+arg3-arg1 >= 0 /\ -arg2 >= 0 /\ arg2 >= 0 /\ -1-arg3+arg1 >= 0 /\ -1+n3 >= 0)], 40[(-3+arg1 < 0 /\ -arg3 == 0 /\ arg1 > 0)], 27[(-arg3+arg1 == 0 /\ arg1 > 0)], 39[(arg3-arg2 < 0)]
	
	Blocked

	[{}, {}, {24[T], 25[T], 26[T], 41[T], 43[T], 44[T], 48[T]}, {40[T]}, {38[T], 42[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Nonterm

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5
  24: f887_0_loop_aux_GT -> f961_0_loop_aux_NE : arg1'=arg3, arg2'=arg1, arg3'=arg2, arg4'=1+arg3, arg5'=-2+arg1, (arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ arg2 < 0), cost: 1
  25: f887_0_loop_aux_GT -> f961_0_loop_aux_NE : arg1'=arg3, arg2'=arg1, arg3'=arg2, arg4'=1+arg3, arg5'=-2+arg1, (arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ arg2 > 0), cost: 1
  26: f887_0_loop_aux_GT -> f962_0_loop_aux_NE : arg1'=arg3, arg2'=arg1, arg3'=-1+arg3, arg4'=-2+arg1, arg5'=arg5p4, (arg3 > 0 /\ 1+arg1 > 0 /\ arg3-arg1 < 0 /\ -arg2 == 0), cost: 1
  27: f887_0_loop_aux_GT -> f970_0_loop_aux_NE : arg2'=-1+arg1, arg3'=-2+arg1, arg4'=arg4p5, arg5'=arg5p5, (-arg3+arg1 == 0 /\ arg1 > 0), cost: 1
  40: f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg2'=1, arg3'=1, arg4'=arg4p18, arg5'=arg5p18, (-3+arg1 < 0 /\ -arg3 == 0 /\ arg1 > 0), cost: 1
  41: f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg2'=1, arg3'=1, arg4'=arg4p19, arg5'=arg5p19, (-3+arg1 > 0 /\ -arg3 == 0), cost: 1
  43: f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg1'=2, arg2'=1, arg3'=1, arg4'=arg4p21, arg5'=arg5p21, (-arg3 == 0 /\ 3-arg1 == 0), cost: 1
  44: f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg1'=0, arg2'=0, arg3'=-1, arg4'=arg4p22, arg5'=arg5p22, (-arg3 == 0 /\ -arg1 == 0), cost: 1
  46: f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg2'=0, arg3'=-n+arg3, arg4'=arg4p10, arg5'=arg5p10, (-arg3+arg1 > 0 /\ 1-n+arg3 > 0 /\ -1+n >= 0 /\ 1+arg1 > 0 /\ -arg2 >= 0 /\ arg2 >= 0 /\ -1-arg3+arg1 > 0), cost: 1
  47: f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg3'=arg3+n2, arg4'=arg4p6, arg5'=arg5p6, (-arg3+arg1 > 0 /\ arg3 > 0 /\ 1+arg1 > 0 /\ -1+n2 >= 0 /\ arg2 > 0 /\ -2-arg3-n2+arg1 > 0), cost: 1
  48: f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg1'=arg1-n3, arg2'=0, arg3'=arg3-n3, arg4'=arg4p15, arg5'=arg5p15, (-arg3+arg1 > 0 /\ -arg3+arg1 >= 0 /\ 1+arg1 > 0 /\ 1+arg3-n3 > 0 /\ 1+arg3-arg1 >= 0 /\ -arg2 >= 0 /\ arg2 >= 0 /\ -1-arg3+arg1 >= 0 /\ -1+n3 >= 0), cost: 1
  49: f887_0_loop_aux_GT -> LoAT_sink : (arg3 >= 0 /\ -arg3 >= 0 /\ 3-arg1 > 0 /\ -1-arg3+arg1 <= 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0 /\ arg1 > 0), cost: NONTERM
  28: f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=arg3, arg3'=arg4, arg4'=arg4p6, arg5'=arg5p6, (arg5-arg4 > 0 /\ -arg2+arg1 < 0 /\ -1+arg4 > 0 /\ arg1 > 0), cost: 1
  29: f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=arg3, arg3'=arg4, arg4'=arg4p7, arg5'=arg5p7, (arg5-arg4 > 0 /\ -arg2+arg1 > 0 /\ -1+arg4 > 0 /\ arg1 > 0), cost: 1
  30: f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=arg3, arg3'=arg4, arg4'=arg4p8, arg5'=arg5p8, (arg5-arg4 < 0 /\ -arg2+arg1 < 0 /\ -1+arg4 > 0 /\ arg1 > 0), cost: 1
  31: f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=arg3, arg3'=arg4, arg4'=arg4p9, arg5'=arg5p9, (arg5-arg4 < 0 /\ -arg2+arg1 > 0 /\ -1+arg4 > 0 /\ arg1 > 0), cost: 1
  36: f961_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=-1+arg2, arg2'=arg3, arg3'=arg4, arg4'=arg4p14, arg5'=arg5p14, (1-arg2+arg4 <= 0 /\ -arg5+arg4 == 0 /\ arg1 > 0), cost: 1
  32: f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=0, arg4'=arg4p10, arg5'=arg5p10, (arg2-arg1 > 0 /\ -arg3+arg4 > 0 /\ arg1 > 0), cost: 1
  33: f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=0, arg4'=arg4p11, arg5'=arg5p11, (arg2-arg1 < 0 /\ -arg3+arg4 > 0 /\ arg1 > 0), cost: 1
  34: f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=0, arg4'=arg4p12, arg5'=arg5p12, (arg2-arg1 > 0 /\ -arg3+arg4 < 0 /\ arg1 > 0), cost: 1
  35: f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=arg2, arg2'=0, arg4'=arg4p13, arg5'=arg5p13, (arg2-arg1 < 0 /\ -arg3+arg4 < 0 /\ arg1 > 0), cost: 1
  37: f962_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=-1+arg2, arg2'=0, arg4'=arg4p15, arg5'=arg5p15, (arg3-arg4 == 0 /\ 1+arg3-arg2 <= 0 /\ arg1 > 0), cost: 1
  38: f970_0_loop_aux_NE -> f887_0_loop_aux_GT : arg2'=0, arg3'=arg2, arg4'=arg4p16, arg5'=arg5p16, arg3-arg2 > 0, cost: 1
  39: f970_0_loop_aux_NE -> f887_0_loop_aux_GT : arg2'=0, arg3'=arg2, arg4'=arg4p17, arg5'=arg5p17, arg3-arg2 < 0, cost: 1
  42: f970_0_loop_aux_NE -> f887_0_loop_aux_GT : arg1'=-1+arg1, arg2'=0, arg3'=arg2, arg4'=arg4p20, arg5'=arg5p20, (1+arg2-arg1 <= 0 /\ arg2-arg1 < 0 /\ -arg3+arg2 == 0), cost: 1
  45: __init -> f887_0_loop_aux_GT : arg1'=20, arg2'=0, arg3'=15+arg2p23, arg4'=arg4p1, arg5'=arg5p1, (1+arg2p23 > 0), cost: 1

	Certificate of Non-Termination

	Original rule:
	f887_0_loop_aux_GT -> f887_0_loop_aux_GT : arg2'=0, arg3'=-1+arg1, arg4'=arg4p17, arg5'=arg5p17, (-3+arg1 < 0 /\ -arg3 == 0 /\ -1+arg1 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f887_0_loop_aux_GT -> LoAT_sink : (arg3 >= 0 /\ -arg3 >= 0 /\ 3-arg1 > 0 /\ -1-arg3+arg1 <= 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0 /\ arg1 > 0), cost: NONTERM

		arg3 >= 0 [0]: monotonic increase yields arg3 >= 0, dependencies: arg1 > 0
		
		arg3 >= 0 [1]: eventual decrease yields (arg3 >= 0 /\ -1+arg1 >= 0)
		
		arg3 >= 0 [2]: eventual increase yields (arg3 >= 0 /\ 1+arg3-arg1 <= 0)
		
		-arg3 >= 0 [0]: eventual decrease yields (-arg3 >= 0 /\ 1-arg1 >= 0)
		
		-arg3 >= 0 [1]: eventual increase yields (-arg3 >= 0 /\ -1-arg3+arg1 <= 0)
		
		3-arg1 > 0 [0]: monotonic increase yields 3-arg1 > 0
		
		1-arg1 >= 0 [0]: monotonic increase yields 1-arg1 >= 0
		
		-1+arg1 >= 0 [0]: monotonic increase yields -1+arg1 >= 0
		
		arg1 > 0 [0]: monotonic increase yields arg1 > 0, dependencies: -1+arg1 >= 0
		
		Replacement map: {arg3 >= 0 -> arg3 >= 0, -arg3 >= 0 -> (-arg3 >= 0 /\ -1-arg3+arg1 <= 0), 3-arg1 > 0 -> 3-arg1 > 0, 1-arg1 >= 0 -> 1-arg1 >= 0, -1+arg1 >= 0 -> -1+arg1 >= 0, arg1 > 0 -> arg1 > 0}

Step with 49

	Trace

	45[(1+arg2p23 > 0)], 48[(-arg3+arg1 > 0 /\ -arg3+arg1 >= 0 /\ 1+arg1 > 0 /\ 1+arg3-n3 > 0 /\ 1+arg3-arg1 >= 0 /\ -arg2 >= 0 /\ arg2 >= 0 /\ -1-arg3+arg1 >= 0 /\ -1+n3 >= 0)], 49[(arg3 >= 0 /\ -arg3 >= 0 /\ 3-arg1 > 0 /\ -1-arg3+arg1 <= 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {24[T], 25[T], 26[T], 41[T], 43[T], 44[T], 48[T]}, {49[T]}]

Refute

	Counterexample

	[ arg1=20 arg2=0 arg3=19 arg4=0 arg5=0 ] 45 [ arg1=1 arg2=0 arg3=0 arg4=0 arg5=0 ] 48 [ arg1=arg1 arg2=arg2 arg3=arg3 arg4=arg4 arg5=arg5 ] 49
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
