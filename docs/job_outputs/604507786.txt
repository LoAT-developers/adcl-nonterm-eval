unknown

Initial ITS

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5
   0: f1_0_main_Load -> f262_0_take_GE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, arg5'=arg5p1, (arg1p1 > 0 /\ 1+arg5p1 > 0 /\ arg2p1-arg1 <= 0 /\ arg2p1 > 0 /\ -arg3p1 == 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ 1+arg4p1 > 0), cost: 1
   1: f262_0_take_GE -> f262_0_take_GE : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, arg4'=arg4p2, arg5'=arg5p2, (1-arg1p2+arg1 >= 0 /\ arg2p2 > 0 /\ 2+arg4-arg1 <= 0 /\ -arg5+arg3 < 0 /\ arg5-arg5p2 == 0 /\ 1+arg4 > 0 /\ 1+arg4-arg4p2 == 0 /\ arg1p2 > 0 /\ -arg2p2+arg1 >= 0 /\ arg1 > 0 /\ -arg2p2+arg2 >= 0 /\ 1-arg3p2+arg3 == 0 /\ arg2 > 0), cost: 1
   2: __init -> f1_0_main_Load : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, arg4'=arg4p3, arg5'=arg5p3, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5
   1: f262_0_take_GE -> f262_0_take_GE : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, arg4'=arg4p2, arg5'=arg5p2, (1-arg1p2+arg1 >= 0 /\ arg2p2 > 0 /\ 2+arg4-arg1 <= 0 /\ -arg5+arg3 < 0 /\ arg5-arg5p2 == 0 /\ 1+arg4 > 0 /\ 1+arg4-arg4p2 == 0 /\ arg1p2 > 0 /\ -arg2p2+arg1 >= 0 /\ arg1 > 0 /\ -arg2p2+arg2 >= 0 /\ 1-arg3p2+arg3 == 0 /\ arg2 > 0), cost: 1
   3: __init -> f262_0_take_GE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, arg5'=arg5p1, (arg1p1 > 0 /\ 1+arg5p1 > 0 /\ -1+arg2p3 > 0 /\ arg1p3 > 0 /\ arg2p1 > 0 /\ -arg3p1 == 0 /\ -arg1p3+arg2p1 <= 0 /\ 1+arg4p1 > 0), cost: 1

	Eliminating location f1_0_main_Load by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_Load : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, arg4'=arg4p3, arg5'=arg5p3, T, cost: 1
	Second rule:
	f1_0_main_Load -> f262_0_take_GE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, arg5'=arg5p1, (arg1p1 > 0 /\ 1+arg5p1 > 0 /\ arg2p1-arg1 <= 0 /\ arg2p1 > 0 /\ -arg3p1 == 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ 1+arg4p1 > 0), cost: 1
	New rule:
	__init -> f262_0_take_GE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, arg5'=arg5p1, (arg1p1 > 0 /\ 1+arg5p1 > 0 /\ -1+arg2p3 > 0 /\ arg1p3 > 0 /\ arg2p1 > 0 /\ -arg3p1 == 0 /\ -arg1p3+arg2p1 <= 0 /\ 1+arg4p1 > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 2

Simplified Transitions

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5
   4: f262_0_take_GE -> f262_0_take_GE : arg1'=arg1p2, arg2'=arg2p2, arg3'=1+arg3, arg4'=1+arg4, (1-arg1p2+arg1 >= 0 /\ arg2p2 > 0 /\ 2+arg4-arg1 <= 0 /\ -arg5+arg3 < 0 /\ 1+arg4 > 0 /\ arg1p2 > 0 /\ -arg2p2+arg1 >= 0 /\ arg1 > 0 /\ -arg2p2+arg2 >= 0 /\ arg2 > 0), cost: 1
   5: __init -> f262_0_take_GE : arg1'=arg1p1, arg2'=arg2p1, arg3'=0, arg4'=arg4p1, arg5'=arg5p1, (arg1p1 > 0 /\ 1+arg5p1 > 0 /\ arg2p1 > 0 /\ 1+arg4p1 > 0), cost: 1

	Propagated Equalities

	Original rule:
	f262_0_take_GE -> f262_0_take_GE : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, arg4'=arg4p2, arg5'=arg5p2, (1-arg1p2+arg1 >= 0 /\ arg2p2 > 0 /\ 2+arg4-arg1 <= 0 /\ -arg5+arg3 < 0 /\ arg5-arg5p2 == 0 /\ 1+arg4 > 0 /\ 1+arg4-arg4p2 == 0 /\ arg1p2 > 0 /\ -arg2p2+arg1 >= 0 /\ arg1 > 0 /\ -arg2p2+arg2 >= 0 /\ 1-arg3p2+arg3 == 0 /\ arg2 > 0), cost: 1
	New rule:
	f262_0_take_GE -> f262_0_take_GE : arg1'=arg1p2, arg2'=arg2p2, arg3'=1+arg3, arg4'=1+arg4, arg5'=arg5, (0 == 0 /\ 1-arg1p2+arg1 >= 0 /\ arg2p2 > 0 /\ 2+arg4-arg1 <= 0 /\ -arg5+arg3 < 0 /\ 1+arg4 > 0 /\ arg1p2 > 0 /\ -arg2p2+arg1 >= 0 /\ arg1 > 0 /\ -arg2p2+arg2 >= 0 /\ arg2 > 0), cost: 1
	
		propagated equality arg5p2 = arg5
		
		propagated equality arg4p2 = 1+arg4
		
		propagated equality arg3p2 = 1+arg3
		
	Simplified Guard

	Original rule:
	f262_0_take_GE -> f262_0_take_GE : arg1'=arg1p2, arg2'=arg2p2, arg3'=1+arg3, arg4'=1+arg4, arg5'=arg5, (0 == 0 /\ 1-arg1p2+arg1 >= 0 /\ arg2p2 > 0 /\ 2+arg4-arg1 <= 0 /\ -arg5+arg3 < 0 /\ 1+arg4 > 0 /\ arg1p2 > 0 /\ -arg2p2+arg1 >= 0 /\ arg1 > 0 /\ -arg2p2+arg2 >= 0 /\ arg2 > 0), cost: 1
	New rule:
	f262_0_take_GE -> f262_0_take_GE : arg1'=arg1p2, arg2'=arg2p2, arg3'=1+arg3, arg4'=1+arg4, arg5'=arg5, (1-arg1p2+arg1 >= 0 /\ arg2p2 > 0 /\ 2+arg4-arg1 <= 0 /\ -arg5+arg3 < 0 /\ 1+arg4 > 0 /\ arg1p2 > 0 /\ -arg2p2+arg1 >= 0 /\ arg1 > 0 /\ -arg2p2+arg2 >= 0 /\ arg2 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f262_0_take_GE -> f262_0_take_GE : arg1'=arg1p2, arg2'=arg2p2, arg3'=1+arg3, arg4'=1+arg4, arg5'=arg5, (1-arg1p2+arg1 >= 0 /\ arg2p2 > 0 /\ 2+arg4-arg1 <= 0 /\ -arg5+arg3 < 0 /\ 1+arg4 > 0 /\ arg1p2 > 0 /\ -arg2p2+arg1 >= 0 /\ arg1 > 0 /\ -arg2p2+arg2 >= 0 /\ arg2 > 0), cost: 1
	New rule:
	f262_0_take_GE -> f262_0_take_GE : arg1'=arg1p2, arg2'=arg2p2, arg3'=1+arg3, arg4'=1+arg4, (1-arg1p2+arg1 >= 0 /\ arg2p2 > 0 /\ 2+arg4-arg1 <= 0 /\ -arg5+arg3 < 0 /\ 1+arg4 > 0 /\ arg1p2 > 0 /\ -arg2p2+arg1 >= 0 /\ arg1 > 0 /\ -arg2p2+arg2 >= 0 /\ arg2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	__init -> f262_0_take_GE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, arg5'=arg5p1, (arg1p1 > 0 /\ 1+arg5p1 > 0 /\ -1+arg2p3 > 0 /\ arg1p3 > 0 /\ arg2p1 > 0 /\ -arg3p1 == 0 /\ -arg1p3+arg2p1 <= 0 /\ 1+arg4p1 > 0), cost: 1
	New rule:
	__init -> f262_0_take_GE : arg1'=arg1p1, arg2'=arg2p1, arg3'=0, arg4'=arg4p1, arg5'=arg5p1, (0 == 0 /\ arg1p1 > 0 /\ 1+arg5p1 > 0 /\ -1+arg2p3 > 0 /\ arg1p3 > 0 /\ arg2p1 > 0 /\ -arg1p3+arg2p1 <= 0 /\ 1+arg4p1 > 0), cost: 1
	
		propagated equality arg3p1 = 0
		
	Simplified Guard

	Original rule:
	__init -> f262_0_take_GE : arg1'=arg1p1, arg2'=arg2p1, arg3'=0, arg4'=arg4p1, arg5'=arg5p1, (0 == 0 /\ arg1p1 > 0 /\ 1+arg5p1 > 0 /\ -1+arg2p3 > 0 /\ arg1p3 > 0 /\ arg2p1 > 0 /\ -arg1p3+arg2p1 <= 0 /\ 1+arg4p1 > 0), cost: 1
	New rule:
	__init -> f262_0_take_GE : arg1'=arg1p1, arg2'=arg2p1, arg3'=0, arg4'=arg4p1, arg5'=arg5p1, (arg1p1 > 0 /\ 1+arg5p1 > 0 /\ -1+arg2p3 > 0 /\ arg1p3 > 0 /\ arg2p1 > 0 /\ -arg1p3+arg2p1 <= 0 /\ 1+arg4p1 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	__init -> f262_0_take_GE : arg1'=arg1p1, arg2'=arg2p1, arg3'=0, arg4'=arg4p1, arg5'=arg5p1, (arg1p1 > 0 /\ 1+arg5p1 > 0 /\ -1+arg2p3 > 0 /\ arg1p3 > 0 /\ arg2p1 > 0 /\ -arg1p3+arg2p1 <= 0 /\ 1+arg4p1 > 0), cost: 1
	New rule:
	__init -> f262_0_take_GE : arg1'=arg1p1, arg2'=arg2p1, arg3'=0, arg4'=arg4p1, arg5'=arg5p1, (arg1p1 > 0 /\ 1+arg5p1 > 0 /\ arg2p1 > 0 /\ 1+arg4p1 > 0), cost: 1

Step with 5

	Trace

	5[(arg1p1 > 0 /\ 1+arg5p1 > 0 /\ arg2p1 > 0 /\ 1+arg4p1 > 0)]
	
	Blocked

	[{}, {}]

Step with 4

	Trace

	5[(arg1p1 > 0 /\ 1+arg5p1 > 0 /\ arg2p1 > 0 /\ 1+arg4p1 > 0)], 4[(1-arg1p2+arg1 >= 0 /\ arg2p2 > 0 /\ 2+arg4-arg1 <= 0 /\ -arg5+arg3 < 0 /\ 1+arg4 > 0 /\ arg1p2 > 0 /\ -arg2p2+arg1 >= 0 /\ arg1 > 0 /\ -arg2p2+arg2 >= 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5
   4: f262_0_take_GE -> f262_0_take_GE : arg1'=arg1p2, arg2'=arg2p2, arg3'=1+arg3, arg4'=1+arg4, (1-arg1p2+arg1 >= 0 /\ arg2p2 > 0 /\ 2+arg4-arg1 <= 0 /\ -arg5+arg3 < 0 /\ 1+arg4 > 0 /\ arg1p2 > 0 /\ -arg2p2+arg1 >= 0 /\ arg1 > 0 /\ -arg2p2+arg2 >= 0 /\ arg2 > 0), cost: 1
   6: f262_0_take_GE -> f262_0_take_GE : arg1'=arg1p2, arg2'=arg2p2, arg3'=n+arg3, arg4'=arg4+n, (1-arg1p2+arg1 >= 0 /\ arg2p2 > 0 /\ -1-arg4+arg1p2-n >= 0 /\ 1+arg5-n-arg3 > 0 /\ -arg2p2+arg1p2 >= 0 /\ -1+n >= 0 /\ 1+arg4 > 0 /\ arg1p2 > 0 /\ -arg2p2+arg1 >= 0 /\ -arg2p2+arg2 >= 0), cost: 1
   5: __init -> f262_0_take_GE : arg1'=arg1p1, arg2'=arg2p1, arg3'=0, arg4'=arg4p1, arg5'=arg5p1, (arg1p1 > 0 /\ 1+arg5p1 > 0 /\ arg2p1 > 0 /\ 1+arg4p1 > 0), cost: 1

	Loop Acceleration

	Original rule:
	f262_0_take_GE -> f262_0_take_GE : arg1'=arg1p2, arg2'=arg2p2, arg3'=1+arg3, arg4'=1+arg4, (1-arg1p2+arg1 >= 0 /\ arg2p2 > 0 /\ 2+arg4-arg1 <= 0 /\ -arg5+arg3 < 0 /\ 1+arg4 > 0 /\ arg1p2 > 0 /\ -arg2p2+arg1 >= 0 /\ arg1 > 0 /\ -arg2p2+arg2 >= 0 /\ arg2 > 0), cost: 1
	New rule:
	f262_0_take_GE -> f262_0_take_GE : arg1'=arg1p2, arg2'=arg2p2, arg3'=n+arg3, arg4'=arg4+n, (1-arg1p2+arg1 >= 0 /\ arg2p2 > 0 /\ -1-arg4+arg1p2-n >= 0 /\ 1+arg5-n-arg3 > 0 /\ -arg2p2+arg1p2 >= 0 /\ -1+n >= 0 /\ 1+arg4 > 0 /\ arg1p2 > 0 /\ -arg2p2+arg1 >= 0 /\ -arg2p2+arg2 >= 0), cost: 1

		arg5-arg3 > 0 [0]: montonic decrease yields 1+arg5-n-arg3 > 0
		
		arg5-arg3 > 0 [1]: eventual increase yields (arg5-arg3 > 0 /\ 1 <= 0)
		
		1-arg1p2+arg1 >= 0 [0]: monotonic increase yields 1-arg1p2+arg1 >= 0
		
		arg2p2 > 0 [0]: monotonic increase yields arg2p2 > 0
		
		-2-arg4+arg1 >= 0 [0]: montonic decrease yields -1-arg4+arg1p2-n >= 0, dependencies: 1-arg1p2+arg1 >= 0
		
		-2-arg4+arg1 >= 0 [1]: eventual increase yields (1-arg1p2+arg1 < 0 /\ -2-arg4+arg1 >= 0), dependencies: 1-arg1p2+arg1 >= 0
		
		1+arg4 > 0 [0]: monotonic increase yields 1+arg4 > 0
		
		arg1p2 > 0 [0]: monotonic increase yields arg1p2 > 0
		
		-arg2p2+arg1 >= 0 [0]: eventual decrease yields (-arg2p2+arg1p2 >= 0 /\ -arg2p2+arg1 >= 0)
		
		-arg2p2+arg1 >= 0 [1]: eventual increase yields (-arg1p2+arg1 <= 0 /\ -arg2p2+arg1 >= 0)
		
		arg1 > 0 [0]: montonic decrease yields arg1p2 > 0, dependencies: -2-arg4+arg1 >= 0 1+arg4 > 0
		
		arg1 > 0 [1]: eventual increase yields (-arg1p2+arg1 <= 0 /\ arg1 > 0)
		
		-arg2p2+arg2 >= 0 [0]: monotonic increase yields -arg2p2+arg2 >= 0
		
		arg2 > 0 [0]: montonic decrease yields arg2p2 > 0, dependencies: -arg2p2+arg2 >= 0
		
		arg2 > 0 [1]: eventual increase yields (-arg2p2+arg2 <= 0 /\ arg2 > 0)
		
		Replacement map: {arg5-arg3 > 0 -> 1+arg5-n-arg3 > 0, 1-arg1p2+arg1 >= 0 -> 1-arg1p2+arg1 >= 0, arg2p2 > 0 -> arg2p2 > 0, -2-arg4+arg1 >= 0 -> -1-arg4+arg1p2-n >= 0, 1+arg4 > 0 -> 1+arg4 > 0, arg1p2 > 0 -> arg1p2 > 0, -arg2p2+arg1 >= 0 -> (-arg2p2+arg1p2 >= 0 /\ -arg2p2+arg1 >= 0), arg1 > 0 -> arg1p2 > 0, -arg2p2+arg2 >= 0 -> -arg2p2+arg2 >= 0, arg2 > 0 -> arg2p2 > 0}

	Trace

	5[(arg1p1 > 0 /\ 1+arg5p1 > 0 /\ arg2p1 > 0 /\ 1+arg4p1 > 0)], 6[(1-arg1p2+arg1 >= 0 /\ arg2p2 > 0 /\ -1-arg4+arg1p2-n >= 0 /\ 1+arg5-n-arg3 > 0 /\ -arg2p2+arg1p2 >= 0 /\ -1+n >= 0 /\ 1+arg4 > 0 /\ arg1p2 > 0 /\ -arg2p2+arg1 >= 0 /\ -arg2p2+arg2 >= 0)]
	
	Blocked

	[{}, {}, {4[T], 6[T]}]

Backtrack

	Trace

	5[(arg1p1 > 0 /\ 1+arg5p1 > 0 /\ arg2p1 > 0 /\ 1+arg4p1 > 0)]
	
	Blocked

	[{}, {6[T]}]

Step with 4

	Trace

	5[(arg1p1 > 0 /\ 1+arg5p1 > 0 /\ arg2p1 > 0 /\ 1+arg4p1 > 0)], 4[(1-arg1p2+arg1 >= 0 /\ arg2p2 > 0 /\ 2+arg4-arg1 <= 0 /\ -arg5+arg3 < 0 /\ 1+arg4 > 0 /\ arg1p2 > 0 /\ -arg2p2+arg1 >= 0 /\ arg1 > 0 /\ -arg2p2+arg2 >= 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {6[T]}, {}]

Covered

	Trace

	5[(arg1p1 > 0 /\ 1+arg5p1 > 0 /\ arg2p1 > 0 /\ 1+arg4p1 > 0)]
	
	Blocked

	[{}, {4[T], 6[T]}]

Backtrack

	Trace

	Blocked

	[{5[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
