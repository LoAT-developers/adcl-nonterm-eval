NO

Initial ITS

Start location: __init
Program variables: arg1 arg2
   0: f1_0_main_ConstantStackPush -> f37_0_loop_InvokeMethod : arg1'=arg1p1, arg2'=arg2p1, (1+arg2 > 0 /\ arg1 > 0), cost: 1
   1: f37_0_loop_InvokeMethod -> f37_0_loop_InvokeMethod : arg1'=arg1p2, arg2'=arg2p2, T, cost: 1
   2: __init -> f1_0_main_ConstantStackPush : arg1'=arg1p3, arg2'=arg2p3, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2
   1: f37_0_loop_InvokeMethod -> f37_0_loop_InvokeMethod : arg1'=arg1p2, arg2'=arg2p2, T, cost: 1
   3: __init -> f37_0_loop_InvokeMethod : arg1'=arg1p1, arg2'=arg2p1, (1+arg2p3 > 0 /\ arg1p3 > 0), cost: 1

	Eliminating location f1_0_main_ConstantStackPush by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_ConstantStackPush : arg1'=arg1p3, arg2'=arg2p3, T, cost: 1
	Second rule:
	f1_0_main_ConstantStackPush -> f37_0_loop_InvokeMethod : arg1'=arg1p1, arg2'=arg2p1, (1+arg2 > 0 /\ arg1 > 0), cost: 1
	New rule:
	__init -> f37_0_loop_InvokeMethod : arg1'=arg1p1, arg2'=arg2p1, (1+arg2p3 > 0 /\ arg1p3 > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 2

Simplified Transitions

Start location: __init
Program variables: arg1 arg2
   1: f37_0_loop_InvokeMethod -> f37_0_loop_InvokeMethod : arg1'=arg1p2, arg2'=arg2p2, T, cost: 1
   4: __init -> f37_0_loop_InvokeMethod : arg1'=arg1p1, arg2'=arg2p1, T, cost: 1

	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	__init -> f37_0_loop_InvokeMethod : arg1'=arg1p1, arg2'=arg2p1, (1+arg2p3 > 0 /\ arg1p3 > 0), cost: 1
	New rule:
	__init -> f37_0_loop_InvokeMethod : arg1'=arg1p1, arg2'=arg2p1, T, cost: 1

Step with 4

	Trace

	4[T]
	
	Blocked

	[{}, {}]

Step with 1

	Trace

	4[T], 1[T]
	
	Blocked

	[{}, {}, {}]

Nonterm

Start location: __init
Program variables: arg1 arg2
   1: f37_0_loop_InvokeMethod -> f37_0_loop_InvokeMethod : arg1'=arg1p2, arg2'=arg2p2, T, cost: 1
   5: f37_0_loop_InvokeMethod -> LoAT_sink : -1+n >= 0, cost: NONTERM
   4: __init -> f37_0_loop_InvokeMethod : arg1'=arg1p1, arg2'=arg2p1, T, cost: 1

	Certificate of Non-Termination

	Original rule:
	f37_0_loop_InvokeMethod -> f37_0_loop_InvokeMethod : arg1'=arg1p2, arg2'=arg2p2, T, cost: 1
	New rule:
	f37_0_loop_InvokeMethod -> LoAT_sink : -1+n >= 0, cost: NONTERM

		Replacement map: {}

Step with 5

	Trace

	4[T], 5[-1+n >= 0]
	
	Blocked

	[{}, {}, {5[T]}]

Refute

	Counterexample

	[ arg1=0 arg2=0 ] 4 [ arg1=arg1 arg2=arg2 ] 5
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
