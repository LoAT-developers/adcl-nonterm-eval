YES

Solver Timeout: 4
Global Timeout: 300
No parsing errors!
Init Location: 0
Transitions:
<l0, l4, true>
<l1, l2, (arg2 > ~(1)) /\ (undef1 > 1) /\ (undef3 < 2) /\ (undef3 > ~(1)) /\ (arg1 > 0), par{arg1 -> undef1, arg2 -> undef2}>
<l1, l2, (arg2 > ~(1)) /\ (undef4 > 1) /\ (undef6 > 2) /\ (arg1 > 0), par{arg1 -> undef4, arg2 -> undef5}>
<l2, l3, ((arg1 - (2 * undef9)) = 0) /\ (arg1 > undef10) /\ (arg1 > 0), par{arg2 -> undef8}>
<l3, l2, ((arg1 - (2 * undef13)) = 0) /\ (arg1 > 0) /\ (arg1 > undef11) /\ ((arg1 - (2 * undef13)) >= 0) /\ ((arg1 - (2 * undef13)) < 2) /\ ((arg1 - (2 * undef11)) < 2) /\ ((arg1 - (2 * undef11)) >= 0), par{arg1 -> undef11, arg2 -> undef12}>
<l2, l3, ((arg1 - (2 * undef16)) = 1) /\ (arg1 > undef17) /\ (arg1 > 0), par{arg2 -> undef15}>
<l3, l2, ((arg1 - (2 * undef20)) = 1) /\ (arg1 > 0) /\ (arg1 > undef18) /\ ((arg1 - (2 * undef20)) >= 0) /\ ((arg1 - (2 * undef20)) < 2) /\ ((arg1 - (2 * undef18)) < 2) /\ ((arg1 - (2 * undef18)) >= 0), par{arg1 -> undef18, arg2 -> undef19}>
<l4, l1, true, par{arg1 -> undef21, arg2 -> undef22}>

Fresh variables:
undef1, undef2, undef3, undef4, undef5, undef6, undef8, undef9, undef10, undef11, undef12, undef13, undef15, undef16, undef17, undef18, undef19, undef20, undef21, undef22, 

Undef variables:
undef1, undef2, undef3, undef4, undef5, undef6, undef8, undef9, undef10, undef11, undef12, undef13, undef15, undef16, undef17, undef18, undef19, undef20, undef21, undef22, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l2, (undef22 > ~(1)) /\ (undef1 > 1) /\ (undef3 < 2) /\ (undef3 > ~(1)) /\ (undef21 > 0), par{arg1 -> undef1}>
<l0, l2, (undef22 > ~(1)) /\ (undef4 > 1) /\ (undef6 > 2) /\ (undef21 > 0), par{arg1 -> undef4}>
<l2, l2, ((arg1 - (2 * undef9)) = 0) /\ (arg1 > undef10) /\ (arg1 > 0) /\ ((arg1 - (2 * undef13)) = 0) /\ (arg1 > 0) /\ (arg1 > undef11) /\ ((arg1 - (2 * undef13)) >= 0) /\ ((arg1 - (2 * undef13)) < 2) /\ ((arg1 - (2 * undef11)) < 2) /\ ((arg1 - (2 * undef11)) >= 0), par{arg1 -> undef11}>
<l2, l2, ((arg1 - (2 * undef16)) = 1) /\ (arg1 > undef17) /\ (arg1 > 0) /\ ((arg1 - (2 * undef20)) = 1) /\ (arg1 > 0) /\ (arg1 > undef18) /\ ((arg1 - (2 * undef20)) >= 0) /\ ((arg1 - (2 * undef20)) < 2) /\ ((arg1 - (2 * undef18)) < 2) /\ ((arg1 - (2 * undef18)) >= 0), par{arg1 -> undef18}>

Fresh variables:
undef1, undef2, undef3, undef4, undef5, undef6, undef8, undef9, undef10, undef11, undef12, undef13, undef15, undef16, undef17, undef18, undef19, undef20, undef21, undef22, 

Undef variables:
undef1, undef2, undef3, undef4, undef5, undef6, undef8, undef9, undef10, undef11, undef12, undef13, undef15, undef16, undef17, undef18, undef19, undef20, undef21, undef22, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l2, l2, 1 <= arg1 /\ 1 + undef10 <= arg1 /\ 1 + undef11 <= arg1 /\ arg1 <= 1 + 2*undef11 /\ 2*undef11 <= arg1 /\ arg1 = 2*undef9 /\ arg1 = 2*undef13, {arg1 -> undef11, rest remain the same}>
<l2, l2, 1 <= arg1 /\ 1 + undef17 <= arg1 /\ 1 + undef18 <= arg1 /\ arg1 <= 1 + 2*undef18 /\ 2*undef18 <= arg1 /\ arg1 = 1 + 2*undef16 /\ arg1 = 1 + 2*undef20, {arg1 -> undef18, rest remain the same}>
Variables:
arg1

Precedence: 
Graph 0

Graph 1
<l0, l2, 1 <= undef21 /\ undef3 <= 1 /\ 2 <= undef1 /\ 0 <= undef3 /\ 0 <= undef22, {arg1 -> undef1, rest remain the same}>
<l0, l2, 1 <= undef21 /\ 2 <= undef4 /\ 0 <= undef22 /\ 3 <= undef6, {arg1 -> undef4, rest remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 2 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.004493

Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.002115s
[33mRanking function: [36m-1 + arg1[0m
New Graphs: 
[32mProgram Terminates[0m
