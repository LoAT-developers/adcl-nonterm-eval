YES

Solver Timeout: 4
Global Timeout: 300
Maximum number of concurrent processes: 900
*******************************************************************************************
*********************** UNPROCESSED TRANSITION SYSTEMS PER FUNCTION ***********************
*******************************************************************************************


List of LLVMGraphs + assumeNodes + staticAssertNodes [1] :

+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++
+                                                                  +
Init Location: 0
Transitions:
<l0, l1, true, seq{main__func_return_ -> 0, main_x -> Â¿functionCall(__VERIFIER_nondet_int), main_y -> Â¿functionCall(__VERIFIER_nondet_int), main_res -> 0}>
<l1, l2, (main_x < main_y)>
<l1, l4, not((main_x < main_y))>
<l2, l3, true, seq{main_min -> main_x}>
<l3, l6, true>
<l4, l5, true, seq{main_min -> main_y}>
<l5, l6, true>
<l6, l7, true>
<l7, l15, not((main_min = main_y))>
<l7, l8, (main_min = main_y)>
<l8, l9, true, seq{main_y -> (main_y + 1), main_res -> (main_res + 1)}>
<l9, l10, (main_x < main_y)>
<l9, l12, not((main_x < main_y))>
<l10, l11, true, seq{main_min -> main_x}>
<l11, l14, true>
<l12, l13, true, seq{main_min -> main_y}>
<l13, l14, true>
<l14, l7, true>
<l15, l16, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

+ Assume Nodes [0]: ++++++++++++++++++++++++++++++++++++++++++++++++
       
+ Static Assert Nodes [0]: +++++++++++++++++++++++++++++++++++++++++
       
+ After preprocess (paralelization): ++++++++++++++++++++++++++++++

Init Location: 0
Transitions:
<l0, l17, true, seq{main__func_return_ -> 0}>
<l17, l18, true, seq{varCall_1 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l18, l19, true, seq{main_x -> varCall_1}>
<l19, l20, true, seq{varCall_2 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l20, l1, true, seq{main_y -> varCall_2, main_res -> 0}>
<l1, l2, (main_x < main_y)>
<l1, l4, not((main_x < main_y))>
<l2, l3, true, seq{main_min -> main_x}>
<l3, l6, true>
<l4, l5, true, seq{main_min -> main_y}>
<l5, l6, true>
<l6, l7, true>
<l7, l8, (main_min = main_y)>
<l7, l15, not((main_min = main_y))>
<l8, l9, true, seq{main_y -> (main_y + 1), main_res -> (main_res + 1)}>
<l9, l10, (main_x < main_y)>
<l9, l12, not((main_x < main_y))>
<l10, l11, true, seq{main_min -> main_x}>
<l11, l14, true>
<l12, l13, true, seq{main_min -> main_y}>
<l13, l14, true>
<l14, l7, true>
<l15, l16, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:
16, 
Accepting locations:

Asserts:

+                                                                  +
+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++


Function Return and Parameters Information [2 functions]:
    function name: __VERIFIER_nondet_int [1 return + 0 parameters]        demangled: __VERIFIER_nondet_int
        __VERIFIER_nondet_int__func_return_      [function result] : int
    function name: main [1 return + 0 parameters]        demangled: main
        main__func_return_      [function result] : int


AST Ident Scanner Information [6 idents]:
__VERIFIER_nondet_int | function | [integer, ()] | <line: 3, col: 1> | <line: 10, col: 9> <line: 11, col: 9>
main | function | [integer, ()] | <line: 5, col: 1>
x | local variable | integer | <line: 6, col: 5> | <line: 10, col: 5> <line: 14, col: 9> <line: 14, col: 24> <line: 20, col: 13> <line: 20, col: 28>
y | local variable | integer | <line: 7, col: 5> | <line: 11, col: 5> <line: 14, col: 13> <line: 15, col: 18> <line: 17, col: 19> <line: 18, col: 9> <line: 18, col: 13> <line: 20, col: 17> <line: 21, col: 22>
res | local variable | integer | <line: 8, col: 5> | <line: 12, col: 5> <line: 19, col: 9> <line: 19, col: 15>
min | local variable | integer | <line: 9, col: 5> | <line: 14, col: 18> <line: 15, col: 12> <line: 17, col: 12> <line: 20, col: 22> <line: 21, col: 16>

Main function: main
Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l7, (main_x = undef3) /\ (main_y = undef4) /\ (main_res = 0) /\ (undef3 < undef4), par{main_min -> undef3}>
<l0, l7, (main_x = undef3) /\ (main_y = undef4) /\ (main_res = 0) /\ not((undef3 < undef4)), par{main_min -> undef4}>
<l7, l7, (main_min = main_y) /\ (main_x < (main_y + 1)), par{main_y -> (main_y + 1), main_res -> (main_res + 1), main_min -> main_x}>
<l7, l7, (main_min = main_y) /\ not((main_x < (main_y + 1))), par{main_y -> (main_y + 1), main_res -> (main_res + 1), main_min -> (main_y + 1)}>
<l7, l16, (main_min < main_y)>
<l7, l16, (main_min > main_y)>

Fresh variables:
undef3, undef4, 

Undef variables:
undef3, undef4, 

Abstraction variables:

Exit nodes:
16, 
Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l7, l7, main_x <= main_y /\ main_y = main_min, {main_y -> 1 + main_y, main_res -> 1 + main_res, main_min -> main_x, rest remain the same}>
<l7, l7, 1 + main_y <= main_x /\ main_y = main_min, {main_y -> 1 + main_y, main_res -> 1 + main_res, main_min -> 1 + main_y, rest remain the same}>
Variables:
main_x, main_y, main_res, main_min

Graph 2:
Transitions:
Variables:

Precedence: 
Graph 0

Graph 1
<l0, l7, 1 + undef3 <= undef4 /\ main_x = undef3 /\ main_y = undef4 /\ main_res = 0, {main_min -> undef3, rest remain the same}>
<l0, l7, undef4 <= undef3 /\ main_x = undef3 /\ main_y = undef4 /\ main_res = 0, {main_min -> undef4, rest remain the same}>

Graph 2
<l7, l16, 1 + main_min <= main_y, {all remain the same}>
<l7, l16, 1 + main_y <= main_min, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 7 , 1 )
( 16 , 2 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.004124

Checking conditional termination of SCC {l7}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.001116s
[33mRanking function: [36m-1 + 3*main_x - 3*main_y[0m
New Graphs: 
Transitions:
<l7, l7, main_x <= main_y /\ main_y = main_min, {main_y -> 1 + main_y, main_res -> 1 + main_res, main_min -> main_x, rest remain the same}>
Variables:
main_x, main_y, main_res, main_min
Checking conditional termination of SCC {l7}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000520s
[33mRanking function: [36m-main_y + main_min[0m
New Graphs: 
Proving termination of subgraph 2
Analyzing SCC {l16}...
No cycles found.

[32mProgram Terminates[0m
