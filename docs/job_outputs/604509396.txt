YES

Solver Timeout: 4
Global Timeout: 300
No parsing errors!
Init Location: 0
Transitions:
<l0, l4, true>
<l1, l2, (undef2 > ~(1)) /\ (arg2 > ~(1)) /\ (undef1 > ~(1)) /\ (arg1 > 0), par{arg1 -> undef1, arg2 -> undef2}>
<l2, l3, (arg2 > 0) /\ (arg2 > arg1) /\ (arg1 > 0)>
<l2, l3, (arg2 > 0) /\ (arg2 < arg1) /\ (arg1 > 0)>
<l2, l2, (arg2 > 0) /\ (0 = arg1), par{arg1 -> arg2, arg2 -> 0}>
<l2, l2, (arg1 > 0) /\ (arg1 = arg2), par{arg2 -> 0}>
<l3, l3, (arg2 < arg1) /\ (arg1 > 0) /\ (arg2 > 0), par{arg1 -> (arg1 - arg2)}>
<l3, l2, (arg2 > arg1), par{arg1 -> arg2, arg2 -> arg1}>
<l4, l1, true, par{arg1 -> undef15, arg2 -> undef16}>

Fresh variables:
undef1, undef2, undef15, undef16, 

Undef variables:
undef1, undef2, undef15, undef16, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l2, (arg1 = undef1) /\ (arg2 = undef2) /\ (undef2 > ~(1)) /\ (undef16 > ~(1)) /\ (undef1 > ~(1)) /\ (undef15 > 0)>
<l2, l3, (arg2 > 0) /\ (arg2 > arg1) /\ (arg1 > 0)>
<l2, l3, (arg2 > 0) /\ (arg2 < arg1) /\ (arg1 > 0)>
<l2, l2, (arg2 > 0) /\ (0 = arg1), par{arg1 -> arg2, arg2 -> 0}>
<l2, l2, (arg1 > 0) /\ (arg1 = arg2), par{arg2 -> 0}>
<l3, l3, (arg2 < arg1) /\ (arg1 > 0) /\ (arg2 > 0), par{arg1 -> (arg1 - arg2)}>
<l3, l2, (arg2 > arg1), par{arg1 -> arg2, arg2 -> arg1}>

Fresh variables:
undef1, undef2, undef15, undef16, 

Undef variables:
undef1, undef2, undef15, undef16, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l2, l3, 1 + arg1 <= arg2 /\ 1 <= arg1 /\ 1 <= arg2, {all remain the same}>
<l2, l3, 1 <= arg1 /\ 1 + arg2 <= arg1 /\ 1 <= arg2, {all remain the same}>
<l2, l2, 1 <= arg2 /\ arg1 = 0, {arg1 -> arg2, arg2 -> 0, rest remain the same}>
<l2, l2, 1 <= arg1 /\ arg1 = arg2, {arg2 -> 0, rest remain the same}>
<l3, l3, 1 <= arg1 /\ 1 + arg2 <= arg1 /\ 1 <= arg2, {arg1 -> arg1 - arg2, rest remain the same}>
<l3, l2, 1 + arg1 <= arg2, {arg1 -> arg2, arg2 -> arg1, rest remain the same}>
Variables:
arg1, arg2

Precedence: 
Graph 0

Graph 1
<l0, l2, 1 <= undef15 /\ 0 <= undef1 /\ 0 <= undef2 /\ 0 <= undef16 /\ arg1 = undef1 /\ arg2 = undef2, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 2 , 1 )
( 3 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.011613

Checking conditional termination of SCC {l2, l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.001175s
[33mRanking function: [36m-4 + 2*arg1 + 2*arg2[0m
It's unfeasible after collapsing. Removing transition: 
<l2, l2, 1 <= 0, {arg1 -> arg2, arg2 -> arg1, rest remain the same}>
New Graphs: 
Transitions:
<l2, l2, 1 + arg1 <= arg2 /\ 1 <= arg1 /\ 1 <= arg2, {arg1 -> arg2, arg2 -> arg1, rest remain the same}>
<l2, l2, 1 <= arg2 /\ arg1 = 0, {arg1 -> arg2, arg2 -> 0, rest remain the same}>
Variables:
arg1, arg2
Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000574s
[33mRanking function: [36m(~(7) / 2) + (1 / 2)*arg1 + (3 / 2)*arg2[0m
New Graphs: 
Transitions:
<l2, l2, 1 <= arg2 /\ arg1 = 0, {arg1 -> arg2, arg2 -> 0, rest remain the same}>
Variables:
arg1, arg2
Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000323s
[33mRanking function: [36m-arg1[0m
New Graphs: 
[32mProgram Terminates[0m
