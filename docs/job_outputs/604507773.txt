unknown

Initial ITS

Start location: __init
Program variables: arg1 arg2
   0: f1_0_main_Load -> f226_0_log_LE : arg1'=arg1p1, arg2'=arg2p1, (arg1 > 0 /\ 1+arg2 > 0 /\ 1+arg1p1 > 0), cost: 1
   1: f226_0_log_LE -> f286_0_half_LE : arg1'=arg1p2, arg2'=arg2p2, (-arg2p2+arg1 == 0 /\ -1+arg1 > 0 /\ -arg1p2 == 0), cost: 1
   2: f286_0_half_LE -> f226_0_log_LE : arg1'=arg1p3, arg2'=arg2p3, (arg1-arg1p3 == 0 /\ -2+arg2 < 0), cost: 1
   3: f286_0_half_LE -> f286_0_half_LE : arg1'=arg1p4, arg2'=arg2p4, (-1+arg2 > 0 /\ -2-arg2p4+arg2 == 0 /\ 1-arg1p4+arg1 == 0), cost: 1
   4: __init -> f1_0_main_Load : arg1'=arg1p5, arg2'=arg2p5, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2
   1: f226_0_log_LE -> f286_0_half_LE : arg1'=arg1p2, arg2'=arg2p2, (-arg2p2+arg1 == 0 /\ -1+arg1 > 0 /\ -arg1p2 == 0), cost: 1
   2: f286_0_half_LE -> f226_0_log_LE : arg1'=arg1p3, arg2'=arg2p3, (arg1-arg1p3 == 0 /\ -2+arg2 < 0), cost: 1
   3: f286_0_half_LE -> f286_0_half_LE : arg1'=arg1p4, arg2'=arg2p4, (-1+arg2 > 0 /\ -2-arg2p4+arg2 == 0 /\ 1-arg1p4+arg1 == 0), cost: 1
   5: __init -> f226_0_log_LE : arg1'=arg1p1, arg2'=arg2p1, (1+arg1p1 > 0 /\ arg1p5 > 0 /\ 1+arg2p5 > 0), cost: 1

	Eliminating location f1_0_main_Load by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_Load : arg1'=arg1p5, arg2'=arg2p5, T, cost: 1
	Second rule:
	f1_0_main_Load -> f226_0_log_LE : arg1'=arg1p1, arg2'=arg2p1, (arg1 > 0 /\ 1+arg2 > 0 /\ 1+arg1p1 > 0), cost: 1
	New rule:
	__init -> f226_0_log_LE : arg1'=arg1p1, arg2'=arg2p1, (1+arg1p1 > 0 /\ arg1p5 > 0 /\ 1+arg2p5 > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 4

Simplified Transitions

Start location: __init
Program variables: arg1 arg2
   6: f226_0_log_LE -> f286_0_half_LE : arg1'=0, arg2'=arg1, -1+arg1 > 0, cost: 1
   7: f286_0_half_LE -> f226_0_log_LE : arg2'=arg2p3, -2+arg2 < 0, cost: 1
   8: f286_0_half_LE -> f286_0_half_LE : arg1'=1+arg1, arg2'=-2+arg2, -1+arg2 > 0, cost: 1
   9: __init -> f226_0_log_LE : arg1'=arg1p1, arg2'=arg2p1, (1+arg1p1 > 0), cost: 1

	Propagated Equalities

	Original rule:
	f226_0_log_LE -> f286_0_half_LE : arg1'=arg1p2, arg2'=arg2p2, (-arg2p2+arg1 == 0 /\ -1+arg1 > 0 /\ -arg1p2 == 0), cost: 1
	New rule:
	f226_0_log_LE -> f286_0_half_LE : arg1'=0, arg2'=arg1, (0 == 0 /\ -1+arg1 > 0), cost: 1
	
		propagated equality arg2p2 = arg1
		
		propagated equality arg1p2 = 0
		
	Simplified Guard

	Original rule:
	f226_0_log_LE -> f286_0_half_LE : arg1'=0, arg2'=arg1, (0 == 0 /\ -1+arg1 > 0), cost: 1
	New rule:
	f226_0_log_LE -> f286_0_half_LE : arg1'=0, arg2'=arg1, -1+arg1 > 0, cost: 1
	
	Propagated Equalities

	Original rule:
	f286_0_half_LE -> f226_0_log_LE : arg1'=arg1p3, arg2'=arg2p3, (arg1-arg1p3 == 0 /\ -2+arg2 < 0), cost: 1
	New rule:
	f286_0_half_LE -> f226_0_log_LE : arg1'=arg1, arg2'=arg2p3, (0 == 0 /\ -2+arg2 < 0), cost: 1
	
		propagated equality arg1p3 = arg1
		
	Simplified Guard

	Original rule:
	f286_0_half_LE -> f226_0_log_LE : arg1'=arg1, arg2'=arg2p3, (0 == 0 /\ -2+arg2 < 0), cost: 1
	New rule:
	f286_0_half_LE -> f226_0_log_LE : arg1'=arg1, arg2'=arg2p3, -2+arg2 < 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	f286_0_half_LE -> f226_0_log_LE : arg1'=arg1, arg2'=arg2p3, -2+arg2 < 0, cost: 1
	New rule:
	f286_0_half_LE -> f226_0_log_LE : arg2'=arg2p3, -2+arg2 < 0, cost: 1
	
	Propagated Equalities

	Original rule:
	f286_0_half_LE -> f286_0_half_LE : arg1'=arg1p4, arg2'=arg2p4, (-1+arg2 > 0 /\ -2-arg2p4+arg2 == 0 /\ 1-arg1p4+arg1 == 0), cost: 1
	New rule:
	f286_0_half_LE -> f286_0_half_LE : arg1'=1+arg1, arg2'=-2+arg2, (0 == 0 /\ -1+arg2 > 0), cost: 1
	
		propagated equality arg2p4 = -2+arg2
		
		propagated equality arg1p4 = 1+arg1
		
	Simplified Guard

	Original rule:
	f286_0_half_LE -> f286_0_half_LE : arg1'=1+arg1, arg2'=-2+arg2, (0 == 0 /\ -1+arg2 > 0), cost: 1
	New rule:
	f286_0_half_LE -> f286_0_half_LE : arg1'=1+arg1, arg2'=-2+arg2, -1+arg2 > 0, cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	__init -> f226_0_log_LE : arg1'=arg1p1, arg2'=arg2p1, (1+arg1p1 > 0 /\ arg1p5 > 0 /\ 1+arg2p5 > 0), cost: 1
	New rule:
	__init -> f226_0_log_LE : arg1'=arg1p1, arg2'=arg2p1, (1+arg1p1 > 0), cost: 1

Step with 9

	Trace

	9[(1+arg1p1 > 0)]
	
	Blocked

	[{}, {}]

Step with 6

	Trace

	9[(1+arg1p1 > 0)], 6[(-1+arg1 > 0)]
	
	Blocked

	[{}, {}, {}]

Step with 8

	Trace

	9[(1+arg1p1 > 0)], 6[(-1+arg1 > 0)], 8[(-1+arg2 > 0)]
	
	Blocked

	[{}, {}, {7[T]}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2
   6: f226_0_log_LE -> f286_0_half_LE : arg1'=0, arg2'=arg1, -1+arg1 > 0, cost: 1
   7: f286_0_half_LE -> f226_0_log_LE : arg2'=arg2p3, -2+arg2 < 0, cost: 1
   8: f286_0_half_LE -> f286_0_half_LE : arg1'=1+arg1, arg2'=-2+arg2, -1+arg2 > 0, cost: 1
  10: f286_0_half_LE -> f286_0_half_LE : arg1'=arg1+n, arg2'=-2*n+arg2, (1-2*n+arg2 > 0 /\ -1+n >= 0), cost: 1
   9: __init -> f226_0_log_LE : arg1'=arg1p1, arg2'=arg2p1, (1+arg1p1 > 0), cost: 1

	Loop Acceleration

	Original rule:
	f286_0_half_LE -> f286_0_half_LE : arg1'=1+arg1, arg2'=-2+arg2, (-1+arg2 > 0), cost: 1
	New rule:
	f286_0_half_LE -> f286_0_half_LE : arg1'=arg1+n, arg2'=-2*n+arg2, (1-2*n+arg2 > 0 /\ -1+n >= 0), cost: 1

		-1+arg2 > 0 [0]: montonic decrease yields 1-2*n+arg2 > 0
		
		-1+arg2 > 0 [1]: eventual increase yields (-1+arg2 > 0 /\ 2 <= 0)
		
		Replacement map: {-1+arg2 > 0 -> 1-2*n+arg2 > 0}

	Trace

	9[(1+arg1p1 > 0)], 6[(-1+arg1 > 0)], 10[(1-2*n+arg2 > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {}, {7[T]}, {8[T], 10[T]}]

Step with 7

	Trace

	9[(1+arg1p1 > 0)], 6[(-1+arg1 > 0)], 10[(1-2*n+arg2 > 0 /\ -1+n >= 0)], 7[(-2+arg2 < 0)]
	
	Blocked

	[{}, {}, {7[T]}, {8[T], 10[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 6

	Trace

	9[(1+arg1p1 > 0)], 6[(-1+arg1 > 0)], 10[(1-2*n+arg2 > 0 /\ -1+n >= 0)], 7[(-2+arg2 < 0)], 6[(-1+arg1 > 0)]
	
	Blocked

	[{}, {}, {7[T]}, {8[T], 10[T]}, {}, {}]

Acceleration Failed

marked recursive suffix as redundant

Accelerate

Start location: __init
Program variables: arg1 arg2
   6: f226_0_log_LE -> f286_0_half_LE : arg1'=0, arg2'=arg1, -1+arg1 > 0, cost: 1
   7: f286_0_half_LE -> f226_0_log_LE : arg2'=arg2p3, -2+arg2 < 0, cost: 1
   8: f286_0_half_LE -> f286_0_half_LE : arg1'=1+arg1, arg2'=-2+arg2, -1+arg2 > 0, cost: 1
  10: f286_0_half_LE -> f286_0_half_LE : arg1'=arg1+n, arg2'=-2*n+arg2, (1-2*n+arg2 > 0 /\ -1+n >= 0), cost: 1
  11: f286_0_half_LE -> f286_0_half_LE : arg1'=0, arg2'=n11, (-1+n11 > 0 /\ -1+n11 >= 0 /\ -1+n1 >= 0 /\ 1-2*n1+arg2 > 0 /\ -2+arg1-2*n11+n1 < 0 /\ 1+arg1-2*n11+n1 > 0 /\ -2-2*n1+arg2 < 0 /\ -1+arg1+n1 > 0), cost: 1
   9: __init -> f226_0_log_LE : arg1'=arg1p1, arg2'=arg2p1, (1+arg1p1 > 0), cost: 1

	unrolling

	Original rule:
	f286_0_half_LE -> f286_0_half_LE : arg1'=0, arg2'=arg1+n1, (-1+n1 >= 0 /\ 1-2*n1+arg2 > 0 /\ -2-2*n1+arg2 < 0 /\ -1+arg1+n1 > 0), cost: 1
	New rule:
	f286_0_half_LE -> f286_0_half_LE : arg1'=0, arg2'=n11, (-1+n11 > 0 /\ -1+n11 >= 0 /\ -1+n1 >= 0 /\ 1-2*n1+arg2 > 0 /\ -2+arg1-2*n11+n1 < 0 /\ 1+arg1-2*n11+n1 > 0 /\ -2-2*n1+arg2 < 0 /\ -1+arg1+n1 > 0), cost: 1
	rule cannot be iterated more than once

	Trace

	9[(1+arg1p1 > 0)], 6[(-1+arg1 > 0)], 11[(-1+n11 > 0 /\ -1+n11 >= 0 /\ -1+n1 >= 0 /\ 1-2*n1+arg2 > 0 /\ -2+arg1-2*n11+n1 < 0 /\ 1+arg1-2*n11+n1 > 0 /\ -2-2*n1+arg2 < 0 /\ -1+arg1+n1 > 0)]
	
	Blocked

	[{}, {}, {7[T]}, {11[T]}]

Step with 8

	Trace

	9[(1+arg1p1 > 0)], 6[(-1+arg1 > 0)], 11[(-1+n11 > 0 /\ -1+n11 >= 0 /\ -1+n1 >= 0 /\ 1-2*n1+arg2 > 0 /\ -2+arg1-2*n11+n1 < 0 /\ 1+arg1-2*n11+n1 > 0 /\ -2-2*n1+arg2 < 0 /\ -1+arg1+n1 > 0)], 8[(-1+arg2 > 0)]
	
	Blocked

	[{}, {}, {7[T]}, {7[T], 11[T]}, {}]

Covered

	Trace

	9[(1+arg1p1 > 0)], 6[(-1+arg1 > 0)], 11[(-1+n11 > 0 /\ -1+n11 >= 0 /\ -1+n1 >= 0 /\ 1-2*n1+arg2 > 0 /\ -2+arg1-2*n11+n1 < 0 /\ 1+arg1-2*n11+n1 > 0 /\ -2-2*n1+arg2 < 0 /\ -1+arg1+n1 > 0)]
	
	Blocked

	[{}, {}, {7[T]}, {7[T], 8[T], 11[T]}]

Step with 10

	Trace

	9[(1+arg1p1 > 0)], 6[(-1+arg1 > 0)], 11[(-1+n11 > 0 /\ -1+n11 >= 0 /\ -1+n1 >= 0 /\ 1-2*n1+arg2 > 0 /\ -2+arg1-2*n11+n1 < 0 /\ 1+arg1-2*n11+n1 > 0 /\ -2-2*n1+arg2 < 0 /\ -1+arg1+n1 > 0)], 10[(1-2*n+arg2 > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {}, {7[T]}, {7[T], 8[T], 11[T]}, {10[T]}]

Acceleration Failed

marked recursive suffix as redundant

Step with 7

	Trace

	9[(1+arg1p1 > 0)], 6[(-1+arg1 > 0)], 11[(-1+n11 > 0 /\ -1+n11 >= 0 /\ -1+n1 >= 0 /\ 1-2*n1+arg2 > 0 /\ -2+arg1-2*n11+n1 < 0 /\ 1+arg1-2*n11+n1 > 0 /\ -2-2*n1+arg2 < 0 /\ -1+arg1+n1 > 0)], 10[(1-2*n+arg2 > 0 /\ -1+n >= 0)], 7[(-2+arg2 < 0)]
	
	Blocked

	[{}, {}, {7[T]}, {7[T], 8[T], 11[T]}, {10[T], 11[T]}, {}]

Covered

	Trace

	9[(1+arg1p1 > 0)], 6[(-1+arg1 > 0)], 11[(-1+n11 > 0 /\ -1+n11 >= 0 /\ -1+n1 >= 0 /\ 1-2*n1+arg2 > 0 /\ -2+arg1-2*n11+n1 < 0 /\ 1+arg1-2*n11+n1 > 0 /\ -2-2*n1+arg2 < 0 /\ -1+arg1+n1 > 0)], 10[(1-2*n+arg2 > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {}, {7[T]}, {7[T], 8[T], 11[T]}, {7[T], 10[T], 11[T]}]

Step with 8

	Trace

	9[(1+arg1p1 > 0)], 6[(-1+arg1 > 0)], 11[(-1+n11 > 0 /\ -1+n11 >= 0 /\ -1+n1 >= 0 /\ 1-2*n1+arg2 > 0 /\ -2+arg1-2*n11+n1 < 0 /\ 1+arg1-2*n11+n1 > 0 /\ -2-2*n1+arg2 < 0 /\ -1+arg1+n1 > 0)], 10[(1-2*n+arg2 > 0 /\ -1+n >= 0)], 8[(-1+arg2 > 0)]
	
	Blocked

	[{}, {}, {7[T]}, {7[T], 8[T], 11[T]}, {7[T], 10[T], 11[T]}, {}]

Covered

	Trace

	9[(1+arg1p1 > 0)], 6[(-1+arg1 > 0)], 11[(-1+n11 > 0 /\ -1+n11 >= 0 /\ -1+n1 >= 0 /\ 1-2*n1+arg2 > 0 /\ -2+arg1-2*n11+n1 < 0 /\ 1+arg1-2*n11+n1 > 0 /\ -2-2*n1+arg2 < 0 /\ -1+arg1+n1 > 0)], 10[(1-2*n+arg2 > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {}, {7[T]}, {7[T], 8[T], 11[T]}, {7[T], 8[T], 10[T], 11[T]}]

Backtrack

	Trace

	9[(1+arg1p1 > 0)], 6[(-1+arg1 > 0)], 11[(-1+n11 > 0 /\ -1+n11 >= 0 /\ -1+n1 >= 0 /\ 1-2*n1+arg2 > 0 /\ -2+arg1-2*n11+n1 < 0 /\ 1+arg1-2*n11+n1 > 0 /\ -2-2*n1+arg2 < 0 /\ -1+arg1+n1 > 0)]
	
	Blocked

	[{}, {}, {7[T]}, {7[T], 8[T], 10[T], 11[T]}]

Backtrack

	Trace

	9[(1+arg1p1 > 0)], 6[(-1+arg1 > 0)]
	
	Blocked

	[{}, {}, {7[T], 11[T]}]

Step with 8

	Trace

	9[(1+arg1p1 > 0)], 6[(-1+arg1 > 0)], 8[(-1+arg2 > 0)]
	
	Blocked

	[{}, {}, {7[T], 11[T]}, {}]

Covered

	Trace

	9[(1+arg1p1 > 0)], 6[(-1+arg1 > 0)]
	
	Blocked

	[{}, {}, {7[T], 8[T], 11[T]}]

Step with 10

	Trace

	9[(1+arg1p1 > 0)], 6[(-1+arg1 > 0)], 10[(1-2*n+arg2 > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {}, {7[T], 8[T], 11[T]}, {10[T]}]

Step with 11

	Trace

	9[(1+arg1p1 > 0)], 6[(-1+arg1 > 0)], 10[(1-2*n+arg2 > 0 /\ -1+n >= 0)], 11[(-1+n11 > 0 /\ -1+n11 >= 0 /\ -1+n1 >= 0 /\ 1-2*n1+arg2 > 0 /\ -2+arg1-2*n11+n1 < 0 /\ 1+arg1-2*n11+n1 > 0 /\ -2-2*n1+arg2 < 0 /\ -1+arg1+n1 > 0)]
	
	Blocked

	[{}, {}, {7[T], 8[T], 11[T]}, {10[T]}, {11[T]}]

Covered

	Trace

	9[(1+arg1p1 > 0)], 6[(-1+arg1 > 0)], 10[(1-2*n+arg2 > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {}, {7[T], 8[T], 11[T]}, {10[T], 11[T]}]

Step with 7

	Trace

	9[(1+arg1p1 > 0)], 6[(-1+arg1 > 0)], 10[(1-2*n+arg2 > 0 /\ -1+n >= 0)], 7[(-2+arg2 < 0)]
	
	Blocked

	[{}, {}, {7[T], 8[T], 11[T]}, {10[T], 11[T]}, {}]

Step with 6

	Trace

	9[(1+arg1p1 > 0)], 6[(-1+arg1 > 0)], 10[(1-2*n+arg2 > 0 /\ -1+n >= 0)], 7[(-2+arg2 < 0)], 6[(-1+arg1 > 0)]
	
	Blocked

	[{}, {}, {7[T], 8[T], 11[T]}, {10[T], 11[T]}, {}, {}]

Covered

	Trace

	9[(1+arg1p1 > 0)], 6[(-1+arg1 > 0)], 10[(1-2*n+arg2 > 0 /\ -1+n >= 0)], 7[(-2+arg2 < 0)]
	
	Blocked

	[{}, {}, {7[T], 8[T], 11[T]}, {10[T], 11[T]}, {6[T]}]

Backtrack

	Trace

	9[(1+arg1p1 > 0)], 6[(-1+arg1 > 0)], 10[(1-2*n+arg2 > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {}, {7[T], 8[T], 11[T]}, {7[T], 10[T], 11[T]}]

Step with 8

	Trace

	9[(1+arg1p1 > 0)], 6[(-1+arg1 > 0)], 10[(1-2*n+arg2 > 0 /\ -1+n >= 0)], 8[(-1+arg2 > 0)]
	
	Blocked

	[{}, {}, {7[T], 8[T], 11[T]}, {7[T], 10[T], 11[T]}, {}]

Covered

	Trace

	9[(1+arg1p1 > 0)], 6[(-1+arg1 > 0)], 10[(1-2*n+arg2 > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {}, {7[T], 8[T], 11[T]}, {7[T], 8[T], 10[T], 11[T]}]

Backtrack

	Trace

	9[(1+arg1p1 > 0)], 6[(-1+arg1 > 0)]
	
	Blocked

	[{}, {}, {7[T], 8[T], 10[T], 11[T]}]

Backtrack

	Trace

	9[(1+arg1p1 > 0)]
	
	Blocked

	[{}, {6[T]}]

Backtrack

	Trace

	Blocked

	[{9[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
