YES

Solver Timeout: 4
Global Timeout: 300
No parsing errors!
Init Location: 0
Transitions:
<l0, l4, true>
<l1, l2, (arg2 > ~(1)) /\ (undef1 > ~(1)) /\ (arg1 > 0), par{arg1 -> undef1, arg2 -> undef2}>
<l2, l3, ((arg1 - (2 * undef5)) = 0) /\ (arg1 > 0), par{arg2 -> undef4}>
<l3, l2, (arg1 > 0) /\ ((arg1 - (2 * undef8)) = 0) /\ ((arg1 - (2 * undef8)) < 2) /\ ((arg1 - (2 * undef8)) >= 0), par{arg1 -> (arg1 - 1), arg2 -> undef7}>
<l4, l1, true, par{arg1 -> undef9, arg2 -> undef10}>

Fresh variables:
undef1, undef2, undef4, undef5, undef7, undef8, undef9, undef10, 

Undef variables:
undef1, undef2, undef4, undef5, undef7, undef8, undef9, undef10, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l2, (arg1 = undef1) /\ (undef10 > ~(1)) /\ (undef1 > ~(1)) /\ (undef9 > 0)>
<l2, l2, ((arg1 - (2 * undef5)) = 0) /\ (arg1 > 0) /\ (arg1 > 0) /\ ((arg1 - (2 * undef8)) = 0) /\ ((arg1 - (2 * undef8)) < 2) /\ ((arg1 - (2 * undef8)) >= 0), par{arg1 -> (arg1 - 1)}>

Fresh variables:
undef1, undef2, undef4, undef5, undef7, undef8, undef9, undef10, 

Undef variables:
undef1, undef2, undef4, undef5, undef7, undef8, undef9, undef10, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l2, l2, 1 <= arg1 /\ arg1 = 2*undef5 /\ arg1 = 2*undef8, {arg1 -> -1 + arg1, rest remain the same}>
Variables:
arg1

Precedence: 
Graph 0

Graph 1
<l0, l2, 1 <= undef9 /\ 0 <= undef1 /\ 0 <= undef10 /\ arg1 = undef1, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 2 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.001674

Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000668s
[33mRanking function: [36m-1 + arg1[0m
New Graphs: 
[32mProgram Terminates[0m
