NO

Initial ITS

Start location: l6
Program variables: retp^0 retpp^0 rho^0 rhop^0 x^0 xp^0
   0: l0 -> l1 : retp^0'=retp^post1, retpp^0'=retpp^post1, rho^0'=rho^post1, rhop^0'=rhop^post1, x^0'=x^post1, xp^0'=xp^post1, (-rho^post1+rho^0 == 0 /\ -retpp^post1+retpp^0 == 0 /\ 1-rhop^0 <= 0 /\ -1-xp^0+xp^post1 == 0 /\ -x^post1+x^0 == 0 /\ retp^0-retp^post1 == 0 /\ rhop^0-rhop^post1 == 0), cost: 1
   1: l0 -> l1 : retp^0'=retp^post2, retpp^0'=retpp^post2, rho^0'=rho^post2, rhop^0'=rhop^post2, x^0'=x^post2, xp^0'=xp^post2, (-rhop^post2+rhop^0 == 0 /\ 1+xp^post2-xp^0 == 0 /\ retp^0-retp^post2 == 0 /\ retpp^0-retpp^post2 == 0 /\ -rho^post2+rho^0 == 0 /\ x^0-x^post2 == 0 /\ rhop^0 <= 0), cost: 1
   5: l1 -> l2 : retp^0'=retp^post6, retpp^0'=retpp^post6, rho^0'=rho^post6, rhop^0'=rhop^post6, x^0'=x^post6, xp^0'=xp^post6, (rhop^0-rhop^post6 == 0 /\ retpp^post6 == 0 /\ -rho^post6+rho^0 == 0 /\ xp^0-xp^post6 == 0 /\ -x^post6+x^0 == 0 /\ -1+xp^0 <= 0 /\ retp^0-retp^post6 == 0), cost: 1
   6: l1 -> l2 : retp^0'=retp^post7, retpp^0'=retpp^post7, rho^0'=rho^post7, rhop^0'=rhop^post7, x^0'=x^post7, xp^0'=xp^post7, (-x^post7+x^0 == 0 /\ -1+retpp^post7 == 0 /\ rhop^0-rhop^post7 == 0 /\ -rho^post7+rho^0 == 0 /\ xp^0-xp^post7 == 0 /\ retp^0-retp^post7 == 0 /\ 2-xp^0 <= 0), cost: 1
   2: l2 -> l3 : retp^0'=retp^post3, retpp^0'=retpp^post3, rho^0'=rho^post3, rhop^0'=rhop^post3, x^0'=x^post3, xp^0'=xp^post3, (-rho^post3+rho^0 == 0 /\ retpp^0-retpp^post3 == 0 /\ -x^post3+x^0 == 0 /\ retpp^0 <= 0 /\ retp^post3 == 0 /\ xp^0-xp^post3 == 0 /\ -rhop^post3+rhop^0 == 0), cost: 1
   3: l2 -> l3 : retp^0'=retp^post4, retpp^0'=retpp^post4, rho^0'=rho^post4, rhop^0'=rhop^post4, x^0'=x^post4, xp^0'=xp^post4, (-x^post4+x^0 == 0 /\ rho^0-rho^post4 == 0 /\ -1+retp^post4 == 0 /\ retpp^0-retpp^post4 == 0 /\ -rhop^post4+rhop^0 == 0 /\ xp^0-xp^post4 == 0), cost: 1
   4: l2 -> l0 : retp^0'=retp^post5, retpp^0'=retpp^post5, rho^0'=rho^post5, rhop^0'=rhop^post5, x^0'=x^post5, xp^0'=xp^post5, (0 == 0 /\ xp^0-xp^post5 == 0 /\ 1-rhop^post5 <= 0 /\ -rho^post5+rho^0 == 0 /\ retpp^0-retpp^post5 == 0 /\ -retp^post5+retp^0 == 0 /\ -x^post5+x^0 == 0), cost: 1
   8: l3 -> l5 : retp^0'=retp^post9, retpp^0'=retpp^post9, rho^0'=rho^post9, rhop^0'=rhop^post9, x^0'=x^post9, xp^0'=xp^post9, (rhop^0-rhop^post9 == 0 /\ retpp^0-retpp^post9 == 0 /\ xp^0-xp^post9 == 0 /\ -x^post9+x^0 == 0 /\ retp^0 <= 0 /\ -rho^post9+rho^0 == 0 /\ retp^0-retp^post9 == 0), cost: 1
   7: l4 -> l1 : retp^0'=retp^post8, retpp^0'=retpp^post8, rho^0'=rho^post8, rhop^0'=rhop^post8, x^0'=x^post8, xp^0'=xp^post8, (-retpp^post8+retpp^0 == 0 /\ -rho^post8+rho^0 == 0 /\ rhop^post8-rho^0 == 0 /\ retp^0-retp^post8 == 0 /\ -x^post8+xp^post8 == 0 /\ -2+x^post8 == 0), cost: 1
   9: l6 -> l4 : retp^0'=retp^post10, retpp^0'=retpp^post10, rho^0'=rho^post10, rhop^0'=rhop^post10, x^0'=x^post10, xp^0'=xp^post10, (-rho^post10+rho^0 == 0 /\ -x^post10+x^0 == 0 /\ retp^0-retp^post10 == 0 /\ rhop^0-rhop^post10 == 0 /\ -retpp^post10+retpp^0 == 0 /\ xp^0-xp^post10 == 0), cost: 1

Chained Linear Paths

Start location: l6
Program variables: retp^0 retpp^0 rho^0 rhop^0 x^0 xp^0
   0: l0 -> l1 : retp^0'=retp^post1, retpp^0'=retpp^post1, rho^0'=rho^post1, rhop^0'=rhop^post1, x^0'=x^post1, xp^0'=xp^post1, (-rho^post1+rho^0 == 0 /\ -retpp^post1+retpp^0 == 0 /\ 1-rhop^0 <= 0 /\ -1-xp^0+xp^post1 == 0 /\ -x^post1+x^0 == 0 /\ retp^0-retp^post1 == 0 /\ rhop^0-rhop^post1 == 0), cost: 1
   1: l0 -> l1 : retp^0'=retp^post2, retpp^0'=retpp^post2, rho^0'=rho^post2, rhop^0'=rhop^post2, x^0'=x^post2, xp^0'=xp^post2, (-rhop^post2+rhop^0 == 0 /\ 1+xp^post2-xp^0 == 0 /\ retp^0-retp^post2 == 0 /\ retpp^0-retpp^post2 == 0 /\ -rho^post2+rho^0 == 0 /\ x^0-x^post2 == 0 /\ rhop^0 <= 0), cost: 1
   5: l1 -> l2 : retp^0'=retp^post6, retpp^0'=retpp^post6, rho^0'=rho^post6, rhop^0'=rhop^post6, x^0'=x^post6, xp^0'=xp^post6, (rhop^0-rhop^post6 == 0 /\ retpp^post6 == 0 /\ -rho^post6+rho^0 == 0 /\ xp^0-xp^post6 == 0 /\ -x^post6+x^0 == 0 /\ -1+xp^0 <= 0 /\ retp^0-retp^post6 == 0), cost: 1
   6: l1 -> l2 : retp^0'=retp^post7, retpp^0'=retpp^post7, rho^0'=rho^post7, rhop^0'=rhop^post7, x^0'=x^post7, xp^0'=xp^post7, (-x^post7+x^0 == 0 /\ -1+retpp^post7 == 0 /\ rhop^0-rhop^post7 == 0 /\ -rho^post7+rho^0 == 0 /\ xp^0-xp^post7 == 0 /\ retp^0-retp^post7 == 0 /\ 2-xp^0 <= 0), cost: 1
   2: l2 -> l3 : retp^0'=retp^post3, retpp^0'=retpp^post3, rho^0'=rho^post3, rhop^0'=rhop^post3, x^0'=x^post3, xp^0'=xp^post3, (-rho^post3+rho^0 == 0 /\ retpp^0-retpp^post3 == 0 /\ -x^post3+x^0 == 0 /\ retpp^0 <= 0 /\ retp^post3 == 0 /\ xp^0-xp^post3 == 0 /\ -rhop^post3+rhop^0 == 0), cost: 1
   3: l2 -> l3 : retp^0'=retp^post4, retpp^0'=retpp^post4, rho^0'=rho^post4, rhop^0'=rhop^post4, x^0'=x^post4, xp^0'=xp^post4, (-x^post4+x^0 == 0 /\ rho^0-rho^post4 == 0 /\ -1+retp^post4 == 0 /\ retpp^0-retpp^post4 == 0 /\ -rhop^post4+rhop^0 == 0 /\ xp^0-xp^post4 == 0), cost: 1
   4: l2 -> l0 : retp^0'=retp^post5, retpp^0'=retpp^post5, rho^0'=rho^post5, rhop^0'=rhop^post5, x^0'=x^post5, xp^0'=xp^post5, (0 == 0 /\ xp^0-xp^post5 == 0 /\ 1-rhop^post5 <= 0 /\ -rho^post5+rho^0 == 0 /\ retpp^0-retpp^post5 == 0 /\ -retp^post5+retp^0 == 0 /\ -x^post5+x^0 == 0), cost: 1
   8: l3 -> l5 : retp^0'=retp^post9, retpp^0'=retpp^post9, rho^0'=rho^post9, rhop^0'=rhop^post9, x^0'=x^post9, xp^0'=xp^post9, (rhop^0-rhop^post9 == 0 /\ retpp^0-retpp^post9 == 0 /\ xp^0-xp^post9 == 0 /\ -x^post9+x^0 == 0 /\ retp^0 <= 0 /\ -rho^post9+rho^0 == 0 /\ retp^0-retp^post9 == 0), cost: 1
  10: l6 -> l1 : retp^0'=retp^post8, retpp^0'=retpp^post8, rho^0'=rho^post8, rhop^0'=rhop^post8, x^0'=x^post8, xp^0'=xp^post8, (-retpp^post8+retpp^post10 == 0 /\ -rho^post10+rho^0 == 0 /\ -rho^post8+rho^post10 == 0 /\ -x^post8+xp^post8 == 0 /\ -rho^post10+rhop^post8 == 0 /\ -x^post10+x^0 == 0 /\ -retp^post8+retp^post10 == 0 /\ retp^0-retp^post10 == 0 /\ rhop^0-rhop^post10 == 0 /\ -retpp^post10+retpp^0 == 0 /\ xp^0-xp^post10 == 0 /\ -2+x^post8 == 0), cost: 1

	Eliminating location l4 by chaining:

	Applied chaining

	First rule:
	l6 -> l4 : retp^0'=retp^post10, retpp^0'=retpp^post10, rho^0'=rho^post10, rhop^0'=rhop^post10, x^0'=x^post10, xp^0'=xp^post10, (-rho^post10+rho^0 == 0 /\ -x^post10+x^0 == 0 /\ retp^0-retp^post10 == 0 /\ rhop^0-rhop^post10 == 0 /\ -retpp^post10+retpp^0 == 0 /\ xp^0-xp^post10 == 0), cost: 1
	Second rule:
	l4 -> l1 : retp^0'=retp^post8, retpp^0'=retpp^post8, rho^0'=rho^post8, rhop^0'=rhop^post8, x^0'=x^post8, xp^0'=xp^post8, (-retpp^post8+retpp^0 == 0 /\ -rho^post8+rho^0 == 0 /\ rhop^post8-rho^0 == 0 /\ retp^0-retp^post8 == 0 /\ -x^post8+xp^post8 == 0 /\ -2+x^post8 == 0), cost: 1
	New rule:
	l6 -> l1 : retp^0'=retp^post8, retpp^0'=retpp^post8, rho^0'=rho^post8, rhop^0'=rhop^post8, x^0'=x^post8, xp^0'=xp^post8, (-retpp^post8+retpp^post10 == 0 /\ -rho^post10+rho^0 == 0 /\ -rho^post8+rho^post10 == 0 /\ -x^post8+xp^post8 == 0 /\ -rho^post10+rhop^post8 == 0 /\ -x^post10+x^0 == 0 /\ -retp^post8+retp^post10 == 0 /\ retp^0-retp^post10 == 0 /\ rhop^0-rhop^post10 == 0 /\ -retpp^post10+retpp^0 == 0 /\ xp^0-xp^post10 == 0 /\ -2+x^post8 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 7 9

Simplified Transitions

Start location: l6
Program variables: retp^0 retpp^0 rho^0 rhop^0 x^0 xp^0
  11: l0 -> l1 : xp^0'=1+xp^0, 1-rhop^0 <= 0, cost: 1
  12: l0 -> l1 : xp^0'=-1+xp^0, rhop^0 <= 0, cost: 1
  16: l1 -> l2 : retpp^0'=0, -1+xp^0 <= 0, cost: 1
  17: l1 -> l2 : retpp^0'=1, 2-xp^0 <= 0, cost: 1
  13: l2 -> l3 : retp^0'=0, retpp^0 <= 0, cost: 1
  14: l2 -> l3 : retp^0'=1, T, cost: 1
  15: l2 -> l0 : rhop^0'=rhop^post5, 1-rhop^post5 <= 0, cost: 1
  18: l3 -> l5 : retp^0 <= 0, cost: 1
  19: l6 -> l1 : rhop^0'=rho^0, x^0'=2, xp^0'=2, T, cost: 1

	Propagated Equalities

	Original rule:
	l0 -> l1 : retp^0'=retp^post1, retpp^0'=retpp^post1, rho^0'=rho^post1, rhop^0'=rhop^post1, x^0'=x^post1, xp^0'=xp^post1, (-rho^post1+rho^0 == 0 /\ -retpp^post1+retpp^0 == 0 /\ 1-rhop^0 <= 0 /\ -1-xp^0+xp^post1 == 0 /\ -x^post1+x^0 == 0 /\ retp^0-retp^post1 == 0 /\ rhop^0-rhop^post1 == 0), cost: 1
	New rule:
	l0 -> l1 : retp^0'=retp^0, retpp^0'=retpp^0, rho^0'=rho^0, rhop^0'=rhop^0, x^0'=x^0, xp^0'=1+xp^0, (0 == 0 /\ 1-rhop^0 <= 0), cost: 1
	
		propagated equality rho^post1 = rho^0
		
		propagated equality retpp^post1 = retpp^0
		
		propagated equality xp^post1 = 1+xp^0
		
		propagated equality x^post1 = x^0
		
		propagated equality retp^post1 = retp^0
		
		propagated equality rhop^post1 = rhop^0
		
	Simplified Guard

	Original rule:
	l0 -> l1 : retp^0'=retp^0, retpp^0'=retpp^0, rho^0'=rho^0, rhop^0'=rhop^0, x^0'=x^0, xp^0'=1+xp^0, (0 == 0 /\ 1-rhop^0 <= 0), cost: 1
	New rule:
	l0 -> l1 : retp^0'=retp^0, retpp^0'=retpp^0, rho^0'=rho^0, rhop^0'=rhop^0, x^0'=x^0, xp^0'=1+xp^0, 1-rhop^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l1 : retp^0'=retp^0, retpp^0'=retpp^0, rho^0'=rho^0, rhop^0'=rhop^0, x^0'=x^0, xp^0'=1+xp^0, 1-rhop^0 <= 0, cost: 1
	New rule:
	l0 -> l1 : xp^0'=1+xp^0, 1-rhop^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l0 -> l1 : retp^0'=retp^post2, retpp^0'=retpp^post2, rho^0'=rho^post2, rhop^0'=rhop^post2, x^0'=x^post2, xp^0'=xp^post2, (-rhop^post2+rhop^0 == 0 /\ 1+xp^post2-xp^0 == 0 /\ retp^0-retp^post2 == 0 /\ retpp^0-retpp^post2 == 0 /\ -rho^post2+rho^0 == 0 /\ x^0-x^post2 == 0 /\ rhop^0 <= 0), cost: 1
	New rule:
	l0 -> l1 : retp^0'=retp^0, retpp^0'=retpp^0, rho^0'=rho^0, rhop^0'=rhop^0, x^0'=x^0, xp^0'=-1+xp^0, (0 == 0 /\ rhop^0 <= 0), cost: 1
	
		propagated equality rhop^post2 = rhop^0
		
		propagated equality xp^post2 = -1+xp^0
		
		propagated equality retp^post2 = retp^0
		
		propagated equality retpp^post2 = retpp^0
		
		propagated equality rho^post2 = rho^0
		
		propagated equality x^post2 = x^0
		
	Simplified Guard

	Original rule:
	l0 -> l1 : retp^0'=retp^0, retpp^0'=retpp^0, rho^0'=rho^0, rhop^0'=rhop^0, x^0'=x^0, xp^0'=-1+xp^0, (0 == 0 /\ rhop^0 <= 0), cost: 1
	New rule:
	l0 -> l1 : retp^0'=retp^0, retpp^0'=retpp^0, rho^0'=rho^0, rhop^0'=rhop^0, x^0'=x^0, xp^0'=-1+xp^0, rhop^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l1 : retp^0'=retp^0, retpp^0'=retpp^0, rho^0'=rho^0, rhop^0'=rhop^0, x^0'=x^0, xp^0'=-1+xp^0, rhop^0 <= 0, cost: 1
	New rule:
	l0 -> l1 : xp^0'=-1+xp^0, rhop^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l2 -> l3 : retp^0'=retp^post3, retpp^0'=retpp^post3, rho^0'=rho^post3, rhop^0'=rhop^post3, x^0'=x^post3, xp^0'=xp^post3, (-rho^post3+rho^0 == 0 /\ retpp^0-retpp^post3 == 0 /\ -x^post3+x^0 == 0 /\ retpp^0 <= 0 /\ retp^post3 == 0 /\ xp^0-xp^post3 == 0 /\ -rhop^post3+rhop^0 == 0), cost: 1
	New rule:
	l2 -> l3 : retp^0'=0, retpp^0'=retpp^0, rho^0'=rho^0, rhop^0'=rhop^0, x^0'=x^0, xp^0'=xp^0, (0 == 0 /\ retpp^0 <= 0), cost: 1
	
		propagated equality rho^post3 = rho^0
		
		propagated equality retpp^post3 = retpp^0
		
		propagated equality x^post3 = x^0
		
		propagated equality retp^post3 = 0
		
		propagated equality xp^post3 = xp^0
		
		propagated equality rhop^post3 = rhop^0
		
	Simplified Guard

	Original rule:
	l2 -> l3 : retp^0'=0, retpp^0'=retpp^0, rho^0'=rho^0, rhop^0'=rhop^0, x^0'=x^0, xp^0'=xp^0, (0 == 0 /\ retpp^0 <= 0), cost: 1
	New rule:
	l2 -> l3 : retp^0'=0, retpp^0'=retpp^0, rho^0'=rho^0, rhop^0'=rhop^0, x^0'=x^0, xp^0'=xp^0, retpp^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l2 -> l3 : retp^0'=0, retpp^0'=retpp^0, rho^0'=rho^0, rhop^0'=rhop^0, x^0'=x^0, xp^0'=xp^0, retpp^0 <= 0, cost: 1
	New rule:
	l2 -> l3 : retp^0'=0, retpp^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l2 -> l3 : retp^0'=retp^post4, retpp^0'=retpp^post4, rho^0'=rho^post4, rhop^0'=rhop^post4, x^0'=x^post4, xp^0'=xp^post4, (-x^post4+x^0 == 0 /\ rho^0-rho^post4 == 0 /\ -1+retp^post4 == 0 /\ retpp^0-retpp^post4 == 0 /\ -rhop^post4+rhop^0 == 0 /\ xp^0-xp^post4 == 0), cost: 1
	New rule:
	l2 -> l3 : retp^0'=1, retpp^0'=retpp^0, rho^0'=rho^0, rhop^0'=rhop^0, x^0'=x^0, xp^0'=xp^0, 0 == 0, cost: 1
	
		propagated equality x^post4 = x^0
		
		propagated equality rho^post4 = rho^0
		
		propagated equality retp^post4 = 1
		
		propagated equality retpp^post4 = retpp^0
		
		propagated equality rhop^post4 = rhop^0
		
		propagated equality xp^post4 = xp^0
		
	Simplified Guard

	Original rule:
	l2 -> l3 : retp^0'=1, retpp^0'=retpp^0, rho^0'=rho^0, rhop^0'=rhop^0, x^0'=x^0, xp^0'=xp^0, 0 == 0, cost: 1
	New rule:
	l2 -> l3 : retp^0'=1, retpp^0'=retpp^0, rho^0'=rho^0, rhop^0'=rhop^0, x^0'=x^0, xp^0'=xp^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l2 -> l3 : retp^0'=1, retpp^0'=retpp^0, rho^0'=rho^0, rhop^0'=rhop^0, x^0'=x^0, xp^0'=xp^0, T, cost: 1
	New rule:
	l2 -> l3 : retp^0'=1, T, cost: 1
	
	Propagated Equalities

	Original rule:
	l2 -> l0 : retp^0'=retp^post5, retpp^0'=retpp^post5, rho^0'=rho^post5, rhop^0'=rhop^post5, x^0'=x^post5, xp^0'=xp^post5, (0 == 0 /\ xp^0-xp^post5 == 0 /\ 1-rhop^post5 <= 0 /\ -rho^post5+rho^0 == 0 /\ retpp^0-retpp^post5 == 0 /\ -retp^post5+retp^0 == 0 /\ -x^post5+x^0 == 0), cost: 1
	New rule:
	l2 -> l0 : retp^0'=retp^0, retpp^0'=retpp^0, rho^0'=rho^0, rhop^0'=rhop^post5, x^0'=x^0, xp^0'=xp^0, (0 == 0 /\ 1-rhop^post5 <= 0), cost: 1
	
		propagated equality xp^post5 = xp^0
		
		propagated equality rho^post5 = rho^0
		
		propagated equality retpp^post5 = retpp^0
		
		propagated equality retp^post5 = retp^0
		
		propagated equality x^post5 = x^0
		
	Simplified Guard

	Original rule:
	l2 -> l0 : retp^0'=retp^0, retpp^0'=retpp^0, rho^0'=rho^0, rhop^0'=rhop^post5, x^0'=x^0, xp^0'=xp^0, (0 == 0 /\ 1-rhop^post5 <= 0), cost: 1
	New rule:
	l2 -> l0 : retp^0'=retp^0, retpp^0'=retpp^0, rho^0'=rho^0, rhop^0'=rhop^post5, x^0'=x^0, xp^0'=xp^0, 1-rhop^post5 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l2 -> l0 : retp^0'=retp^0, retpp^0'=retpp^0, rho^0'=rho^0, rhop^0'=rhop^post5, x^0'=x^0, xp^0'=xp^0, 1-rhop^post5 <= 0, cost: 1
	New rule:
	l2 -> l0 : rhop^0'=rhop^post5, 1-rhop^post5 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l1 -> l2 : retp^0'=retp^post6, retpp^0'=retpp^post6, rho^0'=rho^post6, rhop^0'=rhop^post6, x^0'=x^post6, xp^0'=xp^post6, (rhop^0-rhop^post6 == 0 /\ retpp^post6 == 0 /\ -rho^post6+rho^0 == 0 /\ xp^0-xp^post6 == 0 /\ -x^post6+x^0 == 0 /\ -1+xp^0 <= 0 /\ retp^0-retp^post6 == 0), cost: 1
	New rule:
	l1 -> l2 : retp^0'=retp^0, retpp^0'=0, rho^0'=rho^0, rhop^0'=rhop^0, x^0'=x^0, xp^0'=xp^0, (0 == 0 /\ -1+xp^0 <= 0), cost: 1
	
		propagated equality rhop^post6 = rhop^0
		
		propagated equality retpp^post6 = 0
		
		propagated equality rho^post6 = rho^0
		
		propagated equality xp^post6 = xp^0
		
		propagated equality x^post6 = x^0
		
		propagated equality retp^post6 = retp^0
		
	Simplified Guard

	Original rule:
	l1 -> l2 : retp^0'=retp^0, retpp^0'=0, rho^0'=rho^0, rhop^0'=rhop^0, x^0'=x^0, xp^0'=xp^0, (0 == 0 /\ -1+xp^0 <= 0), cost: 1
	New rule:
	l1 -> l2 : retp^0'=retp^0, retpp^0'=0, rho^0'=rho^0, rhop^0'=rhop^0, x^0'=x^0, xp^0'=xp^0, -1+xp^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l1 -> l2 : retp^0'=retp^0, retpp^0'=0, rho^0'=rho^0, rhop^0'=rhop^0, x^0'=x^0, xp^0'=xp^0, -1+xp^0 <= 0, cost: 1
	New rule:
	l1 -> l2 : retpp^0'=0, -1+xp^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l1 -> l2 : retp^0'=retp^post7, retpp^0'=retpp^post7, rho^0'=rho^post7, rhop^0'=rhop^post7, x^0'=x^post7, xp^0'=xp^post7, (-x^post7+x^0 == 0 /\ -1+retpp^post7 == 0 /\ rhop^0-rhop^post7 == 0 /\ -rho^post7+rho^0 == 0 /\ xp^0-xp^post7 == 0 /\ retp^0-retp^post7 == 0 /\ 2-xp^0 <= 0), cost: 1
	New rule:
	l1 -> l2 : retp^0'=retp^0, retpp^0'=1, rho^0'=rho^0, rhop^0'=rhop^0, x^0'=x^0, xp^0'=xp^0, (0 == 0 /\ 2-xp^0 <= 0), cost: 1
	
		propagated equality x^post7 = x^0
		
		propagated equality retpp^post7 = 1
		
		propagated equality rhop^post7 = rhop^0
		
		propagated equality rho^post7 = rho^0
		
		propagated equality xp^post7 = xp^0
		
		propagated equality retp^post7 = retp^0
		
	Simplified Guard

	Original rule:
	l1 -> l2 : retp^0'=retp^0, retpp^0'=1, rho^0'=rho^0, rhop^0'=rhop^0, x^0'=x^0, xp^0'=xp^0, (0 == 0 /\ 2-xp^0 <= 0), cost: 1
	New rule:
	l1 -> l2 : retp^0'=retp^0, retpp^0'=1, rho^0'=rho^0, rhop^0'=rhop^0, x^0'=x^0, xp^0'=xp^0, 2-xp^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l1 -> l2 : retp^0'=retp^0, retpp^0'=1, rho^0'=rho^0, rhop^0'=rhop^0, x^0'=x^0, xp^0'=xp^0, 2-xp^0 <= 0, cost: 1
	New rule:
	l1 -> l2 : retpp^0'=1, 2-xp^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l3 -> l5 : retp^0'=retp^post9, retpp^0'=retpp^post9, rho^0'=rho^post9, rhop^0'=rhop^post9, x^0'=x^post9, xp^0'=xp^post9, (rhop^0-rhop^post9 == 0 /\ retpp^0-retpp^post9 == 0 /\ xp^0-xp^post9 == 0 /\ -x^post9+x^0 == 0 /\ retp^0 <= 0 /\ -rho^post9+rho^0 == 0 /\ retp^0-retp^post9 == 0), cost: 1
	New rule:
	l3 -> l5 : retp^0'=retp^0, retpp^0'=retpp^0, rho^0'=rho^0, rhop^0'=rhop^0, x^0'=x^0, xp^0'=xp^0, (0 == 0 /\ retp^0 <= 0), cost: 1
	
		propagated equality rhop^post9 = rhop^0
		
		propagated equality retpp^post9 = retpp^0
		
		propagated equality xp^post9 = xp^0
		
		propagated equality x^post9 = x^0
		
		propagated equality rho^post9 = rho^0
		
		propagated equality retp^post9 = retp^0
		
	Simplified Guard

	Original rule:
	l3 -> l5 : retp^0'=retp^0, retpp^0'=retpp^0, rho^0'=rho^0, rhop^0'=rhop^0, x^0'=x^0, xp^0'=xp^0, (0 == 0 /\ retp^0 <= 0), cost: 1
	New rule:
	l3 -> l5 : retp^0'=retp^0, retpp^0'=retpp^0, rho^0'=rho^0, rhop^0'=rhop^0, x^0'=x^0, xp^0'=xp^0, retp^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l3 -> l5 : retp^0'=retp^0, retpp^0'=retpp^0, rho^0'=rho^0, rhop^0'=rhop^0, x^0'=x^0, xp^0'=xp^0, retp^0 <= 0, cost: 1
	New rule:
	l3 -> l5 : retp^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l6 -> l1 : retp^0'=retp^post8, retpp^0'=retpp^post8, rho^0'=rho^post8, rhop^0'=rhop^post8, x^0'=x^post8, xp^0'=xp^post8, (-retpp^post8+retpp^post10 == 0 /\ -rho^post10+rho^0 == 0 /\ -rho^post8+rho^post10 == 0 /\ -x^post8+xp^post8 == 0 /\ -rho^post10+rhop^post8 == 0 /\ -x^post10+x^0 == 0 /\ -retp^post8+retp^post10 == 0 /\ retp^0-retp^post10 == 0 /\ rhop^0-rhop^post10 == 0 /\ -retpp^post10+retpp^0 == 0 /\ xp^0-xp^post10 == 0 /\ -2+x^post8 == 0), cost: 1
	New rule:
	l6 -> l1 : retp^0'=retp^post10, retpp^0'=retpp^post10, rho^0'=rho^post10, rhop^0'=rho^post10, x^0'=2, xp^0'=2, (0 == 0 /\ -rho^post10+rho^0 == 0 /\ -x^post10+x^0 == 0 /\ retp^0-retp^post10 == 0 /\ rhop^0-rhop^post10 == 0 /\ -retpp^post10+retpp^0 == 0 /\ xp^0-xp^post10 == 0), cost: 1
	
		propagated equality retpp^post8 = retpp^post10
		
		propagated equality rho^post8 = rho^post10
		
		propagated equality x^post8 = xp^post8
		
		propagated equality rhop^post8 = rho^post10
		
		propagated equality retp^post8 = retp^post10
		
		propagated equality xp^post8 = 2
		
	Propagated Equalities

	Original rule:
	l6 -> l1 : retp^0'=retp^post10, retpp^0'=retpp^post10, rho^0'=rho^post10, rhop^0'=rho^post10, x^0'=2, xp^0'=2, (0 == 0 /\ -rho^post10+rho^0 == 0 /\ -x^post10+x^0 == 0 /\ retp^0-retp^post10 == 0 /\ rhop^0-rhop^post10 == 0 /\ -retpp^post10+retpp^0 == 0 /\ xp^0-xp^post10 == 0), cost: 1
	New rule:
	l6 -> l1 : retp^0'=retp^0, retpp^0'=retpp^0, rho^0'=rho^0, rhop^0'=rho^0, x^0'=2, xp^0'=2, 0 == 0, cost: 1
	
		propagated equality rho^post10 = rho^0
		
		propagated equality x^post10 = x^0
		
		propagated equality retp^post10 = retp^0
		
		propagated equality rhop^post10 = rhop^0
		
		propagated equality retpp^post10 = retpp^0
		
		propagated equality xp^post10 = xp^0
		
	Simplified Guard

	Original rule:
	l6 -> l1 : retp^0'=retp^0, retpp^0'=retpp^0, rho^0'=rho^0, rhop^0'=rho^0, x^0'=2, xp^0'=2, 0 == 0, cost: 1
	New rule:
	l6 -> l1 : retp^0'=retp^0, retpp^0'=retpp^0, rho^0'=rho^0, rhop^0'=rho^0, x^0'=2, xp^0'=2, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l6 -> l1 : retp^0'=retp^0, retpp^0'=retpp^0, rho^0'=rho^0, rhop^0'=rho^0, x^0'=2, xp^0'=2, T, cost: 1
	New rule:
	l6 -> l1 : rhop^0'=rho^0, x^0'=2, xp^0'=2, T, cost: 1

Step with 19

	Trace

	19[T]
	
	Blocked

	[{}, {}]

Step with 17

	Trace

	19[T], 17[(2-xp^0 <= 0)]
	
	Blocked

	[{}, {16[T]}, {}]

Step with 14

	Trace

	19[T], 17[(2-xp^0 <= 0)], 14[T]
	
	Blocked

	[{}, {16[T]}, {13[T]}, {}]

Backtrack

	Trace

	19[T], 17[(2-xp^0 <= 0)]
	
	Blocked

	[{}, {16[T]}, {13[T], 14[T]}]

Step with 15

	Trace

	19[T], 17[(2-xp^0 <= 0)], 15[(1-rhop^post5 <= 0)]
	
	Blocked

	[{}, {16[T]}, {13[T], 14[T]}, {}]

Step with 11

	Trace

	19[T], 17[(2-xp^0 <= 0)], 15[(1-rhop^post5 <= 0)], 11[(1-rhop^0 <= 0)]
	
	Blocked

	[{}, {16[T]}, {13[T], 14[T]}, {}, {}]

Nonterm

Start location: l6
Program variables: retp^0 retpp^0 rho^0 rhop^0 x^0 xp^0
  11: l0 -> l1 : xp^0'=1+xp^0, 1-rhop^0 <= 0, cost: 1
  12: l0 -> l1 : xp^0'=-1+xp^0, rhop^0 <= 0, cost: 1
  16: l1 -> l2 : retpp^0'=0, -1+xp^0 <= 0, cost: 1
  17: l1 -> l2 : retpp^0'=1, 2-xp^0 <= 0, cost: 1
  20: l1 -> LoAT_sink : (-1+rhop^post51 >= 0 /\ -2+xp^0 >= 0 /\ -1+n >= 0), cost: NONTERM
  21: l1 -> l1 : retpp^0'=1, rhop^0'=rhop^post51, xp^0'=xp^0+n, (-1+rhop^post51 >= 0 /\ -2+xp^0 >= 0 /\ -1+n >= 0), cost: 1
  13: l2 -> l3 : retp^0'=0, retpp^0 <= 0, cost: 1
  14: l2 -> l3 : retp^0'=1, T, cost: 1
  15: l2 -> l0 : rhop^0'=rhop^post5, 1-rhop^post5 <= 0, cost: 1
  18: l3 -> l5 : retp^0 <= 0, cost: 1
  19: l6 -> l1 : rhop^0'=rho^0, x^0'=2, xp^0'=2, T, cost: 1

	Certificate of Non-Termination

	Original rule:
	l1 -> l1 : retpp^0'=1, rhop^0'=rhop^post51, xp^0'=1+xp^0, (1-rhop^post51 <= 0 /\ 2-xp^0 <= 0), cost: 1
	New rule:
	l1 -> LoAT_sink : (-1+rhop^post51 >= 0 /\ -2+xp^0 >= 0 /\ -1+n >= 0), cost: NONTERM

		-1+rhop^post51 >= 0 [0]: monotonic increase yields -1+rhop^post51 >= 0
		
		-2+xp^0 >= 0 [0]: monotonic increase yields -2+xp^0 >= 0
		
		Replacement map: {-1+rhop^post51 >= 0 -> -1+rhop^post51 >= 0, -2+xp^0 >= 0 -> -2+xp^0 >= 0}

	Loop Acceleration

	Original rule:
	l1 -> l1 : retpp^0'=1, rhop^0'=rhop^post51, xp^0'=1+xp^0, (1-rhop^post51 <= 0 /\ 2-xp^0 <= 0), cost: 1
	New rule:
	l1 -> l1 : retpp^0'=1, rhop^0'=rhop^post51, xp^0'=xp^0+n, (-1+rhop^post51 >= 0 /\ -2+xp^0 >= 0 /\ -1+n >= 0), cost: 1

		-1+rhop^post51 >= 0 [0]: monotonic increase yields -1+rhop^post51 >= 0
		
		-2+xp^0 >= 0 [0]: monotonic increase yields -2+xp^0 >= 0
		
		Replacement map: {-1+rhop^post51 >= 0 -> -1+rhop^post51 >= 0, -2+xp^0 >= 0 -> -2+xp^0 >= 0}

Step with 20

	Trace

	19[T], 20[(-1+rhop^post51 >= 0 /\ -2+xp^0 >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {16[T]}, {20[T]}]

Refute

	Counterexample

	[ retp^0=0 retpp^0=0 rho^0=0 rhop^0=0 x^0=2 xp^0=2 ] 19 [ retp^0=0 retpp^0=0 rho^0=0 rhop^0=rhop^0 x^0=x^0 xp^0=xp^0 ] 20
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
