WORST_CASE(Omega(0),?)

Initial ITS
Start location: l8
   0: l0 -> l1 : j^0'=j^post0, i^0'=i^post0, (j^post0 == 0 /\ -i^post0+i^0 == 0 /\ 2-i^0 <= 0), cost: 1
   1: l0 -> l2 : j^0'=j^post1, i^0'=i^post1, (j^0-j^post1 == 0 /\ -1-i^0+i^post1 == 0 /\ -1+i^0 <= 0), cost: 1
   3: l1 -> l3 : j^0'=j^post3, i^0'=i^post3, (j^0-j^post3 == 0 /\ -i^post3+i^0 == 0), cost: 1
   2: l2 -> l0 : j^0'=j^post2, i^0'=i^post2, (i^0-i^post2 == 0 /\ j^0-j^post2 == 0), cost: 1
   7: l3 -> l6 : j^0'=j^post7, i^0'=i^post7, (i^0-i^post7 == 0 /\ j^0-j^post7 == 0 /\ 2-j^0 <= 0), cost: 1
   8: l3 -> l1 : j^0'=j^post8, i^0'=i^post8, (-i^post8+i^0 == 0 /\ -1+j^post8-j^0 == 0 /\ -1+j^0 <= 0), cost: 1
   4: l4 -> l5 : j^0'=j^post4, i^0'=i^post4, (j^0-j^post4 == 0 /\ i^0-i^post4 == 0), cost: 1
   5: l6 -> l4 : j^0'=j^post5, i^0'=i^post5, (j^0-j^post5 == 0 /\ -i^post5+i^0 == 0), cost: 1
   6: l6 -> l4 : j^0'=j^post6, i^0'=i^post6, (-i^post6+i^0 == 0 /\ j^0-j^post6 == 0), cost: 1
   9: l7 -> l2 : j^0'=j^post9, i^0'=i^post9, (i^post9 == 0 /\ j^0-j^post9 == 0), cost: 1
  10: l8 -> l7 : j^0'=j^post10, i^0'=i^post10, (j^0-j^post10 == 0 /\ -i^post10+i^0 == 0), cost: 1


Removed unreachable rules and leafs
Start location: l8
   0: l0 -> l1 : j^0'=j^post0, i^0'=i^post0, (j^post0 == 0 /\ -i^post0+i^0 == 0 /\ 2-i^0 <= 0), cost: 1
   1: l0 -> l2 : j^0'=j^post1, i^0'=i^post1, (j^0-j^post1 == 0 /\ -1-i^0+i^post1 == 0 /\ -1+i^0 <= 0), cost: 1
   3: l1 -> l3 : j^0'=j^post3, i^0'=i^post3, (j^0-j^post3 == 0 /\ -i^post3+i^0 == 0), cost: 1
   2: l2 -> l0 : j^0'=j^post2, i^0'=i^post2, (i^0-i^post2 == 0 /\ j^0-j^post2 == 0), cost: 1
   8: l3 -> l1 : j^0'=j^post8, i^0'=i^post8, (-i^post8+i^0 == 0 /\ -1+j^post8-j^0 == 0 /\ -1+j^0 <= 0), cost: 1
   9: l7 -> l2 : j^0'=j^post9, i^0'=i^post9, (i^post9 == 0 /\ j^0-j^post9 == 0), cost: 1
  10: l8 -> l7 : j^0'=j^post10, i^0'=i^post10, (j^0-j^post10 == 0 /\ -i^post10+i^0 == 0), cost: 1


Applied preprocessing
Original rule:
l0 -> l1 : j^0'=j^post0, i^0'=i^post0, (j^post0 == 0 /\ -i^post0+i^0 == 0 /\ 2-i^0 <= 0), cost: 1
New rule:
l0 -> l1 : j^0'=0, -2+i^0 >= 0, cost: 1

Applied preprocessing
Original rule:
l0 -> l2 : j^0'=j^post1, i^0'=i^post1, (j^0-j^post1 == 0 /\ -1-i^0+i^post1 == 0 /\ -1+i^0 <= 0), cost: 1
New rule:
l0 -> l2 : i^0'=1+i^0, -1+i^0 <= 0, cost: 1

Applied preprocessing
Original rule:
l2 -> l0 : j^0'=j^post2, i^0'=i^post2, (i^0-i^post2 == 0 /\ j^0-j^post2 == 0), cost: 1
New rule:
l2 -> l0 : TRUE, cost: 1

Applied preprocessing
Original rule:
l1 -> l3 : j^0'=j^post3, i^0'=i^post3, (j^0-j^post3 == 0 /\ -i^post3+i^0 == 0), cost: 1
New rule:
l1 -> l3 : TRUE, cost: 1

Applied preprocessing
Original rule:
l3 -> l1 : j^0'=j^post8, i^0'=i^post8, (-i^post8+i^0 == 0 /\ -1+j^post8-j^0 == 0 /\ -1+j^0 <= 0), cost: 1
New rule:
l3 -> l1 : j^0'=1+j^0, -1+j^0 <= 0, cost: 1

Applied preprocessing
Original rule:
l7 -> l2 : j^0'=j^post9, i^0'=i^post9, (i^post9 == 0 /\ j^0-j^post9 == 0), cost: 1
New rule:
l7 -> l2 : i^0'=0, TRUE, cost: 1

Applied preprocessing
Original rule:
l8 -> l7 : j^0'=j^post10, i^0'=i^post10, (j^0-j^post10 == 0 /\ -i^post10+i^0 == 0), cost: 1
New rule:
l8 -> l7 : TRUE, cost: 1

Simplified rules
Start location: l8
  11: l0 -> l1 : j^0'=0, -2+i^0 >= 0, cost: 1
  12: l0 -> l2 : i^0'=1+i^0, -1+i^0 <= 0, cost: 1
  14: l1 -> l3 : TRUE, cost: 1
  13: l2 -> l0 : TRUE, cost: 1
  15: l3 -> l1 : j^0'=1+j^0, -1+j^0 <= 0, cost: 1
  16: l7 -> l2 : i^0'=0, TRUE, cost: 1
  17: l8 -> l7 : TRUE, cost: 1


Eliminating location l7 by chaining:

Applied chaining
First rule:
l8 -> l7 : TRUE, cost: 1
Second rule:
l7 -> l2 : i^0'=0, TRUE, cost: 1
New rule:
l8 -> l2 : i^0'=0, TRUE, cost: 2

Applied deletion
Removed the following rules: 16 17

Eliminating location l3 by chaining:

Applied chaining
First rule:
l1 -> l3 : TRUE, cost: 1
Second rule:
l3 -> l1 : j^0'=1+j^0, -1+j^0 <= 0, cost: 1
New rule:
l1 -> l1 : j^0'=1+j^0, -1+j^0 <= 0, cost: 2

Applied deletion
Removed the following rules: 14 15

Eliminated locations on linear paths
Start location: l8
  11: l0 -> l1 : j^0'=0, -2+i^0 >= 0, cost: 1
  12: l0 -> l2 : i^0'=1+i^0, -1+i^0 <= 0, cost: 1
  19: l1 -> l1 : j^0'=1+j^0, -1+j^0 <= 0, cost: 2
  13: l2 -> l0 : TRUE, cost: 1
  18: l8 -> l2 : i^0'=0, TRUE, cost: 2


Applied acceleration
Original rule:
l1 -> l1 : j^0'=1+j^0, -1+j^0 <= 0, cost: 2
New rule:
l1 -> l1 : j^0'=j^0+n, (2-j^0-n >= 0 /\ n >= 0), cost: 2*n
Sub-proof via acceration calculus written to file:///tmp/tmpnam_CGgeAN.txt

Applied instantiation
Original rule:
l1 -> l1 : j^0'=j^0+n, (2-j^0-n >= 0 /\ n >= 0), cost: 2*n
New rule:
l1 -> l1 : j^0'=2, (0 >= 0 /\ 2-j^0 >= 0), cost: 4-2*j^0

Applied simplification
Original rule:
l1 -> l1 : j^0'=2, (0 >= 0 /\ 2-j^0 >= 0), cost: 4-2*j^0
New rule:
l1 -> l1 : j^0'=2, -2+j^0 <= 0, cost: 4-2*j^0

Applied deletion
Removed the following rules: 19

Accelerated simple loops
Start location: l8
  11: l0 -> l1 : j^0'=0, -2+i^0 >= 0, cost: 1
  12: l0 -> l2 : i^0'=1+i^0, -1+i^0 <= 0, cost: 1
  21: l1 -> l1 : j^0'=2, -2+j^0 <= 0, cost: 4-2*j^0
  13: l2 -> l0 : TRUE, cost: 1
  18: l8 -> l2 : i^0'=0, TRUE, cost: 2


Applied chaining
First rule:
l0 -> l1 : j^0'=0, -2+i^0 >= 0, cost: 1
Second rule:
l1 -> l1 : j^0'=2, -2+j^0 <= 0, cost: 4-2*j^0
New rule:
l0 -> l1 : j^0'=2, -2+i^0 >= 0, cost: 5

Applied deletion
Removed the following rules: 21

Chained accelerated rules with incoming rules
Start location: l8
  11: l0 -> l1 : j^0'=0, -2+i^0 >= 0, cost: 1
  12: l0 -> l2 : i^0'=1+i^0, -1+i^0 <= 0, cost: 1
  22: l0 -> l1 : j^0'=2, -2+i^0 >= 0, cost: 5
  13: l2 -> l0 : TRUE, cost: 1
  18: l8 -> l2 : i^0'=0, TRUE, cost: 2


Removed unreachable locations and irrelevant leafs
Start location: l8
  12: l0 -> l2 : i^0'=1+i^0, -1+i^0 <= 0, cost: 1
  13: l2 -> l0 : TRUE, cost: 1
  18: l8 -> l2 : i^0'=0, TRUE, cost: 2


Eliminating location l0 by chaining:

Applied chaining
First rule:
l2 -> l0 : TRUE, cost: 1
Second rule:
l0 -> l2 : i^0'=1+i^0, -1+i^0 <= 0, cost: 1
New rule:
l2 -> l2 : i^0'=1+i^0, -1+i^0 <= 0, cost: 2

Applied deletion
Removed the following rules: 12 13

Eliminated locations on linear paths
Start location: l8
  23: l2 -> l2 : i^0'=1+i^0, -1+i^0 <= 0, cost: 2
  18: l8 -> l2 : i^0'=0, TRUE, cost: 2


Applied acceleration
Original rule:
l2 -> l2 : i^0'=1+i^0, -1+i^0 <= 0, cost: 2
New rule:
l2 -> l2 : i^0'=n0+i^0, (n0 >= 0 /\ 2-n0-i^0 >= 0), cost: 2*n0
Sub-proof via acceration calculus written to file:///tmp/tmpnam_FOLCDh.txt

Applied instantiation
Original rule:
l2 -> l2 : i^0'=n0+i^0, (n0 >= 0 /\ 2-n0-i^0 >= 0), cost: 2*n0
New rule:
l2 -> l2 : i^0'=2, (0 >= 0 /\ 2-i^0 >= 0), cost: 4-2*i^0

Applied simplification
Original rule:
l2 -> l2 : i^0'=2, (0 >= 0 /\ 2-i^0 >= 0), cost: 4-2*i^0
New rule:
l2 -> l2 : i^0'=2, -2+i^0 <= 0, cost: 4-2*i^0

Applied deletion
Removed the following rules: 23

Accelerated simple loops
Start location: l8
  25: l2 -> l2 : i^0'=2, -2+i^0 <= 0, cost: 4-2*i^0
  18: l8 -> l2 : i^0'=0, TRUE, cost: 2


Applied chaining
First rule:
l8 -> l2 : i^0'=0, TRUE, cost: 2
Second rule:
l2 -> l2 : i^0'=2, -2+i^0 <= 0, cost: 4-2*i^0
New rule:
l8 -> l2 : i^0'=2, -2 <= 0, cost: 6

Applied deletion
Removed the following rules: 25

Chained accelerated rules with incoming rules
Start location: l8
  18: l8 -> l2 : i^0'=0, TRUE, cost: 2
  26: l8 -> l2 : i^0'=2, -2 <= 0, cost: 6


Removed unreachable locations and irrelevant leafs
Start location: l8
  <empty>


Computing asymptotic complexity

Proved the following lower bound
Complexity:  Unknown
Cpx degree: ?

Solved cost: 0
Rule cost:   0

