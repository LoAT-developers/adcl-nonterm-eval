NO

Initial ITS

Start location: __init
Program variables: arg1
   0: f1_0_main_ConstantStackPush -> f58_0_main_GE : arg1'=arg1p1, -arg1p1 == 0, cost: 1
   1: f58_0_main_GE -> f58_0_main_GE : arg1'=arg1p2, (-20+arg1 < 0 /\ 1-arg1p2+arg1 == 0 /\ -12+arg1 < 0), cost: 1
   2: f58_0_main_GE -> f58_0_main_GE : arg1'=arg1p3, (-11+arg1 > 0 /\ -arg1p3+arg1 == 0 /\ -20+arg1 < 0), cost: 1
   3: __init -> f1_0_main_ConstantStackPush : arg1'=arg1p4, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1
   1: f58_0_main_GE -> f58_0_main_GE : arg1'=arg1p2, (-20+arg1 < 0 /\ 1-arg1p2+arg1 == 0 /\ -12+arg1 < 0), cost: 1
   2: f58_0_main_GE -> f58_0_main_GE : arg1'=arg1p3, (-11+arg1 > 0 /\ -arg1p3+arg1 == 0 /\ -20+arg1 < 0), cost: 1
   4: __init -> f58_0_main_GE : arg1'=arg1p1, -arg1p1 == 0, cost: 1

	Eliminating location f1_0_main_ConstantStackPush by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_ConstantStackPush : arg1'=arg1p4, T, cost: 1
	Second rule:
	f1_0_main_ConstantStackPush -> f58_0_main_GE : arg1'=arg1p1, -arg1p1 == 0, cost: 1
	New rule:
	__init -> f58_0_main_GE : arg1'=arg1p1, -arg1p1 == 0, cost: 1
	
	Applied deletion

	Removed the following rules: 0 3

Simplified Transitions

Start location: __init
Program variables: arg1
   5: f58_0_main_GE -> f58_0_main_GE : arg1'=1+arg1, (-20+arg1 < 0 /\ -12+arg1 < 0), cost: 1
   6: f58_0_main_GE -> f58_0_main_GE : (-11+arg1 > 0 /\ -20+arg1 < 0), cost: 1
   7: __init -> f58_0_main_GE : arg1'=0, T, cost: 1

	Propagated Equalities

	Original rule:
	f58_0_main_GE -> f58_0_main_GE : arg1'=arg1p2, (-20+arg1 < 0 /\ 1-arg1p2+arg1 == 0 /\ -12+arg1 < 0), cost: 1
	New rule:
	f58_0_main_GE -> f58_0_main_GE : arg1'=1+arg1, (0 == 0 /\ -20+arg1 < 0 /\ -12+arg1 < 0), cost: 1
	
		propagated equality arg1p2 = 1+arg1
		
	Simplified Guard

	Original rule:
	f58_0_main_GE -> f58_0_main_GE : arg1'=1+arg1, (0 == 0 /\ -20+arg1 < 0 /\ -12+arg1 < 0), cost: 1
	New rule:
	f58_0_main_GE -> f58_0_main_GE : arg1'=1+arg1, (-20+arg1 < 0 /\ -12+arg1 < 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f58_0_main_GE -> f58_0_main_GE : arg1'=arg1p3, (-11+arg1 > 0 /\ -arg1p3+arg1 == 0 /\ -20+arg1 < 0), cost: 1
	New rule:
	f58_0_main_GE -> f58_0_main_GE : arg1'=arg1, (0 == 0 /\ -11+arg1 > 0 /\ -20+arg1 < 0), cost: 1
	
		propagated equality arg1p3 = arg1
		
	Simplified Guard

	Original rule:
	f58_0_main_GE -> f58_0_main_GE : arg1'=arg1, (0 == 0 /\ -11+arg1 > 0 /\ -20+arg1 < 0), cost: 1
	New rule:
	f58_0_main_GE -> f58_0_main_GE : arg1'=arg1, (-11+arg1 > 0 /\ -20+arg1 < 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f58_0_main_GE -> f58_0_main_GE : arg1'=arg1, (-11+arg1 > 0 /\ -20+arg1 < 0), cost: 1
	New rule:
	f58_0_main_GE -> f58_0_main_GE : (-11+arg1 > 0 /\ -20+arg1 < 0), cost: 1
	
	Propagated Equalities

	Original rule:
	__init -> f58_0_main_GE : arg1'=arg1p1, -arg1p1 == 0, cost: 1
	New rule:
	__init -> f58_0_main_GE : arg1'=0, 0 == 0, cost: 1
	
		propagated equality arg1p1 = 0
		
	Simplified Guard

	Original rule:
	__init -> f58_0_main_GE : arg1'=0, 0 == 0, cost: 1
	New rule:
	__init -> f58_0_main_GE : arg1'=0, T, cost: 1

Step with 7

	Trace

	7[T]
	
	Blocked

	[{}, {}]

Step with 5

	Trace

	7[T], 5[(-20+arg1 < 0 /\ -12+arg1 < 0)]
	
	Blocked

	[{}, {}, {}]

Accelerate

Start location: __init
Program variables: arg1
   5: f58_0_main_GE -> f58_0_main_GE : arg1'=1+arg1, (-20+arg1 < 0 /\ -12+arg1 < 0), cost: 1
   6: f58_0_main_GE -> f58_0_main_GE : (-11+arg1 > 0 /\ -20+arg1 < 0), cost: 1
   8: f58_0_main_GE -> f58_0_main_GE : arg1'=n+arg1, (-1+n >= 0 /\ 13-n-arg1 > 0 /\ 20-arg1 > 0), cost: 1
   7: __init -> f58_0_main_GE : arg1'=0, T, cost: 1

	Loop Acceleration

	Original rule:
	f58_0_main_GE -> f58_0_main_GE : arg1'=1+arg1, (-20+arg1 < 0 /\ -12+arg1 < 0), cost: 1
	New rule:
	f58_0_main_GE -> f58_0_main_GE : arg1'=n+arg1, (-1+n >= 0 /\ 13-n-arg1 > 0 /\ 20-arg1 > 0), cost: 1

		12-arg1 > 0 [0]: montonic decrease yields 13-n-arg1 > 0
		
		12-arg1 > 0 [1]: eventual increase yields (12-arg1 > 0 /\ 1 <= 0)
		
		20-arg1 > 0 [0]: monotonic increase yields 20-arg1 > 0, dependencies: 12-arg1 > 0
		
		Replacement map: {12-arg1 > 0 -> 13-n-arg1 > 0, 20-arg1 > 0 -> 20-arg1 > 0}

	Trace

	7[T], 8[(-1+n >= 0 /\ 13-n-arg1 > 0 /\ 20-arg1 > 0)]
	
	Blocked

	[{}, {}, {5[T], 8[T]}]

Step with 6

	Trace

	7[T], 8[(-1+n >= 0 /\ 13-n-arg1 > 0 /\ 20-arg1 > 0)], 6[(-11+arg1 > 0 /\ -20+arg1 < 0)]
	
	Blocked

	[{}, {}, {5[T], 8[T]}, {}]

Nonterm

Start location: __init
Program variables: arg1
   5: f58_0_main_GE -> f58_0_main_GE : arg1'=1+arg1, (-20+arg1 < 0 /\ -12+arg1 < 0), cost: 1
   6: f58_0_main_GE -> f58_0_main_GE : (-11+arg1 > 0 /\ -20+arg1 < 0), cost: 1
   8: f58_0_main_GE -> f58_0_main_GE : arg1'=n+arg1, (-1+n >= 0 /\ 13-n-arg1 > 0 /\ 20-arg1 > 0), cost: 1
   9: f58_0_main_GE -> LoAT_sink : (-11+arg1 > 0 /\ -1+n2 >= 0 /\ 20-arg1 > 0), cost: NONTERM
   7: __init -> f58_0_main_GE : arg1'=0, T, cost: 1

	Certificate of Non-Termination

	Original rule:
	f58_0_main_GE -> f58_0_main_GE : (-11+arg1 > 0 /\ -20+arg1 < 0), cost: 1
	New rule:
	f58_0_main_GE -> LoAT_sink : (-11+arg1 > 0 /\ -1+n2 >= 0 /\ 20-arg1 > 0), cost: NONTERM

		-11+arg1 > 0 [0]: monotonic increase yields -11+arg1 > 0
		
		20-arg1 > 0 [0]: monotonic increase yields 20-arg1 > 0
		
		Replacement map: {-11+arg1 > 0 -> -11+arg1 > 0, 20-arg1 > 0 -> 20-arg1 > 0}

Step with 9

	Trace

	7[T], 8[(-1+n >= 0 /\ 13-n-arg1 > 0 /\ 20-arg1 > 0)], 9[(-11+arg1 > 0 /\ -1+n2 >= 0 /\ 20-arg1 > 0)]
	
	Blocked

	[{}, {}, {5[T], 8[T]}, {9[T]}]

Refute

	Counterexample

	[ arg1=0 ] 7 [ arg1=12 ] 8 [ arg1=arg1 ] 9
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
