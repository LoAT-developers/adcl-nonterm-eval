NO

Initial ITS

Start location: __init
Program variables: arg1 arg2 arg3
   0: f1_0_main_Load -> f437_0_loop_aux_GT : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (-arg3p1+arg2 == 0 /\ 1+arg2 > 0 /\ -20-arg2p1 == 0 /\ arg1 > 0 /\ 20-arg1p1 == 0), cost: 1
   1: f437_0_loop_aux_GT -> f509_0_loop_aux_InvokeMethod : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, (arg3-arg1p2 == 0 /\ arg3-arg2 >= 0 /\ -arg2p2-arg3 == 0 /\ -5-arg3+arg1 < 0 /\ arg3-arg1 <= 0 /\ -arg3p2+arg1 == 0), cost: 1
   2: f437_0_loop_aux_GT -> f509_0_loop_aux_InvokeMethod : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, (arg3-arg1p3 == 0 /\ -5+arg3+arg1 < 0 /\ arg3-arg2 >= 0 /\ -5-arg3+arg1 >= 0 /\ -arg3p3+arg1 == 0 /\ -arg2p3-arg3 == 0 /\ arg3-arg1 <= 0), cost: 1
   4: f437_0_loop_aux_GT -> f437_0_loop_aux_GT : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, (-1+arg3-arg1 < 0 /\ -5+arg3+arg1 >= 0 /\ arg3-arg2 >= 0 /\ -1+arg3 < 0 /\ -1-arg1-arg2p5 == 0 /\ -5-arg3+arg1 >= 0 /\ -1+arg3-arg3p5 == 0 /\ arg3-arg1 <= 0 /\ 1-arg1p5+arg1 == 0), cost: 1
   5: f437_0_loop_aux_GT -> f437_0_loop_aux_GT : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, (1-arg1p6+arg1 == 0 /\ -1+arg3-arg1 < 0 /\ -5+arg3+arg1 >= 0 /\ arg3-arg2 >= 0 /\ -1-arg3p6+arg3 == 0 /\ -1-arg1-arg2p6 == 0 /\ -1+arg3 > 0 /\ -5-arg3+arg1 >= 0 /\ arg3-arg1 <= 0), cost: 1
   6: f437_0_loop_aux_GT -> f437_0_loop_aux_GT : arg1'=arg1p7, arg2'=arg2p7, arg3'=arg3p7, (-2+arg2 < 0 /\ -arg3p7 == 0 /\ 1-arg3 == 0 /\ 1-arg2p7 == 0 /\ -1-arg1p7 == 0 /\ -5+arg1 > 0), cost: 1
   3: f509_0_loop_aux_InvokeMethod -> f437_0_loop_aux_GT : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, (-arg3+arg1 <= 0 /\ -arg2p4-arg3 == 0 /\ -arg3p4+arg2 == 0 /\ arg3-arg1p4 == 0), cost: 1
   7: __init -> f1_0_main_Load : arg1'=arg1p8, arg2'=arg2p8, arg3'=arg3p8, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2 arg3
   1: f437_0_loop_aux_GT -> f509_0_loop_aux_InvokeMethod : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, (arg3-arg1p2 == 0 /\ arg3-arg2 >= 0 /\ -arg2p2-arg3 == 0 /\ -5-arg3+arg1 < 0 /\ arg3-arg1 <= 0 /\ -arg3p2+arg1 == 0), cost: 1
   2: f437_0_loop_aux_GT -> f509_0_loop_aux_InvokeMethod : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, (arg3-arg1p3 == 0 /\ -5+arg3+arg1 < 0 /\ arg3-arg2 >= 0 /\ -5-arg3+arg1 >= 0 /\ -arg3p3+arg1 == 0 /\ -arg2p3-arg3 == 0 /\ arg3-arg1 <= 0), cost: 1
   4: f437_0_loop_aux_GT -> f437_0_loop_aux_GT : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, (-1+arg3-arg1 < 0 /\ -5+arg3+arg1 >= 0 /\ arg3-arg2 >= 0 /\ -1+arg3 < 0 /\ -1-arg1-arg2p5 == 0 /\ -5-arg3+arg1 >= 0 /\ -1+arg3-arg3p5 == 0 /\ arg3-arg1 <= 0 /\ 1-arg1p5+arg1 == 0), cost: 1
   5: f437_0_loop_aux_GT -> f437_0_loop_aux_GT : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, (1-arg1p6+arg1 == 0 /\ -1+arg3-arg1 < 0 /\ -5+arg3+arg1 >= 0 /\ arg3-arg2 >= 0 /\ -1-arg3p6+arg3 == 0 /\ -1-arg1-arg2p6 == 0 /\ -1+arg3 > 0 /\ -5-arg3+arg1 >= 0 /\ arg3-arg1 <= 0), cost: 1
   6: f437_0_loop_aux_GT -> f437_0_loop_aux_GT : arg1'=arg1p7, arg2'=arg2p7, arg3'=arg3p7, (-2+arg2 < 0 /\ -arg3p7 == 0 /\ 1-arg3 == 0 /\ 1-arg2p7 == 0 /\ -1-arg1p7 == 0 /\ -5+arg1 > 0), cost: 1
   3: f509_0_loop_aux_InvokeMethod -> f437_0_loop_aux_GT : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, (-arg3+arg1 <= 0 /\ -arg2p4-arg3 == 0 /\ -arg3p4+arg2 == 0 /\ arg3-arg1p4 == 0), cost: 1
   8: __init -> f437_0_loop_aux_GT : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (-20-arg2p1 == 0 /\ arg1p8 > 0 /\ 1+arg2p8 > 0 /\ -arg3p1+arg2p8 == 0 /\ 20-arg1p1 == 0), cost: 1

	Eliminating location f1_0_main_Load by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_Load : arg1'=arg1p8, arg2'=arg2p8, arg3'=arg3p8, T, cost: 1
	Second rule:
	f1_0_main_Load -> f437_0_loop_aux_GT : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (-arg3p1+arg2 == 0 /\ 1+arg2 > 0 /\ -20-arg2p1 == 0 /\ arg1 > 0 /\ 20-arg1p1 == 0), cost: 1
	New rule:
	__init -> f437_0_loop_aux_GT : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (-20-arg2p1 == 0 /\ arg1p8 > 0 /\ 1+arg2p8 > 0 /\ -arg3p1+arg2p8 == 0 /\ 20-arg1p1 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 7

Simplified Transitions

Start location: __init
Program variables: arg1 arg2 arg3
   9: f437_0_loop_aux_GT -> f509_0_loop_aux_InvokeMethod : arg1'=arg3, arg2'=-arg3, arg3'=arg1, (arg3-arg2 >= 0 /\ -5-arg3+arg1 < 0 /\ arg3-arg1 <= 0), cost: 1
  10: f437_0_loop_aux_GT -> f509_0_loop_aux_InvokeMethod : arg1'=arg3, arg2'=-arg3, arg3'=arg1, (-5+arg3+arg1 < 0 /\ arg3-arg2 >= 0 /\ -5-arg3+arg1 >= 0 /\ arg3-arg1 <= 0), cost: 1
  12: f437_0_loop_aux_GT -> f437_0_loop_aux_GT : arg1'=1+arg1, arg2'=-1-arg1, arg3'=-1+arg3, (-1+arg3-arg1 < 0 /\ -5+arg3+arg1 >= 0 /\ arg3-arg2 >= 0 /\ -1+arg3 < 0 /\ -5-arg3+arg1 >= 0 /\ arg3-arg1 <= 0), cost: 1
  13: f437_0_loop_aux_GT -> f437_0_loop_aux_GT : arg1'=1+arg1, arg2'=-1-arg1, arg3'=-1+arg3, (-1+arg3-arg1 < 0 /\ -5+arg3+arg1 >= 0 /\ arg3-arg2 >= 0 /\ -1+arg3 > 0 /\ -5-arg3+arg1 >= 0 /\ arg3-arg1 <= 0), cost: 1
  14: f437_0_loop_aux_GT -> f437_0_loop_aux_GT : arg1'=-1, arg2'=1, arg3'=0, (-2+arg2 < 0 /\ 1-arg3 == 0 /\ -5+arg1 > 0), cost: 1
  11: f509_0_loop_aux_InvokeMethod -> f437_0_loop_aux_GT : arg1'=arg3, arg2'=-arg3, arg3'=arg2, -arg3+arg1 <= 0, cost: 1
  15: __init -> f437_0_loop_aux_GT : arg1'=20, arg2'=-20, arg3'=arg2p8, (1+arg2p8 > 0), cost: 1

	Propagated Equalities

	Original rule:
	f437_0_loop_aux_GT -> f509_0_loop_aux_InvokeMethod : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, (arg3-arg1p2 == 0 /\ arg3-arg2 >= 0 /\ -arg2p2-arg3 == 0 /\ -5-arg3+arg1 < 0 /\ arg3-arg1 <= 0 /\ -arg3p2+arg1 == 0), cost: 1
	New rule:
	f437_0_loop_aux_GT -> f509_0_loop_aux_InvokeMethod : arg1'=arg3, arg2'=-arg3, arg3'=arg1, (0 == 0 /\ arg3-arg2 >= 0 /\ -5-arg3+arg1 < 0 /\ arg3-arg1 <= 0), cost: 1
	
		propagated equality arg1p2 = arg3
		
		propagated equality arg2p2 = -arg3
		
		propagated equality arg3p2 = arg1
		
	Simplified Guard

	Original rule:
	f437_0_loop_aux_GT -> f509_0_loop_aux_InvokeMethod : arg1'=arg3, arg2'=-arg3, arg3'=arg1, (0 == 0 /\ arg3-arg2 >= 0 /\ -5-arg3+arg1 < 0 /\ arg3-arg1 <= 0), cost: 1
	New rule:
	f437_0_loop_aux_GT -> f509_0_loop_aux_InvokeMethod : arg1'=arg3, arg2'=-arg3, arg3'=arg1, (arg3-arg2 >= 0 /\ -5-arg3+arg1 < 0 /\ arg3-arg1 <= 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f437_0_loop_aux_GT -> f509_0_loop_aux_InvokeMethod : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, (arg3-arg1p3 == 0 /\ -5+arg3+arg1 < 0 /\ arg3-arg2 >= 0 /\ -5-arg3+arg1 >= 0 /\ -arg3p3+arg1 == 0 /\ -arg2p3-arg3 == 0 /\ arg3-arg1 <= 0), cost: 1
	New rule:
	f437_0_loop_aux_GT -> f509_0_loop_aux_InvokeMethod : arg1'=arg3, arg2'=-arg3, arg3'=arg1, (0 == 0 /\ -5+arg3+arg1 < 0 /\ arg3-arg2 >= 0 /\ -5-arg3+arg1 >= 0 /\ arg3-arg1 <= 0), cost: 1
	
		propagated equality arg1p3 = arg3
		
		propagated equality arg3p3 = arg1
		
		propagated equality arg2p3 = -arg3
		
	Simplified Guard

	Original rule:
	f437_0_loop_aux_GT -> f509_0_loop_aux_InvokeMethod : arg1'=arg3, arg2'=-arg3, arg3'=arg1, (0 == 0 /\ -5+arg3+arg1 < 0 /\ arg3-arg2 >= 0 /\ -5-arg3+arg1 >= 0 /\ arg3-arg1 <= 0), cost: 1
	New rule:
	f437_0_loop_aux_GT -> f509_0_loop_aux_InvokeMethod : arg1'=arg3, arg2'=-arg3, arg3'=arg1, (-5+arg3+arg1 < 0 /\ arg3-arg2 >= 0 /\ -5-arg3+arg1 >= 0 /\ arg3-arg1 <= 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f509_0_loop_aux_InvokeMethod -> f437_0_loop_aux_GT : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, (-arg3+arg1 <= 0 /\ -arg2p4-arg3 == 0 /\ -arg3p4+arg2 == 0 /\ arg3-arg1p4 == 0), cost: 1
	New rule:
	f509_0_loop_aux_InvokeMethod -> f437_0_loop_aux_GT : arg1'=arg3, arg2'=-arg3, arg3'=arg2, (0 == 0 /\ -arg3+arg1 <= 0), cost: 1
	
		propagated equality arg2p4 = -arg3
		
		propagated equality arg3p4 = arg2
		
		propagated equality arg1p4 = arg3
		
	Simplified Guard

	Original rule:
	f509_0_loop_aux_InvokeMethod -> f437_0_loop_aux_GT : arg1'=arg3, arg2'=-arg3, arg3'=arg2, (0 == 0 /\ -arg3+arg1 <= 0), cost: 1
	New rule:
	f509_0_loop_aux_InvokeMethod -> f437_0_loop_aux_GT : arg1'=arg3, arg2'=-arg3, arg3'=arg2, -arg3+arg1 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	f437_0_loop_aux_GT -> f437_0_loop_aux_GT : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, (-1+arg3-arg1 < 0 /\ -5+arg3+arg1 >= 0 /\ arg3-arg2 >= 0 /\ -1+arg3 < 0 /\ -1-arg1-arg2p5 == 0 /\ -5-arg3+arg1 >= 0 /\ -1+arg3-arg3p5 == 0 /\ arg3-arg1 <= 0 /\ 1-arg1p5+arg1 == 0), cost: 1
	New rule:
	f437_0_loop_aux_GT -> f437_0_loop_aux_GT : arg1'=1+arg1, arg2'=-1-arg1, arg3'=-1+arg3, (0 == 0 /\ -1+arg3-arg1 < 0 /\ -5+arg3+arg1 >= 0 /\ arg3-arg2 >= 0 /\ -1+arg3 < 0 /\ -5-arg3+arg1 >= 0 /\ arg3-arg1 <= 0), cost: 1
	
		propagated equality arg2p5 = -1-arg1
		
		propagated equality arg3p5 = -1+arg3
		
		propagated equality arg1p5 = 1+arg1
		
	Simplified Guard

	Original rule:
	f437_0_loop_aux_GT -> f437_0_loop_aux_GT : arg1'=1+arg1, arg2'=-1-arg1, arg3'=-1+arg3, (0 == 0 /\ -1+arg3-arg1 < 0 /\ -5+arg3+arg1 >= 0 /\ arg3-arg2 >= 0 /\ -1+arg3 < 0 /\ -5-arg3+arg1 >= 0 /\ arg3-arg1 <= 0), cost: 1
	New rule:
	f437_0_loop_aux_GT -> f437_0_loop_aux_GT : arg1'=1+arg1, arg2'=-1-arg1, arg3'=-1+arg3, (-1+arg3-arg1 < 0 /\ -5+arg3+arg1 >= 0 /\ arg3-arg2 >= 0 /\ -1+arg3 < 0 /\ -5-arg3+arg1 >= 0 /\ arg3-arg1 <= 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f437_0_loop_aux_GT -> f437_0_loop_aux_GT : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, (1-arg1p6+arg1 == 0 /\ -1+arg3-arg1 < 0 /\ -5+arg3+arg1 >= 0 /\ arg3-arg2 >= 0 /\ -1-arg3p6+arg3 == 0 /\ -1-arg1-arg2p6 == 0 /\ -1+arg3 > 0 /\ -5-arg3+arg1 >= 0 /\ arg3-arg1 <= 0), cost: 1
	New rule:
	f437_0_loop_aux_GT -> f437_0_loop_aux_GT : arg1'=1+arg1, arg2'=-1-arg1, arg3'=-1+arg3, (0 == 0 /\ -1+arg3-arg1 < 0 /\ -5+arg3+arg1 >= 0 /\ arg3-arg2 >= 0 /\ -1+arg3 > 0 /\ -5-arg3+arg1 >= 0 /\ arg3-arg1 <= 0), cost: 1
	
		propagated equality arg1p6 = 1+arg1
		
		propagated equality arg3p6 = -1+arg3
		
		propagated equality arg2p6 = -1-arg1
		
	Simplified Guard

	Original rule:
	f437_0_loop_aux_GT -> f437_0_loop_aux_GT : arg1'=1+arg1, arg2'=-1-arg1, arg3'=-1+arg3, (0 == 0 /\ -1+arg3-arg1 < 0 /\ -5+arg3+arg1 >= 0 /\ arg3-arg2 >= 0 /\ -1+arg3 > 0 /\ -5-arg3+arg1 >= 0 /\ arg3-arg1 <= 0), cost: 1
	New rule:
	f437_0_loop_aux_GT -> f437_0_loop_aux_GT : arg1'=1+arg1, arg2'=-1-arg1, arg3'=-1+arg3, (-1+arg3-arg1 < 0 /\ -5+arg3+arg1 >= 0 /\ arg3-arg2 >= 0 /\ -1+arg3 > 0 /\ -5-arg3+arg1 >= 0 /\ arg3-arg1 <= 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f437_0_loop_aux_GT -> f437_0_loop_aux_GT : arg1'=arg1p7, arg2'=arg2p7, arg3'=arg3p7, (-2+arg2 < 0 /\ -arg3p7 == 0 /\ 1-arg3 == 0 /\ 1-arg2p7 == 0 /\ -1-arg1p7 == 0 /\ -5+arg1 > 0), cost: 1
	New rule:
	f437_0_loop_aux_GT -> f437_0_loop_aux_GT : arg1'=-1, arg2'=1, arg3'=0, (0 == 0 /\ -2+arg2 < 0 /\ 1-arg3 == 0 /\ -5+arg1 > 0), cost: 1
	
		propagated equality arg3p7 = 0
		
		propagated equality arg2p7 = 1
		
		propagated equality arg1p7 = -1
		
	Simplified Guard

	Original rule:
	f437_0_loop_aux_GT -> f437_0_loop_aux_GT : arg1'=-1, arg2'=1, arg3'=0, (0 == 0 /\ -2+arg2 < 0 /\ 1-arg3 == 0 /\ -5+arg1 > 0), cost: 1
	New rule:
	f437_0_loop_aux_GT -> f437_0_loop_aux_GT : arg1'=-1, arg2'=1, arg3'=0, (-2+arg2 < 0 /\ 1-arg3 == 0 /\ -5+arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	__init -> f437_0_loop_aux_GT : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (-20-arg2p1 == 0 /\ arg1p8 > 0 /\ 1+arg2p8 > 0 /\ -arg3p1+arg2p8 == 0 /\ 20-arg1p1 == 0), cost: 1
	New rule:
	__init -> f437_0_loop_aux_GT : arg1'=20, arg2'=-20, arg3'=arg2p8, (0 == 0 /\ arg1p8 > 0 /\ 1+arg2p8 > 0), cost: 1
	
		propagated equality arg2p1 = -20
		
		propagated equality arg3p1 = arg2p8
		
		propagated equality arg1p1 = 20
		
	Simplified Guard

	Original rule:
	__init -> f437_0_loop_aux_GT : arg1'=20, arg2'=-20, arg3'=arg2p8, (0 == 0 /\ arg1p8 > 0 /\ 1+arg2p8 > 0), cost: 1
	New rule:
	__init -> f437_0_loop_aux_GT : arg1'=20, arg2'=-20, arg3'=arg2p8, (arg1p8 > 0 /\ 1+arg2p8 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	__init -> f437_0_loop_aux_GT : arg1'=20, arg2'=-20, arg3'=arg2p8, (arg1p8 > 0 /\ 1+arg2p8 > 0), cost: 1
	New rule:
	__init -> f437_0_loop_aux_GT : arg1'=20, arg2'=-20, arg3'=arg2p8, (1+arg2p8 > 0), cost: 1

Step with 15

	Trace

	15[(1+arg2p8 > 0)]
	
	Blocked

	[{}, {}]

Step with 9

	Trace

	15[(1+arg2p8 > 0)], 9[(arg3-arg2 >= 0 /\ -5-arg3+arg1 < 0 /\ arg3-arg1 <= 0)]
	
	Blocked

	[{}, {}, {}]

Step with 11

	Trace

	15[(1+arg2p8 > 0)], 9[(arg3-arg2 >= 0 /\ -5-arg3+arg1 < 0 /\ arg3-arg1 <= 0)], 11[(-arg3+arg1 <= 0)]
	
	Blocked

	[{}, {}, {}, {}]

Accelerate and Drop

Start location: __init
Program variables: arg1 arg2 arg3
   9: f437_0_loop_aux_GT -> f509_0_loop_aux_InvokeMethod : arg1'=arg3, arg2'=-arg3, arg3'=arg1, (arg3-arg2 >= 0 /\ -5-arg3+arg1 < 0 /\ arg3-arg1 <= 0), cost: 1
  10: f437_0_loop_aux_GT -> f509_0_loop_aux_InvokeMethod : arg1'=arg3, arg2'=-arg3, arg3'=arg1, (-5+arg3+arg1 < 0 /\ arg3-arg2 >= 0 /\ -5-arg3+arg1 >= 0 /\ arg3-arg1 <= 0), cost: 1
  12: f437_0_loop_aux_GT -> f437_0_loop_aux_GT : arg1'=1+arg1, arg2'=-1-arg1, arg3'=-1+arg3, (-1+arg3-arg1 < 0 /\ -5+arg3+arg1 >= 0 /\ arg3-arg2 >= 0 /\ -1+arg3 < 0 /\ -5-arg3+arg1 >= 0 /\ arg3-arg1 <= 0), cost: 1
  13: f437_0_loop_aux_GT -> f437_0_loop_aux_GT : arg1'=1+arg1, arg2'=-1-arg1, arg3'=-1+arg3, (-1+arg3-arg1 < 0 /\ -5+arg3+arg1 >= 0 /\ arg3-arg2 >= 0 /\ -1+arg3 > 0 /\ -5-arg3+arg1 >= 0 /\ arg3-arg1 <= 0), cost: 1
  14: f437_0_loop_aux_GT -> f437_0_loop_aux_GT : arg1'=-1, arg2'=1, arg3'=0, (-2+arg2 < 0 /\ 1-arg3 == 0 /\ -5+arg1 > 0), cost: 1
  16: f437_0_loop_aux_GT -> LoAT_sink : (arg3+arg1 >= 0 /\ 5+arg3-arg1 > 0 /\ arg3-arg2 >= 0 /\ -arg3+arg1 >= 0 /\ -arg1-arg2 <= 0 /\ 5-arg3-arg1 > 0), cost: NONTERM
  17: f437_0_loop_aux_GT -> f437_0_loop_aux_GT : arg2'=-arg1, (arg3+arg1 >= 0 /\ 5+arg3-arg1 > 0 /\ arg3-arg2 >= 0 /\ -arg3+arg1 >= 0 /\ 5-arg3-arg1 > 0), cost: 1
  11: f509_0_loop_aux_InvokeMethod -> f437_0_loop_aux_GT : arg1'=arg3, arg2'=-arg3, arg3'=arg2, -arg3+arg1 <= 0, cost: 1
  15: __init -> f437_0_loop_aux_GT : arg1'=20, arg2'=-20, arg3'=arg2p8, (1+arg2p8 > 0), cost: 1

	unrolling

	Original rule:
	f437_0_loop_aux_GT -> f437_0_loop_aux_GT : arg2'=-arg1, arg3'=-arg3, (arg3-arg2 >= 0 /\ -5-arg3+arg1 < 0 /\ arg3-arg1 <= 0), cost: 1
	New rule:
	f437_0_loop_aux_GT -> f437_0_loop_aux_GT : arg2'=-arg1, arg3'=arg3, (-5+arg3+arg1 < 0 /\ arg3-arg2 >= 0 /\ -arg3-arg1 <= 0 /\ -arg3+arg1 >= 0 /\ -5-arg3+arg1 < 0 /\ arg3-arg1 <= 0), cost: 1
	
	Certificate of Non-Termination

	Original rule:
	f437_0_loop_aux_GT -> f437_0_loop_aux_GT : arg2'=-arg1, arg3'=arg3, (-5+arg3+arg1 < 0 /\ arg3-arg2 >= 0 /\ -arg3-arg1 <= 0 /\ -arg3+arg1 >= 0 /\ -5-arg3+arg1 < 0 /\ arg3-arg1 <= 0), cost: 1
	New rule:
	f437_0_loop_aux_GT -> LoAT_sink : (arg3+arg1 >= 0 /\ 5+arg3-arg1 > 0 /\ arg3-arg2 >= 0 /\ -arg3+arg1 >= 0 /\ -arg1-arg2 <= 0 /\ 5-arg3-arg1 > 0), cost: NONTERM

		arg3+arg1 >= 0 [0]: monotonic increase yields arg3+arg1 >= 0
		
		5+arg3-arg1 > 0 [0]: monotonic increase yields 5+arg3-arg1 > 0
		
		arg3-arg2 >= 0 [0]: eventual decrease yields (arg3+arg1 >= 0 /\ arg3-arg2 >= 0)
		
		arg3-arg2 >= 0 [1]: eventual increase yields (arg3-arg2 >= 0 /\ -arg1-arg2 <= 0)
		
		-arg3+arg1 >= 0 [0]: monotonic increase yields -arg3+arg1 >= 0
		
		5-arg3-arg1 > 0 [0]: monotonic increase yields 5-arg3-arg1 > 0
		
		Replacement map: {arg3+arg1 >= 0 -> arg3+arg1 >= 0, 5+arg3-arg1 > 0 -> 5+arg3-arg1 > 0, arg3-arg2 >= 0 -> (arg3-arg2 >= 0 /\ -arg1-arg2 <= 0), -arg3+arg1 >= 0 -> -arg3+arg1 >= 0, 5-arg3-arg1 > 0 -> 5-arg3-arg1 > 0}

	Loop Acceleration

	Original rule:
	f437_0_loop_aux_GT -> f437_0_loop_aux_GT : arg2'=-arg1, arg3'=arg3, (-5+arg3+arg1 < 0 /\ arg3-arg2 >= 0 /\ -arg3-arg1 <= 0 /\ -arg3+arg1 >= 0 /\ -5-arg3+arg1 < 0 /\ arg3-arg1 <= 0), cost: 1
	New rule:
	f437_0_loop_aux_GT -> f437_0_loop_aux_GT : arg2'=-arg1, arg3'=arg3, (arg3+arg1 >= 0 /\ 5+arg3-arg1 > 0 /\ arg3-arg2 >= 0 /\ -1+n >= 0 /\ -arg3+arg1 >= 0 /\ 5-arg3-arg1 > 0), cost: 1

		arg3+arg1 >= 0 [0]: monotonic increase yields arg3+arg1 >= 0
		
		5+arg3-arg1 > 0 [0]: monotonic increase yields 5+arg3-arg1 > 0
		
		arg3-arg2 >= 0 [0]: eventual decrease yields (arg3+arg1 >= 0 /\ arg3-arg2 >= 0)
		
		arg3-arg2 >= 0 [1]: eventual increase yields (arg3-arg2 >= 0 /\ -arg1-arg2 <= 0)
		
		-arg3+arg1 >= 0 [0]: monotonic increase yields -arg3+arg1 >= 0
		
		5-arg3-arg1 > 0 [0]: monotonic increase yields 5-arg3-arg1 > 0
		
		Replacement map: {arg3+arg1 >= 0 -> arg3+arg1 >= 0, 5+arg3-arg1 > 0 -> 5+arg3-arg1 > 0, arg3-arg2 >= 0 -> (arg3+arg1 >= 0 /\ arg3-arg2 >= 0), -arg3+arg1 >= 0 -> -arg3+arg1 >= 0, 5-arg3-arg1 > 0 -> 5-arg3-arg1 > 0}

	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	f437_0_loop_aux_GT -> f437_0_loop_aux_GT : arg2'=-arg1, arg3'=arg3, (arg3+arg1 >= 0 /\ 5+arg3-arg1 > 0 /\ arg3-arg2 >= 0 /\ -1+n >= 0 /\ -arg3+arg1 >= 0 /\ 5-arg3-arg1 > 0), cost: 1
	New rule:
	f437_0_loop_aux_GT -> f437_0_loop_aux_GT : arg2'=-arg1, arg3'=arg3, (arg3+arg1 >= 0 /\ 5+arg3-arg1 > 0 /\ arg3-arg2 >= 0 /\ -arg3+arg1 >= 0 /\ 5-arg3-arg1 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f437_0_loop_aux_GT -> f437_0_loop_aux_GT : arg2'=-arg1, arg3'=arg3, (arg3+arg1 >= 0 /\ 5+arg3-arg1 > 0 /\ arg3-arg2 >= 0 /\ -arg3+arg1 >= 0 /\ 5-arg3-arg1 > 0), cost: 1
	New rule:
	f437_0_loop_aux_GT -> f437_0_loop_aux_GT : arg2'=-arg1, (arg3+arg1 >= 0 /\ 5+arg3-arg1 > 0 /\ arg3-arg2 >= 0 /\ -arg3+arg1 >= 0 /\ 5-arg3-arg1 > 0), cost: 1

	Trace

	15[(1+arg2p8 > 0)]
	
	Blocked

	[{}, {9[T]}]

Step with 12

	Trace

	15[(1+arg2p8 > 0)], 12[(-1+arg3-arg1 < 0 /\ -5+arg3+arg1 >= 0 /\ arg3-arg2 >= 0 /\ -1+arg3 < 0 /\ -5-arg3+arg1 >= 0 /\ arg3-arg1 <= 0)]
	
	Blocked

	[{}, {9[T], 10[T]}, {}]

Nonterm

Start location: __init
Program variables: arg1 arg2 arg3
   9: f437_0_loop_aux_GT -> f509_0_loop_aux_InvokeMethod : arg1'=arg3, arg2'=-arg3, arg3'=arg1, (arg3-arg2 >= 0 /\ -5-arg3+arg1 < 0 /\ arg3-arg1 <= 0), cost: 1
  10: f437_0_loop_aux_GT -> f509_0_loop_aux_InvokeMethod : arg1'=arg3, arg2'=-arg3, arg3'=arg1, (-5+arg3+arg1 < 0 /\ arg3-arg2 >= 0 /\ -5-arg3+arg1 >= 0 /\ arg3-arg1 <= 0), cost: 1
  12: f437_0_loop_aux_GT -> f437_0_loop_aux_GT : arg1'=1+arg1, arg2'=-1-arg1, arg3'=-1+arg3, (-1+arg3-arg1 < 0 /\ -5+arg3+arg1 >= 0 /\ arg3-arg2 >= 0 /\ -1+arg3 < 0 /\ -5-arg3+arg1 >= 0 /\ arg3-arg1 <= 0), cost: 1
  13: f437_0_loop_aux_GT -> f437_0_loop_aux_GT : arg1'=1+arg1, arg2'=-1-arg1, arg3'=-1+arg3, (-1+arg3-arg1 < 0 /\ -5+arg3+arg1 >= 0 /\ arg3-arg2 >= 0 /\ -1+arg3 > 0 /\ -5-arg3+arg1 >= 0 /\ arg3-arg1 <= 0), cost: 1
  14: f437_0_loop_aux_GT -> f437_0_loop_aux_GT : arg1'=-1, arg2'=1, arg3'=0, (-2+arg2 < 0 /\ 1-arg3 == 0 /\ -5+arg1 > 0), cost: 1
  16: f437_0_loop_aux_GT -> LoAT_sink : (arg3+arg1 >= 0 /\ 5+arg3-arg1 > 0 /\ arg3-arg2 >= 0 /\ -arg3+arg1 >= 0 /\ -arg1-arg2 <= 0 /\ 5-arg3-arg1 > 0), cost: NONTERM
  17: f437_0_loop_aux_GT -> f437_0_loop_aux_GT : arg2'=-arg1, (arg3+arg1 >= 0 /\ 5+arg3-arg1 > 0 /\ arg3-arg2 >= 0 /\ -arg3+arg1 >= 0 /\ 5-arg3-arg1 > 0), cost: 1
  18: f437_0_loop_aux_GT -> LoAT_sink : (-1+n1 >= 0 /\ -5+arg3+arg1 >= 0 /\ arg3-arg2 >= 0 /\ 1-arg3 > 0 /\ -arg3+arg1 >= 0 /\ 1-arg3+arg1 > 0 /\ -5-arg3+arg1 >= 0), cost: NONTERM
  19: f437_0_loop_aux_GT -> f437_0_loop_aux_GT : arg1'=n1+arg1, arg2'=-n1-arg1, arg3'=arg3-n1, (-1+n1 >= 0 /\ -5+arg3+arg1 >= 0 /\ arg3-arg2 >= 0 /\ 1-arg3 > 0 /\ -arg3+arg1 >= 0 /\ 1-arg3+arg1 > 0 /\ -5-arg3+arg1 >= 0), cost: 1
  11: f509_0_loop_aux_InvokeMethod -> f437_0_loop_aux_GT : arg1'=arg3, arg2'=-arg3, arg3'=arg2, -arg3+arg1 <= 0, cost: 1
  15: __init -> f437_0_loop_aux_GT : arg1'=20, arg2'=-20, arg3'=arg2p8, (1+arg2p8 > 0), cost: 1

	Certificate of Non-Termination

	Original rule:
	f437_0_loop_aux_GT -> f437_0_loop_aux_GT : arg1'=1+arg1, arg2'=-1-arg1, arg3'=-1+arg3, (-1+arg3-arg1 < 0 /\ -5+arg3+arg1 >= 0 /\ arg3-arg2 >= 0 /\ -1+arg3 < 0 /\ -5-arg3+arg1 >= 0 /\ arg3-arg1 <= 0), cost: 1
	New rule:
	f437_0_loop_aux_GT -> LoAT_sink : (-1+n1 >= 0 /\ -5+arg3+arg1 >= 0 /\ arg3-arg2 >= 0 /\ 1-arg3 > 0 /\ -arg3+arg1 >= 0 /\ 1-arg3+arg1 > 0 /\ -5-arg3+arg1 >= 0), cost: NONTERM

		-5+arg3+arg1 >= 0 [0]: monotonic increase yields -5+arg3+arg1 >= 0
		
		arg3-arg2 >= 0 [0]: monotonic increase yields arg3-arg2 >= 0, dependencies: -5+arg3+arg1 >= 0
		
		1-arg3 > 0 [0]: monotonic increase yields 1-arg3 > 0
		
		-arg3+arg1 >= 0 [0]: monotonic increase yields -arg3+arg1 >= 0, dependencies: -5+arg3+arg1 >= 0 1-arg3 > 0
		
		1-arg3+arg1 > 0 [0]: monotonic increase yields 1-arg3+arg1 > 0, dependencies: -5+arg3+arg1 >= 0 1-arg3 > 0
		
		-5-arg3+arg1 >= 0 [0]: monotonic increase yields -5-arg3+arg1 >= 0, dependencies: -5+arg3+arg1 >= 0 1-arg3 > 0
		
		Replacement map: {-5+arg3+arg1 >= 0 -> -5+arg3+arg1 >= 0, arg3-arg2 >= 0 -> arg3-arg2 >= 0, 1-arg3 > 0 -> 1-arg3 > 0, -arg3+arg1 >= 0 -> -arg3+arg1 >= 0, 1-arg3+arg1 > 0 -> 1-arg3+arg1 > 0, -5-arg3+arg1 >= 0 -> -5-arg3+arg1 >= 0}

	Loop Acceleration

	Original rule:
	f437_0_loop_aux_GT -> f437_0_loop_aux_GT : arg1'=1+arg1, arg2'=-1-arg1, arg3'=-1+arg3, (-1+arg3-arg1 < 0 /\ -5+arg3+arg1 >= 0 /\ arg3-arg2 >= 0 /\ -1+arg3 < 0 /\ -5-arg3+arg1 >= 0 /\ arg3-arg1 <= 0), cost: 1
	New rule:
	f437_0_loop_aux_GT -> f437_0_loop_aux_GT : arg1'=n1+arg1, arg2'=-n1-arg1, arg3'=arg3-n1, (-1+n1 >= 0 /\ -5+arg3+arg1 >= 0 /\ arg3-arg2 >= 0 /\ 1-arg3 > 0 /\ -arg3+arg1 >= 0 /\ 1-arg3+arg1 > 0 /\ -5-arg3+arg1 >= 0), cost: 1

		-5+arg3+arg1 >= 0 [0]: monotonic increase yields -5+arg3+arg1 >= 0
		
		arg3-arg2 >= 0 [0]: monotonic increase yields arg3-arg2 >= 0, dependencies: -5+arg3+arg1 >= 0
		
		1-arg3 > 0 [0]: monotonic increase yields 1-arg3 > 0
		
		-arg3+arg1 >= 0 [0]: monotonic increase yields -arg3+arg1 >= 0, dependencies: -5+arg3+arg1 >= 0 1-arg3 > 0
		
		1-arg3+arg1 > 0 [0]: monotonic increase yields 1-arg3+arg1 > 0, dependencies: -5+arg3+arg1 >= 0 1-arg3 > 0
		
		-5-arg3+arg1 >= 0 [0]: monotonic increase yields -5-arg3+arg1 >= 0, dependencies: -5+arg3+arg1 >= 0 1-arg3 > 0
		
		Replacement map: {-5+arg3+arg1 >= 0 -> -5+arg3+arg1 >= 0, arg3-arg2 >= 0 -> arg3-arg2 >= 0, 1-arg3 > 0 -> 1-arg3 > 0, -arg3+arg1 >= 0 -> -arg3+arg1 >= 0, 1-arg3+arg1 > 0 -> 1-arg3+arg1 > 0, -5-arg3+arg1 >= 0 -> -5-arg3+arg1 >= 0}

Step with 18

	Trace

	15[(1+arg2p8 > 0)], 18[(-1+n1 >= 0 /\ -5+arg3+arg1 >= 0 /\ arg3-arg2 >= 0 /\ 1-arg3 > 0 /\ -arg3+arg1 >= 0 /\ 1-arg3+arg1 > 0 /\ -5-arg3+arg1 >= 0)]
	
	Blocked

	[{}, {9[T], 10[T]}, {18[T]}]

Refute

	Counterexample

	[ arg1=20 arg2=-20 arg3=0 ] 15 [ arg1=arg1 arg2=arg2 arg3=arg3 ] 18
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
