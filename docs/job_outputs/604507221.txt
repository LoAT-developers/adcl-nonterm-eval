NO

Initial ITS

Start location: l5
Program variables: pc_loop^0
   0: l0 -> l1 : pc_loop^0'=pc_loop^post1, -2+pc_loop^post1 == 0, cost: 1
   1: l1 -> l0 : pc_loop^0'=pc_loop^post2, -pc_loop^post2+pc_loop^0 == 0, cost: 1
   2: l2 -> l3 : pc_loop^0'=pc_loop^post3, (-3+pc_loop^1 == 0 /\ -2+pc_loop^post3 == 0), cost: 1
   3: l3 -> l2 : pc_loop^0'=pc_loop^post4, -pc_loop^post4+pc_loop^0 == 0, cost: 1
   4: l4 -> l2 : pc_loop^0'=pc_loop^post5, -2+pc_loop^post5 == 0, cost: 1
   5: l5 -> l4 : pc_loop^0'=pc_loop^post6, -pc_loop^post6+pc_loop^0 == 0, cost: 1

Chained Linear Paths

Start location: l5
Program variables: pc_loop^0
   0: l0 -> l1 : pc_loop^0'=pc_loop^post1, -2+pc_loop^post1 == 0, cost: 1
   1: l1 -> l0 : pc_loop^0'=pc_loop^post2, -pc_loop^post2+pc_loop^0 == 0, cost: 1
   7: l2 -> l2 : pc_loop^0'=pc_loop^post4, (-3+pc_loop^1 == 0 /\ pc_loop^post3-pc_loop^post4 == 0 /\ -2+pc_loop^post3 == 0), cost: 1
   6: l5 -> l2 : pc_loop^0'=pc_loop^post5, (-pc_loop^post6+pc_loop^0 == 0 /\ -2+pc_loop^post5 == 0), cost: 1

	Eliminating location l4 by chaining:

	Applied chaining

	First rule:
	l5 -> l4 : pc_loop^0'=pc_loop^post6, -pc_loop^post6+pc_loop^0 == 0, cost: 1
	Second rule:
	l4 -> l2 : pc_loop^0'=pc_loop^post5, -2+pc_loop^post5 == 0, cost: 1
	New rule:
	l5 -> l2 : pc_loop^0'=pc_loop^post5, (-pc_loop^post6+pc_loop^0 == 0 /\ -2+pc_loop^post5 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 4 5
	
	Eliminating location l3 by chaining:

	Applied chaining

	First rule:
	l2 -> l3 : pc_loop^0'=pc_loop^post3, (-3+pc_loop^1 == 0 /\ -2+pc_loop^post3 == 0), cost: 1
	Second rule:
	l3 -> l2 : pc_loop^0'=pc_loop^post4, -pc_loop^post4+pc_loop^0 == 0, cost: 1
	New rule:
	l2 -> l2 : pc_loop^0'=pc_loop^post4, (-3+pc_loop^1 == 0 /\ pc_loop^post3-pc_loop^post4 == 0 /\ -2+pc_loop^post3 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 2 3

Simplified Transitions

Start location: l5
Program variables: pc_loop^0
   8: l0 -> l1 : pc_loop^0'=2, T, cost: 1
   9: l1 -> l0 : T, cost: 1
  11: l2 -> l2 : pc_loop^0'=2, T, cost: 1
  10: l5 -> l2 : pc_loop^0'=2, T, cost: 1

	Propagated Equalities

	Original rule:
	l0 -> l1 : pc_loop^0'=pc_loop^post1, -2+pc_loop^post1 == 0, cost: 1
	New rule:
	l0 -> l1 : pc_loop^0'=2, 0 == 0, cost: 1
	
		propagated equality pc_loop^post1 = 2
		
	Simplified Guard

	Original rule:
	l0 -> l1 : pc_loop^0'=2, 0 == 0, cost: 1
	New rule:
	l0 -> l1 : pc_loop^0'=2, T, cost: 1
	
	Propagated Equalities

	Original rule:
	l1 -> l0 : pc_loop^0'=pc_loop^post2, -pc_loop^post2+pc_loop^0 == 0, cost: 1
	New rule:
	l1 -> l0 : pc_loop^0'=pc_loop^0, 0 == 0, cost: 1
	
		propagated equality pc_loop^post2 = pc_loop^0
		
	Simplified Guard

	Original rule:
	l1 -> l0 : pc_loop^0'=pc_loop^0, 0 == 0, cost: 1
	New rule:
	l1 -> l0 : pc_loop^0'=pc_loop^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l1 -> l0 : pc_loop^0'=pc_loop^0, T, cost: 1
	New rule:
	l1 -> l0 : T, cost: 1
	
	Propagated Equalities

	Original rule:
	l5 -> l2 : pc_loop^0'=pc_loop^post5, (-pc_loop^post6+pc_loop^0 == 0 /\ -2+pc_loop^post5 == 0), cost: 1
	New rule:
	l5 -> l2 : pc_loop^0'=2, (0 == 0 /\ -pc_loop^post6+pc_loop^0 == 0), cost: 1
	
		propagated equality pc_loop^post5 = 2
		
	Propagated Equalities

	Original rule:
	l5 -> l2 : pc_loop^0'=2, (0 == 0 /\ -pc_loop^post6+pc_loop^0 == 0), cost: 1
	New rule:
	l5 -> l2 : pc_loop^0'=2, 0 == 0, cost: 1
	
		propagated equality pc_loop^post6 = pc_loop^0
		
	Simplified Guard

	Original rule:
	l5 -> l2 : pc_loop^0'=2, 0 == 0, cost: 1
	New rule:
	l5 -> l2 : pc_loop^0'=2, T, cost: 1
	
	Propagated Equalities

	Original rule:
	l2 -> l2 : pc_loop^0'=pc_loop^post4, (-3+pc_loop^1 == 0 /\ pc_loop^post3-pc_loop^post4 == 0 /\ -2+pc_loop^post3 == 0), cost: 1
	New rule:
	l2 -> l2 : pc_loop^0'=pc_loop^post3, (0 == 0 /\ -3+pc_loop^1 == 0 /\ -2+pc_loop^post3 == 0), cost: 1
	
		propagated equality pc_loop^post4 = pc_loop^post3
		
	Propagated Equalities

	Original rule:
	l2 -> l2 : pc_loop^0'=pc_loop^post3, (0 == 0 /\ -3+pc_loop^1 == 0 /\ -2+pc_loop^post3 == 0), cost: 1
	New rule:
	l2 -> l2 : pc_loop^0'=2, 0 == 0, cost: 1
	
		propagated equality pc_loop^1 = 3
		
		propagated equality pc_loop^post3 = 2
		
	Simplified Guard

	Original rule:
	l2 -> l2 : pc_loop^0'=2, 0 == 0, cost: 1
	New rule:
	l2 -> l2 : pc_loop^0'=2, T, cost: 1

Step with 10

	Trace

	10[T]
	
	Blocked

	[{}, {}]

Step with 11

	Trace

	10[T], 11[T]
	
	Blocked

	[{}, {}, {}]

Nonterm

Start location: l5
Program variables: pc_loop^0
   8: l0 -> l1 : pc_loop^0'=2, T, cost: 1
   9: l1 -> l0 : T, cost: 1
  11: l2 -> l2 : pc_loop^0'=2, T, cost: 1
  12: l2 -> LoAT_sink : -1+n >= 0, cost: NONTERM
  10: l5 -> l2 : pc_loop^0'=2, T, cost: 1

	Certificate of Non-Termination

	Original rule:
	l2 -> l2 : pc_loop^0'=2, T, cost: 1
	New rule:
	l2 -> LoAT_sink : -1+n >= 0, cost: NONTERM

		Replacement map: {}

Step with 12

	Trace

	10[T], 12[-1+n >= 0]
	
	Blocked

	[{}, {}, {12[T]}]

Refute

	Counterexample

	[ pc_loop^0=2 ] 10 [ pc_loop^0=pc_loop^0 ] 12
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
