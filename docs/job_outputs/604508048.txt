NO

Initial ITS

Start location: __init
Program variables: arg1 arg2 arg3
   0: f1_0_main_Load -> f192_0_main_NE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (1+arg2 > 0 /\ -1-arg1+arg1p1 <= 0 /\ arg3p1 > 0 /\ -3+arg2p1 > 0 /\ arg1 > 0 /\ -1+arg1p1 > 0 /\ -3+arg2p1-arg1 <= 0), cost: 1
   1: f1_0_main_Load -> f192_0_main_NE : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, (-1+arg2p2 > 0 /\ 1+arg2 > 0 /\ -3+arg1p2 > 0 /\ arg1 > 0 /\ -1+arg2p2-arg1 <= 0 /\ -arg3p2 == 0 /\ -3-arg1+arg1p2 <= 0), cost: 1
   2: f192_0_main_NE -> f192_0_main_NE : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, (3-arg2p3+arg1 >= 0 /\ arg3 > 0 /\ arg3-arg3p3 == 0 /\ arg1 > 0 /\ arg1-arg1p3 >= 0 /\ arg1p3 > 0 /\ -3+arg2p3 > 0 /\ -3+arg2p3-arg2 <= 0 /\ arg2 > 0), cost: 1
   3: f192_0_main_NE -> f192_0_main_NE : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, (arg2p4 > 0 /\ -3-arg1+arg1p4 <= 0 /\ -arg3 == 0 /\ -3+arg1p4-arg2 <= 0 /\ arg1 > 0 /\ -3+arg1p4 > 0 /\ arg2p4-arg2 <= 0 /\ -arg3p4 == 0 /\ arg2 > 0), cost: 1
   4: __init -> f1_0_main_Load : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, T, cost: 1

Simplified Transitions

Start location: __init
Program variables: arg1 arg2 arg3
   0: f1_0_main_Load -> f192_0_main_NE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (1+arg2 > 0 /\ -1-arg1+arg1p1 <= 0 /\ arg3p1 > 0 /\ -3+arg2p1 > 0 /\ arg1 > 0 /\ -1+arg1p1 > 0 /\ -3+arg2p1-arg1 <= 0), cost: 1
   5: f1_0_main_Load -> f192_0_main_NE : arg1'=arg1p2, arg2'=arg2p2, arg3'=0, (-1+arg2p2 > 0 /\ 1+arg2 > 0 /\ -3+arg1p2 > 0 /\ arg1 > 0 /\ -1+arg2p2-arg1 <= 0 /\ -3-arg1+arg1p2 <= 0), cost: 1
   6: f192_0_main_NE -> f192_0_main_NE : arg1'=arg1p3, arg2'=arg2p3, (3-arg2p3+arg1 >= 0 /\ arg3 > 0 /\ arg1 > 0 /\ arg1-arg1p3 >= 0 /\ arg1p3 > 0 /\ -3+arg2p3 > 0 /\ -3+arg2p3-arg2 <= 0 /\ arg2 > 0), cost: 1
   7: f192_0_main_NE -> f192_0_main_NE : arg1'=arg1p4, arg2'=arg2p4, arg3'=0, (arg2p4 > 0 /\ -3-arg1+arg1p4 <= 0 /\ -arg3 == 0 /\ -3+arg1p4-arg2 <= 0 /\ arg1 > 0 /\ -3+arg1p4 > 0 /\ arg2p4-arg2 <= 0 /\ arg2 > 0), cost: 1
   4: __init -> f1_0_main_Load : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, T, cost: 1

	Propagated Equalities

	Original rule:
	f1_0_main_Load -> f192_0_main_NE : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, (-1+arg2p2 > 0 /\ 1+arg2 > 0 /\ -3+arg1p2 > 0 /\ arg1 > 0 /\ -1+arg2p2-arg1 <= 0 /\ -arg3p2 == 0 /\ -3-arg1+arg1p2 <= 0), cost: 1
	New rule:
	f1_0_main_Load -> f192_0_main_NE : arg1'=arg1p2, arg2'=arg2p2, arg3'=0, (0 == 0 /\ -1+arg2p2 > 0 /\ 1+arg2 > 0 /\ -3+arg1p2 > 0 /\ arg1 > 0 /\ -1+arg2p2-arg1 <= 0 /\ -3-arg1+arg1p2 <= 0), cost: 1
	
		propagated equality arg3p2 = 0
		
	Simplified Guard

	Original rule:
	f1_0_main_Load -> f192_0_main_NE : arg1'=arg1p2, arg2'=arg2p2, arg3'=0, (0 == 0 /\ -1+arg2p2 > 0 /\ 1+arg2 > 0 /\ -3+arg1p2 > 0 /\ arg1 > 0 /\ -1+arg2p2-arg1 <= 0 /\ -3-arg1+arg1p2 <= 0), cost: 1
	New rule:
	f1_0_main_Load -> f192_0_main_NE : arg1'=arg1p2, arg2'=arg2p2, arg3'=0, (-1+arg2p2 > 0 /\ 1+arg2 > 0 /\ -3+arg1p2 > 0 /\ arg1 > 0 /\ -1+arg2p2-arg1 <= 0 /\ -3-arg1+arg1p2 <= 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f192_0_main_NE -> f192_0_main_NE : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, (3-arg2p3+arg1 >= 0 /\ arg3 > 0 /\ arg3-arg3p3 == 0 /\ arg1 > 0 /\ arg1-arg1p3 >= 0 /\ arg1p3 > 0 /\ -3+arg2p3 > 0 /\ -3+arg2p3-arg2 <= 0 /\ arg2 > 0), cost: 1
	New rule:
	f192_0_main_NE -> f192_0_main_NE : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3, (0 == 0 /\ 3-arg2p3+arg1 >= 0 /\ arg3 > 0 /\ arg1 > 0 /\ arg1-arg1p3 >= 0 /\ arg1p3 > 0 /\ -3+arg2p3 > 0 /\ -3+arg2p3-arg2 <= 0 /\ arg2 > 0), cost: 1
	
		propagated equality arg3p3 = arg3
		
	Simplified Guard

	Original rule:
	f192_0_main_NE -> f192_0_main_NE : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3, (0 == 0 /\ 3-arg2p3+arg1 >= 0 /\ arg3 > 0 /\ arg1 > 0 /\ arg1-arg1p3 >= 0 /\ arg1p3 > 0 /\ -3+arg2p3 > 0 /\ -3+arg2p3-arg2 <= 0 /\ arg2 > 0), cost: 1
	New rule:
	f192_0_main_NE -> f192_0_main_NE : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3, (3-arg2p3+arg1 >= 0 /\ arg3 > 0 /\ arg1 > 0 /\ arg1-arg1p3 >= 0 /\ arg1p3 > 0 /\ -3+arg2p3 > 0 /\ -3+arg2p3-arg2 <= 0 /\ arg2 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f192_0_main_NE -> f192_0_main_NE : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3, (3-arg2p3+arg1 >= 0 /\ arg3 > 0 /\ arg1 > 0 /\ arg1-arg1p3 >= 0 /\ arg1p3 > 0 /\ -3+arg2p3 > 0 /\ -3+arg2p3-arg2 <= 0 /\ arg2 > 0), cost: 1
	New rule:
	f192_0_main_NE -> f192_0_main_NE : arg1'=arg1p3, arg2'=arg2p3, (3-arg2p3+arg1 >= 0 /\ arg3 > 0 /\ arg1 > 0 /\ arg1-arg1p3 >= 0 /\ arg1p3 > 0 /\ -3+arg2p3 > 0 /\ -3+arg2p3-arg2 <= 0 /\ arg2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f192_0_main_NE -> f192_0_main_NE : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, (arg2p4 > 0 /\ -3-arg1+arg1p4 <= 0 /\ -arg3 == 0 /\ -3+arg1p4-arg2 <= 0 /\ arg1 > 0 /\ -3+arg1p4 > 0 /\ arg2p4-arg2 <= 0 /\ -arg3p4 == 0 /\ arg2 > 0), cost: 1
	New rule:
	f192_0_main_NE -> f192_0_main_NE : arg1'=arg1p4, arg2'=arg2p4, arg3'=0, (0 == 0 /\ arg2p4 > 0 /\ -3-arg1+arg1p4 <= 0 /\ -arg3 == 0 /\ -3+arg1p4-arg2 <= 0 /\ arg1 > 0 /\ -3+arg1p4 > 0 /\ arg2p4-arg2 <= 0 /\ arg2 > 0), cost: 1
	
		propagated equality arg3p4 = 0
		
	Simplified Guard

	Original rule:
	f192_0_main_NE -> f192_0_main_NE : arg1'=arg1p4, arg2'=arg2p4, arg3'=0, (0 == 0 /\ arg2p4 > 0 /\ -3-arg1+arg1p4 <= 0 /\ -arg3 == 0 /\ -3+arg1p4-arg2 <= 0 /\ arg1 > 0 /\ -3+arg1p4 > 0 /\ arg2p4-arg2 <= 0 /\ arg2 > 0), cost: 1
	New rule:
	f192_0_main_NE -> f192_0_main_NE : arg1'=arg1p4, arg2'=arg2p4, arg3'=0, (arg2p4 > 0 /\ -3-arg1+arg1p4 <= 0 /\ -arg3 == 0 /\ -3+arg1p4-arg2 <= 0 /\ arg1 > 0 /\ -3+arg1p4 > 0 /\ arg2p4-arg2 <= 0 /\ arg2 > 0), cost: 1

Step with 4

	Trace

	4[T]
	
	Blocked

	[{}, {}]

Step with 0

	Trace

	4[T], 0[(1+arg2 > 0 /\ -1-arg1+arg1p1 <= 0 /\ arg3p1 > 0 /\ -3+arg2p1 > 0 /\ arg1 > 0 /\ -1+arg1p1 > 0 /\ -3+arg2p1-arg1 <= 0)]
	
	Blocked

	[{}, {}, {}]

Step with 6

	Trace

	4[T], 0[(1+arg2 > 0 /\ -1-arg1+arg1p1 <= 0 /\ arg3p1 > 0 /\ -3+arg2p1 > 0 /\ arg1 > 0 /\ -1+arg1p1 > 0 /\ -3+arg2p1-arg1 <= 0)], 6[(3-arg2p3+arg1 >= 0 /\ arg3 > 0 /\ arg1 > 0 /\ arg1-arg1p3 >= 0 /\ arg1p3 > 0 /\ -3+arg2p3 > 0 /\ -3+arg2p3-arg2 <= 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {}, {}]

Nonterm

Start location: __init
Program variables: arg1 arg2 arg3
   0: f1_0_main_Load -> f192_0_main_NE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (1+arg2 > 0 /\ -1-arg1+arg1p1 <= 0 /\ arg3p1 > 0 /\ -3+arg2p1 > 0 /\ arg1 > 0 /\ -1+arg1p1 > 0 /\ -3+arg2p1-arg1 <= 0), cost: 1
   5: f1_0_main_Load -> f192_0_main_NE : arg1'=arg1p2, arg2'=arg2p2, arg3'=0, (-1+arg2p2 > 0 /\ 1+arg2 > 0 /\ -3+arg1p2 > 0 /\ arg1 > 0 /\ -1+arg2p2-arg1 <= 0 /\ -3-arg1+arg1p2 <= 0), cost: 1
   6: f192_0_main_NE -> f192_0_main_NE : arg1'=arg1p3, arg2'=arg2p3, (3-arg2p3+arg1 >= 0 /\ arg3 > 0 /\ arg1 > 0 /\ arg1-arg1p3 >= 0 /\ arg1p3 > 0 /\ -3+arg2p3 > 0 /\ -3+arg2p3-arg2 <= 0 /\ arg2 > 0), cost: 1
   7: f192_0_main_NE -> f192_0_main_NE : arg1'=arg1p4, arg2'=arg2p4, arg3'=0, (arg2p4 > 0 /\ -3-arg1+arg1p4 <= 0 /\ -arg3 == 0 /\ -3+arg1p4-arg2 <= 0 /\ arg1 > 0 /\ -3+arg1p4 > 0 /\ arg2p4-arg2 <= 0 /\ arg2 > 0), cost: 1
   8: f192_0_main_NE -> LoAT_sink : (3-arg2p3+arg1 >= 0 /\ arg3 > 0 /\ arg1 > 0 /\ arg1-arg1p3 <= 0 /\ arg1-arg1p3 >= 0 /\ arg1p3 > 0 /\ -3+arg2p3 > 0 /\ 3-arg2p3+arg2 >= 0 /\ arg2 > 0), cost: NONTERM
   4: __init -> f1_0_main_Load : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, T, cost: 1

	Certificate of Non-Termination

	Original rule:
	f192_0_main_NE -> f192_0_main_NE : arg1'=arg1p3, arg2'=arg2p3, (3-arg2p3+arg1 >= 0 /\ arg3 > 0 /\ arg1 > 0 /\ arg1-arg1p3 >= 0 /\ arg1p3 > 0 /\ -3+arg2p3 > 0 /\ -3+arg2p3-arg2 <= 0 /\ arg2 > 0), cost: 1
	New rule:
	f192_0_main_NE -> LoAT_sink : (3-arg2p3+arg1 >= 0 /\ arg3 > 0 /\ arg1 > 0 /\ arg1-arg1p3 <= 0 /\ arg1-arg1p3 >= 0 /\ arg1p3 > 0 /\ -3+arg2p3 > 0 /\ 3-arg2p3+arg2 >= 0 /\ arg2 > 0), cost: NONTERM

		3-arg2p3+arg1 >= 0 [0]: montonic decrease yields 3-arg2p3+arg1p3 >= 0, dependencies: arg1-arg1p3 >= 0
		
		3-arg2p3+arg1 >= 0 [1]: eventual decrease yields (3-arg2p3+arg1 >= 0 /\ 3-arg2p3+arg1p3 >= 0)
		
		3-arg2p3+arg1 >= 0 [2]: eventual increase yields (3-arg2p3+arg1 >= 0 /\ arg1-arg1p3 <= 0)
		
		arg3 > 0 [0]: monotonic increase yields arg3 > 0
		
		arg1 > 0 [0]: montonic decrease yields arg1p3 > 0, dependencies: arg1-arg1p3 >= 0
		
		arg1 > 0 [1]: eventual decrease yields (arg1 > 0 /\ arg1p3 > 0)
		
		arg1 > 0 [2]: eventual increase yields (arg1 > 0 /\ arg1-arg1p3 <= 0)
		
		arg1-arg1p3 >= 0 [0]: monotonic increase yields arg1-arg1p3 >= 0
		
		arg1p3 > 0 [0]: monotonic increase yields arg1p3 > 0
		
		-3+arg2p3 > 0 [0]: monotonic increase yields -3+arg2p3 > 0
		
		3-arg2p3+arg2 >= 0 [0]: monotonic increase yields 3-arg2p3+arg2 >= 0
		
		arg2 > 0 [0]: monotonic increase yields arg2 > 0, dependencies: -3+arg2p3 > 0
		
		Replacement map: {3-arg2p3+arg1 >= 0 -> (3-arg2p3+arg1 >= 0 /\ arg1-arg1p3 <= 0), arg3 > 0 -> arg3 > 0, arg1 > 0 -> (arg1 > 0 /\ arg1-arg1p3 <= 0), arg1-arg1p3 >= 0 -> arg1-arg1p3 >= 0, arg1p3 > 0 -> arg1p3 > 0, -3+arg2p3 > 0 -> -3+arg2p3 > 0, 3-arg2p3+arg2 >= 0 -> 3-arg2p3+arg2 >= 0, arg2 > 0 -> arg2 > 0}

Step with 8

	Trace

	4[T], 0[(1+arg2 > 0 /\ -1-arg1+arg1p1 <= 0 /\ arg3p1 > 0 /\ -3+arg2p1 > 0 /\ arg1 > 0 /\ -1+arg1p1 > 0 /\ -3+arg2p1-arg1 <= 0)], 8[(3-arg2p3+arg1 >= 0 /\ arg3 > 0 /\ arg1 > 0 /\ arg1-arg1p3 <= 0 /\ arg1-arg1p3 >= 0 /\ arg1p3 > 0 /\ -3+arg2p3 > 0 /\ 3-arg2p3+arg2 >= 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {}, {8[T]}]

Refute

	Counterexample

	[ arg1=1 arg2=0 arg3=0 ] 4 [ arg1=2 arg2=4 arg3=1 ] 0 [ arg1=arg1 arg2=arg2 arg3=arg3 ] 8
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
