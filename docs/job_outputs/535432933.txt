NO

Initial ITS
Start location: l5
   0: l0 -> l1 : pc_Loop^0'=pc_Loop^post0, -2+pc_Loop^post0 == 0, cost: 1
   1: l1 -> l0 : pc_Loop^0'=pc_Loop^post1, -pc_Loop^post1+pc_Loop^0 == 0, cost: 1
   2: l2 -> l3 : pc_Loop^0'=pc_Loop^post2, (-2+pc_Loop^post2 == 0 /\ -3+pc_Loop^10 == 0), cost: 1
   3: l3 -> l2 : pc_Loop^0'=pc_Loop^post3, pc_Loop^0-pc_Loop^post3 == 0, cost: 1
   4: l4 -> l2 : pc_Loop^0'=pc_Loop^post4, -2+pc_Loop^post4 == 0, cost: 1
   5: l5 -> l4 : pc_Loop^0'=pc_Loop^post5, -pc_Loop^post5+pc_Loop^0 == 0, cost: 1


Removed unreachable rules and leafs
Start location: l5
   2: l2 -> l3 : pc_Loop^0'=pc_Loop^post2, (-2+pc_Loop^post2 == 0 /\ -3+pc_Loop^10 == 0), cost: 1
   3: l3 -> l2 : pc_Loop^0'=pc_Loop^post3, pc_Loop^0-pc_Loop^post3 == 0, cost: 1
   4: l4 -> l2 : pc_Loop^0'=pc_Loop^post4, -2+pc_Loop^post4 == 0, cost: 1
   5: l5 -> l4 : pc_Loop^0'=pc_Loop^post5, -pc_Loop^post5+pc_Loop^0 == 0, cost: 1


Applied preprocessing
Original rule:
l2 -> l3 : pc_Loop^0'=pc_Loop^post2, (-2+pc_Loop^post2 == 0 /\ -3+pc_Loop^10 == 0), cost: 1
New rule:
l2 -> l3 : pc_Loop^0'=2, TRUE, cost: 1

Applied preprocessing
Original rule:
l3 -> l2 : pc_Loop^0'=pc_Loop^post3, pc_Loop^0-pc_Loop^post3 == 0, cost: 1
New rule:
l3 -> l2 : TRUE, cost: 1

Applied preprocessing
Original rule:
l4 -> l2 : pc_Loop^0'=pc_Loop^post4, -2+pc_Loop^post4 == 0, cost: 1
New rule:
l4 -> l2 : pc_Loop^0'=2, TRUE, cost: 1

Applied preprocessing
Original rule:
l5 -> l4 : pc_Loop^0'=pc_Loop^post5, -pc_Loop^post5+pc_Loop^0 == 0, cost: 1
New rule:
l5 -> l4 : TRUE, cost: 1

Simplified rules
Start location: l5
   6: l2 -> l3 : pc_Loop^0'=2, TRUE, cost: 1
   7: l3 -> l2 : TRUE, cost: 1
   8: l4 -> l2 : pc_Loop^0'=2, TRUE, cost: 1
   9: l5 -> l4 : TRUE, cost: 1


Eliminating location l4 by chaining:

Applied chaining
First rule:
l5 -> l4 : TRUE, cost: 1
Second rule:
l4 -> l2 : pc_Loop^0'=2, TRUE, cost: 1
New rule:
l5 -> l2 : pc_Loop^0'=2, TRUE, cost: 2

Applied deletion
Removed the following rules: 8 9

Eliminating location l3 by chaining:

Applied chaining
First rule:
l2 -> l3 : pc_Loop^0'=2, TRUE, cost: 1
Second rule:
l3 -> l2 : TRUE, cost: 1
New rule:
l2 -> l2 : pc_Loop^0'=2, TRUE, cost: 2

Applied deletion
Removed the following rules: 6 7

Eliminated locations on linear paths
Start location: l5
  11: l2 -> l2 : pc_Loop^0'=2, TRUE, cost: 2
  10: l5 -> l2 : pc_Loop^0'=2, TRUE, cost: 2


Applied nonterm
Original rule:
l2 -> l2 : pc_Loop^0'=2, TRUE, cost: 2
New rule:
l2 -> [6] : -1+n >= 0, cost: NONTERM
Sub-proof via acceration calculus written to file:///tmp/tmpnam_KeGBPL.txt

Applied deletion
Removed the following rules: 11

Accelerated simple loops
Start location: l5
  12: l2 -> [6] : -1+n >= 0, cost: NONTERM
  10: l5 -> l2 : pc_Loop^0'=2, TRUE, cost: 2


Applied chaining
First rule:
l5 -> l2 : pc_Loop^0'=2, TRUE, cost: 2
Second rule:
l2 -> [6] : -1+n >= 0, cost: NONTERM
New rule:
l5 -> [6] : TRUE, cost: NONTERM

Applied deletion
Removed the following rules: 12

Chained accelerated rules with incoming rules
Start location: l5
  10: l5 -> l2 : pc_Loop^0'=2, TRUE, cost: 2
  13: l5 -> [6] : TRUE, cost: NONTERM


Removed unreachable locations and irrelevant leafs
Start location: l5
  13: l5 -> [6] : TRUE, cost: NONTERM


Computing asymptotic complexity
Proved nontermination of rule 13 via SMT.

Proved the following lower bound
Complexity:  Nonterm
Cpx degree: Nonterm

Solved cost: NONTERM
Rule cost:   NONTERM
Rule guard:  TRUE
