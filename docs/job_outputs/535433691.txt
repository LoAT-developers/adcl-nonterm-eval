NO

Initial ITS
Start location: __init
   0: f1_0_main_New -> f81_0_loop_InvokeMethod : arg1'=arg1P0, 1+arg1P0 > 0, cost: 1
   1: f81_0_loop_InvokeMethod -> f81_0_loop_InvokeMethod : arg1'=arg1P1, (1+arg1P1 > 0 /\ arg1 > 0), cost: 1
   2: __init -> f1_0_main_New : arg1'=arg1P2, TRUE, cost: 1


Applied acceleration
Original rule:
f81_0_loop_InvokeMethod -> f81_0_loop_InvokeMethod : arg1'=arg1P1, (1+arg1P1 > 0 /\ arg1 > 0), cost: 1
New rule:
f81_0_loop_InvokeMethod -> f81_0_loop_InvokeMethod : arg1'=arg1P1, (1+arg1P1 > 0 /\ arg1P1 > 0 /\ -1+n >= 0 /\ arg1 > 0), cost: n
Sub-proof via acceration calculus written to file:///tmp/tmpnam_pDcEFF.txt

Applied nonterm
Original rule:
f81_0_loop_InvokeMethod -> f81_0_loop_InvokeMethod : arg1'=arg1P1, (1+arg1P1 > 0 /\ arg1 > 0), cost: 1
New rule:
f81_0_loop_InvokeMethod -> [3] : (1+arg1P1 > 0 /\ arg1 > 0 /\ -arg1P1+arg1 <= 0), cost: NONTERM
Sub-proof via acceration calculus written to file:///tmp/tmpnam_EPMKKJ.txt

Applied simplification
Original rule:
f81_0_loop_InvokeMethod -> f81_0_loop_InvokeMethod : arg1'=arg1P1, (1+arg1P1 > 0 /\ arg1P1 > 0 /\ -1+n >= 0 /\ arg1 > 0), cost: n
New rule:
f81_0_loop_InvokeMethod -> f81_0_loop_InvokeMethod : arg1'=arg1P1, (arg1P1 > 0 /\ -1+n >= 0 /\ arg1 > 0), cost: n

Applied simplification
Original rule:
f81_0_loop_InvokeMethod -> [3] : (1+arg1P1 > 0 /\ arg1 > 0 /\ -arg1P1+arg1 <= 0), cost: NONTERM
New rule:
f81_0_loop_InvokeMethod -> [3] : (arg1 > 0 /\ -arg1P1+arg1 <= 0), cost: NONTERM

Applied deletion
Removed the following rules: 1

Accelerated simple loops
Start location: __init
   0: f1_0_main_New -> f81_0_loop_InvokeMethod : arg1'=arg1P0, 1+arg1P0 > 0, cost: 1
   5: f81_0_loop_InvokeMethod -> f81_0_loop_InvokeMethod : arg1'=arg1P1, (arg1P1 > 0 /\ -1+n >= 0 /\ arg1 > 0), cost: n
   6: f81_0_loop_InvokeMethod -> [3] : (arg1 > 0 /\ -arg1P1+arg1 <= 0), cost: NONTERM
   2: __init -> f1_0_main_New : arg1'=arg1P2, TRUE, cost: 1


Applied chaining
First rule:
f1_0_main_New -> f81_0_loop_InvokeMethod : arg1'=arg1P0, 1+arg1P0 > 0, cost: 1
Second rule:
f81_0_loop_InvokeMethod -> f81_0_loop_InvokeMethod : arg1'=arg1P1, (arg1P1 > 0 /\ -1+n >= 0 /\ arg1 > 0), cost: n
New rule:
f1_0_main_New -> f81_0_loop_InvokeMethod : arg1'=arg1P1, (arg1P1 > 0 /\ -1+n >= 0), cost: 1+n

Applied chaining
First rule:
f1_0_main_New -> f81_0_loop_InvokeMethod : arg1'=arg1P0, 1+arg1P0 > 0, cost: 1
Second rule:
f81_0_loop_InvokeMethod -> [3] : (arg1 > 0 /\ -arg1P1+arg1 <= 0), cost: NONTERM
New rule:
f1_0_main_New -> [3] : TRUE, cost: NONTERM

Applied deletion
Removed the following rules: 5 6

Chained accelerated rules with incoming rules
Start location: __init
   0: f1_0_main_New -> f81_0_loop_InvokeMethod : arg1'=arg1P0, 1+arg1P0 > 0, cost: 1
   7: f1_0_main_New -> f81_0_loop_InvokeMethod : arg1'=arg1P1, (arg1P1 > 0 /\ -1+n >= 0), cost: 1+n
   8: f1_0_main_New -> [3] : TRUE, cost: NONTERM
   2: __init -> f1_0_main_New : arg1'=arg1P2, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
   8: f1_0_main_New -> [3] : TRUE, cost: NONTERM
   2: __init -> f1_0_main_New : arg1'=arg1P2, TRUE, cost: 1


Eliminating location f1_0_main_New by chaining:

Applied chaining
First rule:
__init -> f1_0_main_New : arg1'=arg1P2, TRUE, cost: 1
Second rule:
f1_0_main_New -> [3] : TRUE, cost: NONTERM
New rule:
__init -> [3] : TRUE, cost: NONTERM

Applied deletion
Removed the following rules: 2 8

Eliminated locations on linear paths
Start location: __init
   9: __init -> [3] : TRUE, cost: NONTERM


Computing asymptotic complexity
Proved nontermination of rule 9 via SMT.

Proved the following lower bound
Complexity:  Nonterm
Cpx degree: Nonterm

Solved cost: NONTERM
Rule cost:   NONTERM
Rule guard:  TRUE
