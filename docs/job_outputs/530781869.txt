YES

Solver Timeout: 4
Global Timeout: 300
No parsing errors!
Init Location: 0
Transitions:
<l0, l3, true>
<l1, l2, (undef1 <= arg1) /\ (arg2 > ~(1)) /\ (arg1 > 0) /\ (undef1 > 0), par{arg1 -> undef1, arg2 -> 0, arg3 -> arg2}>
<l2, l2, (arg3 > arg2) /\ (arg3 > ~(1)) /\ (undef4 <= arg1) /\ (arg1 > 0) /\ (undef4 > 0), par{arg1 -> undef4, arg2 -> (arg2 + 1)}>
<l3, l1, true, par{arg1 -> undef7, arg2 -> undef8, arg3 -> undef9}>

Fresh variables:
undef1, undef4, undef7, undef8, undef9, 

Undef variables:
undef1, undef4, undef7, undef8, undef9, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l2, (arg1 = undef1) /\ (arg2 = 0) /\ (arg3 = undef8) /\ (undef1 <= undef7) /\ (undef8 > ~(1)) /\ (undef7 > 0) /\ (undef1 > 0)>
<l2, l2, (arg3 > arg2) /\ (arg3 > ~(1)) /\ (undef4 <= arg1) /\ (arg1 > 0) /\ (undef4 > 0), par{arg1 -> undef4, arg2 -> (arg2 + 1)}>

Fresh variables:
undef1, undef4, undef7, undef8, undef9, 

Undef variables:
undef1, undef4, undef7, undef8, undef9, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l2, l2, 1 <= arg1 /\ 1 + arg2 <= arg3 /\ 1 <= undef4 /\ undef4 <= arg1 /\ 0 <= arg3, {arg1 -> undef4, arg2 -> 1 + arg2, rest remain the same}>
Variables:
arg1, arg2, arg3

Precedence: 
Graph 0

Graph 1
<l0, l2, 1 <= undef1 /\ 1 <= undef7 /\ undef1 <= undef7 /\ 0 <= undef8 /\ arg1 = undef1 /\ arg2 = 0 /\ arg3 = undef8, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 2 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.00336

Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.001039s
[33mRanking function: [36m-1 - arg2 + arg3[0m
New Graphs: 
[32mProgram Terminates[0m
