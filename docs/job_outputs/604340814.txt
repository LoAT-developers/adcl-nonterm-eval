YES

Solver Timeout: 4
Global Timeout: 300
Maximum number of concurrent processes: 900
*******************************************************************************************
*********************** UNPROCESSED TRANSITION SYSTEMS PER FUNCTION ***********************
*******************************************************************************************


List of LLVMGraphs + assumeNodes + staticAssertNodes [1] :

+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++
+                                                                  +
Init Location: 0
Transitions:
<l0, l1, true, seq{main__func_return_ -> 0, main_x -> Â¿functionCall(__VERIFIER_nondet_int), main_y -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l1, l2, true>
<l2, l16, not((main_x > 0))>
<l2, l3, (main_x > 0)>
<l3, l16, not((main_y > 0))>
<l3, l4, (main_y > 0)>
<l4, l5, (main_x > main_y)>
<l4, l10, not((main_x > main_y))>
<l5, l6, true>
<l6, l9, not((main_x > 0))>
<l6, l7, (main_x > 0)>
<l7, l8, true, seq{main_x -> (main_x - 1)}>
<l8, l6, true>
<l9, l15, true>
<l10, l11, true>
<l11, l14, not((main_y > 0))>
<l11, l12, (main_y > 0)>
<l12, l13, true, seq{main_y -> (main_y - 1)}>
<l13, l11, true>
<l14, l15, true>
<l15, l2, true>
<l16, l17, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

+ Assume Nodes [0]: ++++++++++++++++++++++++++++++++++++++++++++++++
       
+ Static Assert Nodes [0]: +++++++++++++++++++++++++++++++++++++++++
       
+ After preprocess (paralelization): ++++++++++++++++++++++++++++++

Init Location: 0
Transitions:
<l0, l18, true, seq{main__func_return_ -> 0}>
<l18, l19, true, seq{varCall_1 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l19, l20, true, seq{main_x -> varCall_1}>
<l20, l21, true, seq{varCall_2 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l21, l1, true, seq{main_y -> varCall_2}>
<l1, l2, true>
<l2, l3, (main_x > 0)>
<l2, l16, not((main_x > 0))>
<l3, l4, (main_y > 0)>
<l3, l16, not((main_y > 0))>
<l4, l5, (main_x > main_y)>
<l4, l10, not((main_x > main_y))>
<l5, l6, true>
<l6, l7, (main_x > 0)>
<l6, l9, not((main_x > 0))>
<l7, l8, true, seq{main_x -> (main_x - 1)}>
<l8, l6, true>
<l9, l15, true>
<l10, l11, true>
<l11, l12, (main_y > 0)>
<l11, l14, not((main_y > 0))>
<l12, l13, true, seq{main_y -> (main_y - 1)}>
<l13, l11, true>
<l14, l15, true>
<l15, l2, true>
<l16, l17, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:
17, 
Accepting locations:

Asserts:

+                                                                  +
+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++


Function Return and Parameters Information [2 functions]:
    function name: __VERIFIER_nondet_int [1 return + 0 parameters]        demangled: __VERIFIER_nondet_int
        __VERIFIER_nondet_int__func_return_      [function result] : int
    function name: main [1 return + 0 parameters]        demangled: main
        main__func_return_      [function result] : int


AST Ident Scanner Information [4 idents]:
__VERIFIER_nondet_int | function | [integer, ()] | <line: 3, col: 1> | <line: 7, col: 9> <line: 8, col: 9>
main | function | [integer, ()] | <line: 5, col: 1>
x | local variable | integer | <line: 6, col: 5> | <line: 7, col: 5> <line: 9, col: 13> <line: 10, col: 13> <line: 11, col: 20> <line: 12, col: 17> <line: 12, col: 21>
y | local variable | integer | <line: 6, col: 5> | <line: 8, col: 5> <line: 9, col: 24> <line: 10, col: 17> <line: 15, col: 20> <line: 16, col: 17> <line: 16, col: 21>

Main function: main
Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l6, (main_x = undef3) /\ (main_y = undef4) /\ (undef3 > 0) /\ (undef4 > 0) /\ (undef3 > undef4)>
<l0, l11, (main_x = undef3) /\ (main_y = undef4) /\ (undef3 > 0) /\ (undef4 > 0) /\ not((undef3 > undef4))>
<l0, l17, (main_x = undef3) /\ (main_y = undef4) /\ (undef3 > 0) /\ not((undef4 > 0))>
<l0, l17, (main_x = undef3) /\ (main_y = undef4) /\ not((undef3 > 0))>
<l6, l6, (main_x > 0), par{main_x -> (main_x - 1)}>
<l6, l17, not((main_x > 0)) /\ not((main_x > 0))>
<l11, l11, (main_y > 0), par{main_y -> (main_y - 1)}>
<l11, l17, not((main_y > 0)) /\ (main_x > 0) /\ not((main_y > 0))>
<l11, l17, not((main_y > 0)) /\ not((main_x > 0))>

Fresh variables:
undef3, undef4, 

Undef variables:
undef3, undef4, 

Abstraction variables:

Exit nodes:
17, 
Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l11, l11, 1 <= main_y, {main_y -> -1 + main_y, rest remain the same}>
Variables:
main_y

Graph 2:
Transitions:
<l6, l6, 1 <= main_x, {main_x -> -1 + main_x, rest remain the same}>
Variables:
main_x

Graph 3:
Transitions:
Variables:

Precedence: 
Graph 0

Graph 1
<l0, l11, undef3 <= undef4 /\ 1 <= undef3 /\ 1 <= undef4 /\ main_x = undef3 /\ main_y = undef4, {all remain the same}>

Graph 2
<l0, l6, 1 <= undef3 /\ 1 + undef4 <= undef3 /\ 1 <= undef4 /\ main_x = undef3 /\ main_y = undef4, {all remain the same}>

Graph 3
<l0, l17, undef4 <= 0 /\ 1 <= undef3 /\ main_x = undef3 /\ main_y = undef4, {all remain the same}>
<l0, l17, undef3 <= 0 /\ main_x = undef3 /\ main_y = undef4, {all remain the same}>
<l6, l17, main_x <= 0, {all remain the same}>
<l11, l17, main_y <= 0 /\ 1 <= main_x, {all remain the same}>
<l11, l17, main_x <= 0 /\ main_y <= 0, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 6 , 2 )
( 11 , 1 )
( 17 , 3 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.001057

Checking conditional termination of SCC {l11}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000346s
[33mRanking function: [36m-1 + main_y[0m
New Graphs: 
Proving termination of subgraph 2
Checking unfeasibility...
Time used: 0.000962

Checking conditional termination of SCC {l6}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000365s
[33mRanking function: [36m-1 + main_x[0m
New Graphs: 
Proving termination of subgraph 3
Analyzing SCC {l17}...
No cycles found.

[32mProgram Terminates[0m
