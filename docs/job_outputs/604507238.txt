NO

Initial ITS

Start location: l4
Program variables: x^0 y^0
   0: l0 -> l1 : x^0'=x^post1, y^0'=y^post1, (y^0-y^post1 == 0 /\ 1+x^0 <= 0 /\ -x^post1+x^0 == 0), cost: 1
   1: l0 -> l2 : x^0'=x^post2, y^0'=y^post2, (-y^post2+y^0 == 0 /\ -x^0 <= 0 /\ y^0-x^0+x^post2 == 0), cost: 1
   2: l2 -> l0 : x^0'=x^post3, y^0'=y^post3, (-x^post3+x^0 == 0 /\ y^0-y^post3 == 0), cost: 1
   3: l3 -> l0 : x^0'=x^post4, y^0'=y^post4, (-x^post4+x^0 == 0 /\ 1-x^0 <= 0 /\ y^0-y^post4 == 0 /\ 1+y^0+x^0 <= 0), cost: 1
   4: l4 -> l3 : x^0'=x^post5, y^0'=y^post5, (x^0-x^post5 == 0 /\ -y^post5+y^0 == 0), cost: 1

Chained Linear Paths

Start location: l4
Program variables: x^0 y^0
   0: l0 -> l1 : x^0'=x^post1, y^0'=y^post1, (y^0-y^post1 == 0 /\ 1+x^0 <= 0 /\ -x^post1+x^0 == 0), cost: 1
   6: l0 -> l0 : x^0'=x^post3, y^0'=y^post3, (-y^post2+y^0 == 0 /\ -x^post3+x^post2 == 0 /\ -x^0 <= 0 /\ y^post2-y^post3 == 0 /\ y^0-x^0+x^post2 == 0), cost: 1
   5: l4 -> l0 : x^0'=x^post4, y^0'=y^post4, (1+y^post5+x^post5 <= 0 /\ x^0-x^post5 == 0 /\ 1-x^post5 <= 0 /\ y^post5-y^post4 == 0 /\ -y^post5+y^0 == 0 /\ -x^post4+x^post5 == 0), cost: 1

	Eliminating location l3 by chaining:

	Applied chaining

	First rule:
	l4 -> l3 : x^0'=x^post5, y^0'=y^post5, (x^0-x^post5 == 0 /\ -y^post5+y^0 == 0), cost: 1
	Second rule:
	l3 -> l0 : x^0'=x^post4, y^0'=y^post4, (-x^post4+x^0 == 0 /\ 1-x^0 <= 0 /\ y^0-y^post4 == 0 /\ 1+y^0+x^0 <= 0), cost: 1
	New rule:
	l4 -> l0 : x^0'=x^post4, y^0'=y^post4, (1+y^post5+x^post5 <= 0 /\ x^0-x^post5 == 0 /\ 1-x^post5 <= 0 /\ y^post5-y^post4 == 0 /\ -y^post5+y^0 == 0 /\ -x^post4+x^post5 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 3 4
	
	Eliminating location l2 by chaining:

	Applied chaining

	First rule:
	l0 -> l2 : x^0'=x^post2, y^0'=y^post2, (-y^post2+y^0 == 0 /\ -x^0 <= 0 /\ y^0-x^0+x^post2 == 0), cost: 1
	Second rule:
	l2 -> l0 : x^0'=x^post3, y^0'=y^post3, (-x^post3+x^0 == 0 /\ y^0-y^post3 == 0), cost: 1
	New rule:
	l0 -> l0 : x^0'=x^post3, y^0'=y^post3, (-y^post2+y^0 == 0 /\ -x^post3+x^post2 == 0 /\ -x^0 <= 0 /\ y^post2-y^post3 == 0 /\ y^0-x^0+x^post2 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 1 2

Simplified Transitions

Start location: l4
Program variables: x^0 y^0
   7: l0 -> l1 : 1+x^0 <= 0, cost: 1
   9: l0 -> l0 : x^0'=-y^0+x^0, -x^0 <= 0, cost: 1
   8: l4 -> l0 : (1-x^0 <= 0 /\ 1+y^0+x^0 <= 0), cost: 1

	Propagated Equalities

	Original rule:
	l0 -> l1 : x^0'=x^post1, y^0'=y^post1, (y^0-y^post1 == 0 /\ 1+x^0 <= 0 /\ -x^post1+x^0 == 0), cost: 1
	New rule:
	l0 -> l1 : x^0'=x^0, y^0'=y^0, (0 == 0 /\ 1+x^0 <= 0), cost: 1
	
		propagated equality y^post1 = y^0
		
		propagated equality x^post1 = x^0
		
	Simplified Guard

	Original rule:
	l0 -> l1 : x^0'=x^0, y^0'=y^0, (0 == 0 /\ 1+x^0 <= 0), cost: 1
	New rule:
	l0 -> l1 : x^0'=x^0, y^0'=y^0, 1+x^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l1 : x^0'=x^0, y^0'=y^0, 1+x^0 <= 0, cost: 1
	New rule:
	l0 -> l1 : 1+x^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l4 -> l0 : x^0'=x^post4, y^0'=y^post4, (1+y^post5+x^post5 <= 0 /\ x^0-x^post5 == 0 /\ 1-x^post5 <= 0 /\ y^post5-y^post4 == 0 /\ -y^post5+y^0 == 0 /\ -x^post4+x^post5 == 0), cost: 1
	New rule:
	l4 -> l0 : x^0'=x^post5, y^0'=y^post5, (0 == 0 /\ 1+y^post5+x^post5 <= 0 /\ x^0-x^post5 == 0 /\ 1-x^post5 <= 0 /\ -y^post5+y^0 == 0), cost: 1
	
		propagated equality y^post4 = y^post5
		
		propagated equality x^post4 = x^post5
		
	Propagated Equalities

	Original rule:
	l4 -> l0 : x^0'=x^post5, y^0'=y^post5, (0 == 0 /\ 1+y^post5+x^post5 <= 0 /\ x^0-x^post5 == 0 /\ 1-x^post5 <= 0 /\ -y^post5+y^0 == 0), cost: 1
	New rule:
	l4 -> l0 : x^0'=x^0, y^0'=y^0, (0 == 0 /\ 1-x^0 <= 0 /\ 1+y^0+x^0 <= 0), cost: 1
	
		propagated equality x^post5 = x^0
		
		propagated equality y^post5 = y^0
		
	Simplified Guard

	Original rule:
	l4 -> l0 : x^0'=x^0, y^0'=y^0, (0 == 0 /\ 1-x^0 <= 0 /\ 1+y^0+x^0 <= 0), cost: 1
	New rule:
	l4 -> l0 : x^0'=x^0, y^0'=y^0, (1-x^0 <= 0 /\ 1+y^0+x^0 <= 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	l4 -> l0 : x^0'=x^0, y^0'=y^0, (1-x^0 <= 0 /\ 1+y^0+x^0 <= 0), cost: 1
	New rule:
	l4 -> l0 : (1-x^0 <= 0 /\ 1+y^0+x^0 <= 0), cost: 1
	
	Propagated Equalities

	Original rule:
	l0 -> l0 : x^0'=x^post3, y^0'=y^post3, (-y^post2+y^0 == 0 /\ -x^post3+x^post2 == 0 /\ -x^0 <= 0 /\ y^post2-y^post3 == 0 /\ y^0-x^0+x^post2 == 0), cost: 1
	New rule:
	l0 -> l0 : x^0'=x^post2, y^0'=y^post2, (0 == 0 /\ -y^post2+y^0 == 0 /\ -x^0 <= 0 /\ y^0-x^0+x^post2 == 0), cost: 1
	
		propagated equality x^post3 = x^post2
		
		propagated equality y^post3 = y^post2
		
	Propagated Equalities

	Original rule:
	l0 -> l0 : x^0'=x^post2, y^0'=y^post2, (0 == 0 /\ -y^post2+y^0 == 0 /\ -x^0 <= 0 /\ y^0-x^0+x^post2 == 0), cost: 1
	New rule:
	l0 -> l0 : x^0'=-y^0+x^0, y^0'=y^0, (0 == 0 /\ -x^0 <= 0), cost: 1
	
		propagated equality y^post2 = y^0
		
		propagated equality x^post2 = -y^0+x^0
		
	Simplified Guard

	Original rule:
	l0 -> l0 : x^0'=-y^0+x^0, y^0'=y^0, (0 == 0 /\ -x^0 <= 0), cost: 1
	New rule:
	l0 -> l0 : x^0'=-y^0+x^0, y^0'=y^0, -x^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l0 : x^0'=-y^0+x^0, y^0'=y^0, -x^0 <= 0, cost: 1
	New rule:
	l0 -> l0 : x^0'=-y^0+x^0, -x^0 <= 0, cost: 1

Step with 8

	Trace

	8[(1-x^0 <= 0 /\ 1+y^0+x^0 <= 0)]
	
	Blocked

	[{}, {}]

Step with 9

	Trace

	8[(1-x^0 <= 0 /\ 1+y^0+x^0 <= 0)], 9[(-x^0 <= 0)]
	
	Blocked

	[{}, {7[T]}, {}]

Nonterm

Start location: l4
Program variables: x^0 y^0
   7: l0 -> l1 : 1+x^0 <= 0, cost: 1
   9: l0 -> l0 : x^0'=-y^0+x^0, -x^0 <= 0, cost: 1
  10: l0 -> LoAT_sink : (y^0 <= 0 /\ x^0 >= 0), cost: NONTERM
  11: l0 -> l0 : x^0'=-y^0*n+x^0, (-y^0*(-1+n)+x^0 >= 0 /\ x^0 >= 0 /\ -1+n >= 0), cost: 1
   8: l4 -> l0 : (1-x^0 <= 0 /\ 1+y^0+x^0 <= 0), cost: 1

	Certificate of Non-Termination

	Original rule:
	l0 -> l0 : x^0'=-y^0+x^0, (-x^0 <= 0), cost: 1
	New rule:
	l0 -> LoAT_sink : (y^0 <= 0 /\ x^0 >= 0), cost: NONTERM

		x^0 >= 0 [0]: eventual decrease yields (-y^0*(-1+n)+x^0 >= 0 /\ x^0 >= 0)
		
		x^0 >= 0 [1]: eventual increase yields (y^0 <= 0 /\ x^0 >= 0)
		
		Replacement map: {x^0 >= 0 -> (y^0 <= 0 /\ x^0 >= 0)}

	Loop Acceleration

	Original rule:
	l0 -> l0 : x^0'=-y^0+x^0, (-x^0 <= 0), cost: 1
	New rule:
	l0 -> l0 : x^0'=-y^0*n+x^0, (-y^0*(-1+n)+x^0 >= 0 /\ x^0 >= 0 /\ -1+n >= 0), cost: 1

		x^0 >= 0 [0]: eventual decrease yields (-y^0*(-1+n)+x^0 >= 0 /\ x^0 >= 0)
		
		x^0 >= 0 [1]: eventual increase yields (y^0 <= 0 /\ x^0 >= 0)
		
		Replacement map: {x^0 >= 0 -> (-y^0*(-1+n)+x^0 >= 0 /\ x^0 >= 0)}

Step with 10

	Trace

	8[(1-x^0 <= 0 /\ 1+y^0+x^0 <= 0)], 10[(y^0 <= 0 /\ x^0 >= 0)]
	
	Blocked

	[{}, {7[T]}, {10[T]}]

Refute

	Counterexample

	[ x^0=1 y^0=-2 ] 8 [ x^0=1 y^0=-2 ] 10
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
