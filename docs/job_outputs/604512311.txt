NO

Initial ITS

Start location: [1]
Program variables: x y
   0: [1] -> [2] : x'=nondet, T, cost: 1
   1: [2] -> [3] : y'=nondet1, T, cost: 1
   2: [3] -> [4] : -y+x < 0, cost: 1
   6: [3] -> [7] : -y+x >= 0, cost: 1
   3: [4] -> [5] : x'=y+x, T, cost: 1
   4: [5] -> [6] : y'=-2*y, T, cost: 1
   5: [6] -> [3] : T, cost: 1

Chained Linear Paths

Start location: [1]
Program variables: x y
   7: [1] -> [3] : x'=nondet, y'=nondet1, T, cost: 1
   6: [3] -> [7] : -y+x >= 0, cost: 1
  10: [3] -> [3] : x'=y+x, y'=-2*y, -y+x < 0, cost: 1

	Eliminating location [2] by chaining:

	Applied chaining

	First rule:
	[1] -> [2] : x'=nondet, T, cost: 1
	Second rule:
	[2] -> [3] : y'=nondet1, T, cost: 1
	New rule:
	[1] -> [3] : x'=nondet, y'=nondet1, T, cost: 1
	
	Applied deletion

	Removed the following rules: 0 1
	
	Eliminating location [4] by chaining:

	Applied chaining

	First rule:
	[3] -> [4] : -y+x < 0, cost: 1
	Second rule:
	[4] -> [5] : x'=y+x, T, cost: 1
	New rule:
	[3] -> [5] : x'=y+x, -y+x < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 2 3
	
	Eliminating location [5] by chaining:

	Applied chaining

	First rule:
	[3] -> [5] : x'=y+x, -y+x < 0, cost: 1
	Second rule:
	[5] -> [6] : y'=-2*y, T, cost: 1
	New rule:
	[3] -> [6] : x'=y+x, y'=-2*y, -y+x < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 4 8
	
	Eliminating location [6] by chaining:

	Applied chaining

	First rule:
	[3] -> [6] : x'=y+x, y'=-2*y, -y+x < 0, cost: 1
	Second rule:
	[6] -> [3] : T, cost: 1
	New rule:
	[3] -> [3] : x'=y+x, y'=-2*y, -y+x < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 5 9

Unrolled Loops

Start location: [1]
Program variables: x y
   7: [1] -> [3] : x'=nondet, y'=nondet1, T, cost: 1
   6: [3] -> [7] : -y+x >= 0, cost: 1
  10: [3] -> [3] : x'=y+x, y'=-2*y, -y+x < 0, cost: 1
  11: [3] -> [3] : x'=-y+x, y'=4*y, (3*y+x < 0 /\ -y+x < 0), cost: 1

	Unrolling

	Original rule:
	[3] -> [3] : x'=y+x, y'=-2*y, -y+x < 0, cost: 1
	New rule:
	[3] -> [3] : x'=-y+x, y'=4*y, (3*y+x < 0 /\ -y+x < 0), cost: 1

Step with 7

	Trace

	7[T]
	
	Blocked

	[{}, {}]

Step with 6

	Trace

	7[T], 6[(-y+x >= 0)]
	
	Blocked

	[{}, {}, {}]

Backtrack

	Trace

	7[T]
	
	Blocked

	[{}, {6[T]}]

Step with 10

	Trace

	7[T], 10[(-y+x < 0)]
	
	Blocked

	[{}, {6[T]}, {}]

Nonterm

Start location: [1]
Program variables: x y
   7: [1] -> [3] : x'=nondet, y'=nondet1, T, cost: 1
   6: [3] -> [7] : -y+x >= 0, cost: 1
  10: [3] -> [3] : x'=y+x, y'=-2*y, -y+x < 0, cost: 1
  11: [3] -> [3] : x'=-y+x, y'=4*y, (3*y+x < 0 /\ -y+x < 0), cost: 1
  12: [3] -> LoAT_sink : (8*y <= 0 /\ -3*y-x > 0 /\ y-x > 0 /\ -4*y <= 0), cost: NONTERM

	unrolling

	Original rule:
	[3] -> [3] : x'=y+x, y'=-2*y, (-y+x < 0), cost: 1
	New rule:
	[3] -> [3] : x'=-y+x, y'=4*y, (3*y+x < 0 /\ -y+x < 0), cost: 1
	
	Certificate of Non-Termination

	Original rule:
	[3] -> [3] : x'=-y+x, y'=4*y, (3*y+x < 0 /\ -y+x < 0), cost: 1
	New rule:
	[3] -> LoAT_sink : (8*y <= 0 /\ -3*y-x > 0 /\ y-x > 0 /\ -4*y <= 0), cost: NONTERM

		-3*y-x > 0 [0]: montonic decrease yields -8/3*4^(-1+n)*y-1/3*y-x > 0, dependencies: y-x > 0
		
		-3*y-x > 0 [1]: eventual decrease yields (-3*y-x > 0 /\ -8/3*4^(-1+n)*y-1/3*y-x > 0)
		
		-3*y-x > 0 [2]: eventual increase yields (8*y <= 0 /\ -3*y-x > 0)
		
		y-x > 0 [0]: montonic decrease yields 4/3*4^(-1+n)*y-1/3*y-x > 0, dependencies: -3*y-x > 0
		
		y-x > 0 [1]: eventual increase yields (y-x > 0 /\ -4*y <= 0)
		
		Replacement map: {-3*y-x > 0 -> (8*y <= 0 /\ -3*y-x > 0), y-x > 0 -> (y-x > 0 /\ -4*y <= 0)}

Step with 12

	Trace

	7[T], 12[(8*y <= 0 /\ -3*y-x > 0 /\ y-x > 0 /\ -4*y <= 0)]
	
	Blocked

	[{}, {6[T]}, {12[T]}]

Refute

	Counterexample

	[ x=-1 y=0 ] 7 [ x=x y=y ] 12
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
