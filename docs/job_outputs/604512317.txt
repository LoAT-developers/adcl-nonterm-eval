unknown

Initial ITS

Start location: [1]
Program variables: a b olda q
   0: [1] -> [2] : q'=nondet, T, cost: 1
   1: [2] -> [3] : a'=nondet1, T, cost: 1
   2: [3] -> [4] : b'=nondet2, T, cost: 1
   3: [4] -> [5] : q > 0, cost: 1
   9: [4] -> [10] : q <= 0, cost: 1
   4: [5] -> [6] : q'=-1+a+q, T, cost: 1
   5: [6] -> [7] : olda'=a, T, cost: 1
   6: [7] -> [8] : a'=-4*b+3*olda, T, cost: 1
   7: [8] -> [9] : b'=3*b+4*olda, T, cost: 1
   8: [9] -> [4] : T, cost: 1

Chained Linear Paths

Start location: [1]
Program variables: a b olda q
  11: [1] -> [4] : a'=nondet1, b'=nondet2, q'=nondet, T, cost: 1
   9: [4] -> [10] : q <= 0, cost: 1
  16: [4] -> [4] : a'=-4*b+3*a, b'=3*b+4*a, olda'=a, q'=-1+a+q, q > 0, cost: 1

	Eliminating location [2] by chaining:

	Applied chaining

	First rule:
	[1] -> [2] : q'=nondet, T, cost: 1
	Second rule:
	[2] -> [3] : a'=nondet1, T, cost: 1
	New rule:
	[1] -> [3] : a'=nondet1, q'=nondet, T, cost: 1
	
	Applied deletion

	Removed the following rules: 0 1
	
	Eliminating location [3] by chaining:

	Applied chaining

	First rule:
	[1] -> [3] : a'=nondet1, q'=nondet, T, cost: 1
	Second rule:
	[3] -> [4] : b'=nondet2, T, cost: 1
	New rule:
	[1] -> [4] : a'=nondet1, b'=nondet2, q'=nondet, T, cost: 1
	
	Applied deletion

	Removed the following rules: 2 10
	
	Eliminating location [5] by chaining:

	Applied chaining

	First rule:
	[4] -> [5] : q > 0, cost: 1
	Second rule:
	[5] -> [6] : q'=-1+a+q, T, cost: 1
	New rule:
	[4] -> [6] : q'=-1+a+q, q > 0, cost: 1
	
	Applied deletion

	Removed the following rules: 3 4
	
	Eliminating location [6] by chaining:

	Applied chaining

	First rule:
	[4] -> [6] : q'=-1+a+q, q > 0, cost: 1
	Second rule:
	[6] -> [7] : olda'=a, T, cost: 1
	New rule:
	[4] -> [7] : olda'=a, q'=-1+a+q, q > 0, cost: 1
	
	Applied deletion

	Removed the following rules: 5 12
	
	Eliminating location [7] by chaining:

	Applied chaining

	First rule:
	[4] -> [7] : olda'=a, q'=-1+a+q, q > 0, cost: 1
	Second rule:
	[7] -> [8] : a'=-4*b+3*olda, T, cost: 1
	New rule:
	[4] -> [8] : a'=-4*b+3*a, olda'=a, q'=-1+a+q, q > 0, cost: 1
	
	Applied deletion

	Removed the following rules: 6 13
	
	Eliminating location [8] by chaining:

	Applied chaining

	First rule:
	[4] -> [8] : a'=-4*b+3*a, olda'=a, q'=-1+a+q, q > 0, cost: 1
	Second rule:
	[8] -> [9] : b'=3*b+4*olda, T, cost: 1
	New rule:
	[4] -> [9] : a'=-4*b+3*a, b'=3*b+4*a, olda'=a, q'=-1+a+q, q > 0, cost: 1
	
	Applied deletion

	Removed the following rules: 7 14
	
	Eliminating location [9] by chaining:

	Applied chaining

	First rule:
	[4] -> [9] : a'=-4*b+3*a, b'=3*b+4*a, olda'=a, q'=-1+a+q, q > 0, cost: 1
	Second rule:
	[9] -> [4] : T, cost: 1
	New rule:
	[4] -> [4] : a'=-4*b+3*a, b'=3*b+4*a, olda'=a, q'=-1+a+q, q > 0, cost: 1
	
	Applied deletion

	Removed the following rules: 8 15

Step with 11

	Trace

	11[T]
	
	Blocked

	[{}, {}]

Step with 9

	Trace

	11[T], 9[(q <= 0)]
	
	Blocked

	[{}, {}, {}]

Backtrack

	Trace

	11[T]
	
	Blocked

	[{}, {9[T]}]

Step with 16

	Trace

	11[T], 16[(q > 0)]
	
	Blocked

	[{}, {9[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 16

	Trace

	11[T], 16[(q > 0)], 16[(q > 0)]
	
	Blocked

	[{}, {9[T]}, {}, {}]

Covered

	Trace

	11[T], 16[(q > 0)]
	
	Blocked

	[{}, {9[T]}, {16[T]}]

Step with 9

	Trace

	11[T], 16[(q > 0)], 9[(q <= 0)]
	
	Blocked

	[{}, {9[T]}, {16[T]}, {}]

Backtrack

	Trace

	11[T], 16[(q > 0)]
	
	Blocked

	[{}, {9[T]}, {9[T], 16[T]}]

Backtrack

	Trace

	11[T]
	
	Blocked

	[{}, {9[T], 16[T]}]

Backtrack

	Trace

	Blocked

	[{11[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
