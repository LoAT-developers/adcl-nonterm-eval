unknown

Initial ITS

Start location: [1]
Program variables: x y
   0: [1] -> [2] : x'=nondet, T, cost: 1
   1: [2] -> [3] : y'=nondet1, T, cost: 1
   2: [3] -> [4] : x >= 0, cost: 1
  10: [3] -> [10] : x < 0, cost: 1
   3: [4] -> [5] : y'=1, T, cost: 1
   4: [5] -> [6] : y-x < 0, cost: 1
   7: [5] -> [8] : y-x >= 0, cost: 1
   5: [6] -> [7] : y'=2*y, T, cost: 1
   6: [7] -> [5] : T, cost: 1
   8: [8] -> [9] : x'=-1+x, T, cost: 1
   9: [9] -> [3] : T, cost: 1

Chained Linear Paths

Start location: [1]
Program variables: x y
  11: [1] -> [3] : x'=nondet, y'=nondet1, T, cost: 1
  10: [3] -> [10] : x < 0, cost: 1
  12: [3] -> [5] : y'=1, x >= 0, cost: 1
  15: [5] -> [5] : y'=2*y, y-x < 0, cost: 1
  16: [5] -> [3] : x'=-1+x, y-x >= 0, cost: 1

	Eliminating location [2] by chaining:

	Applied chaining

	First rule:
	[1] -> [2] : x'=nondet, T, cost: 1
	Second rule:
	[2] -> [3] : y'=nondet1, T, cost: 1
	New rule:
	[1] -> [3] : x'=nondet, y'=nondet1, T, cost: 1
	
	Applied deletion

	Removed the following rules: 0 1
	
	Eliminating location [4] by chaining:

	Applied chaining

	First rule:
	[3] -> [4] : x >= 0, cost: 1
	Second rule:
	[4] -> [5] : y'=1, T, cost: 1
	New rule:
	[3] -> [5] : y'=1, x >= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 2 3
	
	Eliminating location [6] by chaining:

	Applied chaining

	First rule:
	[5] -> [6] : y-x < 0, cost: 1
	Second rule:
	[6] -> [7] : y'=2*y, T, cost: 1
	New rule:
	[5] -> [7] : y'=2*y, y-x < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 4 5
	
	Eliminating location [8] by chaining:

	Applied chaining

	First rule:
	[5] -> [8] : y-x >= 0, cost: 1
	Second rule:
	[8] -> [9] : x'=-1+x, T, cost: 1
	New rule:
	[5] -> [9] : x'=-1+x, y-x >= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 7 8
	
	Eliminating location [7] by chaining:

	Applied chaining

	First rule:
	[5] -> [7] : y'=2*y, y-x < 0, cost: 1
	Second rule:
	[7] -> [5] : T, cost: 1
	New rule:
	[5] -> [5] : y'=2*y, y-x < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 6 13
	
	Eliminating location [9] by chaining:

	Applied chaining

	First rule:
	[5] -> [9] : x'=-1+x, y-x >= 0, cost: 1
	Second rule:
	[9] -> [3] : T, cost: 1
	New rule:
	[5] -> [3] : x'=-1+x, y-x >= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 9 14

Step with 11

	Trace

	11[T]
	
	Blocked

	[{}, {}]

Step with 10

	Trace

	11[T], 10[(x < 0)]
	
	Blocked

	[{}, {}, {}]

Backtrack

	Trace

	11[T]
	
	Blocked

	[{}, {10[T]}]

Step with 12

	Trace

	11[T], 12[(x >= 0)]
	
	Blocked

	[{}, {10[T]}, {}]

Step with 15

	Trace

	11[T], 12[(x >= 0)], 15[(y-x < 0)]
	
	Blocked

	[{}, {10[T]}, {}, {}]

Accelerate and Drop

Start location: [1]
Program variables: x y
  11: [1] -> [3] : x'=nondet, y'=nondet1, T, cost: 1
  10: [3] -> [10] : x < 0, cost: 1
  12: [3] -> [5] : y'=1, x >= 0, cost: 1
  15: [5] -> [5] : y'=2*y, y-x < 0, cost: 1
  16: [5] -> [3] : x'=-1+x, y-x >= 0, cost: 1
  17: [5] -> LoAT_sink : (-y+x > 0 /\ y <= 0), cost: NONTERM

	Certificate of Non-Termination

	Original rule:
	[5] -> [5] : y'=2*y, (y-x < 0), cost: 1
	New rule:
	[5] -> LoAT_sink : (-y+x > 0 /\ y <= 0), cost: NONTERM

		-y+x > 0 [0]: eventual decrease yields (-2^(-1+n)*y+x > 0 /\ -y+x > 0)
		
		-y+x > 0 [1]: eventual increase yields (-y+x > 0 /\ y <= 0)
		
		Replacement map: {-y+x > 0 -> (-y+x > 0 /\ y <= 0)}

	Trace

	11[T], 12[(x >= 0)]
	
	Blocked

	[{}, {10[T]}, {15[T]}]

Step with 16

	Trace

	11[T], 12[(x >= 0)], 16[(y-x >= 0)]
	
	Blocked

	[{}, {10[T]}, {15[T]}, {}]

Accelerate

Start location: [1]
Program variables: x y
  11: [1] -> [3] : x'=nondet, y'=nondet1, T, cost: 1
  10: [3] -> [10] : x < 0, cost: 1
  12: [3] -> [5] : y'=1, x >= 0, cost: 1
  18: [3] -> [3] : x'=-n1+x, y'=1, (-1+n1 >= 0 /\ 1-n1+x >= 0 /\ 1-x >= 0), cost: 1
  15: [5] -> [5] : y'=2*y, y-x < 0, cost: 1
  16: [5] -> [3] : x'=-1+x, y-x >= 0, cost: 1
  17: [5] -> LoAT_sink : (-y+x > 0 /\ y <= 0), cost: NONTERM

	Loop Acceleration

	Original rule:
	[3] -> [3] : x'=-1+x, y'=1, (1-x >= 0 /\ x >= 0), cost: 1
	New rule:
	[3] -> [3] : x'=-n1+x, y'=1, (-1+n1 >= 0 /\ 1-n1+x >= 0 /\ 1-x >= 0), cost: 1

		1-x >= 0 [0]: monotonic increase yields 1-x >= 0
		
		x >= 0 [0]: montonic decrease yields 1-n1+x >= 0
		
		x >= 0 [1]: eventual increase yields (1 <= 0 /\ x >= 0)
		
		Replacement map: {1-x >= 0 -> 1-x >= 0, x >= 0 -> 1-n1+x >= 0}

	Trace

	11[T], 18[(-1+n1 >= 0 /\ 1-n1+x >= 0 /\ 1-x >= 0)]
	
	Blocked

	[{}, {10[T]}, {18[T]}]

Step with 10

	Trace

	11[T], 18[(-1+n1 >= 0 /\ 1-n1+x >= 0 /\ 1-x >= 0)], 10[(x < 0)]
	
	Blocked

	[{}, {10[T]}, {18[T]}, {}]

Backtrack

	Trace

	11[T], 18[(-1+n1 >= 0 /\ 1-n1+x >= 0 /\ 1-x >= 0)]
	
	Blocked

	[{}, {10[T]}, {10[T], 18[T]}]

Step with 12

	Trace

	11[T], 18[(-1+n1 >= 0 /\ 1-n1+x >= 0 /\ 1-x >= 0)], 12[(x >= 0)]
	
	Blocked

	[{}, {10[T]}, {10[T], 18[T]}, {}]

Step with 16

	Trace

	11[T], 18[(-1+n1 >= 0 /\ 1-n1+x >= 0 /\ 1-x >= 0)], 12[(x >= 0)], 16[(y-x >= 0)]
	
	Blocked

	[{}, {10[T]}, {10[T], 18[T]}, {17[T]}, {}]

Covered

	Trace

	11[T], 18[(-1+n1 >= 0 /\ 1-n1+x >= 0 /\ 1-x >= 0)], 12[(x >= 0)]
	
	Blocked

	[{}, {10[T]}, {10[T], 18[T]}, {16[T], 17[T]}]

Backtrack

	Trace

	11[T], 18[(-1+n1 >= 0 /\ 1-n1+x >= 0 /\ 1-x >= 0)]
	
	Blocked

	[{}, {10[T]}, {10[T], 12[T], 18[T]}]

Backtrack

	Trace

	11[T]
	
	Blocked

	[{}, {10[T], 18[T]}]

Step with 12

	Trace

	11[T], 12[(x >= 0)]
	
	Blocked

	[{}, {10[T], 18[T]}, {}]

Step with 16

	Trace

	11[T], 12[(x >= 0)], 16[(y-x >= 0)]
	
	Blocked

	[{}, {10[T], 18[T]}, {17[T]}, {}]

Covered

	Trace

	11[T], 12[(x >= 0)]
	
	Blocked

	[{}, {10[T], 18[T]}, {16[T], 17[T]}]

Step with 15

	Trace

	11[T], 12[(x >= 0)], 15[(y-x < 0)]
	
	Blocked

	[{}, {10[T], 18[T]}, {16[T], 17[T]}, {}]

Covered

	Trace

	11[T], 12[(x >= 0)]
	
	Blocked

	[{}, {10[T], 18[T]}, {15[T], 16[T], 17[T]}]

Backtrack

	Trace

	11[T]
	
	Blocked

	[{}, {10[T], 12[T], 18[T]}]

Backtrack

	Trace

	Blocked

	[{11[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
