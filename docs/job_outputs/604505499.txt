WORST_CASE(Omega(0),?)

Initial ITS
Start location: __init
   0: f1_0_main_Load -> f385_0_log_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0), cost: 1
   1: f385_0_log_LE -> f458_0_half_LE : arg2'=arg2P1, arg1'=arg1P1, (-arg1P1 == 0 /\ -2+arg1-arg2P1 == 0 /\ -1+arg1 > 0), cost: 1
   2: f458_0_half_LE -> f458_0_half_LE : arg2'=arg2P2, arg1'=arg1P2, (-1+arg2 > 0 /\ 1+arg1-arg1P2 == 0 /\ -2+arg2-arg2P2 == 0), cost: 1
   3: f458_0_half_LE -> f385_0_log_LE : arg2'=arg2P3, arg1'=arg1P3, (1+arg1 > 0 /\ -2+arg2 < 0 /\ 1-arg1P3+arg1 == 0), cost: 1
   4: __init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, TRUE, cost: 1


Applied preprocessing
Original rule:
f385_0_log_LE -> f458_0_half_LE : arg2'=arg2P1, arg1'=arg1P1, (-arg1P1 == 0 /\ -2+arg1-arg2P1 == 0 /\ -1+arg1 > 0), cost: 1
New rule:
f385_0_log_LE -> f458_0_half_LE : arg2'=-2+arg1, arg1'=0, -1+arg1 > 0, cost: 1

Applied preprocessing
Original rule:
f458_0_half_LE -> f458_0_half_LE : arg2'=arg2P2, arg1'=arg1P2, (-1+arg2 > 0 /\ 1+arg1-arg1P2 == 0 /\ -2+arg2-arg2P2 == 0), cost: 1
New rule:
f458_0_half_LE -> f458_0_half_LE : arg2'=-2+arg2, arg1'=1+arg1, -1+arg2 > 0, cost: 1

Applied preprocessing
Original rule:
f458_0_half_LE -> f385_0_log_LE : arg2'=arg2P3, arg1'=arg1P3, (1+arg1 > 0 /\ -2+arg2 < 0 /\ 1-arg1P3+arg1 == 0), cost: 1
New rule:
f458_0_half_LE -> f385_0_log_LE : arg2'=arg2P3, arg1'=1+arg1, (1+arg1 > 0 /\ 2-arg2 > 0), cost: 1

Simplified rules
Start location: __init
   0: f1_0_main_Load -> f385_0_log_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0), cost: 1
   5: f385_0_log_LE -> f458_0_half_LE : arg2'=-2+arg1, arg1'=0, -1+arg1 > 0, cost: 1
   6: f458_0_half_LE -> f458_0_half_LE : arg2'=-2+arg2, arg1'=1+arg1, -1+arg2 > 0, cost: 1
   7: f458_0_half_LE -> f385_0_log_LE : arg2'=arg2P3, arg1'=1+arg1, (1+arg1 > 0 /\ 2-arg2 > 0), cost: 1
   4: __init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, TRUE, cost: 1


Applied acceleration
Original rule:
f458_0_half_LE -> f458_0_half_LE : arg2'=-2+arg2, arg1'=1+arg1, -1+arg2 > 0, cost: 1
New rule:
f458_0_half_LE -> f458_0_half_LE : arg2'=arg2-2*n, arg1'=n+arg1, (n >= 0 /\ 1+arg2-2*n > 0), cost: n
Sub-proof via acceration calculus written to file:///tmp/tmpnam_nPBhfn.txt

Applied deletion
Removed the following rules: 6

Accelerated simple loops
Start location: __init
   0: f1_0_main_Load -> f385_0_log_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0), cost: 1
   5: f385_0_log_LE -> f458_0_half_LE : arg2'=-2+arg1, arg1'=0, -1+arg1 > 0, cost: 1
   7: f458_0_half_LE -> f385_0_log_LE : arg2'=arg2P3, arg1'=1+arg1, (1+arg1 > 0 /\ 2-arg2 > 0), cost: 1
   8: f458_0_half_LE -> f458_0_half_LE : arg2'=arg2-2*n, arg1'=n+arg1, (n >= 0 /\ 1+arg2-2*n > 0), cost: n
   4: __init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, TRUE, cost: 1


Applied chaining
First rule:
f385_0_log_LE -> f458_0_half_LE : arg2'=-2+arg1, arg1'=0, -1+arg1 > 0, cost: 1
Second rule:
f458_0_half_LE -> f458_0_half_LE : arg2'=arg2-2*n, arg1'=n+arg1, (n >= 0 /\ 1+arg2-2*n > 0), cost: n
New rule:
f385_0_log_LE -> f458_0_half_LE : arg2'=-2-2*n+arg1, arg1'=n, (-1-2*n+arg1 > 0 /\ n >= 0), cost: 1+n

Applied deletion
Removed the following rules: 8

Chained accelerated rules with incoming rules
Start location: __init
   0: f1_0_main_Load -> f385_0_log_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0), cost: 1
   5: f385_0_log_LE -> f458_0_half_LE : arg2'=-2+arg1, arg1'=0, -1+arg1 > 0, cost: 1
   9: f385_0_log_LE -> f458_0_half_LE : arg2'=-2-2*n+arg1, arg1'=n, (-1-2*n+arg1 > 0 /\ n >= 0), cost: 1+n
   7: f458_0_half_LE -> f385_0_log_LE : arg2'=arg2P3, arg1'=1+arg1, (1+arg1 > 0 /\ 2-arg2 > 0), cost: 1
   4: __init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, TRUE, cost: 1


Eliminating location f1_0_main_Load by chaining:

Applied chaining
First rule:
__init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, TRUE, cost: 1
Second rule:
f1_0_main_Load -> f385_0_log_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0), cost: 1
New rule:
__init -> f385_0_log_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P4 > 0 /\ 1+arg1P0 > 0 /\ arg1P4 > 0), cost: 2

Applied deletion
Removed the following rules: 0 4

Eliminated locations on linear paths
Start location: __init
   5: f385_0_log_LE -> f458_0_half_LE : arg2'=-2+arg1, arg1'=0, -1+arg1 > 0, cost: 1
   9: f385_0_log_LE -> f458_0_half_LE : arg2'=-2-2*n+arg1, arg1'=n, (-1-2*n+arg1 > 0 /\ n >= 0), cost: 1+n
   7: f458_0_half_LE -> f385_0_log_LE : arg2'=arg2P3, arg1'=1+arg1, (1+arg1 > 0 /\ 2-arg2 > 0), cost: 1
  10: __init -> f385_0_log_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P4 > 0 /\ 1+arg1P0 > 0 /\ arg1P4 > 0), cost: 2


Eliminating location f458_0_half_LE by chaining:

Applied chaining
First rule:
f385_0_log_LE -> f458_0_half_LE : arg2'=-2+arg1, arg1'=0, -1+arg1 > 0, cost: 1
Second rule:
f458_0_half_LE -> f385_0_log_LE : arg2'=arg2P3, arg1'=1+arg1, (1+arg1 > 0 /\ 2-arg2 > 0), cost: 1
New rule:
f385_0_log_LE -> f385_0_log_LE : arg2'=arg2P3, arg1'=1, (1 > 0 /\ 4-arg1 > 0 /\ -1+arg1 > 0), cost: 2

Applied simplification
Original rule:
f385_0_log_LE -> f385_0_log_LE : arg2'=arg2P3, arg1'=1, (1 > 0 /\ 4-arg1 > 0 /\ -1+arg1 > 0), cost: 2
New rule:
f385_0_log_LE -> f385_0_log_LE : arg2'=arg2P3, arg1'=1, (4-arg1 > 0 /\ -1+arg1 > 0), cost: 2

Applied chaining
First rule:
f385_0_log_LE -> f458_0_half_LE : arg2'=-2-2*n+arg1, arg1'=n, (-1-2*n+arg1 > 0 /\ n >= 0), cost: 1+n
Second rule:
f458_0_half_LE -> f385_0_log_LE : arg2'=arg2P3, arg1'=1+arg1, (1+arg1 > 0 /\ 2-arg2 > 0), cost: 1
New rule:
f385_0_log_LE -> f385_0_log_LE : arg2'=arg2P3, arg1'=1+n, (-1-2*n+arg1 > 0 /\ 4+2*n-arg1 > 0 /\ n >= 0 /\ 1+n > 0), cost: 2+n

Applied simplification
Original rule:
f385_0_log_LE -> f385_0_log_LE : arg2'=arg2P3, arg1'=1+n, (-1-2*n+arg1 > 0 /\ 4+2*n-arg1 > 0 /\ n >= 0 /\ 1+n > 0), cost: 2+n
New rule:
f385_0_log_LE -> f385_0_log_LE : arg2'=arg2P3, arg1'=1+n, (-1-2*n+arg1 > 0 /\ 4+2*n-arg1 > 0 /\ 1+n > 0), cost: 2+n

Applied deletion
Removed the following rules: 5 7 9

Eliminated locations on tree-shaped paths
Start location: __init
  11: f385_0_log_LE -> f385_0_log_LE : arg2'=arg2P3, arg1'=1, (4-arg1 > 0 /\ -1+arg1 > 0), cost: 2
  12: f385_0_log_LE -> f385_0_log_LE : arg2'=arg2P3, arg1'=1+n, (-1-2*n+arg1 > 0 /\ 4+2*n-arg1 > 0 /\ 1+n > 0), cost: 2+n
  10: __init -> f385_0_log_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P4 > 0 /\ 1+arg1P0 > 0 /\ arg1P4 > 0), cost: 2


Accelerated simple loops
Start location: __init
  11: f385_0_log_LE -> f385_0_log_LE : arg2'=arg2P3, arg1'=1, (4-arg1 > 0 /\ -1+arg1 > 0), cost: 2
  12: f385_0_log_LE -> f385_0_log_LE : arg2'=arg2P3, arg1'=1+n, (-1-2*n+arg1 > 0 /\ 4+2*n-arg1 > 0 /\ 1+n > 0), cost: 2+n
  10: __init -> f385_0_log_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P4 > 0 /\ 1+arg1P0 > 0 /\ arg1P4 > 0), cost: 2


Applied chaining
First rule:
__init -> f385_0_log_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P4 > 0 /\ 1+arg1P0 > 0 /\ arg1P4 > 0), cost: 2
Second rule:
f385_0_log_LE -> f385_0_log_LE : arg2'=arg2P3, arg1'=1, (4-arg1 > 0 /\ -1+arg1 > 0), cost: 2
New rule:
__init -> f385_0_log_LE : arg2'=arg2P3, arg1'=1, (-3 <= 0 /\ -1 <= 0), cost: 4

Applied chaining
First rule:
__init -> f385_0_log_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P4 > 0 /\ 1+arg1P0 > 0 /\ arg1P4 > 0), cost: 2
Second rule:
f385_0_log_LE -> f385_0_log_LE : arg2'=arg2P3, arg1'=1+n, (-1-2*n+arg1 > 0 /\ 4+2*n-arg1 > 0 /\ 1+n > 0), cost: 2+n
New rule:
__init -> f385_0_log_LE : arg2'=arg2P3, arg1'=1+n, 1+n > 0, cost: 4+n

Applied deletion
Removed the following rules: 11 12

Chained accelerated rules with incoming rules
Start location: __init
  10: __init -> f385_0_log_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P4 > 0 /\ 1+arg1P0 > 0 /\ arg1P4 > 0), cost: 2
  13: __init -> f385_0_log_LE : arg2'=arg2P3, arg1'=1, (-3 <= 0 /\ -1 <= 0), cost: 4
  14: __init -> f385_0_log_LE : arg2'=arg2P3, arg1'=1+n, 1+n > 0, cost: 4+n


Removed unreachable locations and irrelevant leafs
Start location: __init
  <empty>


Computing asymptotic complexity

Proved the following lower bound
Complexity:  Unknown
Cpx degree: ?

Solved cost: 0
Rule cost:   0

