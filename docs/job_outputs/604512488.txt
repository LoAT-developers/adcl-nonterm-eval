unknown

Initial ITS

Start location: [1]
Program variables: i j k
   0: [1] -> [2] : i'=nondet, T, cost: 1
   1: [2] -> [3] : j'=nondet1, T, cost: 1
   2: [3] -> [4] : k'=nondet2, T, cost: 1
   3: [4] -> [5] : (-k+j <= 0 /\ -100+i <= 0), cost: 1
   8: [4] -> [9] : (-k+j > 0 \/ -100+i > 0), cost: 1
   4: [5] -> [6] : i'=j, T, cost: 1
   5: [6] -> [7] : j'=1+i, T, cost: 1
   6: [7] -> [8] : k'=-1+k, T, cost: 1
   7: [8] -> [4] : T, cost: 1

Chained Linear Paths

Start location: [1]
Program variables: i j k
  10: [1] -> [4] : i'=nondet, j'=nondet1, k'=nondet2, T, cost: 1
   8: [4] -> [9] : (-k+j > 0 \/ -100+i > 0), cost: 1
  14: [4] -> [4] : i'=j, j'=1+j, k'=-1+k, (-k+j <= 0 /\ -100+i <= 0), cost: 1

	Eliminating location [2] by chaining:

	Applied chaining

	First rule:
	[1] -> [2] : i'=nondet, T, cost: 1
	Second rule:
	[2] -> [3] : j'=nondet1, T, cost: 1
	New rule:
	[1] -> [3] : i'=nondet, j'=nondet1, T, cost: 1
	
	Applied deletion

	Removed the following rules: 0 1
	
	Eliminating location [3] by chaining:

	Applied chaining

	First rule:
	[1] -> [3] : i'=nondet, j'=nondet1, T, cost: 1
	Second rule:
	[3] -> [4] : k'=nondet2, T, cost: 1
	New rule:
	[1] -> [4] : i'=nondet, j'=nondet1, k'=nondet2, T, cost: 1
	
	Applied deletion

	Removed the following rules: 2 9
	
	Eliminating location [5] by chaining:

	Applied chaining

	First rule:
	[4] -> [5] : (-k+j <= 0 /\ -100+i <= 0), cost: 1
	Second rule:
	[5] -> [6] : i'=j, T, cost: 1
	New rule:
	[4] -> [6] : i'=j, (-k+j <= 0 /\ -100+i <= 0), cost: 1
	
	Applied deletion

	Removed the following rules: 3 4
	
	Eliminating location [6] by chaining:

	Applied chaining

	First rule:
	[4] -> [6] : i'=j, (-k+j <= 0 /\ -100+i <= 0), cost: 1
	Second rule:
	[6] -> [7] : j'=1+i, T, cost: 1
	New rule:
	[4] -> [7] : i'=j, j'=1+j, (-k+j <= 0 /\ -100+i <= 0), cost: 1
	
	Applied deletion

	Removed the following rules: 5 11
	
	Eliminating location [7] by chaining:

	Applied chaining

	First rule:
	[4] -> [7] : i'=j, j'=1+j, (-k+j <= 0 /\ -100+i <= 0), cost: 1
	Second rule:
	[7] -> [8] : k'=-1+k, T, cost: 1
	New rule:
	[4] -> [8] : i'=j, j'=1+j, k'=-1+k, (-k+j <= 0 /\ -100+i <= 0), cost: 1
	
	Applied deletion

	Removed the following rules: 6 12
	
	Eliminating location [8] by chaining:

	Applied chaining

	First rule:
	[4] -> [8] : i'=j, j'=1+j, k'=-1+k, (-k+j <= 0 /\ -100+i <= 0), cost: 1
	Second rule:
	[8] -> [4] : T, cost: 1
	New rule:
	[4] -> [4] : i'=j, j'=1+j, k'=-1+k, (-k+j <= 0 /\ -100+i <= 0), cost: 1
	
	Applied deletion

	Removed the following rules: 7 13

Step with 10

	Trace

	10[T]
	
	Blocked

	[{}, {}]

Step with 8

	Trace

	10[T], 8[(-100+i > 0)]
	
	Blocked

	[{}, {}, {}]

Backtrack

	Trace

	10[T]
	
	Blocked

	[{}, {8[-100+i > 0]}]

Step with 8

	Trace

	10[T], 8[(-k+j > 0)]
	
	Blocked

	[{}, {8[-100+i > 0]}, {}]

Backtrack

	Trace

	10[T]
	
	Blocked

	[{}, {8[(-k+j > 0 /\ -100+i > 0)]}]

Step with 14

	Trace

	10[T], 14[(-k+j <= 0 /\ -100+i <= 0)]
	
	Blocked

	[{}, {8[T]}, {}]

Accelerate

Start location: [1]
Program variables: i j k
  10: [1] -> [4] : i'=nondet, j'=nondet1, k'=nondet2, T, cost: 1
   8: [4] -> [9] : (-k+j > 0 \/ -100+i > 0), cost: 1
  14: [4] -> [4] : i'=j, j'=1+j, k'=-1+k, (-k+j <= 0 /\ -100+i <= 0), cost: 1
  15: [4] -> [4] : i'=-1+n+j, j'=n+j, k'=-n+k, (2-2*n+k-j >= 0 /\ -1+n >= 0 /\ 102-n-j >= 0 /\ 100-i >= 0), cost: 1

	Loop Acceleration

	Original rule:
	[4] -> [4] : i'=j, j'=1+j, k'=-1+k, (-k+j <= 0 /\ -100+i <= 0), cost: 1
	New rule:
	[4] -> [4] : i'=-1+n+j, j'=n+j, k'=-n+k, (2-2*n+k-j >= 0 /\ -1+n >= 0 /\ 102-n-j >= 0 /\ 100-i >= 0), cost: 1

		k-j >= 0 [0]: montonic decrease yields 2-2*n+k-j >= 0
		
		k-j >= 0 [1]: eventual increase yields (2 <= 0 /\ k-j >= 0)
		
		100-i >= 0 [0]: eventual decrease yields (102-n-j >= 0 /\ 100-i >= 0)
		
		Replacement map: {k-j >= 0 -> 2-2*n+k-j >= 0, 100-i >= 0 -> (102-n-j >= 0 /\ 100-i >= 0)}

	Trace

	10[T], 15[(2-2*n+k-j >= 0 /\ -1+n >= 0 /\ 102-n-j >= 0 /\ 100-i >= 0)]
	
	Blocked

	[{}, {8[T]}, {14[T], 15[T]}]

Step with 8

	Trace

	10[T], 15[(2-2*n+k-j >= 0 /\ -1+n >= 0 /\ 102-n-j >= 0 /\ 100-i >= 0)], 8[(-k+j > 0)]
	
	Blocked

	[{}, {8[T]}, {14[T], 15[T]}, {}]

Backtrack

	Trace

	10[T], 15[(2-2*n+k-j >= 0 /\ -1+n >= 0 /\ 102-n-j >= 0 /\ 100-i >= 0)]
	
	Blocked

	[{}, {8[T]}, {8[-k+j > 0], 14[T], 15[T]}]

Step with 8

	Trace

	10[T], 15[(2-2*n+k-j >= 0 /\ -1+n >= 0 /\ 102-n-j >= 0 /\ 100-i >= 0)], 8[(-100+i > 0)]
	
	Blocked

	[{}, {8[T]}, {8[-k+j > 0], 14[T], 15[T]}, {}]

Backtrack

	Trace

	10[T], 15[(2-2*n+k-j >= 0 /\ -1+n >= 0 /\ 102-n-j >= 0 /\ 100-i >= 0)]
	
	Blocked

	[{}, {8[T]}, {8[(-k+j > 0 /\ -100+i > 0)], 14[T], 15[T]}]

Backtrack

	Trace

	10[T]
	
	Blocked

	[{}, {8[T], 15[T]}]

Step with 14

	Trace

	10[T], 14[(-k+j <= 0 /\ -100+i <= 0)]
	
	Blocked

	[{}, {8[T], 15[T]}, {}]

Covered

	Trace

	10[T]
	
	Blocked

	[{}, {8[T], 14[T], 15[T]}]

Backtrack

	Trace

	Blocked

	[{10[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
