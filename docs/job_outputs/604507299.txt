unknown

Initial ITS

Start location: l4
Program variables: c0^0 deltaext^0 wnt^0
   0: l0 -> l1 : c0^0'=c0^post1, deltaext^0'=deltaext^post1, wnt^0'=wnt^post1, (-wnt^post1+wnt^0 == 0 /\ c0^0-c0^post1 == 0 /\ 1+deltaext^post1-deltaext^0 == 0 /\ 2-2*deltaext^0+c0^0+wnt^0 <= 0), cost: 1
   2: l0 -> l2 : c0^0'=c0^post3, deltaext^0'=deltaext^post3, wnt^0'=wnt^post3, (-1+deltaext^post3-deltaext^0 == 0 /\ c0^0-c0^post3 == 0 /\ -wnt^post3+wnt^0 == 0 /\ 1+2*deltaext^0-c0^0-wnt^0 <= 0), cost: 1
   1: l1 -> l0 : c0^0'=c0^post2, deltaext^0'=deltaext^post2, wnt^0'=wnt^post2, (c0^0-c0^post2 == 0 /\ -wnt^post2+wnt^0 == 0 /\ -deltaext^post2+deltaext^0 == 0), cost: 1
   3: l2 -> l0 : c0^0'=c0^post4, deltaext^0'=deltaext^post4, wnt^0'=wnt^post4, (-deltaext^post4+deltaext^0 == 0 /\ -wnt^post4+wnt^0 == 0 /\ c0^0-c0^post4 == 0), cost: 1
   4: l3 -> l0 : c0^0'=c0^post5, deltaext^0'=deltaext^post5, wnt^0'=wnt^post5, (-3+wnt^0 <= 0 /\ -3+deltaext^0 <= 0 /\ -deltaext^0 <= 0 /\ deltaext^0-deltaext^post5 == 0 /\ -2+c0^post5 == 0 /\ -wnt^post5+wnt^0 == 0 /\ -wnt^0 <= 0), cost: 1
   5: l4 -> l3 : c0^0'=c0^post6, deltaext^0'=deltaext^post6, wnt^0'=wnt^post6, (-wnt^post6+wnt^0 == 0 /\ -c0^post6+c0^0 == 0 /\ deltaext^0-deltaext^post6 == 0), cost: 1

Chained Linear Paths

Start location: l4
Program variables: c0^0 deltaext^0 wnt^0
   7: l0 -> l0 : c0^0'=c0^post2, deltaext^0'=deltaext^post2, wnt^0'=wnt^post2, (-wnt^post1+wnt^0 == 0 /\ -deltaext^post2+deltaext^post1 == 0 /\ -wnt^post2+wnt^post1 == 0 /\ c0^0-c0^post1 == 0 /\ 1+deltaext^post1-deltaext^0 == 0 /\ -c0^post2+c0^post1 == 0 /\ 2-2*deltaext^0+c0^0+wnt^0 <= 0), cost: 1
   8: l0 -> l0 : c0^0'=c0^post4, deltaext^0'=deltaext^post4, wnt^0'=wnt^post4, (-deltaext^post4+deltaext^post3 == 0 /\ -1+deltaext^post3-deltaext^0 == 0 /\ c0^0-c0^post3 == 0 /\ -c0^post4+c0^post3 == 0 /\ -wnt^post3+wnt^0 == 0 /\ -wnt^post4+wnt^post3 == 0 /\ 1+2*deltaext^0-c0^0-wnt^0 <= 0), cost: 1
   6: l4 -> l0 : c0^0'=c0^post5, deltaext^0'=deltaext^post5, wnt^0'=wnt^post5, (deltaext^post6-deltaext^post5 == 0 /\ -3+deltaext^post6 <= 0 /\ -wnt^post6+wnt^0 == 0 /\ wnt^post6-wnt^post5 == 0 /\ -c0^post6+c0^0 == 0 /\ -wnt^post6 <= 0 /\ deltaext^0-deltaext^post6 == 0 /\ -2+c0^post5 == 0 /\ -3+wnt^post6 <= 0 /\ -deltaext^post6 <= 0), cost: 1

	Eliminating location l3 by chaining:

	Applied chaining

	First rule:
	l4 -> l3 : c0^0'=c0^post6, deltaext^0'=deltaext^post6, wnt^0'=wnt^post6, (-wnt^post6+wnt^0 == 0 /\ -c0^post6+c0^0 == 0 /\ deltaext^0-deltaext^post6 == 0), cost: 1
	Second rule:
	l3 -> l0 : c0^0'=c0^post5, deltaext^0'=deltaext^post5, wnt^0'=wnt^post5, (-3+wnt^0 <= 0 /\ -3+deltaext^0 <= 0 /\ -deltaext^0 <= 0 /\ deltaext^0-deltaext^post5 == 0 /\ -2+c0^post5 == 0 /\ -wnt^post5+wnt^0 == 0 /\ -wnt^0 <= 0), cost: 1
	New rule:
	l4 -> l0 : c0^0'=c0^post5, deltaext^0'=deltaext^post5, wnt^0'=wnt^post5, (deltaext^post6-deltaext^post5 == 0 /\ -3+deltaext^post6 <= 0 /\ -wnt^post6+wnt^0 == 0 /\ wnt^post6-wnt^post5 == 0 /\ -c0^post6+c0^0 == 0 /\ -wnt^post6 <= 0 /\ deltaext^0-deltaext^post6 == 0 /\ -2+c0^post5 == 0 /\ -3+wnt^post6 <= 0 /\ -deltaext^post6 <= 0), cost: 1
	
	Applied deletion

	Removed the following rules: 4 5
	
	Eliminating location l1 by chaining:

	Applied chaining

	First rule:
	l0 -> l1 : c0^0'=c0^post1, deltaext^0'=deltaext^post1, wnt^0'=wnt^post1, (-wnt^post1+wnt^0 == 0 /\ c0^0-c0^post1 == 0 /\ 1+deltaext^post1-deltaext^0 == 0 /\ 2-2*deltaext^0+c0^0+wnt^0 <= 0), cost: 1
	Second rule:
	l1 -> l0 : c0^0'=c0^post2, deltaext^0'=deltaext^post2, wnt^0'=wnt^post2, (c0^0-c0^post2 == 0 /\ -wnt^post2+wnt^0 == 0 /\ -deltaext^post2+deltaext^0 == 0), cost: 1
	New rule:
	l0 -> l0 : c0^0'=c0^post2, deltaext^0'=deltaext^post2, wnt^0'=wnt^post2, (-wnt^post1+wnt^0 == 0 /\ -deltaext^post2+deltaext^post1 == 0 /\ -wnt^post2+wnt^post1 == 0 /\ c0^0-c0^post1 == 0 /\ 1+deltaext^post1-deltaext^0 == 0 /\ -c0^post2+c0^post1 == 0 /\ 2-2*deltaext^0+c0^0+wnt^0 <= 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 1
	
	Eliminating location l2 by chaining:

	Applied chaining

	First rule:
	l0 -> l2 : c0^0'=c0^post3, deltaext^0'=deltaext^post3, wnt^0'=wnt^post3, (-1+deltaext^post3-deltaext^0 == 0 /\ c0^0-c0^post3 == 0 /\ -wnt^post3+wnt^0 == 0 /\ 1+2*deltaext^0-c0^0-wnt^0 <= 0), cost: 1
	Second rule:
	l2 -> l0 : c0^0'=c0^post4, deltaext^0'=deltaext^post4, wnt^0'=wnt^post4, (-deltaext^post4+deltaext^0 == 0 /\ -wnt^post4+wnt^0 == 0 /\ c0^0-c0^post4 == 0), cost: 1
	New rule:
	l0 -> l0 : c0^0'=c0^post4, deltaext^0'=deltaext^post4, wnt^0'=wnt^post4, (-deltaext^post4+deltaext^post3 == 0 /\ -1+deltaext^post3-deltaext^0 == 0 /\ c0^0-c0^post3 == 0 /\ -c0^post4+c0^post3 == 0 /\ -wnt^post3+wnt^0 == 0 /\ -wnt^post4+wnt^post3 == 0 /\ 1+2*deltaext^0-c0^0-wnt^0 <= 0), cost: 1
	
	Applied deletion

	Removed the following rules: 2 3

Simplified Transitions

Start location: l4
Program variables: c0^0 deltaext^0 wnt^0
  10: l0 -> l0 : deltaext^0'=-1+deltaext^0, 2-2*deltaext^0+c0^0+wnt^0 <= 0, cost: 1
  11: l0 -> l0 : deltaext^0'=1+deltaext^0, 1+2*deltaext^0-c0^0-wnt^0 <= 0, cost: 1
   9: l4 -> l0 : c0^0'=2, (-3+wnt^0 <= 0 /\ -3+deltaext^0 <= 0 /\ -deltaext^0 <= 0 /\ -wnt^0 <= 0), cost: 1

	Propagated Equalities

	Original rule:
	l4 -> l0 : c0^0'=c0^post5, deltaext^0'=deltaext^post5, wnt^0'=wnt^post5, (deltaext^post6-deltaext^post5 == 0 /\ -3+deltaext^post6 <= 0 /\ -wnt^post6+wnt^0 == 0 /\ wnt^post6-wnt^post5 == 0 /\ -c0^post6+c0^0 == 0 /\ -wnt^post6 <= 0 /\ deltaext^0-deltaext^post6 == 0 /\ -2+c0^post5 == 0 /\ -3+wnt^post6 <= 0 /\ -deltaext^post6 <= 0), cost: 1
	New rule:
	l4 -> l0 : c0^0'=2, deltaext^0'=deltaext^post6, wnt^0'=wnt^post6, (0 == 0 /\ -3+deltaext^post6 <= 0 /\ -wnt^post6+wnt^0 == 0 /\ -c0^post6+c0^0 == 0 /\ -wnt^post6 <= 0 /\ deltaext^0-deltaext^post6 == 0 /\ -3+wnt^post6 <= 0 /\ -deltaext^post6 <= 0), cost: 1
	
		propagated equality deltaext^post5 = deltaext^post6
		
		propagated equality wnt^post5 = wnt^post6
		
		propagated equality c0^post5 = 2
		
	Propagated Equalities

	Original rule:
	l4 -> l0 : c0^0'=2, deltaext^0'=deltaext^post6, wnt^0'=wnt^post6, (0 == 0 /\ -3+deltaext^post6 <= 0 /\ -wnt^post6+wnt^0 == 0 /\ -c0^post6+c0^0 == 0 /\ -wnt^post6 <= 0 /\ deltaext^0-deltaext^post6 == 0 /\ -3+wnt^post6 <= 0 /\ -deltaext^post6 <= 0), cost: 1
	New rule:
	l4 -> l0 : c0^0'=2, deltaext^0'=deltaext^0, wnt^0'=wnt^0, (0 == 0 /\ -3+wnt^0 <= 0 /\ -3+deltaext^0 <= 0 /\ -deltaext^0 <= 0 /\ -wnt^0 <= 0), cost: 1
	
		propagated equality wnt^post6 = wnt^0
		
		propagated equality c0^post6 = c0^0
		
		propagated equality deltaext^post6 = deltaext^0
		
	Simplified Guard

	Original rule:
	l4 -> l0 : c0^0'=2, deltaext^0'=deltaext^0, wnt^0'=wnt^0, (0 == 0 /\ -3+wnt^0 <= 0 /\ -3+deltaext^0 <= 0 /\ -deltaext^0 <= 0 /\ -wnt^0 <= 0), cost: 1
	New rule:
	l4 -> l0 : c0^0'=2, deltaext^0'=deltaext^0, wnt^0'=wnt^0, (-3+wnt^0 <= 0 /\ -3+deltaext^0 <= 0 /\ -deltaext^0 <= 0 /\ -wnt^0 <= 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	l4 -> l0 : c0^0'=2, deltaext^0'=deltaext^0, wnt^0'=wnt^0, (-3+wnt^0 <= 0 /\ -3+deltaext^0 <= 0 /\ -deltaext^0 <= 0 /\ -wnt^0 <= 0), cost: 1
	New rule:
	l4 -> l0 : c0^0'=2, (-3+wnt^0 <= 0 /\ -3+deltaext^0 <= 0 /\ -deltaext^0 <= 0 /\ -wnt^0 <= 0), cost: 1
	
	Propagated Equalities

	Original rule:
	l0 -> l0 : c0^0'=c0^post2, deltaext^0'=deltaext^post2, wnt^0'=wnt^post2, (-wnt^post1+wnt^0 == 0 /\ -deltaext^post2+deltaext^post1 == 0 /\ -wnt^post2+wnt^post1 == 0 /\ c0^0-c0^post1 == 0 /\ 1+deltaext^post1-deltaext^0 == 0 /\ -c0^post2+c0^post1 == 0 /\ 2-2*deltaext^0+c0^0+wnt^0 <= 0), cost: 1
	New rule:
	l0 -> l0 : c0^0'=c0^post1, deltaext^0'=deltaext^post1, wnt^0'=wnt^post1, (0 == 0 /\ -wnt^post1+wnt^0 == 0 /\ c0^0-c0^post1 == 0 /\ 1+deltaext^post1-deltaext^0 == 0 /\ 2-2*deltaext^0+c0^0+wnt^0 <= 0), cost: 1
	
		propagated equality deltaext^post2 = deltaext^post1
		
		propagated equality wnt^post2 = wnt^post1
		
		propagated equality c0^post2 = c0^post1
		
	Propagated Equalities

	Original rule:
	l0 -> l0 : c0^0'=c0^post1, deltaext^0'=deltaext^post1, wnt^0'=wnt^post1, (0 == 0 /\ -wnt^post1+wnt^0 == 0 /\ c0^0-c0^post1 == 0 /\ 1+deltaext^post1-deltaext^0 == 0 /\ 2-2*deltaext^0+c0^0+wnt^0 <= 0), cost: 1
	New rule:
	l0 -> l0 : c0^0'=c0^0, deltaext^0'=-1+deltaext^0, wnt^0'=wnt^0, (0 == 0 /\ 2-2*deltaext^0+c0^0+wnt^0 <= 0), cost: 1
	
		propagated equality wnt^post1 = wnt^0
		
		propagated equality c0^post1 = c0^0
		
		propagated equality deltaext^post1 = -1+deltaext^0
		
	Simplified Guard

	Original rule:
	l0 -> l0 : c0^0'=c0^0, deltaext^0'=-1+deltaext^0, wnt^0'=wnt^0, (0 == 0 /\ 2-2*deltaext^0+c0^0+wnt^0 <= 0), cost: 1
	New rule:
	l0 -> l0 : c0^0'=c0^0, deltaext^0'=-1+deltaext^0, wnt^0'=wnt^0, 2-2*deltaext^0+c0^0+wnt^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l0 : c0^0'=c0^0, deltaext^0'=-1+deltaext^0, wnt^0'=wnt^0, 2-2*deltaext^0+c0^0+wnt^0 <= 0, cost: 1
	New rule:
	l0 -> l0 : deltaext^0'=-1+deltaext^0, 2-2*deltaext^0+c0^0+wnt^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l0 -> l0 : c0^0'=c0^post4, deltaext^0'=deltaext^post4, wnt^0'=wnt^post4, (-deltaext^post4+deltaext^post3 == 0 /\ -1+deltaext^post3-deltaext^0 == 0 /\ c0^0-c0^post3 == 0 /\ -c0^post4+c0^post3 == 0 /\ -wnt^post3+wnt^0 == 0 /\ -wnt^post4+wnt^post3 == 0 /\ 1+2*deltaext^0-c0^0-wnt^0 <= 0), cost: 1
	New rule:
	l0 -> l0 : c0^0'=c0^post3, deltaext^0'=deltaext^post3, wnt^0'=wnt^post3, (0 == 0 /\ -1+deltaext^post3-deltaext^0 == 0 /\ c0^0-c0^post3 == 0 /\ -wnt^post3+wnt^0 == 0 /\ 1+2*deltaext^0-c0^0-wnt^0 <= 0), cost: 1
	
		propagated equality deltaext^post4 = deltaext^post3
		
		propagated equality c0^post4 = c0^post3
		
		propagated equality wnt^post4 = wnt^post3
		
	Propagated Equalities

	Original rule:
	l0 -> l0 : c0^0'=c0^post3, deltaext^0'=deltaext^post3, wnt^0'=wnt^post3, (0 == 0 /\ -1+deltaext^post3-deltaext^0 == 0 /\ c0^0-c0^post3 == 0 /\ -wnt^post3+wnt^0 == 0 /\ 1+2*deltaext^0-c0^0-wnt^0 <= 0), cost: 1
	New rule:
	l0 -> l0 : c0^0'=c0^0, deltaext^0'=1+deltaext^0, wnt^0'=wnt^0, (0 == 0 /\ 1+2*deltaext^0-c0^0-wnt^0 <= 0), cost: 1
	
		propagated equality deltaext^post3 = 1+deltaext^0
		
		propagated equality c0^post3 = c0^0
		
		propagated equality wnt^post3 = wnt^0
		
	Simplified Guard

	Original rule:
	l0 -> l0 : c0^0'=c0^0, deltaext^0'=1+deltaext^0, wnt^0'=wnt^0, (0 == 0 /\ 1+2*deltaext^0-c0^0-wnt^0 <= 0), cost: 1
	New rule:
	l0 -> l0 : c0^0'=c0^0, deltaext^0'=1+deltaext^0, wnt^0'=wnt^0, 1+2*deltaext^0-c0^0-wnt^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l0 : c0^0'=c0^0, deltaext^0'=1+deltaext^0, wnt^0'=wnt^0, 1+2*deltaext^0-c0^0-wnt^0 <= 0, cost: 1
	New rule:
	l0 -> l0 : deltaext^0'=1+deltaext^0, 1+2*deltaext^0-c0^0-wnt^0 <= 0, cost: 1

Step with 9

	Trace

	9[(-3+wnt^0 <= 0 /\ -3+deltaext^0 <= 0 /\ -deltaext^0 <= 0 /\ -wnt^0 <= 0)]
	
	Blocked

	[{}, {}]

Step with 10

	Trace

	9[(-3+wnt^0 <= 0 /\ -3+deltaext^0 <= 0 /\ -deltaext^0 <= 0 /\ -wnt^0 <= 0)], 10[(2-2*deltaext^0+c0^0+wnt^0 <= 0)]
	
	Blocked

	[{}, {}, {}]

Accelerate

Start location: l4
Program variables: c0^0 deltaext^0 wnt^0
  10: l0 -> l0 : deltaext^0'=-1+deltaext^0, 2-2*deltaext^0+c0^0+wnt^0 <= 0, cost: 1
  11: l0 -> l0 : deltaext^0'=1+deltaext^0, 1+2*deltaext^0-c0^0-wnt^0 <= 0, cost: 1
  12: l0 -> l0 : deltaext^0'=deltaext^0-n, (-1+n >= 0 /\ 2*deltaext^0-2*n-c0^0-wnt^0 >= 0), cost: 1
   9: l4 -> l0 : c0^0'=2, (-3+wnt^0 <= 0 /\ -3+deltaext^0 <= 0 /\ -deltaext^0 <= 0 /\ -wnt^0 <= 0), cost: 1

	Loop Acceleration

	Original rule:
	l0 -> l0 : deltaext^0'=-1+deltaext^0, (2-2*deltaext^0+c0^0+wnt^0 <= 0), cost: 1
	New rule:
	l0 -> l0 : deltaext^0'=deltaext^0-n, (-1+n >= 0 /\ 2*deltaext^0-2*n-c0^0-wnt^0 >= 0), cost: 1

		-2+2*deltaext^0-c0^0-wnt^0 >= 0 [0]: montonic decrease yields 2*deltaext^0-2*n-c0^0-wnt^0 >= 0
		
		-2+2*deltaext^0-c0^0-wnt^0 >= 0 [1]: eventual increase yields (2 <= 0 /\ -2+2*deltaext^0-c0^0-wnt^0 >= 0)
		
		Replacement map: {-2+2*deltaext^0-c0^0-wnt^0 >= 0 -> 2*deltaext^0-2*n-c0^0-wnt^0 >= 0}

	Trace

	9[(-3+wnt^0 <= 0 /\ -3+deltaext^0 <= 0 /\ -deltaext^0 <= 0 /\ -wnt^0 <= 0)], 12[(-1+n >= 0 /\ 2*deltaext^0-2*n-c0^0-wnt^0 >= 0)]
	
	Blocked

	[{}, {}, {10[T], 12[T]}]

Backtrack

	Trace

	9[(-3+wnt^0 <= 0 /\ -3+deltaext^0 <= 0 /\ -deltaext^0 <= 0 /\ -wnt^0 <= 0)]
	
	Blocked

	[{}, {12[T]}]

Step with 10

	Trace

	9[(-3+wnt^0 <= 0 /\ -3+deltaext^0 <= 0 /\ -deltaext^0 <= 0 /\ -wnt^0 <= 0)], 10[(2-2*deltaext^0+c0^0+wnt^0 <= 0)]
	
	Blocked

	[{}, {12[T]}, {}]

Covered

	Trace

	9[(-3+wnt^0 <= 0 /\ -3+deltaext^0 <= 0 /\ -deltaext^0 <= 0 /\ -wnt^0 <= 0)]
	
	Blocked

	[{}, {10[T], 12[T]}]

Step with 11

	Trace

	9[(-3+wnt^0 <= 0 /\ -3+deltaext^0 <= 0 /\ -deltaext^0 <= 0 /\ -wnt^0 <= 0)], 11[(1+2*deltaext^0-c0^0-wnt^0 <= 0)]
	
	Blocked

	[{}, {10[T], 12[T]}, {}]

Accelerate

Start location: l4
Program variables: c0^0 deltaext^0 wnt^0
  10: l0 -> l0 : deltaext^0'=-1+deltaext^0, 2-2*deltaext^0+c0^0+wnt^0 <= 0, cost: 1
  11: l0 -> l0 : deltaext^0'=1+deltaext^0, 1+2*deltaext^0-c0^0-wnt^0 <= 0, cost: 1
  12: l0 -> l0 : deltaext^0'=deltaext^0-n, (-1+n >= 0 /\ 2*deltaext^0-2*n-c0^0-wnt^0 >= 0), cost: 1
  13: l0 -> l0 : deltaext^0'=deltaext^0+n2, (1-2*deltaext^0-2*n2+c0^0+wnt^0 >= 0 /\ -1+n2 >= 0), cost: 1
   9: l4 -> l0 : c0^0'=2, (-3+wnt^0 <= 0 /\ -3+deltaext^0 <= 0 /\ -deltaext^0 <= 0 /\ -wnt^0 <= 0), cost: 1

	Loop Acceleration

	Original rule:
	l0 -> l0 : deltaext^0'=1+deltaext^0, (1+2*deltaext^0-c0^0-wnt^0 <= 0), cost: 1
	New rule:
	l0 -> l0 : deltaext^0'=deltaext^0+n2, (1-2*deltaext^0-2*n2+c0^0+wnt^0 >= 0 /\ -1+n2 >= 0), cost: 1

		-1-2*deltaext^0+c0^0+wnt^0 >= 0 [0]: montonic decrease yields 1-2*deltaext^0-2*n2+c0^0+wnt^0 >= 0
		
		-1-2*deltaext^0+c0^0+wnt^0 >= 0 [1]: eventual increase yields (-1-2*deltaext^0+c0^0+wnt^0 >= 0 /\ 2 <= 0)
		
		Replacement map: {-1-2*deltaext^0+c0^0+wnt^0 >= 0 -> 1-2*deltaext^0-2*n2+c0^0+wnt^0 >= 0}

	Trace

	9[(-3+wnt^0 <= 0 /\ -3+deltaext^0 <= 0 /\ -deltaext^0 <= 0 /\ -wnt^0 <= 0)], 13[(1-2*deltaext^0-2*n2+c0^0+wnt^0 >= 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {10[T], 12[T]}, {11[T], 13[T]}]

Backtrack

	Trace

	9[(-3+wnt^0 <= 0 /\ -3+deltaext^0 <= 0 /\ -deltaext^0 <= 0 /\ -wnt^0 <= 0)]
	
	Blocked

	[{}, {10[T], 12[T], 13[T]}]

Step with 11

	Trace

	9[(-3+wnt^0 <= 0 /\ -3+deltaext^0 <= 0 /\ -deltaext^0 <= 0 /\ -wnt^0 <= 0)], 11[(1+2*deltaext^0-c0^0-wnt^0 <= 0)]
	
	Blocked

	[{}, {10[T], 12[T], 13[T]}, {}]

Covered

	Trace

	9[(-3+wnt^0 <= 0 /\ -3+deltaext^0 <= 0 /\ -deltaext^0 <= 0 /\ -wnt^0 <= 0)]
	
	Blocked

	[{}, {10[T], 11[T], 12[T], 13[T]}]

Backtrack

	Trace

	Blocked

	[{9[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
