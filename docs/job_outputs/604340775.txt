YES

Solver Timeout: 4
Global Timeout: 300
Maximum number of concurrent processes: 900
*******************************************************************************************
*********************** UNPROCESSED TRANSITION SYSTEMS PER FUNCTION ***********************
*******************************************************************************************


List of LLVMGraphs + assumeNodes + staticAssertNodes [1] :

+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++
+                                                                  +
Init Location: 0
Transitions:
<l0, l1, true, seq{main__func_return_ -> 0, main_i -> Â¿functionCall(__VERIFIER_nondet_int), main_j -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l1, l2, true>
<l2, l13, not(((main_i - main_j) >= 1))>
<l2, l3, ((main_i - main_j) >= 1)>
<l3, l4, true, seq{main_nondetNat -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l4, l5, (main_nondetNat < 0)>
<l4, l7, not((main_nondetNat < 0))>
<l5, l6, true, seq{main_nondetNat -> ~(main_nondetNat)}>
<l6, l7, true>
<l7, l8, true, seq{main_i -> (main_i - main_nondetNat), main_nondetPos -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l8, l9, (main_nondetPos < 0)>
<l8, l11, not((main_nondetPos < 0))>
<l9, l10, true, seq{main_nondetPos -> ~(main_nondetPos)}>
<l10, l11, true>
<l11, l12, true, seq{main_nondetPos -> (main_nondetPos + 1), main_j -> (main_j + main_nondetPos)}>
<l12, l2, true>
<l13, l14, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

+ Assume Nodes [0]: ++++++++++++++++++++++++++++++++++++++++++++++++
       
+ Static Assert Nodes [0]: +++++++++++++++++++++++++++++++++++++++++
       
+ After preprocess (paralelization): ++++++++++++++++++++++++++++++

Init Location: 0
Transitions:
<l0, l15, true, seq{main__func_return_ -> 0}>
<l15, l16, true, seq{varCall_1 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l16, l17, true, seq{main_i -> varCall_1}>
<l17, l18, true, seq{varCall_2 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l18, l1, true, seq{main_j -> varCall_2}>
<l1, l2, true>
<l2, l3, ((main_i - main_j) >= 1)>
<l2, l13, not(((main_i - main_j) >= 1))>
<l3, l19, true, seq{varCall_3 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l19, l4, true, seq{main_nondetNat -> varCall_3}>
<l4, l5, (main_nondetNat < 0)>
<l4, l7, not((main_nondetNat < 0))>
<l5, l6, true, seq{main_nondetNat -> ~(main_nondetNat)}>
<l6, l7, true>
<l7, l20, true, seq{main_i -> (main_i - main_nondetNat)}>
<l20, l21, true, seq{varCall_4 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l21, l8, true, seq{main_nondetPos -> varCall_4}>
<l8, l9, (main_nondetPos < 0)>
<l8, l11, not((main_nondetPos < 0))>
<l9, l10, true, seq{main_nondetPos -> ~(main_nondetPos)}>
<l10, l11, true>
<l11, l12, true, seq{main_nondetPos -> (main_nondetPos + 1), main_j -> (main_j + main_nondetPos)}>
<l12, l2, true>
<l13, l14, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:
14, 
Accepting locations:

Asserts:

+                                                                  +
+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++


Function Return and Parameters Information [2 functions]:
    function name: __VERIFIER_nondet_int [1 return + 0 parameters]        demangled: __VERIFIER_nondet_int
        __VERIFIER_nondet_int__func_return_      [function result] : int
    function name: main [1 return + 0 parameters]        demangled: main
        main__func_return_      [function result] : int


AST Ident Scanner Information [6 idents]:
__VERIFIER_nondet_int | function | [integer, ()] | <line: 11, col: 1> | <line: 15, col: 6> <line: 16, col: 6> <line: 18, col: 21> <line: 23, col: 15>
main | function | [integer, ()] | <line: 13, col: 1>
i | local variable | integer | <line: 14, col: 5> | <line: 15, col: 2> <line: 17, col: 9> <line: 22, col: 3> <line: 22, col: 7>
j | local variable | integer | <line: 14, col: 5> | <line: 16, col: 2> <line: 17, col: 13> <line: 28, col: 3> <line: 28, col: 7>
nondetNat | local variable | integer | <line: 14, col: 5> | <line: 18, col: 9> <line: 19, col: 13> <line: 20, col: 13> <line: 20, col: 26> <line: 22, col: 11>
nondetPos | local variable | integer | <line: 14, col: 5> | <line: 23, col: 3> <line: 24, col: 13> <line: 25, col: 13> <line: 25, col: 26> <line: 27, col: 9> <line: 27, col: 21> <line: 28, col: 11>

Main function: main
Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l2, (main_i = undef5) /\ (main_j = undef6)>
<l2, l2, ((main_i - main_j) >= 1) /\ (undef7 < 0) /\ (undef8 < 0), par{main_i -> (main_i - ~(undef7)), main_j -> (main_j + (~(undef8) + 1))}>
<l2, l2, ((main_i - main_j) >= 1) /\ (undef7 < 0) /\ not((undef8 < 0)), par{main_i -> (main_i - ~(undef7)), main_j -> (main_j + (undef8 + 1))}>
<l2, l2, ((main_i - main_j) >= 1) /\ not((undef7 < 0)) /\ (undef8 < 0), par{main_i -> (main_i - undef7), main_j -> (main_j + (~(undef8) + 1))}>
<l2, l2, ((main_i - main_j) >= 1) /\ not((undef7 < 0)) /\ not((undef8 < 0)), par{main_i -> (main_i - undef7), main_j -> (main_j + (undef8 + 1))}>
<l2, l14, not(((main_i - main_j) >= 1))>

Fresh variables:
undef5, undef6, undef7, undef8, 

Undef variables:
undef5, undef6, undef7, undef8, 

Abstraction variables:

Exit nodes:
14, 
Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l2, l2, 1 + main_j <= main_i /\ 1 + undef7 <= 0 /\ 1 + undef8 <= 0, {main_i -> main_i + undef7, main_j -> 1 + main_j - undef8, rest remain the same}>
<l2, l2, 0 <= undef8 /\ 1 + main_j <= main_i /\ 1 + undef7 <= 0, {main_i -> main_i + undef7, main_j -> 1 + main_j + undef8, rest remain the same}>
<l2, l2, 0 <= undef7 /\ 1 + main_j <= main_i /\ 1 + undef8 <= 0, {main_i -> main_i - undef7, main_j -> 1 + main_j - undef8, rest remain the same}>
<l2, l2, 0 <= undef7 /\ 0 <= undef8 /\ 1 + main_j <= main_i, {main_i -> main_i - undef7, main_j -> 1 + main_j + undef8, rest remain the same}>
Variables:
main_i, main_j

Graph 2:
Transitions:
Variables:

Precedence: 
Graph 0

Graph 1
<l0, l2, main_i = undef5 /\ main_j = undef6, {all remain the same}>

Graph 2
<l2, l14, main_i <= main_j, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 2 , 1 )
( 14 , 2 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.004839

Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.001728s
[33mRanking function: [36m-2 + 3*main_i - 3*main_j[0m
New Graphs: 
Proving termination of subgraph 2
Analyzing SCC {l14}...
No cycles found.

[32mProgram Terminates[0m
