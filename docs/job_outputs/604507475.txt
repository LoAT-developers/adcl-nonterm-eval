unknown

Initial ITS

Start location: l4
Program variables: i_5^0 result_4^0
   0: l0 -> l1 : i_5^0'=i_5^post1, result_4^0'=result_4^post1, (-i_5^0 <= 0 /\ -1-i_5^0+i_5^1 == 0 /\ result_4^0-result_4^post1 == 0 /\ 2+i_5^post1-i_5^1 == 0), cost: 1
   2: l0 -> l2 : i_5^0'=i_5^post3, result_4^0'=result_4^post3, (0 == 0 /\ i_5^0-i_5^post3 == 0 /\ 1+i_5^0 <= 0), cost: 1
   1: l1 -> l0 : i_5^0'=i_5^post2, result_4^0'=result_4^post2, (-result_4^post2+result_4^0 == 0 /\ -i_5^post2+i_5^0 == 0), cost: 1
   3: l3 -> l0 : i_5^0'=i_5^post4, result_4^0'=result_4^post4, (result_4^0-result_4^post4 == 0 /\ -i_5^post4+i_5^0 == 0), cost: 1
   4: l4 -> l3 : i_5^0'=i_5^post5, result_4^0'=result_4^post5, (-i_5^post5+i_5^0 == 0 /\ -result_4^post5+result_4^0 == 0), cost: 1

Chained Linear Paths

Start location: l4
Program variables: i_5^0 result_4^0
   2: l0 -> l2 : i_5^0'=i_5^post3, result_4^0'=result_4^post3, (0 == 0 /\ i_5^0-i_5^post3 == 0 /\ 1+i_5^0 <= 0), cost: 1
   6: l0 -> l0 : i_5^0'=i_5^post2, result_4^0'=result_4^post2, (-result_4^post2+result_4^post1 == 0 /\ -i_5^0 <= 0 /\ -1-i_5^0+i_5^1 == 0 /\ result_4^0-result_4^post1 == 0 /\ -i_5^post2+i_5^post1 == 0 /\ 2+i_5^post1-i_5^1 == 0), cost: 1
   5: l4 -> l0 : i_5^0'=i_5^post4, result_4^0'=result_4^post4, (-i_5^post5+i_5^0 == 0 /\ result_4^post5-result_4^post4 == 0 /\ -result_4^post5+result_4^0 == 0 /\ i_5^post5-i_5^post4 == 0), cost: 1

	Eliminating location l3 by chaining:

	Applied chaining

	First rule:
	l4 -> l3 : i_5^0'=i_5^post5, result_4^0'=result_4^post5, (-i_5^post5+i_5^0 == 0 /\ -result_4^post5+result_4^0 == 0), cost: 1
	Second rule:
	l3 -> l0 : i_5^0'=i_5^post4, result_4^0'=result_4^post4, (result_4^0-result_4^post4 == 0 /\ -i_5^post4+i_5^0 == 0), cost: 1
	New rule:
	l4 -> l0 : i_5^0'=i_5^post4, result_4^0'=result_4^post4, (-i_5^post5+i_5^0 == 0 /\ result_4^post5-result_4^post4 == 0 /\ -result_4^post5+result_4^0 == 0 /\ i_5^post5-i_5^post4 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 3 4
	
	Eliminating location l1 by chaining:

	Applied chaining

	First rule:
	l0 -> l1 : i_5^0'=i_5^post1, result_4^0'=result_4^post1, (-i_5^0 <= 0 /\ -1-i_5^0+i_5^1 == 0 /\ result_4^0-result_4^post1 == 0 /\ 2+i_5^post1-i_5^1 == 0), cost: 1
	Second rule:
	l1 -> l0 : i_5^0'=i_5^post2, result_4^0'=result_4^post2, (-result_4^post2+result_4^0 == 0 /\ -i_5^post2+i_5^0 == 0), cost: 1
	New rule:
	l0 -> l0 : i_5^0'=i_5^post2, result_4^0'=result_4^post2, (-result_4^post2+result_4^post1 == 0 /\ -i_5^0 <= 0 /\ -1-i_5^0+i_5^1 == 0 /\ result_4^0-result_4^post1 == 0 /\ -i_5^post2+i_5^post1 == 0 /\ 2+i_5^post1-i_5^1 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 1

Simplified Transitions

Start location: l4
Program variables: i_5^0 result_4^0
   7: l0 -> l2 : result_4^0'=result_4^post3, 1+i_5^0 <= 0, cost: 1
   9: l0 -> l0 : i_5^0'=-1+i_5^0, -i_5^0 <= 0, cost: 1
   8: l4 -> l0 : T, cost: 1

	Propagated Equalities

	Original rule:
	l0 -> l2 : i_5^0'=i_5^post3, result_4^0'=result_4^post3, (0 == 0 /\ i_5^0-i_5^post3 == 0 /\ 1+i_5^0 <= 0), cost: 1
	New rule:
	l0 -> l2 : i_5^0'=i_5^0, result_4^0'=result_4^post3, (0 == 0 /\ 1+i_5^0 <= 0), cost: 1
	
		propagated equality i_5^post3 = i_5^0
		
	Simplified Guard

	Original rule:
	l0 -> l2 : i_5^0'=i_5^0, result_4^0'=result_4^post3, (0 == 0 /\ 1+i_5^0 <= 0), cost: 1
	New rule:
	l0 -> l2 : i_5^0'=i_5^0, result_4^0'=result_4^post3, 1+i_5^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l2 : i_5^0'=i_5^0, result_4^0'=result_4^post3, 1+i_5^0 <= 0, cost: 1
	New rule:
	l0 -> l2 : result_4^0'=result_4^post3, 1+i_5^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l4 -> l0 : i_5^0'=i_5^post4, result_4^0'=result_4^post4, (-i_5^post5+i_5^0 == 0 /\ result_4^post5-result_4^post4 == 0 /\ -result_4^post5+result_4^0 == 0 /\ i_5^post5-i_5^post4 == 0), cost: 1
	New rule:
	l4 -> l0 : i_5^0'=i_5^post5, result_4^0'=result_4^post5, (0 == 0 /\ -i_5^post5+i_5^0 == 0 /\ -result_4^post5+result_4^0 == 0), cost: 1
	
		propagated equality result_4^post4 = result_4^post5
		
		propagated equality i_5^post4 = i_5^post5
		
	Propagated Equalities

	Original rule:
	l4 -> l0 : i_5^0'=i_5^post5, result_4^0'=result_4^post5, (0 == 0 /\ -i_5^post5+i_5^0 == 0 /\ -result_4^post5+result_4^0 == 0), cost: 1
	New rule:
	l4 -> l0 : i_5^0'=i_5^0, result_4^0'=result_4^0, 0 == 0, cost: 1
	
		propagated equality i_5^post5 = i_5^0
		
		propagated equality result_4^post5 = result_4^0
		
	Simplified Guard

	Original rule:
	l4 -> l0 : i_5^0'=i_5^0, result_4^0'=result_4^0, 0 == 0, cost: 1
	New rule:
	l4 -> l0 : i_5^0'=i_5^0, result_4^0'=result_4^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l4 -> l0 : i_5^0'=i_5^0, result_4^0'=result_4^0, T, cost: 1
	New rule:
	l4 -> l0 : T, cost: 1
	
	Propagated Equalities

	Original rule:
	l0 -> l0 : i_5^0'=i_5^post2, result_4^0'=result_4^post2, (-result_4^post2+result_4^post1 == 0 /\ -i_5^0 <= 0 /\ -1-i_5^0+i_5^1 == 0 /\ result_4^0-result_4^post1 == 0 /\ -i_5^post2+i_5^post1 == 0 /\ 2+i_5^post1-i_5^1 == 0), cost: 1
	New rule:
	l0 -> l0 : i_5^0'=i_5^post1, result_4^0'=result_4^post1, (0 == 0 /\ -i_5^0 <= 0 /\ -1-i_5^0+i_5^1 == 0 /\ result_4^0-result_4^post1 == 0 /\ 2+i_5^post1-i_5^1 == 0), cost: 1
	
		propagated equality result_4^post2 = result_4^post1
		
		propagated equality i_5^post2 = i_5^post1
		
	Propagated Equalities

	Original rule:
	l0 -> l0 : i_5^0'=i_5^post1, result_4^0'=result_4^post1, (0 == 0 /\ -i_5^0 <= 0 /\ -1-i_5^0+i_5^1 == 0 /\ result_4^0-result_4^post1 == 0 /\ 2+i_5^post1-i_5^1 == 0), cost: 1
	New rule:
	l0 -> l0 : i_5^0'=-1+i_5^0, result_4^0'=result_4^0, (0 == 0 /\ -i_5^0 <= 0), cost: 1
	
		propagated equality i_5^1 = 1+i_5^0
		
		propagated equality result_4^post1 = result_4^0
		
		propagated equality i_5^post1 = -1+i_5^0
		
	Simplified Guard

	Original rule:
	l0 -> l0 : i_5^0'=-1+i_5^0, result_4^0'=result_4^0, (0 == 0 /\ -i_5^0 <= 0), cost: 1
	New rule:
	l0 -> l0 : i_5^0'=-1+i_5^0, result_4^0'=result_4^0, -i_5^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l0 : i_5^0'=-1+i_5^0, result_4^0'=result_4^0, -i_5^0 <= 0, cost: 1
	New rule:
	l0 -> l0 : i_5^0'=-1+i_5^0, -i_5^0 <= 0, cost: 1

Step with 8

	Trace

	8[T]
	
	Blocked

	[{}, {}]

Step with 7

	Trace

	8[T], 7[(1+i_5^0 <= 0)]
	
	Blocked

	[{}, {}, {}]

Backtrack

	Trace

	8[T]
	
	Blocked

	[{}, {7[T]}]

Step with 9

	Trace

	8[T], 9[(-i_5^0 <= 0)]
	
	Blocked

	[{}, {7[T]}, {}]

Accelerate

Start location: l4
Program variables: i_5^0 result_4^0
   7: l0 -> l2 : result_4^0'=result_4^post3, 1+i_5^0 <= 0, cost: 1
   9: l0 -> l0 : i_5^0'=-1+i_5^0, -i_5^0 <= 0, cost: 1
  10: l0 -> l0 : i_5^0'=i_5^0-n, (1+i_5^0-n >= 0 /\ -1+n >= 0), cost: 1
   8: l4 -> l0 : T, cost: 1

	Loop Acceleration

	Original rule:
	l0 -> l0 : i_5^0'=-1+i_5^0, (-i_5^0 <= 0), cost: 1
	New rule:
	l0 -> l0 : i_5^0'=i_5^0-n, (1+i_5^0-n >= 0 /\ -1+n >= 0), cost: 1

		i_5^0 >= 0 [0]: montonic decrease yields 1+i_5^0-n >= 0
		
		i_5^0 >= 0 [1]: eventual increase yields (1 <= 0 /\ i_5^0 >= 0)
		
		Replacement map: {i_5^0 >= 0 -> 1+i_5^0-n >= 0}

	Trace

	8[T], 10[(1+i_5^0-n >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {7[T]}, {9[T], 10[T]}]

Step with 7

	Trace

	8[T], 10[(1+i_5^0-n >= 0 /\ -1+n >= 0)], 7[(1+i_5^0 <= 0)]
	
	Blocked

	[{}, {7[T]}, {9[T], 10[T]}, {}]

Backtrack

	Trace

	8[T], 10[(1+i_5^0-n >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {7[T]}, {7[T], 9[T], 10[T]}]

Backtrack

	Trace

	8[T]
	
	Blocked

	[{}, {7[T], 10[T]}]

Step with 9

	Trace

	8[T], 9[(-i_5^0 <= 0)]
	
	Blocked

	[{}, {7[T], 10[T]}, {}]

Covered

	Trace

	8[T]
	
	Blocked

	[{}, {7[T], 9[T], 10[T]}]

Backtrack

	Trace

	Blocked

	[{8[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
