WORST_CASE(Omega(0),?)

Initial ITS
Start location: __init
   0: f1_0_main_Load -> f210_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, (-arg2P0-x30 == 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ 1+x30 > 0 /\ -arg1P0-x20 == 0 /\ 1+x20 > 0), cost: 1
   1: f210_0_main_LE -> f210_0_main_LE : arg2'=arg2P1, arg1'=arg1P1, (arg2-arg1 < 0 /\ arg2+arg1-arg2P1 == 0 /\ 1+arg1-arg1P1 == 0), cost: 1
   2: __init -> f1_0_main_Load : arg2'=arg2P2, arg1'=arg1P2, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_Load -> f210_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, (-arg2P0-x30 == 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ 1+x30 > 0 /\ -arg1P0-x20 == 0 /\ 1+x20 > 0), cost: 1
New rule:
f1_0_main_Load -> f210_0_main_LE : arg2'=-x30, arg1'=-x20, (arg1 > 0 /\ -1+arg2 > 0 /\ 1+x30 > 0 /\ 1+x20 > 0), cost: 1

Applied preprocessing
Original rule:
f210_0_main_LE -> f210_0_main_LE : arg2'=arg2P1, arg1'=arg1P1, (arg2-arg1 < 0 /\ arg2+arg1-arg2P1 == 0 /\ 1+arg1-arg1P1 == 0), cost: 1
New rule:
f210_0_main_LE -> f210_0_main_LE : arg2'=arg2+arg1, arg1'=1+arg1, -arg2+arg1 > 0, cost: 1

Simplified rules
Start location: __init
   3: f1_0_main_Load -> f210_0_main_LE : arg2'=-x30, arg1'=-x20, (arg1 > 0 /\ -1+arg2 > 0 /\ 1+x30 > 0 /\ 1+x20 > 0), cost: 1
   4: f210_0_main_LE -> f210_0_main_LE : arg2'=arg2+arg1, arg1'=1+arg1, -arg2+arg1 > 0, cost: 1
   2: __init -> f1_0_main_Load : arg2'=arg2P2, arg1'=arg1P2, TRUE, cost: 1


Applied acceleration
Original rule:
f210_0_main_LE -> f210_0_main_LE : arg2'=arg2+arg1, arg1'=1+arg1, -arg2+arg1 > 0, cost: 1
New rule:
f210_0_main_LE -> f210_0_main_LE : arg2'=arg2+1/2*n^2+arg1*n-1/2*n, arg1'=arg1+n, (-arg2+arg1 > 0 /\ -3/2-arg2-(-1+n)*arg1-1/2*(-1+n)^2+arg1+3/2*n > 0 /\ n >= 0), cost: n
Sub-proof via acceration calculus written to file:///tmp/tmpnam_ilEnci.txt

Applied deletion
Removed the following rules: 4

Accelerated simple loops
Start location: __init
   3: f1_0_main_Load -> f210_0_main_LE : arg2'=-x30, arg1'=-x20, (arg1 > 0 /\ -1+arg2 > 0 /\ 1+x30 > 0 /\ 1+x20 > 0), cost: 1
   5: f210_0_main_LE -> f210_0_main_LE : arg2'=arg2+1/2*n^2+arg1*n-1/2*n, arg1'=arg1+n, (-arg2+arg1 > 0 /\ -3/2-arg2-(-1+n)*arg1-1/2*(-1+n)^2+arg1+3/2*n > 0 /\ n >= 0), cost: n
   2: __init -> f1_0_main_Load : arg2'=arg2P2, arg1'=arg1P2, TRUE, cost: 1


Applied chaining
First rule:
f1_0_main_Load -> f210_0_main_LE : arg2'=-x30, arg1'=-x20, (arg1 > 0 /\ -1+arg2 > 0 /\ 1+x30 > 0 /\ 1+x20 > 0), cost: 1
Second rule:
f210_0_main_LE -> f210_0_main_LE : arg2'=arg2+1/2*n^2+arg1*n-1/2*n, arg1'=arg1+n, (-arg2+arg1 > 0 /\ -3/2-arg2-(-1+n)*arg1-1/2*(-1+n)^2+arg1+3/2*n > 0 /\ n >= 0), cost: n
New rule:
f1_0_main_Load -> f210_0_main_LE : arg2'=-x20*n+1/2*n^2-1/2*n-x30, arg1'=-x20+n, (-3/2-1/2*(-1+n)^2-x20+3/2*n+(-1+n)*x20+x30 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ -x20+x30 > 0 /\ n >= 0 /\ 1+x20 > 0), cost: 1+n

Applied deletion
Removed the following rules: 5

Chained accelerated rules with incoming rules
Start location: __init
   3: f1_0_main_Load -> f210_0_main_LE : arg2'=-x30, arg1'=-x20, (arg1 > 0 /\ -1+arg2 > 0 /\ 1+x30 > 0 /\ 1+x20 > 0), cost: 1
   6: f1_0_main_Load -> f210_0_main_LE : arg2'=-x20*n+1/2*n^2-1/2*n-x30, arg1'=-x20+n, (-3/2-1/2*(-1+n)^2-x20+3/2*n+(-1+n)*x20+x30 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ -x20+x30 > 0 /\ n >= 0 /\ 1+x20 > 0), cost: 1+n
   2: __init -> f1_0_main_Load : arg2'=arg2P2, arg1'=arg1P2, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
  <empty>


Computing asymptotic complexity

Proved the following lower bound
Complexity:  Unknown
Cpx degree: ?

Solved cost: 0
Rule cost:   0

