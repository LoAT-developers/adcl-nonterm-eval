NO

Initial ITS

Start location: __init
Program variables: arg1
   0: f1_0_main_New -> f81_0_loop_InvokeMethod : arg1'=arg1p1, 1+arg1p1 > 0, cost: 1
   1: f81_0_loop_InvokeMethod -> f81_0_loop_InvokeMethod : arg1'=arg1p2, (1+arg1p2 > 0 /\ arg1 > 0), cost: 1
   2: __init -> f1_0_main_New : arg1'=arg1p3, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1
   1: f81_0_loop_InvokeMethod -> f81_0_loop_InvokeMethod : arg1'=arg1p2, (1+arg1p2 > 0 /\ arg1 > 0), cost: 1
   3: __init -> f81_0_loop_InvokeMethod : arg1'=arg1p1, 1+arg1p1 > 0, cost: 1

	Eliminating location f1_0_main_New by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_New : arg1'=arg1p3, T, cost: 1
	Second rule:
	f1_0_main_New -> f81_0_loop_InvokeMethod : arg1'=arg1p1, 1+arg1p1 > 0, cost: 1
	New rule:
	__init -> f81_0_loop_InvokeMethod : arg1'=arg1p1, 1+arg1p1 > 0, cost: 1
	
	Applied deletion

	Removed the following rules: 0 2

Step with 3

	Trace

	3[(1+arg1p1 > 0)]
	
	Blocked

	[{}, {}]

Step with 1

	Trace

	3[(1+arg1p1 > 0)], 1[(1+arg1p2 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {}]

Nonterm

Start location: __init
Program variables: arg1
   1: f81_0_loop_InvokeMethod -> f81_0_loop_InvokeMethod : arg1'=arg1p2, (1+arg1p2 > 0 /\ arg1 > 0), cost: 1
   4: f81_0_loop_InvokeMethod -> LoAT_sink : (1+arg1p2 > 0 /\ -arg1p2+arg1 <= 0 /\ arg1 > 0), cost: NONTERM
   3: __init -> f81_0_loop_InvokeMethod : arg1'=arg1p1, 1+arg1p1 > 0, cost: 1

	Certificate of Non-Termination

	Original rule:
	f81_0_loop_InvokeMethod -> f81_0_loop_InvokeMethod : arg1'=arg1p2, (1+arg1p2 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f81_0_loop_InvokeMethod -> LoAT_sink : (1+arg1p2 > 0 /\ -arg1p2+arg1 <= 0 /\ arg1 > 0), cost: NONTERM

		1+arg1p2 > 0 [0]: monotonic increase yields 1+arg1p2 > 0
		
		arg1 > 0 [0]: eventual decrease yields (arg1p2 > 0 /\ arg1 > 0)
		
		arg1 > 0 [1]: eventual increase yields (-arg1p2+arg1 <= 0 /\ arg1 > 0)
		
		Replacement map: {1+arg1p2 > 0 -> 1+arg1p2 > 0, arg1 > 0 -> (-arg1p2+arg1 <= 0 /\ arg1 > 0)}

Step with 4

	Trace

	3[(1+arg1p1 > 0)], 4[(1+arg1p2 > 0 /\ -arg1p2+arg1 <= 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {4[T]}]

Refute

	Counterexample

	[ arg1=1 ] 3 [ arg1=arg1 ] 4
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
