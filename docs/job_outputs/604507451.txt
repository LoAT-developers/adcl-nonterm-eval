unknown

Initial ITS

Start location: l6
Program variables: __disjvr_0^0 __disjvr_1^0 __disjvr_2^0 x^0 y^0
   0: l0 -> l1 : __disjvr_0^0'=__disjvr_0^post1, __disjvr_1^0'=__disjvr_1^post1, __disjvr_2^0'=__disjvr_2^post1, x^0'=x^post1, y^0'=y^post1, (-1-2*y^0+x^0 <= 0 /\ -__disjvr_0^post1+__disjvr_0^0 == 0 /\ __disjvr_1^0-__disjvr_1^post1 == 0 /\ -__disjvr_2^post1+__disjvr_2^0 == 0 /\ 1+2*y^0-x^0 <= 0 /\ -y^post1+y^0 == 0 /\ -1+x^post1-3*x^0 == 0), cost: 1
   1: l0 -> l1 : __disjvr_0^0'=__disjvr_0^post2, __disjvr_1^0'=__disjvr_1^post2, __disjvr_2^0'=__disjvr_2^post2, x^0'=x^post2, y^0'=y^post2, (y^0-y^post2 == 0 /\ -__disjvr_1^post2+__disjvr_1^0 == 0 /\ __disjvr_0^0-__disjvr_0^post2 == 0 /\ -2*y^0+x^0 <= 0 /\ x^post2-y^0 == 0 /\ 2*y^0-x^0 <= 0 /\ -__disjvr_2^post2+__disjvr_2^0 == 0), cost: 1
   2: l1 -> l2 : __disjvr_0^0'=__disjvr_0^post3, __disjvr_1^0'=__disjvr_1^post3, __disjvr_2^0'=__disjvr_2^post3, x^0'=x^post3, y^0'=y^post3, (-__disjvr_0^post3+__disjvr_0^0 == 0 /\ -x^post3+x^0 == 0 /\ __disjvr_0^post3-__disjvr_0^0 == 0 /\ -y^post3+y^0 == 0 /\ __disjvr_1^0-__disjvr_1^post3 == 0 /\ __disjvr_2^0-__disjvr_2^post3 == 0), cost: 1
   3: l2 -> l3 : __disjvr_0^0'=__disjvr_0^post4, __disjvr_1^0'=__disjvr_1^post4, __disjvr_2^0'=__disjvr_2^post4, x^0'=x^post4, y^0'=y^post4, (y^0-y^post4 == 0 /\ -__disjvr_2^post4+__disjvr_2^0 == 0 /\ -x^post4+x^0 == 0 /\ __disjvr_1^post4-__disjvr_1^0 == 0 /\ __disjvr_0^0-__disjvr_0^post4 == 0 /\ -__disjvr_1^post4+__disjvr_1^0 == 0), cost: 1
   4: l3 -> l4 : __disjvr_0^0'=__disjvr_0^post5, __disjvr_1^0'=__disjvr_1^post5, __disjvr_2^0'=__disjvr_2^post5, x^0'=x^post5, y^0'=y^post5, (-__disjvr_0^post5+__disjvr_0^0 == 0 /\ -x^post5+x^0 == 0 /\ -y^post5+y^0 == 0 /\ __disjvr_2^0-__disjvr_2^post5 == 0 /\ __disjvr_1^0-__disjvr_1^post5 == 0 /\ -__disjvr_2^0+__disjvr_2^post5 == 0), cost: 1
   5: l4 -> l0 : __disjvr_0^0'=__disjvr_0^post6, __disjvr_1^0'=__disjvr_1^post6, __disjvr_2^0'=__disjvr_2^post6, x^0'=x^post6, y^0'=y^post6, (0 == 0 /\ -__disjvr_1^post6+__disjvr_1^0 == 0 /\ -__disjvr_2^post6+__disjvr_2^0 == 0 /\ -x^post6+x^0 == 0 /\ __disjvr_0^0-__disjvr_0^post6 == 0), cost: 1
   6: l5 -> l1 : __disjvr_0^0'=__disjvr_0^post7, __disjvr_1^0'=__disjvr_1^post7, __disjvr_2^0'=__disjvr_2^post7, x^0'=x^post7, y^0'=y^post7, (0 == 0 /\ -__disjvr_0^post7+__disjvr_0^0 == 0 /\ 1-x^post7 <= 0 /\ y^0-y^post7 == 0 /\ __disjvr_2^0-__disjvr_2^post7 == 0 /\ __disjvr_1^0-__disjvr_1^post7 == 0), cost: 1
   7: l6 -> l5 : __disjvr_0^0'=__disjvr_0^post8, __disjvr_1^0'=__disjvr_1^post8, __disjvr_2^0'=__disjvr_2^post8, x^0'=x^post8, y^0'=y^post8, (__disjvr_1^0-__disjvr_1^post8 == 0 /\ -x^post8+x^0 == 0 /\ -y^post8+y^0 == 0 /\ -__disjvr_2^post8+__disjvr_2^0 == 0 /\ __disjvr_0^0-__disjvr_0^post8 == 0), cost: 1

Chained Linear Paths

Start location: l6
Program variables: __disjvr_0^0 __disjvr_1^0 __disjvr_2^0 x^0 y^0
   0: l0 -> l1 : __disjvr_0^0'=__disjvr_0^post1, __disjvr_1^0'=__disjvr_1^post1, __disjvr_2^0'=__disjvr_2^post1, x^0'=x^post1, y^0'=y^post1, (-1-2*y^0+x^0 <= 0 /\ -__disjvr_0^post1+__disjvr_0^0 == 0 /\ __disjvr_1^0-__disjvr_1^post1 == 0 /\ -__disjvr_2^post1+__disjvr_2^0 == 0 /\ 1+2*y^0-x^0 <= 0 /\ -y^post1+y^0 == 0 /\ -1+x^post1-3*x^0 == 0), cost: 1
   1: l0 -> l1 : __disjvr_0^0'=__disjvr_0^post2, __disjvr_1^0'=__disjvr_1^post2, __disjvr_2^0'=__disjvr_2^post2, x^0'=x^post2, y^0'=y^post2, (y^0-y^post2 == 0 /\ -__disjvr_1^post2+__disjvr_1^0 == 0 /\ __disjvr_0^0-__disjvr_0^post2 == 0 /\ -2*y^0+x^0 <= 0 /\ x^post2-y^0 == 0 /\ 2*y^0-x^0 <= 0 /\ -__disjvr_2^post2+__disjvr_2^0 == 0), cost: 1
  11: l1 -> l0 : __disjvr_0^0'=__disjvr_0^post6, __disjvr_1^0'=__disjvr_1^post6, __disjvr_2^0'=__disjvr_2^post6, x^0'=x^post6, y^0'=y^post6, (0 == 0 /\ -__disjvr_0^post3+__disjvr_0^0 == 0 /\ -x^post3+x^0 == 0 /\ -__disjvr_2^post4+__disjvr_2^post5 == 0 /\ -__disjvr_2^post6+__disjvr_2^post5 == 0 /\ -y^post5+y^post4 == 0 /\ __disjvr_0^post3-__disjvr_0^0 == 0 /\ -__disjvr_1^post6+__disjvr_1^post5 == 0 /\ -__disjvr_2^post4+__disjvr_2^post3 == 0 /\ __disjvr_2^post4-__disjvr_2^post5 == 0 /\ -y^post3+y^0 == 0 /\ -__disjvr_0^post5+__disjvr_0^post4 == 0 /\ y^post3-y^post4 == 0 /\ -__disjvr_1^post4+__disjvr_1^post3 == 0 /\ __disjvr_1^0-__disjvr_1^post3 == 0 /\ x^post5-x^post6 == 0 /\ __disjvr_1^post4-__disjvr_1^post3 == 0 /\ __disjvr_0^post3-__disjvr_0^post4 == 0 /\ -x^post5+x^post4 == 0 /\ x^post3-x^post4 == 0 /\ __disjvr_0^post5-__disjvr_0^post6 == 0 /\ __disjvr_2^0-__disjvr_2^post3 == 0 /\ __disjvr_1^post4-__disjvr_1^post5 == 0), cost: 1
   8: l6 -> l1 : __disjvr_0^0'=__disjvr_0^post7, __disjvr_1^0'=__disjvr_1^post7, __disjvr_2^0'=__disjvr_2^post7, x^0'=x^post7, y^0'=y^post7, (0 == 0 /\ __disjvr_1^post8-__disjvr_1^post7 == 0 /\ __disjvr_1^0-__disjvr_1^post8 == 0 /\ -x^post8+x^0 == 0 /\ -__disjvr_0^post7+__disjvr_0^post8 == 0 /\ 1-x^post7 <= 0 /\ -y^post8+y^0 == 0 /\ y^post8-y^post7 == 0 /\ -__disjvr_2^post8+__disjvr_2^0 == 0 /\ __disjvr_2^post8-__disjvr_2^post7 == 0 /\ __disjvr_0^0-__disjvr_0^post8 == 0), cost: 1

	Eliminating location l5 by chaining:

	Applied chaining

	First rule:
	l6 -> l5 : __disjvr_0^0'=__disjvr_0^post8, __disjvr_1^0'=__disjvr_1^post8, __disjvr_2^0'=__disjvr_2^post8, x^0'=x^post8, y^0'=y^post8, (__disjvr_1^0-__disjvr_1^post8 == 0 /\ -x^post8+x^0 == 0 /\ -y^post8+y^0 == 0 /\ -__disjvr_2^post8+__disjvr_2^0 == 0 /\ __disjvr_0^0-__disjvr_0^post8 == 0), cost: 1
	Second rule:
	l5 -> l1 : __disjvr_0^0'=__disjvr_0^post7, __disjvr_1^0'=__disjvr_1^post7, __disjvr_2^0'=__disjvr_2^post7, x^0'=x^post7, y^0'=y^post7, (0 == 0 /\ -__disjvr_0^post7+__disjvr_0^0 == 0 /\ 1-x^post7 <= 0 /\ y^0-y^post7 == 0 /\ __disjvr_2^0-__disjvr_2^post7 == 0 /\ __disjvr_1^0-__disjvr_1^post7 == 0), cost: 1
	New rule:
	l6 -> l1 : __disjvr_0^0'=__disjvr_0^post7, __disjvr_1^0'=__disjvr_1^post7, __disjvr_2^0'=__disjvr_2^post7, x^0'=x^post7, y^0'=y^post7, (0 == 0 /\ __disjvr_1^post8-__disjvr_1^post7 == 0 /\ __disjvr_1^0-__disjvr_1^post8 == 0 /\ -x^post8+x^0 == 0 /\ -__disjvr_0^post7+__disjvr_0^post8 == 0 /\ 1-x^post7 <= 0 /\ -y^post8+y^0 == 0 /\ y^post8-y^post7 == 0 /\ -__disjvr_2^post8+__disjvr_2^0 == 0 /\ __disjvr_2^post8-__disjvr_2^post7 == 0 /\ __disjvr_0^0-__disjvr_0^post8 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 6 7
	
	Eliminating location l2 by chaining:

	Applied chaining

	First rule:
	l1 -> l2 : __disjvr_0^0'=__disjvr_0^post3, __disjvr_1^0'=__disjvr_1^post3, __disjvr_2^0'=__disjvr_2^post3, x^0'=x^post3, y^0'=y^post3, (-__disjvr_0^post3+__disjvr_0^0 == 0 /\ -x^post3+x^0 == 0 /\ __disjvr_0^post3-__disjvr_0^0 == 0 /\ -y^post3+y^0 == 0 /\ __disjvr_1^0-__disjvr_1^post3 == 0 /\ __disjvr_2^0-__disjvr_2^post3 == 0), cost: 1
	Second rule:
	l2 -> l3 : __disjvr_0^0'=__disjvr_0^post4, __disjvr_1^0'=__disjvr_1^post4, __disjvr_2^0'=__disjvr_2^post4, x^0'=x^post4, y^0'=y^post4, (y^0-y^post4 == 0 /\ -__disjvr_2^post4+__disjvr_2^0 == 0 /\ -x^post4+x^0 == 0 /\ __disjvr_1^post4-__disjvr_1^0 == 0 /\ __disjvr_0^0-__disjvr_0^post4 == 0 /\ -__disjvr_1^post4+__disjvr_1^0 == 0), cost: 1
	New rule:
	l1 -> l3 : __disjvr_0^0'=__disjvr_0^post4, __disjvr_1^0'=__disjvr_1^post4, __disjvr_2^0'=__disjvr_2^post4, x^0'=x^post4, y^0'=y^post4, (-__disjvr_0^post3+__disjvr_0^0 == 0 /\ -x^post3+x^0 == 0 /\ __disjvr_0^post3-__disjvr_0^0 == 0 /\ -__disjvr_2^post4+__disjvr_2^post3 == 0 /\ -y^post3+y^0 == 0 /\ y^post3-y^post4 == 0 /\ -__disjvr_1^post4+__disjvr_1^post3 == 0 /\ __disjvr_1^0-__disjvr_1^post3 == 0 /\ __disjvr_1^post4-__disjvr_1^post3 == 0 /\ __disjvr_0^post3-__disjvr_0^post4 == 0 /\ x^post3-x^post4 == 0 /\ __disjvr_2^0-__disjvr_2^post3 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 2 3
	
	Eliminating location l3 by chaining:

	Applied chaining

	First rule:
	l1 -> l3 : __disjvr_0^0'=__disjvr_0^post4, __disjvr_1^0'=__disjvr_1^post4, __disjvr_2^0'=__disjvr_2^post4, x^0'=x^post4, y^0'=y^post4, (-__disjvr_0^post3+__disjvr_0^0 == 0 /\ -x^post3+x^0 == 0 /\ __disjvr_0^post3-__disjvr_0^0 == 0 /\ -__disjvr_2^post4+__disjvr_2^post3 == 0 /\ -y^post3+y^0 == 0 /\ y^post3-y^post4 == 0 /\ -__disjvr_1^post4+__disjvr_1^post3 == 0 /\ __disjvr_1^0-__disjvr_1^post3 == 0 /\ __disjvr_1^post4-__disjvr_1^post3 == 0 /\ __disjvr_0^post3-__disjvr_0^post4 == 0 /\ x^post3-x^post4 == 0 /\ __disjvr_2^0-__disjvr_2^post3 == 0), cost: 1
	Second rule:
	l3 -> l4 : __disjvr_0^0'=__disjvr_0^post5, __disjvr_1^0'=__disjvr_1^post5, __disjvr_2^0'=__disjvr_2^post5, x^0'=x^post5, y^0'=y^post5, (-__disjvr_0^post5+__disjvr_0^0 == 0 /\ -x^post5+x^0 == 0 /\ -y^post5+y^0 == 0 /\ __disjvr_2^0-__disjvr_2^post5 == 0 /\ __disjvr_1^0-__disjvr_1^post5 == 0 /\ -__disjvr_2^0+__disjvr_2^post5 == 0), cost: 1
	New rule:
	l1 -> l4 : __disjvr_0^0'=__disjvr_0^post5, __disjvr_1^0'=__disjvr_1^post5, __disjvr_2^0'=__disjvr_2^post5, x^0'=x^post5, y^0'=y^post5, (-__disjvr_0^post3+__disjvr_0^0 == 0 /\ -x^post3+x^0 == 0 /\ -__disjvr_2^post4+__disjvr_2^post5 == 0 /\ -y^post5+y^post4 == 0 /\ __disjvr_0^post3-__disjvr_0^0 == 0 /\ -__disjvr_2^post4+__disjvr_2^post3 == 0 /\ __disjvr_2^post4-__disjvr_2^post5 == 0 /\ -y^post3+y^0 == 0 /\ -__disjvr_0^post5+__disjvr_0^post4 == 0 /\ y^post3-y^post4 == 0 /\ -__disjvr_1^post4+__disjvr_1^post3 == 0 /\ __disjvr_1^0-__disjvr_1^post3 == 0 /\ __disjvr_1^post4-__disjvr_1^post3 == 0 /\ __disjvr_0^post3-__disjvr_0^post4 == 0 /\ -x^post5+x^post4 == 0 /\ x^post3-x^post4 == 0 /\ __disjvr_2^0-__disjvr_2^post3 == 0 /\ __disjvr_1^post4-__disjvr_1^post5 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 4 9
	
	Eliminating location l4 by chaining:

	Applied chaining

	First rule:
	l1 -> l4 : __disjvr_0^0'=__disjvr_0^post5, __disjvr_1^0'=__disjvr_1^post5, __disjvr_2^0'=__disjvr_2^post5, x^0'=x^post5, y^0'=y^post5, (-__disjvr_0^post3+__disjvr_0^0 == 0 /\ -x^post3+x^0 == 0 /\ -__disjvr_2^post4+__disjvr_2^post5 == 0 /\ -y^post5+y^post4 == 0 /\ __disjvr_0^post3-__disjvr_0^0 == 0 /\ -__disjvr_2^post4+__disjvr_2^post3 == 0 /\ __disjvr_2^post4-__disjvr_2^post5 == 0 /\ -y^post3+y^0 == 0 /\ -__disjvr_0^post5+__disjvr_0^post4 == 0 /\ y^post3-y^post4 == 0 /\ -__disjvr_1^post4+__disjvr_1^post3 == 0 /\ __disjvr_1^0-__disjvr_1^post3 == 0 /\ __disjvr_1^post4-__disjvr_1^post3 == 0 /\ __disjvr_0^post3-__disjvr_0^post4 == 0 /\ -x^post5+x^post4 == 0 /\ x^post3-x^post4 == 0 /\ __disjvr_2^0-__disjvr_2^post3 == 0 /\ __disjvr_1^post4-__disjvr_1^post5 == 0), cost: 1
	Second rule:
	l4 -> l0 : __disjvr_0^0'=__disjvr_0^post6, __disjvr_1^0'=__disjvr_1^post6, __disjvr_2^0'=__disjvr_2^post6, x^0'=x^post6, y^0'=y^post6, (0 == 0 /\ -__disjvr_1^post6+__disjvr_1^0 == 0 /\ -__disjvr_2^post6+__disjvr_2^0 == 0 /\ -x^post6+x^0 == 0 /\ __disjvr_0^0-__disjvr_0^post6 == 0), cost: 1
	New rule:
	l1 -> l0 : __disjvr_0^0'=__disjvr_0^post6, __disjvr_1^0'=__disjvr_1^post6, __disjvr_2^0'=__disjvr_2^post6, x^0'=x^post6, y^0'=y^post6, (0 == 0 /\ -__disjvr_0^post3+__disjvr_0^0 == 0 /\ -x^post3+x^0 == 0 /\ -__disjvr_2^post4+__disjvr_2^post5 == 0 /\ -__disjvr_2^post6+__disjvr_2^post5 == 0 /\ -y^post5+y^post4 == 0 /\ __disjvr_0^post3-__disjvr_0^0 == 0 /\ -__disjvr_1^post6+__disjvr_1^post5 == 0 /\ -__disjvr_2^post4+__disjvr_2^post3 == 0 /\ __disjvr_2^post4-__disjvr_2^post5 == 0 /\ -y^post3+y^0 == 0 /\ -__disjvr_0^post5+__disjvr_0^post4 == 0 /\ y^post3-y^post4 == 0 /\ -__disjvr_1^post4+__disjvr_1^post3 == 0 /\ __disjvr_1^0-__disjvr_1^post3 == 0 /\ x^post5-x^post6 == 0 /\ __disjvr_1^post4-__disjvr_1^post3 == 0 /\ __disjvr_0^post3-__disjvr_0^post4 == 0 /\ -x^post5+x^post4 == 0 /\ x^post3-x^post4 == 0 /\ __disjvr_0^post5-__disjvr_0^post6 == 0 /\ __disjvr_2^0-__disjvr_2^post3 == 0 /\ __disjvr_1^post4-__disjvr_1^post5 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 5 10

Simplified Transitions

Start location: l6
Program variables: x^0 y^0
  12: l0 -> l1 : x^0'=1+3*x^0, (-1-2*y^0+x^0 <= 0 /\ -1-2*y^0+x^0 == 0 /\ 1+2*y^0-x^0 <= 0), cost: 1
  13: l0 -> l1 : x^0'=y^0, (-2*y^0+x^0 <= 0 /\ -2*y^0+x^0 == 0 /\ 2*y^0-x^0 <= 0), cost: 1
  15: l1 -> l0 : y^0'=y^post6, T, cost: 1
  14: l6 -> l1 : x^0'=x^post7, 1-x^post7 <= 0, cost: 1

	made implied equalities explicit

	Original rule:
	l0 -> l1 : __disjvr_0^0'=__disjvr_0^post1, __disjvr_1^0'=__disjvr_1^post1, __disjvr_2^0'=__disjvr_2^post1, x^0'=x^post1, y^0'=y^post1, (-1-2*y^0+x^0 <= 0 /\ -__disjvr_0^post1+__disjvr_0^0 == 0 /\ __disjvr_1^0-__disjvr_1^post1 == 0 /\ -__disjvr_2^post1+__disjvr_2^0 == 0 /\ 1+2*y^0-x^0 <= 0 /\ -y^post1+y^0 == 0 /\ -1+x^post1-3*x^0 == 0), cost: 1
	New rule:
	l0 -> l1 : __disjvr_0^0'=__disjvr_0^post1, __disjvr_1^0'=__disjvr_1^post1, __disjvr_2^0'=__disjvr_2^post1, x^0'=x^post1, y^0'=y^post1, (-1-2*y^0+x^0 <= 0 /\ -1-2*y^0+x^0 == 0 /\ -__disjvr_0^post1+__disjvr_0^0 == 0 /\ __disjvr_1^0-__disjvr_1^post1 == 0 /\ -__disjvr_2^post1+__disjvr_2^0 == 0 /\ 1+2*y^0-x^0 <= 0 /\ -y^post1+y^0 == 0 /\ -1+x^post1-3*x^0 == 0), cost: 1
	
	Propagated Equalities

	Original rule:
	l0 -> l1 : __disjvr_0^0'=__disjvr_0^post1, __disjvr_1^0'=__disjvr_1^post1, __disjvr_2^0'=__disjvr_2^post1, x^0'=x^post1, y^0'=y^post1, (-1-2*y^0+x^0 <= 0 /\ -1-2*y^0+x^0 == 0 /\ -__disjvr_0^post1+__disjvr_0^0 == 0 /\ __disjvr_1^0-__disjvr_1^post1 == 0 /\ -__disjvr_2^post1+__disjvr_2^0 == 0 /\ 1+2*y^0-x^0 <= 0 /\ -y^post1+y^0 == 0 /\ -1+x^post1-3*x^0 == 0), cost: 1
	New rule:
	l0 -> l1 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, __disjvr_2^0'=__disjvr_2^0, x^0'=1+3*x^0, y^0'=y^0, (0 == 0 /\ -1-2*y^0+x^0 <= 0 /\ -1-2*y^0+x^0 == 0 /\ 1+2*y^0-x^0 <= 0), cost: 1
	
		propagated equality __disjvr_0^post1 = __disjvr_0^0
		
		propagated equality __disjvr_1^post1 = __disjvr_1^0
		
		propagated equality __disjvr_2^post1 = __disjvr_2^0
		
		propagated equality y^post1 = y^0
		
		propagated equality x^post1 = 1+3*x^0
		
	Simplified Guard

	Original rule:
	l0 -> l1 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, __disjvr_2^0'=__disjvr_2^0, x^0'=1+3*x^0, y^0'=y^0, (0 == 0 /\ -1-2*y^0+x^0 <= 0 /\ -1-2*y^0+x^0 == 0 /\ 1+2*y^0-x^0 <= 0), cost: 1
	New rule:
	l0 -> l1 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, __disjvr_2^0'=__disjvr_2^0, x^0'=1+3*x^0, y^0'=y^0, (-1-2*y^0+x^0 <= 0 /\ -1-2*y^0+x^0 == 0 /\ 1+2*y^0-x^0 <= 0), cost: 1
	
	made implied equalities explicit

	Original rule:
	l0 -> l1 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, __disjvr_2^0'=__disjvr_2^0, x^0'=1+3*x^0, y^0'=y^0, (-1-2*y^0+x^0 <= 0 /\ -1-2*y^0+x^0 == 0 /\ 1+2*y^0-x^0 <= 0), cost: 1
	New rule:
	l0 -> l1 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, __disjvr_2^0'=__disjvr_2^0, x^0'=1+3*x^0, y^0'=y^0, (-1-2*y^0+x^0 <= 0 /\ -1-2*y^0+x^0 == 0 /\ 1+2*y^0-x^0 <= 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l1 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, __disjvr_2^0'=__disjvr_2^0, x^0'=1+3*x^0, y^0'=y^0, (-1-2*y^0+x^0 <= 0 /\ -1-2*y^0+x^0 == 0 /\ 1+2*y^0-x^0 <= 0), cost: 1
	New rule:
	l0 -> l1 : x^0'=1+3*x^0, (-1-2*y^0+x^0 <= 0 /\ -1-2*y^0+x^0 == 0 /\ 1+2*y^0-x^0 <= 0), cost: 1
	
	made implied equalities explicit

	Original rule:
	l0 -> l1 : __disjvr_0^0'=__disjvr_0^post2, __disjvr_1^0'=__disjvr_1^post2, __disjvr_2^0'=__disjvr_2^post2, x^0'=x^post2, y^0'=y^post2, (y^0-y^post2 == 0 /\ -__disjvr_1^post2+__disjvr_1^0 == 0 /\ __disjvr_0^0-__disjvr_0^post2 == 0 /\ -2*y^0+x^0 <= 0 /\ x^post2-y^0 == 0 /\ 2*y^0-x^0 <= 0 /\ -__disjvr_2^post2+__disjvr_2^0 == 0), cost: 1
	New rule:
	l0 -> l1 : __disjvr_0^0'=__disjvr_0^post2, __disjvr_1^0'=__disjvr_1^post2, __disjvr_2^0'=__disjvr_2^post2, x^0'=x^post2, y^0'=y^post2, (y^0-y^post2 == 0 /\ -__disjvr_1^post2+__disjvr_1^0 == 0 /\ __disjvr_0^0-__disjvr_0^post2 == 0 /\ -2*y^0+x^0 <= 0 /\ -2*y^0+x^0 == 0 /\ x^post2-y^0 == 0 /\ 2*y^0-x^0 <= 0 /\ -__disjvr_2^post2+__disjvr_2^0 == 0), cost: 1
	
	Propagated Equalities

	Original rule:
	l0 -> l1 : __disjvr_0^0'=__disjvr_0^post2, __disjvr_1^0'=__disjvr_1^post2, __disjvr_2^0'=__disjvr_2^post2, x^0'=x^post2, y^0'=y^post2, (y^0-y^post2 == 0 /\ -__disjvr_1^post2+__disjvr_1^0 == 0 /\ __disjvr_0^0-__disjvr_0^post2 == 0 /\ -2*y^0+x^0 <= 0 /\ -2*y^0+x^0 == 0 /\ x^post2-y^0 == 0 /\ 2*y^0-x^0 <= 0 /\ -__disjvr_2^post2+__disjvr_2^0 == 0), cost: 1
	New rule:
	l0 -> l1 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, __disjvr_2^0'=__disjvr_2^0, x^0'=y^0, y^0'=y^0, (0 == 0 /\ -2*y^0+x^0 <= 0 /\ -2*y^0+x^0 == 0 /\ 2*y^0-x^0 <= 0), cost: 1
	
		propagated equality y^post2 = y^0
		
		propagated equality __disjvr_1^post2 = __disjvr_1^0
		
		propagated equality __disjvr_0^post2 = __disjvr_0^0
		
		propagated equality x^post2 = y^0
		
		propagated equality __disjvr_2^post2 = __disjvr_2^0
		
	Simplified Guard

	Original rule:
	l0 -> l1 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, __disjvr_2^0'=__disjvr_2^0, x^0'=y^0, y^0'=y^0, (0 == 0 /\ -2*y^0+x^0 <= 0 /\ -2*y^0+x^0 == 0 /\ 2*y^0-x^0 <= 0), cost: 1
	New rule:
	l0 -> l1 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, __disjvr_2^0'=__disjvr_2^0, x^0'=y^0, y^0'=y^0, (-2*y^0+x^0 <= 0 /\ -2*y^0+x^0 == 0 /\ 2*y^0-x^0 <= 0), cost: 1
	
	made implied equalities explicit

	Original rule:
	l0 -> l1 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, __disjvr_2^0'=__disjvr_2^0, x^0'=y^0, y^0'=y^0, (-2*y^0+x^0 <= 0 /\ -2*y^0+x^0 == 0 /\ 2*y^0-x^0 <= 0), cost: 1
	New rule:
	l0 -> l1 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, __disjvr_2^0'=__disjvr_2^0, x^0'=y^0, y^0'=y^0, (-2*y^0+x^0 <= 0 /\ -2*y^0+x^0 == 0 /\ 2*y^0-x^0 <= 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l1 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, __disjvr_2^0'=__disjvr_2^0, x^0'=y^0, y^0'=y^0, (-2*y^0+x^0 <= 0 /\ -2*y^0+x^0 == 0 /\ 2*y^0-x^0 <= 0), cost: 1
	New rule:
	l0 -> l1 : x^0'=y^0, (-2*y^0+x^0 <= 0 /\ -2*y^0+x^0 == 0 /\ 2*y^0-x^0 <= 0), cost: 1
	
	Propagated Equalities

	Original rule:
	l6 -> l1 : __disjvr_0^0'=__disjvr_0^post7, __disjvr_1^0'=__disjvr_1^post7, __disjvr_2^0'=__disjvr_2^post7, x^0'=x^post7, y^0'=y^post7, (0 == 0 /\ __disjvr_1^post8-__disjvr_1^post7 == 0 /\ __disjvr_1^0-__disjvr_1^post8 == 0 /\ -x^post8+x^0 == 0 /\ -__disjvr_0^post7+__disjvr_0^post8 == 0 /\ 1-x^post7 <= 0 /\ -y^post8+y^0 == 0 /\ y^post8-y^post7 == 0 /\ -__disjvr_2^post8+__disjvr_2^0 == 0 /\ __disjvr_2^post8-__disjvr_2^post7 == 0 /\ __disjvr_0^0-__disjvr_0^post8 == 0), cost: 1
	New rule:
	l6 -> l1 : __disjvr_0^0'=__disjvr_0^post8, __disjvr_1^0'=__disjvr_1^post8, __disjvr_2^0'=__disjvr_2^post8, x^0'=x^post7, y^0'=y^post8, (0 == 0 /\ __disjvr_1^0-__disjvr_1^post8 == 0 /\ -x^post8+x^0 == 0 /\ 1-x^post7 <= 0 /\ -y^post8+y^0 == 0 /\ -__disjvr_2^post8+__disjvr_2^0 == 0 /\ __disjvr_0^0-__disjvr_0^post8 == 0), cost: 1
	
		propagated equality __disjvr_1^post7 = __disjvr_1^post8
		
		propagated equality __disjvr_0^post7 = __disjvr_0^post8
		
		propagated equality y^post7 = y^post8
		
		propagated equality __disjvr_2^post7 = __disjvr_2^post8
		
	Propagated Equalities

	Original rule:
	l6 -> l1 : __disjvr_0^0'=__disjvr_0^post8, __disjvr_1^0'=__disjvr_1^post8, __disjvr_2^0'=__disjvr_2^post8, x^0'=x^post7, y^0'=y^post8, (0 == 0 /\ __disjvr_1^0-__disjvr_1^post8 == 0 /\ -x^post8+x^0 == 0 /\ 1-x^post7 <= 0 /\ -y^post8+y^0 == 0 /\ -__disjvr_2^post8+__disjvr_2^0 == 0 /\ __disjvr_0^0-__disjvr_0^post8 == 0), cost: 1
	New rule:
	l6 -> l1 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, __disjvr_2^0'=__disjvr_2^0, x^0'=x^post7, y^0'=y^0, (0 == 0 /\ 1-x^post7 <= 0), cost: 1
	
		propagated equality __disjvr_1^post8 = __disjvr_1^0
		
		propagated equality x^post8 = x^0
		
		propagated equality y^post8 = y^0
		
		propagated equality __disjvr_2^post8 = __disjvr_2^0
		
		propagated equality __disjvr_0^post8 = __disjvr_0^0
		
	Simplified Guard

	Original rule:
	l6 -> l1 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, __disjvr_2^0'=__disjvr_2^0, x^0'=x^post7, y^0'=y^0, (0 == 0 /\ 1-x^post7 <= 0), cost: 1
	New rule:
	l6 -> l1 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, __disjvr_2^0'=__disjvr_2^0, x^0'=x^post7, y^0'=y^0, 1-x^post7 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l6 -> l1 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, __disjvr_2^0'=__disjvr_2^0, x^0'=x^post7, y^0'=y^0, 1-x^post7 <= 0, cost: 1
	New rule:
	l6 -> l1 : x^0'=x^post7, 1-x^post7 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l1 -> l0 : __disjvr_0^0'=__disjvr_0^post6, __disjvr_1^0'=__disjvr_1^post6, __disjvr_2^0'=__disjvr_2^post6, x^0'=x^post6, y^0'=y^post6, (0 == 0 /\ -__disjvr_0^post3+__disjvr_0^0 == 0 /\ -x^post3+x^0 == 0 /\ -__disjvr_2^post4+__disjvr_2^post5 == 0 /\ -__disjvr_2^post6+__disjvr_2^post5 == 0 /\ -y^post5+y^post4 == 0 /\ __disjvr_0^post3-__disjvr_0^0 == 0 /\ -__disjvr_1^post6+__disjvr_1^post5 == 0 /\ -__disjvr_2^post4+__disjvr_2^post3 == 0 /\ __disjvr_2^post4-__disjvr_2^post5 == 0 /\ -y^post3+y^0 == 0 /\ -__disjvr_0^post5+__disjvr_0^post4 == 0 /\ y^post3-y^post4 == 0 /\ -__disjvr_1^post4+__disjvr_1^post3 == 0 /\ __disjvr_1^0-__disjvr_1^post3 == 0 /\ x^post5-x^post6 == 0 /\ __disjvr_1^post4-__disjvr_1^post3 == 0 /\ __disjvr_0^post3-__disjvr_0^post4 == 0 /\ -x^post5+x^post4 == 0 /\ x^post3-x^post4 == 0 /\ __disjvr_0^post5-__disjvr_0^post6 == 0 /\ __disjvr_2^0-__disjvr_2^post3 == 0 /\ __disjvr_1^post4-__disjvr_1^post5 == 0), cost: 1
	New rule:
	l1 -> l0 : __disjvr_0^0'=__disjvr_0^post5, __disjvr_1^0'=__disjvr_1^post5, __disjvr_2^0'=__disjvr_2^post5, x^0'=x^post5, y^0'=y^post6, (0 == 0 /\ -__disjvr_0^post3+__disjvr_0^0 == 0 /\ -x^post3+x^0 == 0 /\ -__disjvr_2^post4+__disjvr_2^post5 == 0 /\ -y^post5+y^post4 == 0 /\ __disjvr_0^post3-__disjvr_0^0 == 0 /\ -__disjvr_2^post4+__disjvr_2^post3 == 0 /\ __disjvr_2^post4-__disjvr_2^post5 == 0 /\ -y^post3+y^0 == 0 /\ -__disjvr_0^post5+__disjvr_0^post4 == 0 /\ y^post3-y^post4 == 0 /\ -__disjvr_1^post4+__disjvr_1^post3 == 0 /\ __disjvr_1^0-__disjvr_1^post3 == 0 /\ __disjvr_1^post4-__disjvr_1^post3 == 0 /\ __disjvr_0^post3-__disjvr_0^post4 == 0 /\ -x^post5+x^post4 == 0 /\ x^post3-x^post4 == 0 /\ __disjvr_2^0-__disjvr_2^post3 == 0 /\ __disjvr_1^post4-__disjvr_1^post5 == 0), cost: 1
	
		propagated equality __disjvr_2^post6 = __disjvr_2^post5
		
		propagated equality __disjvr_1^post6 = __disjvr_1^post5
		
		propagated equality x^post6 = x^post5
		
		propagated equality __disjvr_0^post6 = __disjvr_0^post5
		
	Propagated Equalities

	Original rule:
	l1 -> l0 : __disjvr_0^0'=__disjvr_0^post5, __disjvr_1^0'=__disjvr_1^post5, __disjvr_2^0'=__disjvr_2^post5, x^0'=x^post5, y^0'=y^post6, (0 == 0 /\ -__disjvr_0^post3+__disjvr_0^0 == 0 /\ -x^post3+x^0 == 0 /\ -__disjvr_2^post4+__disjvr_2^post5 == 0 /\ -y^post5+y^post4 == 0 /\ __disjvr_0^post3-__disjvr_0^0 == 0 /\ -__disjvr_2^post4+__disjvr_2^post3 == 0 /\ __disjvr_2^post4-__disjvr_2^post5 == 0 /\ -y^post3+y^0 == 0 /\ -__disjvr_0^post5+__disjvr_0^post4 == 0 /\ y^post3-y^post4 == 0 /\ -__disjvr_1^post4+__disjvr_1^post3 == 0 /\ __disjvr_1^0-__disjvr_1^post3 == 0 /\ __disjvr_1^post4-__disjvr_1^post3 == 0 /\ __disjvr_0^post3-__disjvr_0^post4 == 0 /\ -x^post5+x^post4 == 0 /\ x^post3-x^post4 == 0 /\ __disjvr_2^0-__disjvr_2^post3 == 0 /\ __disjvr_1^post4-__disjvr_1^post5 == 0), cost: 1
	New rule:
	l1 -> l0 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, __disjvr_2^0'=__disjvr_2^0, x^0'=x^0, y^0'=y^post6, 0 == 0, cost: 1
	
		propagated equality __disjvr_0^post3 = __disjvr_0^0
		
		propagated equality x^post3 = x^0
		
		propagated equality __disjvr_2^post4 = __disjvr_2^post5
		
		propagated equality y^post4 = y^post5
		
		propagated equality __disjvr_2^post3 = __disjvr_2^post5
		
		propagated equality y^post3 = y^0
		
		propagated equality __disjvr_0^post4 = __disjvr_0^post5
		
		propagated equality y^post5 = y^0
		
		propagated equality __disjvr_1^post3 = __disjvr_1^post4
		
		propagated equality __disjvr_1^post4 = __disjvr_1^0
		
		propagated equality __disjvr_0^post5 = __disjvr_0^0
		
		propagated equality x^post4 = x^post5
		
		propagated equality x^post5 = x^0
		
		propagated equality __disjvr_2^post5 = __disjvr_2^0
		
		propagated equality __disjvr_1^post5 = __disjvr_1^0
		
	Simplified Guard

	Original rule:
	l1 -> l0 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, __disjvr_2^0'=__disjvr_2^0, x^0'=x^0, y^0'=y^post6, 0 == 0, cost: 1
	New rule:
	l1 -> l0 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, __disjvr_2^0'=__disjvr_2^0, x^0'=x^0, y^0'=y^post6, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l1 -> l0 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, __disjvr_2^0'=__disjvr_2^0, x^0'=x^0, y^0'=y^post6, T, cost: 1
	New rule:
	l1 -> l0 : y^0'=y^post6, T, cost: 1

Step with 14

	Trace

	14[(1-x^post7 <= 0)]
	
	Blocked

	[{}, {}]

Step with 15

	Trace

	14[(1-x^post7 <= 0)], 15[T]
	
	Blocked

	[{}, {}, {}]

Step with 12

	Trace

	14[(1-x^post7 <= 0)], 15[T], 12[(-1-2*y^0+x^0 <= 0 /\ -1-2*y^0+x^0 == 0 /\ 1+2*y^0-x^0 <= 0)]
	
	Blocked

	[{}, {}, {}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 15

	Trace

	14[(1-x^post7 <= 0)], 15[T], 12[(-1-2*y^0+x^0 <= 0 /\ -1-2*y^0+x^0 == 0 /\ 1+2*y^0-x^0 <= 0)], 15[T]
	
	Blocked

	[{}, {}, {}, {}, {}]

Acceleration Failed

marked recursive suffix as redundant

Backtrack

	Trace

	14[(1-x^post7 <= 0)], 15[T], 12[(-1-2*y^0+x^0 <= 0 /\ -1-2*y^0+x^0 == 0 /\ 1+2*y^0-x^0 <= 0)]
	
	Blocked

	[{}, {}, {}, {15[T]}]

Backtrack

	Trace

	14[(1-x^post7 <= 0)], 15[T]
	
	Blocked

	[{}, {}, {12[T]}]

Step with 13

	Trace

	14[(1-x^post7 <= 0)], 15[T], 13[(-2*y^0+x^0 <= 0 /\ -2*y^0+x^0 == 0 /\ 2*y^0-x^0 <= 0)]
	
	Blocked

	[{}, {}, {12[T]}, {}]

Accelerate and Drop

Start location: l6
Program variables: x^0 y^0
  12: l0 -> l1 : x^0'=1+3*x^0, (-1-2*y^0+x^0 <= 0 /\ -1-2*y^0+x^0 == 0 /\ 1+2*y^0-x^0 <= 0), cost: 1
  13: l0 -> l1 : x^0'=y^0, (-2*y^0+x^0 <= 0 /\ -2*y^0+x^0 == 0 /\ 2*y^0-x^0 <= 0), cost: 1
  15: l1 -> l0 : y^0'=y^post6, T, cost: 1
  16: l1 -> LoAT_sink : (2*y^post61-x^0 >= 0 /\ -2*y^post61+x^0 >= 0 /\ -y^post61+x^0 <= 0 /\ y^post61-x^0 <= 0), cost: NONTERM
  17: l1 -> l1 : x^0'=0, y^0'=0, (x^0 >= 0 /\ x^0 == 0 /\ -x^0 >= 0), cost: 1
  14: l6 -> l1 : x^0'=x^post7, 1-x^post7 <= 0, cost: 1

	Certificate of Non-Termination

	Original rule:
	l1 -> l1 : x^0'=y^post61, y^0'=y^post61, (2*y^post61-x^0 <= 0 /\ -2*y^post61+x^0 <= 0 /\ -2*y^post61+x^0 == 0), cost: 1
	New rule:
	l1 -> LoAT_sink : (2*y^post61-x^0 >= 0 /\ -2*y^post61+x^0 >= 0 /\ -y^post61+x^0 <= 0 /\ y^post61-x^0 <= 0), cost: NONTERM

		2*y^post61-x^0 >= 0 [0]: eventual decrease yields (y^post61 >= 0 /\ 2*y^post61-x^0 >= 0)
		
		2*y^post61-x^0 >= 0 [1]: eventual increase yields (2*y^post61-x^0 >= 0 /\ y^post61-x^0 <= 0)
		
		-2*y^post61+x^0 >= 0 [0]: eventual decrease yields (-y^post61 >= 0 /\ -2*y^post61+x^0 >= 0)
		
		-2*y^post61+x^0 >= 0 [1]: eventual increase yields (-2*y^post61+x^0 >= 0 /\ -y^post61+x^0 <= 0)
		
		Replacement map: {2*y^post61-x^0 >= 0 -> (2*y^post61-x^0 >= 0 /\ y^post61-x^0 <= 0), -2*y^post61+x^0 >= 0 -> (-2*y^post61+x^0 >= 0 /\ -y^post61+x^0 <= 0)}

	Loop Acceleration

	Original rule:
	l1 -> l1 : x^0'=y^post61, y^0'=y^post61, (2*y^post61-x^0 <= 0 /\ -2*y^post61+x^0 <= 0 /\ -2*y^post61+x^0 == 0), cost: 1
	New rule:
	l1 -> l1 : x^0'=y^post61, y^0'=y^post61, (y^post61 >= 0 /\ -y^post61 >= 0 /\ 2*y^post61-x^0 >= 0 /\ -2*y^post61+x^0 >= 0 /\ -1+n >= 0), cost: 1

		2*y^post61-x^0 >= 0 [0]: eventual decrease yields (y^post61 >= 0 /\ 2*y^post61-x^0 >= 0)
		
		2*y^post61-x^0 >= 0 [1]: eventual increase yields (2*y^post61-x^0 >= 0 /\ y^post61-x^0 <= 0)
		
		-2*y^post61+x^0 >= 0 [0]: eventual decrease yields (-y^post61 >= 0 /\ -2*y^post61+x^0 >= 0)
		
		-2*y^post61+x^0 >= 0 [1]: eventual increase yields (-2*y^post61+x^0 >= 0 /\ -y^post61+x^0 <= 0)
		
		Replacement map: {2*y^post61-x^0 >= 0 -> (y^post61 >= 0 /\ 2*y^post61-x^0 >= 0), -2*y^post61+x^0 >= 0 -> (-y^post61 >= 0 /\ -2*y^post61+x^0 >= 0)}

	made implied equalities explicit

	Original rule:
	l1 -> l1 : x^0'=y^post61, y^0'=y^post61, (y^post61 >= 0 /\ -y^post61 >= 0 /\ 2*y^post61-x^0 >= 0 /\ -2*y^post61+x^0 >= 0 /\ -1+n >= 0), cost: 1
	New rule:
	l1 -> l1 : x^0'=y^post61, y^0'=y^post61, (y^post61 >= 0 /\ -y^post61 >= 0 /\ -y^post61 == 0 /\ 2*y^post61-x^0 >= 0 /\ -2*y^post61+x^0 >= 0 /\ -2*y^post61+x^0 == 0 /\ -1+n >= 0), cost: 1
	
	Propagated Equalities

	Original rule:
	l1 -> l1 : x^0'=y^post61, y^0'=y^post61, (y^post61 >= 0 /\ -y^post61 >= 0 /\ -y^post61 == 0 /\ 2*y^post61-x^0 >= 0 /\ -2*y^post61+x^0 >= 0 /\ -2*y^post61+x^0 == 0 /\ -1+n >= 0), cost: 1
	New rule:
	l1 -> l1 : x^0'=0, y^0'=0, (0 >= 0 /\ 0 == 0 /\ -1+n >= 0 /\ x^0 >= 0 /\ x^0 == 0 /\ -x^0 >= 0), cost: 1
	
		propagated equality y^post61 = 0
		
	Simplified Guard

	Original rule:
	l1 -> l1 : x^0'=0, y^0'=0, (0 >= 0 /\ 0 == 0 /\ -1+n >= 0 /\ x^0 >= 0 /\ x^0 == 0 /\ -x^0 >= 0), cost: 1
	New rule:
	l1 -> l1 : x^0'=0, y^0'=0, (-1+n >= 0 /\ x^0 >= 0 /\ x^0 == 0 /\ -x^0 >= 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	l1 -> l1 : x^0'=0, y^0'=0, (-1+n >= 0 /\ x^0 >= 0 /\ x^0 == 0 /\ -x^0 >= 0), cost: 1
	New rule:
	l1 -> l1 : x^0'=0, y^0'=0, (x^0 >= 0 /\ x^0 == 0 /\ -x^0 >= 0), cost: 1

	Trace

	14[(1-x^post7 <= 0)]
	
	Blocked

	[{}, {15[T]}]

Backtrack

	Trace

	Blocked

	[{14[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
