WORST_CASE(Omega(0),?)

Initial ITS
Start location: __init
   0: f1_0_main_Load -> f54_0_loop_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2 > 0 /\ arg1 > 0 /\ arg2-arg1P0 == 0 /\ -arg2P0+arg2 == 0), cost: 1
   1: f54_0_loop_LE -> f54_0_loop_LE : arg2'=arg2P1, arg1'=arg1P1, (arg2 > 0 /\ arg2-arg1 >= 0 /\ -4+arg1 > 0 /\ -1+arg1-arg1P1 == 0 /\ -1+arg2-arg2P1 == 0), cost: 1
   2: f54_0_loop_LE -> f54_0_loop_LE : arg2'=arg2P2, arg1'=arg1P2, (1+arg1 > 0 /\ -1+arg2-arg2P2 == 0 /\ arg2 > 0 /\ arg2-arg1 >= 0 /\ -5+arg1 < 0 /\ -4+arg2-arg1 <= 0 /\ 2+arg1-arg1P2 == 0), cost: 1
   3: f54_0_loop_LE -> f54_0_loop_LE : arg2'=arg2P3, arg1'=arg1P3, (1+arg1 > 0 /\ arg2 > 0 /\ arg2-arg1 >= 0 /\ -5+arg1 < 0 /\ -4+arg2-arg1 > 0 /\ arg2-arg2P3 == 0 /\ 1-arg1P3+arg1 == 0), cost: 1
   4: f54_0_loop_LE -> f54_0_loop_LE : arg2'=arg2P4, arg1'=arg1P4, (1+arg2-arg2P4 == 0 /\ arg2 > 0 /\ arg2-arg1 < 0 /\ 1+arg1-arg1P4 == 0 /\ 1+arg2-2*arg1 >= 0 /\ -1+arg1 > 0), cost: 1
   5: f54_0_loop_LE -> f54_0_loop_LE : arg2'=arg2P5, arg1'=arg1P5, (-1-arg1P5+arg1 == 0 /\ arg2 > 0 /\ arg2-arg1 < 0 /\ 1+arg2-arg2P5 == 0 /\ 1+arg2-2*arg1 < 0 /\ -1+arg1 > 0), cost: 1
   6: __init -> f1_0_main_Load : arg2'=arg2P6, arg1'=arg1P6, TRUE, cost: 1


Removed rules with unsatisfiable guard
Start location: __init
   0: f1_0_main_Load -> f54_0_loop_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2 > 0 /\ arg1 > 0 /\ arg2-arg1P0 == 0 /\ -arg2P0+arg2 == 0), cost: 1
   1: f54_0_loop_LE -> f54_0_loop_LE : arg2'=arg2P1, arg1'=arg1P1, (arg2 > 0 /\ arg2-arg1 >= 0 /\ -4+arg1 > 0 /\ -1+arg1-arg1P1 == 0 /\ -1+arg2-arg2P1 == 0), cost: 1
   2: f54_0_loop_LE -> f54_0_loop_LE : arg2'=arg2P2, arg1'=arg1P2, (1+arg1 > 0 /\ -1+arg2-arg2P2 == 0 /\ arg2 > 0 /\ arg2-arg1 >= 0 /\ -5+arg1 < 0 /\ -4+arg2-arg1 <= 0 /\ 2+arg1-arg1P2 == 0), cost: 1
   3: f54_0_loop_LE -> f54_0_loop_LE : arg2'=arg2P3, arg1'=arg1P3, (1+arg1 > 0 /\ arg2 > 0 /\ arg2-arg1 >= 0 /\ -5+arg1 < 0 /\ -4+arg2-arg1 > 0 /\ arg2-arg2P3 == 0 /\ 1-arg1P3+arg1 == 0), cost: 1
   5: f54_0_loop_LE -> f54_0_loop_LE : arg2'=arg2P5, arg1'=arg1P5, (-1-arg1P5+arg1 == 0 /\ arg2 > 0 /\ arg2-arg1 < 0 /\ 1+arg2-arg2P5 == 0 /\ 1+arg2-2*arg1 < 0 /\ -1+arg1 > 0), cost: 1
   6: __init -> f1_0_main_Load : arg2'=arg2P6, arg1'=arg1P6, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_Load -> f54_0_loop_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2 > 0 /\ arg1 > 0 /\ arg2-arg1P0 == 0 /\ -arg2P0+arg2 == 0), cost: 1
New rule:
f1_0_main_Load -> f54_0_loop_LE : arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f54_0_loop_LE -> f54_0_loop_LE : arg2'=arg2P1, arg1'=arg1P1, (arg2 > 0 /\ arg2-arg1 >= 0 /\ -4+arg1 > 0 /\ -1+arg1-arg1P1 == 0 /\ -1+arg2-arg2P1 == 0), cost: 1
New rule:
f54_0_loop_LE -> f54_0_loop_LE : arg2'=-1+arg2, arg1'=-1+arg1, (arg2-arg1 >= 0 /\ -4+arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f54_0_loop_LE -> f54_0_loop_LE : arg2'=arg2P2, arg1'=arg1P2, (1+arg1 > 0 /\ -1+arg2-arg2P2 == 0 /\ arg2 > 0 /\ arg2-arg1 >= 0 /\ -5+arg1 < 0 /\ -4+arg2-arg1 <= 0 /\ 2+arg1-arg1P2 == 0), cost: 1
New rule:
f54_0_loop_LE -> f54_0_loop_LE : arg2'=-1+arg2, arg1'=2+arg1, (1+arg1 > 0 /\ arg2 > 0 /\ arg2-arg1 >= 0 /\ 5-arg1 > 0 /\ -4+arg2-arg1 <= 0), cost: 1

Applied preprocessing
Original rule:
f54_0_loop_LE -> f54_0_loop_LE : arg2'=arg2P3, arg1'=arg1P3, (1+arg1 > 0 /\ arg2 > 0 /\ arg2-arg1 >= 0 /\ -5+arg1 < 0 /\ -4+arg2-arg1 > 0 /\ arg2-arg2P3 == 0 /\ 1-arg1P3+arg1 == 0), cost: 1
New rule:
f54_0_loop_LE -> f54_0_loop_LE : arg1'=1+arg1, (1+arg1 > 0 /\ 5-arg1 > 0 /\ -4+arg2-arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f54_0_loop_LE -> f54_0_loop_LE : arg2'=arg2P5, arg1'=arg1P5, (-1-arg1P5+arg1 == 0 /\ arg2 > 0 /\ arg2-arg1 < 0 /\ 1+arg2-arg2P5 == 0 /\ 1+arg2-2*arg1 < 0 /\ -1+arg1 > 0), cost: 1
New rule:
f54_0_loop_LE -> f54_0_loop_LE : arg2'=1+arg2, arg1'=-1+arg1, (arg2 > 0 /\ -arg2+arg1 > 0), cost: 1

Simplified rules
Start location: __init
   7: f1_0_main_Load -> f54_0_loop_LE : arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
   8: f54_0_loop_LE -> f54_0_loop_LE : arg2'=-1+arg2, arg1'=-1+arg1, (arg2-arg1 >= 0 /\ -4+arg1 > 0), cost: 1
   9: f54_0_loop_LE -> f54_0_loop_LE : arg2'=-1+arg2, arg1'=2+arg1, (1+arg1 > 0 /\ arg2 > 0 /\ arg2-arg1 >= 0 /\ 5-arg1 > 0 /\ -4+arg2-arg1 <= 0), cost: 1
  10: f54_0_loop_LE -> f54_0_loop_LE : arg1'=1+arg1, (1+arg1 > 0 /\ 5-arg1 > 0 /\ -4+arg2-arg1 > 0), cost: 1
  11: f54_0_loop_LE -> f54_0_loop_LE : arg2'=1+arg2, arg1'=-1+arg1, (arg2 > 0 /\ -arg2+arg1 > 0), cost: 1
   6: __init -> f1_0_main_Load : arg2'=arg2P6, arg1'=arg1P6, TRUE, cost: 1


Applied acceleration
Original rule:
f54_0_loop_LE -> f54_0_loop_LE : arg2'=-1+arg2, arg1'=-1+arg1, (arg2-arg1 >= 0 /\ -4+arg1 > 0), cost: 1
New rule:
f54_0_loop_LE -> f54_0_loop_LE : arg2'=arg2-n, arg1'=-n+arg1, (arg2-arg1 >= 0 /\ -3-n+arg1 > 0 /\ n >= 0), cost: n
Sub-proof via acceration calculus written to file:///tmp/tmpnam_hPNMKH.txt

Applied instantiation
Original rule:
f54_0_loop_LE -> f54_0_loop_LE : arg2'=arg2-n, arg1'=-n+arg1, (arg2-arg1 >= 0 /\ -3-n+arg1 > 0 /\ n >= 0), cost: n
New rule:
f54_0_loop_LE -> f54_0_loop_LE : arg2'=4+arg2-arg1, arg1'=4, (1 > 0 /\ arg2-arg1 >= 0 /\ -4+arg1 >= 0), cost: -4+arg1

Applied acceleration
Original rule:
f54_0_loop_LE -> f54_0_loop_LE : arg2'=-1+arg2, arg1'=2+arg1, (1+arg1 > 0 /\ arg2 > 0 /\ arg2-arg1 >= 0 /\ 5-arg1 > 0 /\ -4+arg2-arg1 <= 0), cost: 1
New rule:
f54_0_loop_LE -> f54_0_loop_LE : arg2'=arg2-n0, arg1'=arg1+2*n0, (1+arg1 > 0 /\ 7-arg1-2*n0 > 0 /\ 3+arg2-arg1-3*n0 >= 0 /\ 4-arg2+arg1 >= 0 /\ n0 >= 0 /\ 1+arg2-n0 > 0), cost: n0
Sub-proof via acceration calculus written to file:///tmp/tmpnam_nLGoGJ.txt

Applied instantiation
Original rule:
f54_0_loop_LE -> f54_0_loop_LE : arg2'=arg2-n0, arg1'=arg1+2*n0, (1+arg1 > 0 /\ 7-arg1-2*n0 > 0 /\ 3+arg2-arg1-3*n0 >= 0 /\ 4-arg2+arg1 >= 0 /\ n0 >= 0 /\ 1+arg2-n0 > 0), cost: n0
New rule:
f54_0_loop_LE -> f54_0_loop_LE : arg2'=0, arg1'=2*arg2+arg1, (3-2*arg2-arg1 >= 0 /\ 1 > 0 /\ 1+arg1 > 0 /\ arg2 >= 0 /\ 7-2*arg2-arg1 > 0 /\ 4-arg2+arg1 >= 0), cost: arg2

Applied acceleration
Original rule:
f54_0_loop_LE -> f54_0_loop_LE : arg1'=1+arg1, (1+arg1 > 0 /\ 5-arg1 > 0 /\ -4+arg2-arg1 > 0), cost: 1
New rule:
f54_0_loop_LE -> f54_0_loop_LE : arg1'=arg1+n1, (1+arg1 > 0 /\ 6-arg1-n1 > 0 /\ n1 >= 0 /\ -3+arg2-arg1-n1 > 0), cost: n1
Sub-proof via acceration calculus written to file:///tmp/tmpnam_gfABlM.txt

Applied instantiation
Original rule:
f54_0_loop_LE -> f54_0_loop_LE : arg1'=arg1+n1, (1+arg1 > 0 /\ 6-arg1-n1 > 0 /\ n1 >= 0 /\ -3+arg2-arg1-n1 > 0), cost: n1
New rule:
f54_0_loop_LE -> f54_0_loop_LE : arg1'=5, (1 > 0 /\ 1+arg1 > 0 /\ 5-arg1 >= 0 /\ -8+arg2 > 0), cost: 5-arg1

Applied instantiation
Original rule:
f54_0_loop_LE -> f54_0_loop_LE : arg1'=arg1+n1, (1+arg1 > 0 /\ 6-arg1-n1 > 0 /\ n1 >= 0 /\ -3+arg2-arg1-n1 > 0), cost: n1
New rule:
f54_0_loop_LE -> f54_0_loop_LE : arg1'=-4+arg2, (1 > 0 /\ 1+arg1 > 0 /\ 10-arg2 > 0 /\ -4+arg2-arg1 >= 0), cost: -4+arg2-arg1

Applied acceleration
Original rule:
f54_0_loop_LE -> f54_0_loop_LE : arg2'=1+arg2, arg1'=-1+arg1, (arg2 > 0 /\ -arg2+arg1 > 0), cost: 1
New rule:
f54_0_loop_LE -> f54_0_loop_LE : arg2'=arg2+n2, arg1'=-n2+arg1, (arg2 > 0 /\ n2 >= 0 /\ 2-arg2-2*n2+arg1 > 0), cost: n2
Sub-proof via acceration calculus written to file:///tmp/tmpnam_kAhieL.txt

Applied simplification
Original rule:
f54_0_loop_LE -> f54_0_loop_LE : arg2'=4+arg2-arg1, arg1'=4, (1 > 0 /\ arg2-arg1 >= 0 /\ -4+arg1 >= 0), cost: -4+arg1
New rule:
f54_0_loop_LE -> f54_0_loop_LE : arg2'=4+arg2-arg1, arg1'=4, (arg2-arg1 >= 0 /\ -4+arg1 >= 0), cost: -4+arg1

Applied simplification
Original rule:
f54_0_loop_LE -> f54_0_loop_LE : arg2'=0, arg1'=2*arg2+arg1, (3-2*arg2-arg1 >= 0 /\ 1 > 0 /\ 1+arg1 > 0 /\ arg2 >= 0 /\ 7-2*arg2-arg1 > 0 /\ 4-arg2+arg1 >= 0), cost: arg2
New rule:
f54_0_loop_LE -> f54_0_loop_LE : arg2'=0, arg1'=2*arg2+arg1, (3-2*arg2-arg1 >= 0 /\ 1+arg1 > 0 /\ arg2 >= 0), cost: arg2

Applied simplification
Original rule:
f54_0_loop_LE -> f54_0_loop_LE : arg1'=5, (1 > 0 /\ 1+arg1 > 0 /\ 5-arg1 >= 0 /\ -8+arg2 > 0), cost: 5-arg1
New rule:
f54_0_loop_LE -> f54_0_loop_LE : arg1'=5, (1+arg1 > 0 /\ -5+arg1 <= 0 /\ -8+arg2 > 0), cost: 5-arg1

Applied simplification
Original rule:
f54_0_loop_LE -> f54_0_loop_LE : arg1'=-4+arg2, (1 > 0 /\ 1+arg1 > 0 /\ 10-arg2 > 0 /\ -4+arg2-arg1 >= 0), cost: -4+arg2-arg1
New rule:
f54_0_loop_LE -> f54_0_loop_LE : arg1'=-4+arg2, (1+arg1 > 0 /\ 10-arg2 > 0 /\ -4+arg2-arg1 >= 0), cost: -4+arg2-arg1

Applied deletion
Removed the following rules: 8 9 10 11

Accelerated simple loops
Start location: __init
   7: f1_0_main_Load -> f54_0_loop_LE : arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
  16: f54_0_loop_LE -> f54_0_loop_LE : arg2'=arg2+n2, arg1'=-n2+arg1, (arg2 > 0 /\ n2 >= 0 /\ 2-arg2-2*n2+arg1 > 0), cost: n2
  17: f54_0_loop_LE -> f54_0_loop_LE : arg2'=4+arg2-arg1, arg1'=4, (arg2-arg1 >= 0 /\ -4+arg1 >= 0), cost: -4+arg1
  18: f54_0_loop_LE -> f54_0_loop_LE : arg2'=0, arg1'=2*arg2+arg1, (3-2*arg2-arg1 >= 0 /\ 1+arg1 > 0 /\ arg2 >= 0), cost: arg2
  19: f54_0_loop_LE -> f54_0_loop_LE : arg1'=5, (1+arg1 > 0 /\ -5+arg1 <= 0 /\ -8+arg2 > 0), cost: 5-arg1
  20: f54_0_loop_LE -> f54_0_loop_LE : arg1'=-4+arg2, (1+arg1 > 0 /\ 10-arg2 > 0 /\ -4+arg2-arg1 >= 0), cost: -4+arg2-arg1
   6: __init -> f1_0_main_Load : arg2'=arg2P6, arg1'=arg1P6, TRUE, cost: 1


Applied chaining
First rule:
f1_0_main_Load -> f54_0_loop_LE : arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
Second rule:
f54_0_loop_LE -> f54_0_loop_LE : arg2'=arg2+n2, arg1'=-n2+arg1, (arg2 > 0 /\ n2 >= 0 /\ 2-arg2-2*n2+arg1 > 0), cost: n2
New rule:
f1_0_main_Load -> f54_0_loop_LE : arg2'=arg2+n2, arg1'=arg2-n2, (arg2 > 0 /\ n2 >= 0 /\ arg1 > 0 /\ 2-2*n2 > 0), cost: 1+n2

Applied chaining
First rule:
f1_0_main_Load -> f54_0_loop_LE : arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
Second rule:
f54_0_loop_LE -> f54_0_loop_LE : arg2'=4+arg2-arg1, arg1'=4, (arg2-arg1 >= 0 /\ -4+arg1 >= 0), cost: -4+arg1
New rule:
f1_0_main_Load -> f54_0_loop_LE : arg2'=4, arg1'=4, (-4+arg2 >= 0 /\ arg1 > 0), cost: -3+arg2

Applied chaining
First rule:
f1_0_main_Load -> f54_0_loop_LE : arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
Second rule:
f54_0_loop_LE -> f54_0_loop_LE : arg2'=0, arg1'=2*arg2+arg1, (3-2*arg2-arg1 >= 0 /\ 1+arg1 > 0 /\ arg2 >= 0), cost: arg2
New rule:
f1_0_main_Load -> f54_0_loop_LE : arg2'=0, arg1'=3*arg2, (1+arg2 > 0 /\ arg1 > 0 /\ -1+arg2 <= 0), cost: 1+arg2

Applied deletion
Removed the following rules: 16 17 18 19 20

Chained accelerated rules with incoming rules
Start location: __init
   7: f1_0_main_Load -> f54_0_loop_LE : arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
  21: f1_0_main_Load -> f54_0_loop_LE : arg2'=arg2+n2, arg1'=arg2-n2, (arg2 > 0 /\ n2 >= 0 /\ arg1 > 0 /\ 2-2*n2 > 0), cost: 1+n2
  22: f1_0_main_Load -> f54_0_loop_LE : arg2'=4, arg1'=4, (-4+arg2 >= 0 /\ arg1 > 0), cost: -3+arg2
  23: f1_0_main_Load -> f54_0_loop_LE : arg2'=0, arg1'=3*arg2, (1+arg2 > 0 /\ arg1 > 0 /\ -1+arg2 <= 0), cost: 1+arg2
   6: __init -> f1_0_main_Load : arg2'=arg2P6, arg1'=arg1P6, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
  <empty>


Computing asymptotic complexity

Proved the following lower bound
Complexity:  Unknown
Cpx degree: ?

Solved cost: 0
Rule cost:   0

