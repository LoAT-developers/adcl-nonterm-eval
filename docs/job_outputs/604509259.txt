NO

Solver Timeout: 4
Global Timeout: 300
No parsing errors!
Init Location: 0
Transitions:
<l0, l4, true>
<l1, l2, (arg1 > 0) /\ (arg2 > ~(1)), par{arg1 -> arg2, arg2 -> undef2}>
<l2, l3, ((arg1 - (5 * undef5)) = 0) /\ (arg1 > 2), par{arg2 -> undef4}>
<l3, l2, (arg1 > 2) /\ ((arg1 - (5 * undef8)) = 0) /\ ((arg1 - (5 * undef8)) < 5) /\ ((arg1 - (5 * undef8)) >= 0), par{arg2 -> undef7}>
<l2, l3, ((arg1 - (5 * undef11)) > 0) /\ (arg1 > 2), par{arg2 -> undef10}>
<l3, l2, ((arg1 - (5 * undef14)) > 0) /\ ((arg1 - (5 * undef14)) < 5) /\ (arg1 > 2), par{arg1 -> (arg1 - 1), arg2 -> undef13}>
<l4, l1, true, par{arg1 -> undef15, arg2 -> undef16}>

Fresh variables:
undef2, undef4, undef5, undef7, undef8, undef10, undef11, undef13, undef14, undef15, undef16, 

Undef variables:
undef2, undef4, undef5, undef7, undef8, undef10, undef11, undef13, undef14, undef15, undef16, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l2, (arg1 = undef16) /\ (undef15 > 0) /\ (undef16 > ~(1))>
<l2, l2, ((arg1 - (5 * undef5)) = 0) /\ (arg1 > 2) /\ (arg1 > 2) /\ ((arg1 - (5 * undef8)) = 0) /\ ((arg1 - (5 * undef8)) < 5) /\ ((arg1 - (5 * undef8)) >= 0)>
<l2, l2, ((arg1 - (5 * undef11)) > 0) /\ (arg1 > 2) /\ (arg1 > 2) /\ ((arg1 - (5 * undef8)) = 0) /\ ((arg1 - (5 * undef8)) < 5) /\ ((arg1 - (5 * undef8)) >= 0)>
<l2, l2, ((arg1 - (5 * undef11)) > 0) /\ (arg1 > 2) /\ ((arg1 - (5 * undef14)) > 0) /\ ((arg1 - (5 * undef14)) < 5) /\ (arg1 > 2), par{arg1 -> (arg1 - 1)}>

Fresh variables:
undef2, undef4, undef5, undef7, undef8, undef10, undef11, undef13, undef14, undef15, undef16, 

Undef variables:
undef2, undef4, undef5, undef7, undef8, undef10, undef11, undef13, undef14, undef15, undef16, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l2, l2, 3 <= arg1 /\ arg1 = 5*undef5 /\ arg1 = 5*undef8, {all remain the same}>
<l2, l2, 1 + 5*undef11 <= arg1 /\ 3 <= arg1 /\ arg1 = 5*undef8, {all remain the same}>
<l2, l2, 1 + 5*undef11 <= arg1 /\ 1 + 5*undef14 <= arg1 /\ 3 <= arg1 /\ arg1 <= 4 + 5*undef14, {arg1 -> -1 + arg1, rest remain the same}>
Variables:
arg1

Precedence: 
Graph 0

Graph 1
<l0, l2, 0 <= undef16 /\ 1 <= undef15 /\ arg1 = undef16, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 2 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.003655

Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000663s
[33mRanking function: [36m-3 + arg1[0m
New Graphs: 
Transitions:
<l2, l2, 3 <= arg1 /\ arg1 = 5*undef5 /\ arg1 = 5*undef8, {all remain the same}>
<l2, l2, 1 + 5*undef11 <= arg1 /\ 3 <= arg1 /\ arg1 = 5*undef8, {all remain the same}>
Variables:
arg1
> No variable changes in termination graph.
Checking conditional unfeasibility...
Calling Safety with literal arg1 <= 2 and entry <l2, l2, true, {all remain the same}>

LOG: CALL check - Post:arg1 <= 2 - Process 1
* Exit transition: <l2, l2, true, {all remain the same}>
* Postcondition  : arg1 <= 2
Quasi-invariants: 
Location 2: arg1 <= 2 ; 
Postcondition: arg1 <= 2

LOG: CALL check - Post:arg1 <= 2 - Process 2
* Exit transition: <l0, l2, 0 <= undef16 /\ 1 <= undef15 /\ arg1 = undef16, {all remain the same}>
* Postcondition  : arg1 <= 2

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000268s
[31m> Postcondition is not implied![0m

LOG: RETURN check - Elapsed time: 0.000323s

LOG: NarrowEntry size 1
Narrowing transition: 
<l2, l2, 3 <= arg1 /\ arg1 = 5*undef5 /\ arg1 = 5*undef8, {all remain the same}>

LOG: Narrow transition size 1
Narrowing transition: 
<l2, l2, 1 + 5*undef11 <= arg1 /\ 3 <= arg1 /\ arg1 = 5*undef8, {all remain the same}>

LOG: Narrow transition size 1
Narrowing transition: 
<l2, l2, 1 + 5*undef11 <= arg1 /\ 1 + 5*undef14 <= arg1 /\ 3 <= arg1 /\ arg1 <= 4 + 5*undef14, {arg1 -> -1 + arg1, rest remain the same}>

LOG: Narrow transition size 1
ENTRIES:
<l0, l2, 0 <= undef16 /\ 1 <= undef15 /\ 3 <= arg1 /\ arg1 = undef16, {all remain the same}>
END ENTRIES:
GRAPH:
<l2, l2, 3 <= arg1 /\ arg1 = 5*undef5 /\ arg1 = 5*undef8, {all remain the same}>
<l2, l2, 1 + 5*undef11 <= arg1 /\ 3 <= arg1 /\ arg1 = 5*undef8, {all remain the same}>
<l2, l2, 1 + 5*undef11 <= arg1 /\ 1 + 5*undef14 <= arg1 /\ 3 <= arg1 /\ arg1 <= 4 + 5*undef14, {arg1 -> -1 + arg1, rest remain the same}>
END GRAPH:
EXIT: <l2, l2, true, {all remain the same}>
POST: arg1 <= 2


LOG: Try proving POST
Solving with 1 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 0.008641s
Time used: 0.008563
Solving with 2 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 4.007464s
Time used: 4.00726
Solving with 3 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 1.005846s
Time used: 1.00032

LOG: Postcondition is not implied - no solution
[31m> Postcondition is not implied![0m

LOG: RETURN check - Elapsed time: 5.027385s

Proving non-termination of subgraph 1
Transitions:
<l2, l2, 3 <= arg1 /\ arg1 = 5*undef5 /\ arg1 = 5*undef8, {all remain the same}>
<l2, l2, 1 + 5*undef11 <= arg1 /\ 3 <= arg1 /\ arg1 = 5*undef8, {all remain the same}>
<l2, l2, 1 + 5*undef11 <= arg1 /\ 1 + 5*undef14 <= arg1 /\ 3 <= arg1 /\ arg1 <= 4 + 5*undef14, {arg1 -> -1 + arg1, rest remain the same}>
Variables:
arg1

Checking that every undef value has an assignment...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000649s
Checking conditional non-termination of SCC {l2}...
> No assignment for some undef value.
> Checking if the negation of the conditions of every pending exit is quasi-invariant... NO

Proving non-termination of subgraph 1
Transitions:
<l2, l2, 3 <= arg1 /\ arg1 = 5*undef5 /\ arg1 = 5*undef8, {all remain the same}>
<l2, l2, 1 + 5*undef11 <= arg1 /\ 3 <= arg1 /\ arg1 = 5*undef8, {all remain the same}>
Variables:
arg1

Checking that every undef value has an assignment...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000486s
Checking conditional non-termination of SCC {l2}...
> No assignment for some undef value.
> Checking if the negation of the conditions of every pending exit is quasi-invariant... YES
Calling reachability with...
Transition: <l2, end, true, {all remain the same}>
Conditions: 3 <= arg1, 
OPEN EXITS: 
<l2, end, 3 <= arg1, {all remain the same}>

--- Reachability graph ---
> Graph without transitions.

Calling reachability with...
Transition: <l0, l2, 0 <= undef16 /\ 1 <= undef15 /\ arg1 = undef16, {all remain the same}>
Conditions: 3 <= arg1, 
OPEN EXITS: 
<l0, l2, 0 <= undef16 /\ 1 <= undef15 /\ 3 <= arg1 /\ arg1 = undef16, {all remain the same}>

[32m> Conditions are reachable![0m

[32mProgram does NOT terminate[0m
