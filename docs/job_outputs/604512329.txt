NO

Initial ITS

Start location: [1]
Program variables: i
   0: [1] -> [2] : i'=nondet, T, cost: 1
   1: [2] -> [3] : (i < 0 \/ i > 0), cost: 1
  17: [2] -> [15] : (i <= 0 /\ i >= 0), cost: 1
   2: [3] -> [5] : i < 0, cost: 1
   9: [3] -> [10] : i >= 0, cost: 1
  16: [4] -> [2] : T, cost: 1
   3: [5] -> [6] : i'=2+i, T, cost: 1
   4: [6] -> [8] : i < 0, cost: 1
   7: [6] -> [7] : i >= 0, cost: 1
   8: [7] -> [4] : T, cost: 1
   5: [8] -> [9] : i'=-i, T, cost: 1
   6: [9] -> [7] : T, cost: 1
  10: [10] -> [11] : i'=-2+i, T, cost: 1
  11: [11] -> [13] : i > 0, cost: 1
  14: [11] -> [12] : i <= 0, cost: 1
  15: [12] -> [4] : T, cost: 1
  12: [13] -> [14] : i'=-i, T, cost: 1
  13: [14] -> [12] : T, cost: 1

Chained Linear Paths

Start location: [1]
Program variables: i
   0: [1] -> [2] : i'=nondet, T, cost: 1
   1: [2] -> [3] : (i < 0 \/ i > 0), cost: 1
  17: [2] -> [15] : (i <= 0 /\ i >= 0), cost: 1
  18: [3] -> [6] : i'=2+i, i < 0, cost: 1
  19: [3] -> [11] : i'=-2+i, i >= 0, cost: 1
  16: [4] -> [2] : T, cost: 1
   7: [6] -> [7] : i >= 0, cost: 1
  21: [6] -> [7] : i'=-i, i < 0, cost: 1
   8: [7] -> [4] : T, cost: 1
  14: [11] -> [12] : i <= 0, cost: 1
  23: [11] -> [12] : i'=-i, i > 0, cost: 1
  15: [12] -> [4] : T, cost: 1

	Eliminating location [5] by chaining:

	Applied chaining

	First rule:
	[3] -> [5] : i < 0, cost: 1
	Second rule:
	[5] -> [6] : i'=2+i, T, cost: 1
	New rule:
	[3] -> [6] : i'=2+i, i < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 2 3
	
	Eliminating location [10] by chaining:

	Applied chaining

	First rule:
	[3] -> [10] : i >= 0, cost: 1
	Second rule:
	[10] -> [11] : i'=-2+i, T, cost: 1
	New rule:
	[3] -> [11] : i'=-2+i, i >= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 9 10
	
	Eliminating location [8] by chaining:

	Applied chaining

	First rule:
	[6] -> [8] : i < 0, cost: 1
	Second rule:
	[8] -> [9] : i'=-i, T, cost: 1
	New rule:
	[6] -> [9] : i'=-i, i < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 4 5
	
	Eliminating location [9] by chaining:

	Applied chaining

	First rule:
	[6] -> [9] : i'=-i, i < 0, cost: 1
	Second rule:
	[9] -> [7] : T, cost: 1
	New rule:
	[6] -> [7] : i'=-i, i < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 6 20
	
	Eliminating location [13] by chaining:

	Applied chaining

	First rule:
	[11] -> [13] : i > 0, cost: 1
	Second rule:
	[13] -> [14] : i'=-i, T, cost: 1
	New rule:
	[11] -> [14] : i'=-i, i > 0, cost: 1
	
	Applied deletion

	Removed the following rules: 11 12
	
	Eliminating location [14] by chaining:

	Applied chaining

	First rule:
	[11] -> [14] : i'=-i, i > 0, cost: 1
	Second rule:
	[14] -> [12] : T, cost: 1
	New rule:
	[11] -> [12] : i'=-i, i > 0, cost: 1
	
	Applied deletion

	Removed the following rules: 13 22

Step with 0

	Trace

	0[T]
	
	Blocked

	[{}, {}]

Step with 17

	Trace

	0[T], 17[(i <= 0 /\ i >= 0)]
	
	Blocked

	[{}, {}, {}]

Backtrack

	Trace

	0[T]
	
	Blocked

	[{}, {17[T]}]

Step with 1

	Trace

	0[T], 1[(i > 0)]
	
	Blocked

	[{}, {17[T]}, {}]

Step with 19

	Trace

	0[T], 1[(i > 0)], 19[(i >= 0)]
	
	Blocked

	[{}, {17[T]}, {18[T]}, {}]

Step with 14

	Trace

	0[T], 1[(i > 0)], 19[(i >= 0)], 14[(i <= 0)]
	
	Blocked

	[{}, {17[T]}, {18[T]}, {}, {}]

Step with 15

	Trace

	0[T], 1[(i > 0)], 19[(i >= 0)], 14[(i <= 0)], 15[T]
	
	Blocked

	[{}, {17[T]}, {18[T]}, {}, {}, {}]

Step with 16

	Trace

	0[T], 1[(i > 0)], 19[(i >= 0)], 14[(i <= 0)], 15[T], 16[T]
	
	Blocked

	[{}, {17[T]}, {18[T]}, {}, {}, {}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 1

	Trace

	0[T], 1[(i > 0)], 19[(i >= 0)], 14[(i <= 0)], 15[T], 16[T], 1[(i < 0)]
	
	Blocked

	[{}, {17[T]}, {18[T]}, {}, {}, {}, {}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 18

	Trace

	0[T], 1[(i > 0)], 19[(i >= 0)], 14[(i <= 0)], 15[T], 16[T], 1[(i < 0)], 18[(i < 0)]
	
	Blocked

	[{}, {17[T]}, {18[T]}, {}, {}, {}, {}, {19[T]}, {}]

Step with 7

	Trace

	0[T], 1[(i > 0)], 19[(i >= 0)], 14[(i <= 0)], 15[T], 16[T], 1[(i < 0)], 18[(i < 0)], 7[(i >= 0)]
	
	Blocked

	[{}, {17[T]}, {18[T]}, {}, {}, {}, {}, {19[T]}, {}, {}]

Step with 8

	Trace

	0[T], 1[(i > 0)], 19[(i >= 0)], 14[(i <= 0)], 15[T], 16[T], 1[(i < 0)], 18[(i < 0)], 7[(i >= 0)], 8[T]
	
	Blocked

	[{}, {17[T]}, {18[T]}, {}, {}, {}, {}, {19[T]}, {}, {}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 16

	Trace

	0[T], 1[(i > 0)], 19[(i >= 0)], 14[(i <= 0)], 15[T], 16[T], 1[(i < 0)], 18[(i < 0)], 7[(i >= 0)], 8[T], 16[T]
	
	Blocked

	[{}, {17[T]}, {18[T]}, {}, {}, {}, {}, {19[T]}, {}, {}, {}, {}]

Acceleration Failed

marked recursive suffix as redundant

Nonterm

Start location: [1]
Program variables: i
   0: [1] -> [2] : i'=nondet, T, cost: 1
   1: [2] -> [3] : (i < 0 \/ i > 0), cost: 1
  17: [2] -> [15] : (i <= 0 /\ i >= 0), cost: 1
  24: [2] -> LoAT_sink : (-1+n >= 0 /\ 2-i > 0 /\ 2-i >= 0 /\ i > 0 /\ i >= 0), cost: NONTERM
  18: [3] -> [6] : i'=2+i, i < 0, cost: 1
  19: [3] -> [11] : i'=-2+i, i >= 0, cost: 1
  16: [4] -> [2] : T, cost: 1
   7: [6] -> [7] : i >= 0, cost: 1
  21: [6] -> [7] : i'=-i, i < 0, cost: 1
   8: [7] -> [4] : T, cost: 1
  14: [11] -> [12] : i <= 0, cost: 1
  23: [11] -> [12] : i'=-i, i > 0, cost: 1
  15: [12] -> [4] : T, cost: 1

	Certificate of Non-Termination

	Original rule:
	[2] -> [2] : (-2+i < 0 /\ -2+i <= 0 /\ i > 0 /\ i >= 0), cost: 1
	New rule:
	[2] -> LoAT_sink : (-1+n >= 0 /\ 2-i > 0 /\ 2-i >= 0 /\ i > 0 /\ i >= 0), cost: NONTERM

		2-i > 0 [0]: monotonic increase yields 2-i > 0
		
		2-i >= 0 [0]: monotonic increase yields 2-i >= 0, dependencies: 2-i > 0
		
		i > 0 [0]: monotonic increase yields i > 0
		
		i >= 0 [0]: monotonic increase yields i >= 0, dependencies: i > 0
		
		Replacement map: {2-i > 0 -> 2-i > 0, 2-i >= 0 -> 2-i >= 0, i > 0 -> i > 0, i >= 0 -> i >= 0}

Step with 24

	Trace

	0[T], 24[(-1+n >= 0 /\ 2-i > 0 /\ 2-i >= 0 /\ i > 0 /\ i >= 0)]
	
	Blocked

	[{}, {17[T]}, {24[T]}]

Refute

	Counterexample

	[ i=1 ] 0 [ i=i ] 24
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
