NO

Initial ITS

Start location: l5
Program variables: result_4^0 x_5^0
   0: l0 -> l1 : result_4^0'=result_4^post1, x_5^0'=x_5^post1, (x_5^0-x_5^post1 == 0 /\ -result_4^post1+result_4^0 == 0), cost: 1
   1: l1 -> l2 : result_4^0'=result_4^post2, x_5^0'=x_5^post2, (0 == 0 /\ -x_5^post2+x_5^0 == 0 /\ x_5^0 <= 0 /\ -x_5^0 <= 0), cost: 1
   2: l1 -> l3 : result_4^0'=result_4^post3, x_5^0'=x_5^post3, (0 == 0 /\ result_4^0-result_4^post3 == 0 /\ 1-x_5^0 <= 0 /\ -x_5^0 <= 0 /\ -2+x_5^post3-x_5^1 == 0), cost: 1
   4: l1 -> l4 : result_4^0'=result_4^post5, x_5^0'=x_5^post5, (0 == 0 /\ -result_4^post5+result_4^0 == 0 /\ 2+x_5^post5-x_5^1 == 0 /\ 1+x_5^0 <= 0), cost: 1
   3: l3 -> l1 : result_4^0'=result_4^post4, x_5^0'=x_5^post4, (x_5^0-x_5^post4 == 0 /\ -result_4^post4+result_4^0 == 0), cost: 1
   5: l4 -> l1 : result_4^0'=result_4^post6, x_5^0'=x_5^post6, (-x_5^post6+x_5^0 == 0 /\ result_4^0-result_4^post6 == 0), cost: 1
   6: l5 -> l0 : result_4^0'=result_4^post7, x_5^0'=x_5^post7, (x_5^0-x_5^post7 == 0 /\ -result_4^post7+result_4^0 == 0), cost: 1

Chained Linear Paths

Start location: l5
Program variables: result_4^0 x_5^0
   1: l1 -> l2 : result_4^0'=result_4^post2, x_5^0'=x_5^post2, (0 == 0 /\ -x_5^post2+x_5^0 == 0 /\ x_5^0 <= 0 /\ -x_5^0 <= 0), cost: 1
   8: l1 -> l1 : result_4^0'=result_4^post4, x_5^0'=x_5^post4, (0 == 0 /\ -result_4^post4+result_4^post3 == 0 /\ result_4^0-result_4^post3 == 0 /\ 1-x_5^0 <= 0 /\ -x_5^0 <= 0 /\ x_5^post3-x_5^post4 == 0 /\ -2+x_5^post3-x_5^1 == 0), cost: 1
   9: l1 -> l1 : result_4^0'=result_4^post6, x_5^0'=x_5^post6, (0 == 0 /\ -result_4^post5+result_4^0 == 0 /\ 2+x_5^post5-x_5^1 == 0 /\ 1+x_5^0 <= 0 /\ result_4^post5-result_4^post6 == 0 /\ -x_5^post6+x_5^post5 == 0), cost: 1
   7: l5 -> l1 : result_4^0'=result_4^post1, x_5^0'=x_5^post1, (x_5^0-x_5^post7 == 0 /\ -result_4^post7+result_4^0 == 0 /\ -result_4^post1+result_4^post7 == 0 /\ -x_5^post1+x_5^post7 == 0), cost: 1

	Eliminating location l0 by chaining:

	Applied chaining

	First rule:
	l5 -> l0 : result_4^0'=result_4^post7, x_5^0'=x_5^post7, (x_5^0-x_5^post7 == 0 /\ -result_4^post7+result_4^0 == 0), cost: 1
	Second rule:
	l0 -> l1 : result_4^0'=result_4^post1, x_5^0'=x_5^post1, (x_5^0-x_5^post1 == 0 /\ -result_4^post1+result_4^0 == 0), cost: 1
	New rule:
	l5 -> l1 : result_4^0'=result_4^post1, x_5^0'=x_5^post1, (x_5^0-x_5^post7 == 0 /\ -result_4^post7+result_4^0 == 0 /\ -result_4^post1+result_4^post7 == 0 /\ -x_5^post1+x_5^post7 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 6
	
	Eliminating location l3 by chaining:

	Applied chaining

	First rule:
	l1 -> l3 : result_4^0'=result_4^post3, x_5^0'=x_5^post3, (0 == 0 /\ result_4^0-result_4^post3 == 0 /\ 1-x_5^0 <= 0 /\ -x_5^0 <= 0 /\ -2+x_5^post3-x_5^1 == 0), cost: 1
	Second rule:
	l3 -> l1 : result_4^0'=result_4^post4, x_5^0'=x_5^post4, (x_5^0-x_5^post4 == 0 /\ -result_4^post4+result_4^0 == 0), cost: 1
	New rule:
	l1 -> l1 : result_4^0'=result_4^post4, x_5^0'=x_5^post4, (0 == 0 /\ -result_4^post4+result_4^post3 == 0 /\ result_4^0-result_4^post3 == 0 /\ 1-x_5^0 <= 0 /\ -x_5^0 <= 0 /\ x_5^post3-x_5^post4 == 0 /\ -2+x_5^post3-x_5^1 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 2 3
	
	Eliminating location l4 by chaining:

	Applied chaining

	First rule:
	l1 -> l4 : result_4^0'=result_4^post5, x_5^0'=x_5^post5, (0 == 0 /\ -result_4^post5+result_4^0 == 0 /\ 2+x_5^post5-x_5^1 == 0 /\ 1+x_5^0 <= 0), cost: 1
	Second rule:
	l4 -> l1 : result_4^0'=result_4^post6, x_5^0'=x_5^post6, (-x_5^post6+x_5^0 == 0 /\ result_4^0-result_4^post6 == 0), cost: 1
	New rule:
	l1 -> l1 : result_4^0'=result_4^post6, x_5^0'=x_5^post6, (0 == 0 /\ -result_4^post5+result_4^0 == 0 /\ 2+x_5^post5-x_5^1 == 0 /\ 1+x_5^0 <= 0 /\ result_4^post5-result_4^post6 == 0 /\ -x_5^post6+x_5^post5 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 4 5

Simplified Transitions

Start location: l5
Program variables: result_4^0 x_5^0
  10: l1 -> l2 : result_4^0'=result_4^post2, (x_5^0 <= 0 /\ x_5^0 == 0 /\ -x_5^0 <= 0), cost: 1
  12: l1 -> l1 : x_5^0'=x_5^post3, (1-x_5^0 <= 0 /\ -x_5^0 <= 0), cost: 1
  13: l1 -> l1 : x_5^0'=x_5^post5, 1+x_5^0 <= 0, cost: 1
  11: l5 -> l1 : T, cost: 1

	made implied equalities explicit

	Original rule:
	l1 -> l2 : result_4^0'=result_4^post2, x_5^0'=x_5^post2, (0 == 0 /\ -x_5^post2+x_5^0 == 0 /\ x_5^0 <= 0 /\ -x_5^0 <= 0), cost: 1
	New rule:
	l1 -> l2 : result_4^0'=result_4^post2, x_5^0'=x_5^post2, (0 == 0 /\ -x_5^post2+x_5^0 == 0 /\ x_5^0 <= 0 /\ x_5^0 == 0 /\ -x_5^0 <= 0), cost: 1
	
	Propagated Equalities

	Original rule:
	l1 -> l2 : result_4^0'=result_4^post2, x_5^0'=x_5^post2, (0 == 0 /\ -x_5^post2+x_5^0 == 0 /\ x_5^0 <= 0 /\ x_5^0 == 0 /\ -x_5^0 <= 0), cost: 1
	New rule:
	l1 -> l2 : result_4^0'=result_4^post2, x_5^0'=x_5^0, (0 == 0 /\ x_5^0 <= 0 /\ x_5^0 == 0 /\ -x_5^0 <= 0), cost: 1
	
		propagated equality x_5^post2 = x_5^0
		
	Simplified Guard

	Original rule:
	l1 -> l2 : result_4^0'=result_4^post2, x_5^0'=x_5^0, (0 == 0 /\ x_5^0 <= 0 /\ x_5^0 == 0 /\ -x_5^0 <= 0), cost: 1
	New rule:
	l1 -> l2 : result_4^0'=result_4^post2, x_5^0'=x_5^0, (x_5^0 <= 0 /\ x_5^0 == 0 /\ -x_5^0 <= 0), cost: 1
	
	made implied equalities explicit

	Original rule:
	l1 -> l2 : result_4^0'=result_4^post2, x_5^0'=x_5^0, (x_5^0 <= 0 /\ x_5^0 == 0 /\ -x_5^0 <= 0), cost: 1
	New rule:
	l1 -> l2 : result_4^0'=result_4^post2, x_5^0'=x_5^0, (x_5^0 <= 0 /\ x_5^0 == 0 /\ -x_5^0 <= 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	l1 -> l2 : result_4^0'=result_4^post2, x_5^0'=x_5^0, (x_5^0 <= 0 /\ x_5^0 == 0 /\ -x_5^0 <= 0), cost: 1
	New rule:
	l1 -> l2 : result_4^0'=result_4^post2, (x_5^0 <= 0 /\ x_5^0 == 0 /\ -x_5^0 <= 0), cost: 1
	
	Propagated Equalities

	Original rule:
	l5 -> l1 : result_4^0'=result_4^post1, x_5^0'=x_5^post1, (x_5^0-x_5^post7 == 0 /\ -result_4^post7+result_4^0 == 0 /\ -result_4^post1+result_4^post7 == 0 /\ -x_5^post1+x_5^post7 == 0), cost: 1
	New rule:
	l5 -> l1 : result_4^0'=result_4^post7, x_5^0'=x_5^post7, (0 == 0 /\ x_5^0-x_5^post7 == 0 /\ -result_4^post7+result_4^0 == 0), cost: 1
	
		propagated equality result_4^post1 = result_4^post7
		
		propagated equality x_5^post1 = x_5^post7
		
	Propagated Equalities

	Original rule:
	l5 -> l1 : result_4^0'=result_4^post7, x_5^0'=x_5^post7, (0 == 0 /\ x_5^0-x_5^post7 == 0 /\ -result_4^post7+result_4^0 == 0), cost: 1
	New rule:
	l5 -> l1 : result_4^0'=result_4^0, x_5^0'=x_5^0, 0 == 0, cost: 1
	
		propagated equality x_5^post7 = x_5^0
		
		propagated equality result_4^post7 = result_4^0
		
	Simplified Guard

	Original rule:
	l5 -> l1 : result_4^0'=result_4^0, x_5^0'=x_5^0, 0 == 0, cost: 1
	New rule:
	l5 -> l1 : result_4^0'=result_4^0, x_5^0'=x_5^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l5 -> l1 : result_4^0'=result_4^0, x_5^0'=x_5^0, T, cost: 1
	New rule:
	l5 -> l1 : T, cost: 1
	
	Propagated Equalities

	Original rule:
	l1 -> l1 : result_4^0'=result_4^post4, x_5^0'=x_5^post4, (0 == 0 /\ -result_4^post4+result_4^post3 == 0 /\ result_4^0-result_4^post3 == 0 /\ 1-x_5^0 <= 0 /\ -x_5^0 <= 0 /\ x_5^post3-x_5^post4 == 0 /\ -2+x_5^post3-x_5^1 == 0), cost: 1
	New rule:
	l1 -> l1 : result_4^0'=result_4^post3, x_5^0'=x_5^post3, (0 == 0 /\ result_4^0-result_4^post3 == 0 /\ 1-x_5^0 <= 0 /\ -x_5^0 <= 0 /\ -2+x_5^post3-x_5^1 == 0), cost: 1
	
		propagated equality result_4^post4 = result_4^post3
		
		propagated equality x_5^post4 = x_5^post3
		
	Propagated Equalities

	Original rule:
	l1 -> l1 : result_4^0'=result_4^post3, x_5^0'=x_5^post3, (0 == 0 /\ result_4^0-result_4^post3 == 0 /\ 1-x_5^0 <= 0 /\ -x_5^0 <= 0 /\ -2+x_5^post3-x_5^1 == 0), cost: 1
	New rule:
	l1 -> l1 : result_4^0'=result_4^0, x_5^0'=x_5^post3, (0 == 0 /\ 1-x_5^0 <= 0 /\ -x_5^0 <= 0), cost: 1
	
		propagated equality result_4^post3 = result_4^0
		
		propagated equality x_5^1 = -2+x_5^post3
		
	Simplified Guard

	Original rule:
	l1 -> l1 : result_4^0'=result_4^0, x_5^0'=x_5^post3, (0 == 0 /\ 1-x_5^0 <= 0 /\ -x_5^0 <= 0), cost: 1
	New rule:
	l1 -> l1 : result_4^0'=result_4^0, x_5^0'=x_5^post3, (1-x_5^0 <= 0 /\ -x_5^0 <= 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	l1 -> l1 : result_4^0'=result_4^0, x_5^0'=x_5^post3, (1-x_5^0 <= 0 /\ -x_5^0 <= 0), cost: 1
	New rule:
	l1 -> l1 : x_5^0'=x_5^post3, (1-x_5^0 <= 0 /\ -x_5^0 <= 0), cost: 1
	
	Propagated Equalities

	Original rule:
	l1 -> l1 : result_4^0'=result_4^post6, x_5^0'=x_5^post6, (0 == 0 /\ -result_4^post5+result_4^0 == 0 /\ 2+x_5^post5-x_5^1 == 0 /\ 1+x_5^0 <= 0 /\ result_4^post5-result_4^post6 == 0 /\ -x_5^post6+x_5^post5 == 0), cost: 1
	New rule:
	l1 -> l1 : result_4^0'=result_4^post5, x_5^0'=x_5^post5, (0 == 0 /\ -result_4^post5+result_4^0 == 0 /\ 2+x_5^post5-x_5^1 == 0 /\ 1+x_5^0 <= 0), cost: 1
	
		propagated equality result_4^post6 = result_4^post5
		
		propagated equality x_5^post6 = x_5^post5
		
	Propagated Equalities

	Original rule:
	l1 -> l1 : result_4^0'=result_4^post5, x_5^0'=x_5^post5, (0 == 0 /\ -result_4^post5+result_4^0 == 0 /\ 2+x_5^post5-x_5^1 == 0 /\ 1+x_5^0 <= 0), cost: 1
	New rule:
	l1 -> l1 : result_4^0'=result_4^0, x_5^0'=x_5^post5, (0 == 0 /\ 1+x_5^0 <= 0), cost: 1
	
		propagated equality result_4^post5 = result_4^0
		
		propagated equality x_5^1 = 2+x_5^post5
		
	Simplified Guard

	Original rule:
	l1 -> l1 : result_4^0'=result_4^0, x_5^0'=x_5^post5, (0 == 0 /\ 1+x_5^0 <= 0), cost: 1
	New rule:
	l1 -> l1 : result_4^0'=result_4^0, x_5^0'=x_5^post5, 1+x_5^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l1 -> l1 : result_4^0'=result_4^0, x_5^0'=x_5^post5, 1+x_5^0 <= 0, cost: 1
	New rule:
	l1 -> l1 : x_5^0'=x_5^post5, 1+x_5^0 <= 0, cost: 1

Step with 11

	Trace

	11[T]
	
	Blocked

	[{}, {}]

Step with 10

	Trace

	11[T], 10[(x_5^0 <= 0 /\ x_5^0 == 0 /\ -x_5^0 <= 0)]
	
	Blocked

	[{}, {}, {}]

Backtrack

	Trace

	11[T]
	
	Blocked

	[{}, {10[T]}]

Step with 12

	Trace

	11[T], 12[(1-x_5^0 <= 0 /\ -x_5^0 <= 0)]
	
	Blocked

	[{}, {10[T]}, {}]

Nonterm

Start location: l5
Program variables: result_4^0 x_5^0
  10: l1 -> l2 : result_4^0'=result_4^post2, (x_5^0 <= 0 /\ x_5^0 == 0 /\ -x_5^0 <= 0), cost: 1
  12: l1 -> l1 : x_5^0'=x_5^post3, (1-x_5^0 <= 0 /\ -x_5^0 <= 0), cost: 1
  13: l1 -> l1 : x_5^0'=x_5^post5, 1+x_5^0 <= 0, cost: 1
  14: l1 -> LoAT_sink : (x_5^0 >= 0 /\ -1+x_5^0 >= 0 /\ -x_5^post3+x_5^0 <= 0), cost: NONTERM
  11: l5 -> l1 : T, cost: 1

	Certificate of Non-Termination

	Original rule:
	l1 -> l1 : x_5^0'=x_5^post3, (1-x_5^0 <= 0 /\ -x_5^0 <= 0), cost: 1
	New rule:
	l1 -> LoAT_sink : (x_5^0 >= 0 /\ -1+x_5^0 >= 0 /\ -x_5^post3+x_5^0 <= 0), cost: NONTERM

		x_5^0 >= 0 [0]: montonic decrease yields x_5^post3 >= 0, dependencies: -1+x_5^0 >= 0
		
		x_5^0 >= 0 [1]: eventual decrease yields (x_5^post3 >= 0 /\ x_5^0 >= 0)
		
		x_5^0 >= 0 [2]: eventual increase yields (x_5^0 >= 0 /\ -x_5^post3+x_5^0 <= 0)
		
		-1+x_5^0 >= 0 [0]: eventual decrease yields (-1+x_5^post3 >= 0 /\ -1+x_5^0 >= 0)
		
		-1+x_5^0 >= 0 [1]: eventual increase yields (-1+x_5^0 >= 0 /\ -x_5^post3+x_5^0 <= 0)
		
		Replacement map: {x_5^0 >= 0 -> (x_5^0 >= 0 /\ -x_5^post3+x_5^0 <= 0), -1+x_5^0 >= 0 -> (-1+x_5^0 >= 0 /\ -x_5^post3+x_5^0 <= 0)}

Step with 14

	Trace

	11[T], 14[(x_5^0 >= 0 /\ -1+x_5^0 >= 0 /\ -x_5^post3+x_5^0 <= 0)]
	
	Blocked

	[{}, {10[T]}, {14[T]}]

Refute

	Counterexample

	[ result_4^0=0 x_5^0=1 ] 11 [ result_4^0=0 x_5^0=1 ] 14
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
