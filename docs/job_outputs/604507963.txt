unknown

Initial ITS

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5
   0: f1_0_main_Load -> f362_0_gt_LE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, arg5'=arg5p1, (1+arg2p1 > 0 /\ 1+arg2 > 0 /\ -arg4p1+arg2p1 == 0 /\ arg1 > 0 /\ arg1p1-arg3p1 == 0 /\ 1+arg1p1 > 0 /\ arg1p1-arg5p1 == 0), cost: 1
   1: f362_0_gt_LE -> f362_0_gt_LE : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, arg4'=arg4p2, arg5'=arg5p2, (-1+arg3-arg5p2 == 0 /\ arg4 > 0 /\ -1-arg3p2+arg3 == 0 /\ -arg5+arg3 == 0 /\ -1+arg4-arg4p2 == 0 /\ arg1-arg1p2 == 0 /\ arg3 > 0 /\ -arg2p2+arg2 == 0), cost: 1
   2: f362_0_gt_LE -> f362_0_gt_LE : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, arg4'=arg4p3, arg5'=arg5p3, (-arg1p3+arg1 == 0 /\ 1-arg4p3+arg2 == 0 /\ -arg5p3+arg1 == 0 /\ -arg4 == 0 /\ -arg5+arg3 == 0 /\ 1-arg2p3+arg2 == 0 /\ arg1-arg3p3 == 0 /\ arg3 > 0), cost: 1
   3: __init -> f1_0_main_Load : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, arg4'=arg4p4, arg5'=arg5p4, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5
   1: f362_0_gt_LE -> f362_0_gt_LE : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, arg4'=arg4p2, arg5'=arg5p2, (-1+arg3-arg5p2 == 0 /\ arg4 > 0 /\ -1-arg3p2+arg3 == 0 /\ -arg5+arg3 == 0 /\ -1+arg4-arg4p2 == 0 /\ arg1-arg1p2 == 0 /\ arg3 > 0 /\ -arg2p2+arg2 == 0), cost: 1
   2: f362_0_gt_LE -> f362_0_gt_LE : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, arg4'=arg4p3, arg5'=arg5p3, (-arg1p3+arg1 == 0 /\ 1-arg4p3+arg2 == 0 /\ -arg5p3+arg1 == 0 /\ -arg4 == 0 /\ -arg5+arg3 == 0 /\ 1-arg2p3+arg2 == 0 /\ arg1-arg3p3 == 0 /\ arg3 > 0), cost: 1
   4: __init -> f362_0_gt_LE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, arg5'=arg5p1, (1+arg2p1 > 0 /\ -arg4p1+arg2p1 == 0 /\ 1+arg2p4 > 0 /\ arg1p1-arg3p1 == 0 /\ arg1p4 > 0 /\ 1+arg1p1 > 0 /\ arg1p1-arg5p1 == 0), cost: 1

	Eliminating location f1_0_main_Load by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_Load : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, arg4'=arg4p4, arg5'=arg5p4, T, cost: 1
	Second rule:
	f1_0_main_Load -> f362_0_gt_LE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, arg5'=arg5p1, (1+arg2p1 > 0 /\ 1+arg2 > 0 /\ -arg4p1+arg2p1 == 0 /\ arg1 > 0 /\ arg1p1-arg3p1 == 0 /\ 1+arg1p1 > 0 /\ arg1p1-arg5p1 == 0), cost: 1
	New rule:
	__init -> f362_0_gt_LE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, arg5'=arg5p1, (1+arg2p1 > 0 /\ -arg4p1+arg2p1 == 0 /\ 1+arg2p4 > 0 /\ arg1p1-arg3p1 == 0 /\ arg1p4 > 0 /\ 1+arg1p1 > 0 /\ arg1p1-arg5p1 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 3

Simplified Transitions

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5
   5: f362_0_gt_LE -> f362_0_gt_LE : arg3'=-1+arg3, arg4'=-1+arg4, arg5'=-1+arg3, (arg4 > 0 /\ -arg5+arg3 == 0 /\ arg3 > 0), cost: 1
   6: f362_0_gt_LE -> f362_0_gt_LE : arg2'=1+arg2, arg3'=arg1, arg4'=1+arg2, arg5'=arg1, (-arg4 == 0 /\ -arg5+arg3 == 0 /\ arg3 > 0), cost: 1
   7: __init -> f362_0_gt_LE : arg1'=arg5p1, arg2'=arg4p1, arg3'=arg5p1, arg4'=arg4p1, arg5'=arg5p1, (1+arg5p1 > 0 /\ 1+arg4p1 > 0), cost: 1

	Propagated Equalities

	Original rule:
	f362_0_gt_LE -> f362_0_gt_LE : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, arg4'=arg4p2, arg5'=arg5p2, (-1+arg3-arg5p2 == 0 /\ arg4 > 0 /\ -1-arg3p2+arg3 == 0 /\ -arg5+arg3 == 0 /\ -1+arg4-arg4p2 == 0 /\ arg1-arg1p2 == 0 /\ arg3 > 0 /\ -arg2p2+arg2 == 0), cost: 1
	New rule:
	f362_0_gt_LE -> f362_0_gt_LE : arg1'=arg1, arg2'=arg2, arg3'=-1+arg3, arg4'=-1+arg4, arg5'=-1+arg3, (0 == 0 /\ arg4 > 0 /\ -arg5+arg3 == 0 /\ arg3 > 0), cost: 1
	
		propagated equality arg5p2 = -1+arg3
		
		propagated equality arg3p2 = -1+arg3
		
		propagated equality arg4p2 = -1+arg4
		
		propagated equality arg1p2 = arg1
		
		propagated equality arg2p2 = arg2
		
	Simplified Guard

	Original rule:
	f362_0_gt_LE -> f362_0_gt_LE : arg1'=arg1, arg2'=arg2, arg3'=-1+arg3, arg4'=-1+arg4, arg5'=-1+arg3, (0 == 0 /\ arg4 > 0 /\ -arg5+arg3 == 0 /\ arg3 > 0), cost: 1
	New rule:
	f362_0_gt_LE -> f362_0_gt_LE : arg1'=arg1, arg2'=arg2, arg3'=-1+arg3, arg4'=-1+arg4, arg5'=-1+arg3, (arg4 > 0 /\ -arg5+arg3 == 0 /\ arg3 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f362_0_gt_LE -> f362_0_gt_LE : arg1'=arg1, arg2'=arg2, arg3'=-1+arg3, arg4'=-1+arg4, arg5'=-1+arg3, (arg4 > 0 /\ -arg5+arg3 == 0 /\ arg3 > 0), cost: 1
	New rule:
	f362_0_gt_LE -> f362_0_gt_LE : arg3'=-1+arg3, arg4'=-1+arg4, arg5'=-1+arg3, (arg4 > 0 /\ -arg5+arg3 == 0 /\ arg3 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f362_0_gt_LE -> f362_0_gt_LE : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, arg4'=arg4p3, arg5'=arg5p3, (-arg1p3+arg1 == 0 /\ 1-arg4p3+arg2 == 0 /\ -arg5p3+arg1 == 0 /\ -arg4 == 0 /\ -arg5+arg3 == 0 /\ 1-arg2p3+arg2 == 0 /\ arg1-arg3p3 == 0 /\ arg3 > 0), cost: 1
	New rule:
	f362_0_gt_LE -> f362_0_gt_LE : arg1'=arg1, arg2'=1+arg2, arg3'=arg1, arg4'=1+arg2, arg5'=arg1, (0 == 0 /\ -arg4 == 0 /\ -arg5+arg3 == 0 /\ arg3 > 0), cost: 1
	
		propagated equality arg1p3 = arg1
		
		propagated equality arg4p3 = 1+arg2
		
		propagated equality arg5p3 = arg1
		
		propagated equality arg2p3 = 1+arg2
		
		propagated equality arg3p3 = arg1
		
	Simplified Guard

	Original rule:
	f362_0_gt_LE -> f362_0_gt_LE : arg1'=arg1, arg2'=1+arg2, arg3'=arg1, arg4'=1+arg2, arg5'=arg1, (0 == 0 /\ -arg4 == 0 /\ -arg5+arg3 == 0 /\ arg3 > 0), cost: 1
	New rule:
	f362_0_gt_LE -> f362_0_gt_LE : arg1'=arg1, arg2'=1+arg2, arg3'=arg1, arg4'=1+arg2, arg5'=arg1, (-arg4 == 0 /\ -arg5+arg3 == 0 /\ arg3 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f362_0_gt_LE -> f362_0_gt_LE : arg1'=arg1, arg2'=1+arg2, arg3'=arg1, arg4'=1+arg2, arg5'=arg1, (-arg4 == 0 /\ -arg5+arg3 == 0 /\ arg3 > 0), cost: 1
	New rule:
	f362_0_gt_LE -> f362_0_gt_LE : arg2'=1+arg2, arg3'=arg1, arg4'=1+arg2, arg5'=arg1, (-arg4 == 0 /\ -arg5+arg3 == 0 /\ arg3 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	__init -> f362_0_gt_LE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, arg5'=arg5p1, (1+arg2p1 > 0 /\ -arg4p1+arg2p1 == 0 /\ 1+arg2p4 > 0 /\ arg1p1-arg3p1 == 0 /\ arg1p4 > 0 /\ 1+arg1p1 > 0 /\ arg1p1-arg5p1 == 0), cost: 1
	New rule:
	__init -> f362_0_gt_LE : arg1'=arg5p1, arg2'=arg4p1, arg3'=arg5p1, arg4'=arg4p1, arg5'=arg5p1, (0 == 0 /\ 1+arg5p1 > 0 /\ 1+arg2p4 > 0 /\ arg1p4 > 0 /\ 1+arg4p1 > 0), cost: 1
	
		propagated equality arg2p1 = arg4p1
		
		propagated equality arg1p1 = arg3p1
		
		propagated equality arg3p1 = arg5p1
		
	Simplified Guard

	Original rule:
	__init -> f362_0_gt_LE : arg1'=arg5p1, arg2'=arg4p1, arg3'=arg5p1, arg4'=arg4p1, arg5'=arg5p1, (0 == 0 /\ 1+arg5p1 > 0 /\ 1+arg2p4 > 0 /\ arg1p4 > 0 /\ 1+arg4p1 > 0), cost: 1
	New rule:
	__init -> f362_0_gt_LE : arg1'=arg5p1, arg2'=arg4p1, arg3'=arg5p1, arg4'=arg4p1, arg5'=arg5p1, (1+arg5p1 > 0 /\ 1+arg2p4 > 0 /\ arg1p4 > 0 /\ 1+arg4p1 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	__init -> f362_0_gt_LE : arg1'=arg5p1, arg2'=arg4p1, arg3'=arg5p1, arg4'=arg4p1, arg5'=arg5p1, (1+arg5p1 > 0 /\ 1+arg2p4 > 0 /\ arg1p4 > 0 /\ 1+arg4p1 > 0), cost: 1
	New rule:
	__init -> f362_0_gt_LE : arg1'=arg5p1, arg2'=arg4p1, arg3'=arg5p1, arg4'=arg4p1, arg5'=arg5p1, (1+arg5p1 > 0 /\ 1+arg4p1 > 0), cost: 1

Step with 7

	Trace

	7[(1+arg5p1 > 0 /\ 1+arg4p1 > 0)]
	
	Blocked

	[{}, {}]

Step with 5

	Trace

	7[(1+arg5p1 > 0 /\ 1+arg4p1 > 0)], 5[(arg4 > 0 /\ -arg5+arg3 == 0 /\ arg3 > 0)]
	
	Blocked

	[{}, {}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5
   5: f362_0_gt_LE -> f362_0_gt_LE : arg3'=-1+arg3, arg4'=-1+arg4, arg5'=-1+arg3, (arg4 > 0 /\ -arg5+arg3 == 0 /\ arg3 > 0), cost: 1
   6: f362_0_gt_LE -> f362_0_gt_LE : arg2'=1+arg2, arg3'=arg1, arg4'=1+arg2, arg5'=arg1, (-arg4 == 0 /\ -arg5+arg3 == 0 /\ arg3 > 0), cost: 1
   8: f362_0_gt_LE -> f362_0_gt_LE : arg3'=-n+arg3, arg4'=arg4-n, arg5'=-n+arg3, (arg5-arg3 >= 0 /\ -arg5+arg3 >= 0 /\ 1+arg4-n > 0 /\ -1+n >= 0 /\ 1-n+arg3 > 0), cost: 1
   7: __init -> f362_0_gt_LE : arg1'=arg5p1, arg2'=arg4p1, arg3'=arg5p1, arg4'=arg4p1, arg5'=arg5p1, (1+arg5p1 > 0 /\ 1+arg4p1 > 0), cost: 1

	Loop Acceleration

	Original rule:
	f362_0_gt_LE -> f362_0_gt_LE : arg3'=-1+arg3, arg4'=-1+arg4, arg5'=-1+arg3, (arg4 > 0 /\ -arg5+arg3 == 0 /\ arg3 > 0), cost: 1
	New rule:
	f362_0_gt_LE -> f362_0_gt_LE : arg3'=-n+arg3, arg4'=arg4-n, arg5'=-n+arg3, (arg5-arg3 >= 0 /\ -arg5+arg3 >= 0 /\ 1+arg4-n > 0 /\ -1+n >= 0 /\ 1-n+arg3 > 0), cost: 1

		arg5-arg3 >= 0 [0]: monotonic increase yields arg5-arg3 >= 0
		
		arg4 > 0 [0]: montonic decrease yields 1+arg4-n > 0
		
		arg4 > 0 [1]: eventual increase yields (1 <= 0 /\ arg4 > 0)
		
		-arg5+arg3 >= 0 [0]: monotonic increase yields -arg5+arg3 >= 0
		
		arg3 > 0 [0]: montonic decrease yields 1-n+arg3 > 0
		
		arg3 > 0 [1]: eventual increase yields (1 <= 0 /\ arg3 > 0)
		
		Replacement map: {arg5-arg3 >= 0 -> arg5-arg3 >= 0, arg4 > 0 -> 1+arg4-n > 0, -arg5+arg3 >= 0 -> -arg5+arg3 >= 0, arg3 > 0 -> 1-n+arg3 > 0}

	Trace

	7[(1+arg5p1 > 0 /\ 1+arg4p1 > 0)], 8[(arg5-arg3 >= 0 /\ -arg5+arg3 >= 0 /\ 1+arg4-n > 0 /\ -1+n >= 0 /\ 1-n+arg3 > 0)]
	
	Blocked

	[{}, {}, {5[T], 8[T]}]

Step with 6

	Trace

	7[(1+arg5p1 > 0 /\ 1+arg4p1 > 0)], 8[(arg5-arg3 >= 0 /\ -arg5+arg3 >= 0 /\ 1+arg4-n > 0 /\ -1+n >= 0 /\ 1-n+arg3 > 0)], 6[(-arg4 == 0 /\ -arg5+arg3 == 0 /\ arg3 > 0)]
	
	Blocked

	[{}, {}, {5[T], 8[T]}, {}]

Accelerate and Drop

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5
   5: f362_0_gt_LE -> f362_0_gt_LE : arg3'=-1+arg3, arg4'=-1+arg4, arg5'=-1+arg3, (arg4 > 0 /\ -arg5+arg3 == 0 /\ arg3 > 0), cost: 1
   6: f362_0_gt_LE -> f362_0_gt_LE : arg2'=1+arg2, arg3'=arg1, arg4'=1+arg2, arg5'=arg1, (-arg4 == 0 /\ -arg5+arg3 == 0 /\ arg3 > 0), cost: 1
   8: f362_0_gt_LE -> f362_0_gt_LE : arg3'=-n+arg3, arg4'=arg4-n, arg5'=-n+arg3, (arg5-arg3 >= 0 /\ -arg5+arg3 >= 0 /\ 1+arg4-n > 0 /\ -1+n >= 0 /\ 1-n+arg3 > 0), cost: 1
   9: f362_0_gt_LE -> f362_0_gt_LE : arg2'=n2+arg2, arg3'=arg1, arg4'=n2+arg2, arg5'=arg1, (arg5-arg3 >= 0 /\ arg4 >= 0 /\ -arg4 >= 0 /\ -arg5+arg3 >= 0 /\ arg1 > 0 /\ 1-n2-arg2 >= 0 /\ -1+arg4-arg2 <= 0 /\ arg3 > 0 /\ -1+n2 >= 0), cost: 1
   7: __init -> f362_0_gt_LE : arg1'=arg5p1, arg2'=arg4p1, arg3'=arg5p1, arg4'=arg4p1, arg5'=arg5p1, (1+arg5p1 > 0 /\ 1+arg4p1 > 0), cost: 1

	Loop Acceleration

	Original rule:
	f362_0_gt_LE -> f362_0_gt_LE : arg2'=1+arg2, arg3'=arg1, arg4'=1+arg2, arg5'=arg1, (-arg4 == 0 /\ -arg5+arg3 == 0 /\ arg3 > 0), cost: 1
	New rule:
	f362_0_gt_LE -> f362_0_gt_LE : arg2'=n2+arg2, arg3'=arg1, arg4'=n2+arg2, arg5'=arg1, (arg5-arg3 >= 0 /\ arg4 >= 0 /\ -arg4 >= 0 /\ -arg5+arg3 >= 0 /\ arg1 > 0 /\ 1-n2-arg2 >= 0 /\ -1+arg4-arg2 <= 0 /\ arg3 > 0 /\ -1+n2 >= 0), cost: 1

		arg5-arg3 >= 0 [0]: monotonic increase yields arg5-arg3 >= 0
		
		arg4 >= 0 [0]: eventual increase yields (arg4 >= 0 /\ -1+arg4-arg2 <= 0)
		
		-arg4 >= 0 [0]: eventual decrease yields (-arg4 >= 0 /\ 1-n2-arg2 >= 0)
		
		-arg5+arg3 >= 0 [0]: monotonic increase yields -arg5+arg3 >= 0
		
		arg3 > 0 [0]: eventual decrease yields (arg1 > 0 /\ arg3 > 0)
		
		arg3 > 0 [1]: eventual increase yields (arg3 > 0 /\ -arg1+arg3 <= 0)
		
		Replacement map: {arg5-arg3 >= 0 -> arg5-arg3 >= 0, arg4 >= 0 -> (arg4 >= 0 /\ -1+arg4-arg2 <= 0), -arg4 >= 0 -> (-arg4 >= 0 /\ 1-n2-arg2 >= 0), -arg5+arg3 >= 0 -> -arg5+arg3 >= 0, arg3 > 0 -> (arg1 > 0 /\ arg3 > 0)}

	Trace

	7[(1+arg5p1 > 0 /\ 1+arg4p1 > 0)], 8[(arg5-arg3 >= 0 /\ -arg5+arg3 >= 0 /\ 1+arg4-n > 0 /\ -1+n >= 0 /\ 1-n+arg3 > 0)]
	
	Blocked

	[{}, {}, {5[T], 6[T], 8[T]}]

Backtrack

	Trace

	7[(1+arg5p1 > 0 /\ 1+arg4p1 > 0)]
	
	Blocked

	[{}, {8[T]}]

Step with 5

	Trace

	7[(1+arg5p1 > 0 /\ 1+arg4p1 > 0)], 5[(arg4 > 0 /\ -arg5+arg3 == 0 /\ arg3 > 0)]
	
	Blocked

	[{}, {8[T]}, {}]

Covered

	Trace

	7[(1+arg5p1 > 0 /\ 1+arg4p1 > 0)]
	
	Blocked

	[{}, {5[T], 8[T]}]

Step with 6

	Trace

	7[(1+arg5p1 > 0 /\ 1+arg4p1 > 0)], 6[(-arg4 == 0 /\ -arg5+arg3 == 0 /\ arg3 > 0)]
	
	Blocked

	[{}, {5[T], 8[T]}, {}]

Covered

	Trace

	7[(1+arg5p1 > 0 /\ 1+arg4p1 > 0)]
	
	Blocked

	[{}, {5[T], 6[T], 8[T]}]

Step with 9

	Trace

	7[(1+arg5p1 > 0 /\ 1+arg4p1 > 0)], 9[(arg5-arg3 >= 0 /\ arg4 >= 0 /\ -arg4 >= 0 /\ -arg5+arg3 >= 0 /\ arg1 > 0 /\ 1-n2-arg2 >= 0 /\ -1+arg4-arg2 <= 0 /\ arg3 > 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {5[T], 6[T], 8[T]}, {9[T]}]

Step with 5

	Trace

	7[(1+arg5p1 > 0 /\ 1+arg4p1 > 0)], 9[(arg5-arg3 >= 0 /\ arg4 >= 0 /\ -arg4 >= 0 /\ -arg5+arg3 >= 0 /\ arg1 > 0 /\ 1-n2-arg2 >= 0 /\ -1+arg4-arg2 <= 0 /\ arg3 > 0 /\ -1+n2 >= 0)], 5[(arg4 > 0 /\ -arg5+arg3 == 0 /\ arg3 > 0)]
	
	Blocked

	[{}, {5[T], 6[T], 8[T]}, {9[T]}, {}]

Covered

	Trace

	7[(1+arg5p1 > 0 /\ 1+arg4p1 > 0)], 9[(arg5-arg3 >= 0 /\ arg4 >= 0 /\ -arg4 >= 0 /\ -arg5+arg3 >= 0 /\ arg1 > 0 /\ 1-n2-arg2 >= 0 /\ -1+arg4-arg2 <= 0 /\ arg3 > 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {5[T], 6[T], 8[T]}, {5[T], 9[T]}]

Step with 8

	Trace

	7[(1+arg5p1 > 0 /\ 1+arg4p1 > 0)], 9[(arg5-arg3 >= 0 /\ arg4 >= 0 /\ -arg4 >= 0 /\ -arg5+arg3 >= 0 /\ arg1 > 0 /\ 1-n2-arg2 >= 0 /\ -1+arg4-arg2 <= 0 /\ arg3 > 0 /\ -1+n2 >= 0)], 8[(arg5-arg3 >= 0 /\ -arg5+arg3 >= 0 /\ 1+arg4-n > 0 /\ -1+n >= 0 /\ 1-n+arg3 > 0)]
	
	Blocked

	[{}, {5[T], 6[T], 8[T]}, {5[T], 6[T], 9[T]}, {8[T]}]

Acceleration Failed

marked recursive suffix as redundant

Step with 6

	Trace

	7[(1+arg5p1 > 0 /\ 1+arg4p1 > 0)], 9[(arg5-arg3 >= 0 /\ arg4 >= 0 /\ -arg4 >= 0 /\ -arg5+arg3 >= 0 /\ arg1 > 0 /\ 1-n2-arg2 >= 0 /\ -1+arg4-arg2 <= 0 /\ arg3 > 0 /\ -1+n2 >= 0)], 8[(arg5-arg3 >= 0 /\ -arg5+arg3 >= 0 /\ 1+arg4-n > 0 /\ -1+n >= 0 /\ 1-n+arg3 > 0)], 6[(-arg4 == 0 /\ -arg5+arg3 == 0 /\ arg3 > 0)]
	
	Blocked

	[{}, {5[T], 6[T], 8[T]}, {5[T], 6[T], 9[T]}, {5[T], 8[T], 9[T]}, {}]

Covered

	Trace

	7[(1+arg5p1 > 0 /\ 1+arg4p1 > 0)], 9[(arg5-arg3 >= 0 /\ arg4 >= 0 /\ -arg4 >= 0 /\ -arg5+arg3 >= 0 /\ arg1 > 0 /\ 1-n2-arg2 >= 0 /\ -1+arg4-arg2 <= 0 /\ arg3 > 0 /\ -1+n2 >= 0)], 8[(arg5-arg3 >= 0 /\ -arg5+arg3 >= 0 /\ 1+arg4-n > 0 /\ -1+n >= 0 /\ 1-n+arg3 > 0)]
	
	Blocked

	[{}, {5[T], 6[T], 8[T]}, {5[T], 6[T], 9[T]}, {5[T], 6[T], 8[T], 9[T]}]

Backtrack

	Trace

	7[(1+arg5p1 > 0 /\ 1+arg4p1 > 0)], 9[(arg5-arg3 >= 0 /\ arg4 >= 0 /\ -arg4 >= 0 /\ -arg5+arg3 >= 0 /\ arg1 > 0 /\ 1-n2-arg2 >= 0 /\ -1+arg4-arg2 <= 0 /\ arg3 > 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {5[T], 6[T], 8[T]}, {5[T], 6[T], 8[T], 9[T]}]

Backtrack

	Trace

	7[(1+arg5p1 > 0 /\ 1+arg4p1 > 0)]
	
	Blocked

	[{}, {5[T], 6[T], 8[T], 9[T]}]

Backtrack

	Trace

	Blocked

	[{7[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
