NO

Initial ITS

Start location: l4
Program variables: x^0 y^0 z^0
   0: l0 -> l1 : x^0'=x^post1, y^0'=y^post1, z^0'=z^post1, (0 == 0 /\ -y^post1+y^0 == 0 /\ y^0+x^post1-x^0 == 0), cost: 1
   1: l0 -> l2 : x^0'=x^post2, y^0'=y^post2, z^0'=z^post2, (2-z^0 <= 0 /\ 1-z^0+z^post2 == 0 /\ -1+y^post2-y^0 == 0 /\ -x^post2+x^0 == 0), cost: 1
   3: l1 -> l0 : x^0'=x^post4, y^0'=y^post4, z^0'=z^post4, (z^0-z^post4 == 0 /\ -x^post4+x^0 == 0 /\ 2-x^0 <= 0 /\ -y^post4+y^0 == 0), cost: 1
   2: l2 -> l0 : x^0'=x^post3, y^0'=y^post3, z^0'=z^post3, (z^0-z^post3 == 0 /\ -y^post3+y^0 == 0 /\ -x^post3+x^0 == 0), cost: 1
   4: l3 -> l1 : x^0'=x^post5, y^0'=y^post5, z^0'=z^post5, (z^0-z^post5 == 0 /\ -x^post5+x^0 == 0 /\ y^0-y^post5 == 0), cost: 1
   5: l4 -> l3 : x^0'=x^post6, y^0'=y^post6, z^0'=z^post6, (-x^post6+x^0 == 0 /\ -z^post6+z^0 == 0 /\ y^0-y^post6 == 0), cost: 1

Chained Linear Paths

Start location: l4
Program variables: x^0 y^0 z^0
   0: l0 -> l1 : x^0'=x^post1, y^0'=y^post1, z^0'=z^post1, (0 == 0 /\ -y^post1+y^0 == 0 /\ y^0+x^post1-x^0 == 0), cost: 1
   7: l0 -> l0 : x^0'=x^post3, y^0'=y^post3, z^0'=z^post3, (2-z^0 <= 0 /\ y^post2-y^post3 == 0 /\ 1-z^0+z^post2 == 0 /\ z^post2-z^post3 == 0 /\ -1+y^post2-y^0 == 0 /\ -x^post2+x^0 == 0 /\ x^post2-x^post3 == 0), cost: 1
   3: l1 -> l0 : x^0'=x^post4, y^0'=y^post4, z^0'=z^post4, (z^0-z^post4 == 0 /\ -x^post4+x^0 == 0 /\ 2-x^0 <= 0 /\ -y^post4+y^0 == 0), cost: 1
   6: l4 -> l1 : x^0'=x^post5, y^0'=y^post5, z^0'=z^post5, (y^post6-y^post5 == 0 /\ z^post6-z^post5 == 0 /\ x^post6-x^post5 == 0 /\ -x^post6+x^0 == 0 /\ -z^post6+z^0 == 0 /\ y^0-y^post6 == 0), cost: 1

	Eliminating location l3 by chaining:

	Applied chaining

	First rule:
	l4 -> l3 : x^0'=x^post6, y^0'=y^post6, z^0'=z^post6, (-x^post6+x^0 == 0 /\ -z^post6+z^0 == 0 /\ y^0-y^post6 == 0), cost: 1
	Second rule:
	l3 -> l1 : x^0'=x^post5, y^0'=y^post5, z^0'=z^post5, (z^0-z^post5 == 0 /\ -x^post5+x^0 == 0 /\ y^0-y^post5 == 0), cost: 1
	New rule:
	l4 -> l1 : x^0'=x^post5, y^0'=y^post5, z^0'=z^post5, (y^post6-y^post5 == 0 /\ z^post6-z^post5 == 0 /\ x^post6-x^post5 == 0 /\ -x^post6+x^0 == 0 /\ -z^post6+z^0 == 0 /\ y^0-y^post6 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 4 5
	
	Eliminating location l2 by chaining:

	Applied chaining

	First rule:
	l0 -> l2 : x^0'=x^post2, y^0'=y^post2, z^0'=z^post2, (2-z^0 <= 0 /\ 1-z^0+z^post2 == 0 /\ -1+y^post2-y^0 == 0 /\ -x^post2+x^0 == 0), cost: 1
	Second rule:
	l2 -> l0 : x^0'=x^post3, y^0'=y^post3, z^0'=z^post3, (z^0-z^post3 == 0 /\ -y^post3+y^0 == 0 /\ -x^post3+x^0 == 0), cost: 1
	New rule:
	l0 -> l0 : x^0'=x^post3, y^0'=y^post3, z^0'=z^post3, (2-z^0 <= 0 /\ y^post2-y^post3 == 0 /\ 1-z^0+z^post2 == 0 /\ z^post2-z^post3 == 0 /\ -1+y^post2-y^0 == 0 /\ -x^post2+x^0 == 0 /\ x^post2-x^post3 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 1 2

Simplified Transitions

Start location: l4
Program variables: x^0 y^0 z^0
   8: l0 -> l1 : x^0'=-y^0+x^0, z^0'=z^post1, T, cost: 1
  11: l0 -> l0 : y^0'=1+y^0, z^0'=-1+z^0, 2-z^0 <= 0, cost: 1
   9: l1 -> l0 : 2-x^0 <= 0, cost: 1
  10: l4 -> l1 : T, cost: 1

	Propagated Equalities

	Original rule:
	l0 -> l1 : x^0'=x^post1, y^0'=y^post1, z^0'=z^post1, (0 == 0 /\ -y^post1+y^0 == 0 /\ y^0+x^post1-x^0 == 0), cost: 1
	New rule:
	l0 -> l1 : x^0'=-y^0+x^0, y^0'=y^0, z^0'=z^post1, 0 == 0, cost: 1
	
		propagated equality y^post1 = y^0
		
		propagated equality x^post1 = -y^0+x^0
		
	Simplified Guard

	Original rule:
	l0 -> l1 : x^0'=-y^0+x^0, y^0'=y^0, z^0'=z^post1, 0 == 0, cost: 1
	New rule:
	l0 -> l1 : x^0'=-y^0+x^0, y^0'=y^0, z^0'=z^post1, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l1 : x^0'=-y^0+x^0, y^0'=y^0, z^0'=z^post1, T, cost: 1
	New rule:
	l0 -> l1 : x^0'=-y^0+x^0, z^0'=z^post1, T, cost: 1
	
	Propagated Equalities

	Original rule:
	l1 -> l0 : x^0'=x^post4, y^0'=y^post4, z^0'=z^post4, (z^0-z^post4 == 0 /\ -x^post4+x^0 == 0 /\ 2-x^0 <= 0 /\ -y^post4+y^0 == 0), cost: 1
	New rule:
	l1 -> l0 : x^0'=x^0, y^0'=y^0, z^0'=z^0, (0 == 0 /\ 2-x^0 <= 0), cost: 1
	
		propagated equality z^post4 = z^0
		
		propagated equality x^post4 = x^0
		
		propagated equality y^post4 = y^0
		
	Simplified Guard

	Original rule:
	l1 -> l0 : x^0'=x^0, y^0'=y^0, z^0'=z^0, (0 == 0 /\ 2-x^0 <= 0), cost: 1
	New rule:
	l1 -> l0 : x^0'=x^0, y^0'=y^0, z^0'=z^0, 2-x^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l1 -> l0 : x^0'=x^0, y^0'=y^0, z^0'=z^0, 2-x^0 <= 0, cost: 1
	New rule:
	l1 -> l0 : 2-x^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l4 -> l1 : x^0'=x^post5, y^0'=y^post5, z^0'=z^post5, (y^post6-y^post5 == 0 /\ z^post6-z^post5 == 0 /\ x^post6-x^post5 == 0 /\ -x^post6+x^0 == 0 /\ -z^post6+z^0 == 0 /\ y^0-y^post6 == 0), cost: 1
	New rule:
	l4 -> l1 : x^0'=x^post6, y^0'=y^post6, z^0'=z^post6, (0 == 0 /\ -x^post6+x^0 == 0 /\ -z^post6+z^0 == 0 /\ y^0-y^post6 == 0), cost: 1
	
		propagated equality y^post5 = y^post6
		
		propagated equality z^post5 = z^post6
		
		propagated equality x^post5 = x^post6
		
	Propagated Equalities

	Original rule:
	l4 -> l1 : x^0'=x^post6, y^0'=y^post6, z^0'=z^post6, (0 == 0 /\ -x^post6+x^0 == 0 /\ -z^post6+z^0 == 0 /\ y^0-y^post6 == 0), cost: 1
	New rule:
	l4 -> l1 : x^0'=x^0, y^0'=y^0, z^0'=z^0, 0 == 0, cost: 1
	
		propagated equality x^post6 = x^0
		
		propagated equality z^post6 = z^0
		
		propagated equality y^post6 = y^0
		
	Simplified Guard

	Original rule:
	l4 -> l1 : x^0'=x^0, y^0'=y^0, z^0'=z^0, 0 == 0, cost: 1
	New rule:
	l4 -> l1 : x^0'=x^0, y^0'=y^0, z^0'=z^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l4 -> l1 : x^0'=x^0, y^0'=y^0, z^0'=z^0, T, cost: 1
	New rule:
	l4 -> l1 : T, cost: 1
	
	Propagated Equalities

	Original rule:
	l0 -> l0 : x^0'=x^post3, y^0'=y^post3, z^0'=z^post3, (2-z^0 <= 0 /\ y^post2-y^post3 == 0 /\ 1-z^0+z^post2 == 0 /\ z^post2-z^post3 == 0 /\ -1+y^post2-y^0 == 0 /\ -x^post2+x^0 == 0 /\ x^post2-x^post3 == 0), cost: 1
	New rule:
	l0 -> l0 : x^0'=x^post2, y^0'=y^post2, z^0'=z^post2, (0 == 0 /\ 2-z^0 <= 0 /\ 1-z^0+z^post2 == 0 /\ -1+y^post2-y^0 == 0 /\ -x^post2+x^0 == 0), cost: 1
	
		propagated equality y^post3 = y^post2
		
		propagated equality z^post3 = z^post2
		
		propagated equality x^post3 = x^post2
		
	Propagated Equalities

	Original rule:
	l0 -> l0 : x^0'=x^post2, y^0'=y^post2, z^0'=z^post2, (0 == 0 /\ 2-z^0 <= 0 /\ 1-z^0+z^post2 == 0 /\ -1+y^post2-y^0 == 0 /\ -x^post2+x^0 == 0), cost: 1
	New rule:
	l0 -> l0 : x^0'=x^0, y^0'=1+y^0, z^0'=-1+z^0, (0 == 0 /\ 2-z^0 <= 0), cost: 1
	
		propagated equality z^post2 = -1+z^0
		
		propagated equality y^post2 = 1+y^0
		
		propagated equality x^post2 = x^0
		
	Simplified Guard

	Original rule:
	l0 -> l0 : x^0'=x^0, y^0'=1+y^0, z^0'=-1+z^0, (0 == 0 /\ 2-z^0 <= 0), cost: 1
	New rule:
	l0 -> l0 : x^0'=x^0, y^0'=1+y^0, z^0'=-1+z^0, 2-z^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l0 : x^0'=x^0, y^0'=1+y^0, z^0'=-1+z^0, 2-z^0 <= 0, cost: 1
	New rule:
	l0 -> l0 : y^0'=1+y^0, z^0'=-1+z^0, 2-z^0 <= 0, cost: 1

Step with 10

	Trace

	10[T]
	
	Blocked

	[{}, {}]

Step with 9

	Trace

	10[T], 9[(2-x^0 <= 0)]
	
	Blocked

	[{}, {}, {}]

Step with 8

	Trace

	10[T], 9[(2-x^0 <= 0)], 8[T]
	
	Blocked

	[{}, {}, {}, {}]

Nonterm

Start location: l4
Program variables: x^0 y^0 z^0
   8: l0 -> l1 : x^0'=-y^0+x^0, z^0'=z^post1, T, cost: 1
  11: l0 -> l0 : y^0'=1+y^0, z^0'=-1+z^0, 2-z^0 <= 0, cost: 1
   9: l1 -> l0 : 2-x^0 <= 0, cost: 1
  12: l1 -> LoAT_sink : (-2+x^0 >= 0 /\ y^0 <= 0), cost: NONTERM
  13: l1 -> l1 : x^0'=-y^0*n+x^0, z^0'=z^post1, (-2+x^0 >= 0 /\ -2-y^0*(-1+n)+x^0 >= 0 /\ -1+n >= 0), cost: 1
  10: l4 -> l1 : T, cost: 1

	Certificate of Non-Termination

	Original rule:
	l1 -> l1 : x^0'=-y^0+x^0, z^0'=z^post1, 2-x^0 <= 0, cost: 1
	New rule:
	l1 -> LoAT_sink : (-2+x^0 >= 0 /\ y^0 <= 0), cost: NONTERM

		-2+x^0 >= 0 [0]: eventual decrease yields (-2+x^0 >= 0 /\ -2-y^0*(-1+n)+x^0 >= 0)
		
		-2+x^0 >= 0 [1]: eventual increase yields (-2+x^0 >= 0 /\ y^0 <= 0)
		
		Replacement map: {-2+x^0 >= 0 -> (-2+x^0 >= 0 /\ y^0 <= 0)}

	Loop Acceleration

	Original rule:
	l1 -> l1 : x^0'=-y^0+x^0, z^0'=z^post1, 2-x^0 <= 0, cost: 1
	New rule:
	l1 -> l1 : x^0'=-y^0*n+x^0, z^0'=z^post1, (-2+x^0 >= 0 /\ -2-y^0*(-1+n)+x^0 >= 0 /\ -1+n >= 0), cost: 1

		-2+x^0 >= 0 [0]: eventual decrease yields (-2+x^0 >= 0 /\ -2-y^0*(-1+n)+x^0 >= 0)
		
		-2+x^0 >= 0 [1]: eventual increase yields (-2+x^0 >= 0 /\ y^0 <= 0)
		
		Replacement map: {-2+x^0 >= 0 -> (-2+x^0 >= 0 /\ -2-y^0*(-1+n)+x^0 >= 0)}

Step with 12

	Trace

	10[T], 12[(-2+x^0 >= 0 /\ y^0 <= 0)]
	
	Blocked

	[{}, {}, {12[T]}]

Refute

	Counterexample

	[ x^0=2 y^0=0 z^0=0 ] 10 [ x^0=2 y^0=0 z^0=0 ] 12
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
