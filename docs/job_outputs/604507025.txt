unknown

Initial ITS

Start location: l18
Program variables: __const_100^0 i^0 j10^0 j6^0 j^0 ret_check12^0 ret_check8^0 tmp^0
   0: l0 -> l1 : __const_100^0'=__const_100^post1, i^0'=i^post1, j10^0'=j10^post1, j6^0'=j6^post1, j^0'=j^post1, ret_check12^0'=ret_check12^post1, ret_check8^0'=ret_check8^post1, tmp^0'=tmp^post1, (__const_100^0-i^0 <= 0 /\ -__const_100^post1+__const_100^0 == 0 /\ -tmp^post1+tmp^0 == 0 /\ ret_check12^0-ret_check12^post1 == 0 /\ -i^post1+i^0 == 0 /\ j6^0-j6^post1 == 0 /\ 2+j^post1-i^0 == 0 /\ ret_check8^0-ret_check8^post1 == 0 /\ j10^0-j10^post1 == 0), cost: 1
   1: l0 -> l2 : __const_100^0'=__const_100^post2, i^0'=i^post2, j10^0'=j10^post2, j6^0'=j6^post2, j^0'=j^post2, ret_check12^0'=ret_check12^post2, ret_check8^0'=ret_check8^post2, tmp^0'=tmp^post2, (-1+i^post2-i^0 == 0 /\ -j6^post2+j6^0 == 0 /\ ret_check12^0-ret_check12^post2 == 0 /\ 1-__const_100^0+i^0 <= 0 /\ -__const_100^post2+__const_100^0 == 0 /\ -tmp^post2+tmp^0 == 0 /\ j^0-j^post2 == 0 /\ ret_check8^0-ret_check8^post2 == 0 /\ -j10^post2+j10^0 == 0), cost: 1
  24: l1 -> l10 : __const_100^0'=__const_100^post25, i^0'=i^post25, j10^0'=j10^post25, j6^0'=j6^post25, j^0'=j^post25, ret_check12^0'=ret_check12^post25, ret_check8^0'=ret_check8^post25, tmp^0'=tmp^post25, (j10^0-j10^post25 == 0 /\ j^0-j^post25 == 0 /\ ret_check8^0-ret_check8^post25 == 0 /\ 1+i^0 <= 0 /\ __const_100^0-__const_100^post25 == 0 /\ -ret_check12^post25+ret_check12^0 == 0 /\ -j^0+j6^post25 == 0 /\ -i^post25+i^0 == 0 /\ tmp^0-tmp^post25 == 0), cost: 1
  25: l1 -> l4 : __const_100^0'=__const_100^post26, i^0'=i^post26, j10^0'=j10^post26, j6^0'=j6^post26, j^0'=j^post26, ret_check12^0'=ret_check12^post26, ret_check8^0'=ret_check8^post26, tmp^0'=tmp^post26, (-i^post26+i^0 == 0 /\ j10^0-j10^post26 == 0 /\ -tmp^post26+tmp^0 == 0 /\ ret_check12^0-ret_check12^post26 == 0 /\ -j^post26+j^0 == 0 /\ -__const_100^post26+__const_100^0 == 0 /\ -j6^post26+j6^0 == 0 /\ ret_check8^0-ret_check8^post26 == 0 /\ -i^0 <= 0), cost: 1
   3: l2 -> l0 : __const_100^0'=__const_100^post4, i^0'=i^post4, j10^0'=j10^post4, j6^0'=j6^post4, j^0'=j^post4, ret_check12^0'=ret_check12^post4, ret_check8^0'=ret_check8^post4, tmp^0'=tmp^post4, (-__const_100^post4+__const_100^0 == 0 /\ -i^post4+i^0 == 0 /\ j10^0-j10^post4 == 0 /\ ret_check12^0-ret_check12^post4 == 0 /\ -j6^post4+j6^0 == 0 /\ j^0-j^post4 == 0 /\ ret_check8^0-ret_check8^post4 == 0 /\ -tmp^post4+tmp^0 == 0), cost: 1
   2: l3 -> l4 : __const_100^0'=__const_100^post3, i^0'=i^post3, j10^0'=j10^post3, j6^0'=j6^post3, j^0'=j^post3, ret_check12^0'=ret_check12^post3, ret_check8^0'=ret_check8^post3, tmp^0'=tmp^post3, (j10^0-j10^post3 == 0 /\ ret_check8^0-ret_check8^post3 == 0 /\ -i^post3+i^0 == 0 /\ -ret_check12^post3+ret_check12^0 == 0 /\ __const_100^0-__const_100^post3 == 0 /\ -j^post3+j^0 == 0 /\ -tmp^post3+tmp^0 == 0 /\ -j6^post3+j6^0 == 0), cost: 1
   4: l5 -> l6 : __const_100^0'=__const_100^post5, i^0'=i^post5, j10^0'=j10^post5, j6^0'=j6^post5, j^0'=j^post5, ret_check12^0'=ret_check12^post5, ret_check8^0'=ret_check8^post5, tmp^0'=tmp^post5, (__const_100^0-__const_100^post5 == 0 /\ -i^post5+i^0 == 0 /\ -j^post5+j^0 == 0 /\ ret_check12^0-ret_check12^post5 == 0 /\ j6^0-j6^post5 == 0 /\ ret_check8^0-ret_check8^post5 == 0 /\ j10^0-j10^post5 == 0 /\ -tmp^post5+tmp^0 == 0), cost: 1
  18: l6 -> l9 : __const_100^0'=__const_100^post19, i^0'=i^post19, j10^0'=j10^post19, j6^0'=j6^post19, j^0'=j^post19, ret_check12^0'=ret_check12^post19, ret_check8^0'=ret_check8^post19, tmp^0'=tmp^post19, (ret_check12^0-ret_check12^post19 == 0 /\ -__const_100^post19+__const_100^0 == 0 /\ -tmp^post19+tmp^0 == 0 /\ j10^0-j10^post19 == 0 /\ ret_check8^0-ret_check8^post19 == 0 /\ -j6^post19+j6^0 == 0 /\ -i^post19+i^0 == 0 /\ j^0-j^post19 == 0), cost: 1
   5: l7 -> l5 : __const_100^0'=__const_100^post6, i^0'=i^post6, j10^0'=j10^post6, j6^0'=j6^post6, j^0'=j^post6, ret_check12^0'=ret_check12^post6, ret_check8^0'=ret_check8^post6, tmp^0'=tmp^post6, (-i^post6+i^0 == 0 /\ ret_check8^0-ret_check8^post6 == 0 /\ j^0-j^post6 == 0 /\ tmp^0-tmp^post6 == 0 /\ -j6^post6+j6^0 == 0 /\ -1+j10^post6-j10^0 == 0 /\ -ret_check12^post6+ret_check12^0 == 0 /\ -__const_100^post6+__const_100^0 == 0), cost: 1
   6: l8 -> l7 : __const_100^0'=__const_100^post7, i^0'=i^post7, j10^0'=j10^post7, j6^0'=j6^post7, j^0'=j^post7, ret_check12^0'=ret_check12^post7, ret_check8^0'=ret_check8^post7, tmp^0'=tmp^post7, (-j6^post7+j6^0 == 0 /\ j10^0-j10^post7 == 0 /\ j^0-j^post7 == 0 /\ -ret_check8^post7+ret_check8^0 == 0 /\ -__const_100^post7+__const_100^0 == 0 /\ -tmp^post7+tmp^0 == 0 /\ ret_check12^0-ret_check12^post7 == 0 /\ -i^post7+i^0 == 0), cost: 1
   7: l8 -> l5 : __const_100^0'=__const_100^post8, i^0'=i^post8, j10^0'=j10^post8, j6^0'=j6^post8, j^0'=j^post8, ret_check12^0'=ret_check12^post8, ret_check8^0'=ret_check8^post8, tmp^0'=tmp^post8, (j10^0-j10^post8 == 0 /\ ret_check8^0-ret_check8^post8 == 0 /\ i^0-i^post8 == 0 /\ __const_100^0-__const_100^post8 == 0 /\ -ret_check12^post8+ret_check12^0 == 0 /\ tmp^0-tmp^post8 == 0 /\ -j6^post8+j6^0 == 0 /\ -j^post8+j^0 == 0), cost: 1
   8: l8 -> l7 : __const_100^0'=__const_100^post9, i^0'=i^post9, j10^0'=j10^post9, j6^0'=j6^post9, j^0'=j^post9, ret_check12^0'=ret_check12^post9, ret_check8^0'=ret_check8^post9, tmp^0'=tmp^post9, (-tmp^post9+tmp^0 == 0 /\ ret_check8^0-ret_check8^post9 == 0 /\ ret_check12^0-ret_check12^post9 == 0 /\ -j6^post9+j6^0 == 0 /\ j^0-j^post9 == 0 /\ -__const_100^post9+__const_100^0 == 0 /\ j10^0-j10^post9 == 0 /\ -i^post9+i^0 == 0), cost: 1
   9: l9 -> l3 : __const_100^0'=__const_100^post10, i^0'=i^post10, j10^0'=j10^post10, j6^0'=j6^post10, j^0'=j^post10, ret_check12^0'=ret_check12^post10, ret_check8^0'=ret_check8^post10, tmp^0'=tmp^post10, (j10^0-j10^post10 == 0 /\ -j6^post10+j6^0 == 0 /\ -ret_check12^post10+j^post10 == 0 /\ -tmp^post10+tmp^0 == 0 /\ ret_check12^post10-j10^0 == 0 /\ __const_100^0-__const_100^post10 == 0 /\ ret_check8^0-ret_check8^post10 == 0 /\ -i^post10+i^0 == 0), cost: 1
  10: l9 -> l8 : __const_100^0'=__const_100^post11, i^0'=i^post11, j10^0'=j10^post11, j6^0'=j6^post11, j^0'=j^post11, ret_check12^0'=ret_check12^post11, ret_check8^0'=ret_check8^post11, tmp^0'=tmp^post11, (-__const_100^post11+__const_100^0 == 0 /\ -i^post11+i^0 == 0 /\ -j6^post11+j6^0 == 0 /\ -tmp^post11+tmp^0 == 0 /\ -j^post11+j^0 == 0 /\ ret_check8^0-ret_check8^post11 == 0 /\ j10^0-j10^post11 == 0 /\ ret_check12^0-ret_check12^post11 == 0), cost: 1
  11: l10 -> l11 : __const_100^0'=__const_100^post12, i^0'=i^post12, j10^0'=j10^post12, j6^0'=j6^post12, j^0'=j^post12, ret_check12^0'=ret_check12^post12, ret_check8^0'=ret_check8^post12, tmp^0'=tmp^post12, (j^0-j^post12 == 0 /\ -ret_check12^post12+ret_check12^0 == 0 /\ ret_check8^0-ret_check8^post12 == 0 /\ -__const_100^post12+__const_100^0 == 0 /\ -j6^post12+j6^0 == 0 /\ -i^post12+i^0 == 0 /\ -j10^post12+j10^0 == 0 /\ tmp^0-tmp^post12 == 0), cost: 1
  22: l11 -> l13 : __const_100^0'=__const_100^post23, i^0'=i^post23, j10^0'=j10^post23, j6^0'=j6^post23, j^0'=j^post23, ret_check12^0'=ret_check12^post23, ret_check8^0'=ret_check8^post23, tmp^0'=tmp^post23, (0 == 0 /\ -i^post23+i^0 == 0 /\ -ret_check12^post23+ret_check12^0 == 0 /\ j10^0-j10^post23 == 0 /\ -j6^post23+j6^0 == 0 /\ ret_check8^post23-j6^0 == 0 /\ -ret_check8^post23+j^post23 == 0 /\ -__const_100^post23+__const_100^0 == 0), cost: 1
  23: l11 -> l16 : __const_100^0'=__const_100^post24, i^0'=i^post24, j10^0'=j10^post24, j6^0'=j6^post24, j^0'=j^post24, ret_check12^0'=ret_check12^post24, ret_check8^0'=ret_check8^post24, tmp^0'=tmp^post24, (ret_check8^0-ret_check8^post24 == 0 /\ -__const_100^post24+__const_100^0 == 0 /\ ret_check12^0-ret_check12^post24 == 0 /\ -tmp^post24+tmp^0 == 0 /\ j^0-j^post24 == 0 /\ -i^post24+i^0 == 0 /\ -j6^post24+j6^0 == 0 /\ j10^0-j10^post24 == 0), cost: 1
  12: l12 -> l6 : __const_100^0'=__const_100^post13, i^0'=i^post13, j10^0'=j10^post13, j6^0'=j6^post13, j^0'=j^post13, ret_check12^0'=ret_check12^post13, ret_check8^0'=ret_check8^post13, tmp^0'=tmp^post13, (-j^0+j10^post13 == 0 /\ -ret_check8^post13+ret_check8^0 == 0 /\ -i^post13+i^0 == 0 /\ -j^post13+j^0 == 0 /\ -tmp^post13+tmp^0 == 0 /\ -j6^post13+j6^0 == 0 /\ ret_check12^0-ret_check12^post13 == 0 /\ -__const_100^post13+__const_100^0 == 0), cost: 1
  13: l13 -> l12 : __const_100^0'=__const_100^post14, i^0'=i^post14, j10^0'=j10^post14, j6^0'=j6^post14, j^0'=j^post14, ret_check12^0'=ret_check12^post14, ret_check8^0'=ret_check8^post14, tmp^0'=tmp^post14, (-__const_100^post14+__const_100^0 == 0 /\ -j^post14+j^0 == 0 /\ ret_check12^0-ret_check12^post14 == 0 /\ -i^post14+i^0 == 0 /\ ret_check8^0-ret_check8^post14 == 0 /\ -j6^post14+j6^0 == 0 /\ j10^0-j10^post14 == 0 /\ -tmp^post14+tmp^0 == 0), cost: 1
  14: l13 -> l3 : __const_100^0'=__const_100^post15, i^0'=i^post15, j10^0'=j10^post15, j6^0'=j6^post15, j^0'=j^post15, ret_check12^0'=ret_check12^post15, ret_check8^0'=ret_check8^post15, tmp^0'=tmp^post15, (-i^post15+i^0 == 0 /\ ret_check12^0-ret_check12^post15 == 0 /\ -j10^post15+j10^0 == 0 /\ j^0-j^post15 == 0 /\ ret_check8^0-ret_check8^post15 == 0 /\ -__const_100^post15+__const_100^0 == 0 /\ -tmp^post15+tmp^0 == 0 /\ -j6^post15+j6^0 == 0), cost: 1
  15: l13 -> l12 : __const_100^0'=__const_100^post16, i^0'=i^post16, j10^0'=j10^post16, j6^0'=j6^post16, j^0'=j^post16, ret_check12^0'=ret_check12^post16, ret_check8^0'=ret_check8^post16, tmp^0'=tmp^post16, (-i^post16+i^0 == 0 /\ __const_100^0-__const_100^post16 == 0 /\ -j^post16+j^0 == 0 /\ -tmp^post16+tmp^0 == 0 /\ ret_check8^0-ret_check8^post16 == 0 /\ j10^0-j10^post16 == 0 /\ ret_check12^0-ret_check12^post16 == 0 /\ -j6^post16+j6^0 == 0), cost: 1
  16: l14 -> l10 : __const_100^0'=__const_100^post17, i^0'=i^post17, j10^0'=j10^post17, j6^0'=j6^post17, j^0'=j^post17, ret_check12^0'=ret_check12^post17, ret_check8^0'=ret_check8^post17, tmp^0'=tmp^post17, (-tmp^post17+tmp^0 == 0 /\ -j10^post17+j10^0 == 0 /\ -j6^post17+j6^0 == 0 /\ ret_check8^0-ret_check8^post17 == 0 /\ -__const_100^post17+__const_100^0 == 0 /\ j^0-j^post17 == 0 /\ -ret_check12^post17+ret_check12^0 == 0 /\ -i^post17+i^0 == 0), cost: 1
  17: l15 -> l14 : __const_100^0'=__const_100^post18, i^0'=i^post18, j10^0'=j10^post18, j6^0'=j6^post18, j^0'=j^post18, ret_check12^0'=ret_check12^post18, ret_check8^0'=ret_check8^post18, tmp^0'=tmp^post18, (__const_100^0-__const_100^post18 == 0 /\ ret_check8^0-ret_check8^post18 == 0 /\ -ret_check12^post18+ret_check12^0 == 0 /\ -1-j6^0+j6^post18 == 0 /\ j10^0-j10^post18 == 0 /\ -j^post18+j^0 == 0 /\ -tmp^post18+tmp^0 == 0 /\ -i^post18+i^0 == 0), cost: 1
  19: l16 -> l15 : __const_100^0'=__const_100^post20, i^0'=i^post20, j10^0'=j10^post20, j6^0'=j6^post20, j^0'=j^post20, ret_check12^0'=ret_check12^post20, ret_check8^0'=ret_check8^post20, tmp^0'=tmp^post20, (-ret_check12^post20+ret_check12^0 == 0 /\ -j6^post20+j6^0 == 0 /\ __const_100^0-__const_100^post20 == 0 /\ j10^0-j10^post20 == 0 /\ -j^post20+j^0 == 0 /\ -tmp^post20+tmp^0 == 0 /\ ret_check8^0-ret_check8^post20 == 0 /\ -i^post20+i^0 == 0), cost: 1
  20: l16 -> l14 : __const_100^0'=__const_100^post21, i^0'=i^post21, j10^0'=j10^post21, j6^0'=j6^post21, j^0'=j^post21, ret_check12^0'=ret_check12^post21, ret_check8^0'=ret_check8^post21, tmp^0'=tmp^post21, (-__const_100^post21+__const_100^0 == 0 /\ j10^0-j10^post21 == 0 /\ ret_check8^0-ret_check8^post21 == 0 /\ -i^post21+i^0 == 0 /\ ret_check12^0-ret_check12^post21 == 0 /\ -tmp^post21+tmp^0 == 0 /\ -j6^post21+j6^0 == 0 /\ j^0-j^post21 == 0), cost: 1
  21: l16 -> l15 : __const_100^0'=__const_100^post22, i^0'=i^post22, j10^0'=j10^post22, j6^0'=j6^post22, j^0'=j^post22, ret_check12^0'=ret_check12^post22, ret_check8^0'=ret_check8^post22, tmp^0'=tmp^post22, (-ret_check8^post22+ret_check8^0 == 0 /\ -i^post22+i^0 == 0 /\ j10^0-j10^post22 == 0 /\ -j^post22+j^0 == 0 /\ __const_100^0-__const_100^post22 == 0 /\ -j6^post22+j6^0 == 0 /\ ret_check12^0-ret_check12^post22 == 0 /\ -tmp^post22+tmp^0 == 0), cost: 1
  26: l17 -> l2 : __const_100^0'=__const_100^post27, i^0'=i^post27, j10^0'=j10^post27, j6^0'=j6^post27, j^0'=j^post27, ret_check12^0'=ret_check12^post27, ret_check8^0'=ret_check8^post27, tmp^0'=tmp^post27, (j^0-j^post27 == 0 /\ -j6^post27+j6^0 == 0 /\ -__const_100^post27+__const_100^0 == 0 /\ -tmp^post27+tmp^0 == 0 /\ -ret_check12^post27+ret_check12^0 == 0 /\ -j10^post27+j10^0 == 0 /\ i^post27 == 0 /\ ret_check8^0-ret_check8^post27 == 0), cost: 1
  27: l18 -> l17 : __const_100^0'=__const_100^post28, i^0'=i^post28, j10^0'=j10^post28, j6^0'=j6^post28, j^0'=j^post28, ret_check12^0'=ret_check12^post28, ret_check8^0'=ret_check8^post28, tmp^0'=tmp^post28, (-__const_100^post28+__const_100^0 == 0 /\ -i^post28+i^0 == 0 /\ -tmp^post28+tmp^0 == 0 /\ -j^post28+j^0 == 0 /\ ret_check8^0-ret_check8^post28 == 0 /\ j6^0-j6^post28 == 0 /\ j10^0-j10^post28 == 0 /\ ret_check12^0-ret_check12^post28 == 0), cost: 1

Chained Linear Paths

Start location: l18
Program variables: __const_100^0 i^0 j10^0 j6^0 j^0 ret_check12^0 ret_check8^0 tmp^0
   0: l0 -> l1 : __const_100^0'=__const_100^post1, i^0'=i^post1, j10^0'=j10^post1, j6^0'=j6^post1, j^0'=j^post1, ret_check12^0'=ret_check12^post1, ret_check8^0'=ret_check8^post1, tmp^0'=tmp^post1, (__const_100^0-i^0 <= 0 /\ -__const_100^post1+__const_100^0 == 0 /\ -tmp^post1+tmp^0 == 0 /\ ret_check12^0-ret_check12^post1 == 0 /\ -i^post1+i^0 == 0 /\ j6^0-j6^post1 == 0 /\ 2+j^post1-i^0 == 0 /\ ret_check8^0-ret_check8^post1 == 0 /\ j10^0-j10^post1 == 0), cost: 1
   1: l0 -> l2 : __const_100^0'=__const_100^post2, i^0'=i^post2, j10^0'=j10^post2, j6^0'=j6^post2, j^0'=j^post2, ret_check12^0'=ret_check12^post2, ret_check8^0'=ret_check8^post2, tmp^0'=tmp^post2, (-1+i^post2-i^0 == 0 /\ -j6^post2+j6^0 == 0 /\ ret_check12^0-ret_check12^post2 == 0 /\ 1-__const_100^0+i^0 <= 0 /\ -__const_100^post2+__const_100^0 == 0 /\ -tmp^post2+tmp^0 == 0 /\ j^0-j^post2 == 0 /\ ret_check8^0-ret_check8^post2 == 0 /\ -j10^post2+j10^0 == 0), cost: 1
  24: l1 -> l10 : __const_100^0'=__const_100^post25, i^0'=i^post25, j10^0'=j10^post25, j6^0'=j6^post25, j^0'=j^post25, ret_check12^0'=ret_check12^post25, ret_check8^0'=ret_check8^post25, tmp^0'=tmp^post25, (j10^0-j10^post25 == 0 /\ j^0-j^post25 == 0 /\ ret_check8^0-ret_check8^post25 == 0 /\ 1+i^0 <= 0 /\ __const_100^0-__const_100^post25 == 0 /\ -ret_check12^post25+ret_check12^0 == 0 /\ -j^0+j6^post25 == 0 /\ -i^post25+i^0 == 0 /\ tmp^0-tmp^post25 == 0), cost: 1
  25: l1 -> l4 : __const_100^0'=__const_100^post26, i^0'=i^post26, j10^0'=j10^post26, j6^0'=j6^post26, j^0'=j^post26, ret_check12^0'=ret_check12^post26, ret_check8^0'=ret_check8^post26, tmp^0'=tmp^post26, (-i^post26+i^0 == 0 /\ j10^0-j10^post26 == 0 /\ -tmp^post26+tmp^0 == 0 /\ ret_check12^0-ret_check12^post26 == 0 /\ -j^post26+j^0 == 0 /\ -__const_100^post26+__const_100^0 == 0 /\ -j6^post26+j6^0 == 0 /\ ret_check8^0-ret_check8^post26 == 0 /\ -i^0 <= 0), cost: 1
   3: l2 -> l0 : __const_100^0'=__const_100^post4, i^0'=i^post4, j10^0'=j10^post4, j6^0'=j6^post4, j^0'=j^post4, ret_check12^0'=ret_check12^post4, ret_check8^0'=ret_check8^post4, tmp^0'=tmp^post4, (-__const_100^post4+__const_100^0 == 0 /\ -i^post4+i^0 == 0 /\ j10^0-j10^post4 == 0 /\ ret_check12^0-ret_check12^post4 == 0 /\ -j6^post4+j6^0 == 0 /\ j^0-j^post4 == 0 /\ ret_check8^0-ret_check8^post4 == 0 /\ -tmp^post4+tmp^0 == 0), cost: 1
   2: l3 -> l4 : __const_100^0'=__const_100^post3, i^0'=i^post3, j10^0'=j10^post3, j6^0'=j6^post3, j^0'=j^post3, ret_check12^0'=ret_check12^post3, ret_check8^0'=ret_check8^post3, tmp^0'=tmp^post3, (j10^0-j10^post3 == 0 /\ ret_check8^0-ret_check8^post3 == 0 /\ -i^post3+i^0 == 0 /\ -ret_check12^post3+ret_check12^0 == 0 /\ __const_100^0-__const_100^post3 == 0 /\ -j^post3+j^0 == 0 /\ -tmp^post3+tmp^0 == 0 /\ -j6^post3+j6^0 == 0), cost: 1
   4: l5 -> l6 : __const_100^0'=__const_100^post5, i^0'=i^post5, j10^0'=j10^post5, j6^0'=j6^post5, j^0'=j^post5, ret_check12^0'=ret_check12^post5, ret_check8^0'=ret_check8^post5, tmp^0'=tmp^post5, (__const_100^0-__const_100^post5 == 0 /\ -i^post5+i^0 == 0 /\ -j^post5+j^0 == 0 /\ ret_check12^0-ret_check12^post5 == 0 /\ j6^0-j6^post5 == 0 /\ ret_check8^0-ret_check8^post5 == 0 /\ j10^0-j10^post5 == 0 /\ -tmp^post5+tmp^0 == 0), cost: 1
  18: l6 -> l9 : __const_100^0'=__const_100^post19, i^0'=i^post19, j10^0'=j10^post19, j6^0'=j6^post19, j^0'=j^post19, ret_check12^0'=ret_check12^post19, ret_check8^0'=ret_check8^post19, tmp^0'=tmp^post19, (ret_check12^0-ret_check12^post19 == 0 /\ -__const_100^post19+__const_100^0 == 0 /\ -tmp^post19+tmp^0 == 0 /\ j10^0-j10^post19 == 0 /\ ret_check8^0-ret_check8^post19 == 0 /\ -j6^post19+j6^0 == 0 /\ -i^post19+i^0 == 0 /\ j^0-j^post19 == 0), cost: 1
   5: l7 -> l5 : __const_100^0'=__const_100^post6, i^0'=i^post6, j10^0'=j10^post6, j6^0'=j6^post6, j^0'=j^post6, ret_check12^0'=ret_check12^post6, ret_check8^0'=ret_check8^post6, tmp^0'=tmp^post6, (-i^post6+i^0 == 0 /\ ret_check8^0-ret_check8^post6 == 0 /\ j^0-j^post6 == 0 /\ tmp^0-tmp^post6 == 0 /\ -j6^post6+j6^0 == 0 /\ -1+j10^post6-j10^0 == 0 /\ -ret_check12^post6+ret_check12^0 == 0 /\ -__const_100^post6+__const_100^0 == 0), cost: 1
   6: l8 -> l7 : __const_100^0'=__const_100^post7, i^0'=i^post7, j10^0'=j10^post7, j6^0'=j6^post7, j^0'=j^post7, ret_check12^0'=ret_check12^post7, ret_check8^0'=ret_check8^post7, tmp^0'=tmp^post7, (-j6^post7+j6^0 == 0 /\ j10^0-j10^post7 == 0 /\ j^0-j^post7 == 0 /\ -ret_check8^post7+ret_check8^0 == 0 /\ -__const_100^post7+__const_100^0 == 0 /\ -tmp^post7+tmp^0 == 0 /\ ret_check12^0-ret_check12^post7 == 0 /\ -i^post7+i^0 == 0), cost: 1
   7: l8 -> l5 : __const_100^0'=__const_100^post8, i^0'=i^post8, j10^0'=j10^post8, j6^0'=j6^post8, j^0'=j^post8, ret_check12^0'=ret_check12^post8, ret_check8^0'=ret_check8^post8, tmp^0'=tmp^post8, (j10^0-j10^post8 == 0 /\ ret_check8^0-ret_check8^post8 == 0 /\ i^0-i^post8 == 0 /\ __const_100^0-__const_100^post8 == 0 /\ -ret_check12^post8+ret_check12^0 == 0 /\ tmp^0-tmp^post8 == 0 /\ -j6^post8+j6^0 == 0 /\ -j^post8+j^0 == 0), cost: 1
   8: l8 -> l7 : __const_100^0'=__const_100^post9, i^0'=i^post9, j10^0'=j10^post9, j6^0'=j6^post9, j^0'=j^post9, ret_check12^0'=ret_check12^post9, ret_check8^0'=ret_check8^post9, tmp^0'=tmp^post9, (-tmp^post9+tmp^0 == 0 /\ ret_check8^0-ret_check8^post9 == 0 /\ ret_check12^0-ret_check12^post9 == 0 /\ -j6^post9+j6^0 == 0 /\ j^0-j^post9 == 0 /\ -__const_100^post9+__const_100^0 == 0 /\ j10^0-j10^post9 == 0 /\ -i^post9+i^0 == 0), cost: 1
   9: l9 -> l3 : __const_100^0'=__const_100^post10, i^0'=i^post10, j10^0'=j10^post10, j6^0'=j6^post10, j^0'=j^post10, ret_check12^0'=ret_check12^post10, ret_check8^0'=ret_check8^post10, tmp^0'=tmp^post10, (j10^0-j10^post10 == 0 /\ -j6^post10+j6^0 == 0 /\ -ret_check12^post10+j^post10 == 0 /\ -tmp^post10+tmp^0 == 0 /\ ret_check12^post10-j10^0 == 0 /\ __const_100^0-__const_100^post10 == 0 /\ ret_check8^0-ret_check8^post10 == 0 /\ -i^post10+i^0 == 0), cost: 1
  10: l9 -> l8 : __const_100^0'=__const_100^post11, i^0'=i^post11, j10^0'=j10^post11, j6^0'=j6^post11, j^0'=j^post11, ret_check12^0'=ret_check12^post11, ret_check8^0'=ret_check8^post11, tmp^0'=tmp^post11, (-__const_100^post11+__const_100^0 == 0 /\ -i^post11+i^0 == 0 /\ -j6^post11+j6^0 == 0 /\ -tmp^post11+tmp^0 == 0 /\ -j^post11+j^0 == 0 /\ ret_check8^0-ret_check8^post11 == 0 /\ j10^0-j10^post11 == 0 /\ ret_check12^0-ret_check12^post11 == 0), cost: 1
  11: l10 -> l11 : __const_100^0'=__const_100^post12, i^0'=i^post12, j10^0'=j10^post12, j6^0'=j6^post12, j^0'=j^post12, ret_check12^0'=ret_check12^post12, ret_check8^0'=ret_check8^post12, tmp^0'=tmp^post12, (j^0-j^post12 == 0 /\ -ret_check12^post12+ret_check12^0 == 0 /\ ret_check8^0-ret_check8^post12 == 0 /\ -__const_100^post12+__const_100^0 == 0 /\ -j6^post12+j6^0 == 0 /\ -i^post12+i^0 == 0 /\ -j10^post12+j10^0 == 0 /\ tmp^0-tmp^post12 == 0), cost: 1
  22: l11 -> l13 : __const_100^0'=__const_100^post23, i^0'=i^post23, j10^0'=j10^post23, j6^0'=j6^post23, j^0'=j^post23, ret_check12^0'=ret_check12^post23, ret_check8^0'=ret_check8^post23, tmp^0'=tmp^post23, (0 == 0 /\ -i^post23+i^0 == 0 /\ -ret_check12^post23+ret_check12^0 == 0 /\ j10^0-j10^post23 == 0 /\ -j6^post23+j6^0 == 0 /\ ret_check8^post23-j6^0 == 0 /\ -ret_check8^post23+j^post23 == 0 /\ -__const_100^post23+__const_100^0 == 0), cost: 1
  23: l11 -> l16 : __const_100^0'=__const_100^post24, i^0'=i^post24, j10^0'=j10^post24, j6^0'=j6^post24, j^0'=j^post24, ret_check12^0'=ret_check12^post24, ret_check8^0'=ret_check8^post24, tmp^0'=tmp^post24, (ret_check8^0-ret_check8^post24 == 0 /\ -__const_100^post24+__const_100^0 == 0 /\ ret_check12^0-ret_check12^post24 == 0 /\ -tmp^post24+tmp^0 == 0 /\ j^0-j^post24 == 0 /\ -i^post24+i^0 == 0 /\ -j6^post24+j6^0 == 0 /\ j10^0-j10^post24 == 0), cost: 1
  12: l12 -> l6 : __const_100^0'=__const_100^post13, i^0'=i^post13, j10^0'=j10^post13, j6^0'=j6^post13, j^0'=j^post13, ret_check12^0'=ret_check12^post13, ret_check8^0'=ret_check8^post13, tmp^0'=tmp^post13, (-j^0+j10^post13 == 0 /\ -ret_check8^post13+ret_check8^0 == 0 /\ -i^post13+i^0 == 0 /\ -j^post13+j^0 == 0 /\ -tmp^post13+tmp^0 == 0 /\ -j6^post13+j6^0 == 0 /\ ret_check12^0-ret_check12^post13 == 0 /\ -__const_100^post13+__const_100^0 == 0), cost: 1
  13: l13 -> l12 : __const_100^0'=__const_100^post14, i^0'=i^post14, j10^0'=j10^post14, j6^0'=j6^post14, j^0'=j^post14, ret_check12^0'=ret_check12^post14, ret_check8^0'=ret_check8^post14, tmp^0'=tmp^post14, (-__const_100^post14+__const_100^0 == 0 /\ -j^post14+j^0 == 0 /\ ret_check12^0-ret_check12^post14 == 0 /\ -i^post14+i^0 == 0 /\ ret_check8^0-ret_check8^post14 == 0 /\ -j6^post14+j6^0 == 0 /\ j10^0-j10^post14 == 0 /\ -tmp^post14+tmp^0 == 0), cost: 1
  14: l13 -> l3 : __const_100^0'=__const_100^post15, i^0'=i^post15, j10^0'=j10^post15, j6^0'=j6^post15, j^0'=j^post15, ret_check12^0'=ret_check12^post15, ret_check8^0'=ret_check8^post15, tmp^0'=tmp^post15, (-i^post15+i^0 == 0 /\ ret_check12^0-ret_check12^post15 == 0 /\ -j10^post15+j10^0 == 0 /\ j^0-j^post15 == 0 /\ ret_check8^0-ret_check8^post15 == 0 /\ -__const_100^post15+__const_100^0 == 0 /\ -tmp^post15+tmp^0 == 0 /\ -j6^post15+j6^0 == 0), cost: 1
  15: l13 -> l12 : __const_100^0'=__const_100^post16, i^0'=i^post16, j10^0'=j10^post16, j6^0'=j6^post16, j^0'=j^post16, ret_check12^0'=ret_check12^post16, ret_check8^0'=ret_check8^post16, tmp^0'=tmp^post16, (-i^post16+i^0 == 0 /\ __const_100^0-__const_100^post16 == 0 /\ -j^post16+j^0 == 0 /\ -tmp^post16+tmp^0 == 0 /\ ret_check8^0-ret_check8^post16 == 0 /\ j10^0-j10^post16 == 0 /\ ret_check12^0-ret_check12^post16 == 0 /\ -j6^post16+j6^0 == 0), cost: 1
  16: l14 -> l10 : __const_100^0'=__const_100^post17, i^0'=i^post17, j10^0'=j10^post17, j6^0'=j6^post17, j^0'=j^post17, ret_check12^0'=ret_check12^post17, ret_check8^0'=ret_check8^post17, tmp^0'=tmp^post17, (-tmp^post17+tmp^0 == 0 /\ -j10^post17+j10^0 == 0 /\ -j6^post17+j6^0 == 0 /\ ret_check8^0-ret_check8^post17 == 0 /\ -__const_100^post17+__const_100^0 == 0 /\ j^0-j^post17 == 0 /\ -ret_check12^post17+ret_check12^0 == 0 /\ -i^post17+i^0 == 0), cost: 1
  17: l15 -> l14 : __const_100^0'=__const_100^post18, i^0'=i^post18, j10^0'=j10^post18, j6^0'=j6^post18, j^0'=j^post18, ret_check12^0'=ret_check12^post18, ret_check8^0'=ret_check8^post18, tmp^0'=tmp^post18, (__const_100^0-__const_100^post18 == 0 /\ ret_check8^0-ret_check8^post18 == 0 /\ -ret_check12^post18+ret_check12^0 == 0 /\ -1-j6^0+j6^post18 == 0 /\ j10^0-j10^post18 == 0 /\ -j^post18+j^0 == 0 /\ -tmp^post18+tmp^0 == 0 /\ -i^post18+i^0 == 0), cost: 1
  19: l16 -> l15 : __const_100^0'=__const_100^post20, i^0'=i^post20, j10^0'=j10^post20, j6^0'=j6^post20, j^0'=j^post20, ret_check12^0'=ret_check12^post20, ret_check8^0'=ret_check8^post20, tmp^0'=tmp^post20, (-ret_check12^post20+ret_check12^0 == 0 /\ -j6^post20+j6^0 == 0 /\ __const_100^0-__const_100^post20 == 0 /\ j10^0-j10^post20 == 0 /\ -j^post20+j^0 == 0 /\ -tmp^post20+tmp^0 == 0 /\ ret_check8^0-ret_check8^post20 == 0 /\ -i^post20+i^0 == 0), cost: 1
  20: l16 -> l14 : __const_100^0'=__const_100^post21, i^0'=i^post21, j10^0'=j10^post21, j6^0'=j6^post21, j^0'=j^post21, ret_check12^0'=ret_check12^post21, ret_check8^0'=ret_check8^post21, tmp^0'=tmp^post21, (-__const_100^post21+__const_100^0 == 0 /\ j10^0-j10^post21 == 0 /\ ret_check8^0-ret_check8^post21 == 0 /\ -i^post21+i^0 == 0 /\ ret_check12^0-ret_check12^post21 == 0 /\ -tmp^post21+tmp^0 == 0 /\ -j6^post21+j6^0 == 0 /\ j^0-j^post21 == 0), cost: 1
  21: l16 -> l15 : __const_100^0'=__const_100^post22, i^0'=i^post22, j10^0'=j10^post22, j6^0'=j6^post22, j^0'=j^post22, ret_check12^0'=ret_check12^post22, ret_check8^0'=ret_check8^post22, tmp^0'=tmp^post22, (-ret_check8^post22+ret_check8^0 == 0 /\ -i^post22+i^0 == 0 /\ j10^0-j10^post22 == 0 /\ -j^post22+j^0 == 0 /\ __const_100^0-__const_100^post22 == 0 /\ -j6^post22+j6^0 == 0 /\ ret_check12^0-ret_check12^post22 == 0 /\ -tmp^post22+tmp^0 == 0), cost: 1
  28: l18 -> l2 : __const_100^0'=__const_100^post27, i^0'=i^post27, j10^0'=j10^post27, j6^0'=j6^post27, j^0'=j^post27, ret_check12^0'=ret_check12^post27, ret_check8^0'=ret_check8^post27, tmp^0'=tmp^post27, (tmp^post28-tmp^post27 == 0 /\ -j6^post27+j6^post28 == 0 /\ -ret_check12^post27+ret_check12^post28 == 0 /\ -ret_check8^post27+ret_check8^post28 == 0 /\ -__const_100^post28+__const_100^0 == 0 /\ __const_100^post28-__const_100^post27 == 0 /\ j^post28-j^post27 == 0 /\ -i^post28+i^0 == 0 /\ -tmp^post28+tmp^0 == 0 /\ -j^post28+j^0 == 0 /\ i^post27 == 0 /\ ret_check8^0-ret_check8^post28 == 0 /\ j6^0-j6^post28 == 0 /\ -j10^post27+j10^post28 == 0 /\ j10^0-j10^post28 == 0 /\ ret_check12^0-ret_check12^post28 == 0), cost: 1

	Eliminating location l17 by chaining:

	Applied chaining

	First rule:
	l18 -> l17 : __const_100^0'=__const_100^post28, i^0'=i^post28, j10^0'=j10^post28, j6^0'=j6^post28, j^0'=j^post28, ret_check12^0'=ret_check12^post28, ret_check8^0'=ret_check8^post28, tmp^0'=tmp^post28, (-__const_100^post28+__const_100^0 == 0 /\ -i^post28+i^0 == 0 /\ -tmp^post28+tmp^0 == 0 /\ -j^post28+j^0 == 0 /\ ret_check8^0-ret_check8^post28 == 0 /\ j6^0-j6^post28 == 0 /\ j10^0-j10^post28 == 0 /\ ret_check12^0-ret_check12^post28 == 0), cost: 1
	Second rule:
	l17 -> l2 : __const_100^0'=__const_100^post27, i^0'=i^post27, j10^0'=j10^post27, j6^0'=j6^post27, j^0'=j^post27, ret_check12^0'=ret_check12^post27, ret_check8^0'=ret_check8^post27, tmp^0'=tmp^post27, (j^0-j^post27 == 0 /\ -j6^post27+j6^0 == 0 /\ -__const_100^post27+__const_100^0 == 0 /\ -tmp^post27+tmp^0 == 0 /\ -ret_check12^post27+ret_check12^0 == 0 /\ -j10^post27+j10^0 == 0 /\ i^post27 == 0 /\ ret_check8^0-ret_check8^post27 == 0), cost: 1
	New rule:
	l18 -> l2 : __const_100^0'=__const_100^post27, i^0'=i^post27, j10^0'=j10^post27, j6^0'=j6^post27, j^0'=j^post27, ret_check12^0'=ret_check12^post27, ret_check8^0'=ret_check8^post27, tmp^0'=tmp^post27, (tmp^post28-tmp^post27 == 0 /\ -j6^post27+j6^post28 == 0 /\ -ret_check12^post27+ret_check12^post28 == 0 /\ -ret_check8^post27+ret_check8^post28 == 0 /\ -__const_100^post28+__const_100^0 == 0 /\ __const_100^post28-__const_100^post27 == 0 /\ j^post28-j^post27 == 0 /\ -i^post28+i^0 == 0 /\ -tmp^post28+tmp^0 == 0 /\ -j^post28+j^0 == 0 /\ i^post27 == 0 /\ ret_check8^0-ret_check8^post28 == 0 /\ j6^0-j6^post28 == 0 /\ -j10^post27+j10^post28 == 0 /\ j10^0-j10^post28 == 0 /\ ret_check12^0-ret_check12^post28 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 26 27

Simplified Transitions

Start location: l18
Program variables: __const_100^0 i^0 j10^0 j6^0 j^0 ret_check12^0 ret_check8^0 tmp^0
  29: l0 -> l1 : j^0'=-2+i^0, __const_100^0-i^0 <= 0, cost: 1
  30: l0 -> l2 : i^0'=1+i^0, 1-__const_100^0+i^0 <= 0, cost: 1
  53: l1 -> l10 : j6^0'=j^0, 1+i^0 <= 0, cost: 1
  54: l1 -> l4 : -i^0 <= 0, cost: 1
  32: l2 -> l0 : T, cost: 1
  31: l3 -> l4 : T, cost: 1
  33: l5 -> l6 : T, cost: 1
  47: l6 -> l9 : T, cost: 1
  34: l7 -> l5 : j10^0'=1+j10^0, T, cost: 1
  35: l8 -> l7 : T, cost: 1
  36: l8 -> l5 : T, cost: 1
  37: l8 -> l7 : T, cost: 1
  38: l9 -> l3 : j^0'=j10^0, ret_check12^0'=j10^0, T, cost: 1
  39: l9 -> l8 : T, cost: 1
  40: l10 -> l11 : T, cost: 1
  51: l11 -> l13 : j^0'=j6^0, ret_check8^0'=j6^0, tmp^0'=tmp^post23, T, cost: 1
  52: l11 -> l16 : T, cost: 1
  41: l12 -> l6 : j10^0'=j^0, T, cost: 1
  42: l13 -> l12 : T, cost: 1
  43: l13 -> l3 : T, cost: 1
  44: l13 -> l12 : T, cost: 1
  45: l14 -> l10 : T, cost: 1
  46: l15 -> l14 : j6^0'=1+j6^0, T, cost: 1
  48: l16 -> l15 : T, cost: 1
  49: l16 -> l14 : T, cost: 1
  50: l16 -> l15 : T, cost: 1
  55: l18 -> l2 : i^0'=0, T, cost: 1

	Propagated Equalities

	Original rule:
	l0 -> l1 : __const_100^0'=__const_100^post1, i^0'=i^post1, j10^0'=j10^post1, j6^0'=j6^post1, j^0'=j^post1, ret_check12^0'=ret_check12^post1, ret_check8^0'=ret_check8^post1, tmp^0'=tmp^post1, (__const_100^0-i^0 <= 0 /\ -__const_100^post1+__const_100^0 == 0 /\ -tmp^post1+tmp^0 == 0 /\ ret_check12^0-ret_check12^post1 == 0 /\ -i^post1+i^0 == 0 /\ j6^0-j6^post1 == 0 /\ 2+j^post1-i^0 == 0 /\ ret_check8^0-ret_check8^post1 == 0 /\ j10^0-j10^post1 == 0), cost: 1
	New rule:
	l0 -> l1 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=-2+i^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, (0 == 0 /\ __const_100^0-i^0 <= 0), cost: 1
	
		propagated equality __const_100^post1 = __const_100^0
		
		propagated equality tmp^post1 = tmp^0
		
		propagated equality ret_check12^post1 = ret_check12^0
		
		propagated equality i^post1 = i^0
		
		propagated equality j6^post1 = j6^0
		
		propagated equality j^post1 = -2+i^0
		
		propagated equality ret_check8^post1 = ret_check8^0
		
		propagated equality j10^post1 = j10^0
		
	Simplified Guard

	Original rule:
	l0 -> l1 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=-2+i^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, (0 == 0 /\ __const_100^0-i^0 <= 0), cost: 1
	New rule:
	l0 -> l1 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=-2+i^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, __const_100^0-i^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l1 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=-2+i^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, __const_100^0-i^0 <= 0, cost: 1
	New rule:
	l0 -> l1 : j^0'=-2+i^0, __const_100^0-i^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l0 -> l2 : __const_100^0'=__const_100^post2, i^0'=i^post2, j10^0'=j10^post2, j6^0'=j6^post2, j^0'=j^post2, ret_check12^0'=ret_check12^post2, ret_check8^0'=ret_check8^post2, tmp^0'=tmp^post2, (-1+i^post2-i^0 == 0 /\ -j6^post2+j6^0 == 0 /\ ret_check12^0-ret_check12^post2 == 0 /\ 1-__const_100^0+i^0 <= 0 /\ -__const_100^post2+__const_100^0 == 0 /\ -tmp^post2+tmp^0 == 0 /\ j^0-j^post2 == 0 /\ ret_check8^0-ret_check8^post2 == 0 /\ -j10^post2+j10^0 == 0), cost: 1
	New rule:
	l0 -> l2 : __const_100^0'=__const_100^0, i^0'=1+i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, (0 == 0 /\ 1-__const_100^0+i^0 <= 0), cost: 1
	
		propagated equality i^post2 = 1+i^0
		
		propagated equality j6^post2 = j6^0
		
		propagated equality ret_check12^post2 = ret_check12^0
		
		propagated equality __const_100^post2 = __const_100^0
		
		propagated equality tmp^post2 = tmp^0
		
		propagated equality j^post2 = j^0
		
		propagated equality ret_check8^post2 = ret_check8^0
		
		propagated equality j10^post2 = j10^0
		
	Simplified Guard

	Original rule:
	l0 -> l2 : __const_100^0'=__const_100^0, i^0'=1+i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, (0 == 0 /\ 1-__const_100^0+i^0 <= 0), cost: 1
	New rule:
	l0 -> l2 : __const_100^0'=__const_100^0, i^0'=1+i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 1-__const_100^0+i^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l2 : __const_100^0'=__const_100^0, i^0'=1+i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 1-__const_100^0+i^0 <= 0, cost: 1
	New rule:
	l0 -> l2 : i^0'=1+i^0, 1-__const_100^0+i^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l3 -> l4 : __const_100^0'=__const_100^post3, i^0'=i^post3, j10^0'=j10^post3, j6^0'=j6^post3, j^0'=j^post3, ret_check12^0'=ret_check12^post3, ret_check8^0'=ret_check8^post3, tmp^0'=tmp^post3, (j10^0-j10^post3 == 0 /\ ret_check8^0-ret_check8^post3 == 0 /\ -i^post3+i^0 == 0 /\ -ret_check12^post3+ret_check12^0 == 0 /\ __const_100^0-__const_100^post3 == 0 /\ -j^post3+j^0 == 0 /\ -tmp^post3+tmp^0 == 0 /\ -j6^post3+j6^0 == 0), cost: 1
	New rule:
	l3 -> l4 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	
		propagated equality j10^post3 = j10^0
		
		propagated equality ret_check8^post3 = ret_check8^0
		
		propagated equality i^post3 = i^0
		
		propagated equality ret_check12^post3 = ret_check12^0
		
		propagated equality __const_100^post3 = __const_100^0
		
		propagated equality j^post3 = j^0
		
		propagated equality tmp^post3 = tmp^0
		
		propagated equality j6^post3 = j6^0
		
	Simplified Guard

	Original rule:
	l3 -> l4 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	New rule:
	l3 -> l4 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l3 -> l4 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, T, cost: 1
	New rule:
	l3 -> l4 : T, cost: 1
	
	Propagated Equalities

	Original rule:
	l2 -> l0 : __const_100^0'=__const_100^post4, i^0'=i^post4, j10^0'=j10^post4, j6^0'=j6^post4, j^0'=j^post4, ret_check12^0'=ret_check12^post4, ret_check8^0'=ret_check8^post4, tmp^0'=tmp^post4, (-__const_100^post4+__const_100^0 == 0 /\ -i^post4+i^0 == 0 /\ j10^0-j10^post4 == 0 /\ ret_check12^0-ret_check12^post4 == 0 /\ -j6^post4+j6^0 == 0 /\ j^0-j^post4 == 0 /\ ret_check8^0-ret_check8^post4 == 0 /\ -tmp^post4+tmp^0 == 0), cost: 1
	New rule:
	l2 -> l0 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	
		propagated equality __const_100^post4 = __const_100^0
		
		propagated equality i^post4 = i^0
		
		propagated equality j10^post4 = j10^0
		
		propagated equality ret_check12^post4 = ret_check12^0
		
		propagated equality j6^post4 = j6^0
		
		propagated equality j^post4 = j^0
		
		propagated equality ret_check8^post4 = ret_check8^0
		
		propagated equality tmp^post4 = tmp^0
		
	Simplified Guard

	Original rule:
	l2 -> l0 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	New rule:
	l2 -> l0 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l2 -> l0 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, T, cost: 1
	New rule:
	l2 -> l0 : T, cost: 1
	
	Propagated Equalities

	Original rule:
	l5 -> l6 : __const_100^0'=__const_100^post5, i^0'=i^post5, j10^0'=j10^post5, j6^0'=j6^post5, j^0'=j^post5, ret_check12^0'=ret_check12^post5, ret_check8^0'=ret_check8^post5, tmp^0'=tmp^post5, (__const_100^0-__const_100^post5 == 0 /\ -i^post5+i^0 == 0 /\ -j^post5+j^0 == 0 /\ ret_check12^0-ret_check12^post5 == 0 /\ j6^0-j6^post5 == 0 /\ ret_check8^0-ret_check8^post5 == 0 /\ j10^0-j10^post5 == 0 /\ -tmp^post5+tmp^0 == 0), cost: 1
	New rule:
	l5 -> l6 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	
		propagated equality __const_100^post5 = __const_100^0
		
		propagated equality i^post5 = i^0
		
		propagated equality j^post5 = j^0
		
		propagated equality ret_check12^post5 = ret_check12^0
		
		propagated equality j6^post5 = j6^0
		
		propagated equality ret_check8^post5 = ret_check8^0
		
		propagated equality j10^post5 = j10^0
		
		propagated equality tmp^post5 = tmp^0
		
	Simplified Guard

	Original rule:
	l5 -> l6 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	New rule:
	l5 -> l6 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l5 -> l6 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, T, cost: 1
	New rule:
	l5 -> l6 : T, cost: 1
	
	Propagated Equalities

	Original rule:
	l7 -> l5 : __const_100^0'=__const_100^post6, i^0'=i^post6, j10^0'=j10^post6, j6^0'=j6^post6, j^0'=j^post6, ret_check12^0'=ret_check12^post6, ret_check8^0'=ret_check8^post6, tmp^0'=tmp^post6, (-i^post6+i^0 == 0 /\ ret_check8^0-ret_check8^post6 == 0 /\ j^0-j^post6 == 0 /\ tmp^0-tmp^post6 == 0 /\ -j6^post6+j6^0 == 0 /\ -1+j10^post6-j10^0 == 0 /\ -ret_check12^post6+ret_check12^0 == 0 /\ -__const_100^post6+__const_100^0 == 0), cost: 1
	New rule:
	l7 -> l5 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=1+j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	
		propagated equality i^post6 = i^0
		
		propagated equality ret_check8^post6 = ret_check8^0
		
		propagated equality j^post6 = j^0
		
		propagated equality tmp^post6 = tmp^0
		
		propagated equality j6^post6 = j6^0
		
		propagated equality j10^post6 = 1+j10^0
		
		propagated equality ret_check12^post6 = ret_check12^0
		
		propagated equality __const_100^post6 = __const_100^0
		
	Simplified Guard

	Original rule:
	l7 -> l5 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=1+j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	New rule:
	l7 -> l5 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=1+j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l7 -> l5 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=1+j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, T, cost: 1
	New rule:
	l7 -> l5 : j10^0'=1+j10^0, T, cost: 1
	
	Propagated Equalities

	Original rule:
	l8 -> l7 : __const_100^0'=__const_100^post7, i^0'=i^post7, j10^0'=j10^post7, j6^0'=j6^post7, j^0'=j^post7, ret_check12^0'=ret_check12^post7, ret_check8^0'=ret_check8^post7, tmp^0'=tmp^post7, (-j6^post7+j6^0 == 0 /\ j10^0-j10^post7 == 0 /\ j^0-j^post7 == 0 /\ -ret_check8^post7+ret_check8^0 == 0 /\ -__const_100^post7+__const_100^0 == 0 /\ -tmp^post7+tmp^0 == 0 /\ ret_check12^0-ret_check12^post7 == 0 /\ -i^post7+i^0 == 0), cost: 1
	New rule:
	l8 -> l7 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	
		propagated equality j6^post7 = j6^0
		
		propagated equality j10^post7 = j10^0
		
		propagated equality j^post7 = j^0
		
		propagated equality ret_check8^post7 = ret_check8^0
		
		propagated equality __const_100^post7 = __const_100^0
		
		propagated equality tmp^post7 = tmp^0
		
		propagated equality ret_check12^post7 = ret_check12^0
		
		propagated equality i^post7 = i^0
		
	Simplified Guard

	Original rule:
	l8 -> l7 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	New rule:
	l8 -> l7 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l8 -> l7 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, T, cost: 1
	New rule:
	l8 -> l7 : T, cost: 1
	
	Propagated Equalities

	Original rule:
	l8 -> l5 : __const_100^0'=__const_100^post8, i^0'=i^post8, j10^0'=j10^post8, j6^0'=j6^post8, j^0'=j^post8, ret_check12^0'=ret_check12^post8, ret_check8^0'=ret_check8^post8, tmp^0'=tmp^post8, (j10^0-j10^post8 == 0 /\ ret_check8^0-ret_check8^post8 == 0 /\ i^0-i^post8 == 0 /\ __const_100^0-__const_100^post8 == 0 /\ -ret_check12^post8+ret_check12^0 == 0 /\ tmp^0-tmp^post8 == 0 /\ -j6^post8+j6^0 == 0 /\ -j^post8+j^0 == 0), cost: 1
	New rule:
	l8 -> l5 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	
		propagated equality j10^post8 = j10^0
		
		propagated equality ret_check8^post8 = ret_check8^0
		
		propagated equality i^post8 = i^0
		
		propagated equality __const_100^post8 = __const_100^0
		
		propagated equality ret_check12^post8 = ret_check12^0
		
		propagated equality tmp^post8 = tmp^0
		
		propagated equality j6^post8 = j6^0
		
		propagated equality j^post8 = j^0
		
	Simplified Guard

	Original rule:
	l8 -> l5 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	New rule:
	l8 -> l5 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l8 -> l5 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, T, cost: 1
	New rule:
	l8 -> l5 : T, cost: 1
	
	Propagated Equalities

	Original rule:
	l8 -> l7 : __const_100^0'=__const_100^post9, i^0'=i^post9, j10^0'=j10^post9, j6^0'=j6^post9, j^0'=j^post9, ret_check12^0'=ret_check12^post9, ret_check8^0'=ret_check8^post9, tmp^0'=tmp^post9, (-tmp^post9+tmp^0 == 0 /\ ret_check8^0-ret_check8^post9 == 0 /\ ret_check12^0-ret_check12^post9 == 0 /\ -j6^post9+j6^0 == 0 /\ j^0-j^post9 == 0 /\ -__const_100^post9+__const_100^0 == 0 /\ j10^0-j10^post9 == 0 /\ -i^post9+i^0 == 0), cost: 1
	New rule:
	l8 -> l7 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	
		propagated equality tmp^post9 = tmp^0
		
		propagated equality ret_check8^post9 = ret_check8^0
		
		propagated equality ret_check12^post9 = ret_check12^0
		
		propagated equality j6^post9 = j6^0
		
		propagated equality j^post9 = j^0
		
		propagated equality __const_100^post9 = __const_100^0
		
		propagated equality j10^post9 = j10^0
		
		propagated equality i^post9 = i^0
		
	Simplified Guard

	Original rule:
	l8 -> l7 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	New rule:
	l8 -> l7 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l8 -> l7 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, T, cost: 1
	New rule:
	l8 -> l7 : T, cost: 1
	
	Propagated Equalities

	Original rule:
	l9 -> l3 : __const_100^0'=__const_100^post10, i^0'=i^post10, j10^0'=j10^post10, j6^0'=j6^post10, j^0'=j^post10, ret_check12^0'=ret_check12^post10, ret_check8^0'=ret_check8^post10, tmp^0'=tmp^post10, (j10^0-j10^post10 == 0 /\ -j6^post10+j6^0 == 0 /\ -ret_check12^post10+j^post10 == 0 /\ -tmp^post10+tmp^0 == 0 /\ ret_check12^post10-j10^0 == 0 /\ __const_100^0-__const_100^post10 == 0 /\ ret_check8^0-ret_check8^post10 == 0 /\ -i^post10+i^0 == 0), cost: 1
	New rule:
	l9 -> l3 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j10^0, ret_check12^0'=j10^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	
		propagated equality j10^post10 = j10^0
		
		propagated equality j6^post10 = j6^0
		
		propagated equality j^post10 = ret_check12^post10
		
		propagated equality tmp^post10 = tmp^0
		
		propagated equality ret_check12^post10 = j10^0
		
		propagated equality __const_100^post10 = __const_100^0
		
		propagated equality ret_check8^post10 = ret_check8^0
		
		propagated equality i^post10 = i^0
		
	Simplified Guard

	Original rule:
	l9 -> l3 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j10^0, ret_check12^0'=j10^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	New rule:
	l9 -> l3 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j10^0, ret_check12^0'=j10^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l9 -> l3 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j10^0, ret_check12^0'=j10^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, T, cost: 1
	New rule:
	l9 -> l3 : j^0'=j10^0, ret_check12^0'=j10^0, T, cost: 1
	
	Propagated Equalities

	Original rule:
	l9 -> l8 : __const_100^0'=__const_100^post11, i^0'=i^post11, j10^0'=j10^post11, j6^0'=j6^post11, j^0'=j^post11, ret_check12^0'=ret_check12^post11, ret_check8^0'=ret_check8^post11, tmp^0'=tmp^post11, (-__const_100^post11+__const_100^0 == 0 /\ -i^post11+i^0 == 0 /\ -j6^post11+j6^0 == 0 /\ -tmp^post11+tmp^0 == 0 /\ -j^post11+j^0 == 0 /\ ret_check8^0-ret_check8^post11 == 0 /\ j10^0-j10^post11 == 0 /\ ret_check12^0-ret_check12^post11 == 0), cost: 1
	New rule:
	l9 -> l8 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	
		propagated equality __const_100^post11 = __const_100^0
		
		propagated equality i^post11 = i^0
		
		propagated equality j6^post11 = j6^0
		
		propagated equality tmp^post11 = tmp^0
		
		propagated equality j^post11 = j^0
		
		propagated equality ret_check8^post11 = ret_check8^0
		
		propagated equality j10^post11 = j10^0
		
		propagated equality ret_check12^post11 = ret_check12^0
		
	Simplified Guard

	Original rule:
	l9 -> l8 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	New rule:
	l9 -> l8 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l9 -> l8 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, T, cost: 1
	New rule:
	l9 -> l8 : T, cost: 1
	
	Propagated Equalities

	Original rule:
	l10 -> l11 : __const_100^0'=__const_100^post12, i^0'=i^post12, j10^0'=j10^post12, j6^0'=j6^post12, j^0'=j^post12, ret_check12^0'=ret_check12^post12, ret_check8^0'=ret_check8^post12, tmp^0'=tmp^post12, (j^0-j^post12 == 0 /\ -ret_check12^post12+ret_check12^0 == 0 /\ ret_check8^0-ret_check8^post12 == 0 /\ -__const_100^post12+__const_100^0 == 0 /\ -j6^post12+j6^0 == 0 /\ -i^post12+i^0 == 0 /\ -j10^post12+j10^0 == 0 /\ tmp^0-tmp^post12 == 0), cost: 1
	New rule:
	l10 -> l11 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	
		propagated equality j^post12 = j^0
		
		propagated equality ret_check12^post12 = ret_check12^0
		
		propagated equality ret_check8^post12 = ret_check8^0
		
		propagated equality __const_100^post12 = __const_100^0
		
		propagated equality j6^post12 = j6^0
		
		propagated equality i^post12 = i^0
		
		propagated equality j10^post12 = j10^0
		
		propagated equality tmp^post12 = tmp^0
		
	Simplified Guard

	Original rule:
	l10 -> l11 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	New rule:
	l10 -> l11 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l10 -> l11 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, T, cost: 1
	New rule:
	l10 -> l11 : T, cost: 1
	
	Propagated Equalities

	Original rule:
	l12 -> l6 : __const_100^0'=__const_100^post13, i^0'=i^post13, j10^0'=j10^post13, j6^0'=j6^post13, j^0'=j^post13, ret_check12^0'=ret_check12^post13, ret_check8^0'=ret_check8^post13, tmp^0'=tmp^post13, (-j^0+j10^post13 == 0 /\ -ret_check8^post13+ret_check8^0 == 0 /\ -i^post13+i^0 == 0 /\ -j^post13+j^0 == 0 /\ -tmp^post13+tmp^0 == 0 /\ -j6^post13+j6^0 == 0 /\ ret_check12^0-ret_check12^post13 == 0 /\ -__const_100^post13+__const_100^0 == 0), cost: 1
	New rule:
	l12 -> l6 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	
		propagated equality j10^post13 = j^0
		
		propagated equality ret_check8^post13 = ret_check8^0
		
		propagated equality i^post13 = i^0
		
		propagated equality j^post13 = j^0
		
		propagated equality tmp^post13 = tmp^0
		
		propagated equality j6^post13 = j6^0
		
		propagated equality ret_check12^post13 = ret_check12^0
		
		propagated equality __const_100^post13 = __const_100^0
		
	Simplified Guard

	Original rule:
	l12 -> l6 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	New rule:
	l12 -> l6 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l12 -> l6 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, T, cost: 1
	New rule:
	l12 -> l6 : j10^0'=j^0, T, cost: 1
	
	Propagated Equalities

	Original rule:
	l13 -> l12 : __const_100^0'=__const_100^post14, i^0'=i^post14, j10^0'=j10^post14, j6^0'=j6^post14, j^0'=j^post14, ret_check12^0'=ret_check12^post14, ret_check8^0'=ret_check8^post14, tmp^0'=tmp^post14, (-__const_100^post14+__const_100^0 == 0 /\ -j^post14+j^0 == 0 /\ ret_check12^0-ret_check12^post14 == 0 /\ -i^post14+i^0 == 0 /\ ret_check8^0-ret_check8^post14 == 0 /\ -j6^post14+j6^0 == 0 /\ j10^0-j10^post14 == 0 /\ -tmp^post14+tmp^0 == 0), cost: 1
	New rule:
	l13 -> l12 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	
		propagated equality __const_100^post14 = __const_100^0
		
		propagated equality j^post14 = j^0
		
		propagated equality ret_check12^post14 = ret_check12^0
		
		propagated equality i^post14 = i^0
		
		propagated equality ret_check8^post14 = ret_check8^0
		
		propagated equality j6^post14 = j6^0
		
		propagated equality j10^post14 = j10^0
		
		propagated equality tmp^post14 = tmp^0
		
	Simplified Guard

	Original rule:
	l13 -> l12 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	New rule:
	l13 -> l12 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l13 -> l12 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, T, cost: 1
	New rule:
	l13 -> l12 : T, cost: 1
	
	Propagated Equalities

	Original rule:
	l13 -> l3 : __const_100^0'=__const_100^post15, i^0'=i^post15, j10^0'=j10^post15, j6^0'=j6^post15, j^0'=j^post15, ret_check12^0'=ret_check12^post15, ret_check8^0'=ret_check8^post15, tmp^0'=tmp^post15, (-i^post15+i^0 == 0 /\ ret_check12^0-ret_check12^post15 == 0 /\ -j10^post15+j10^0 == 0 /\ j^0-j^post15 == 0 /\ ret_check8^0-ret_check8^post15 == 0 /\ -__const_100^post15+__const_100^0 == 0 /\ -tmp^post15+tmp^0 == 0 /\ -j6^post15+j6^0 == 0), cost: 1
	New rule:
	l13 -> l3 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	
		propagated equality i^post15 = i^0
		
		propagated equality ret_check12^post15 = ret_check12^0
		
		propagated equality j10^post15 = j10^0
		
		propagated equality j^post15 = j^0
		
		propagated equality ret_check8^post15 = ret_check8^0
		
		propagated equality __const_100^post15 = __const_100^0
		
		propagated equality tmp^post15 = tmp^0
		
		propagated equality j6^post15 = j6^0
		
	Simplified Guard

	Original rule:
	l13 -> l3 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	New rule:
	l13 -> l3 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l13 -> l3 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, T, cost: 1
	New rule:
	l13 -> l3 : T, cost: 1
	
	Propagated Equalities

	Original rule:
	l13 -> l12 : __const_100^0'=__const_100^post16, i^0'=i^post16, j10^0'=j10^post16, j6^0'=j6^post16, j^0'=j^post16, ret_check12^0'=ret_check12^post16, ret_check8^0'=ret_check8^post16, tmp^0'=tmp^post16, (-i^post16+i^0 == 0 /\ __const_100^0-__const_100^post16 == 0 /\ -j^post16+j^0 == 0 /\ -tmp^post16+tmp^0 == 0 /\ ret_check8^0-ret_check8^post16 == 0 /\ j10^0-j10^post16 == 0 /\ ret_check12^0-ret_check12^post16 == 0 /\ -j6^post16+j6^0 == 0), cost: 1
	New rule:
	l13 -> l12 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	
		propagated equality i^post16 = i^0
		
		propagated equality __const_100^post16 = __const_100^0
		
		propagated equality j^post16 = j^0
		
		propagated equality tmp^post16 = tmp^0
		
		propagated equality ret_check8^post16 = ret_check8^0
		
		propagated equality j10^post16 = j10^0
		
		propagated equality ret_check12^post16 = ret_check12^0
		
		propagated equality j6^post16 = j6^0
		
	Simplified Guard

	Original rule:
	l13 -> l12 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	New rule:
	l13 -> l12 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l13 -> l12 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, T, cost: 1
	New rule:
	l13 -> l12 : T, cost: 1
	
	Propagated Equalities

	Original rule:
	l14 -> l10 : __const_100^0'=__const_100^post17, i^0'=i^post17, j10^0'=j10^post17, j6^0'=j6^post17, j^0'=j^post17, ret_check12^0'=ret_check12^post17, ret_check8^0'=ret_check8^post17, tmp^0'=tmp^post17, (-tmp^post17+tmp^0 == 0 /\ -j10^post17+j10^0 == 0 /\ -j6^post17+j6^0 == 0 /\ ret_check8^0-ret_check8^post17 == 0 /\ -__const_100^post17+__const_100^0 == 0 /\ j^0-j^post17 == 0 /\ -ret_check12^post17+ret_check12^0 == 0 /\ -i^post17+i^0 == 0), cost: 1
	New rule:
	l14 -> l10 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	
		propagated equality tmp^post17 = tmp^0
		
		propagated equality j10^post17 = j10^0
		
		propagated equality j6^post17 = j6^0
		
		propagated equality ret_check8^post17 = ret_check8^0
		
		propagated equality __const_100^post17 = __const_100^0
		
		propagated equality j^post17 = j^0
		
		propagated equality ret_check12^post17 = ret_check12^0
		
		propagated equality i^post17 = i^0
		
	Simplified Guard

	Original rule:
	l14 -> l10 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	New rule:
	l14 -> l10 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l14 -> l10 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, T, cost: 1
	New rule:
	l14 -> l10 : T, cost: 1
	
	Propagated Equalities

	Original rule:
	l15 -> l14 : __const_100^0'=__const_100^post18, i^0'=i^post18, j10^0'=j10^post18, j6^0'=j6^post18, j^0'=j^post18, ret_check12^0'=ret_check12^post18, ret_check8^0'=ret_check8^post18, tmp^0'=tmp^post18, (__const_100^0-__const_100^post18 == 0 /\ ret_check8^0-ret_check8^post18 == 0 /\ -ret_check12^post18+ret_check12^0 == 0 /\ -1-j6^0+j6^post18 == 0 /\ j10^0-j10^post18 == 0 /\ -j^post18+j^0 == 0 /\ -tmp^post18+tmp^0 == 0 /\ -i^post18+i^0 == 0), cost: 1
	New rule:
	l15 -> l14 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=1+j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	
		propagated equality __const_100^post18 = __const_100^0
		
		propagated equality ret_check8^post18 = ret_check8^0
		
		propagated equality ret_check12^post18 = ret_check12^0
		
		propagated equality j6^post18 = 1+j6^0
		
		propagated equality j10^post18 = j10^0
		
		propagated equality j^post18 = j^0
		
		propagated equality tmp^post18 = tmp^0
		
		propagated equality i^post18 = i^0
		
	Simplified Guard

	Original rule:
	l15 -> l14 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=1+j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	New rule:
	l15 -> l14 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=1+j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l15 -> l14 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=1+j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, T, cost: 1
	New rule:
	l15 -> l14 : j6^0'=1+j6^0, T, cost: 1
	
	Propagated Equalities

	Original rule:
	l6 -> l9 : __const_100^0'=__const_100^post19, i^0'=i^post19, j10^0'=j10^post19, j6^0'=j6^post19, j^0'=j^post19, ret_check12^0'=ret_check12^post19, ret_check8^0'=ret_check8^post19, tmp^0'=tmp^post19, (ret_check12^0-ret_check12^post19 == 0 /\ -__const_100^post19+__const_100^0 == 0 /\ -tmp^post19+tmp^0 == 0 /\ j10^0-j10^post19 == 0 /\ ret_check8^0-ret_check8^post19 == 0 /\ -j6^post19+j6^0 == 0 /\ -i^post19+i^0 == 0 /\ j^0-j^post19 == 0), cost: 1
	New rule:
	l6 -> l9 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	
		propagated equality ret_check12^post19 = ret_check12^0
		
		propagated equality __const_100^post19 = __const_100^0
		
		propagated equality tmp^post19 = tmp^0
		
		propagated equality j10^post19 = j10^0
		
		propagated equality ret_check8^post19 = ret_check8^0
		
		propagated equality j6^post19 = j6^0
		
		propagated equality i^post19 = i^0
		
		propagated equality j^post19 = j^0
		
	Simplified Guard

	Original rule:
	l6 -> l9 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	New rule:
	l6 -> l9 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l6 -> l9 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, T, cost: 1
	New rule:
	l6 -> l9 : T, cost: 1
	
	Propagated Equalities

	Original rule:
	l16 -> l15 : __const_100^0'=__const_100^post20, i^0'=i^post20, j10^0'=j10^post20, j6^0'=j6^post20, j^0'=j^post20, ret_check12^0'=ret_check12^post20, ret_check8^0'=ret_check8^post20, tmp^0'=tmp^post20, (-ret_check12^post20+ret_check12^0 == 0 /\ -j6^post20+j6^0 == 0 /\ __const_100^0-__const_100^post20 == 0 /\ j10^0-j10^post20 == 0 /\ -j^post20+j^0 == 0 /\ -tmp^post20+tmp^0 == 0 /\ ret_check8^0-ret_check8^post20 == 0 /\ -i^post20+i^0 == 0), cost: 1
	New rule:
	l16 -> l15 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	
		propagated equality ret_check12^post20 = ret_check12^0
		
		propagated equality j6^post20 = j6^0
		
		propagated equality __const_100^post20 = __const_100^0
		
		propagated equality j10^post20 = j10^0
		
		propagated equality j^post20 = j^0
		
		propagated equality tmp^post20 = tmp^0
		
		propagated equality ret_check8^post20 = ret_check8^0
		
		propagated equality i^post20 = i^0
		
	Simplified Guard

	Original rule:
	l16 -> l15 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	New rule:
	l16 -> l15 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l16 -> l15 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, T, cost: 1
	New rule:
	l16 -> l15 : T, cost: 1
	
	Propagated Equalities

	Original rule:
	l16 -> l14 : __const_100^0'=__const_100^post21, i^0'=i^post21, j10^0'=j10^post21, j6^0'=j6^post21, j^0'=j^post21, ret_check12^0'=ret_check12^post21, ret_check8^0'=ret_check8^post21, tmp^0'=tmp^post21, (-__const_100^post21+__const_100^0 == 0 /\ j10^0-j10^post21 == 0 /\ ret_check8^0-ret_check8^post21 == 0 /\ -i^post21+i^0 == 0 /\ ret_check12^0-ret_check12^post21 == 0 /\ -tmp^post21+tmp^0 == 0 /\ -j6^post21+j6^0 == 0 /\ j^0-j^post21 == 0), cost: 1
	New rule:
	l16 -> l14 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	
		propagated equality __const_100^post21 = __const_100^0
		
		propagated equality j10^post21 = j10^0
		
		propagated equality ret_check8^post21 = ret_check8^0
		
		propagated equality i^post21 = i^0
		
		propagated equality ret_check12^post21 = ret_check12^0
		
		propagated equality tmp^post21 = tmp^0
		
		propagated equality j6^post21 = j6^0
		
		propagated equality j^post21 = j^0
		
	Simplified Guard

	Original rule:
	l16 -> l14 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	New rule:
	l16 -> l14 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l16 -> l14 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, T, cost: 1
	New rule:
	l16 -> l14 : T, cost: 1
	
	Propagated Equalities

	Original rule:
	l16 -> l15 : __const_100^0'=__const_100^post22, i^0'=i^post22, j10^0'=j10^post22, j6^0'=j6^post22, j^0'=j^post22, ret_check12^0'=ret_check12^post22, ret_check8^0'=ret_check8^post22, tmp^0'=tmp^post22, (-ret_check8^post22+ret_check8^0 == 0 /\ -i^post22+i^0 == 0 /\ j10^0-j10^post22 == 0 /\ -j^post22+j^0 == 0 /\ __const_100^0-__const_100^post22 == 0 /\ -j6^post22+j6^0 == 0 /\ ret_check12^0-ret_check12^post22 == 0 /\ -tmp^post22+tmp^0 == 0), cost: 1
	New rule:
	l16 -> l15 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	
		propagated equality ret_check8^post22 = ret_check8^0
		
		propagated equality i^post22 = i^0
		
		propagated equality j10^post22 = j10^0
		
		propagated equality j^post22 = j^0
		
		propagated equality __const_100^post22 = __const_100^0
		
		propagated equality j6^post22 = j6^0
		
		propagated equality ret_check12^post22 = ret_check12^0
		
		propagated equality tmp^post22 = tmp^0
		
	Simplified Guard

	Original rule:
	l16 -> l15 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	New rule:
	l16 -> l15 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l16 -> l15 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, T, cost: 1
	New rule:
	l16 -> l15 : T, cost: 1
	
	Propagated Equalities

	Original rule:
	l11 -> l13 : __const_100^0'=__const_100^post23, i^0'=i^post23, j10^0'=j10^post23, j6^0'=j6^post23, j^0'=j^post23, ret_check12^0'=ret_check12^post23, ret_check8^0'=ret_check8^post23, tmp^0'=tmp^post23, (0 == 0 /\ -i^post23+i^0 == 0 /\ -ret_check12^post23+ret_check12^0 == 0 /\ j10^0-j10^post23 == 0 /\ -j6^post23+j6^0 == 0 /\ ret_check8^post23-j6^0 == 0 /\ -ret_check8^post23+j^post23 == 0 /\ -__const_100^post23+__const_100^0 == 0), cost: 1
	New rule:
	l11 -> l13 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j6^0, ret_check12^0'=ret_check12^0, ret_check8^0'=j6^0, tmp^0'=tmp^post23, 0 == 0, cost: 1
	
		propagated equality i^post23 = i^0
		
		propagated equality ret_check12^post23 = ret_check12^0
		
		propagated equality j10^post23 = j10^0
		
		propagated equality j6^post23 = j6^0
		
		propagated equality ret_check8^post23 = j6^0
		
		propagated equality j^post23 = j6^0
		
		propagated equality __const_100^post23 = __const_100^0
		
	Simplified Guard

	Original rule:
	l11 -> l13 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j6^0, ret_check12^0'=ret_check12^0, ret_check8^0'=j6^0, tmp^0'=tmp^post23, 0 == 0, cost: 1
	New rule:
	l11 -> l13 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j6^0, ret_check12^0'=ret_check12^0, ret_check8^0'=j6^0, tmp^0'=tmp^post23, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l11 -> l13 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j6^0, ret_check12^0'=ret_check12^0, ret_check8^0'=j6^0, tmp^0'=tmp^post23, T, cost: 1
	New rule:
	l11 -> l13 : j^0'=j6^0, ret_check8^0'=j6^0, tmp^0'=tmp^post23, T, cost: 1
	
	Propagated Equalities

	Original rule:
	l11 -> l16 : __const_100^0'=__const_100^post24, i^0'=i^post24, j10^0'=j10^post24, j6^0'=j6^post24, j^0'=j^post24, ret_check12^0'=ret_check12^post24, ret_check8^0'=ret_check8^post24, tmp^0'=tmp^post24, (ret_check8^0-ret_check8^post24 == 0 /\ -__const_100^post24+__const_100^0 == 0 /\ ret_check12^0-ret_check12^post24 == 0 /\ -tmp^post24+tmp^0 == 0 /\ j^0-j^post24 == 0 /\ -i^post24+i^0 == 0 /\ -j6^post24+j6^0 == 0 /\ j10^0-j10^post24 == 0), cost: 1
	New rule:
	l11 -> l16 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	
		propagated equality ret_check8^post24 = ret_check8^0
		
		propagated equality __const_100^post24 = __const_100^0
		
		propagated equality ret_check12^post24 = ret_check12^0
		
		propagated equality tmp^post24 = tmp^0
		
		propagated equality j^post24 = j^0
		
		propagated equality i^post24 = i^0
		
		propagated equality j6^post24 = j6^0
		
		propagated equality j10^post24 = j10^0
		
	Simplified Guard

	Original rule:
	l11 -> l16 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	New rule:
	l11 -> l16 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l11 -> l16 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, T, cost: 1
	New rule:
	l11 -> l16 : T, cost: 1
	
	Propagated Equalities

	Original rule:
	l1 -> l10 : __const_100^0'=__const_100^post25, i^0'=i^post25, j10^0'=j10^post25, j6^0'=j6^post25, j^0'=j^post25, ret_check12^0'=ret_check12^post25, ret_check8^0'=ret_check8^post25, tmp^0'=tmp^post25, (j10^0-j10^post25 == 0 /\ j^0-j^post25 == 0 /\ ret_check8^0-ret_check8^post25 == 0 /\ 1+i^0 <= 0 /\ __const_100^0-__const_100^post25 == 0 /\ -ret_check12^post25+ret_check12^0 == 0 /\ -j^0+j6^post25 == 0 /\ -i^post25+i^0 == 0 /\ tmp^0-tmp^post25 == 0), cost: 1
	New rule:
	l1 -> l10 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, (0 == 0 /\ 1+i^0 <= 0), cost: 1
	
		propagated equality j10^post25 = j10^0
		
		propagated equality j^post25 = j^0
		
		propagated equality ret_check8^post25 = ret_check8^0
		
		propagated equality __const_100^post25 = __const_100^0
		
		propagated equality ret_check12^post25 = ret_check12^0
		
		propagated equality j6^post25 = j^0
		
		propagated equality i^post25 = i^0
		
		propagated equality tmp^post25 = tmp^0
		
	Simplified Guard

	Original rule:
	l1 -> l10 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, (0 == 0 /\ 1+i^0 <= 0), cost: 1
	New rule:
	l1 -> l10 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 1+i^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l1 -> l10 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 1+i^0 <= 0, cost: 1
	New rule:
	l1 -> l10 : j6^0'=j^0, 1+i^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l1 -> l4 : __const_100^0'=__const_100^post26, i^0'=i^post26, j10^0'=j10^post26, j6^0'=j6^post26, j^0'=j^post26, ret_check12^0'=ret_check12^post26, ret_check8^0'=ret_check8^post26, tmp^0'=tmp^post26, (-i^post26+i^0 == 0 /\ j10^0-j10^post26 == 0 /\ -tmp^post26+tmp^0 == 0 /\ ret_check12^0-ret_check12^post26 == 0 /\ -j^post26+j^0 == 0 /\ -__const_100^post26+__const_100^0 == 0 /\ -j6^post26+j6^0 == 0 /\ ret_check8^0-ret_check8^post26 == 0 /\ -i^0 <= 0), cost: 1
	New rule:
	l1 -> l4 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, (0 == 0 /\ -i^0 <= 0), cost: 1
	
		propagated equality i^post26 = i^0
		
		propagated equality j10^post26 = j10^0
		
		propagated equality tmp^post26 = tmp^0
		
		propagated equality ret_check12^post26 = ret_check12^0
		
		propagated equality j^post26 = j^0
		
		propagated equality __const_100^post26 = __const_100^0
		
		propagated equality j6^post26 = j6^0
		
		propagated equality ret_check8^post26 = ret_check8^0
		
	Simplified Guard

	Original rule:
	l1 -> l4 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, (0 == 0 /\ -i^0 <= 0), cost: 1
	New rule:
	l1 -> l4 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, -i^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l1 -> l4 : __const_100^0'=__const_100^0, i^0'=i^0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, -i^0 <= 0, cost: 1
	New rule:
	l1 -> l4 : -i^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l18 -> l2 : __const_100^0'=__const_100^post27, i^0'=i^post27, j10^0'=j10^post27, j6^0'=j6^post27, j^0'=j^post27, ret_check12^0'=ret_check12^post27, ret_check8^0'=ret_check8^post27, tmp^0'=tmp^post27, (tmp^post28-tmp^post27 == 0 /\ -j6^post27+j6^post28 == 0 /\ -ret_check12^post27+ret_check12^post28 == 0 /\ -ret_check8^post27+ret_check8^post28 == 0 /\ -__const_100^post28+__const_100^0 == 0 /\ __const_100^post28-__const_100^post27 == 0 /\ j^post28-j^post27 == 0 /\ -i^post28+i^0 == 0 /\ -tmp^post28+tmp^0 == 0 /\ -j^post28+j^0 == 0 /\ i^post27 == 0 /\ ret_check8^0-ret_check8^post28 == 0 /\ j6^0-j6^post28 == 0 /\ -j10^post27+j10^post28 == 0 /\ j10^0-j10^post28 == 0 /\ ret_check12^0-ret_check12^post28 == 0), cost: 1
	New rule:
	l18 -> l2 : __const_100^0'=__const_100^post28, i^0'=0, j10^0'=j10^post28, j6^0'=j6^post28, j^0'=j^post28, ret_check12^0'=ret_check12^post28, ret_check8^0'=ret_check8^post28, tmp^0'=tmp^post28, (0 == 0 /\ -__const_100^post28+__const_100^0 == 0 /\ -i^post28+i^0 == 0 /\ -tmp^post28+tmp^0 == 0 /\ -j^post28+j^0 == 0 /\ ret_check8^0-ret_check8^post28 == 0 /\ j6^0-j6^post28 == 0 /\ j10^0-j10^post28 == 0 /\ ret_check12^0-ret_check12^post28 == 0), cost: 1
	
		propagated equality tmp^post27 = tmp^post28
		
		propagated equality j6^post27 = j6^post28
		
		propagated equality ret_check12^post27 = ret_check12^post28
		
		propagated equality ret_check8^post27 = ret_check8^post28
		
		propagated equality __const_100^post27 = __const_100^post28
		
		propagated equality j^post27 = j^post28
		
		propagated equality i^post27 = 0
		
		propagated equality j10^post27 = j10^post28
		
	Propagated Equalities

	Original rule:
	l18 -> l2 : __const_100^0'=__const_100^post28, i^0'=0, j10^0'=j10^post28, j6^0'=j6^post28, j^0'=j^post28, ret_check12^0'=ret_check12^post28, ret_check8^0'=ret_check8^post28, tmp^0'=tmp^post28, (0 == 0 /\ -__const_100^post28+__const_100^0 == 0 /\ -i^post28+i^0 == 0 /\ -tmp^post28+tmp^0 == 0 /\ -j^post28+j^0 == 0 /\ ret_check8^0-ret_check8^post28 == 0 /\ j6^0-j6^post28 == 0 /\ j10^0-j10^post28 == 0 /\ ret_check12^0-ret_check12^post28 == 0), cost: 1
	New rule:
	l18 -> l2 : __const_100^0'=__const_100^0, i^0'=0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	
		propagated equality __const_100^post28 = __const_100^0
		
		propagated equality i^post28 = i^0
		
		propagated equality tmp^post28 = tmp^0
		
		propagated equality j^post28 = j^0
		
		propagated equality ret_check8^post28 = ret_check8^0
		
		propagated equality j6^post28 = j6^0
		
		propagated equality j10^post28 = j10^0
		
		propagated equality ret_check12^post28 = ret_check12^0
		
	Simplified Guard

	Original rule:
	l18 -> l2 : __const_100^0'=__const_100^0, i^0'=0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	New rule:
	l18 -> l2 : __const_100^0'=__const_100^0, i^0'=0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l18 -> l2 : __const_100^0'=__const_100^0, i^0'=0, j10^0'=j10^0, j6^0'=j6^0, j^0'=j^0, ret_check12^0'=ret_check12^0, ret_check8^0'=ret_check8^0, tmp^0'=tmp^0, T, cost: 1
	New rule:
	l18 -> l2 : i^0'=0, T, cost: 1

Step with 55

	Trace

	55[T]
	
	Blocked

	[{}, {}]

Step with 32

	Trace

	55[T], 32[T]
	
	Blocked

	[{}, {}, {}]

Step with 29

	Trace

	55[T], 32[T], 29[(__const_100^0-i^0 <= 0)]
	
	Blocked

	[{}, {}, {}, {}]

Step with 54

	Trace

	55[T], 32[T], 29[(__const_100^0-i^0 <= 0)], 54[(-i^0 <= 0)]
	
	Blocked

	[{}, {}, {}, {53[T]}, {}]

Backtrack

	Trace

	55[T], 32[T], 29[(__const_100^0-i^0 <= 0)]
	
	Blocked

	[{}, {}, {}, {53[T], 54[T]}]

Backtrack

	Trace

	55[T], 32[T]
	
	Blocked

	[{}, {}, {29[T]}]

Step with 30

	Trace

	55[T], 32[T], 30[(1-__const_100^0+i^0 <= 0)]
	
	Blocked

	[{}, {}, {29[T]}, {}]

Accelerate

Start location: l18
Program variables: __const_100^0 i^0 j10^0 j6^0 j^0 ret_check12^0 ret_check8^0 tmp^0
  29: l0 -> l1 : j^0'=-2+i^0, __const_100^0-i^0 <= 0, cost: 1
  30: l0 -> l2 : i^0'=1+i^0, 1-__const_100^0+i^0 <= 0, cost: 1
  53: l1 -> l10 : j6^0'=j^0, 1+i^0 <= 0, cost: 1
  54: l1 -> l4 : -i^0 <= 0, cost: 1
  32: l2 -> l0 : T, cost: 1
  56: l2 -> l2 : i^0'=n+i^0, (__const_100^0-n-i^0 >= 0 /\ -1+n >= 0), cost: 1
  31: l3 -> l4 : T, cost: 1
  33: l5 -> l6 : T, cost: 1
  47: l6 -> l9 : T, cost: 1
  34: l7 -> l5 : j10^0'=1+j10^0, T, cost: 1
  35: l8 -> l7 : T, cost: 1
  36: l8 -> l5 : T, cost: 1
  37: l8 -> l7 : T, cost: 1
  38: l9 -> l3 : j^0'=j10^0, ret_check12^0'=j10^0, T, cost: 1
  39: l9 -> l8 : T, cost: 1
  40: l10 -> l11 : T, cost: 1
  51: l11 -> l13 : j^0'=j6^0, ret_check8^0'=j6^0, tmp^0'=tmp^post23, T, cost: 1
  52: l11 -> l16 : T, cost: 1
  41: l12 -> l6 : j10^0'=j^0, T, cost: 1
  42: l13 -> l12 : T, cost: 1
  43: l13 -> l3 : T, cost: 1
  44: l13 -> l12 : T, cost: 1
  45: l14 -> l10 : T, cost: 1
  46: l15 -> l14 : j6^0'=1+j6^0, T, cost: 1
  48: l16 -> l15 : T, cost: 1
  49: l16 -> l14 : T, cost: 1
  50: l16 -> l15 : T, cost: 1
  55: l18 -> l2 : i^0'=0, T, cost: 1

	Loop Acceleration

	Original rule:
	l2 -> l2 : i^0'=1+i^0, 1-__const_100^0+i^0 <= 0, cost: 1
	New rule:
	l2 -> l2 : i^0'=n+i^0, (__const_100^0-n-i^0 >= 0 /\ -1+n >= 0), cost: 1

		-1+__const_100^0-i^0 >= 0 [0]: montonic decrease yields __const_100^0-n-i^0 >= 0
		
		-1+__const_100^0-i^0 >= 0 [1]: eventual increase yields (1 <= 0 /\ -1+__const_100^0-i^0 >= 0)
		
		Replacement map: {-1+__const_100^0-i^0 >= 0 -> __const_100^0-n-i^0 >= 0}

	Trace

	55[T], 56[(__const_100^0-n-i^0 >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {}, {56[T]}]

Step with 32

	Trace

	55[T], 56[(__const_100^0-n-i^0 >= 0 /\ -1+n >= 0)], 32[T]
	
	Blocked

	[{}, {}, {56[T]}, {}]

Step with 30

	Trace

	55[T], 56[(__const_100^0-n-i^0 >= 0 /\ -1+n >= 0)], 32[T], 30[(1-__const_100^0+i^0 <= 0)]
	
	Blocked

	[{}, {}, {56[T]}, {}, {}]

Covered

	Trace

	55[T], 56[(__const_100^0-n-i^0 >= 0 /\ -1+n >= 0)], 32[T]
	
	Blocked

	[{}, {}, {56[T]}, {30[T]}]

Step with 29

	Trace

	55[T], 56[(__const_100^0-n-i^0 >= 0 /\ -1+n >= 0)], 32[T], 29[(__const_100^0-i^0 <= 0)]
	
	Blocked

	[{}, {}, {56[T]}, {30[T]}, {}]

Step with 54

	Trace

	55[T], 56[(__const_100^0-n-i^0 >= 0 /\ -1+n >= 0)], 32[T], 29[(__const_100^0-i^0 <= 0)], 54[(-i^0 <= 0)]
	
	Blocked

	[{}, {}, {56[T]}, {30[T]}, {}, {}]

Backtrack

	Trace

	55[T], 56[(__const_100^0-n-i^0 >= 0 /\ -1+n >= 0)], 32[T], 29[(__const_100^0-i^0 <= 0)]
	
	Blocked

	[{}, {}, {56[T]}, {30[T]}, {54[T]}]

Backtrack

	Trace

	55[T], 56[(__const_100^0-n-i^0 >= 0 /\ -1+n >= 0)], 32[T]
	
	Blocked

	[{}, {}, {56[T]}, {29[T], 30[T]}]

Backtrack

	Trace

	55[T], 56[(__const_100^0-n-i^0 >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {}, {32[T], 56[T]}]

Backtrack

	Trace

	55[T]
	
	Blocked

	[{}, {56[T]}]

Step with 32

	Trace

	55[T], 32[T]
	
	Blocked

	[{}, {56[T]}, {}]

Step with 29

	Trace

	55[T], 32[T], 29[(__const_100^0-i^0 <= 0)]
	
	Blocked

	[{}, {56[T]}, {}, {}]

Step with 54

	Trace

	55[T], 32[T], 29[(__const_100^0-i^0 <= 0)], 54[(-i^0 <= 0)]
	
	Blocked

	[{}, {56[T]}, {}, {}, {}]

Backtrack

	Trace

	55[T], 32[T], 29[(__const_100^0-i^0 <= 0)]
	
	Blocked

	[{}, {56[T]}, {}, {54[T]}]

Backtrack

	Trace

	55[T], 32[T]
	
	Blocked

	[{}, {56[T]}, {29[T]}]

Step with 30

	Trace

	55[T], 32[T], 30[(1-__const_100^0+i^0 <= 0)]
	
	Blocked

	[{}, {56[T]}, {29[T]}, {}]

Covered

	Trace

	55[T], 32[T]
	
	Blocked

	[{}, {56[T]}, {29[T], 30[T]}]

Backtrack

	Trace

	55[T]
	
	Blocked

	[{}, {32[T], 56[T]}]

Backtrack

	Trace

	Blocked

	[{55[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
