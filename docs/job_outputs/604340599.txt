YES

Solver Timeout: 4
Global Timeout: 300
Maximum number of concurrent processes: 900
*******************************************************************************************
*********************** UNPROCESSED TRANSITION SYSTEMS PER FUNCTION ***********************
*******************************************************************************************


List of LLVMGraphs + assumeNodes + staticAssertNodes [1] :

+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++
+                                                                  +
Init Location: 0
Transitions:
<l0, l1, true, seq{main__func_return_ -> 0, main_k -> Â¿functionCall(__VERIFIER_nondet_int), main_i -> Â¿functionCall(__VERIFIER_nondet_int), main_j -> Â¿functionCall(__VERIFIER_nondet_int), main_n -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l1, l2, (main_k >= 1)>
<l1, l13, not((main_k >= 1))>
<l2, l3, true, seq{main_i -> 0}>
<l3, l4, true>
<l4, l12, not((main_i < main_n))>
<l4, l5, (main_i < main_n)>
<l5, l6, true, seq{main_j -> 0}>
<l6, l7, true>
<l7, l10, not((main_j <= main_i))>
<l7, l8, (main_j <= main_i)>
<l8, l9, true, seq{main_j -> (main_j + main_k)}>
<l9, l7, true>
<l10, l11, true, seq{main_i -> (main_i + 1)}>
<l11, l4, true>
<l12, l13, true>
<l13, l14, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

+ Assume Nodes [0]: ++++++++++++++++++++++++++++++++++++++++++++++++
       
+ Static Assert Nodes [0]: +++++++++++++++++++++++++++++++++++++++++
       
+ After preprocess (paralelization): ++++++++++++++++++++++++++++++

Init Location: 0
Transitions:
<l0, l15, true, seq{main__func_return_ -> 0}>
<l15, l16, true, seq{varCall_1 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l16, l17, true, seq{main_k -> varCall_1}>
<l17, l18, true, seq{varCall_2 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l18, l19, true, seq{main_i -> varCall_2}>
<l19, l20, true, seq{varCall_3 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l20, l21, true, seq{main_j -> varCall_3}>
<l21, l22, true, seq{varCall_4 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l22, l1, true, seq{main_n -> varCall_4}>
<l1, l2, (main_k >= 1)>
<l1, l13, not((main_k >= 1))>
<l2, l3, true, seq{main_i -> 0}>
<l3, l4, true>
<l4, l5, (main_i < main_n)>
<l4, l12, not((main_i < main_n))>
<l5, l6, true, seq{main_j -> 0}>
<l6, l7, true>
<l7, l8, (main_j <= main_i)>
<l7, l10, not((main_j <= main_i))>
<l8, l9, true, seq{main_j -> (main_j + main_k)}>
<l9, l7, true>
<l10, l11, true, seq{main_i -> (main_i + 1)}>
<l11, l4, true>
<l12, l13, true>
<l13, l14, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:
14, 
Accepting locations:

Asserts:

+                                                                  +
+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++


Function Return and Parameters Information [2 functions]:
    function name: __VERIFIER_nondet_int [1 return + 0 parameters]        demangled: __VERIFIER_nondet_int
        __VERIFIER_nondet_int__func_return_      [function result] : int
    function name: main [1 return + 0 parameters]        demangled: main
        main__func_return_      [function result] : int


AST Ident Scanner Information [6 idents]:
__VERIFIER_nondet_int | function | [integer, ()] | <line: 12, col: 1> | <line: 16, col: 6> <line: 17, col: 9> <line: 18, col: 9> <line: 19, col: 9>
main | function | [integer, ()] | <line: 14, col: 1>
k | local variable | integer | <line: 15, col: 5> | <line: 16, col: 2> <line: 20, col: 6> <line: 25, col: 13>
i | local variable | integer | <line: 15, col: 5> | <line: 17, col: 5> <line: 21, col: 3> <line: 22, col: 10> <line: 24, col: 16> <line: 27, col: 4> <line: 27, col: 8>
j | local variable | integer | <line: 15, col: 5> | <line: 18, col: 5> <line: 23, col: 4> <line: 24, col: 11> <line: 25, col: 5> <line: 25, col: 9>
n | local variable | integer | <line: 15, col: 5> | <line: 19, col: 5> <line: 22, col: 14>

Main function: main
Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l7, (main_k = undef5) /\ (main_n = undef8) /\ (undef5 >= 1) /\ (0 < undef8), par{main_i -> 0, main_j -> 0}>
<l0, l14, (main_k = undef5) /\ (main_n = undef8) /\ (undef5 >= 1) /\ not((0 < undef8)), par{main_i -> 0, main_j -> undef7}>
<l0, l14, (main_k = undef5) /\ (main_n = undef8) /\ not((undef5 >= 1)), par{main_i -> undef6, main_j -> undef7}>
<l7, l7, (main_j <= main_i), par{main_j -> (main_j + main_k)}>
<l7, l7, not((main_j <= main_i)) /\ ((main_i + 1) < main_n), par{main_i -> (main_i + 1), main_j -> 0}>
<l7, l14, not((main_j <= main_i)) /\ not(((main_i + 1) < main_n)), par{main_i -> (main_i + 1)}>

Fresh variables:
undef5, undef6, undef7, undef8, 

Undef variables:
undef5, undef6, undef7, undef8, 

Abstraction variables:

Exit nodes:
14, 
Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l7, l7, main_j <= main_i, {main_j -> main_k + main_j, rest remain the same}>
<l7, l7, 1 + main_i <= main_j /\ 2 + main_i <= main_n, {main_i -> 1 + main_i, main_j -> 0, rest remain the same}>
Variables:
main_k, main_i, main_j, main_n

Graph 2:
Transitions:
Variables:

Precedence: 
Graph 0

Graph 1
<l0, l7, 1 <= undef5 /\ 1 <= undef8 /\ main_k = undef5 /\ main_n = undef8, {main_i -> 0, main_j -> 0, rest remain the same}>

Graph 2
<l0, l14, undef8 <= 0 /\ 1 <= undef5 /\ main_k = undef5 /\ main_n = undef8, {main_i -> 0, main_j -> undef7, rest remain the same}>
<l0, l14, undef5 <= 0 /\ main_k = undef5 /\ main_n = undef8, {main_i -> undef6, main_j -> undef7, rest remain the same}>
<l7, l14, 1 + main_i <= main_j /\ main_n <= 1 + main_i, {main_i -> 1 + main_i, rest remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 7 , 1 )
( 14 , 2 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.005902

Checking conditional termination of SCC {l7}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000948s
[33mRanking function: [36m-1 - 2*main_i + 2*main_n[0m
New Graphs: 
Transitions:
<l7, l7, main_j <= main_i, {main_j -> main_k + main_j, rest remain the same}>
Variables:
main_k, main_i, main_j
Checking conditional termination of SCC {l7}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000392s

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000903s
[9439 : 9441]
[9439 : 9442]
Successful child: 9441
[ Invariant Graph ]
[33mStrengthening and disabling transitions...[0m

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l7, l7, main_j <= main_i /\ 1 <= main_k, {main_j -> main_k + main_j, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l7, l7, 1 <= main_k /\ 1 + main_i <= main_j /\ 2 + main_i <= main_n, {main_i -> 1 + main_i, main_j -> 0, rest remain the same}>
[ Termination Graph ]
[33mStrengthening and disabling transitions...[0m

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l7, l7, main_j <= main_i /\ 1 <= main_k, {main_j -> main_k + main_j, rest remain the same}>
[33mRanking function: [36mmain_i - main_j[0m
New Graphs: 
INVARIANTS: 
7: 1 <= main_k , 0 <= 1 + main_k , 
Quasi-INVARIANTS to narrow Graph: 
7: 
Proving termination of subgraph 2
Analyzing SCC {l14}...
No cycles found.

[32mProgram Terminates[0m
