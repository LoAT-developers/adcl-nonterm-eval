unknown

Initial ITS

Start location: l5
Program variables: __const_5^0 x^0
   0: l0 -> l1 : __const_5^0'=__const_5^post1, x^0'=x^post1, (-1+x^post1 == 0 /\ -__const_5^post1+__const_5^0 == 0 /\ x^0 <= 0), cost: 1
   1: l0 -> l1 : __const_5^0'=__const_5^post2, x^0'=x^post2, (1-x^0 <= 0 /\ -1+x^post2-x^0 == 0 /\ __const_5^0-__const_5^post2 == 0), cost: 1
   4: l1 -> l2 : __const_5^0'=__const_5^post5, x^0'=x^post5, (-x^post5+x^0 == 0 /\ __const_5^0-__const_5^post5 == 0), cost: 1
   2: l2 -> l3 : __const_5^0'=__const_5^post3, x^0'=x^post3, (x^0-x^post3 == 0 /\ __const_5^0-__const_5^post3 == 0 /\ 4-x^0 <= 0), cost: 1
   3: l2 -> l0 : __const_5^0'=__const_5^post4, x^0'=x^post4, (-3+x^0 <= 0 /\ -x^post4+x^0 == 0 /\ -__const_5^post4+__const_5^0 == 0), cost: 1
   5: l4 -> l1 : __const_5^0'=__const_5^post6, x^0'=x^post6, (0 == 0 /\ __const_5^0-__const_5^post6 == 0 /\ -__const_5^0+x^1 == 0), cost: 1
   6: l5 -> l4 : __const_5^0'=__const_5^post7, x^0'=x^post7, (-x^post7+x^0 == 0 /\ __const_5^0-__const_5^post7 == 0), cost: 1

Chained Linear Paths

Start location: l5
Program variables: __const_5^0 x^0
   0: l0 -> l1 : __const_5^0'=__const_5^post1, x^0'=x^post1, (-1+x^post1 == 0 /\ -__const_5^post1+__const_5^0 == 0 /\ x^0 <= 0), cost: 1
   1: l0 -> l1 : __const_5^0'=__const_5^post2, x^0'=x^post2, (1-x^0 <= 0 /\ -1+x^post2-x^0 == 0 /\ __const_5^0-__const_5^post2 == 0), cost: 1
   4: l1 -> l2 : __const_5^0'=__const_5^post5, x^0'=x^post5, (-x^post5+x^0 == 0 /\ __const_5^0-__const_5^post5 == 0), cost: 1
   2: l2 -> l3 : __const_5^0'=__const_5^post3, x^0'=x^post3, (x^0-x^post3 == 0 /\ __const_5^0-__const_5^post3 == 0 /\ 4-x^0 <= 0), cost: 1
   3: l2 -> l0 : __const_5^0'=__const_5^post4, x^0'=x^post4, (-3+x^0 <= 0 /\ -x^post4+x^0 == 0 /\ -__const_5^post4+__const_5^0 == 0), cost: 1
   7: l5 -> l1 : __const_5^0'=__const_5^post6, x^0'=x^post6, (0 == 0 /\ __const_5^post7-__const_5^post6 == 0 /\ -__const_5^post7+x^1 == 0 /\ -x^post7+x^0 == 0 /\ __const_5^0-__const_5^post7 == 0), cost: 1

	Eliminating location l4 by chaining:

	Applied chaining

	First rule:
	l5 -> l4 : __const_5^0'=__const_5^post7, x^0'=x^post7, (-x^post7+x^0 == 0 /\ __const_5^0-__const_5^post7 == 0), cost: 1
	Second rule:
	l4 -> l1 : __const_5^0'=__const_5^post6, x^0'=x^post6, (0 == 0 /\ __const_5^0-__const_5^post6 == 0 /\ -__const_5^0+x^1 == 0), cost: 1
	New rule:
	l5 -> l1 : __const_5^0'=__const_5^post6, x^0'=x^post6, (0 == 0 /\ __const_5^post7-__const_5^post6 == 0 /\ -__const_5^post7+x^1 == 0 /\ -x^post7+x^0 == 0 /\ __const_5^0-__const_5^post7 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 5 6

Simplified Transitions

Start location: l5
Program variables: x^0
   8: l0 -> l1 : x^0'=1, x^0 <= 0, cost: 1
   9: l0 -> l1 : x^0'=1+x^0, 1-x^0 <= 0, cost: 1
  12: l1 -> l2 : T, cost: 1
  10: l2 -> l3 : 4-x^0 <= 0, cost: 1
  11: l2 -> l0 : -3+x^0 <= 0, cost: 1
  13: l5 -> l1 : x^0'=x^post6, T, cost: 1

	Propagated Equalities

	Original rule:
	l0 -> l1 : __const_5^0'=__const_5^post1, x^0'=x^post1, (-1+x^post1 == 0 /\ -__const_5^post1+__const_5^0 == 0 /\ x^0 <= 0), cost: 1
	New rule:
	l0 -> l1 : __const_5^0'=__const_5^0, x^0'=1, (0 == 0 /\ x^0 <= 0), cost: 1
	
		propagated equality x^post1 = 1
		
		propagated equality __const_5^post1 = __const_5^0
		
	Simplified Guard

	Original rule:
	l0 -> l1 : __const_5^0'=__const_5^0, x^0'=1, (0 == 0 /\ x^0 <= 0), cost: 1
	New rule:
	l0 -> l1 : __const_5^0'=__const_5^0, x^0'=1, x^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l1 : __const_5^0'=__const_5^0, x^0'=1, x^0 <= 0, cost: 1
	New rule:
	l0 -> l1 : x^0'=1, x^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l0 -> l1 : __const_5^0'=__const_5^post2, x^0'=x^post2, (1-x^0 <= 0 /\ -1+x^post2-x^0 == 0 /\ __const_5^0-__const_5^post2 == 0), cost: 1
	New rule:
	l0 -> l1 : __const_5^0'=__const_5^0, x^0'=1+x^0, (0 == 0 /\ 1-x^0 <= 0), cost: 1
	
		propagated equality x^post2 = 1+x^0
		
		propagated equality __const_5^post2 = __const_5^0
		
	Simplified Guard

	Original rule:
	l0 -> l1 : __const_5^0'=__const_5^0, x^0'=1+x^0, (0 == 0 /\ 1-x^0 <= 0), cost: 1
	New rule:
	l0 -> l1 : __const_5^0'=__const_5^0, x^0'=1+x^0, 1-x^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l1 : __const_5^0'=__const_5^0, x^0'=1+x^0, 1-x^0 <= 0, cost: 1
	New rule:
	l0 -> l1 : x^0'=1+x^0, 1-x^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l2 -> l3 : __const_5^0'=__const_5^post3, x^0'=x^post3, (x^0-x^post3 == 0 /\ __const_5^0-__const_5^post3 == 0 /\ 4-x^0 <= 0), cost: 1
	New rule:
	l2 -> l3 : __const_5^0'=__const_5^0, x^0'=x^0, (0 == 0 /\ 4-x^0 <= 0), cost: 1
	
		propagated equality x^post3 = x^0
		
		propagated equality __const_5^post3 = __const_5^0
		
	Simplified Guard

	Original rule:
	l2 -> l3 : __const_5^0'=__const_5^0, x^0'=x^0, (0 == 0 /\ 4-x^0 <= 0), cost: 1
	New rule:
	l2 -> l3 : __const_5^0'=__const_5^0, x^0'=x^0, 4-x^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l2 -> l3 : __const_5^0'=__const_5^0, x^0'=x^0, 4-x^0 <= 0, cost: 1
	New rule:
	l2 -> l3 : 4-x^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l2 -> l0 : __const_5^0'=__const_5^post4, x^0'=x^post4, (-3+x^0 <= 0 /\ -x^post4+x^0 == 0 /\ -__const_5^post4+__const_5^0 == 0), cost: 1
	New rule:
	l2 -> l0 : __const_5^0'=__const_5^0, x^0'=x^0, (0 == 0 /\ -3+x^0 <= 0), cost: 1
	
		propagated equality x^post4 = x^0
		
		propagated equality __const_5^post4 = __const_5^0
		
	Simplified Guard

	Original rule:
	l2 -> l0 : __const_5^0'=__const_5^0, x^0'=x^0, (0 == 0 /\ -3+x^0 <= 0), cost: 1
	New rule:
	l2 -> l0 : __const_5^0'=__const_5^0, x^0'=x^0, -3+x^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l2 -> l0 : __const_5^0'=__const_5^0, x^0'=x^0, -3+x^0 <= 0, cost: 1
	New rule:
	l2 -> l0 : -3+x^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l1 -> l2 : __const_5^0'=__const_5^post5, x^0'=x^post5, (-x^post5+x^0 == 0 /\ __const_5^0-__const_5^post5 == 0), cost: 1
	New rule:
	l1 -> l2 : __const_5^0'=__const_5^0, x^0'=x^0, 0 == 0, cost: 1
	
		propagated equality x^post5 = x^0
		
		propagated equality __const_5^post5 = __const_5^0
		
	Simplified Guard

	Original rule:
	l1 -> l2 : __const_5^0'=__const_5^0, x^0'=x^0, 0 == 0, cost: 1
	New rule:
	l1 -> l2 : __const_5^0'=__const_5^0, x^0'=x^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l1 -> l2 : __const_5^0'=__const_5^0, x^0'=x^0, T, cost: 1
	New rule:
	l1 -> l2 : T, cost: 1
	
	Propagated Equalities

	Original rule:
	l5 -> l1 : __const_5^0'=__const_5^post6, x^0'=x^post6, (0 == 0 /\ __const_5^post7-__const_5^post6 == 0 /\ -__const_5^post7+x^1 == 0 /\ -x^post7+x^0 == 0 /\ __const_5^0-__const_5^post7 == 0), cost: 1
	New rule:
	l5 -> l1 : __const_5^0'=__const_5^post7, x^0'=x^post6, (0 == 0 /\ -__const_5^post7+x^1 == 0 /\ -x^post7+x^0 == 0 /\ __const_5^0-__const_5^post7 == 0), cost: 1
	
		propagated equality __const_5^post6 = __const_5^post7
		
	Propagated Equalities

	Original rule:
	l5 -> l1 : __const_5^0'=__const_5^post7, x^0'=x^post6, (0 == 0 /\ -__const_5^post7+x^1 == 0 /\ -x^post7+x^0 == 0 /\ __const_5^0-__const_5^post7 == 0), cost: 1
	New rule:
	l5 -> l1 : __const_5^0'=__const_5^0, x^0'=x^post6, 0 == 0, cost: 1
	
		propagated equality __const_5^post7 = x^1
		
		propagated equality x^post7 = x^0
		
		propagated equality x^1 = __const_5^0
		
	Simplified Guard

	Original rule:
	l5 -> l1 : __const_5^0'=__const_5^0, x^0'=x^post6, 0 == 0, cost: 1
	New rule:
	l5 -> l1 : __const_5^0'=__const_5^0, x^0'=x^post6, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l5 -> l1 : __const_5^0'=__const_5^0, x^0'=x^post6, T, cost: 1
	New rule:
	l5 -> l1 : x^0'=x^post6, T, cost: 1

Step with 13

	Trace

	13[T]
	
	Blocked

	[{}, {}]

Step with 12

	Trace

	13[T], 12[T]
	
	Blocked

	[{}, {}, {}]

Step with 10

	Trace

	13[T], 12[T], 10[(4-x^0 <= 0)]
	
	Blocked

	[{}, {}, {}, {}]

Backtrack

	Trace

	13[T], 12[T]
	
	Blocked

	[{}, {}, {10[T]}]

Step with 11

	Trace

	13[T], 12[T], 11[(-3+x^0 <= 0)]
	
	Blocked

	[{}, {}, {10[T]}, {}]

Step with 8

	Trace

	13[T], 12[T], 11[(-3+x^0 <= 0)], 8[(x^0 <= 0)]
	
	Blocked

	[{}, {}, {10[T]}, {}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 12

	Trace

	13[T], 12[T], 11[(-3+x^0 <= 0)], 8[(x^0 <= 0)], 12[T]
	
	Blocked

	[{}, {}, {10[T]}, {}, {}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 11

	Trace

	13[T], 12[T], 11[(-3+x^0 <= 0)], 8[(x^0 <= 0)], 12[T], 11[(-3+x^0 <= 0)]
	
	Blocked

	[{}, {}, {10[T]}, {}, {}, {}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 9

	Trace

	13[T], 12[T], 11[(-3+x^0 <= 0)], 8[(x^0 <= 0)], 12[T], 11[(-3+x^0 <= 0)], 9[(1-x^0 <= 0)]
	
	Blocked

	[{}, {}, {10[T]}, {}, {}, {}, {8[T]}, {}]

Accelerate

Start location: l5
Program variables: x^0
   8: l0 -> l1 : x^0'=1, x^0 <= 0, cost: 1
   9: l0 -> l1 : x^0'=1+x^0, 1-x^0 <= 0, cost: 1
  12: l1 -> l2 : T, cost: 1
  14: l1 -> l1 : x^0'=n+x^0, (-1+n >= 0 /\ -1+x^0 >= 0 /\ 4-n-x^0 >= 0), cost: 1
  10: l2 -> l3 : 4-x^0 <= 0, cost: 1
  11: l2 -> l0 : -3+x^0 <= 0, cost: 1
  13: l5 -> l1 : x^0'=x^post6, T, cost: 1

	Loop Acceleration

	Original rule:
	l1 -> l1 : x^0'=1+x^0, (1-x^0 <= 0 /\ -3+x^0 <= 0), cost: 1
	New rule:
	l1 -> l1 : x^0'=n+x^0, (-1+n >= 0 /\ -1+x^0 >= 0 /\ 4-n-x^0 >= 0), cost: 1

		3-x^0 >= 0 [0]: montonic decrease yields 4-n-x^0 >= 0
		
		3-x^0 >= 0 [1]: eventual increase yields (3-x^0 >= 0 /\ 1 <= 0)
		
		-1+x^0 >= 0 [0]: monotonic increase yields -1+x^0 >= 0
		
		Replacement map: {3-x^0 >= 0 -> 4-n-x^0 >= 0, -1+x^0 >= 0 -> -1+x^0 >= 0}

	Trace

	13[T], 12[T], 11[(-3+x^0 <= 0)], 8[(x^0 <= 0)], 14[(-1+n >= 0 /\ -1+x^0 >= 0 /\ 4-n-x^0 >= 0)]
	
	Blocked

	[{}, {}, {10[T]}, {}, {}, {14[T]}]

Acceleration Failed

marked recursive suffix as redundant

Step with 12

	Trace

	13[T], 12[T], 11[(-3+x^0 <= 0)], 8[(x^0 <= 0)], 14[(-1+n >= 0 /\ -1+x^0 >= 0 /\ 4-n-x^0 >= 0)], 12[T]
	
	Blocked

	[{}, {}, {10[T]}, {}, {}, {14[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 11

	Trace

	13[T], 12[T], 11[(-3+x^0 <= 0)], 8[(x^0 <= 0)], 14[(-1+n >= 0 /\ -1+x^0 >= 0 /\ 4-n-x^0 >= 0)], 12[T], 11[(-3+x^0 <= 0)]
	
	Blocked

	[{}, {}, {10[T]}, {}, {}, {14[T]}, {}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 9

	Trace

	13[T], 12[T], 11[(-3+x^0 <= 0)], 8[(x^0 <= 0)], 14[(-1+n >= 0 /\ -1+x^0 >= 0 /\ 4-n-x^0 >= 0)], 12[T], 11[(-3+x^0 <= 0)], 9[(1-x^0 <= 0)]
	
	Blocked

	[{}, {}, {10[T]}, {}, {}, {14[T]}, {}, {}, {}]

Covered

	Trace

	13[T], 12[T], 11[(-3+x^0 <= 0)], 8[(x^0 <= 0)], 14[(-1+n >= 0 /\ -1+x^0 >= 0 /\ 4-n-x^0 >= 0)], 12[T], 11[(-3+x^0 <= 0)]
	
	Blocked

	[{}, {}, {10[T]}, {}, {}, {14[T]}, {}, {9[T]}]

Backtrack

	Trace

	13[T], 12[T], 11[(-3+x^0 <= 0)], 8[(x^0 <= 0)], 14[(-1+n >= 0 /\ -1+x^0 >= 0 /\ 4-n-x^0 >= 0)], 12[T]
	
	Blocked

	[{}, {}, {10[T]}, {}, {}, {14[T]}, {11[T]}]

Step with 10

	Trace

	13[T], 12[T], 11[(-3+x^0 <= 0)], 8[(x^0 <= 0)], 14[(-1+n >= 0 /\ -1+x^0 >= 0 /\ 4-n-x^0 >= 0)], 12[T], 10[(4-x^0 <= 0)]
	
	Blocked

	[{}, {}, {10[T]}, {}, {}, {14[T]}, {11[T]}, {}]

Backtrack

	Trace

	13[T], 12[T], 11[(-3+x^0 <= 0)], 8[(x^0 <= 0)], 14[(-1+n >= 0 /\ -1+x^0 >= 0 /\ 4-n-x^0 >= 0)], 12[T]
	
	Blocked

	[{}, {}, {10[T]}, {}, {}, {14[T]}, {10[T], 11[T]}]

Backtrack

	Trace

	13[T], 12[T], 11[(-3+x^0 <= 0)], 8[(x^0 <= 0)], 14[(-1+n >= 0 /\ -1+x^0 >= 0 /\ 4-n-x^0 >= 0)]
	
	Blocked

	[{}, {}, {10[T]}, {}, {}, {12[T], 14[T]}]

Backtrack

	Trace

	13[T], 12[T], 11[(-3+x^0 <= 0)], 8[(x^0 <= 0)]
	
	Blocked

	[{}, {}, {10[T]}, {}, {14[T]}]

Step with 12

	Trace

	13[T], 12[T], 11[(-3+x^0 <= 0)], 8[(x^0 <= 0)], 12[T]
	
	Blocked

	[{}, {}, {10[T]}, {}, {14[T]}, {}]

Step with 11

	Trace

	13[T], 12[T], 11[(-3+x^0 <= 0)], 8[(x^0 <= 0)], 12[T], 11[(-3+x^0 <= 0)]
	
	Blocked

	[{}, {}, {10[T]}, {}, {14[T]}, {10[T]}, {}]

Step with 9

	Trace

	13[T], 12[T], 11[(-3+x^0 <= 0)], 8[(x^0 <= 0)], 12[T], 11[(-3+x^0 <= 0)], 9[(1-x^0 <= 0)]
	
	Blocked

	[{}, {}, {10[T]}, {}, {14[T]}, {10[T]}, {}, {}]

Covered

	Trace

	13[T], 12[T], 11[(-3+x^0 <= 0)], 8[(x^0 <= 0)], 12[T], 11[(-3+x^0 <= 0)]
	
	Blocked

	[{}, {}, {10[T]}, {}, {14[T]}, {10[T]}, {9[T]}]

Backtrack

	Trace

	13[T], 12[T], 11[(-3+x^0 <= 0)], 8[(x^0 <= 0)], 12[T]
	
	Blocked

	[{}, {}, {10[T]}, {}, {14[T]}, {10[T], 11[T]}]

Backtrack

	Trace

	13[T], 12[T], 11[(-3+x^0 <= 0)], 8[(x^0 <= 0)]
	
	Blocked

	[{}, {}, {10[T]}, {}, {12[T], 14[T]}]

Backtrack

	Trace

	13[T], 12[T], 11[(-3+x^0 <= 0)]
	
	Blocked

	[{}, {}, {10[T]}, {8[T]}]

Step with 9

	Trace

	13[T], 12[T], 11[(-3+x^0 <= 0)], 9[(1-x^0 <= 0)]
	
	Blocked

	[{}, {}, {10[T]}, {8[T]}, {}]

Covered

	Trace

	13[T], 12[T], 11[(-3+x^0 <= 0)]
	
	Blocked

	[{}, {}, {10[T]}, {8[T], 9[T]}]

Backtrack

	Trace

	13[T], 12[T]
	
	Blocked

	[{}, {}, {10[T], 11[T]}]

Backtrack

	Trace

	13[T]
	
	Blocked

	[{}, {12[T]}]

Step with 14

	Trace

	13[T], 14[(-1+n >= 0 /\ -1+x^0 >= 0 /\ 4-n-x^0 >= 0)]
	
	Blocked

	[{}, {12[T]}, {14[T]}]

Step with 12

	Trace

	13[T], 14[(-1+n >= 0 /\ -1+x^0 >= 0 /\ 4-n-x^0 >= 0)], 12[T]
	
	Blocked

	[{}, {12[T]}, {14[T]}, {}]

Step with 11

	Trace

	13[T], 14[(-1+n >= 0 /\ -1+x^0 >= 0 /\ 4-n-x^0 >= 0)], 12[T], 11[(-3+x^0 <= 0)]
	
	Blocked

	[{}, {12[T]}, {14[T]}, {}, {}]

Step with 9

	Trace

	13[T], 14[(-1+n >= 0 /\ -1+x^0 >= 0 /\ 4-n-x^0 >= 0)], 12[T], 11[(-3+x^0 <= 0)], 9[(1-x^0 <= 0)]
	
	Blocked

	[{}, {12[T]}, {14[T]}, {}, {}, {}]

Covered

	Trace

	13[T], 14[(-1+n >= 0 /\ -1+x^0 >= 0 /\ 4-n-x^0 >= 0)], 12[T], 11[(-3+x^0 <= 0)]
	
	Blocked

	[{}, {12[T]}, {14[T]}, {}, {9[T]}]

Backtrack

	Trace

	13[T], 14[(-1+n >= 0 /\ -1+x^0 >= 0 /\ 4-n-x^0 >= 0)], 12[T]
	
	Blocked

	[{}, {12[T]}, {14[T]}, {11[T]}]

Step with 10

	Trace

	13[T], 14[(-1+n >= 0 /\ -1+x^0 >= 0 /\ 4-n-x^0 >= 0)], 12[T], 10[(4-x^0 <= 0)]
	
	Blocked

	[{}, {12[T]}, {14[T]}, {11[T]}, {}]

Backtrack

	Trace

	13[T], 14[(-1+n >= 0 /\ -1+x^0 >= 0 /\ 4-n-x^0 >= 0)], 12[T]
	
	Blocked

	[{}, {12[T]}, {14[T]}, {10[T], 11[T]}]

Backtrack

	Trace

	13[T], 14[(-1+n >= 0 /\ -1+x^0 >= 0 /\ 4-n-x^0 >= 0)]
	
	Blocked

	[{}, {12[T]}, {12[T], 14[T]}]

Backtrack

	Trace

	13[T]
	
	Blocked

	[{}, {12[T], 14[T]}]

Backtrack

	Trace

	Blocked

	[{13[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
