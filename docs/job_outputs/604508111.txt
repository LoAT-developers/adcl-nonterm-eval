NO

Initial ITS

Start location: __init
Program variables: arg1 arg2
   0: f1_0_main_ConstantStackPush -> f79_0_main_GE : arg1'=arg1p1, arg2'=arg2p1, (100-arg2p1 == 0 /\ -arg1p1 == 0), cost: 1
   1: f79_0_main_GE -> f79_0_main_GE : arg1'=arg1p2, arg2'=arg2p2, (-1+arg1-arg1p2 == 0 /\ -arg1+arg2 > 0 /\ -52+arg2 < 0 /\ 1-arg2p2+arg2 == 0), cost: 1
   2: f79_0_main_GE -> f79_0_main_GE : arg1'=arg1p3, arg2'=arg2p3, (-arg1+arg2 > 0 /\ -1+arg2-arg2p3 == 0 /\ 1+arg1-arg1p3 == 0 /\ -51+arg2 > 0), cost: 1
   3: __init -> f1_0_main_ConstantStackPush : arg1'=arg1p4, arg2'=arg2p4, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2
   1: f79_0_main_GE -> f79_0_main_GE : arg1'=arg1p2, arg2'=arg2p2, (-1+arg1-arg1p2 == 0 /\ -arg1+arg2 > 0 /\ -52+arg2 < 0 /\ 1-arg2p2+arg2 == 0), cost: 1
   2: f79_0_main_GE -> f79_0_main_GE : arg1'=arg1p3, arg2'=arg2p3, (-arg1+arg2 > 0 /\ -1+arg2-arg2p3 == 0 /\ 1+arg1-arg1p3 == 0 /\ -51+arg2 > 0), cost: 1
   4: __init -> f79_0_main_GE : arg1'=arg1p1, arg2'=arg2p1, (100-arg2p1 == 0 /\ -arg1p1 == 0), cost: 1

	Eliminating location f1_0_main_ConstantStackPush by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_ConstantStackPush : arg1'=arg1p4, arg2'=arg2p4, T, cost: 1
	Second rule:
	f1_0_main_ConstantStackPush -> f79_0_main_GE : arg1'=arg1p1, arg2'=arg2p1, (100-arg2p1 == 0 /\ -arg1p1 == 0), cost: 1
	New rule:
	__init -> f79_0_main_GE : arg1'=arg1p1, arg2'=arg2p1, (100-arg2p1 == 0 /\ -arg1p1 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 3

Simplified Transitions

Start location: __init
Program variables: arg1 arg2
   5: f79_0_main_GE -> f79_0_main_GE : arg1'=-1+arg1, arg2'=1+arg2, (-arg1+arg2 > 0 /\ -52+arg2 < 0), cost: 1
   6: f79_0_main_GE -> f79_0_main_GE : arg1'=1+arg1, arg2'=-1+arg2, (-arg1+arg2 > 0 /\ -51+arg2 > 0), cost: 1
   7: __init -> f79_0_main_GE : arg1'=0, arg2'=100, T, cost: 1

	Propagated Equalities

	Original rule:
	f79_0_main_GE -> f79_0_main_GE : arg1'=arg1p2, arg2'=arg2p2, (-1+arg1-arg1p2 == 0 /\ -arg1+arg2 > 0 /\ -52+arg2 < 0 /\ 1-arg2p2+arg2 == 0), cost: 1
	New rule:
	f79_0_main_GE -> f79_0_main_GE : arg1'=-1+arg1, arg2'=1+arg2, (0 == 0 /\ -arg1+arg2 > 0 /\ -52+arg2 < 0), cost: 1
	
		propagated equality arg1p2 = -1+arg1
		
		propagated equality arg2p2 = 1+arg2
		
	Simplified Guard

	Original rule:
	f79_0_main_GE -> f79_0_main_GE : arg1'=-1+arg1, arg2'=1+arg2, (0 == 0 /\ -arg1+arg2 > 0 /\ -52+arg2 < 0), cost: 1
	New rule:
	f79_0_main_GE -> f79_0_main_GE : arg1'=-1+arg1, arg2'=1+arg2, (-arg1+arg2 > 0 /\ -52+arg2 < 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f79_0_main_GE -> f79_0_main_GE : arg1'=arg1p3, arg2'=arg2p3, (-arg1+arg2 > 0 /\ -1+arg2-arg2p3 == 0 /\ 1+arg1-arg1p3 == 0 /\ -51+arg2 > 0), cost: 1
	New rule:
	f79_0_main_GE -> f79_0_main_GE : arg1'=1+arg1, arg2'=-1+arg2, (0 == 0 /\ -arg1+arg2 > 0 /\ -51+arg2 > 0), cost: 1
	
		propagated equality arg2p3 = -1+arg2
		
		propagated equality arg1p3 = 1+arg1
		
	Simplified Guard

	Original rule:
	f79_0_main_GE -> f79_0_main_GE : arg1'=1+arg1, arg2'=-1+arg2, (0 == 0 /\ -arg1+arg2 > 0 /\ -51+arg2 > 0), cost: 1
	New rule:
	f79_0_main_GE -> f79_0_main_GE : arg1'=1+arg1, arg2'=-1+arg2, (-arg1+arg2 > 0 /\ -51+arg2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	__init -> f79_0_main_GE : arg1'=arg1p1, arg2'=arg2p1, (100-arg2p1 == 0 /\ -arg1p1 == 0), cost: 1
	New rule:
	__init -> f79_0_main_GE : arg1'=0, arg2'=100, 0 == 0, cost: 1
	
		propagated equality arg2p1 = 100
		
		propagated equality arg1p1 = 0
		
	Simplified Guard

	Original rule:
	__init -> f79_0_main_GE : arg1'=0, arg2'=100, 0 == 0, cost: 1
	New rule:
	__init -> f79_0_main_GE : arg1'=0, arg2'=100, T, cost: 1

Step with 7

	Trace

	7[T]
	
	Blocked

	[{}, {}]

Step with 6

	Trace

	7[T], 6[(-arg1+arg2 > 0 /\ -51+arg2 > 0)]
	
	Blocked

	[{}, {5[T]}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2
   5: f79_0_main_GE -> f79_0_main_GE : arg1'=-1+arg1, arg2'=1+arg2, (-arg1+arg2 > 0 /\ -52+arg2 < 0), cost: 1
   6: f79_0_main_GE -> f79_0_main_GE : arg1'=1+arg1, arg2'=-1+arg2, (-arg1+arg2 > 0 /\ -51+arg2 > 0), cost: 1
   8: f79_0_main_GE -> f79_0_main_GE : arg1'=arg1+n, arg2'=-n+arg2, (2-arg1-2*n+arg2 > 0 /\ -1+n >= 0 /\ -50-n+arg2 > 0), cost: 1
   7: __init -> f79_0_main_GE : arg1'=0, arg2'=100, T, cost: 1

	Loop Acceleration

	Original rule:
	f79_0_main_GE -> f79_0_main_GE : arg1'=1+arg1, arg2'=-1+arg2, (-arg1+arg2 > 0 /\ -51+arg2 > 0), cost: 1
	New rule:
	f79_0_main_GE -> f79_0_main_GE : arg1'=arg1+n, arg2'=-n+arg2, (2-arg1-2*n+arg2 > 0 /\ -1+n >= 0 /\ -50-n+arg2 > 0), cost: 1

		-arg1+arg2 > 0 [0]: montonic decrease yields 2-arg1-2*n+arg2 > 0
		
		-arg1+arg2 > 0 [1]: eventual increase yields (-arg1+arg2 > 0 /\ 2 <= 0)
		
		-51+arg2 > 0 [0]: montonic decrease yields -50-n+arg2 > 0
		
		-51+arg2 > 0 [1]: eventual increase yields (1 <= 0 /\ -51+arg2 > 0)
		
		Replacement map: {-arg1+arg2 > 0 -> 2-arg1-2*n+arg2 > 0, -51+arg2 > 0 -> -50-n+arg2 > 0}

	Trace

	7[T], 8[(2-arg1-2*n+arg2 > 0 /\ -1+n >= 0 /\ -50-n+arg2 > 0)]
	
	Blocked

	[{}, {5[T]}, {6[T], 8[T]}]

Step with 5

	Trace

	7[T], 8[(2-arg1-2*n+arg2 > 0 /\ -1+n >= 0 /\ -50-n+arg2 > 0)], 5[(-arg1+arg2 > 0 /\ -52+arg2 < 0)]
	
	Blocked

	[{}, {5[T]}, {6[T], 8[T]}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2
   5: f79_0_main_GE -> f79_0_main_GE : arg1'=-1+arg1, arg2'=1+arg2, (-arg1+arg2 > 0 /\ -52+arg2 < 0), cost: 1
   6: f79_0_main_GE -> f79_0_main_GE : arg1'=1+arg1, arg2'=-1+arg2, (-arg1+arg2 > 0 /\ -51+arg2 > 0), cost: 1
   8: f79_0_main_GE -> f79_0_main_GE : arg1'=arg1+n, arg2'=-n+arg2, (2-arg1-2*n+arg2 > 0 /\ -1+n >= 0 /\ -50-n+arg2 > 0), cost: 1
   9: f79_0_main_GE -> f79_0_main_GE : arg1'=-n2+arg1, arg2'=n2+arg2, (-arg1+arg2 > 0 /\ -1+n2 >= 0 /\ 53-n2-arg2 > 0), cost: 1
   7: __init -> f79_0_main_GE : arg1'=0, arg2'=100, T, cost: 1

	Loop Acceleration

	Original rule:
	f79_0_main_GE -> f79_0_main_GE : arg1'=-1+arg1, arg2'=1+arg2, (-arg1+arg2 > 0 /\ -52+arg2 < 0), cost: 1
	New rule:
	f79_0_main_GE -> f79_0_main_GE : arg1'=-n2+arg1, arg2'=n2+arg2, (-arg1+arg2 > 0 /\ -1+n2 >= 0 /\ 53-n2-arg2 > 0), cost: 1

		-arg1+arg2 > 0 [0]: monotonic increase yields -arg1+arg2 > 0
		
		52-arg2 > 0 [0]: montonic decrease yields 53-n2-arg2 > 0
		
		52-arg2 > 0 [1]: eventual increase yields (1 <= 0 /\ 52-arg2 > 0)
		
		Replacement map: {-arg1+arg2 > 0 -> -arg1+arg2 > 0, 52-arg2 > 0 -> 53-n2-arg2 > 0}

	Trace

	7[T], 8[(2-arg1-2*n+arg2 > 0 /\ -1+n >= 0 /\ -50-n+arg2 > 0)], 9[(-arg1+arg2 > 0 /\ -1+n2 >= 0 /\ 53-n2-arg2 > 0)]
	
	Blocked

	[{}, {5[T]}, {6[T], 8[T]}, {5[T], 9[T]}]

Accelerate

Start location: __init
Program variables: arg1 arg2
   5: f79_0_main_GE -> f79_0_main_GE : arg1'=-1+arg1, arg2'=1+arg2, (-arg1+arg2 > 0 /\ -52+arg2 < 0), cost: 1
   6: f79_0_main_GE -> f79_0_main_GE : arg1'=1+arg1, arg2'=-1+arg2, (-arg1+arg2 > 0 /\ -51+arg2 > 0), cost: 1
   8: f79_0_main_GE -> f79_0_main_GE : arg1'=arg1+n, arg2'=-n+arg2, (2-arg1-2*n+arg2 > 0 /\ -1+n >= 0 /\ -50-n+arg2 > 0), cost: 1
   9: f79_0_main_GE -> f79_0_main_GE : arg1'=-n2+arg1, arg2'=n2+arg2, (-arg1+arg2 > 0 /\ -1+n2 >= 0 /\ 53-n2-arg2 > 0), cost: 1
  10: f79_0_main_GE -> LoAT_sink : (-1+n2 >= 0 /\ -50-n1+arg2 > 0 /\ -n2+n1 <= 0 /\ 53-n2+n1-arg2 > 0 /\ -arg1-2*n1+arg2 > 0 /\ 2-arg1-2*n1+arg2 > 0 /\ -2*n2+2*n1 <= 0 /\ -1+n1 >= 0), cost: NONTERM
  11: f79_0_main_GE -> f79_0_main_GE : arg1'=-n2*n3+arg1+n1*n3, arg2'=n2*n3-n1*n3+arg2, (2*n2*(-1+n3)-arg1-2*n1+arg2-2*(-1+n3)*n1 > 0 /\ -1+n3 >= 0 /\ -1+n2 >= 0 /\ 2+2*n2*(-1+n3)-arg1-2*n1+arg2-2*(-1+n3)*n1 > 0 /\ -50-n1+arg2 > 0 /\ 53-n2+n1-arg2 > 0 /\ -50+n2*(-1+n3)-n1+arg2-(-1+n3)*n1 > 0 /\ -1+n1 >= 0), cost: 1
   7: __init -> f79_0_main_GE : arg1'=0, arg2'=100, T, cost: 1

	Certificate of Non-Termination

	Original rule:
	f79_0_main_GE -> f79_0_main_GE : arg1'=-n2+arg1+n1, arg2'=n2-n1+arg2, (-1+n2 >= 0 /\ -50-n1+arg2 > 0 /\ 53-n2+n1-arg2 > 0 /\ -arg1-2*n1+arg2 > 0 /\ 2-arg1-2*n1+arg2 > 0 /\ -1+n1 >= 0), cost: 1
	New rule:
	f79_0_main_GE -> LoAT_sink : (-1+n2 >= 0 /\ -50-n1+arg2 > 0 /\ -n2+n1 <= 0 /\ 53-n2+n1-arg2 > 0 /\ -arg1-2*n1+arg2 > 0 /\ 2-arg1-2*n1+arg2 > 0 /\ -2*n2+2*n1 <= 0 /\ -1+n1 >= 0), cost: NONTERM

		-1+n2 >= 0 [0]: monotonic increase yields -1+n2 >= 0
		
		-50-n1+arg2 > 0 [0]: eventual decrease yields (-50-n1+arg2 > 0 /\ -50+n2*(-1+n3)-n1+arg2-(-1+n3)*n1 > 0)
		
		-50-n1+arg2 > 0 [1]: eventual increase yields (-50-n1+arg2 > 0 /\ -n2+n1 <= 0)
		
		53-n2+n1-arg2 > 0 [0]: monotonic increase yields 53-n2+n1-arg2 > 0, dependencies: -50-n1+arg2 > 0 -1+n1 >= 0
		
		53-n2+n1-arg2 > 0 [1]: eventual decrease yields (53-n2-n2*(-1+n3)+n1-arg2+(-1+n3)*n1 > 0 /\ 53-n2+n1-arg2 > 0)
		
		53-n2+n1-arg2 > 0 [2]: eventual increase yields (n2-n1 <= 0 /\ 53-n2+n1-arg2 > 0)
		
		-arg1-2*n1+arg2 > 0 [0]: montonic decrease yields 2*n2*(-1+n3)-arg1-2*n1+arg2-2*(-1+n3)*n1 > 0, dependencies: -50-n1+arg2 > 0 53-n2+n1-arg2 > 0 -1+n1 >= 0
		
		-arg1-2*n1+arg2 > 0 [1]: eventual decrease yields (2*n2*(-1+n3)-arg1-2*n1+arg2-2*(-1+n3)*n1 > 0 /\ -arg1-2*n1+arg2 > 0)
		
		-arg1-2*n1+arg2 > 0 [2]: eventual increase yields (-arg1-2*n1+arg2 > 0 /\ -2*n2+2*n1 <= 0)
		
		2-arg1-2*n1+arg2 > 0 [0]: montonic decrease yields 2+2*n2*(-1+n3)-arg1-2*n1+arg2-2*(-1+n3)*n1 > 0, dependencies: -arg1-2*n1+arg2 > 0
		
		2-arg1-2*n1+arg2 > 0 [1]: eventual increase yields (2-arg1-2*n1+arg2 > 0 /\ -2*n2+2*n1 <= 0)
		
		-1+n1 >= 0 [0]: monotonic increase yields -1+n1 >= 0
		
		Replacement map: {-1+n2 >= 0 -> -1+n2 >= 0, -50-n1+arg2 > 0 -> (-50-n1+arg2 > 0 /\ -n2+n1 <= 0), 53-n2+n1-arg2 > 0 -> 53-n2+n1-arg2 > 0, -arg1-2*n1+arg2 > 0 -> (-arg1-2*n1+arg2 > 0 /\ -2*n2+2*n1 <= 0), 2-arg1-2*n1+arg2 > 0 -> (2-arg1-2*n1+arg2 > 0 /\ -2*n2+2*n1 <= 0), -1+n1 >= 0 -> -1+n1 >= 0}

	Loop Acceleration

	Original rule:
	f79_0_main_GE -> f79_0_main_GE : arg1'=-n2+arg1+n1, arg2'=n2-n1+arg2, (-1+n2 >= 0 /\ -50-n1+arg2 > 0 /\ 53-n2+n1-arg2 > 0 /\ -arg1-2*n1+arg2 > 0 /\ 2-arg1-2*n1+arg2 > 0 /\ -1+n1 >= 0), cost: 1
	New rule:
	f79_0_main_GE -> f79_0_main_GE : arg1'=-n2*n3+arg1+n1*n3, arg2'=n2*n3-n1*n3+arg2, (2*n2*(-1+n3)-arg1-2*n1+arg2-2*(-1+n3)*n1 > 0 /\ -1+n3 >= 0 /\ -1+n2 >= 0 /\ 2+2*n2*(-1+n3)-arg1-2*n1+arg2-2*(-1+n3)*n1 > 0 /\ -50-n1+arg2 > 0 /\ 53-n2+n1-arg2 > 0 /\ -50+n2*(-1+n3)-n1+arg2-(-1+n3)*n1 > 0 /\ -1+n1 >= 0), cost: 1

		-1+n2 >= 0 [0]: monotonic increase yields -1+n2 >= 0
		
		-50-n1+arg2 > 0 [0]: eventual decrease yields (-50-n1+arg2 > 0 /\ -50+n2*(-1+n3)-n1+arg2-(-1+n3)*n1 > 0)
		
		-50-n1+arg2 > 0 [1]: eventual increase yields (-50-n1+arg2 > 0 /\ -n2+n1 <= 0)
		
		53-n2+n1-arg2 > 0 [0]: monotonic increase yields 53-n2+n1-arg2 > 0, dependencies: -50-n1+arg2 > 0 -1+n1 >= 0
		
		53-n2+n1-arg2 > 0 [1]: eventual decrease yields (53-n2-n2*(-1+n3)+n1-arg2+(-1+n3)*n1 > 0 /\ 53-n2+n1-arg2 > 0)
		
		53-n2+n1-arg2 > 0 [2]: eventual increase yields (n2-n1 <= 0 /\ 53-n2+n1-arg2 > 0)
		
		-arg1-2*n1+arg2 > 0 [0]: montonic decrease yields 2*n2*(-1+n3)-arg1-2*n1+arg2-2*(-1+n3)*n1 > 0, dependencies: -50-n1+arg2 > 0 53-n2+n1-arg2 > 0 -1+n1 >= 0
		
		-arg1-2*n1+arg2 > 0 [1]: eventual decrease yields (2*n2*(-1+n3)-arg1-2*n1+arg2-2*(-1+n3)*n1 > 0 /\ -arg1-2*n1+arg2 > 0)
		
		-arg1-2*n1+arg2 > 0 [2]: eventual increase yields (-arg1-2*n1+arg2 > 0 /\ -2*n2+2*n1 <= 0)
		
		2-arg1-2*n1+arg2 > 0 [0]: montonic decrease yields 2+2*n2*(-1+n3)-arg1-2*n1+arg2-2*(-1+n3)*n1 > 0, dependencies: -arg1-2*n1+arg2 > 0
		
		2-arg1-2*n1+arg2 > 0 [1]: eventual increase yields (2-arg1-2*n1+arg2 > 0 /\ -2*n2+2*n1 <= 0)
		
		-1+n1 >= 0 [0]: monotonic increase yields -1+n1 >= 0
		
		Replacement map: {-1+n2 >= 0 -> -1+n2 >= 0, -50-n1+arg2 > 0 -> (-50-n1+arg2 > 0 /\ -50+n2*(-1+n3)-n1+arg2-(-1+n3)*n1 > 0), 53-n2+n1-arg2 > 0 -> 53-n2+n1-arg2 > 0, -arg1-2*n1+arg2 > 0 -> 2*n2*(-1+n3)-arg1-2*n1+arg2-2*(-1+n3)*n1 > 0, 2-arg1-2*n1+arg2 > 0 -> 2+2*n2*(-1+n3)-arg1-2*n1+arg2-2*(-1+n3)*n1 > 0, -1+n1 >= 0 -> -1+n1 >= 0}

	Trace

	7[T], 11[(2*n2*(-1+n3)-arg1-2*n1+arg2-2*(-1+n3)*n1 > 0 /\ -1+n3 >= 0 /\ -1+n2 >= 0 /\ 2+2*n2*(-1+n3)-arg1-2*n1+arg2-2*(-1+n3)*n1 > 0 /\ -50-n1+arg2 > 0 /\ 53-n2+n1-arg2 > 0 /\ -50+n2*(-1+n3)-n1+arg2-(-1+n3)*n1 > 0 /\ -1+n1 >= 0)]
	
	Blocked

	[{}, {5[T]}, {11[T]}]

Step with 10

	Trace

	7[T], 11[(2*n2*(-1+n3)-arg1-2*n1+arg2-2*(-1+n3)*n1 > 0 /\ -1+n3 >= 0 /\ -1+n2 >= 0 /\ 2+2*n2*(-1+n3)-arg1-2*n1+arg2-2*(-1+n3)*n1 > 0 /\ -50-n1+arg2 > 0 /\ 53-n2+n1-arg2 > 0 /\ -50+n2*(-1+n3)-n1+arg2-(-1+n3)*n1 > 0 /\ -1+n1 >= 0)], 10[(-1+n2 >= 0 /\ -50-n1+arg2 > 0 /\ -n2+n1 <= 0 /\ 53-n2+n1-arg2 > 0 /\ -arg1-2*n1+arg2 > 0 /\ 2-arg1-2*n1+arg2 > 0 /\ -2*n2+2*n1 <= 0 /\ -1+n1 >= 0)]
	
	Blocked

	[{}, {5[T]}, {11[T]}]

Refute

	Counterexample

	[ arg1=0 arg2=100 ] 7 [ arg1=48 arg2=52 ] 11 [ arg1=arg1 arg2=arg2 ] 10
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
