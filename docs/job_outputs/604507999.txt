NO

Initial ITS

Start location: __init
Program variables: arg1 arg2 arg3
   0: f1_0_main_Load -> f213_0_increase_LE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (1+arg1p1 > 0 /\ 1+arg2p1 > 0 /\ arg2p1-arg3p1+arg1p1 == 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1
   1: f213_0_increase_LE -> f213_0_increase_LE\' : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, (arg3-arg3p2 == 0 /\ arg3 > 0 /\ -2*x13+arg2 < 0 /\ -arg2p2+arg2 == 0 /\ -arg1p2+arg1 == 0 /\ 2+arg1 > 0), cost: 1
   2: f213_0_increase_LE -> f213_0_increase_LE\' : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, (arg3 > 0 /\ -arg2p3+arg2 == 0 /\ -2*x17+arg2 > 0 /\ -arg3p3+arg3 == 0 /\ 2+arg1 > 0 /\ -arg1p3+arg1 == 0), cost: 1
   4: f213_0_increase_LE -> f213_0_increase_LE\' : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, (-arg2p5+arg2 == 0 /\ arg3 > 0 /\ -2*x25+arg2 == 0 /\ 2+arg1 > 0 /\ arg3-arg3p5 == 0 /\ arg1-arg1p5 == 0), cost: 1
   3: f213_0_increase_LE\' -> f213_0_increase_LE : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, (-arg2p4+arg2 == 0 /\ arg3 > 0 /\ -2*x21+arg2 > 0 /\ 1+arg1-arg1p4 == 0 /\ -2-2*x21+arg2 < 0 /\ 2+arg1 > 0 /\ 1-arg3p4+arg1+arg2 == 0), cost: 1
   5: f213_0_increase_LE\' -> f213_0_increase_LE : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, (arg3 > 0 /\ -2-arg2p6+arg2 == 0 /\ -2-2*x29+arg2 < 0 /\ -2*x29+arg2 >= 0 /\ -2*x29+arg2 == 0 /\ 1-arg1p6+arg1 == 0 /\ 2+arg1 > 0 /\ -1+arg1-arg3p6+arg2 == 0), cost: 1
   6: __init -> f1_0_main_Load : arg1'=arg1p7, arg2'=arg2p7, arg3'=arg3p7, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2 arg3
   1: f213_0_increase_LE -> f213_0_increase_LE\' : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, (arg3-arg3p2 == 0 /\ arg3 > 0 /\ -2*x13+arg2 < 0 /\ -arg2p2+arg2 == 0 /\ -arg1p2+arg1 == 0 /\ 2+arg1 > 0), cost: 1
   2: f213_0_increase_LE -> f213_0_increase_LE\' : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, (arg3 > 0 /\ -arg2p3+arg2 == 0 /\ -2*x17+arg2 > 0 /\ -arg3p3+arg3 == 0 /\ 2+arg1 > 0 /\ -arg1p3+arg1 == 0), cost: 1
   4: f213_0_increase_LE -> f213_0_increase_LE\' : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, (-arg2p5+arg2 == 0 /\ arg3 > 0 /\ -2*x25+arg2 == 0 /\ 2+arg1 > 0 /\ arg3-arg3p5 == 0 /\ arg1-arg1p5 == 0), cost: 1
   3: f213_0_increase_LE\' -> f213_0_increase_LE : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, (-arg2p4+arg2 == 0 /\ arg3 > 0 /\ -2*x21+arg2 > 0 /\ 1+arg1-arg1p4 == 0 /\ -2-2*x21+arg2 < 0 /\ 2+arg1 > 0 /\ 1-arg3p4+arg1+arg2 == 0), cost: 1
   5: f213_0_increase_LE\' -> f213_0_increase_LE : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, (arg3 > 0 /\ -2-arg2p6+arg2 == 0 /\ -2-2*x29+arg2 < 0 /\ -2*x29+arg2 >= 0 /\ -2*x29+arg2 == 0 /\ 1-arg1p6+arg1 == 0 /\ 2+arg1 > 0 /\ -1+arg1-arg3p6+arg2 == 0), cost: 1
   7: __init -> f213_0_increase_LE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (1+arg1p1 > 0 /\ 1+arg2p1 > 0 /\ -1+arg2p7 > 0 /\ arg2p1-arg3p1+arg1p1 == 0 /\ arg1p7 > 0), cost: 1

	Eliminating location f1_0_main_Load by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_Load : arg1'=arg1p7, arg2'=arg2p7, arg3'=arg3p7, T, cost: 1
	Second rule:
	f1_0_main_Load -> f213_0_increase_LE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (1+arg1p1 > 0 /\ 1+arg2p1 > 0 /\ arg2p1-arg3p1+arg1p1 == 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1
	New rule:
	__init -> f213_0_increase_LE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (1+arg1p1 > 0 /\ 1+arg2p1 > 0 /\ -1+arg2p7 > 0 /\ arg2p1-arg3p1+arg1p1 == 0 /\ arg1p7 > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 6

Simplified Transitions

Start location: __init
Program variables: arg1 arg2 arg3
   8: f213_0_increase_LE -> f213_0_increase_LE\' : (arg3 > 0 /\ -2*x13+arg2 < 0 /\ 2+arg1 > 0), cost: 1
   9: f213_0_increase_LE -> f213_0_increase_LE\' : (arg3 > 0 /\ -2*x17+arg2 > 0 /\ 2+arg1 > 0), cost: 1
  11: f213_0_increase_LE -> f213_0_increase_LE\' : (arg3 > 0 /\ -2*x25+arg2 == 0 /\ 2+arg1 > 0), cost: 1
  10: f213_0_increase_LE\' -> f213_0_increase_LE : arg1'=1+arg1, arg3'=1+arg1+arg2, (1+2*x21-arg2 == 0 /\ arg3 > 0 /\ -2*x21+arg2 > 0 /\ -2-2*x21+arg2 < 0 /\ 2+arg1 > 0), cost: 1
  12: f213_0_increase_LE\' -> f213_0_increase_LE : arg1'=1+arg1, arg2'=-2+arg2, arg3'=-1+arg1+arg2, (arg3 > 0 /\ -2-2*x29+arg2 < 0 /\ -2*x29+arg2 >= 0 /\ -2*x29+arg2 == 0 /\ 2+arg1 > 0), cost: 1
  13: __init -> f213_0_increase_LE : arg1'=-arg2p1+arg3p1, arg2'=arg2p1, arg3'=arg3p1, (1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0), cost: 1

	Propagated Equalities

	Original rule:
	f213_0_increase_LE -> f213_0_increase_LE\' : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, (arg3-arg3p2 == 0 /\ arg3 > 0 /\ -2*x13+arg2 < 0 /\ -arg2p2+arg2 == 0 /\ -arg1p2+arg1 == 0 /\ 2+arg1 > 0), cost: 1
	New rule:
	f213_0_increase_LE -> f213_0_increase_LE\' : arg1'=arg1, arg2'=arg2, arg3'=arg3, (0 == 0 /\ arg3 > 0 /\ -2*x13+arg2 < 0 /\ 2+arg1 > 0), cost: 1
	
		propagated equality arg3p2 = arg3
		
		propagated equality arg2p2 = arg2
		
		propagated equality arg1p2 = arg1
		
	Simplified Guard

	Original rule:
	f213_0_increase_LE -> f213_0_increase_LE\' : arg1'=arg1, arg2'=arg2, arg3'=arg3, (0 == 0 /\ arg3 > 0 /\ -2*x13+arg2 < 0 /\ 2+arg1 > 0), cost: 1
	New rule:
	f213_0_increase_LE -> f213_0_increase_LE\' : arg1'=arg1, arg2'=arg2, arg3'=arg3, (arg3 > 0 /\ -2*x13+arg2 < 0 /\ 2+arg1 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f213_0_increase_LE -> f213_0_increase_LE\' : arg1'=arg1, arg2'=arg2, arg3'=arg3, (arg3 > 0 /\ -2*x13+arg2 < 0 /\ 2+arg1 > 0), cost: 1
	New rule:
	f213_0_increase_LE -> f213_0_increase_LE\' : (arg3 > 0 /\ -2*x13+arg2 < 0 /\ 2+arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f213_0_increase_LE -> f213_0_increase_LE\' : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, (arg3 > 0 /\ -arg2p3+arg2 == 0 /\ -2*x17+arg2 > 0 /\ -arg3p3+arg3 == 0 /\ 2+arg1 > 0 /\ -arg1p3+arg1 == 0), cost: 1
	New rule:
	f213_0_increase_LE -> f213_0_increase_LE\' : arg1'=arg1, arg2'=arg2, arg3'=arg3, (0 == 0 /\ arg3 > 0 /\ -2*x17+arg2 > 0 /\ 2+arg1 > 0), cost: 1
	
		propagated equality arg2p3 = arg2
		
		propagated equality arg3p3 = arg3
		
		propagated equality arg1p3 = arg1
		
	Simplified Guard

	Original rule:
	f213_0_increase_LE -> f213_0_increase_LE\' : arg1'=arg1, arg2'=arg2, arg3'=arg3, (0 == 0 /\ arg3 > 0 /\ -2*x17+arg2 > 0 /\ 2+arg1 > 0), cost: 1
	New rule:
	f213_0_increase_LE -> f213_0_increase_LE\' : arg1'=arg1, arg2'=arg2, arg3'=arg3, (arg3 > 0 /\ -2*x17+arg2 > 0 /\ 2+arg1 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f213_0_increase_LE -> f213_0_increase_LE\' : arg1'=arg1, arg2'=arg2, arg3'=arg3, (arg3 > 0 /\ -2*x17+arg2 > 0 /\ 2+arg1 > 0), cost: 1
	New rule:
	f213_0_increase_LE -> f213_0_increase_LE\' : (arg3 > 0 /\ -2*x17+arg2 > 0 /\ 2+arg1 > 0), cost: 1
	
	made implied equalities explicit

	Original rule:
	f213_0_increase_LE\' -> f213_0_increase_LE : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, (-arg2p4+arg2 == 0 /\ arg3 > 0 /\ -2*x21+arg2 > 0 /\ 1+arg1-arg1p4 == 0 /\ -2-2*x21+arg2 < 0 /\ 2+arg1 > 0 /\ 1-arg3p4+arg1+arg2 == 0), cost: 1
	New rule:
	f213_0_increase_LE\' -> f213_0_increase_LE : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, (1+2*x21-arg2 == 0 /\ -arg2p4+arg2 == 0 /\ arg3 > 0 /\ -2*x21+arg2 > 0 /\ 1+arg1-arg1p4 == 0 /\ -2-2*x21+arg2 < 0 /\ 2+arg1 > 0 /\ 1-arg3p4+arg1+arg2 == 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f213_0_increase_LE\' -> f213_0_increase_LE : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, (1+2*x21-arg2 == 0 /\ -arg2p4+arg2 == 0 /\ arg3 > 0 /\ -2*x21+arg2 > 0 /\ 1+arg1-arg1p4 == 0 /\ -2-2*x21+arg2 < 0 /\ 2+arg1 > 0 /\ 1-arg3p4+arg1+arg2 == 0), cost: 1
	New rule:
	f213_0_increase_LE\' -> f213_0_increase_LE : arg1'=1+arg1, arg2'=arg2, arg3'=1+arg1+arg2, (0 == 0 /\ 1+2*x21-arg2 == 0 /\ arg3 > 0 /\ -2*x21+arg2 > 0 /\ -2-2*x21+arg2 < 0 /\ 2+arg1 > 0), cost: 1
	
		propagated equality arg2p4 = arg2
		
		propagated equality arg1p4 = 1+arg1
		
		propagated equality arg3p4 = 1+arg1+arg2
		
	Simplified Guard

	Original rule:
	f213_0_increase_LE\' -> f213_0_increase_LE : arg1'=1+arg1, arg2'=arg2, arg3'=1+arg1+arg2, (0 == 0 /\ 1+2*x21-arg2 == 0 /\ arg3 > 0 /\ -2*x21+arg2 > 0 /\ -2-2*x21+arg2 < 0 /\ 2+arg1 > 0), cost: 1
	New rule:
	f213_0_increase_LE\' -> f213_0_increase_LE : arg1'=1+arg1, arg2'=arg2, arg3'=1+arg1+arg2, (1+2*x21-arg2 == 0 /\ arg3 > 0 /\ -2*x21+arg2 > 0 /\ -2-2*x21+arg2 < 0 /\ 2+arg1 > 0), cost: 1
	
	made implied equalities explicit

	Original rule:
	f213_0_increase_LE\' -> f213_0_increase_LE : arg1'=1+arg1, arg2'=arg2, arg3'=1+arg1+arg2, (1+2*x21-arg2 == 0 /\ arg3 > 0 /\ -2*x21+arg2 > 0 /\ -2-2*x21+arg2 < 0 /\ 2+arg1 > 0), cost: 1
	New rule:
	f213_0_increase_LE\' -> f213_0_increase_LE : arg1'=1+arg1, arg2'=arg2, arg3'=1+arg1+arg2, (1+2*x21-arg2 == 0 /\ arg3 > 0 /\ -2*x21+arg2 > 0 /\ -2-2*x21+arg2 < 0 /\ 2+arg1 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f213_0_increase_LE\' -> f213_0_increase_LE : arg1'=1+arg1, arg2'=arg2, arg3'=1+arg1+arg2, (1+2*x21-arg2 == 0 /\ arg3 > 0 /\ -2*x21+arg2 > 0 /\ -2-2*x21+arg2 < 0 /\ 2+arg1 > 0), cost: 1
	New rule:
	f213_0_increase_LE\' -> f213_0_increase_LE : arg1'=1+arg1, arg3'=1+arg1+arg2, (1+2*x21-arg2 == 0 /\ arg3 > 0 /\ -2*x21+arg2 > 0 /\ -2-2*x21+arg2 < 0 /\ 2+arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f213_0_increase_LE -> f213_0_increase_LE\' : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, (-arg2p5+arg2 == 0 /\ arg3 > 0 /\ -2*x25+arg2 == 0 /\ 2+arg1 > 0 /\ arg3-arg3p5 == 0 /\ arg1-arg1p5 == 0), cost: 1
	New rule:
	f213_0_increase_LE -> f213_0_increase_LE\' : arg1'=arg1, arg2'=arg2, arg3'=arg3, (0 == 0 /\ arg3 > 0 /\ -2*x25+arg2 == 0 /\ 2+arg1 > 0), cost: 1
	
		propagated equality arg2p5 = arg2
		
		propagated equality arg3p5 = arg3
		
		propagated equality arg1p5 = arg1
		
	Simplified Guard

	Original rule:
	f213_0_increase_LE -> f213_0_increase_LE\' : arg1'=arg1, arg2'=arg2, arg3'=arg3, (0 == 0 /\ arg3 > 0 /\ -2*x25+arg2 == 0 /\ 2+arg1 > 0), cost: 1
	New rule:
	f213_0_increase_LE -> f213_0_increase_LE\' : arg1'=arg1, arg2'=arg2, arg3'=arg3, (arg3 > 0 /\ -2*x25+arg2 == 0 /\ 2+arg1 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f213_0_increase_LE -> f213_0_increase_LE\' : arg1'=arg1, arg2'=arg2, arg3'=arg3, (arg3 > 0 /\ -2*x25+arg2 == 0 /\ 2+arg1 > 0), cost: 1
	New rule:
	f213_0_increase_LE -> f213_0_increase_LE\' : (arg3 > 0 /\ -2*x25+arg2 == 0 /\ 2+arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f213_0_increase_LE\' -> f213_0_increase_LE : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, (arg3 > 0 /\ -2-arg2p6+arg2 == 0 /\ -2-2*x29+arg2 < 0 /\ -2*x29+arg2 >= 0 /\ -2*x29+arg2 == 0 /\ 1-arg1p6+arg1 == 0 /\ 2+arg1 > 0 /\ -1+arg1-arg3p6+arg2 == 0), cost: 1
	New rule:
	f213_0_increase_LE\' -> f213_0_increase_LE : arg1'=1+arg1, arg2'=-2+arg2, arg3'=-1+arg1+arg2, (0 == 0 /\ arg3 > 0 /\ -2-2*x29+arg2 < 0 /\ -2*x29+arg2 >= 0 /\ -2*x29+arg2 == 0 /\ 2+arg1 > 0), cost: 1
	
		propagated equality arg2p6 = -2+arg2
		
		propagated equality arg1p6 = 1+arg1
		
		propagated equality arg3p6 = -1+arg1+arg2
		
	Simplified Guard

	Original rule:
	f213_0_increase_LE\' -> f213_0_increase_LE : arg1'=1+arg1, arg2'=-2+arg2, arg3'=-1+arg1+arg2, (0 == 0 /\ arg3 > 0 /\ -2-2*x29+arg2 < 0 /\ -2*x29+arg2 >= 0 /\ -2*x29+arg2 == 0 /\ 2+arg1 > 0), cost: 1
	New rule:
	f213_0_increase_LE\' -> f213_0_increase_LE : arg1'=1+arg1, arg2'=-2+arg2, arg3'=-1+arg1+arg2, (arg3 > 0 /\ -2-2*x29+arg2 < 0 /\ -2*x29+arg2 >= 0 /\ -2*x29+arg2 == 0 /\ 2+arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	__init -> f213_0_increase_LE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (1+arg1p1 > 0 /\ 1+arg2p1 > 0 /\ -1+arg2p7 > 0 /\ arg2p1-arg3p1+arg1p1 == 0 /\ arg1p7 > 0), cost: 1
	New rule:
	__init -> f213_0_increase_LE : arg1'=-arg2p1+arg3p1, arg2'=arg2p1, arg3'=arg3p1, (0 == 0 /\ 1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0 /\ -1+arg2p7 > 0 /\ arg1p7 > 0), cost: 1
	
		propagated equality arg1p1 = -arg2p1+arg3p1
		
	Simplified Guard

	Original rule:
	__init -> f213_0_increase_LE : arg1'=-arg2p1+arg3p1, arg2'=arg2p1, arg3'=arg3p1, (0 == 0 /\ 1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0 /\ -1+arg2p7 > 0 /\ arg1p7 > 0), cost: 1
	New rule:
	__init -> f213_0_increase_LE : arg1'=-arg2p1+arg3p1, arg2'=arg2p1, arg3'=arg3p1, (1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0 /\ -1+arg2p7 > 0 /\ arg1p7 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	__init -> f213_0_increase_LE : arg1'=-arg2p1+arg3p1, arg2'=arg2p1, arg3'=arg3p1, (1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0 /\ -1+arg2p7 > 0 /\ arg1p7 > 0), cost: 1
	New rule:
	__init -> f213_0_increase_LE : arg1'=-arg2p1+arg3p1, arg2'=arg2p1, arg3'=arg3p1, (1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0), cost: 1

Step with 13

	Trace

	13[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)]
	
	Blocked

	[{}, {}]

Step with 8

	Trace

	13[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 8[(arg3 > 0 /\ -2*x13+arg2 < 0 /\ 2+arg1 > 0)]
	
	Blocked

	[{}, {}, {}]

Step with 10

	Trace

	13[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 8[(arg3 > 0 /\ -2*x13+arg2 < 0 /\ 2+arg1 > 0)], 10[(1+2*x21-arg2 == 0 /\ arg3 > 0 /\ -2*x21+arg2 > 0 /\ -2-2*x21+arg2 < 0 /\ 2+arg1 > 0)]
	
	Blocked

	[{}, {}, {}, {}]

Nonterm

Start location: __init
Program variables: arg1 arg2 arg3
   8: f213_0_increase_LE -> f213_0_increase_LE\' : (arg3 > 0 /\ -2*x13+arg2 < 0 /\ 2+arg1 > 0), cost: 1
   9: f213_0_increase_LE -> f213_0_increase_LE\' : (arg3 > 0 /\ -2*x17+arg2 > 0 /\ 2+arg1 > 0), cost: 1
  11: f213_0_increase_LE -> f213_0_increase_LE\' : (arg3 > 0 /\ -2*x25+arg2 == 0 /\ 2+arg1 > 0), cost: 1
  14: f213_0_increase_LE -> LoAT_sink : (1+2*x21-arg2 >= 0 /\ 2*x131-arg2 > 0 /\ arg3 > 0 /\ -2*x21+arg2 > 0 /\ 2+2*x21-arg2 > 0 /\ -1-2*x21+arg2 >= 0 /\ 2+arg1 > 0 /\ -1+arg3-arg1-arg2 <= 0 /\ -1+n >= 0), cost: NONTERM
  15: f213_0_increase_LE -> f213_0_increase_LE : arg1'=n+arg1, arg3'=n+arg1+arg2, (1+2*x21-arg2 >= 0 /\ 2*x131-arg2 > 0 /\ arg3 > 0 /\ -2*x21+arg2 > 0 /\ 2+2*x21-arg2 > 0 /\ -1-2*x21+arg2 >= 0 /\ 2+arg1 > 0 /\ -1+arg3-arg1-arg2 <= 0 /\ -1+n >= 0), cost: 1
  10: f213_0_increase_LE\' -> f213_0_increase_LE : arg1'=1+arg1, arg3'=1+arg1+arg2, (1+2*x21-arg2 == 0 /\ arg3 > 0 /\ -2*x21+arg2 > 0 /\ -2-2*x21+arg2 < 0 /\ 2+arg1 > 0), cost: 1
  12: f213_0_increase_LE\' -> f213_0_increase_LE : arg1'=1+arg1, arg2'=-2+arg2, arg3'=-1+arg1+arg2, (arg3 > 0 /\ -2-2*x29+arg2 < 0 /\ -2*x29+arg2 >= 0 /\ -2*x29+arg2 == 0 /\ 2+arg1 > 0), cost: 1
  13: __init -> f213_0_increase_LE : arg1'=-arg2p1+arg3p1, arg2'=arg2p1, arg3'=arg3p1, (1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0), cost: 1

	Certificate of Non-Termination

	Original rule:
	f213_0_increase_LE -> f213_0_increase_LE : arg1'=1+arg1, arg3'=1+arg1+arg2, (1+2*x21-arg2 == 0 /\ arg3 > 0 /\ -2*x21+arg2 > 0 /\ -2*x131+arg2 < 0 /\ -2-2*x21+arg2 < 0 /\ 2+arg1 > 0), cost: 1
	New rule:
	f213_0_increase_LE -> LoAT_sink : (1+2*x21-arg2 >= 0 /\ 2*x131-arg2 > 0 /\ arg3 > 0 /\ -2*x21+arg2 > 0 /\ 2+2*x21-arg2 > 0 /\ -1-2*x21+arg2 >= 0 /\ 2+arg1 > 0 /\ -1+arg3-arg1-arg2 <= 0 /\ -1+n >= 0), cost: NONTERM

		1+2*x21-arg2 >= 0 [0]: monotonic increase yields 1+2*x21-arg2 >= 0
		
		2*x131-arg2 > 0 [0]: monotonic increase yields 2*x131-arg2 > 0
		
		arg3 > 0 [0]: eventual increase yields (arg3 > 0 /\ -1+arg3-arg1-arg2 <= 0)
		
		-2*x21+arg2 > 0 [0]: monotonic increase yields -2*x21+arg2 > 0
		
		2+2*x21-arg2 > 0 [0]: monotonic increase yields 2+2*x21-arg2 > 0, dependencies: 1+2*x21-arg2 >= 0
		
		-1-2*x21+arg2 >= 0 [0]: monotonic increase yields -1-2*x21+arg2 >= 0, dependencies: -2*x21+arg2 > 0
		
		2+arg1 > 0 [0]: monotonic increase yields 2+arg1 > 0
		
		Replacement map: {1+2*x21-arg2 >= 0 -> 1+2*x21-arg2 >= 0, 2*x131-arg2 > 0 -> 2*x131-arg2 > 0, arg3 > 0 -> (arg3 > 0 /\ -1+arg3-arg1-arg2 <= 0), -2*x21+arg2 > 0 -> -2*x21+arg2 > 0, 2+2*x21-arg2 > 0 -> 2+2*x21-arg2 > 0, -1-2*x21+arg2 >= 0 -> -1-2*x21+arg2 >= 0, 2+arg1 > 0 -> 2+arg1 > 0}

	Loop Acceleration

	Original rule:
	f213_0_increase_LE -> f213_0_increase_LE : arg1'=1+arg1, arg3'=1+arg1+arg2, (1+2*x21-arg2 == 0 /\ arg3 > 0 /\ -2*x21+arg2 > 0 /\ -2*x131+arg2 < 0 /\ -2-2*x21+arg2 < 0 /\ 2+arg1 > 0), cost: 1
	New rule:
	f213_0_increase_LE -> f213_0_increase_LE : arg1'=n+arg1, arg3'=n+arg1+arg2, (1+2*x21-arg2 >= 0 /\ 2*x131-arg2 > 0 /\ arg3 > 0 /\ -2*x21+arg2 > 0 /\ 2+2*x21-arg2 > 0 /\ -1-2*x21+arg2 >= 0 /\ 2+arg1 > 0 /\ -1+arg3-arg1-arg2 <= 0 /\ -1+n >= 0), cost: 1

		1+2*x21-arg2 >= 0 [0]: monotonic increase yields 1+2*x21-arg2 >= 0
		
		2*x131-arg2 > 0 [0]: monotonic increase yields 2*x131-arg2 > 0
		
		arg3 > 0 [0]: eventual increase yields (arg3 > 0 /\ -1+arg3-arg1-arg2 <= 0)
		
		-2*x21+arg2 > 0 [0]: monotonic increase yields -2*x21+arg2 > 0
		
		2+2*x21-arg2 > 0 [0]: monotonic increase yields 2+2*x21-arg2 > 0, dependencies: 1+2*x21-arg2 >= 0
		
		-1-2*x21+arg2 >= 0 [0]: monotonic increase yields -1-2*x21+arg2 >= 0, dependencies: -2*x21+arg2 > 0
		
		2+arg1 > 0 [0]: monotonic increase yields 2+arg1 > 0
		
		Replacement map: {1+2*x21-arg2 >= 0 -> 1+2*x21-arg2 >= 0, 2*x131-arg2 > 0 -> 2*x131-arg2 > 0, arg3 > 0 -> (arg3 > 0 /\ -1+arg3-arg1-arg2 <= 0), -2*x21+arg2 > 0 -> -2*x21+arg2 > 0, 2+2*x21-arg2 > 0 -> 2+2*x21-arg2 > 0, -1-2*x21+arg2 >= 0 -> -1-2*x21+arg2 >= 0, 2+arg1 > 0 -> 2+arg1 > 0}

Step with 14

	Trace

	13[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 14[(1+2*x21-arg2 >= 0 /\ 2*x131-arg2 > 0 /\ arg3 > 0 /\ -2*x21+arg2 > 0 /\ 2+2*x21-arg2 > 0 /\ -1-2*x21+arg2 >= 0 /\ 2+arg1 > 0 /\ -1+arg3-arg1-arg2 <= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {}, {14[T]}]

Refute

	Counterexample

	[ arg1=0 arg2=3 arg3=3 ] 13 [ arg1=arg1 arg2=arg2 arg3=arg3 ] 14
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
