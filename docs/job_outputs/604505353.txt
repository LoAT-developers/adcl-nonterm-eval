WORST_CASE(Omega(0),?)

Initial ITS
Start location: __init
   0: f1_0_main_Load -> f48_0_up_GE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2 > 0 /\ arg1 > 0 /\ arg2-arg1P0 == 0), cost: 1
   1: f48_0_up_GE -> f48_0_up_GE\' : arg2'=arg2P1, arg1'=arg1P1, (-15+arg1 < 0 /\ arg1-arg1P1 == 0), cost: 1
   2: f48_0_up_GE\' -> f48_0_up_GE : arg2'=arg2P2, arg1'=arg1P2, (-9+arg1-10*x40 < 0 /\ -15+arg1 < 0 /\ 1+arg1-10*x40 >= 0 /\ 1+arg1-arg1P2-10*x40 == 0), cost: 1
   3: __init -> f1_0_main_Load : arg2'=arg2P3, arg1'=arg1P3, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_Load -> f48_0_up_GE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2 > 0 /\ arg1 > 0 /\ arg2-arg1P0 == 0), cost: 1
New rule:
f1_0_main_Load -> f48_0_up_GE : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f48_0_up_GE -> f48_0_up_GE\' : arg2'=arg2P1, arg1'=arg1P1, (-15+arg1 < 0 /\ arg1-arg1P1 == 0), cost: 1
New rule:
f48_0_up_GE -> f48_0_up_GE\' : arg2'=arg2P1, 15-arg1 > 0, cost: 1

Applied preprocessing
Original rule:
f48_0_up_GE\' -> f48_0_up_GE : arg2'=arg2P2, arg1'=arg1P2, (-9+arg1-10*x40 < 0 /\ -15+arg1 < 0 /\ 1+arg1-10*x40 >= 0 /\ 1+arg1-arg1P2-10*x40 == 0), cost: 1
New rule:
f48_0_up_GE\' -> f48_0_up_GE : arg2'=arg2P2, arg1'=1+arg1-10*x40, (1+arg1-10*x40 >= 0 /\ 9-arg1+10*x40 > 0 /\ 15-arg1 > 0), cost: 1

Simplified rules
Start location: __init
   4: f1_0_main_Load -> f48_0_up_GE : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
   5: f48_0_up_GE -> f48_0_up_GE\' : arg2'=arg2P1, 15-arg1 > 0, cost: 1
   6: f48_0_up_GE\' -> f48_0_up_GE : arg2'=arg2P2, arg1'=1+arg1-10*x40, (1+arg1-10*x40 >= 0 /\ 9-arg1+10*x40 > 0 /\ 15-arg1 > 0), cost: 1
   3: __init -> f1_0_main_Load : arg2'=arg2P3, arg1'=arg1P3, TRUE, cost: 1


Eliminating location f1_0_main_Load by chaining:

Applied chaining
First rule:
__init -> f1_0_main_Load : arg2'=arg2P3, arg1'=arg1P3, TRUE, cost: 1
Second rule:
f1_0_main_Load -> f48_0_up_GE : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
New rule:
__init -> f48_0_up_GE : arg2'=arg2P0, arg1'=arg2P3, (arg1P3 > 0 /\ 1+arg2P3 > 0), cost: 2

Applied deletion
Removed the following rules: 3 4

Eliminating location f48_0_up_GE\' by chaining:

Applied chaining
First rule:
f48_0_up_GE -> f48_0_up_GE\' : arg2'=arg2P1, 15-arg1 > 0, cost: 1
Second rule:
f48_0_up_GE\' -> f48_0_up_GE : arg2'=arg2P2, arg1'=1+arg1-10*x40, (1+arg1-10*x40 >= 0 /\ 9-arg1+10*x40 > 0 /\ 15-arg1 > 0), cost: 1
New rule:
f48_0_up_GE -> f48_0_up_GE : arg2'=arg2P2, arg1'=1+arg1-10*x40, (1+arg1-10*x40 >= 0 /\ 9-arg1+10*x40 > 0 /\ 15-arg1 > 0), cost: 2

Applied deletion
Removed the following rules: 5 6

Eliminated locations on linear paths
Start location: __init
   8: f48_0_up_GE -> f48_0_up_GE : arg2'=arg2P2, arg1'=1+arg1-10*x40, (1+arg1-10*x40 >= 0 /\ 9-arg1+10*x40 > 0 /\ 15-arg1 > 0), cost: 2
   7: __init -> f48_0_up_GE : arg2'=arg2P0, arg1'=arg2P3, (arg1P3 > 0 /\ 1+arg2P3 > 0), cost: 2


Applied acceleration
Original rule:
f48_0_up_GE -> f48_0_up_GE : arg2'=arg2P2, arg1'=1+arg1-10*x40, (1+arg1-10*x40 >= 0 /\ 9-arg1+10*x40 > 0 /\ 15-arg1 > 0), cost: 2
New rule:
f48_0_up_GE -> f48_0_up_GE : arg2'=arg2P2, arg1'=n+arg1-10*n*x40, (1+arg1-10*x40 >= 0 /\ 10+10*(-1+n)*x40-n-arg1+10*x40 > 0 /\ -10*(-1+n)*x40+n+arg1-10*x40 >= 0 /\ 9-arg1+10*x40 > 0 /\ 15-arg1 > 0 /\ -1+n >= 0), cost: 2*n
Sub-proof via acceration calculus written to file:///tmp/tmpnam_llNMIk.txt

Applied simplification
Original rule:
f48_0_up_GE -> f48_0_up_GE : arg2'=arg2P2, arg1'=n+arg1-10*n*x40, (1+arg1-10*x40 >= 0 /\ 10+10*(-1+n)*x40-n-arg1+10*x40 > 0 /\ -10*(-1+n)*x40+n+arg1-10*x40 >= 0 /\ 9-arg1+10*x40 > 0 /\ 15-arg1 > 0 /\ -1+n >= 0), cost: 2*n
New rule:
f48_0_up_GE -> f48_0_up_GE : arg2'=arg2P2, arg1'=n+arg1-10*n*x40, (1+arg1-10*x40 >= 0 /\ 10+10*(-1+n)*x40-n-arg1+10*x40 > 0 /\ -10*(-1+n)*x40+n+arg1-10*x40 >= 0 /\ 15-arg1 > 0 /\ -1+n >= 0), cost: 2*n

Applied deletion
Removed the following rules: 8

Accelerated simple loops
Start location: __init
  10: f48_0_up_GE -> f48_0_up_GE : arg2'=arg2P2, arg1'=n+arg1-10*n*x40, (1+arg1-10*x40 >= 0 /\ 10+10*(-1+n)*x40-n-arg1+10*x40 > 0 /\ -10*(-1+n)*x40+n+arg1-10*x40 >= 0 /\ 15-arg1 > 0 /\ -1+n >= 0), cost: 2*n
   7: __init -> f48_0_up_GE : arg2'=arg2P0, arg1'=arg2P3, (arg1P3 > 0 /\ 1+arg2P3 > 0), cost: 2


Applied chaining
First rule:
__init -> f48_0_up_GE : arg2'=arg2P0, arg1'=arg2P3, (arg1P3 > 0 /\ 1+arg2P3 > 0), cost: 2
Second rule:
f48_0_up_GE -> f48_0_up_GE : arg2'=arg2P2, arg1'=n+arg1-10*n*x40, (1+arg1-10*x40 >= 0 /\ 10+10*(-1+n)*x40-n-arg1+10*x40 > 0 /\ -10*(-1+n)*x40+n+arg1-10*x40 >= 0 /\ 15-arg1 > 0 /\ -1+n >= 0), cost: 2*n
New rule:
__init -> f48_0_up_GE : arg2'=arg2P2, arg1'=n-10*n*x40+arg2P3, (15-arg2P3 > 0 /\ 10+10*(-1+n)*x40-n-arg2P3+10*x40 > 0 /\ 1+arg2P3 > 0 /\ -1+n >= 0 /\ -10*(-1+n)*x40+n+arg2P3-10*x40 >= 0), cost: 2+2*n

Applied deletion
Removed the following rules: 10

Chained accelerated rules with incoming rules
Start location: __init
   7: __init -> f48_0_up_GE : arg2'=arg2P0, arg1'=arg2P3, (arg1P3 > 0 /\ 1+arg2P3 > 0), cost: 2
  11: __init -> f48_0_up_GE : arg2'=arg2P2, arg1'=n-10*n*x40+arg2P3, (15-arg2P3 > 0 /\ 10+10*(-1+n)*x40-n-arg2P3+10*x40 > 0 /\ 1+arg2P3 > 0 /\ -1+n >= 0 /\ -10*(-1+n)*x40+n+arg2P3-10*x40 >= 0), cost: 2+2*n


Removed unreachable locations and irrelevant leafs
Start location: __init
  <empty>


Computing asymptotic complexity

Proved the following lower bound
Complexity:  Unknown
Cpx degree: ?

Solved cost: 0
Rule cost:   0

