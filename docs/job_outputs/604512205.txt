unknown

Initial ITS

Start location: [1]
Program variables: c i
   0: [1] -> [2] : i'=0, T, cost: 1
   1: [2] -> [3] : c'=0, T, cost: 1
   2: [3] -> [4] : -10+i <= 0, cost: 1
   6: [3] -> [7] : -10+i > 0, cost: 1
   3: [4] -> [5] : i'=1+i, T, cost: 1
   4: [5] -> [6] : c'=1+c, T, cost: 1
   5: [6] -> [3] : T, cost: 1

Chained Linear Paths

Start location: [1]
Program variables: c i
   7: [1] -> [3] : c'=0, i'=0, T, cost: 1
   6: [3] -> [7] : -10+i > 0, cost: 1
  10: [3] -> [3] : c'=1+c, i'=1+i, -10+i <= 0, cost: 1

	Eliminating location [2] by chaining:

	Applied chaining

	First rule:
	[1] -> [2] : i'=0, T, cost: 1
	Second rule:
	[2] -> [3] : c'=0, T, cost: 1
	New rule:
	[1] -> [3] : c'=0, i'=0, T, cost: 1
	
	Applied deletion

	Removed the following rules: 0 1
	
	Eliminating location [4] by chaining:

	Applied chaining

	First rule:
	[3] -> [4] : -10+i <= 0, cost: 1
	Second rule:
	[4] -> [5] : i'=1+i, T, cost: 1
	New rule:
	[3] -> [5] : i'=1+i, -10+i <= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 2 3
	
	Eliminating location [5] by chaining:

	Applied chaining

	First rule:
	[3] -> [5] : i'=1+i, -10+i <= 0, cost: 1
	Second rule:
	[5] -> [6] : c'=1+c, T, cost: 1
	New rule:
	[3] -> [6] : c'=1+c, i'=1+i, -10+i <= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 4 8
	
	Eliminating location [6] by chaining:

	Applied chaining

	First rule:
	[3] -> [6] : c'=1+c, i'=1+i, -10+i <= 0, cost: 1
	Second rule:
	[6] -> [3] : T, cost: 1
	New rule:
	[3] -> [3] : c'=1+c, i'=1+i, -10+i <= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 5 9

Step with 7

	Trace

	7[T]
	
	Blocked

	[{}, {}]

Step with 10

	Trace

	7[T], 10[(-10+i <= 0)]
	
	Blocked

	[{}, {6[T]}, {}]

Accelerate

Start location: [1]
Program variables: c i
   7: [1] -> [3] : c'=0, i'=0, T, cost: 1
   6: [3] -> [7] : -10+i > 0, cost: 1
  10: [3] -> [3] : c'=1+c, i'=1+i, -10+i <= 0, cost: 1
  11: [3] -> [3] : c'=c+n, i'=i+n, (11-i-n >= 0 /\ -1+n >= 0), cost: 1

	Loop Acceleration

	Original rule:
	[3] -> [3] : c'=1+c, i'=1+i, (-10+i <= 0), cost: 1
	New rule:
	[3] -> [3] : c'=c+n, i'=i+n, (11-i-n >= 0 /\ -1+n >= 0), cost: 1

		10-i >= 0 [0]: montonic decrease yields 11-i-n >= 0
		
		10-i >= 0 [1]: eventual increase yields (1 <= 0 /\ 10-i >= 0)
		
		Replacement map: {10-i >= 0 -> 11-i-n >= 0}

	Trace

	7[T], 11[(11-i-n >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {6[T]}, {10[T], 11[T]}]

Step with 6

	Trace

	7[T], 11[(11-i-n >= 0 /\ -1+n >= 0)], 6[(-10+i > 0)]
	
	Blocked

	[{}, {6[T]}, {10[T], 11[T]}, {}]

Backtrack

	Trace

	7[T], 11[(11-i-n >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {6[T]}, {6[T], 10[T], 11[T]}]

Backtrack

	Trace

	7[T]
	
	Blocked

	[{}, {6[T], 11[T]}]

Step with 10

	Trace

	7[T], 10[(-10+i <= 0)]
	
	Blocked

	[{}, {6[T], 11[T]}, {}]

Covered

	Trace

	7[T]
	
	Blocked

	[{}, {6[T], 10[T], 11[T]}]

Backtrack

	Trace

	Blocked

	[{7[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
