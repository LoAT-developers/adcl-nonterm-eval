unknown

Initial ITS

Start location: __init
Program variables: arg1 arg2 arg3
   0: f1_0_main_Load -> f302_0_createList_GE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (-arg2p1+arg2 == 0 /\ arg1 > 0 /\ 1+arg1p1 > 0 /\ 1-arg3p1 == 0 /\ arg2 > 0), cost: 1
   1: f1_0_main_Load -> f502_0_main_InvokeMethod : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, (arg1p2 > 0 /\ -2+arg2p2 > 0 /\ arg1 > 0 /\ 1+x8 > 0 /\ arg1p2-arg1 <= 0 /\ arg2 > 0), cost: 1
   2: f1_0_main_Load -> f502_0_main_InvokeMethod : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, (1+arg1-arg2p3 >= 0 /\ arg1 > 0 /\ arg1p3 > 0 /\ -1+arg2p3 > 0 /\ arg1-arg1p3 >= 0 /\ 1+x14 > 0 /\ arg2 > 0), cost: 1
   3: f302_0_createList_GE -> f302_0_createList_GE : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, (-1+arg1-arg1p4 == 0 /\ arg3 > 0 /\ 1+arg2 > 0 /\ 1+arg3-arg3p4 == 0 /\ arg3-arg2 < 0 /\ -arg2p4+arg2 == 0 /\ 1+arg1 > 0 /\ -1 < 0), cost: 1
   4: f502_0_main_InvokeMethod -> f571_0_sumList_NONNULL : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, (1+arg2p5-arg2 <= 0 /\ 1+arg2p5 > 0 /\ x18 > 0 /\ arg1 > 0 /\ -1+arg3 > 0 /\ -arg3p5+arg3 == 0 /\ arg1p5 > 0 /\ arg1p5-arg2 <= 0 /\ arg2 > 0), cost: 1
   5: f571_0_sumList_NONNULL -> f571_0_sumList_NONNULL : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, (-1+arg3 > 0 /\ -2+arg1 > 0 /\ 1+arg2p6 > 0 /\ 2-arg1+arg1p6 <= 0 /\ arg1p6 > 0 /\ arg1p6-arg2 <= 0 /\ 1+arg2p6-arg2 <= 0 /\ -arg3p6+arg3 == 0 /\ 3-arg1+arg2p6 <= 0 /\ arg2 > 0), cost: 1
   6: __init -> f1_0_main_Load : arg1'=arg1p7, arg2'=arg2p7, arg3'=arg3p7, T, cost: 1

Simplified Transitions

Start location: __init
Program variables: arg1 arg2 arg3
   7: f1_0_main_Load -> f302_0_createList_GE : arg1'=arg1p1, arg3'=1, (arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0), cost: 1
   8: f1_0_main_Load -> f502_0_main_InvokeMethod : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, (arg1p2 > 0 /\ -2+arg2p2 > 0 /\ arg1 > 0 /\ arg1p2-arg1 <= 0 /\ arg2 > 0), cost: 1
   9: f1_0_main_Load -> f502_0_main_InvokeMethod : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, (1+arg1-arg2p3 >= 0 /\ arg1 > 0 /\ arg1p3 > 0 /\ -1+arg2p3 > 0 /\ arg1-arg1p3 >= 0 /\ arg2 > 0), cost: 1
  10: f302_0_createList_GE -> f302_0_createList_GE : arg1'=-1+arg1, arg3'=1+arg3, (arg3 > 0 /\ 1+arg2 > 0 /\ arg3-arg2 < 0 /\ 1+arg1 > 0), cost: 1
  11: f502_0_main_InvokeMethod -> f571_0_sumList_NONNULL : arg1'=arg1p5, arg2'=arg2p5, (1+arg2p5-arg2 <= 0 /\ 1+arg2p5 > 0 /\ arg1 > 0 /\ -1+arg3 > 0 /\ arg1p5 > 0 /\ arg1p5-arg2 <= 0 /\ arg2 > 0), cost: 1
  12: f571_0_sumList_NONNULL -> f571_0_sumList_NONNULL : arg1'=arg1p6, arg2'=arg2p6, (-1+arg3 > 0 /\ -2+arg1 > 0 /\ 1+arg2p6 > 0 /\ 2-arg1+arg1p6 <= 0 /\ arg1p6 > 0 /\ arg1p6-arg2 <= 0 /\ 1+arg2p6-arg2 <= 0 /\ 3-arg1+arg2p6 <= 0 /\ arg2 > 0), cost: 1
   6: __init -> f1_0_main_Load : arg1'=arg1p7, arg2'=arg2p7, arg3'=arg3p7, T, cost: 1

	Propagated Equalities

	Original rule:
	f1_0_main_Load -> f302_0_createList_GE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (-arg2p1+arg2 == 0 /\ arg1 > 0 /\ 1+arg1p1 > 0 /\ 1-arg3p1 == 0 /\ arg2 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f302_0_createList_GE : arg1'=arg1p1, arg2'=arg2, arg3'=1, (0 == 0 /\ arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0), cost: 1
	
		propagated equality arg2p1 = arg2
		
		propagated equality arg3p1 = 1
		
	Simplified Guard

	Original rule:
	f1_0_main_Load -> f302_0_createList_GE : arg1'=arg1p1, arg2'=arg2, arg3'=1, (0 == 0 /\ arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f302_0_createList_GE : arg1'=arg1p1, arg2'=arg2, arg3'=1, (arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f1_0_main_Load -> f302_0_createList_GE : arg1'=arg1p1, arg2'=arg2, arg3'=1, (arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f302_0_createList_GE : arg1'=arg1p1, arg3'=1, (arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	f1_0_main_Load -> f502_0_main_InvokeMethod : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, (arg1p2 > 0 /\ -2+arg2p2 > 0 /\ arg1 > 0 /\ 1+x8 > 0 /\ arg1p2-arg1 <= 0 /\ arg2 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f502_0_main_InvokeMethod : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, (arg1p2 > 0 /\ -2+arg2p2 > 0 /\ arg1 > 0 /\ arg1p2-arg1 <= 0 /\ arg2 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	f1_0_main_Load -> f502_0_main_InvokeMethod : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, (1+arg1-arg2p3 >= 0 /\ arg1 > 0 /\ arg1p3 > 0 /\ -1+arg2p3 > 0 /\ arg1-arg1p3 >= 0 /\ 1+x14 > 0 /\ arg2 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f502_0_main_InvokeMethod : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, (1+arg1-arg2p3 >= 0 /\ arg1 > 0 /\ arg1p3 > 0 /\ -1+arg2p3 > 0 /\ arg1-arg1p3 >= 0 /\ arg2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f302_0_createList_GE -> f302_0_createList_GE : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, (-1+arg1-arg1p4 == 0 /\ arg3 > 0 /\ 1+arg2 > 0 /\ 1+arg3-arg3p4 == 0 /\ arg3-arg2 < 0 /\ -arg2p4+arg2 == 0 /\ 1+arg1 > 0 /\ -1 < 0), cost: 1
	New rule:
	f302_0_createList_GE -> f302_0_createList_GE : arg1'=-1+arg1, arg2'=arg2, arg3'=1+arg3, (0 == 0 /\ arg3 > 0 /\ 1+arg2 > 0 /\ arg3-arg2 < 0 /\ 1+arg1 > 0 /\ -1 < 0), cost: 1
	
		propagated equality arg1p4 = -1+arg1
		
		propagated equality arg3p4 = 1+arg3
		
		propagated equality arg2p4 = arg2
		
	Simplified Guard

	Original rule:
	f302_0_createList_GE -> f302_0_createList_GE : arg1'=-1+arg1, arg2'=arg2, arg3'=1+arg3, (0 == 0 /\ arg3 > 0 /\ 1+arg2 > 0 /\ arg3-arg2 < 0 /\ 1+arg1 > 0 /\ -1 < 0), cost: 1
	New rule:
	f302_0_createList_GE -> f302_0_createList_GE : arg1'=-1+arg1, arg2'=arg2, arg3'=1+arg3, (arg3 > 0 /\ 1+arg2 > 0 /\ arg3-arg2 < 0 /\ 1+arg1 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f302_0_createList_GE -> f302_0_createList_GE : arg1'=-1+arg1, arg2'=arg2, arg3'=1+arg3, (arg3 > 0 /\ 1+arg2 > 0 /\ arg3-arg2 < 0 /\ 1+arg1 > 0), cost: 1
	New rule:
	f302_0_createList_GE -> f302_0_createList_GE : arg1'=-1+arg1, arg3'=1+arg3, (arg3 > 0 /\ 1+arg2 > 0 /\ arg3-arg2 < 0 /\ 1+arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f502_0_main_InvokeMethod -> f571_0_sumList_NONNULL : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, (1+arg2p5-arg2 <= 0 /\ 1+arg2p5 > 0 /\ x18 > 0 /\ arg1 > 0 /\ -1+arg3 > 0 /\ -arg3p5+arg3 == 0 /\ arg1p5 > 0 /\ arg1p5-arg2 <= 0 /\ arg2 > 0), cost: 1
	New rule:
	f502_0_main_InvokeMethod -> f571_0_sumList_NONNULL : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3, (0 == 0 /\ 1+arg2p5-arg2 <= 0 /\ 1+arg2p5 > 0 /\ x18 > 0 /\ arg1 > 0 /\ -1+arg3 > 0 /\ arg1p5 > 0 /\ arg1p5-arg2 <= 0 /\ arg2 > 0), cost: 1
	
		propagated equality arg3p5 = arg3
		
	Simplified Guard

	Original rule:
	f502_0_main_InvokeMethod -> f571_0_sumList_NONNULL : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3, (0 == 0 /\ 1+arg2p5-arg2 <= 0 /\ 1+arg2p5 > 0 /\ x18 > 0 /\ arg1 > 0 /\ -1+arg3 > 0 /\ arg1p5 > 0 /\ arg1p5-arg2 <= 0 /\ arg2 > 0), cost: 1
	New rule:
	f502_0_main_InvokeMethod -> f571_0_sumList_NONNULL : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3, (1+arg2p5-arg2 <= 0 /\ 1+arg2p5 > 0 /\ x18 > 0 /\ arg1 > 0 /\ -1+arg3 > 0 /\ arg1p5 > 0 /\ arg1p5-arg2 <= 0 /\ arg2 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	f502_0_main_InvokeMethod -> f571_0_sumList_NONNULL : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3, (1+arg2p5-arg2 <= 0 /\ 1+arg2p5 > 0 /\ x18 > 0 /\ arg1 > 0 /\ -1+arg3 > 0 /\ arg1p5 > 0 /\ arg1p5-arg2 <= 0 /\ arg2 > 0), cost: 1
	New rule:
	f502_0_main_InvokeMethod -> f571_0_sumList_NONNULL : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3, (1+arg2p5-arg2 <= 0 /\ 1+arg2p5 > 0 /\ arg1 > 0 /\ -1+arg3 > 0 /\ arg1p5 > 0 /\ arg1p5-arg2 <= 0 /\ arg2 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f502_0_main_InvokeMethod -> f571_0_sumList_NONNULL : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3, (1+arg2p5-arg2 <= 0 /\ 1+arg2p5 > 0 /\ arg1 > 0 /\ -1+arg3 > 0 /\ arg1p5 > 0 /\ arg1p5-arg2 <= 0 /\ arg2 > 0), cost: 1
	New rule:
	f502_0_main_InvokeMethod -> f571_0_sumList_NONNULL : arg1'=arg1p5, arg2'=arg2p5, (1+arg2p5-arg2 <= 0 /\ 1+arg2p5 > 0 /\ arg1 > 0 /\ -1+arg3 > 0 /\ arg1p5 > 0 /\ arg1p5-arg2 <= 0 /\ arg2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f571_0_sumList_NONNULL -> f571_0_sumList_NONNULL : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, (-1+arg3 > 0 /\ -2+arg1 > 0 /\ 1+arg2p6 > 0 /\ 2-arg1+arg1p6 <= 0 /\ arg1p6 > 0 /\ arg1p6-arg2 <= 0 /\ 1+arg2p6-arg2 <= 0 /\ -arg3p6+arg3 == 0 /\ 3-arg1+arg2p6 <= 0 /\ arg2 > 0), cost: 1
	New rule:
	f571_0_sumList_NONNULL -> f571_0_sumList_NONNULL : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3, (0 == 0 /\ -1+arg3 > 0 /\ -2+arg1 > 0 /\ 1+arg2p6 > 0 /\ 2-arg1+arg1p6 <= 0 /\ arg1p6 > 0 /\ arg1p6-arg2 <= 0 /\ 1+arg2p6-arg2 <= 0 /\ 3-arg1+arg2p6 <= 0 /\ arg2 > 0), cost: 1
	
		propagated equality arg3p6 = arg3
		
	Simplified Guard

	Original rule:
	f571_0_sumList_NONNULL -> f571_0_sumList_NONNULL : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3, (0 == 0 /\ -1+arg3 > 0 /\ -2+arg1 > 0 /\ 1+arg2p6 > 0 /\ 2-arg1+arg1p6 <= 0 /\ arg1p6 > 0 /\ arg1p6-arg2 <= 0 /\ 1+arg2p6-arg2 <= 0 /\ 3-arg1+arg2p6 <= 0 /\ arg2 > 0), cost: 1
	New rule:
	f571_0_sumList_NONNULL -> f571_0_sumList_NONNULL : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3, (-1+arg3 > 0 /\ -2+arg1 > 0 /\ 1+arg2p6 > 0 /\ 2-arg1+arg1p6 <= 0 /\ arg1p6 > 0 /\ arg1p6-arg2 <= 0 /\ 1+arg2p6-arg2 <= 0 /\ 3-arg1+arg2p6 <= 0 /\ arg2 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f571_0_sumList_NONNULL -> f571_0_sumList_NONNULL : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3, (-1+arg3 > 0 /\ -2+arg1 > 0 /\ 1+arg2p6 > 0 /\ 2-arg1+arg1p6 <= 0 /\ arg1p6 > 0 /\ arg1p6-arg2 <= 0 /\ 1+arg2p6-arg2 <= 0 /\ 3-arg1+arg2p6 <= 0 /\ arg2 > 0), cost: 1
	New rule:
	f571_0_sumList_NONNULL -> f571_0_sumList_NONNULL : arg1'=arg1p6, arg2'=arg2p6, (-1+arg3 > 0 /\ -2+arg1 > 0 /\ 1+arg2p6 > 0 /\ 2-arg1+arg1p6 <= 0 /\ arg1p6 > 0 /\ arg1p6-arg2 <= 0 /\ 1+arg2p6-arg2 <= 0 /\ 3-arg1+arg2p6 <= 0 /\ arg2 > 0), cost: 1

Step with 6

	Trace

	6[T]
	
	Blocked

	[{}, {}]

Step with 7

	Trace

	6[T], 7[(arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {}]

Step with 10

	Trace

	6[T], 7[(arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0)], 10[(arg3 > 0 /\ 1+arg2 > 0 /\ arg3-arg2 < 0 /\ 1+arg1 > 0)]
	
	Blocked

	[{}, {}, {}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2 arg3
   7: f1_0_main_Load -> f302_0_createList_GE : arg1'=arg1p1, arg3'=1, (arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0), cost: 1
   8: f1_0_main_Load -> f502_0_main_InvokeMethod : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, (arg1p2 > 0 /\ -2+arg2p2 > 0 /\ arg1 > 0 /\ arg1p2-arg1 <= 0 /\ arg2 > 0), cost: 1
   9: f1_0_main_Load -> f502_0_main_InvokeMethod : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, (1+arg1-arg2p3 >= 0 /\ arg1 > 0 /\ arg1p3 > 0 /\ -1+arg2p3 > 0 /\ arg1-arg1p3 >= 0 /\ arg2 > 0), cost: 1
  10: f302_0_createList_GE -> f302_0_createList_GE : arg1'=-1+arg1, arg3'=1+arg3, (arg3 > 0 /\ 1+arg2 > 0 /\ arg3-arg2 < 0 /\ 1+arg1 > 0), cost: 1
  13: f302_0_createList_GE -> f302_0_createList_GE : arg1'=-n+arg1, arg3'=n+arg3, (-1+n >= 0 /\ arg3 > 0 /\ 1+arg2 > 0 /\ 2-n+arg1 > 0 /\ 1-n-arg3+arg2 > 0), cost: 1
  11: f502_0_main_InvokeMethod -> f571_0_sumList_NONNULL : arg1'=arg1p5, arg2'=arg2p5, (1+arg2p5-arg2 <= 0 /\ 1+arg2p5 > 0 /\ arg1 > 0 /\ -1+arg3 > 0 /\ arg1p5 > 0 /\ arg1p5-arg2 <= 0 /\ arg2 > 0), cost: 1
  12: f571_0_sumList_NONNULL -> f571_0_sumList_NONNULL : arg1'=arg1p6, arg2'=arg2p6, (-1+arg3 > 0 /\ -2+arg1 > 0 /\ 1+arg2p6 > 0 /\ 2-arg1+arg1p6 <= 0 /\ arg1p6 > 0 /\ arg1p6-arg2 <= 0 /\ 1+arg2p6-arg2 <= 0 /\ 3-arg1+arg2p6 <= 0 /\ arg2 > 0), cost: 1
   6: __init -> f1_0_main_Load : arg1'=arg1p7, arg2'=arg2p7, arg3'=arg3p7, T, cost: 1

	Loop Acceleration

	Original rule:
	f302_0_createList_GE -> f302_0_createList_GE : arg1'=-1+arg1, arg3'=1+arg3, (arg3 > 0 /\ 1+arg2 > 0 /\ arg3-arg2 < 0 /\ 1+arg1 > 0), cost: 1
	New rule:
	f302_0_createList_GE -> f302_0_createList_GE : arg1'=-n+arg1, arg3'=n+arg3, (-1+n >= 0 /\ arg3 > 0 /\ 1+arg2 > 0 /\ 2-n+arg1 > 0 /\ 1-n-arg3+arg2 > 0), cost: 1

		-arg3+arg2 > 0 [0]: montonic decrease yields 1-n-arg3+arg2 > 0
		
		-arg3+arg2 > 0 [1]: eventual increase yields (-arg3+arg2 > 0 /\ 1 <= 0)
		
		arg3 > 0 [0]: monotonic increase yields arg3 > 0
		
		1+arg2 > 0 [0]: monotonic increase yields 1+arg2 > 0, dependencies: -arg3+arg2 > 0 arg3 > 0
		
		1+arg1 > 0 [0]: montonic decrease yields 2-n+arg1 > 0
		
		1+arg1 > 0 [1]: eventual increase yields (1 <= 0 /\ 1+arg1 > 0)
		
		Replacement map: {-arg3+arg2 > 0 -> 1-n-arg3+arg2 > 0, arg3 > 0 -> arg3 > 0, 1+arg2 > 0 -> 1+arg2 > 0, 1+arg1 > 0 -> 2-n+arg1 > 0}

	Trace

	6[T], 7[(arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0)], 13[(-1+n >= 0 /\ arg3 > 0 /\ 1+arg2 > 0 /\ 2-n+arg1 > 0 /\ 1-n-arg3+arg2 > 0)]
	
	Blocked

	[{}, {}, {}, {10[T], 13[T]}]

Backtrack

	Trace

	6[T], 7[(arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {13[T]}]

Step with 10

	Trace

	6[T], 7[(arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0)], 10[(arg3 > 0 /\ 1+arg2 > 0 /\ arg3-arg2 < 0 /\ 1+arg1 > 0)]
	
	Blocked

	[{}, {}, {13[T]}, {}]

Covered

	Trace

	6[T], 7[(arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {10[T], 13[T]}]

Backtrack

	Trace

	6[T]
	
	Blocked

	[{}, {7[T]}]

Step with 8

	Trace

	6[T], 8[(arg1p2 > 0 /\ -2+arg2p2 > 0 /\ arg1 > 0 /\ arg1p2-arg1 <= 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {7[T]}, {}]

Step with 11

	Trace

	6[T], 8[(arg1p2 > 0 /\ -2+arg2p2 > 0 /\ arg1 > 0 /\ arg1p2-arg1 <= 0 /\ arg2 > 0)], 11[(1+arg2p5-arg2 <= 0 /\ 1+arg2p5 > 0 /\ arg1 > 0 /\ -1+arg3 > 0 /\ arg1p5 > 0 /\ arg1p5-arg2 <= 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {7[T]}, {}, {}]

Step with 12

	Trace

	6[T], 8[(arg1p2 > 0 /\ -2+arg2p2 > 0 /\ arg1 > 0 /\ arg1p2-arg1 <= 0 /\ arg2 > 0)], 11[(1+arg2p5-arg2 <= 0 /\ 1+arg2p5 > 0 /\ arg1 > 0 /\ -1+arg3 > 0 /\ arg1p5 > 0 /\ arg1p5-arg2 <= 0 /\ arg2 > 0)], 12[(-1+arg3 > 0 /\ -2+arg1 > 0 /\ 1+arg2p6 > 0 /\ 2-arg1+arg1p6 <= 0 /\ arg1p6 > 0 /\ arg1p6-arg2 <= 0 /\ 1+arg2p6-arg2 <= 0 /\ 3-arg1+arg2p6 <= 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {7[T]}, {}, {}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 12

	Trace

	6[T], 8[(arg1p2 > 0 /\ -2+arg2p2 > 0 /\ arg1 > 0 /\ arg1p2-arg1 <= 0 /\ arg2 > 0)], 11[(1+arg2p5-arg2 <= 0 /\ 1+arg2p5 > 0 /\ arg1 > 0 /\ -1+arg3 > 0 /\ arg1p5 > 0 /\ arg1p5-arg2 <= 0 /\ arg2 > 0)], 12[(-1+arg3 > 0 /\ -2+arg1 > 0 /\ 1+arg2p6 > 0 /\ 2-arg1+arg1p6 <= 0 /\ arg1p6 > 0 /\ arg1p6-arg2 <= 0 /\ 1+arg2p6-arg2 <= 0 /\ 3-arg1+arg2p6 <= 0 /\ arg2 > 0)], 12[(-1+arg3 > 0 /\ -2+arg1 > 0 /\ 1+arg2p6 > 0 /\ 2-arg1+arg1p6 <= 0 /\ arg1p6 > 0 /\ arg1p6-arg2 <= 0 /\ 1+arg2p6-arg2 <= 0 /\ 3-arg1+arg2p6 <= 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {7[T]}, {}, {}, {}, {}]

Covered

	Trace

	6[T], 8[(arg1p2 > 0 /\ -2+arg2p2 > 0 /\ arg1 > 0 /\ arg1p2-arg1 <= 0 /\ arg2 > 0)], 11[(1+arg2p5-arg2 <= 0 /\ 1+arg2p5 > 0 /\ arg1 > 0 /\ -1+arg3 > 0 /\ arg1p5 > 0 /\ arg1p5-arg2 <= 0 /\ arg2 > 0)], 12[(-1+arg3 > 0 /\ -2+arg1 > 0 /\ 1+arg2p6 > 0 /\ 2-arg1+arg1p6 <= 0 /\ arg1p6 > 0 /\ arg1p6-arg2 <= 0 /\ 1+arg2p6-arg2 <= 0 /\ 3-arg1+arg2p6 <= 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {7[T]}, {}, {}, {12[T]}]

Backtrack

	Trace

	6[T], 8[(arg1p2 > 0 /\ -2+arg2p2 > 0 /\ arg1 > 0 /\ arg1p2-arg1 <= 0 /\ arg2 > 0)], 11[(1+arg2p5-arg2 <= 0 /\ 1+arg2p5 > 0 /\ arg1 > 0 /\ -1+arg3 > 0 /\ arg1p5 > 0 /\ arg1p5-arg2 <= 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {7[T]}, {}, {12[T]}]

Backtrack

	Trace

	6[T], 8[(arg1p2 > 0 /\ -2+arg2p2 > 0 /\ arg1 > 0 /\ arg1p2-arg1 <= 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {7[T]}, {11[T]}]

Backtrack

	Trace

	6[T]
	
	Blocked

	[{}, {7[T], 8[T]}]

Step with 9

	Trace

	6[T], 9[(1+arg1-arg2p3 >= 0 /\ arg1 > 0 /\ arg1p3 > 0 /\ -1+arg2p3 > 0 /\ arg1-arg1p3 >= 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {7[T], 8[T]}, {}]

Step with 11

	Trace

	6[T], 9[(1+arg1-arg2p3 >= 0 /\ arg1 > 0 /\ arg1p3 > 0 /\ -1+arg2p3 > 0 /\ arg1-arg1p3 >= 0 /\ arg2 > 0)], 11[(1+arg2p5-arg2 <= 0 /\ 1+arg2p5 > 0 /\ arg1 > 0 /\ -1+arg3 > 0 /\ arg1p5 > 0 /\ arg1p5-arg2 <= 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {7[T], 8[T]}, {}, {}]

Step with 12

	Trace

	6[T], 9[(1+arg1-arg2p3 >= 0 /\ arg1 > 0 /\ arg1p3 > 0 /\ -1+arg2p3 > 0 /\ arg1-arg1p3 >= 0 /\ arg2 > 0)], 11[(1+arg2p5-arg2 <= 0 /\ 1+arg2p5 > 0 /\ arg1 > 0 /\ -1+arg3 > 0 /\ arg1p5 > 0 /\ arg1p5-arg2 <= 0 /\ arg2 > 0)], 12[(-1+arg3 > 0 /\ -2+arg1 > 0 /\ 1+arg2p6 > 0 /\ 2-arg1+arg1p6 <= 0 /\ arg1p6 > 0 /\ arg1p6-arg2 <= 0 /\ 1+arg2p6-arg2 <= 0 /\ 3-arg1+arg2p6 <= 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {7[T], 8[T]}, {}, {}, {}]

Step with 12

	Trace

	6[T], 9[(1+arg1-arg2p3 >= 0 /\ arg1 > 0 /\ arg1p3 > 0 /\ -1+arg2p3 > 0 /\ arg1-arg1p3 >= 0 /\ arg2 > 0)], 11[(1+arg2p5-arg2 <= 0 /\ 1+arg2p5 > 0 /\ arg1 > 0 /\ -1+arg3 > 0 /\ arg1p5 > 0 /\ arg1p5-arg2 <= 0 /\ arg2 > 0)], 12[(-1+arg3 > 0 /\ -2+arg1 > 0 /\ 1+arg2p6 > 0 /\ 2-arg1+arg1p6 <= 0 /\ arg1p6 > 0 /\ arg1p6-arg2 <= 0 /\ 1+arg2p6-arg2 <= 0 /\ 3-arg1+arg2p6 <= 0 /\ arg2 > 0)], 12[(-1+arg3 > 0 /\ -2+arg1 > 0 /\ 1+arg2p6 > 0 /\ 2-arg1+arg1p6 <= 0 /\ arg1p6 > 0 /\ arg1p6-arg2 <= 0 /\ 1+arg2p6-arg2 <= 0 /\ 3-arg1+arg2p6 <= 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {7[T], 8[T]}, {}, {}, {}, {}]

Covered

	Trace

	6[T], 9[(1+arg1-arg2p3 >= 0 /\ arg1 > 0 /\ arg1p3 > 0 /\ -1+arg2p3 > 0 /\ arg1-arg1p3 >= 0 /\ arg2 > 0)], 11[(1+arg2p5-arg2 <= 0 /\ 1+arg2p5 > 0 /\ arg1 > 0 /\ -1+arg3 > 0 /\ arg1p5 > 0 /\ arg1p5-arg2 <= 0 /\ arg2 > 0)], 12[(-1+arg3 > 0 /\ -2+arg1 > 0 /\ 1+arg2p6 > 0 /\ 2-arg1+arg1p6 <= 0 /\ arg1p6 > 0 /\ arg1p6-arg2 <= 0 /\ 1+arg2p6-arg2 <= 0 /\ 3-arg1+arg2p6 <= 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {7[T], 8[T]}, {}, {}, {12[T]}]

Backtrack

	Trace

	6[T], 9[(1+arg1-arg2p3 >= 0 /\ arg1 > 0 /\ arg1p3 > 0 /\ -1+arg2p3 > 0 /\ arg1-arg1p3 >= 0 /\ arg2 > 0)], 11[(1+arg2p5-arg2 <= 0 /\ 1+arg2p5 > 0 /\ arg1 > 0 /\ -1+arg3 > 0 /\ arg1p5 > 0 /\ arg1p5-arg2 <= 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {7[T], 8[T]}, {}, {12[T]}]

Backtrack

	Trace

	6[T], 9[(1+arg1-arg2p3 >= 0 /\ arg1 > 0 /\ arg1p3 > 0 /\ -1+arg2p3 > 0 /\ arg1-arg1p3 >= 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {7[T], 8[T]}, {11[T]}]

Backtrack

	Trace

	6[T]
	
	Blocked

	[{}, {7[T], 8[T], 9[T]}]

Backtrack

	Trace

	Blocked

	[{6[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
