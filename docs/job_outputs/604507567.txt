NO

Initial ITS

Start location: l6
Program variables: __disjvr_0^0 result_4^0 tmp_7^0 x_5^0 y_6^0
   0: l0 -> l1 : __disjvr_0^0'=__disjvr_0^post1, result_4^0'=result_4^post1, tmp_7^0'=tmp_7^post1, x_5^0'=x_5^post1, y_6^0'=y_6^post1, (0 == 0 /\ -x_5^post1+x_5^0 == 0 /\ tmp_7^0-tmp_7^post1 == 0 /\ -__disjvr_0^post1+__disjvr_0^0 == 0 /\ -y_6^post1+y_6^0 == 0 /\ -x_5^0+y_6^0 <= 0), cost: 1
   1: l0 -> l2 : __disjvr_0^0'=__disjvr_0^post2, result_4^0'=result_4^post2, tmp_7^0'=tmp_7^post2, x_5^0'=x_5^post2, y_6^0'=y_6^post2, (0 == 0 /\ 1+x_5^0-y_6^0 <= 0 /\ tmp_7^post2 <= 0 /\ 1+y_6^post2-y_6^0 == 0 /\ __disjvr_0^0-__disjvr_0^post2 == 0 /\ -tmp_7^post2 <= 0 /\ -result_4^post2+result_4^0 == 0 /\ -x_5^post2+x_5^0 == 0), cost: 1
   3: l0 -> l4 : __disjvr_0^0'=__disjvr_0^post4, result_4^0'=result_4^post4, tmp_7^0'=tmp_7^post4, x_5^0'=x_5^post4, y_6^0'=y_6^post4, (0 == 0 /\ -y_6^post4+y_6^0 == 0 /\ 1+x_5^0-y_6^0 <= 0 /\ -result_4^post4+result_4^0 == 0 /\ __disjvr_0^0-__disjvr_0^post4 == 0 /\ -x_5^post4+x_5^0 == 0), cost: 1
   2: l2 -> l0 : __disjvr_0^0'=__disjvr_0^post3, result_4^0'=result_4^post3, tmp_7^0'=tmp_7^post3, x_5^0'=x_5^post3, y_6^0'=y_6^post3, (-__disjvr_0^post3+__disjvr_0^0 == 0 /\ tmp_7^0-tmp_7^post3 == 0 /\ result_4^0-result_4^post3 == 0 /\ -x_5^post3+x_5^0 == 0 /\ -y_6^post3+y_6^0 == 0), cost: 1
   4: l4 -> l3 : __disjvr_0^0'=__disjvr_0^post5, result_4^0'=result_4^post5, tmp_7^0'=tmp_7^post5, x_5^0'=x_5^post5, y_6^0'=y_6^post5, (tmp_7^0-tmp_7^post5 == 0 /\ -__disjvr_0^post5+__disjvr_0^0 == 0 /\ -y_6^post5+y_6^0 == 0 /\ __disjvr_0^post5-__disjvr_0^0 == 0 /\ result_4^0-result_4^post5 == 0 /\ -x_5^post5+x_5^0 == 0), cost: 1
   5: l3 -> l0 : __disjvr_0^0'=__disjvr_0^post6, result_4^0'=result_4^post6, tmp_7^0'=tmp_7^post6, x_5^0'=x_5^post6, y_6^0'=y_6^post6, (tmp_7^0-tmp_7^post6 == 0 /\ __disjvr_0^0-__disjvr_0^post6 == 0 /\ -result_4^post6+result_4^0 == 0 /\ x_5^0-x_5^post6 == 0 /\ -y_6^post6+y_6^0 == 0), cost: 1
   6: l5 -> l0 : __disjvr_0^0'=__disjvr_0^post7, result_4^0'=result_4^post7, tmp_7^0'=tmp_7^post7, x_5^0'=x_5^post7, y_6^0'=y_6^post7, (-y_6^post7+y_6^0 == 0 /\ -__disjvr_0^post7+__disjvr_0^0 == 0 /\ tmp_7^0-tmp_7^post7 == 0 /\ -x_5^post7+x_5^0 == 0 /\ result_4^0-result_4^post7 == 0), cost: 1
   7: l6 -> l5 : __disjvr_0^0'=__disjvr_0^post8, result_4^0'=result_4^post8, tmp_7^0'=tmp_7^post8, x_5^0'=x_5^post8, y_6^0'=y_6^post8, (x_5^0-x_5^post8 == 0 /\ -y_6^post8+y_6^0 == 0 /\ tmp_7^0-tmp_7^post8 == 0 /\ -result_4^post8+result_4^0 == 0 /\ __disjvr_0^0-__disjvr_0^post8 == 0), cost: 1

Chained Linear Paths

Start location: l6
Program variables: __disjvr_0^0 result_4^0 tmp_7^0 x_5^0 y_6^0
   0: l0 -> l1 : __disjvr_0^0'=__disjvr_0^post1, result_4^0'=result_4^post1, tmp_7^0'=tmp_7^post1, x_5^0'=x_5^post1, y_6^0'=y_6^post1, (0 == 0 /\ -x_5^post1+x_5^0 == 0 /\ tmp_7^0-tmp_7^post1 == 0 /\ -__disjvr_0^post1+__disjvr_0^0 == 0 /\ -y_6^post1+y_6^0 == 0 /\ -x_5^0+y_6^0 <= 0), cost: 1
   9: l0 -> l0 : __disjvr_0^0'=__disjvr_0^post3, result_4^0'=result_4^post3, tmp_7^0'=tmp_7^post3, x_5^0'=x_5^post3, y_6^0'=y_6^post3, (0 == 0 /\ 1+x_5^0-y_6^0 <= 0 /\ -__disjvr_0^post3+__disjvr_0^post2 == 0 /\ tmp_7^post2 <= 0 /\ 1+y_6^post2-y_6^0 == 0 /\ result_4^post2-result_4^post3 == 0 /\ __disjvr_0^0-__disjvr_0^post2 == 0 /\ -x_5^post3+x_5^post2 == 0 /\ -tmp_7^post2 <= 0 /\ tmp_7^post2-tmp_7^post3 == 0 /\ -y_6^post3+y_6^post2 == 0 /\ -result_4^post2+result_4^0 == 0 /\ -x_5^post2+x_5^0 == 0), cost: 1
  11: l0 -> l0 : __disjvr_0^0'=__disjvr_0^post6, result_4^0'=result_4^post6, tmp_7^0'=tmp_7^post6, x_5^0'=x_5^post6, y_6^0'=y_6^post6, (0 == 0 /\ -y_6^post4+y_6^0 == 0 /\ 1+x_5^0-y_6^0 <= 0 /\ -tmp_7^post6+tmp_7^post5 == 0 /\ -y_6^post5+y_6^post4 == 0 /\ -result_4^post4+result_4^0 == 0 /\ -result_4^post6+result_4^post5 == 0 /\ tmp_7^post4-tmp_7^post5 == 0 /\ -__disjvr_0^post5+__disjvr_0^post4 == 0 /\ __disjvr_0^0-__disjvr_0^post4 == 0 /\ x_5^post5-x_5^post6 == 0 /\ __disjvr_0^post5-__disjvr_0^post4 == 0 /\ -x_5^post5+x_5^post4 == 0 /\ __disjvr_0^post5-__disjvr_0^post6 == 0 /\ result_4^post4-result_4^post5 == 0 /\ -x_5^post4+x_5^0 == 0 /\ -y_6^post6+y_6^post5 == 0), cost: 1
   8: l6 -> l0 : __disjvr_0^0'=__disjvr_0^post7, result_4^0'=result_4^post7, tmp_7^0'=tmp_7^post7, x_5^0'=x_5^post7, y_6^0'=y_6^post7, (result_4^post8-result_4^post7 == 0 /\ x_5^0-x_5^post8 == 0 /\ -y_6^post8+y_6^0 == 0 /\ tmp_7^0-tmp_7^post8 == 0 /\ -__disjvr_0^post7+__disjvr_0^post8 == 0 /\ y_6^post8-y_6^post7 == 0 /\ -x_5^post7+x_5^post8 == 0 /\ -result_4^post8+result_4^0 == 0 /\ tmp_7^post8-tmp_7^post7 == 0 /\ __disjvr_0^0-__disjvr_0^post8 == 0), cost: 1

	Eliminating location l5 by chaining:

	Applied chaining

	First rule:
	l6 -> l5 : __disjvr_0^0'=__disjvr_0^post8, result_4^0'=result_4^post8, tmp_7^0'=tmp_7^post8, x_5^0'=x_5^post8, y_6^0'=y_6^post8, (x_5^0-x_5^post8 == 0 /\ -y_6^post8+y_6^0 == 0 /\ tmp_7^0-tmp_7^post8 == 0 /\ -result_4^post8+result_4^0 == 0 /\ __disjvr_0^0-__disjvr_0^post8 == 0), cost: 1
	Second rule:
	l5 -> l0 : __disjvr_0^0'=__disjvr_0^post7, result_4^0'=result_4^post7, tmp_7^0'=tmp_7^post7, x_5^0'=x_5^post7, y_6^0'=y_6^post7, (-y_6^post7+y_6^0 == 0 /\ -__disjvr_0^post7+__disjvr_0^0 == 0 /\ tmp_7^0-tmp_7^post7 == 0 /\ -x_5^post7+x_5^0 == 0 /\ result_4^0-result_4^post7 == 0), cost: 1
	New rule:
	l6 -> l0 : __disjvr_0^0'=__disjvr_0^post7, result_4^0'=result_4^post7, tmp_7^0'=tmp_7^post7, x_5^0'=x_5^post7, y_6^0'=y_6^post7, (result_4^post8-result_4^post7 == 0 /\ x_5^0-x_5^post8 == 0 /\ -y_6^post8+y_6^0 == 0 /\ tmp_7^0-tmp_7^post8 == 0 /\ -__disjvr_0^post7+__disjvr_0^post8 == 0 /\ y_6^post8-y_6^post7 == 0 /\ -x_5^post7+x_5^post8 == 0 /\ -result_4^post8+result_4^0 == 0 /\ tmp_7^post8-tmp_7^post7 == 0 /\ __disjvr_0^0-__disjvr_0^post8 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 6 7
	
	Eliminating location l2 by chaining:

	Applied chaining

	First rule:
	l0 -> l2 : __disjvr_0^0'=__disjvr_0^post2, result_4^0'=result_4^post2, tmp_7^0'=tmp_7^post2, x_5^0'=x_5^post2, y_6^0'=y_6^post2, (0 == 0 /\ 1+x_5^0-y_6^0 <= 0 /\ tmp_7^post2 <= 0 /\ 1+y_6^post2-y_6^0 == 0 /\ __disjvr_0^0-__disjvr_0^post2 == 0 /\ -tmp_7^post2 <= 0 /\ -result_4^post2+result_4^0 == 0 /\ -x_5^post2+x_5^0 == 0), cost: 1
	Second rule:
	l2 -> l0 : __disjvr_0^0'=__disjvr_0^post3, result_4^0'=result_4^post3, tmp_7^0'=tmp_7^post3, x_5^0'=x_5^post3, y_6^0'=y_6^post3, (-__disjvr_0^post3+__disjvr_0^0 == 0 /\ tmp_7^0-tmp_7^post3 == 0 /\ result_4^0-result_4^post3 == 0 /\ -x_5^post3+x_5^0 == 0 /\ -y_6^post3+y_6^0 == 0), cost: 1
	New rule:
	l0 -> l0 : __disjvr_0^0'=__disjvr_0^post3, result_4^0'=result_4^post3, tmp_7^0'=tmp_7^post3, x_5^0'=x_5^post3, y_6^0'=y_6^post3, (0 == 0 /\ 1+x_5^0-y_6^0 <= 0 /\ -__disjvr_0^post3+__disjvr_0^post2 == 0 /\ tmp_7^post2 <= 0 /\ 1+y_6^post2-y_6^0 == 0 /\ result_4^post2-result_4^post3 == 0 /\ __disjvr_0^0-__disjvr_0^post2 == 0 /\ -x_5^post3+x_5^post2 == 0 /\ -tmp_7^post2 <= 0 /\ tmp_7^post2-tmp_7^post3 == 0 /\ -y_6^post3+y_6^post2 == 0 /\ -result_4^post2+result_4^0 == 0 /\ -x_5^post2+x_5^0 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 1 2
	
	Eliminating location l4 by chaining:

	Applied chaining

	First rule:
	l0 -> l4 : __disjvr_0^0'=__disjvr_0^post4, result_4^0'=result_4^post4, tmp_7^0'=tmp_7^post4, x_5^0'=x_5^post4, y_6^0'=y_6^post4, (0 == 0 /\ -y_6^post4+y_6^0 == 0 /\ 1+x_5^0-y_6^0 <= 0 /\ -result_4^post4+result_4^0 == 0 /\ __disjvr_0^0-__disjvr_0^post4 == 0 /\ -x_5^post4+x_5^0 == 0), cost: 1
	Second rule:
	l4 -> l3 : __disjvr_0^0'=__disjvr_0^post5, result_4^0'=result_4^post5, tmp_7^0'=tmp_7^post5, x_5^0'=x_5^post5, y_6^0'=y_6^post5, (tmp_7^0-tmp_7^post5 == 0 /\ -__disjvr_0^post5+__disjvr_0^0 == 0 /\ -y_6^post5+y_6^0 == 0 /\ __disjvr_0^post5-__disjvr_0^0 == 0 /\ result_4^0-result_4^post5 == 0 /\ -x_5^post5+x_5^0 == 0), cost: 1
	New rule:
	l0 -> l3 : __disjvr_0^0'=__disjvr_0^post5, result_4^0'=result_4^post5, tmp_7^0'=tmp_7^post5, x_5^0'=x_5^post5, y_6^0'=y_6^post5, (0 == 0 /\ -y_6^post4+y_6^0 == 0 /\ 1+x_5^0-y_6^0 <= 0 /\ -y_6^post5+y_6^post4 == 0 /\ -result_4^post4+result_4^0 == 0 /\ tmp_7^post4-tmp_7^post5 == 0 /\ -__disjvr_0^post5+__disjvr_0^post4 == 0 /\ __disjvr_0^0-__disjvr_0^post4 == 0 /\ __disjvr_0^post5-__disjvr_0^post4 == 0 /\ -x_5^post5+x_5^post4 == 0 /\ result_4^post4-result_4^post5 == 0 /\ -x_5^post4+x_5^0 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 3 4
	
	Eliminating location l3 by chaining:

	Applied chaining

	First rule:
	l0 -> l3 : __disjvr_0^0'=__disjvr_0^post5, result_4^0'=result_4^post5, tmp_7^0'=tmp_7^post5, x_5^0'=x_5^post5, y_6^0'=y_6^post5, (0 == 0 /\ -y_6^post4+y_6^0 == 0 /\ 1+x_5^0-y_6^0 <= 0 /\ -y_6^post5+y_6^post4 == 0 /\ -result_4^post4+result_4^0 == 0 /\ tmp_7^post4-tmp_7^post5 == 0 /\ -__disjvr_0^post5+__disjvr_0^post4 == 0 /\ __disjvr_0^0-__disjvr_0^post4 == 0 /\ __disjvr_0^post5-__disjvr_0^post4 == 0 /\ -x_5^post5+x_5^post4 == 0 /\ result_4^post4-result_4^post5 == 0 /\ -x_5^post4+x_5^0 == 0), cost: 1
	Second rule:
	l3 -> l0 : __disjvr_0^0'=__disjvr_0^post6, result_4^0'=result_4^post6, tmp_7^0'=tmp_7^post6, x_5^0'=x_5^post6, y_6^0'=y_6^post6, (tmp_7^0-tmp_7^post6 == 0 /\ __disjvr_0^0-__disjvr_0^post6 == 0 /\ -result_4^post6+result_4^0 == 0 /\ x_5^0-x_5^post6 == 0 /\ -y_6^post6+y_6^0 == 0), cost: 1
	New rule:
	l0 -> l0 : __disjvr_0^0'=__disjvr_0^post6, result_4^0'=result_4^post6, tmp_7^0'=tmp_7^post6, x_5^0'=x_5^post6, y_6^0'=y_6^post6, (0 == 0 /\ -y_6^post4+y_6^0 == 0 /\ 1+x_5^0-y_6^0 <= 0 /\ -tmp_7^post6+tmp_7^post5 == 0 /\ -y_6^post5+y_6^post4 == 0 /\ -result_4^post4+result_4^0 == 0 /\ -result_4^post6+result_4^post5 == 0 /\ tmp_7^post4-tmp_7^post5 == 0 /\ -__disjvr_0^post5+__disjvr_0^post4 == 0 /\ __disjvr_0^0-__disjvr_0^post4 == 0 /\ x_5^post5-x_5^post6 == 0 /\ __disjvr_0^post5-__disjvr_0^post4 == 0 /\ -x_5^post5+x_5^post4 == 0 /\ __disjvr_0^post5-__disjvr_0^post6 == 0 /\ result_4^post4-result_4^post5 == 0 /\ -x_5^post4+x_5^0 == 0 /\ -y_6^post6+y_6^post5 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 5 10

Simplified Transitions

Start location: l6
Program variables: result_4^0 tmp_7^0 x_5^0 y_6^0
  12: l0 -> l1 : result_4^0'=result_4^post1, -x_5^0+y_6^0 <= 0, cost: 1
  14: l0 -> l0 : tmp_7^0'=0, y_6^0'=-1+y_6^0, 1+x_5^0-y_6^0 <= 0, cost: 1
  15: l0 -> l0 : tmp_7^0'=tmp_7^post5, 1+x_5^0-y_6^0 <= 0, cost: 1
  13: l6 -> l0 : T, cost: 1

	Propagated Equalities

	Original rule:
	l0 -> l1 : __disjvr_0^0'=__disjvr_0^post1, result_4^0'=result_4^post1, tmp_7^0'=tmp_7^post1, x_5^0'=x_5^post1, y_6^0'=y_6^post1, (0 == 0 /\ -x_5^post1+x_5^0 == 0 /\ tmp_7^0-tmp_7^post1 == 0 /\ -__disjvr_0^post1+__disjvr_0^0 == 0 /\ -y_6^post1+y_6^0 == 0 /\ -x_5^0+y_6^0 <= 0), cost: 1
	New rule:
	l0 -> l1 : __disjvr_0^0'=__disjvr_0^0, result_4^0'=result_4^post1, tmp_7^0'=tmp_7^0, x_5^0'=x_5^0, y_6^0'=y_6^0, (0 == 0 /\ -x_5^0+y_6^0 <= 0), cost: 1
	
		propagated equality x_5^post1 = x_5^0
		
		propagated equality tmp_7^post1 = tmp_7^0
		
		propagated equality __disjvr_0^post1 = __disjvr_0^0
		
		propagated equality y_6^post1 = y_6^0
		
	Simplified Guard

	Original rule:
	l0 -> l1 : __disjvr_0^0'=__disjvr_0^0, result_4^0'=result_4^post1, tmp_7^0'=tmp_7^0, x_5^0'=x_5^0, y_6^0'=y_6^0, (0 == 0 /\ -x_5^0+y_6^0 <= 0), cost: 1
	New rule:
	l0 -> l1 : __disjvr_0^0'=__disjvr_0^0, result_4^0'=result_4^post1, tmp_7^0'=tmp_7^0, x_5^0'=x_5^0, y_6^0'=y_6^0, -x_5^0+y_6^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l1 : __disjvr_0^0'=__disjvr_0^0, result_4^0'=result_4^post1, tmp_7^0'=tmp_7^0, x_5^0'=x_5^0, y_6^0'=y_6^0, -x_5^0+y_6^0 <= 0, cost: 1
	New rule:
	l0 -> l1 : result_4^0'=result_4^post1, -x_5^0+y_6^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l6 -> l0 : __disjvr_0^0'=__disjvr_0^post7, result_4^0'=result_4^post7, tmp_7^0'=tmp_7^post7, x_5^0'=x_5^post7, y_6^0'=y_6^post7, (result_4^post8-result_4^post7 == 0 /\ x_5^0-x_5^post8 == 0 /\ -y_6^post8+y_6^0 == 0 /\ tmp_7^0-tmp_7^post8 == 0 /\ -__disjvr_0^post7+__disjvr_0^post8 == 0 /\ y_6^post8-y_6^post7 == 0 /\ -x_5^post7+x_5^post8 == 0 /\ -result_4^post8+result_4^0 == 0 /\ tmp_7^post8-tmp_7^post7 == 0 /\ __disjvr_0^0-__disjvr_0^post8 == 0), cost: 1
	New rule:
	l6 -> l0 : __disjvr_0^0'=__disjvr_0^post8, result_4^0'=result_4^post8, tmp_7^0'=tmp_7^post8, x_5^0'=x_5^post8, y_6^0'=y_6^post8, (0 == 0 /\ x_5^0-x_5^post8 == 0 /\ -y_6^post8+y_6^0 == 0 /\ tmp_7^0-tmp_7^post8 == 0 /\ -result_4^post8+result_4^0 == 0 /\ __disjvr_0^0-__disjvr_0^post8 == 0), cost: 1
	
		propagated equality result_4^post7 = result_4^post8
		
		propagated equality __disjvr_0^post7 = __disjvr_0^post8
		
		propagated equality y_6^post7 = y_6^post8
		
		propagated equality x_5^post7 = x_5^post8
		
		propagated equality tmp_7^post7 = tmp_7^post8
		
	Propagated Equalities

	Original rule:
	l6 -> l0 : __disjvr_0^0'=__disjvr_0^post8, result_4^0'=result_4^post8, tmp_7^0'=tmp_7^post8, x_5^0'=x_5^post8, y_6^0'=y_6^post8, (0 == 0 /\ x_5^0-x_5^post8 == 0 /\ -y_6^post8+y_6^0 == 0 /\ tmp_7^0-tmp_7^post8 == 0 /\ -result_4^post8+result_4^0 == 0 /\ __disjvr_0^0-__disjvr_0^post8 == 0), cost: 1
	New rule:
	l6 -> l0 : __disjvr_0^0'=__disjvr_0^0, result_4^0'=result_4^0, tmp_7^0'=tmp_7^0, x_5^0'=x_5^0, y_6^0'=y_6^0, 0 == 0, cost: 1
	
		propagated equality x_5^post8 = x_5^0
		
		propagated equality y_6^post8 = y_6^0
		
		propagated equality tmp_7^post8 = tmp_7^0
		
		propagated equality result_4^post8 = result_4^0
		
		propagated equality __disjvr_0^post8 = __disjvr_0^0
		
	Simplified Guard

	Original rule:
	l6 -> l0 : __disjvr_0^0'=__disjvr_0^0, result_4^0'=result_4^0, tmp_7^0'=tmp_7^0, x_5^0'=x_5^0, y_6^0'=y_6^0, 0 == 0, cost: 1
	New rule:
	l6 -> l0 : __disjvr_0^0'=__disjvr_0^0, result_4^0'=result_4^0, tmp_7^0'=tmp_7^0, x_5^0'=x_5^0, y_6^0'=y_6^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l6 -> l0 : __disjvr_0^0'=__disjvr_0^0, result_4^0'=result_4^0, tmp_7^0'=tmp_7^0, x_5^0'=x_5^0, y_6^0'=y_6^0, T, cost: 1
	New rule:
	l6 -> l0 : T, cost: 1
	
	made implied equalities explicit

	Original rule:
	l0 -> l0 : __disjvr_0^0'=__disjvr_0^post3, result_4^0'=result_4^post3, tmp_7^0'=tmp_7^post3, x_5^0'=x_5^post3, y_6^0'=y_6^post3, (0 == 0 /\ 1+x_5^0-y_6^0 <= 0 /\ -__disjvr_0^post3+__disjvr_0^post2 == 0 /\ tmp_7^post2 <= 0 /\ 1+y_6^post2-y_6^0 == 0 /\ result_4^post2-result_4^post3 == 0 /\ __disjvr_0^0-__disjvr_0^post2 == 0 /\ -x_5^post3+x_5^post2 == 0 /\ -tmp_7^post2 <= 0 /\ tmp_7^post2-tmp_7^post3 == 0 /\ -y_6^post3+y_6^post2 == 0 /\ -result_4^post2+result_4^0 == 0 /\ -x_5^post2+x_5^0 == 0), cost: 1
	New rule:
	l0 -> l0 : __disjvr_0^0'=__disjvr_0^post3, result_4^0'=result_4^post3, tmp_7^0'=tmp_7^post3, x_5^0'=x_5^post3, y_6^0'=y_6^post3, (0 == 0 /\ 1+x_5^0-y_6^0 <= 0 /\ -__disjvr_0^post3+__disjvr_0^post2 == 0 /\ tmp_7^post2 <= 0 /\ tmp_7^post2 == 0 /\ 1+y_6^post2-y_6^0 == 0 /\ result_4^post2-result_4^post3 == 0 /\ __disjvr_0^0-__disjvr_0^post2 == 0 /\ -x_5^post3+x_5^post2 == 0 /\ -tmp_7^post2 <= 0 /\ tmp_7^post2-tmp_7^post3 == 0 /\ -y_6^post3+y_6^post2 == 0 /\ -result_4^post2+result_4^0 == 0 /\ -x_5^post2+x_5^0 == 0), cost: 1
	
	Propagated Equalities

	Original rule:
	l0 -> l0 : __disjvr_0^0'=__disjvr_0^post3, result_4^0'=result_4^post3, tmp_7^0'=tmp_7^post3, x_5^0'=x_5^post3, y_6^0'=y_6^post3, (0 == 0 /\ 1+x_5^0-y_6^0 <= 0 /\ -__disjvr_0^post3+__disjvr_0^post2 == 0 /\ tmp_7^post2 <= 0 /\ tmp_7^post2 == 0 /\ 1+y_6^post2-y_6^0 == 0 /\ result_4^post2-result_4^post3 == 0 /\ __disjvr_0^0-__disjvr_0^post2 == 0 /\ -x_5^post3+x_5^post2 == 0 /\ -tmp_7^post2 <= 0 /\ tmp_7^post2-tmp_7^post3 == 0 /\ -y_6^post3+y_6^post2 == 0 /\ -result_4^post2+result_4^0 == 0 /\ -x_5^post2+x_5^0 == 0), cost: 1
	New rule:
	l0 -> l0 : __disjvr_0^0'=__disjvr_0^post2, result_4^0'=result_4^post2, tmp_7^0'=tmp_7^post2, x_5^0'=x_5^post2, y_6^0'=y_6^post2, (0 == 0 /\ 1+x_5^0-y_6^0 <= 0 /\ tmp_7^post2 <= 0 /\ tmp_7^post2 == 0 /\ 1+y_6^post2-y_6^0 == 0 /\ __disjvr_0^0-__disjvr_0^post2 == 0 /\ -tmp_7^post2 <= 0 /\ -result_4^post2+result_4^0 == 0 /\ -x_5^post2+x_5^0 == 0), cost: 1
	
		propagated equality __disjvr_0^post3 = __disjvr_0^post2
		
		propagated equality result_4^post3 = result_4^post2
		
		propagated equality x_5^post3 = x_5^post2
		
		propagated equality tmp_7^post3 = tmp_7^post2
		
		propagated equality y_6^post3 = y_6^post2
		
	Propagated Equalities

	Original rule:
	l0 -> l0 : __disjvr_0^0'=__disjvr_0^post2, result_4^0'=result_4^post2, tmp_7^0'=tmp_7^post2, x_5^0'=x_5^post2, y_6^0'=y_6^post2, (0 == 0 /\ 1+x_5^0-y_6^0 <= 0 /\ tmp_7^post2 <= 0 /\ tmp_7^post2 == 0 /\ 1+y_6^post2-y_6^0 == 0 /\ __disjvr_0^0-__disjvr_0^post2 == 0 /\ -tmp_7^post2 <= 0 /\ -result_4^post2+result_4^0 == 0 /\ -x_5^post2+x_5^0 == 0), cost: 1
	New rule:
	l0 -> l0 : __disjvr_0^0'=__disjvr_0^0, result_4^0'=result_4^0, tmp_7^0'=0, x_5^0'=x_5^0, y_6^0'=-1+y_6^0, (0 <= 0 /\ 0 == 0 /\ 1+x_5^0-y_6^0 <= 0), cost: 1
	
		propagated equality tmp_7^post2 = 0
		
		propagated equality y_6^post2 = -1+y_6^0
		
		propagated equality __disjvr_0^post2 = __disjvr_0^0
		
		propagated equality result_4^post2 = result_4^0
		
		propagated equality x_5^post2 = x_5^0
		
	Simplified Guard

	Original rule:
	l0 -> l0 : __disjvr_0^0'=__disjvr_0^0, result_4^0'=result_4^0, tmp_7^0'=0, x_5^0'=x_5^0, y_6^0'=-1+y_6^0, (0 <= 0 /\ 0 == 0 /\ 1+x_5^0-y_6^0 <= 0), cost: 1
	New rule:
	l0 -> l0 : __disjvr_0^0'=__disjvr_0^0, result_4^0'=result_4^0, tmp_7^0'=0, x_5^0'=x_5^0, y_6^0'=-1+y_6^0, 1+x_5^0-y_6^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l0 : __disjvr_0^0'=__disjvr_0^0, result_4^0'=result_4^0, tmp_7^0'=0, x_5^0'=x_5^0, y_6^0'=-1+y_6^0, 1+x_5^0-y_6^0 <= 0, cost: 1
	New rule:
	l0 -> l0 : tmp_7^0'=0, y_6^0'=-1+y_6^0, 1+x_5^0-y_6^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l0 -> l0 : __disjvr_0^0'=__disjvr_0^post6, result_4^0'=result_4^post6, tmp_7^0'=tmp_7^post6, x_5^0'=x_5^post6, y_6^0'=y_6^post6, (0 == 0 /\ -y_6^post4+y_6^0 == 0 /\ 1+x_5^0-y_6^0 <= 0 /\ -tmp_7^post6+tmp_7^post5 == 0 /\ -y_6^post5+y_6^post4 == 0 /\ -result_4^post4+result_4^0 == 0 /\ -result_4^post6+result_4^post5 == 0 /\ tmp_7^post4-tmp_7^post5 == 0 /\ -__disjvr_0^post5+__disjvr_0^post4 == 0 /\ __disjvr_0^0-__disjvr_0^post4 == 0 /\ x_5^post5-x_5^post6 == 0 /\ __disjvr_0^post5-__disjvr_0^post4 == 0 /\ -x_5^post5+x_5^post4 == 0 /\ __disjvr_0^post5-__disjvr_0^post6 == 0 /\ result_4^post4-result_4^post5 == 0 /\ -x_5^post4+x_5^0 == 0 /\ -y_6^post6+y_6^post5 == 0), cost: 1
	New rule:
	l0 -> l0 : __disjvr_0^0'=__disjvr_0^post5, result_4^0'=result_4^post5, tmp_7^0'=tmp_7^post5, x_5^0'=x_5^post5, y_6^0'=y_6^post5, (0 == 0 /\ -y_6^post4+y_6^0 == 0 /\ 1+x_5^0-y_6^0 <= 0 /\ -y_6^post5+y_6^post4 == 0 /\ -result_4^post4+result_4^0 == 0 /\ tmp_7^post4-tmp_7^post5 == 0 /\ -__disjvr_0^post5+__disjvr_0^post4 == 0 /\ __disjvr_0^0-__disjvr_0^post4 == 0 /\ __disjvr_0^post5-__disjvr_0^post4 == 0 /\ -x_5^post5+x_5^post4 == 0 /\ result_4^post4-result_4^post5 == 0 /\ -x_5^post4+x_5^0 == 0), cost: 1
	
		propagated equality tmp_7^post6 = tmp_7^post5
		
		propagated equality result_4^post6 = result_4^post5
		
		propagated equality x_5^post6 = x_5^post5
		
		propagated equality __disjvr_0^post6 = __disjvr_0^post5
		
		propagated equality y_6^post6 = y_6^post5
		
	Propagated Equalities

	Original rule:
	l0 -> l0 : __disjvr_0^0'=__disjvr_0^post5, result_4^0'=result_4^post5, tmp_7^0'=tmp_7^post5, x_5^0'=x_5^post5, y_6^0'=y_6^post5, (0 == 0 /\ -y_6^post4+y_6^0 == 0 /\ 1+x_5^0-y_6^0 <= 0 /\ -y_6^post5+y_6^post4 == 0 /\ -result_4^post4+result_4^0 == 0 /\ tmp_7^post4-tmp_7^post5 == 0 /\ -__disjvr_0^post5+__disjvr_0^post4 == 0 /\ __disjvr_0^0-__disjvr_0^post4 == 0 /\ __disjvr_0^post5-__disjvr_0^post4 == 0 /\ -x_5^post5+x_5^post4 == 0 /\ result_4^post4-result_4^post5 == 0 /\ -x_5^post4+x_5^0 == 0), cost: 1
	New rule:
	l0 -> l0 : __disjvr_0^0'=__disjvr_0^0, result_4^0'=result_4^0, tmp_7^0'=tmp_7^post5, x_5^0'=x_5^0, y_6^0'=y_6^0, (0 == 0 /\ 1+x_5^0-y_6^0 <= 0), cost: 1
	
		propagated equality y_6^post4 = y_6^0
		
		propagated equality y_6^post5 = y_6^0
		
		propagated equality result_4^post4 = result_4^0
		
		propagated equality tmp_7^post4 = tmp_7^post5
		
		propagated equality __disjvr_0^post4 = __disjvr_0^post5
		
		propagated equality __disjvr_0^post5 = __disjvr_0^0
		
		propagated equality x_5^post4 = x_5^post5
		
		propagated equality result_4^post5 = result_4^0
		
		propagated equality x_5^post5 = x_5^0
		
	Simplified Guard

	Original rule:
	l0 -> l0 : __disjvr_0^0'=__disjvr_0^0, result_4^0'=result_4^0, tmp_7^0'=tmp_7^post5, x_5^0'=x_5^0, y_6^0'=y_6^0, (0 == 0 /\ 1+x_5^0-y_6^0 <= 0), cost: 1
	New rule:
	l0 -> l0 : __disjvr_0^0'=__disjvr_0^0, result_4^0'=result_4^0, tmp_7^0'=tmp_7^post5, x_5^0'=x_5^0, y_6^0'=y_6^0, 1+x_5^0-y_6^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l0 : __disjvr_0^0'=__disjvr_0^0, result_4^0'=result_4^0, tmp_7^0'=tmp_7^post5, x_5^0'=x_5^0, y_6^0'=y_6^0, 1+x_5^0-y_6^0 <= 0, cost: 1
	New rule:
	l0 -> l0 : tmp_7^0'=tmp_7^post5, 1+x_5^0-y_6^0 <= 0, cost: 1

Step with 13

	Trace

	13[T]
	
	Blocked

	[{}, {}]

Step with 12

	Trace

	13[T], 12[(-x_5^0+y_6^0 <= 0)]
	
	Blocked

	[{}, {}, {}]

Backtrack

	Trace

	13[T]
	
	Blocked

	[{}, {12[T]}]

Step with 14

	Trace

	13[T], 14[(1+x_5^0-y_6^0 <= 0)]
	
	Blocked

	[{}, {12[T]}, {}]

Accelerate

Start location: l6
Program variables: result_4^0 tmp_7^0 x_5^0 y_6^0
  12: l0 -> l1 : result_4^0'=result_4^post1, -x_5^0+y_6^0 <= 0, cost: 1
  14: l0 -> l0 : tmp_7^0'=0, y_6^0'=-1+y_6^0, 1+x_5^0-y_6^0 <= 0, cost: 1
  15: l0 -> l0 : tmp_7^0'=tmp_7^post5, 1+x_5^0-y_6^0 <= 0, cost: 1
  16: l0 -> l0 : tmp_7^0'=0, y_6^0'=y_6^0-n, (-x_5^0+y_6^0-n >= 0 /\ -1+n >= 0), cost: 1
  13: l6 -> l0 : T, cost: 1

	Loop Acceleration

	Original rule:
	l0 -> l0 : tmp_7^0'=0, y_6^0'=-1+y_6^0, (1+x_5^0-y_6^0 <= 0), cost: 1
	New rule:
	l0 -> l0 : tmp_7^0'=0, y_6^0'=y_6^0-n, (-x_5^0+y_6^0-n >= 0 /\ -1+n >= 0), cost: 1

		-1-x_5^0+y_6^0 >= 0 [0]: montonic decrease yields -x_5^0+y_6^0-n >= 0
		
		-1-x_5^0+y_6^0 >= 0 [1]: eventual increase yields (1 <= 0 /\ -1-x_5^0+y_6^0 >= 0)
		
		Replacement map: {-1-x_5^0+y_6^0 >= 0 -> -x_5^0+y_6^0-n >= 0}

	Trace

	13[T], 16[(-x_5^0+y_6^0-n >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {12[T]}, {14[T], 16[T]}]

Step with 12

	Trace

	13[T], 16[(-x_5^0+y_6^0-n >= 0 /\ -1+n >= 0)], 12[(-x_5^0+y_6^0 <= 0)]
	
	Blocked

	[{}, {12[T]}, {14[T], 16[T]}, {}]

Backtrack

	Trace

	13[T], 16[(-x_5^0+y_6^0-n >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {12[T]}, {12[T], 14[T], 16[T]}]

Step with 15

	Trace

	13[T], 16[(-x_5^0+y_6^0-n >= 0 /\ -1+n >= 0)], 15[(1+x_5^0-y_6^0 <= 0)]
	
	Blocked

	[{}, {12[T]}, {12[T], 14[T], 16[T]}, {}]

Nonterm

Start location: l6
Program variables: result_4^0 tmp_7^0 x_5^0 y_6^0
  12: l0 -> l1 : result_4^0'=result_4^post1, -x_5^0+y_6^0 <= 0, cost: 1
  14: l0 -> l0 : tmp_7^0'=0, y_6^0'=-1+y_6^0, 1+x_5^0-y_6^0 <= 0, cost: 1
  15: l0 -> l0 : tmp_7^0'=tmp_7^post5, 1+x_5^0-y_6^0 <= 0, cost: 1
  16: l0 -> l0 : tmp_7^0'=0, y_6^0'=y_6^0-n, (-x_5^0+y_6^0-n >= 0 /\ -1+n >= 0), cost: 1
  17: l0 -> LoAT_sink : (-1-x_5^0+y_6^0 >= 0 /\ -1+n2 >= 0), cost: NONTERM
  13: l6 -> l0 : T, cost: 1

	Certificate of Non-Termination

	Original rule:
	l0 -> l0 : tmp_7^0'=tmp_7^post5, (1+x_5^0-y_6^0 <= 0), cost: 1
	New rule:
	l0 -> LoAT_sink : (-1-x_5^0+y_6^0 >= 0 /\ -1+n2 >= 0), cost: NONTERM

		-1-x_5^0+y_6^0 >= 0 [0]: monotonic increase yields -1-x_5^0+y_6^0 >= 0
		
		Replacement map: {-1-x_5^0+y_6^0 >= 0 -> -1-x_5^0+y_6^0 >= 0}

Step with 17

	Trace

	13[T], 16[(-x_5^0+y_6^0-n >= 0 /\ -1+n >= 0)], 17[(-1-x_5^0+y_6^0 >= 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {12[T]}, {12[T], 14[T], 16[T]}, {17[T]}]

Refute

	Counterexample

	[ result_4^0=0 tmp_7^0=0 x_5^0=0 y_6^0=2 ] 13 [ result_4^0=0 tmp_7^0=0 x_5^0=0 y_6^0=1 ] 16 [ result_4^0=0 tmp_7^0=0 x_5^0=0 y_6^0=2 ] 17
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
