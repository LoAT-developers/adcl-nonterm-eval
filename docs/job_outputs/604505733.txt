WORST_CASE(Omega(0),?)

Initial ITS
Start location: __init
   0: f1_0_main_Load -> f31_0_fib_NE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2 > 0 /\ arg1 > 0 /\ arg2-arg1P0 == 0), cost: 1
   1: f31_0_fib_NE -> f31_0_fib_NE : arg2'=arg2P1, arg1'=arg1P1, (-1+arg1-arg1P1 == 0 /\ -1 < 0 /\ -1+arg1 > 0), cost: 1
   2: f31_0_fib_NE -> f142_0_fib_InvokeMethod : arg2'=arg2P2, arg1'=arg1P2, (-arg2P2 == 0 /\ 2-arg1 == 0 /\ 2-arg1P2 == 0), cost: 1
   3: f31_0_fib_NE -> f142_0_fib_InvokeMethod : arg2'=arg2P3, arg1'=arg1P3, (-2+arg1-arg2P3 == 0 /\ -1 < 0 /\ -1+arg1 > 0 /\ -arg1P3+arg1 == 0), cost: 1
   5: f142_0_fib_InvokeMethod -> f31_0_fib_NE : arg2'=arg2P5, arg1'=arg1P5, (arg2-arg1P5 == 0 /\ arg2-arg1 < 0 /\ -1+arg1 > 0), cost: 1
   4: f81_0_fib_Return -> f142_0_fib_InvokeMethod : arg2'=arg2P4, arg1'=arg1P4, (arg1-arg1P4 == 0 /\ arg1 > 0 /\ -2+arg1-arg2P4 == 0), cost: 1
   6: __init -> f1_0_main_Load : arg2'=arg2P6, arg1'=arg1P6, TRUE, cost: 1


Removed unreachable rules and leafs
Start location: __init
   0: f1_0_main_Load -> f31_0_fib_NE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2 > 0 /\ arg1 > 0 /\ arg2-arg1P0 == 0), cost: 1
   1: f31_0_fib_NE -> f31_0_fib_NE : arg2'=arg2P1, arg1'=arg1P1, (-1+arg1-arg1P1 == 0 /\ -1 < 0 /\ -1+arg1 > 0), cost: 1
   2: f31_0_fib_NE -> f142_0_fib_InvokeMethod : arg2'=arg2P2, arg1'=arg1P2, (-arg2P2 == 0 /\ 2-arg1 == 0 /\ 2-arg1P2 == 0), cost: 1
   3: f31_0_fib_NE -> f142_0_fib_InvokeMethod : arg2'=arg2P3, arg1'=arg1P3, (-2+arg1-arg2P3 == 0 /\ -1 < 0 /\ -1+arg1 > 0 /\ -arg1P3+arg1 == 0), cost: 1
   5: f142_0_fib_InvokeMethod -> f31_0_fib_NE : arg2'=arg2P5, arg1'=arg1P5, (arg2-arg1P5 == 0 /\ arg2-arg1 < 0 /\ -1+arg1 > 0), cost: 1
   6: __init -> f1_0_main_Load : arg2'=arg2P6, arg1'=arg1P6, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_Load -> f31_0_fib_NE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2 > 0 /\ arg1 > 0 /\ arg2-arg1P0 == 0), cost: 1
New rule:
f1_0_main_Load -> f31_0_fib_NE : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f31_0_fib_NE -> f31_0_fib_NE : arg2'=arg2P1, arg1'=arg1P1, (-1+arg1-arg1P1 == 0 /\ -1 < 0 /\ -1+arg1 > 0), cost: 1
New rule:
f31_0_fib_NE -> f31_0_fib_NE : arg2'=arg2P1, arg1'=-1+arg1, -1+arg1 > 0, cost: 1

Applied preprocessing
Original rule:
f31_0_fib_NE -> f142_0_fib_InvokeMethod : arg2'=arg2P2, arg1'=arg1P2, (-arg2P2 == 0 /\ 2-arg1 == 0 /\ 2-arg1P2 == 0), cost: 1
New rule:
f31_0_fib_NE -> f142_0_fib_InvokeMethod : arg2'=0, arg1'=2, -2+arg1 == 0, cost: 1

Applied preprocessing
Original rule:
f31_0_fib_NE -> f142_0_fib_InvokeMethod : arg2'=arg2P3, arg1'=arg1P3, (-2+arg1-arg2P3 == 0 /\ -1 < 0 /\ -1+arg1 > 0 /\ -arg1P3+arg1 == 0), cost: 1
New rule:
f31_0_fib_NE -> f142_0_fib_InvokeMethod : arg2'=-2+arg1, -1+arg1 > 0, cost: 1

Applied preprocessing
Original rule:
f142_0_fib_InvokeMethod -> f31_0_fib_NE : arg2'=arg2P5, arg1'=arg1P5, (arg2-arg1P5 == 0 /\ arg2-arg1 < 0 /\ -1+arg1 > 0), cost: 1
New rule:
f142_0_fib_InvokeMethod -> f31_0_fib_NE : arg2'=arg2P5, arg1'=arg2, (-arg2+arg1 > 0 /\ -1+arg1 > 0), cost: 1

Simplified rules
Start location: __init
   7: f1_0_main_Load -> f31_0_fib_NE : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
   8: f31_0_fib_NE -> f31_0_fib_NE : arg2'=arg2P1, arg1'=-1+arg1, -1+arg1 > 0, cost: 1
   9: f31_0_fib_NE -> f142_0_fib_InvokeMethod : arg2'=0, arg1'=2, -2+arg1 == 0, cost: 1
  10: f31_0_fib_NE -> f142_0_fib_InvokeMethod : arg2'=-2+arg1, -1+arg1 > 0, cost: 1
  11: f142_0_fib_InvokeMethod -> f31_0_fib_NE : arg2'=arg2P5, arg1'=arg2, (-arg2+arg1 > 0 /\ -1+arg1 > 0), cost: 1
   6: __init -> f1_0_main_Load : arg2'=arg2P6, arg1'=arg1P6, TRUE, cost: 1


Applied acceleration
Original rule:
f31_0_fib_NE -> f31_0_fib_NE : arg2'=arg2P1, arg1'=-1+arg1, -1+arg1 > 0, cost: 1
New rule:
f31_0_fib_NE -> f31_0_fib_NE : arg2'=arg2P1, arg1'=-n+arg1, (-1+n >= 0 /\ -n+arg1 > 0), cost: n
Sub-proof via acceration calculus written to file:///tmp/tmpnam_pgOjMJ.txt

Applied instantiation
Original rule:
f31_0_fib_NE -> f31_0_fib_NE : arg2'=arg2P1, arg1'=-n+arg1, (-1+n >= 0 /\ -n+arg1 > 0), cost: n
New rule:
f31_0_fib_NE -> f31_0_fib_NE : arg2'=arg2P1, arg1'=1, (-2+arg1 >= 0 /\ 1 > 0), cost: -1+arg1

Applied simplification
Original rule:
f31_0_fib_NE -> f31_0_fib_NE : arg2'=arg2P1, arg1'=1, (-2+arg1 >= 0 /\ 1 > 0), cost: -1+arg1
New rule:
f31_0_fib_NE -> f31_0_fib_NE : arg2'=arg2P1, arg1'=1, -2+arg1 >= 0, cost: -1+arg1

Applied deletion
Removed the following rules: 8

Accelerated simple loops
Start location: __init
   7: f1_0_main_Load -> f31_0_fib_NE : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
   9: f31_0_fib_NE -> f142_0_fib_InvokeMethod : arg2'=0, arg1'=2, -2+arg1 == 0, cost: 1
  10: f31_0_fib_NE -> f142_0_fib_InvokeMethod : arg2'=-2+arg1, -1+arg1 > 0, cost: 1
  13: f31_0_fib_NE -> f31_0_fib_NE : arg2'=arg2P1, arg1'=1, -2+arg1 >= 0, cost: -1+arg1
  11: f142_0_fib_InvokeMethod -> f31_0_fib_NE : arg2'=arg2P5, arg1'=arg2, (-arg2+arg1 > 0 /\ -1+arg1 > 0), cost: 1
   6: __init -> f1_0_main_Load : arg2'=arg2P6, arg1'=arg1P6, TRUE, cost: 1


Applied chaining
First rule:
f1_0_main_Load -> f31_0_fib_NE : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
Second rule:
f31_0_fib_NE -> f31_0_fib_NE : arg2'=arg2P1, arg1'=1, -2+arg1 >= 0, cost: -1+arg1
New rule:
f1_0_main_Load -> f31_0_fib_NE : arg2'=arg2P1, arg1'=1, (-2+arg2 >= 0 /\ arg1 > 0), cost: arg2

Applied chaining
First rule:
f142_0_fib_InvokeMethod -> f31_0_fib_NE : arg2'=arg2P5, arg1'=arg2, (-arg2+arg1 > 0 /\ -1+arg1 > 0), cost: 1
Second rule:
f31_0_fib_NE -> f31_0_fib_NE : arg2'=arg2P1, arg1'=1, -2+arg1 >= 0, cost: -1+arg1
New rule:
f142_0_fib_InvokeMethod -> f31_0_fib_NE : arg2'=arg2P1, arg1'=1, (-2+arg2 >= 0 /\ -arg2+arg1 > 0), cost: arg2

Applied deletion
Removed the following rules: 13

Chained accelerated rules with incoming rules
Start location: __init
   7: f1_0_main_Load -> f31_0_fib_NE : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
  14: f1_0_main_Load -> f31_0_fib_NE : arg2'=arg2P1, arg1'=1, (-2+arg2 >= 0 /\ arg1 > 0), cost: arg2
   9: f31_0_fib_NE -> f142_0_fib_InvokeMethod : arg2'=0, arg1'=2, -2+arg1 == 0, cost: 1
  10: f31_0_fib_NE -> f142_0_fib_InvokeMethod : arg2'=-2+arg1, -1+arg1 > 0, cost: 1
  11: f142_0_fib_InvokeMethod -> f31_0_fib_NE : arg2'=arg2P5, arg1'=arg2, (-arg2+arg1 > 0 /\ -1+arg1 > 0), cost: 1
  15: f142_0_fib_InvokeMethod -> f31_0_fib_NE : arg2'=arg2P1, arg1'=1, (-2+arg2 >= 0 /\ -arg2+arg1 > 0), cost: arg2
   6: __init -> f1_0_main_Load : arg2'=arg2P6, arg1'=arg1P6, TRUE, cost: 1


Eliminating location f1_0_main_Load by chaining:

Applied chaining
First rule:
__init -> f1_0_main_Load : arg2'=arg2P6, arg1'=arg1P6, TRUE, cost: 1
Second rule:
f1_0_main_Load -> f31_0_fib_NE : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
New rule:
__init -> f31_0_fib_NE : arg2'=arg2P0, arg1'=arg2P6, (arg1P6 > 0 /\ 1+arg2P6 > 0), cost: 2

Applied chaining
First rule:
__init -> f1_0_main_Load : arg2'=arg2P6, arg1'=arg1P6, TRUE, cost: 1
Second rule:
f1_0_main_Load -> f31_0_fib_NE : arg2'=arg2P1, arg1'=1, (-2+arg2 >= 0 /\ arg1 > 0), cost: arg2
New rule:
__init -> f31_0_fib_NE : arg2'=arg2P1, arg1'=1, (arg1P6 > 0 /\ -2+arg2P6 >= 0), cost: 1+arg2P6

Applied deletion
Removed the following rules: 6 7 14

Eliminating location f142_0_fib_InvokeMethod by chaining:

Applied chaining
First rule:
f31_0_fib_NE -> f142_0_fib_InvokeMethod : arg2'=0, arg1'=2, -2+arg1 == 0, cost: 1
Second rule:
f142_0_fib_InvokeMethod -> f31_0_fib_NE : arg2'=arg2P5, arg1'=arg2, (-arg2+arg1 > 0 /\ -1+arg1 > 0), cost: 1
New rule:
f31_0_fib_NE -> f31_0_fib_NE : arg2'=arg2P5, arg1'=0, (-2+arg1 == 0 /\ 1 > 0 /\ 2 > 0), cost: 2

Applied simplification
Original rule:
f31_0_fib_NE -> f31_0_fib_NE : arg2'=arg2P5, arg1'=0, (-2+arg1 == 0 /\ 1 > 0 /\ 2 > 0), cost: 2
New rule:
f31_0_fib_NE -> f31_0_fib_NE : arg2'=arg2P5, arg1'=0, -2+arg1 == 0, cost: 2

Applied chaining
First rule:
f31_0_fib_NE -> f142_0_fib_InvokeMethod : arg2'=-2+arg1, -1+arg1 > 0, cost: 1
Second rule:
f142_0_fib_InvokeMethod -> f31_0_fib_NE : arg2'=arg2P5, arg1'=arg2, (-arg2+arg1 > 0 /\ -1+arg1 > 0), cost: 1
New rule:
f31_0_fib_NE -> f31_0_fib_NE : arg2'=arg2P5, arg1'=-2+arg1, (2 > 0 /\ -1+arg1 > 0), cost: 2

Applied simplification
Original rule:
f31_0_fib_NE -> f31_0_fib_NE : arg2'=arg2P5, arg1'=-2+arg1, (2 > 0 /\ -1+arg1 > 0), cost: 2
New rule:
f31_0_fib_NE -> f31_0_fib_NE : arg2'=arg2P5, arg1'=-2+arg1, -1+arg1 > 0, cost: 2

Applied chaining
First rule:
f31_0_fib_NE -> f142_0_fib_InvokeMethod : arg2'=-2+arg1, -1+arg1 > 0, cost: 1
Second rule:
f142_0_fib_InvokeMethod -> f31_0_fib_NE : arg2'=arg2P1, arg1'=1, (-2+arg2 >= 0 /\ -arg2+arg1 > 0), cost: arg2
New rule:
f31_0_fib_NE -> f31_0_fib_NE : arg2'=arg2P1, arg1'=1, (-4+arg1 >= 0 /\ 2 > 0 /\ -1+arg1 > 0), cost: -1+arg1

Applied simplification
Original rule:
f31_0_fib_NE -> f31_0_fib_NE : arg2'=arg2P1, arg1'=1, (-4+arg1 >= 0 /\ 2 > 0 /\ -1+arg1 > 0), cost: -1+arg1
New rule:
f31_0_fib_NE -> f31_0_fib_NE : arg2'=arg2P1, arg1'=1, -4+arg1 >= 0, cost: -1+arg1

Applied deletion
Removed the following rules: 9 10 11 15

Eliminated locations on tree-shaped paths
Start location: __init
  18: f31_0_fib_NE -> f31_0_fib_NE : arg2'=arg2P5, arg1'=0, -2+arg1 == 0, cost: 2
  19: f31_0_fib_NE -> f31_0_fib_NE : arg2'=arg2P5, arg1'=-2+arg1, -1+arg1 > 0, cost: 2
  20: f31_0_fib_NE -> f31_0_fib_NE : arg2'=arg2P1, arg1'=1, -4+arg1 >= 0, cost: -1+arg1
  16: __init -> f31_0_fib_NE : arg2'=arg2P0, arg1'=arg2P6, (arg1P6 > 0 /\ 1+arg2P6 > 0), cost: 2
  17: __init -> f31_0_fib_NE : arg2'=arg2P1, arg1'=1, (arg1P6 > 0 /\ -2+arg2P6 >= 0), cost: 1+arg2P6


Applied acceleration
Original rule:
f31_0_fib_NE -> f31_0_fib_NE : arg2'=arg2P5, arg1'=-2+arg1, -1+arg1 > 0, cost: 2
New rule:
f31_0_fib_NE -> f31_0_fib_NE : arg2'=arg2P5, arg1'=arg1-2*n1, (1+arg1-2*n1 > 0 /\ -1+n1 >= 0), cost: 2*n1
Sub-proof via acceration calculus written to file:///tmp/tmpnam_mPlhNc.txt

Applied deletion
Removed the following rules: 19

Accelerated simple loops
Start location: __init
  18: f31_0_fib_NE -> f31_0_fib_NE : arg2'=arg2P5, arg1'=0, -2+arg1 == 0, cost: 2
  20: f31_0_fib_NE -> f31_0_fib_NE : arg2'=arg2P1, arg1'=1, -4+arg1 >= 0, cost: -1+arg1
  21: f31_0_fib_NE -> f31_0_fib_NE : arg2'=arg2P5, arg1'=arg1-2*n1, (1+arg1-2*n1 > 0 /\ -1+n1 >= 0), cost: 2*n1
  16: __init -> f31_0_fib_NE : arg2'=arg2P0, arg1'=arg2P6, (arg1P6 > 0 /\ 1+arg2P6 > 0), cost: 2
  17: __init -> f31_0_fib_NE : arg2'=arg2P1, arg1'=1, (arg1P6 > 0 /\ -2+arg2P6 >= 0), cost: 1+arg2P6


Applied chaining
First rule:
__init -> f31_0_fib_NE : arg2'=arg2P0, arg1'=arg2P6, (arg1P6 > 0 /\ 1+arg2P6 > 0), cost: 2
Second rule:
f31_0_fib_NE -> f31_0_fib_NE : arg2'=arg2P5, arg1'=0, -2+arg1 == 0, cost: 2
New rule:
__init -> f31_0_fib_NE : arg2'=arg2P5, arg1'=0, 3 > 0, cost: 4

Applied chaining
First rule:
__init -> f31_0_fib_NE : arg2'=arg2P0, arg1'=arg2P6, (arg1P6 > 0 /\ 1+arg2P6 > 0), cost: 2
Second rule:
f31_0_fib_NE -> f31_0_fib_NE : arg2'=arg2P1, arg1'=1, -4+arg1 >= 0, cost: -1+arg1
New rule:
__init -> f31_0_fib_NE : arg2'=arg2P1, arg1'=1, -4+arg2P6 >= 0, cost: 1+arg2P6

Applied chaining
First rule:
__init -> f31_0_fib_NE : arg2'=arg2P0, arg1'=arg2P6, (arg1P6 > 0 /\ 1+arg2P6 > 0), cost: 2
Second rule:
f31_0_fib_NE -> f31_0_fib_NE : arg2'=arg2P5, arg1'=arg1-2*n1, (1+arg1-2*n1 > 0 /\ -1+n1 >= 0), cost: 2*n1
New rule:
__init -> f31_0_fib_NE : arg2'=arg2P5, arg1'=-2*n1+arg2P6, (-1+n1 >= 0 /\ 1-2*n1+arg2P6 > 0), cost: 2+2*n1

Applied deletion
Removed the following rules: 18 20 21

Chained accelerated rules with incoming rules
Start location: __init
  16: __init -> f31_0_fib_NE : arg2'=arg2P0, arg1'=arg2P6, (arg1P6 > 0 /\ 1+arg2P6 > 0), cost: 2
  17: __init -> f31_0_fib_NE : arg2'=arg2P1, arg1'=1, (arg1P6 > 0 /\ -2+arg2P6 >= 0), cost: 1+arg2P6
  22: __init -> f31_0_fib_NE : arg2'=arg2P5, arg1'=0, 3 > 0, cost: 4
  23: __init -> f31_0_fib_NE : arg2'=arg2P1, arg1'=1, -4+arg2P6 >= 0, cost: 1+arg2P6
  24: __init -> f31_0_fib_NE : arg2'=arg2P5, arg1'=-2*n1+arg2P6, (-1+n1 >= 0 /\ 1-2*n1+arg2P6 > 0), cost: 2+2*n1


Removed unreachable locations and irrelevant leafs
Start location: __init
  <empty>


Computing asymptotic complexity

Proved the following lower bound
Complexity:  Unknown
Cpx degree: ?

Solved cost: 0
Rule cost:   0

