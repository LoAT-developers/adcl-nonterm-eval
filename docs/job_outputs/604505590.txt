NO

Initial ITS
Start location: __init
   0: f1_0_main_Load -> f1_0_main_Load\' : arg2'=arg2P0, arg1'=arg1P0, (arg2-arg2P0 == 0 /\ -arg1P0+arg1 == 0 /\ -2*x100+x90 == 0 /\ arg1 > 0 /\ 1+x80 > 0 /\ -1+arg2 > 0 /\ 1+x90 > 0), cost: 1
   1: f1_0_main_Load\' -> f128_0_loop_GE : arg2'=arg2P1, arg1'=arg1P1, (1+x140 > 0 /\ 1+x130 > 0 /\ arg1 > 0 /\ -2+x140-2*x150 < 0 /\ -1+arg2 > 0 /\ x140-2*x150 >= 0 /\ x140-2*x150 == 0 /\ -x130-arg1P1 == 0), cost: 1
   2: f128_0_loop_GE -> f128_0_loop_GE : arg2'=arg2P2, arg1'=arg1P2, (-5-arg1 == 0 /\ -5-arg1P2 == 0), cost: 1
   3: f128_0_loop_GE -> f128_0_loop_GE : arg2'=arg2P3, arg1'=arg1P3, (1+arg1-arg1P3 == 0 /\ arg1 < 0 /\ 5+arg1 < 0), cost: 1
   4: f128_0_loop_GE -> f128_0_loop_GE : arg2'=arg2P4, arg1'=arg1P4, (arg1 < 0 /\ 5+arg1 > 0 /\ 1-arg1P4+arg1 == 0), cost: 1
   5: __init -> f1_0_main_Load : arg2'=arg2P5, arg1'=arg1P5, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_Load -> f1_0_main_Load\' : arg2'=arg2P0, arg1'=arg1P0, (arg2-arg2P0 == 0 /\ -arg1P0+arg1 == 0 /\ -2*x100+x90 == 0 /\ arg1 > 0 /\ 1+x80 > 0 /\ -1+arg2 > 0 /\ 1+x90 > 0), cost: 1
New rule:
f1_0_main_Load -> f1_0_main_Load\' : (arg1 > 0 /\ 1+2*x100 > 0 /\ -1+arg2 > 0), cost: 1

Applied preprocessing
Original rule:
f1_0_main_Load\' -> f128_0_loop_GE : arg2'=arg2P1, arg1'=arg1P1, (1+x140 > 0 /\ 1+x130 > 0 /\ arg1 > 0 /\ -2+x140-2*x150 < 0 /\ -1+arg2 > 0 /\ x140-2*x150 >= 0 /\ x140-2*x150 == 0 /\ -x130-arg1P1 == 0), cost: 1
New rule:
f1_0_main_Load\' -> f128_0_loop_GE : arg2'=arg2P1, arg1'=-x130, (1+x130 > 0 /\ 1+2*x150 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1

Applied preprocessing
Original rule:
f128_0_loop_GE -> f128_0_loop_GE : arg2'=arg2P2, arg1'=arg1P2, (-5-arg1 == 0 /\ -5-arg1P2 == 0), cost: 1
New rule:
f128_0_loop_GE -> f128_0_loop_GE : arg2'=arg2P2, arg1'=-5, 5+arg1 == 0, cost: 1

Applied preprocessing
Original rule:
f128_0_loop_GE -> f128_0_loop_GE : arg2'=arg2P3, arg1'=arg1P3, (1+arg1-arg1P3 == 0 /\ arg1 < 0 /\ 5+arg1 < 0), cost: 1
New rule:
f128_0_loop_GE -> f128_0_loop_GE : arg2'=arg2P3, arg1'=1+arg1, -5-arg1 > 0, cost: 1

Applied preprocessing
Original rule:
f128_0_loop_GE -> f128_0_loop_GE : arg2'=arg2P4, arg1'=arg1P4, (arg1 < 0 /\ 5+arg1 > 0 /\ 1-arg1P4+arg1 == 0), cost: 1
New rule:
f128_0_loop_GE -> f128_0_loop_GE : arg2'=arg2P4, arg1'=1+arg1, (5+arg1 > 0 /\ -arg1 > 0), cost: 1

Simplified rules
Start location: __init
   6: f1_0_main_Load -> f1_0_main_Load\' : (arg1 > 0 /\ 1+2*x100 > 0 /\ -1+arg2 > 0), cost: 1
   7: f1_0_main_Load\' -> f128_0_loop_GE : arg2'=arg2P1, arg1'=-x130, (1+x130 > 0 /\ 1+2*x150 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1
   8: f128_0_loop_GE -> f128_0_loop_GE : arg2'=arg2P2, arg1'=-5, 5+arg1 == 0, cost: 1
   9: f128_0_loop_GE -> f128_0_loop_GE : arg2'=arg2P3, arg1'=1+arg1, -5-arg1 > 0, cost: 1
  10: f128_0_loop_GE -> f128_0_loop_GE : arg2'=arg2P4, arg1'=1+arg1, (5+arg1 > 0 /\ -arg1 > 0), cost: 1
   5: __init -> f1_0_main_Load : arg2'=arg2P5, arg1'=arg1P5, TRUE, cost: 1


Applied nonterm
Original rule:
f128_0_loop_GE -> f128_0_loop_GE : arg2'=arg2P2, arg1'=-5, 5+arg1 == 0, cost: 1
New rule:
f128_0_loop_GE -> [4] : (-1+n >= 0 /\ -5-arg1 >= 0 /\ 5+arg1 >= 0), cost: NONTERM
Sub-proof via acceration calculus written to file:///tmp/tmpnam_kHBLfe.txt

Applied acceleration
Original rule:
f128_0_loop_GE -> f128_0_loop_GE : arg2'=arg2P3, arg1'=1+arg1, -5-arg1 > 0, cost: 1
New rule:
f128_0_loop_GE -> f128_0_loop_GE : arg2'=arg2P3, arg1'=n0+arg1, (-4-n0-arg1 > 0 /\ -1+n0 >= 0), cost: n0
Sub-proof via acceration calculus written to file:///tmp/tmpnam_nonLAl.txt

Applied instantiation
Original rule:
f128_0_loop_GE -> f128_0_loop_GE : arg2'=arg2P3, arg1'=n0+arg1, (-4-n0-arg1 > 0 /\ -1+n0 >= 0), cost: n0
New rule:
f128_0_loop_GE -> f128_0_loop_GE : arg2'=arg2P3, arg1'=-5, (1 > 0 /\ -6-arg1 >= 0), cost: -5-arg1

Applied acceleration
Original rule:
f128_0_loop_GE -> f128_0_loop_GE : arg2'=arg2P4, arg1'=1+arg1, (5+arg1 > 0 /\ -arg1 > 0), cost: 1
New rule:
f128_0_loop_GE -> f128_0_loop_GE : arg2'=arg2P4, arg1'=n1+arg1, (-1+n1 >= 0 /\ 5+arg1 > 0 /\ 1-n1-arg1 > 0), cost: n1
Sub-proof via acceration calculus written to file:///tmp/tmpnam_bMoBFo.txt

Applied instantiation
Original rule:
f128_0_loop_GE -> f128_0_loop_GE : arg2'=arg2P4, arg1'=n1+arg1, (-1+n1 >= 0 /\ 5+arg1 > 0 /\ 1-n1-arg1 > 0), cost: n1
New rule:
f128_0_loop_GE -> f128_0_loop_GE : arg2'=arg2P4, arg1'=0, (1 > 0 /\ -1-arg1 >= 0 /\ 5+arg1 > 0), cost: -arg1

Applied simplification
Original rule:
f128_0_loop_GE -> [4] : (-1+n >= 0 /\ -5-arg1 >= 0 /\ 5+arg1 >= 0), cost: NONTERM
New rule:
f128_0_loop_GE -> [4] : (-1+n >= 0 /\ 5+arg1 <= 0 /\ 5+arg1 >= 0), cost: NONTERM

Applied simplification
Original rule:
f128_0_loop_GE -> f128_0_loop_GE : arg2'=arg2P3, arg1'=-5, (1 > 0 /\ -6-arg1 >= 0), cost: -5-arg1
New rule:
f128_0_loop_GE -> f128_0_loop_GE : arg2'=arg2P3, arg1'=-5, 6+arg1 <= 0, cost: -5-arg1

Applied simplification
Original rule:
f128_0_loop_GE -> f128_0_loop_GE : arg2'=arg2P4, arg1'=0, (1 > 0 /\ -1-arg1 >= 0 /\ 5+arg1 > 0), cost: -arg1
New rule:
f128_0_loop_GE -> f128_0_loop_GE : arg2'=arg2P4, arg1'=0, (1+arg1 <= 0 /\ 5+arg1 > 0), cost: -arg1

Applied deletion
Removed the following rules: 8 9 10

Accelerated simple loops
Start location: __init
   6: f1_0_main_Load -> f1_0_main_Load\' : (arg1 > 0 /\ 1+2*x100 > 0 /\ -1+arg2 > 0), cost: 1
   7: f1_0_main_Load\' -> f128_0_loop_GE : arg2'=arg2P1, arg1'=-x130, (1+x130 > 0 /\ 1+2*x150 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1
  14: f128_0_loop_GE -> [4] : (-1+n >= 0 /\ 5+arg1 <= 0 /\ 5+arg1 >= 0), cost: NONTERM
  15: f128_0_loop_GE -> f128_0_loop_GE : arg2'=arg2P3, arg1'=-5, 6+arg1 <= 0, cost: -5-arg1
  16: f128_0_loop_GE -> f128_0_loop_GE : arg2'=arg2P4, arg1'=0, (1+arg1 <= 0 /\ 5+arg1 > 0), cost: -arg1
   5: __init -> f1_0_main_Load : arg2'=arg2P5, arg1'=arg1P5, TRUE, cost: 1


Applied chaining
First rule:
f1_0_main_Load\' -> f128_0_loop_GE : arg2'=arg2P1, arg1'=-x130, (1+x130 > 0 /\ 1+2*x150 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1
Second rule:
f128_0_loop_GE -> [4] : (-1+n >= 0 /\ 5+arg1 <= 0 /\ 5+arg1 >= 0), cost: NONTERM
New rule:
f1_0_main_Load\' -> [4] : (1+2*x150 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: NONTERM

Applied chaining
First rule:
f1_0_main_Load\' -> f128_0_loop_GE : arg2'=arg2P1, arg1'=-x130, (1+x130 > 0 /\ 1+2*x150 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1
Second rule:
f128_0_loop_GE -> f128_0_loop_GE : arg2'=arg2P3, arg1'=-5, 6+arg1 <= 0, cost: -5-arg1
New rule:
f1_0_main_Load\' -> f128_0_loop_GE : arg2'=arg2P3, arg1'=-5, (-6+x130 >= 0 /\ 1+2*x150 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: -4+x130

Applied chaining
First rule:
f1_0_main_Load\' -> f128_0_loop_GE : arg2'=arg2P1, arg1'=-x130, (1+x130 > 0 /\ 1+2*x150 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1
Second rule:
f128_0_loop_GE -> f128_0_loop_GE : arg2'=arg2P4, arg1'=0, (1+arg1 <= 0 /\ 5+arg1 > 0), cost: -arg1
New rule:
f1_0_main_Load\' -> f128_0_loop_GE : arg2'=arg2P4, arg1'=0, (5-x130 > 0 /\ 1+2*x150 > 0 /\ arg1 > 0 /\ 1-x130 <= 0 /\ -1+arg2 > 0), cost: 1+x130

Applied deletion
Removed the following rules: 14 15 16

Chained accelerated rules with incoming rules
Start location: __init
   6: f1_0_main_Load -> f1_0_main_Load\' : (arg1 > 0 /\ 1+2*x100 > 0 /\ -1+arg2 > 0), cost: 1
   7: f1_0_main_Load\' -> f128_0_loop_GE : arg2'=arg2P1, arg1'=-x130, (1+x130 > 0 /\ 1+2*x150 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1
  17: f1_0_main_Load\' -> [4] : (1+2*x150 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: NONTERM
  18: f1_0_main_Load\' -> f128_0_loop_GE : arg2'=arg2P3, arg1'=-5, (-6+x130 >= 0 /\ 1+2*x150 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: -4+x130
  19: f1_0_main_Load\' -> f128_0_loop_GE : arg2'=arg2P4, arg1'=0, (5-x130 > 0 /\ 1+2*x150 > 0 /\ arg1 > 0 /\ 1-x130 <= 0 /\ -1+arg2 > 0), cost: 1+x130
   5: __init -> f1_0_main_Load : arg2'=arg2P5, arg1'=arg1P5, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
   6: f1_0_main_Load -> f1_0_main_Load\' : (arg1 > 0 /\ 1+2*x100 > 0 /\ -1+arg2 > 0), cost: 1
  17: f1_0_main_Load\' -> [4] : (1+2*x150 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: NONTERM
   5: __init -> f1_0_main_Load : arg2'=arg2P5, arg1'=arg1P5, TRUE, cost: 1


Eliminating location f1_0_main_Load by chaining:

Applied chaining
First rule:
__init -> f1_0_main_Load : arg2'=arg2P5, arg1'=arg1P5, TRUE, cost: 1
Second rule:
f1_0_main_Load -> f1_0_main_Load\' : (arg1 > 0 /\ 1+2*x100 > 0 /\ -1+arg2 > 0), cost: 1
New rule:
__init -> f1_0_main_Load\' : arg2'=arg2P5, arg1'=arg1P5, (1+2*x100 > 0 /\ -1+arg2P5 > 0 /\ arg1P5 > 0), cost: 2

Applied deletion
Removed the following rules: 5 6

Eliminating location f1_0_main_Load\' by chaining:

Applied chaining
First rule:
__init -> f1_0_main_Load\' : arg2'=arg2P5, arg1'=arg1P5, (1+2*x100 > 0 /\ -1+arg2P5 > 0 /\ arg1P5 > 0), cost: 2
Second rule:
f1_0_main_Load\' -> [4] : (1+2*x150 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: NONTERM
New rule:
__init -> [4] : (1+2*x150 > 0 /\ 1+2*x100 > 0 /\ -1+arg2P5 > 0 /\ arg1P5 > 0), cost: NONTERM

Applied deletion
Removed the following rules: 17 20

Eliminated locations on linear paths
Start location: __init
  21: __init -> [4] : (1+2*x150 > 0 /\ 1+2*x100 > 0 /\ -1+arg2P5 > 0 /\ arg1P5 > 0), cost: NONTERM


Computing asymptotic complexity
Proved nontermination of rule 21 via SMT.

Proved the following lower bound
Complexity:  Nonterm
Cpx degree: Nonterm

Solved cost: NONTERM
Rule cost:   NONTERM
Rule guard:  (1+2*x150 > 0 /\ 1+2*x100 > 0 /\ -1+arg2P5 > 0 /\ arg1P5 > 0)
