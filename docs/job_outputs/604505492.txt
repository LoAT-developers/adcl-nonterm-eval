WORST_CASE(Omega(0),?)

Initial ITS
Start location: __init
   0: f1_0_main_Load -> f142_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P0 > 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0), cost: 1
   1: f142_0_main_LE -> f153_0_main_LE : arg2'=arg2P1, arg1'=arg1P1, (arg2 > 0 /\ arg2-arg1P1 == 0 /\ arg1-arg2P1 == 0), cost: 1
   2: f153_0_main_LE -> f142_0_main_LE : arg2'=arg2P2, arg1'=arg1P2, (-arg2 == 0 /\ -1-arg2P2+arg1 == 0 /\ -arg1P2 == 0), cost: 1
   3: f153_0_main_LE -> f153_0_main_LE : arg2'=arg2P3, arg1'=arg1P3, (-1+arg2-arg2P3 == 0 /\ arg2 > 0 /\ -arg1P3+arg1 == 0), cost: 1
   4: __init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, TRUE, cost: 1


Applied preprocessing
Original rule:
f142_0_main_LE -> f153_0_main_LE : arg2'=arg2P1, arg1'=arg1P1, (arg2 > 0 /\ arg2-arg1P1 == 0 /\ arg1-arg2P1 == 0), cost: 1
New rule:
f142_0_main_LE -> f153_0_main_LE : arg2'=arg1, arg1'=arg2, arg2 > 0, cost: 1

Applied preprocessing
Original rule:
f153_0_main_LE -> f142_0_main_LE : arg2'=arg2P2, arg1'=arg1P2, (-arg2 == 0 /\ -1-arg2P2+arg1 == 0 /\ -arg1P2 == 0), cost: 1
New rule:
f153_0_main_LE -> f142_0_main_LE : arg2'=-1+arg1, arg1'=0, arg2 == 0, cost: 1

Applied preprocessing
Original rule:
f153_0_main_LE -> f153_0_main_LE : arg2'=arg2P3, arg1'=arg1P3, (-1+arg2-arg2P3 == 0 /\ arg2 > 0 /\ -arg1P3+arg1 == 0), cost: 1
New rule:
f153_0_main_LE -> f153_0_main_LE : arg2'=-1+arg2, arg2 > 0, cost: 1

Simplified rules
Start location: __init
   0: f1_0_main_Load -> f142_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P0 > 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0), cost: 1
   5: f142_0_main_LE -> f153_0_main_LE : arg2'=arg1, arg1'=arg2, arg2 > 0, cost: 1
   6: f153_0_main_LE -> f142_0_main_LE : arg2'=-1+arg1, arg1'=0, arg2 == 0, cost: 1
   7: f153_0_main_LE -> f153_0_main_LE : arg2'=-1+arg2, arg2 > 0, cost: 1
   4: __init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, TRUE, cost: 1


Applied acceleration
Original rule:
f153_0_main_LE -> f153_0_main_LE : arg2'=-1+arg2, arg2 > 0, cost: 1
New rule:
f153_0_main_LE -> f153_0_main_LE : arg2'=arg2-n, (n >= 0 /\ 1+arg2-n > 0), cost: n
Sub-proof via acceration calculus written to file:///tmp/tmpnam_kglnof.txt

Applied instantiation
Original rule:
f153_0_main_LE -> f153_0_main_LE : arg2'=arg2-n, (n >= 0 /\ 1+arg2-n > 0), cost: n
New rule:
f153_0_main_LE -> f153_0_main_LE : arg2'=0, (1 > 0 /\ arg2 >= 0), cost: arg2

Applied simplification
Original rule:
f153_0_main_LE -> f153_0_main_LE : arg2'=0, (1 > 0 /\ arg2 >= 0), cost: arg2
New rule:
f153_0_main_LE -> f153_0_main_LE : arg2'=0, arg2 >= 0, cost: arg2

Applied deletion
Removed the following rules: 7

Accelerated simple loops
Start location: __init
   0: f1_0_main_Load -> f142_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P0 > 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0), cost: 1
   5: f142_0_main_LE -> f153_0_main_LE : arg2'=arg1, arg1'=arg2, arg2 > 0, cost: 1
   6: f153_0_main_LE -> f142_0_main_LE : arg2'=-1+arg1, arg1'=0, arg2 == 0, cost: 1
   9: f153_0_main_LE -> f153_0_main_LE : arg2'=0, arg2 >= 0, cost: arg2
   4: __init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, TRUE, cost: 1


Applied chaining
First rule:
f142_0_main_LE -> f153_0_main_LE : arg2'=arg1, arg1'=arg2, arg2 > 0, cost: 1
Second rule:
f153_0_main_LE -> f153_0_main_LE : arg2'=0, arg2 >= 0, cost: arg2
New rule:
f142_0_main_LE -> f153_0_main_LE : arg2'=0, arg1'=arg2, (arg2 > 0 /\ arg1 >= 0), cost: 1+arg1

Applied deletion
Removed the following rules: 9

Chained accelerated rules with incoming rules
Start location: __init
   0: f1_0_main_Load -> f142_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P0 > 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0), cost: 1
   5: f142_0_main_LE -> f153_0_main_LE : arg2'=arg1, arg1'=arg2, arg2 > 0, cost: 1
  10: f142_0_main_LE -> f153_0_main_LE : arg2'=0, arg1'=arg2, (arg2 > 0 /\ arg1 >= 0), cost: 1+arg1
   6: f153_0_main_LE -> f142_0_main_LE : arg2'=-1+arg1, arg1'=0, arg2 == 0, cost: 1
   4: __init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, TRUE, cost: 1


Eliminating location f1_0_main_Load by chaining:

Applied chaining
First rule:
__init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, TRUE, cost: 1
Second rule:
f1_0_main_Load -> f142_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P0 > 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0), cost: 1
New rule:
__init -> f142_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P4 > 0 /\ 1+arg2P0 > 0 /\ 1+arg1P0 > 0 /\ arg1P4 > 0), cost: 2

Applied deletion
Removed the following rules: 0 4

Eliminated locations on linear paths
Start location: __init
   5: f142_0_main_LE -> f153_0_main_LE : arg2'=arg1, arg1'=arg2, arg2 > 0, cost: 1
  10: f142_0_main_LE -> f153_0_main_LE : arg2'=0, arg1'=arg2, (arg2 > 0 /\ arg1 >= 0), cost: 1+arg1
   6: f153_0_main_LE -> f142_0_main_LE : arg2'=-1+arg1, arg1'=0, arg2 == 0, cost: 1
  11: __init -> f142_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P4 > 0 /\ 1+arg2P0 > 0 /\ 1+arg1P0 > 0 /\ arg1P4 > 0), cost: 2


Eliminating location f153_0_main_LE by chaining:

Applied chaining
First rule:
f142_0_main_LE -> f153_0_main_LE : arg2'=arg1, arg1'=arg2, arg2 > 0, cost: 1
Second rule:
f153_0_main_LE -> f142_0_main_LE : arg2'=-1+arg1, arg1'=0, arg2 == 0, cost: 1
New rule:
f142_0_main_LE -> f142_0_main_LE : arg2'=-1+arg2, arg1'=0, (arg2 > 0 /\ arg1 == 0), cost: 2

Applied chaining
First rule:
f142_0_main_LE -> f153_0_main_LE : arg2'=0, arg1'=arg2, (arg2 > 0 /\ arg1 >= 0), cost: 1+arg1
Second rule:
f153_0_main_LE -> f142_0_main_LE : arg2'=-1+arg1, arg1'=0, arg2 == 0, cost: 1
New rule:
f142_0_main_LE -> f142_0_main_LE : arg2'=-1+arg2, arg1'=0, (0 == 0 /\ arg2 > 0 /\ arg1 >= 0), cost: 2+arg1

Applied simplification
Original rule:
f142_0_main_LE -> f142_0_main_LE : arg2'=-1+arg2, arg1'=0, (0 == 0 /\ arg2 > 0 /\ arg1 >= 0), cost: 2+arg1
New rule:
f142_0_main_LE -> f142_0_main_LE : arg2'=-1+arg2, arg1'=0, (arg2 > 0 /\ arg1 >= 0), cost: 2+arg1

Applied deletion
Removed the following rules: 5 6 10

Eliminated locations on tree-shaped paths
Start location: __init
  12: f142_0_main_LE -> f142_0_main_LE : arg2'=-1+arg2, arg1'=0, (arg2 > 0 /\ arg1 == 0), cost: 2
  13: f142_0_main_LE -> f142_0_main_LE : arg2'=-1+arg2, arg1'=0, (arg2 > 0 /\ arg1 >= 0), cost: 2+arg1
  11: __init -> f142_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P4 > 0 /\ 1+arg2P0 > 0 /\ 1+arg1P0 > 0 /\ arg1P4 > 0), cost: 2


Applied acceleration
Original rule:
f142_0_main_LE -> f142_0_main_LE : arg2'=-1+arg2, arg1'=0, (arg2 > 0 /\ arg1 == 0), cost: 2
New rule:
f142_0_main_LE -> f142_0_main_LE : arg2'=arg2-n0, arg1'=0, (1+arg2-n0 > 0 /\ arg1 >= 0 /\ -arg1 >= 0 /\ -1+n0 >= 0), cost: 2*n0
Sub-proof via acceration calculus written to file:///tmp/tmpnam_CCCFjH.txt

Applied instantiation
Original rule:
f142_0_main_LE -> f142_0_main_LE : arg2'=arg2-n0, arg1'=0, (1+arg2-n0 > 0 /\ arg1 >= 0 /\ -arg1 >= 0 /\ -1+n0 >= 0), cost: 2*n0
New rule:
f142_0_main_LE -> f142_0_main_LE : arg2'=0, arg1'=0, (1 > 0 /\ arg1 >= 0 /\ -1+arg2 >= 0 /\ -arg1 >= 0), cost: 2*arg2

Applied acceleration
Original rule:
f142_0_main_LE -> f142_0_main_LE : arg2'=-1+arg2, arg1'=0, (arg2 > 0 /\ arg1 >= 0), cost: 2+arg1
New rule:
f142_0_main_LE -> f142_0_main_LE : arg2'=arg2-n1, arg1'=0, (1+arg2-n1 > 0 /\ arg1 >= 0 /\ -1+n1 >= 0), cost: 2*n1
Sub-proof via acceration calculus written to file:///tmp/tmpnam_kcDmiG.txt

Applied instantiation
Original rule:
f142_0_main_LE -> f142_0_main_LE : arg2'=arg2-n1, arg1'=0, (1+arg2-n1 > 0 /\ arg1 >= 0 /\ -1+n1 >= 0), cost: 2*n1
New rule:
f142_0_main_LE -> f142_0_main_LE : arg2'=0, arg1'=0, (1 > 0 /\ arg1 >= 0 /\ -1+arg2 >= 0), cost: 2*arg2

Applied simplification
Original rule:
f142_0_main_LE -> f142_0_main_LE : arg2'=0, arg1'=0, (1 > 0 /\ arg1 >= 0 /\ -1+arg2 >= 0 /\ -arg1 >= 0), cost: 2*arg2
New rule:
f142_0_main_LE -> f142_0_main_LE : arg2'=0, arg1'=0, (arg1 <= 0 /\ arg1 >= 0 /\ -1+arg2 >= 0), cost: 2*arg2

Applied simplification
Original rule:
f142_0_main_LE -> f142_0_main_LE : arg2'=0, arg1'=0, (1 > 0 /\ arg1 >= 0 /\ -1+arg2 >= 0), cost: 2*arg2
New rule:
f142_0_main_LE -> f142_0_main_LE : arg2'=0, arg1'=0, (arg1 >= 0 /\ -1+arg2 >= 0), cost: 2*arg2

Applied deletion
Removed the following rules: 12 13

Accelerated simple loops
Start location: __init
  16: f142_0_main_LE -> f142_0_main_LE : arg2'=0, arg1'=0, (arg1 <= 0 /\ arg1 >= 0 /\ -1+arg2 >= 0), cost: 2*arg2
  17: f142_0_main_LE -> f142_0_main_LE : arg2'=0, arg1'=0, (arg1 >= 0 /\ -1+arg2 >= 0), cost: 2*arg2
  11: __init -> f142_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P4 > 0 /\ 1+arg2P0 > 0 /\ 1+arg1P0 > 0 /\ arg1P4 > 0), cost: 2


Applied chaining
First rule:
__init -> f142_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P4 > 0 /\ 1+arg2P0 > 0 /\ 1+arg1P0 > 0 /\ arg1P4 > 0), cost: 2
Second rule:
f142_0_main_LE -> f142_0_main_LE : arg2'=0, arg1'=0, (arg1 <= 0 /\ arg1 >= 0 /\ -1+arg2 >= 0), cost: 2*arg2
New rule:
__init -> f142_0_main_LE : arg2'=0, arg1'=0, -1+arg2P0 >= 0, cost: 2+2*arg2P0

Applied chaining
First rule:
__init -> f142_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P4 > 0 /\ 1+arg2P0 > 0 /\ 1+arg1P0 > 0 /\ arg1P4 > 0), cost: 2
Second rule:
f142_0_main_LE -> f142_0_main_LE : arg2'=0, arg1'=0, (arg1 >= 0 /\ -1+arg2 >= 0), cost: 2*arg2
New rule:
__init -> f142_0_main_LE : arg2'=0, arg1'=0, -1+arg2P0 >= 0, cost: 2+2*arg2P0

Applied deletion
Removed the following rules: 16 17

Chained accelerated rules with incoming rules
Start location: __init
  11: __init -> f142_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P4 > 0 /\ 1+arg2P0 > 0 /\ 1+arg1P0 > 0 /\ arg1P4 > 0), cost: 2
  18: __init -> f142_0_main_LE : arg2'=0, arg1'=0, -1+arg2P0 >= 0, cost: 2+2*arg2P0


Removed unreachable locations and irrelevant leafs
Start location: __init
  <empty>


Computing asymptotic complexity

Proved the following lower bound
Complexity:  Unknown
Cpx degree: ?

Solved cost: 0
Rule cost:   0

