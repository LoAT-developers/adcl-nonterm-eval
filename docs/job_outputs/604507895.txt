NO

Initial ITS

Start location: __init
Program variables: arg1 arg2 arg3
   0: f1_0_main_Load -> f163_0_upAndDown_GT : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (-arg3p1+arg2 == 0 /\ 1+arg2 > 0 /\ -arg2p1 == 0 /\ -arg1p1 == 0 /\ arg1 > 0), cost: 1
   1: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, (-10+arg3 < 0 /\ -arg2p2 == 0 /\ arg3 > 0 /\ -arg1p2 == 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ -1+arg3-arg3p2 == 0 /\ -arg2 == 0), cost: 1
   2: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, (-arg2p3 == 0 /\ 10-arg3 == 0 /\ -arg1p3 == 0 /\ -2+arg1 < 0 /\ 9-arg3p3 == 0), cost: 1
   3: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, (-10+arg3 < 0 /\ 1-arg2p4 == 0 /\ 1+arg3-arg3p4 == 0 /\ arg3 > 0 /\ 1-arg1p4 == 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ 1-arg2 == 0), cost: 1
   4: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, (1-arg1p5 == 0 /\ -arg3 == 0 /\ 1-arg3p5 == 0 /\ -2+arg1 < 0 /\ 1-arg2p5 == 0), cost: 1
   5: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, (-10+arg3 < 0 /\ -arg1p6+arg1 == 0 /\ arg3 > 0 /\ -1-arg3p6+arg3 == 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ -arg2p6 == 0 /\ -arg2 == 0), cost: 1
   6: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=arg1p7, arg2'=arg2p7, arg3'=arg3p7, (9-arg3p7 == 0 /\ -arg1p7+arg1 == 0 /\ 10-arg3 == 0 /\ -2+arg1 < 0 /\ -arg2p7 == 0), cost: 1
   7: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=arg1p8, arg2'=arg2p8, arg3'=arg3p8, (-10+arg3 < 0 /\ arg3 > 0 /\ 1-arg2p8 == 0 /\ 1+arg3-arg3p8 == 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ -arg1p8+arg1 == 0 /\ 1-arg2 == 0), cost: 1
   8: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=arg1p9, arg2'=arg2p9, arg3'=arg3p9, (1-arg2p9 == 0 /\ -arg3 == 0 /\ -arg1p9+arg1 == 0 /\ -2+arg1 < 0 /\ 1-arg3p9 == 0), cost: 1
   9: __init -> f1_0_main_Load : arg1'=arg1p10, arg2'=arg2p10, arg3'=arg3p10, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2 arg3
   1: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, (-10+arg3 < 0 /\ -arg2p2 == 0 /\ arg3 > 0 /\ -arg1p2 == 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ -1+arg3-arg3p2 == 0 /\ -arg2 == 0), cost: 1
   2: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, (-arg2p3 == 0 /\ 10-arg3 == 0 /\ -arg1p3 == 0 /\ -2+arg1 < 0 /\ 9-arg3p3 == 0), cost: 1
   3: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, (-10+arg3 < 0 /\ 1-arg2p4 == 0 /\ 1+arg3-arg3p4 == 0 /\ arg3 > 0 /\ 1-arg1p4 == 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ 1-arg2 == 0), cost: 1
   4: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, (1-arg1p5 == 0 /\ -arg3 == 0 /\ 1-arg3p5 == 0 /\ -2+arg1 < 0 /\ 1-arg2p5 == 0), cost: 1
   5: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, (-10+arg3 < 0 /\ -arg1p6+arg1 == 0 /\ arg3 > 0 /\ -1-arg3p6+arg3 == 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ -arg2p6 == 0 /\ -arg2 == 0), cost: 1
   6: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=arg1p7, arg2'=arg2p7, arg3'=arg3p7, (9-arg3p7 == 0 /\ -arg1p7+arg1 == 0 /\ 10-arg3 == 0 /\ -2+arg1 < 0 /\ -arg2p7 == 0), cost: 1
   7: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=arg1p8, arg2'=arg2p8, arg3'=arg3p8, (-10+arg3 < 0 /\ arg3 > 0 /\ 1-arg2p8 == 0 /\ 1+arg3-arg3p8 == 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ -arg1p8+arg1 == 0 /\ 1-arg2 == 0), cost: 1
   8: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=arg1p9, arg2'=arg2p9, arg3'=arg3p9, (1-arg2p9 == 0 /\ -arg3 == 0 /\ -arg1p9+arg1 == 0 /\ -2+arg1 < 0 /\ 1-arg3p9 == 0), cost: 1
  10: __init -> f163_0_upAndDown_GT : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (-arg3p1+arg2p10 == 0 /\ arg1p10 > 0 /\ 1+arg2p10 > 0 /\ -arg2p1 == 0 /\ -arg1p1 == 0), cost: 1

	Eliminating location f1_0_main_Load by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_Load : arg1'=arg1p10, arg2'=arg2p10, arg3'=arg3p10, T, cost: 1
	Second rule:
	f1_0_main_Load -> f163_0_upAndDown_GT : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (-arg3p1+arg2 == 0 /\ 1+arg2 > 0 /\ -arg2p1 == 0 /\ -arg1p1 == 0 /\ arg1 > 0), cost: 1
	New rule:
	__init -> f163_0_upAndDown_GT : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (-arg3p1+arg2p10 == 0 /\ arg1p10 > 0 /\ 1+arg2p10 > 0 /\ -arg2p1 == 0 /\ -arg1p1 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 9

Simplified Transitions

Start location: __init
Program variables: arg1 arg2 arg3
  11: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=0, arg2'=0, arg3'=-1+arg3, (-10+arg3 < 0 /\ arg3 > 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ -arg2 == 0), cost: 1
  12: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=0, arg2'=0, arg3'=9, (10-arg3 == 0 /\ -2+arg1 < 0), cost: 1
  13: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=1, arg2'=1, arg3'=1+arg3, (-10+arg3 < 0 /\ arg3 > 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ 1-arg2 == 0), cost: 1
  14: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=1, arg2'=1, arg3'=1, (-arg3 == 0 /\ -2+arg1 < 0), cost: 1
  15: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg2'=0, arg3'=-1+arg3, (-10+arg3 < 0 /\ arg3 > 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ -arg2 == 0), cost: 1
  16: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg2'=0, arg3'=9, (10-arg3 == 0 /\ -2+arg1 < 0), cost: 1
  17: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg2'=1, arg3'=1+arg3, (-10+arg3 < 0 /\ arg3 > 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ 1-arg2 == 0), cost: 1
  18: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg2'=1, arg3'=1, (-arg3 == 0 /\ -2+arg1 < 0), cost: 1
  19: __init -> f163_0_upAndDown_GT : arg1'=0, arg2'=0, arg3'=arg2p10, (1+arg2p10 > 0), cost: 1

	Propagated Equalities

	Original rule:
	f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, (-10+arg3 < 0 /\ -arg2p2 == 0 /\ arg3 > 0 /\ -arg1p2 == 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ -1+arg3-arg3p2 == 0 /\ -arg2 == 0), cost: 1
	New rule:
	f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=0, arg2'=0, arg3'=-1+arg3, (0 == 0 /\ -10+arg3 < 0 /\ arg3 > 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ -arg2 == 0), cost: 1
	
		propagated equality arg2p2 = 0
		
		propagated equality arg1p2 = 0
		
		propagated equality arg3p2 = -1+arg3
		
	Simplified Guard

	Original rule:
	f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=0, arg2'=0, arg3'=-1+arg3, (0 == 0 /\ -10+arg3 < 0 /\ arg3 > 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ -arg2 == 0), cost: 1
	New rule:
	f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=0, arg2'=0, arg3'=-1+arg3, (-10+arg3 < 0 /\ arg3 > 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ -arg2 == 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, (-arg2p3 == 0 /\ 10-arg3 == 0 /\ -arg1p3 == 0 /\ -2+arg1 < 0 /\ 9-arg3p3 == 0), cost: 1
	New rule:
	f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=0, arg2'=0, arg3'=9, (0 == 0 /\ 10-arg3 == 0 /\ -2+arg1 < 0), cost: 1
	
		propagated equality arg2p3 = 0
		
		propagated equality arg1p3 = 0
		
		propagated equality arg3p3 = 9
		
	Simplified Guard

	Original rule:
	f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=0, arg2'=0, arg3'=9, (0 == 0 /\ 10-arg3 == 0 /\ -2+arg1 < 0), cost: 1
	New rule:
	f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=0, arg2'=0, arg3'=9, (10-arg3 == 0 /\ -2+arg1 < 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, (-10+arg3 < 0 /\ 1-arg2p4 == 0 /\ 1+arg3-arg3p4 == 0 /\ arg3 > 0 /\ 1-arg1p4 == 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ 1-arg2 == 0), cost: 1
	New rule:
	f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=1, arg2'=1, arg3'=1+arg3, (0 == 0 /\ -10+arg3 < 0 /\ arg3 > 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ 1-arg2 == 0), cost: 1
	
		propagated equality arg2p4 = 1
		
		propagated equality arg3p4 = 1+arg3
		
		propagated equality arg1p4 = 1
		
	Simplified Guard

	Original rule:
	f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=1, arg2'=1, arg3'=1+arg3, (0 == 0 /\ -10+arg3 < 0 /\ arg3 > 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ 1-arg2 == 0), cost: 1
	New rule:
	f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=1, arg2'=1, arg3'=1+arg3, (-10+arg3 < 0 /\ arg3 > 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ 1-arg2 == 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, (1-arg1p5 == 0 /\ -arg3 == 0 /\ 1-arg3p5 == 0 /\ -2+arg1 < 0 /\ 1-arg2p5 == 0), cost: 1
	New rule:
	f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=1, arg2'=1, arg3'=1, (0 == 0 /\ -arg3 == 0 /\ -2+arg1 < 0), cost: 1
	
		propagated equality arg1p5 = 1
		
		propagated equality arg3p5 = 1
		
		propagated equality arg2p5 = 1
		
	Simplified Guard

	Original rule:
	f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=1, arg2'=1, arg3'=1, (0 == 0 /\ -arg3 == 0 /\ -2+arg1 < 0), cost: 1
	New rule:
	f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=1, arg2'=1, arg3'=1, (-arg3 == 0 /\ -2+arg1 < 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, (-10+arg3 < 0 /\ -arg1p6+arg1 == 0 /\ arg3 > 0 /\ -1-arg3p6+arg3 == 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ -arg2p6 == 0 /\ -arg2 == 0), cost: 1
	New rule:
	f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=arg1, arg2'=0, arg3'=-1+arg3, (0 == 0 /\ -10+arg3 < 0 /\ arg3 > 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ -arg2 == 0), cost: 1
	
		propagated equality arg1p6 = arg1
		
		propagated equality arg3p6 = -1+arg3
		
		propagated equality arg2p6 = 0
		
	Simplified Guard

	Original rule:
	f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=arg1, arg2'=0, arg3'=-1+arg3, (0 == 0 /\ -10+arg3 < 0 /\ arg3 > 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ -arg2 == 0), cost: 1
	New rule:
	f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=arg1, arg2'=0, arg3'=-1+arg3, (-10+arg3 < 0 /\ arg3 > 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ -arg2 == 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=arg1, arg2'=0, arg3'=-1+arg3, (-10+arg3 < 0 /\ arg3 > 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ -arg2 == 0), cost: 1
	New rule:
	f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg2'=0, arg3'=-1+arg3, (-10+arg3 < 0 /\ arg3 > 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ -arg2 == 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=arg1p7, arg2'=arg2p7, arg3'=arg3p7, (9-arg3p7 == 0 /\ -arg1p7+arg1 == 0 /\ 10-arg3 == 0 /\ -2+arg1 < 0 /\ -arg2p7 == 0), cost: 1
	New rule:
	f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=arg1, arg2'=0, arg3'=9, (0 == 0 /\ 10-arg3 == 0 /\ -2+arg1 < 0), cost: 1
	
		propagated equality arg3p7 = 9
		
		propagated equality arg1p7 = arg1
		
		propagated equality arg2p7 = 0
		
	Simplified Guard

	Original rule:
	f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=arg1, arg2'=0, arg3'=9, (0 == 0 /\ 10-arg3 == 0 /\ -2+arg1 < 0), cost: 1
	New rule:
	f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=arg1, arg2'=0, arg3'=9, (10-arg3 == 0 /\ -2+arg1 < 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=arg1, arg2'=0, arg3'=9, (10-arg3 == 0 /\ -2+arg1 < 0), cost: 1
	New rule:
	f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg2'=0, arg3'=9, (10-arg3 == 0 /\ -2+arg1 < 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=arg1p8, arg2'=arg2p8, arg3'=arg3p8, (-10+arg3 < 0 /\ arg3 > 0 /\ 1-arg2p8 == 0 /\ 1+arg3-arg3p8 == 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ -arg1p8+arg1 == 0 /\ 1-arg2 == 0), cost: 1
	New rule:
	f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=arg1, arg2'=1, arg3'=1+arg3, (0 == 0 /\ -10+arg3 < 0 /\ arg3 > 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ 1-arg2 == 0), cost: 1
	
		propagated equality arg2p8 = 1
		
		propagated equality arg3p8 = 1+arg3
		
		propagated equality arg1p8 = arg1
		
	Simplified Guard

	Original rule:
	f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=arg1, arg2'=1, arg3'=1+arg3, (0 == 0 /\ -10+arg3 < 0 /\ arg3 > 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ 1-arg2 == 0), cost: 1
	New rule:
	f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=arg1, arg2'=1, arg3'=1+arg3, (-10+arg3 < 0 /\ arg3 > 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ 1-arg2 == 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=arg1, arg2'=1, arg3'=1+arg3, (-10+arg3 < 0 /\ arg3 > 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ 1-arg2 == 0), cost: 1
	New rule:
	f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg2'=1, arg3'=1+arg3, (-10+arg3 < 0 /\ arg3 > 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ 1-arg2 == 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=arg1p9, arg2'=arg2p9, arg3'=arg3p9, (1-arg2p9 == 0 /\ -arg3 == 0 /\ -arg1p9+arg1 == 0 /\ -2+arg1 < 0 /\ 1-arg3p9 == 0), cost: 1
	New rule:
	f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=arg1, arg2'=1, arg3'=1, (0 == 0 /\ -arg3 == 0 /\ -2+arg1 < 0), cost: 1
	
		propagated equality arg2p9 = 1
		
		propagated equality arg1p9 = arg1
		
		propagated equality arg3p9 = 1
		
	Simplified Guard

	Original rule:
	f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=arg1, arg2'=1, arg3'=1, (0 == 0 /\ -arg3 == 0 /\ -2+arg1 < 0), cost: 1
	New rule:
	f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=arg1, arg2'=1, arg3'=1, (-arg3 == 0 /\ -2+arg1 < 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=arg1, arg2'=1, arg3'=1, (-arg3 == 0 /\ -2+arg1 < 0), cost: 1
	New rule:
	f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg2'=1, arg3'=1, (-arg3 == 0 /\ -2+arg1 < 0), cost: 1
	
	Propagated Equalities

	Original rule:
	__init -> f163_0_upAndDown_GT : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (-arg3p1+arg2p10 == 0 /\ arg1p10 > 0 /\ 1+arg2p10 > 0 /\ -arg2p1 == 0 /\ -arg1p1 == 0), cost: 1
	New rule:
	__init -> f163_0_upAndDown_GT : arg1'=0, arg2'=0, arg3'=arg2p10, (0 == 0 /\ arg1p10 > 0 /\ 1+arg2p10 > 0), cost: 1
	
		propagated equality arg3p1 = arg2p10
		
		propagated equality arg2p1 = 0
		
		propagated equality arg1p1 = 0
		
	Simplified Guard

	Original rule:
	__init -> f163_0_upAndDown_GT : arg1'=0, arg2'=0, arg3'=arg2p10, (0 == 0 /\ arg1p10 > 0 /\ 1+arg2p10 > 0), cost: 1
	New rule:
	__init -> f163_0_upAndDown_GT : arg1'=0, arg2'=0, arg3'=arg2p10, (arg1p10 > 0 /\ 1+arg2p10 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	__init -> f163_0_upAndDown_GT : arg1'=0, arg2'=0, arg3'=arg2p10, (arg1p10 > 0 /\ 1+arg2p10 > 0), cost: 1
	New rule:
	__init -> f163_0_upAndDown_GT : arg1'=0, arg2'=0, arg3'=arg2p10, (1+arg2p10 > 0), cost: 1

Step with 19

	Trace

	19[(1+arg2p10 > 0)]
	
	Blocked

	[{}, {}]

Step with 11

	Trace

	19[(1+arg2p10 > 0)], 11[(-10+arg3 < 0 /\ arg3 > 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ -arg2 == 0)]
	
	Blocked

	[{}, {}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2 arg3
  11: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=0, arg2'=0, arg3'=-1+arg3, (-10+arg3 < 0 /\ arg3 > 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ -arg2 == 0), cost: 1
  12: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=0, arg2'=0, arg3'=9, (10-arg3 == 0 /\ -2+arg1 < 0), cost: 1
  13: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=1, arg2'=1, arg3'=1+arg3, (-10+arg3 < 0 /\ arg3 > 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ 1-arg2 == 0), cost: 1
  14: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=1, arg2'=1, arg3'=1, (-arg3 == 0 /\ -2+arg1 < 0), cost: 1
  15: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg2'=0, arg3'=-1+arg3, (-10+arg3 < 0 /\ arg3 > 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ -arg2 == 0), cost: 1
  16: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg2'=0, arg3'=9, (10-arg3 == 0 /\ -2+arg1 < 0), cost: 1
  17: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg2'=1, arg3'=1+arg3, (-10+arg3 < 0 /\ arg3 > 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ 1-arg2 == 0), cost: 1
  18: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg2'=1, arg3'=1, (-arg3 == 0 /\ -2+arg1 < 0), cost: 1
  20: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=0, arg2'=0, arg3'=arg3-n, (11-arg3 > 0 /\ 2-arg1 > 0 /\ 1+arg3-n > 0 /\ 10-arg3 > 0 /\ arg2 >= 0 /\ -1+n >= 0 /\ -arg2 >= 0), cost: 1
  19: __init -> f163_0_upAndDown_GT : arg1'=0, arg2'=0, arg3'=arg2p10, (1+arg2p10 > 0), cost: 1

	Loop Acceleration

	Original rule:
	f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=0, arg2'=0, arg3'=-1+arg3, (-10+arg3 < 0 /\ arg3 > 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ -arg2 == 0), cost: 1
	New rule:
	f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=0, arg2'=0, arg3'=arg3-n, (11-arg3 > 0 /\ 2-arg1 > 0 /\ 1+arg3-n > 0 /\ 10-arg3 > 0 /\ arg2 >= 0 /\ -1+n >= 0 /\ -arg2 >= 0), cost: 1

		11-arg3 > 0 [0]: monotonic increase yields 11-arg3 > 0
		
		2-arg1 > 0 [0]: monotonic increase yields 2-arg1 > 0
		
		arg3 > 0 [0]: montonic decrease yields 1+arg3-n > 0
		
		arg3 > 0 [1]: eventual increase yields (1 <= 0 /\ arg3 > 0)
		
		10-arg3 > 0 [0]: monotonic increase yields 10-arg3 > 0
		
		arg2 >= 0 [0]: monotonic increase yields arg2 >= 0
		
		-arg2 >= 0 [0]: monotonic increase yields -arg2 >= 0
		
		Replacement map: {11-arg3 > 0 -> 11-arg3 > 0, 2-arg1 > 0 -> 2-arg1 > 0, arg3 > 0 -> 1+arg3-n > 0, 10-arg3 > 0 -> 10-arg3 > 0, arg2 >= 0 -> arg2 >= 0, -arg2 >= 0 -> -arg2 >= 0}

	Trace

	19[(1+arg2p10 > 0)], 20[(11-arg3 > 0 /\ 2-arg1 > 0 /\ 1+arg3-n > 0 /\ 10-arg3 > 0 /\ arg2 >= 0 /\ -1+n >= 0 /\ -arg2 >= 0)]
	
	Blocked

	[{}, {}, {11[T], 20[T]}]

Step with 14

	Trace

	19[(1+arg2p10 > 0)], 20[(11-arg3 > 0 /\ 2-arg1 > 0 /\ 1+arg3-n > 0 /\ 10-arg3 > 0 /\ arg2 >= 0 /\ -1+n >= 0 /\ -arg2 >= 0)], 14[(-arg3 == 0 /\ -2+arg1 < 0)]
	
	Blocked

	[{}, {}, {11[T], 12[T], 13[T], 20[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Acceleration Failed

marked recursive suffix as redundant

Step with 17

	Trace

	19[(1+arg2p10 > 0)], 20[(11-arg3 > 0 /\ 2-arg1 > 0 /\ 1+arg3-n > 0 /\ 10-arg3 > 0 /\ arg2 >= 0 /\ -1+n >= 0 /\ -arg2 >= 0)], 14[(-arg3 == 0 /\ -2+arg1 < 0)], 17[(-10+arg3 < 0 /\ arg3 > 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ 1-arg2 == 0)]
	
	Blocked

	[{}, {}, {11[T], 12[T], 13[T], 20[T]}, {14[T], 15[T], 16[T]}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2 arg3
  11: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=0, arg2'=0, arg3'=-1+arg3, (-10+arg3 < 0 /\ arg3 > 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ -arg2 == 0), cost: 1
  12: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=0, arg2'=0, arg3'=9, (10-arg3 == 0 /\ -2+arg1 < 0), cost: 1
  13: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=1, arg2'=1, arg3'=1+arg3, (-10+arg3 < 0 /\ arg3 > 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ 1-arg2 == 0), cost: 1
  14: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=1, arg2'=1, arg3'=1, (-arg3 == 0 /\ -2+arg1 < 0), cost: 1
  15: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg2'=0, arg3'=-1+arg3, (-10+arg3 < 0 /\ arg3 > 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ -arg2 == 0), cost: 1
  16: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg2'=0, arg3'=9, (10-arg3 == 0 /\ -2+arg1 < 0), cost: 1
  17: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg2'=1, arg3'=1+arg3, (-10+arg3 < 0 /\ arg3 > 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ 1-arg2 == 0), cost: 1
  18: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg2'=1, arg3'=1, (-arg3 == 0 /\ -2+arg1 < 0), cost: 1
  20: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=0, arg2'=0, arg3'=arg3-n, (11-arg3 > 0 /\ 2-arg1 > 0 /\ 1+arg3-n > 0 /\ 10-arg3 > 0 /\ arg2 >= 0 /\ -1+n >= 0 /\ -arg2 >= 0), cost: 1
  21: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg2'=1, arg3'=arg3+n2, (11-arg3-n2 > 0 /\ 2-arg1 > 0 /\ arg3 > 0 /\ -1+n2 >= 0 /\ 12-arg3-n2 > 0 /\ 1-arg2 >= 0 /\ -1+arg2 >= 0), cost: 1
  19: __init -> f163_0_upAndDown_GT : arg1'=0, arg2'=0, arg3'=arg2p10, (1+arg2p10 > 0), cost: 1

	Loop Acceleration

	Original rule:
	f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg2'=1, arg3'=1+arg3, (-10+arg3 < 0 /\ arg3 > 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ 1-arg2 == 0), cost: 1
	New rule:
	f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg2'=1, arg3'=arg3+n2, (11-arg3-n2 > 0 /\ 2-arg1 > 0 /\ arg3 > 0 /\ -1+n2 >= 0 /\ 12-arg3-n2 > 0 /\ 1-arg2 >= 0 /\ -1+arg2 >= 0), cost: 1

		11-arg3 > 0 [0]: montonic decrease yields 12-arg3-n2 > 0
		
		11-arg3 > 0 [1]: eventual increase yields (1 <= 0 /\ 11-arg3 > 0)
		
		2-arg1 > 0 [0]: monotonic increase yields 2-arg1 > 0
		
		arg3 > 0 [0]: monotonic increase yields arg3 > 0
		
		10-arg3 > 0 [0]: montonic decrease yields 11-arg3-n2 > 0
		
		10-arg3 > 0 [1]: eventual increase yields (1 <= 0 /\ 10-arg3 > 0)
		
		1-arg2 >= 0 [0]: monotonic increase yields 1-arg2 >= 0
		
		-1+arg2 >= 0 [0]: monotonic increase yields -1+arg2 >= 0
		
		Replacement map: {11-arg3 > 0 -> 12-arg3-n2 > 0, 2-arg1 > 0 -> 2-arg1 > 0, arg3 > 0 -> arg3 > 0, 10-arg3 > 0 -> 11-arg3-n2 > 0, 1-arg2 >= 0 -> 1-arg2 >= 0, -1+arg2 >= 0 -> -1+arg2 >= 0}

	Trace

	19[(1+arg2p10 > 0)], 20[(11-arg3 > 0 /\ 2-arg1 > 0 /\ 1+arg3-n > 0 /\ 10-arg3 > 0 /\ arg2 >= 0 /\ -1+n >= 0 /\ -arg2 >= 0)], 14[(-arg3 == 0 /\ -2+arg1 < 0)], 21[(11-arg3-n2 > 0 /\ 2-arg1 > 0 /\ arg3 > 0 /\ -1+n2 >= 0 /\ 12-arg3-n2 > 0 /\ 1-arg2 >= 0 /\ -1+arg2 >= 0)]
	
	Blocked

	[{}, {}, {11[T], 12[T], 13[T], 20[T]}, {14[T], 15[T], 16[T]}, {17[T], 21[T]}]

Acceleration Failed

marked recursive suffix as redundant

Acceleration Failed

marked recursive suffix as redundant

Step with 12

	Trace

	19[(1+arg2p10 > 0)], 20[(11-arg3 > 0 /\ 2-arg1 > 0 /\ 1+arg3-n > 0 /\ 10-arg3 > 0 /\ arg2 >= 0 /\ -1+n >= 0 /\ -arg2 >= 0)], 14[(-arg3 == 0 /\ -2+arg1 < 0)], 21[(11-arg3-n2 > 0 /\ 2-arg1 > 0 /\ arg3 > 0 /\ -1+n2 >= 0 /\ 12-arg3-n2 > 0 /\ 1-arg2 >= 0 /\ -1+arg2 >= 0)], 12[(10-arg3 == 0 /\ -2+arg1 < 0)]
	
	Blocked

	[{}, {}, {11[T], 12[T], 13[T], 20[T]}, {14[T], 15[T], 16[T]}, {11[T], 17[T], 21[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Acceleration Failed

marked recursive suffix as redundant

Acceleration Failed

marked recursive suffix as redundant

Nonterm

Start location: __init
Program variables: arg1 arg2 arg3
  11: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=0, arg2'=0, arg3'=-1+arg3, (-10+arg3 < 0 /\ arg3 > 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ -arg2 == 0), cost: 1
  12: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=0, arg2'=0, arg3'=9, (10-arg3 == 0 /\ -2+arg1 < 0), cost: 1
  13: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=1, arg2'=1, arg3'=1+arg3, (-10+arg3 < 0 /\ arg3 > 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ 1-arg2 == 0), cost: 1
  14: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=1, arg2'=1, arg3'=1, (-arg3 == 0 /\ -2+arg1 < 0), cost: 1
  15: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg2'=0, arg3'=-1+arg3, (-10+arg3 < 0 /\ arg3 > 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ -arg2 == 0), cost: 1
  16: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg2'=0, arg3'=9, (10-arg3 == 0 /\ -2+arg1 < 0), cost: 1
  17: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg2'=1, arg3'=1+arg3, (-10+arg3 < 0 /\ arg3 > 0 /\ -11+arg3 < 0 /\ -2+arg1 < 0 /\ 1-arg2 == 0), cost: 1
  18: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg2'=1, arg3'=1, (-arg3 == 0 /\ -2+arg1 < 0), cost: 1
  20: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=0, arg2'=0, arg3'=arg3-n, (11-arg3 > 0 /\ 2-arg1 > 0 /\ 1+arg3-n > 0 /\ 10-arg3 > 0 /\ arg2 >= 0 /\ -1+n >= 0 /\ -arg2 >= 0), cost: 1
  21: f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg2'=1, arg3'=arg3+n2, (11-arg3-n2 > 0 /\ 2-arg1 > 0 /\ arg3 > 0 /\ -1+n2 >= 0 /\ 12-arg3-n2 > 0 /\ 1-arg2 >= 0 /\ -1+arg2 >= 0), cost: 1
  22: f163_0_upAndDown_GT -> LoAT_sink : (11-arg3 > 0 /\ 2-arg1 > 0 /\ -1+n3 >= 0 /\ -1+arg3 >= 0 /\ 10-arg3 > 0 /\ arg2 >= 0 /\ -arg2 >= 0), cost: NONTERM
  19: __init -> f163_0_upAndDown_GT : arg1'=0, arg2'=0, arg3'=arg2p10, (1+arg2p10 > 0), cost: 1

	Certificate of Non-Termination

	Original rule:
	f163_0_upAndDown_GT -> f163_0_upAndDown_GT : arg1'=0, arg2'=0, arg3'=9, (11-arg3 > 0 /\ 2-arg1 > 0 /\ -1+arg3 >= 0 /\ 10-arg3 > 0 /\ arg2 >= 0 /\ -arg2 >= 0 /\ -arg2 == 0), cost: 1
	New rule:
	f163_0_upAndDown_GT -> LoAT_sink : (11-arg3 > 0 /\ 2-arg1 > 0 /\ -1+n3 >= 0 /\ -1+arg3 >= 0 /\ 10-arg3 > 0 /\ arg2 >= 0 /\ -arg2 >= 0), cost: NONTERM

		11-arg3 > 0 [0]: monotonic increase yields 11-arg3 > 0
		
		2-arg1 > 0 [0]: monotonic increase yields 2-arg1 > 0
		
		-1+arg3 >= 0 [0]: monotonic increase yields -1+arg3 >= 0
		
		10-arg3 > 0 [0]: monotonic increase yields 10-arg3 > 0
		
		arg2 >= 0 [0]: monotonic increase yields arg2 >= 0
		
		-arg2 >= 0 [0]: monotonic increase yields -arg2 >= 0
		
		Replacement map: {11-arg3 > 0 -> 11-arg3 > 0, 2-arg1 > 0 -> 2-arg1 > 0, -1+arg3 >= 0 -> -1+arg3 >= 0, 10-arg3 > 0 -> 10-arg3 > 0, arg2 >= 0 -> arg2 >= 0, -arg2 >= 0 -> -arg2 >= 0}

Step with 22

	Trace

	19[(1+arg2p10 > 0)], 22[(11-arg3 > 0 /\ 2-arg1 > 0 /\ -1+n3 >= 0 /\ -1+arg3 >= 0 /\ 10-arg3 > 0 /\ arg2 >= 0 /\ -arg2 >= 0)]
	
	Blocked

	[{}, {}, {22[T]}]

Refute

	Counterexample

	[ arg1=0 arg2=0 arg3=1 ] 19 [ arg1=arg1 arg2=arg2 arg3=arg3 ] 22
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
