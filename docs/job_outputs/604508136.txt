NO

Initial ITS

Start location: __init
Program variables: arg1
   0: f1_0_main_ConstantStackPush -> f56_0_sum_NE : arg1'=arg1p1, -1-arg1p1 == 0, cost: 1
   1: f56_0_sum_NE -> f56_0_sum_NE : arg1'=arg1p2, (-1-arg1p2+arg1 == 0 /\ -1 < 0 /\ arg1 < 0), cost: 1
   2: f56_0_sum_NE -> f56_0_sum_NE : arg1'=arg1p3, (-1 < 0 /\ -1-arg1p3+arg1 == 0 /\ arg1 > 0), cost: 1
   3: __init -> f1_0_main_ConstantStackPush : arg1'=arg1p4, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1
   1: f56_0_sum_NE -> f56_0_sum_NE : arg1'=arg1p2, (-1-arg1p2+arg1 == 0 /\ -1 < 0 /\ arg1 < 0), cost: 1
   2: f56_0_sum_NE -> f56_0_sum_NE : arg1'=arg1p3, (-1 < 0 /\ -1-arg1p3+arg1 == 0 /\ arg1 > 0), cost: 1
   4: __init -> f56_0_sum_NE : arg1'=arg1p1, -1-arg1p1 == 0, cost: 1

	Eliminating location f1_0_main_ConstantStackPush by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_ConstantStackPush : arg1'=arg1p4, T, cost: 1
	Second rule:
	f1_0_main_ConstantStackPush -> f56_0_sum_NE : arg1'=arg1p1, -1-arg1p1 == 0, cost: 1
	New rule:
	__init -> f56_0_sum_NE : arg1'=arg1p1, -1-arg1p1 == 0, cost: 1
	
	Applied deletion

	Removed the following rules: 0 3

Simplified Transitions

Start location: __init
Program variables: arg1
   5: f56_0_sum_NE -> f56_0_sum_NE : arg1'=-1+arg1, arg1 < 0, cost: 1
   6: f56_0_sum_NE -> f56_0_sum_NE : arg1'=-1+arg1, arg1 > 0, cost: 1
   7: __init -> f56_0_sum_NE : arg1'=-1, T, cost: 1

	Propagated Equalities

	Original rule:
	f56_0_sum_NE -> f56_0_sum_NE : arg1'=arg1p2, (-1-arg1p2+arg1 == 0 /\ -1 < 0 /\ arg1 < 0), cost: 1
	New rule:
	f56_0_sum_NE -> f56_0_sum_NE : arg1'=-1+arg1, (0 == 0 /\ -1 < 0 /\ arg1 < 0), cost: 1
	
		propagated equality arg1p2 = -1+arg1
		
	Simplified Guard

	Original rule:
	f56_0_sum_NE -> f56_0_sum_NE : arg1'=-1+arg1, (0 == 0 /\ -1 < 0 /\ arg1 < 0), cost: 1
	New rule:
	f56_0_sum_NE -> f56_0_sum_NE : arg1'=-1+arg1, arg1 < 0, cost: 1
	
	Propagated Equalities

	Original rule:
	f56_0_sum_NE -> f56_0_sum_NE : arg1'=arg1p3, (-1 < 0 /\ -1-arg1p3+arg1 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f56_0_sum_NE -> f56_0_sum_NE : arg1'=-1+arg1, (0 == 0 /\ -1 < 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg1p3 = -1+arg1
		
	Simplified Guard

	Original rule:
	f56_0_sum_NE -> f56_0_sum_NE : arg1'=-1+arg1, (0 == 0 /\ -1 < 0 /\ arg1 > 0), cost: 1
	New rule:
	f56_0_sum_NE -> f56_0_sum_NE : arg1'=-1+arg1, arg1 > 0, cost: 1
	
	Propagated Equalities

	Original rule:
	__init -> f56_0_sum_NE : arg1'=arg1p1, -1-arg1p1 == 0, cost: 1
	New rule:
	__init -> f56_0_sum_NE : arg1'=-1, 0 == 0, cost: 1
	
		propagated equality arg1p1 = -1
		
	Simplified Guard

	Original rule:
	__init -> f56_0_sum_NE : arg1'=-1, 0 == 0, cost: 1
	New rule:
	__init -> f56_0_sum_NE : arg1'=-1, T, cost: 1

Step with 7

	Trace

	7[T]
	
	Blocked

	[{}, {}]

Step with 5

	Trace

	7[T], 5[(arg1 < 0)]
	
	Blocked

	[{}, {}, {}]

Nonterm

Start location: __init
Program variables: arg1
   5: f56_0_sum_NE -> f56_0_sum_NE : arg1'=-1+arg1, arg1 < 0, cost: 1
   6: f56_0_sum_NE -> f56_0_sum_NE : arg1'=-1+arg1, arg1 > 0, cost: 1
   8: f56_0_sum_NE -> LoAT_sink : (-1+n >= 0 /\ -arg1 > 0), cost: NONTERM
   9: f56_0_sum_NE -> f56_0_sum_NE : arg1'=-n+arg1, (-1+n >= 0 /\ -arg1 > 0), cost: 1
   7: __init -> f56_0_sum_NE : arg1'=-1, T, cost: 1

	Certificate of Non-Termination

	Original rule:
	f56_0_sum_NE -> f56_0_sum_NE : arg1'=-1+arg1, (arg1 < 0), cost: 1
	New rule:
	f56_0_sum_NE -> LoAT_sink : (-1+n >= 0 /\ -arg1 > 0), cost: NONTERM

		-arg1 > 0 [0]: monotonic increase yields -arg1 > 0
		
		Replacement map: {-arg1 > 0 -> -arg1 > 0}

	Loop Acceleration

	Original rule:
	f56_0_sum_NE -> f56_0_sum_NE : arg1'=-1+arg1, (arg1 < 0), cost: 1
	New rule:
	f56_0_sum_NE -> f56_0_sum_NE : arg1'=-n+arg1, (-1+n >= 0 /\ -arg1 > 0), cost: 1

		-arg1 > 0 [0]: monotonic increase yields -arg1 > 0
		
		Replacement map: {-arg1 > 0 -> -arg1 > 0}

Step with 8

	Trace

	7[T], 8[(-1+n >= 0 /\ -arg1 > 0)]
	
	Blocked

	[{}, {}, {8[T]}]

Refute

	Counterexample

	[ arg1=-1 ] 7 [ arg1=arg1 ] 8
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
