unknown

Initial ITS

Start location: [1]
Program variables: c i j
   0: [1] -> [2] : i'=nondet, T, cost: 1
   1: [2] -> [3] : j'=nondet1, T, cost: 1
   2: [3] -> [4] : c'=0, T, cost: 1
   3: [4] -> [5] : i >= 0, cost: 1
  12: [4] -> [12] : i < 0, cost: 1
   4: [5] -> [6] : j'=0, T, cost: 1
   5: [6] -> [7] : 1+j-i <= 0, cost: 1
   9: [6] -> [10] : 1+j-i > 0, cost: 1
   6: [7] -> [8] : j'=1+j, T, cost: 1
   7: [8] -> [9] : c'=1+c, T, cost: 1
   8: [9] -> [6] : T, cost: 1
  10: [10] -> [11] : i'=-1+i, T, cost: 1
  11: [11] -> [4] : T, cost: 1

Chained Linear Paths

Start location: [1]
Program variables: c i j
  14: [1] -> [4] : c'=0, i'=nondet, j'=nondet1, T, cost: 1
  12: [4] -> [12] : i < 0, cost: 1
  15: [4] -> [6] : j'=0, i >= 0, cost: 1
  19: [6] -> [4] : i'=-1+i, 1+j-i > 0, cost: 1
  20: [6] -> [6] : c'=1+c, j'=1+j, 1+j-i <= 0, cost: 1

	Eliminating location [2] by chaining:

	Applied chaining

	First rule:
	[1] -> [2] : i'=nondet, T, cost: 1
	Second rule:
	[2] -> [3] : j'=nondet1, T, cost: 1
	New rule:
	[1] -> [3] : i'=nondet, j'=nondet1, T, cost: 1
	
	Applied deletion

	Removed the following rules: 0 1
	
	Eliminating location [3] by chaining:

	Applied chaining

	First rule:
	[1] -> [3] : i'=nondet, j'=nondet1, T, cost: 1
	Second rule:
	[3] -> [4] : c'=0, T, cost: 1
	New rule:
	[1] -> [4] : c'=0, i'=nondet, j'=nondet1, T, cost: 1
	
	Applied deletion

	Removed the following rules: 2 13
	
	Eliminating location [5] by chaining:

	Applied chaining

	First rule:
	[4] -> [5] : i >= 0, cost: 1
	Second rule:
	[5] -> [6] : j'=0, T, cost: 1
	New rule:
	[4] -> [6] : j'=0, i >= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 3 4
	
	Eliminating location [7] by chaining:

	Applied chaining

	First rule:
	[6] -> [7] : 1+j-i <= 0, cost: 1
	Second rule:
	[7] -> [8] : j'=1+j, T, cost: 1
	New rule:
	[6] -> [8] : j'=1+j, 1+j-i <= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 5 6
	
	Eliminating location [10] by chaining:

	Applied chaining

	First rule:
	[6] -> [10] : 1+j-i > 0, cost: 1
	Second rule:
	[10] -> [11] : i'=-1+i, T, cost: 1
	New rule:
	[6] -> [11] : i'=-1+i, 1+j-i > 0, cost: 1
	
	Applied deletion

	Removed the following rules: 9 10
	
	Eliminating location [8] by chaining:

	Applied chaining

	First rule:
	[6] -> [8] : j'=1+j, 1+j-i <= 0, cost: 1
	Second rule:
	[8] -> [9] : c'=1+c, T, cost: 1
	New rule:
	[6] -> [9] : c'=1+c, j'=1+j, 1+j-i <= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 7 16
	
	Eliminating location [11] by chaining:

	Applied chaining

	First rule:
	[6] -> [11] : i'=-1+i, 1+j-i > 0, cost: 1
	Second rule:
	[11] -> [4] : T, cost: 1
	New rule:
	[6] -> [4] : i'=-1+i, 1+j-i > 0, cost: 1
	
	Applied deletion

	Removed the following rules: 11 17
	
	Eliminating location [9] by chaining:

	Applied chaining

	First rule:
	[6] -> [9] : c'=1+c, j'=1+j, 1+j-i <= 0, cost: 1
	Second rule:
	[9] -> [6] : T, cost: 1
	New rule:
	[6] -> [6] : c'=1+c, j'=1+j, 1+j-i <= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 8 18

Step with 14

	Trace

	14[T]
	
	Blocked

	[{}, {}]

Step with 12

	Trace

	14[T], 12[(i < 0)]
	
	Blocked

	[{}, {}, {}]

Backtrack

	Trace

	14[T]
	
	Blocked

	[{}, {12[T]}]

Step with 15

	Trace

	14[T], 15[(i >= 0)]
	
	Blocked

	[{}, {12[T]}, {}]

Step with 19

	Trace

	14[T], 15[(i >= 0)], 19[(1+j-i > 0)]
	
	Blocked

	[{}, {12[T]}, {}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 12

	Trace

	14[T], 15[(i >= 0)], 19[(1+j-i > 0)], 12[(i < 0)]
	
	Blocked

	[{}, {12[T]}, {}, {15[T]}, {}]

Backtrack

	Trace

	14[T], 15[(i >= 0)], 19[(1+j-i > 0)]
	
	Blocked

	[{}, {12[T]}, {}, {12[T], 15[T]}]

Backtrack

	Trace

	14[T], 15[(i >= 0)]
	
	Blocked

	[{}, {12[T]}, {19[T]}]

Step with 20

	Trace

	14[T], 15[(i >= 0)], 20[(1+j-i <= 0)]
	
	Blocked

	[{}, {12[T]}, {19[T]}, {}]

Accelerate

Start location: [1]
Program variables: c i j
  14: [1] -> [4] : c'=0, i'=nondet, j'=nondet1, T, cost: 1
  12: [4] -> [12] : i < 0, cost: 1
  15: [4] -> [6] : j'=0, i >= 0, cost: 1
  19: [6] -> [4] : i'=-1+i, 1+j-i > 0, cost: 1
  20: [6] -> [6] : c'=1+c, j'=1+j, 1+j-i <= 0, cost: 1
  21: [6] -> [6] : c'=c+n, j'=n+j, (-n-j+i >= 0 /\ -1+n >= 0), cost: 1

	Loop Acceleration

	Original rule:
	[6] -> [6] : c'=1+c, j'=1+j, (1+j-i <= 0), cost: 1
	New rule:
	[6] -> [6] : c'=c+n, j'=n+j, (-n-j+i >= 0 /\ -1+n >= 0), cost: 1

		-1-j+i >= 0 [0]: montonic decrease yields -n-j+i >= 0
		
		-1-j+i >= 0 [1]: eventual increase yields (1 <= 0 /\ -1-j+i >= 0)
		
		Replacement map: {-1-j+i >= 0 -> -n-j+i >= 0}

	Trace

	14[T], 15[(i >= 0)], 21[(-n-j+i >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {12[T]}, {19[T]}, {20[T], 21[T]}]

Step with 19

	Trace

	14[T], 15[(i >= 0)], 21[(-n-j+i >= 0 /\ -1+n >= 0)], 19[(1+j-i > 0)]
	
	Blocked

	[{}, {12[T]}, {19[T]}, {20[T], 21[T]}, {}]

Accelerate

Start location: [1]
Program variables: c i j
  14: [1] -> [4] : c'=0, i'=nondet, j'=nondet1, T, cost: 1
  12: [4] -> [12] : i < 0, cost: 1
  15: [4] -> [6] : j'=0, i >= 0, cost: 1
  22: [4] -> [4] : c'=c+n2*i+1/2*n2-1/2*n2^2, i'=-n2+i, j'=1-n2+i, (-n2+i >= 0 /\ 1-n2+i >= 0 /\ -1+n2 >= 0), cost: 1
  19: [6] -> [4] : i'=-1+i, 1+j-i > 0, cost: 1
  20: [6] -> [6] : c'=1+c, j'=1+j, 1+j-i <= 0, cost: 1
  21: [6] -> [6] : c'=c+n, j'=n+j, (-n-j+i >= 0 /\ -1+n >= 0), cost: 1

	Loop Acceleration

	Original rule:
	[4] -> [4] : c'=c+i, i'=-1+i, j'=i, (-1+i >= 0 /\ i >= 0), cost: 1
	New rule:
	[4] -> [4] : c'=c+n2*i+1/2*n2-1/2*n2^2, i'=-n2+i, j'=1-n2+i, (-n2+i >= 0 /\ 1-n2+i >= 0 /\ -1+n2 >= 0), cost: 1

		-1+i >= 0 [0]: montonic decrease yields -n2+i >= 0
		
		-1+i >= 0 [1]: eventual increase yields (1 <= 0 /\ -1+i >= 0)
		
		i >= 0 [0]: montonic decrease yields 1-n2+i >= 0
		
		i >= 0 [1]: eventual increase yields (1 <= 0 /\ i >= 0)
		
		Replacement map: {-1+i >= 0 -> -n2+i >= 0, i >= 0 -> 1-n2+i >= 0}

	Trace

	14[T], 22[(-n2+i >= 0 /\ 1-n2+i >= 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {12[T]}, {22[T]}]

Step with 15

	Trace

	14[T], 22[(-n2+i >= 0 /\ 1-n2+i >= 0 /\ -1+n2 >= 0)], 15[(i >= 0)]
	
	Blocked

	[{}, {12[T]}, {12[T], 22[T]}, {}]

Step with 19

	Trace

	14[T], 22[(-n2+i >= 0 /\ 1-n2+i >= 0 /\ -1+n2 >= 0)], 15[(i >= 0)], 19[(1+j-i > 0)]
	
	Blocked

	[{}, {12[T]}, {12[T], 22[T]}, {}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 12

	Trace

	14[T], 22[(-n2+i >= 0 /\ 1-n2+i >= 0 /\ -1+n2 >= 0)], 15[(i >= 0)], 19[(1+j-i > 0)], 12[(i < 0)]
	
	Blocked

	[{}, {12[T]}, {12[T], 22[T]}, {}, {15[T], 22[T]}, {}]

Backtrack

	Trace

	14[T], 22[(-n2+i >= 0 /\ 1-n2+i >= 0 /\ -1+n2 >= 0)], 15[(i >= 0)], 19[(1+j-i > 0)]
	
	Blocked

	[{}, {12[T]}, {12[T], 22[T]}, {}, {12[T], 15[T], 22[T]}]

Backtrack

	Trace

	14[T], 22[(-n2+i >= 0 /\ 1-n2+i >= 0 /\ -1+n2 >= 0)], 15[(i >= 0)]
	
	Blocked

	[{}, {12[T]}, {12[T], 22[T]}, {19[T]}]

Step with 20

	Trace

	14[T], 22[(-n2+i >= 0 /\ 1-n2+i >= 0 /\ -1+n2 >= 0)], 15[(i >= 0)], 20[(1+j-i <= 0)]
	
	Blocked

	[{}, {12[T]}, {12[T], 22[T]}, {19[T]}, {}]

Covered

	Trace

	14[T], 22[(-n2+i >= 0 /\ 1-n2+i >= 0 /\ -1+n2 >= 0)], 15[(i >= 0)]
	
	Blocked

	[{}, {12[T]}, {12[T], 22[T]}, {19[T], 20[T]}]

Step with 21

	Trace

	14[T], 22[(-n2+i >= 0 /\ 1-n2+i >= 0 /\ -1+n2 >= 0)], 15[(i >= 0)], 21[(-n-j+i >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {12[T]}, {12[T], 22[T]}, {19[T], 20[T]}, {21[T]}]

Step with 19

	Trace

	14[T], 22[(-n2+i >= 0 /\ 1-n2+i >= 0 /\ -1+n2 >= 0)], 15[(i >= 0)], 21[(-n-j+i >= 0 /\ -1+n >= 0)], 19[(1+j-i > 0)]
	
	Blocked

	[{}, {12[T]}, {12[T], 22[T]}, {19[T], 20[T]}, {21[T]}, {}]

Covered

	Trace

	14[T], 22[(-n2+i >= 0 /\ 1-n2+i >= 0 /\ -1+n2 >= 0)], 15[(i >= 0)], 21[(-n-j+i >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {12[T]}, {12[T], 22[T]}, {19[T], 20[T]}, {19[T], 21[T]}]

Step with 20

	Trace

	14[T], 22[(-n2+i >= 0 /\ 1-n2+i >= 0 /\ -1+n2 >= 0)], 15[(i >= 0)], 21[(-n-j+i >= 0 /\ -1+n >= 0)], 20[(1+j-i <= 0)]
	
	Blocked

	[{}, {12[T]}, {12[T], 22[T]}, {19[T], 20[T]}, {19[T], 21[T]}, {}]

Covered

	Trace

	14[T], 22[(-n2+i >= 0 /\ 1-n2+i >= 0 /\ -1+n2 >= 0)], 15[(i >= 0)], 21[(-n-j+i >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {12[T]}, {12[T], 22[T]}, {19[T], 20[T]}, {19[T], 20[T], 21[T]}]

Backtrack

	Trace

	14[T], 22[(-n2+i >= 0 /\ 1-n2+i >= 0 /\ -1+n2 >= 0)], 15[(i >= 0)]
	
	Blocked

	[{}, {12[T]}, {12[T], 22[T]}, {19[T], 20[T], 21[T]}]

Backtrack

	Trace

	14[T], 22[(-n2+i >= 0 /\ 1-n2+i >= 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {12[T]}, {12[T], 15[T], 22[T]}]

Backtrack

	Trace

	14[T]
	
	Blocked

	[{}, {12[T], 22[T]}]

Step with 15

	Trace

	14[T], 15[(i >= 0)]
	
	Blocked

	[{}, {12[T], 22[T]}, {}]

Step with 20

	Trace

	14[T], 15[(i >= 0)], 20[(1+j-i <= 0)]
	
	Blocked

	[{}, {12[T], 22[T]}, {}, {}]

Covered

	Trace

	14[T], 15[(i >= 0)]
	
	Blocked

	[{}, {12[T], 22[T]}, {20[T]}]

Step with 21

	Trace

	14[T], 15[(i >= 0)], 21[(-n-j+i >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {12[T], 22[T]}, {20[T]}, {21[T]}]

Step with 19

	Trace

	14[T], 15[(i >= 0)], 21[(-n-j+i >= 0 /\ -1+n >= 0)], 19[(1+j-i > 0)]
	
	Blocked

	[{}, {12[T], 22[T]}, {20[T]}, {21[T]}, {}]

Covered

	Trace

	14[T], 15[(i >= 0)], 21[(-n-j+i >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {12[T], 22[T]}, {20[T]}, {19[T], 21[T]}]

Step with 20

	Trace

	14[T], 15[(i >= 0)], 21[(-n-j+i >= 0 /\ -1+n >= 0)], 20[(1+j-i <= 0)]
	
	Blocked

	[{}, {12[T], 22[T]}, {20[T]}, {19[T], 21[T]}, {}]

Covered

	Trace

	14[T], 15[(i >= 0)], 21[(-n-j+i >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {12[T], 22[T]}, {20[T]}, {19[T], 20[T], 21[T]}]

Backtrack

	Trace

	14[T], 15[(i >= 0)]
	
	Blocked

	[{}, {12[T], 22[T]}, {20[T], 21[T]}]

Step with 19

	Trace

	14[T], 15[(i >= 0)], 19[(1+j-i > 0)]
	
	Blocked

	[{}, {12[T], 22[T]}, {20[T], 21[T]}, {}]

Step with 12

	Trace

	14[T], 15[(i >= 0)], 19[(1+j-i > 0)], 12[(i < 0)]
	
	Blocked

	[{}, {12[T], 22[T]}, {20[T], 21[T]}, {15[T], 22[T]}, {}]

Backtrack

	Trace

	14[T], 15[(i >= 0)], 19[(1+j-i > 0)]
	
	Blocked

	[{}, {12[T], 22[T]}, {20[T], 21[T]}, {12[T], 15[T], 22[T]}]

Backtrack

	Trace

	14[T], 15[(i >= 0)]
	
	Blocked

	[{}, {12[T], 22[T]}, {19[T], 20[T], 21[T]}]

Backtrack

	Trace

	14[T]
	
	Blocked

	[{}, {12[T], 15[T], 22[T]}]

Backtrack

	Trace

	Blocked

	[{14[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
