WORST_CASE(Omega(0),?)

Initial ITS
Start location: __init
   0: f1_0_main_Load -> f213_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ 1+arg3P0 > 0 /\ 1+arg2P0 > 0), cost: 1
   1: f213_0_main_LE -> f213_0_main_LE : arg2'=arg2P1, arg1'=arg1P1, arg3'=arg3P1, (arg2-arg1 > 0 /\ 1+arg3-arg3P1 == 0 /\ 1+arg1-arg1P1 == 0 /\ arg2-arg2P1 == 0 /\ -arg2+arg3 < 0), cost: 1
   2: __init -> f1_0_main_Load : arg2'=arg2P2, arg1'=arg1P2, arg3'=arg3P2, TRUE, cost: 1


Applied preprocessing
Original rule:
f213_0_main_LE -> f213_0_main_LE : arg2'=arg2P1, arg1'=arg1P1, arg3'=arg3P1, (arg2-arg1 > 0 /\ 1+arg3-arg3P1 == 0 /\ 1+arg1-arg1P1 == 0 /\ arg2-arg2P1 == 0 /\ -arg2+arg3 < 0), cost: 1
New rule:
f213_0_main_LE -> f213_0_main_LE : arg1'=1+arg1, arg3'=1+arg3, (arg2-arg1 > 0 /\ arg2-arg3 > 0), cost: 1

Simplified rules
Start location: __init
   0: f1_0_main_Load -> f213_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ 1+arg3P0 > 0 /\ 1+arg2P0 > 0), cost: 1
   3: f213_0_main_LE -> f213_0_main_LE : arg1'=1+arg1, arg3'=1+arg3, (arg2-arg1 > 0 /\ arg2-arg3 > 0), cost: 1
   2: __init -> f1_0_main_Load : arg2'=arg2P2, arg1'=arg1P2, arg3'=arg3P2, TRUE, cost: 1


Applied acceleration
Original rule:
f213_0_main_LE -> f213_0_main_LE : arg1'=1+arg1, arg3'=1+arg3, (arg2-arg1 > 0 /\ arg2-arg3 > 0), cost: 1
New rule:
f213_0_main_LE -> f213_0_main_LE : arg1'=n+arg1, arg3'=n+arg3, (n >= 0 /\ 1-n+arg2-arg3 > 0 /\ 1-n+arg2-arg1 > 0), cost: n
Sub-proof via acceration calculus written to file:///tmp/tmpnam_GiCCHL.txt

Applied instantiation
Original rule:
f213_0_main_LE -> f213_0_main_LE : arg1'=n+arg1, arg3'=n+arg3, (n >= 0 /\ 1-n+arg2-arg3 > 0 /\ 1-n+arg2-arg1 > 0), cost: n
New rule:
f213_0_main_LE -> f213_0_main_LE : arg1'=arg2, arg3'=arg2-arg1+arg3, (1 > 0 /\ arg2-arg1 >= 0 /\ 1+arg1-arg3 > 0), cost: arg2-arg1

Applied instantiation
Original rule:
f213_0_main_LE -> f213_0_main_LE : arg1'=n+arg1, arg3'=n+arg3, (n >= 0 /\ 1-n+arg2-arg3 > 0 /\ 1-n+arg2-arg1 > 0), cost: n
New rule:
f213_0_main_LE -> f213_0_main_LE : arg1'=arg2+arg1-arg3, arg3'=arg2, (1 > 0 /\ 1-arg1+arg3 > 0 /\ arg2-arg3 >= 0), cost: arg2-arg3

Applied simplification
Original rule:
f213_0_main_LE -> f213_0_main_LE : arg1'=arg2, arg3'=arg2-arg1+arg3, (1 > 0 /\ arg2-arg1 >= 0 /\ 1+arg1-arg3 > 0), cost: arg2-arg1
New rule:
f213_0_main_LE -> f213_0_main_LE : arg1'=arg2, arg3'=arg2-arg1+arg3, (arg2-arg1 >= 0 /\ 1+arg1-arg3 > 0), cost: arg2-arg1

Applied simplification
Original rule:
f213_0_main_LE -> f213_0_main_LE : arg1'=arg2+arg1-arg3, arg3'=arg2, (1 > 0 /\ 1-arg1+arg3 > 0 /\ arg2-arg3 >= 0), cost: arg2-arg3
New rule:
f213_0_main_LE -> f213_0_main_LE : arg1'=arg2+arg1-arg3, arg3'=arg2, (1-arg1+arg3 > 0 /\ arg2-arg3 >= 0), cost: arg2-arg3

Applied deletion
Removed the following rules: 3

Accelerated simple loops
Start location: __init
   0: f1_0_main_Load -> f213_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ 1+arg3P0 > 0 /\ 1+arg2P0 > 0), cost: 1
   6: f213_0_main_LE -> f213_0_main_LE : arg1'=arg2, arg3'=arg2-arg1+arg3, (arg2-arg1 >= 0 /\ 1+arg1-arg3 > 0), cost: arg2-arg1
   7: f213_0_main_LE -> f213_0_main_LE : arg1'=arg2+arg1-arg3, arg3'=arg2, (1-arg1+arg3 > 0 /\ arg2-arg3 >= 0), cost: arg2-arg3
   2: __init -> f1_0_main_Load : arg2'=arg2P2, arg1'=arg1P2, arg3'=arg3P2, TRUE, cost: 1


Applied chaining
First rule:
f1_0_main_Load -> f213_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ 1+arg3P0 > 0 /\ 1+arg2P0 > 0), cost: 1
Second rule:
f213_0_main_LE -> f213_0_main_LE : arg1'=arg2, arg3'=arg2-arg1+arg3, (arg2-arg1 >= 0 /\ 1+arg1-arg3 > 0), cost: arg2-arg1
New rule:
f1_0_main_Load -> f213_0_main_LE : arg2'=arg2P0, arg1'=arg2P0, arg3'=arg2P0-arg1P0+arg3P0, (1+arg2 > 0 /\ arg2P0-arg1P0 >= 0 /\ arg1 > 0 /\ 1+arg1P0-arg3P0 > 0 /\ 1+arg3P0 > 0), cost: 1+arg2P0-arg1P0

Applied chaining
First rule:
f1_0_main_Load -> f213_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ 1+arg3P0 > 0 /\ 1+arg2P0 > 0), cost: 1
Second rule:
f213_0_main_LE -> f213_0_main_LE : arg1'=arg2+arg1-arg3, arg3'=arg2, (1-arg1+arg3 > 0 /\ arg2-arg3 >= 0), cost: arg2-arg3
New rule:
f1_0_main_Load -> f213_0_main_LE : arg2'=arg2P0, arg1'=arg2P0+arg1P0-arg3P0, arg3'=arg2P0, (1+arg1P0 > 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ 1-arg1P0+arg3P0 > 0 /\ arg2P0-arg3P0 >= 0), cost: 1+arg2P0-arg3P0

Applied deletion
Removed the following rules: 6 7

Chained accelerated rules with incoming rules
Start location: __init
   0: f1_0_main_Load -> f213_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ 1+arg3P0 > 0 /\ 1+arg2P0 > 0), cost: 1
   8: f1_0_main_Load -> f213_0_main_LE : arg2'=arg2P0, arg1'=arg2P0, arg3'=arg2P0-arg1P0+arg3P0, (1+arg2 > 0 /\ arg2P0-arg1P0 >= 0 /\ arg1 > 0 /\ 1+arg1P0-arg3P0 > 0 /\ 1+arg3P0 > 0), cost: 1+arg2P0-arg1P0
   9: f1_0_main_Load -> f213_0_main_LE : arg2'=arg2P0, arg1'=arg2P0+arg1P0-arg3P0, arg3'=arg2P0, (1+arg1P0 > 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ 1-arg1P0+arg3P0 > 0 /\ arg2P0-arg3P0 >= 0), cost: 1+arg2P0-arg3P0
   2: __init -> f1_0_main_Load : arg2'=arg2P2, arg1'=arg1P2, arg3'=arg3P2, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
  <empty>


Computing asymptotic complexity

Proved the following lower bound
Complexity:  Unknown
Cpx degree: ?

Solved cost: 0
Rule cost:   0

