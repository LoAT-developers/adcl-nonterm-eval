unknown

Initial ITS

Start location: __init
Program variables: arg1 arg2 arg3
   0: f1_0_main_New -> f160_0_main_LE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (27-arg2p1 == 0 /\ arg1p1 > 0 /\ 28-arg3p1 == 0), cost: 1
   1: f160_0_main_LE -> f160_0_main_LE : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, (arg3 > 0 /\ -3+arg1p2 > 0 /\ -1-arg2p2+arg2 == 0 /\ -arg3p2+arg2 == 0 /\ arg1 > 0 /\ -3-arg1+arg1p2 <= 0), cost: 1
   2: f160_0_main_LE -> f167_0_length_InvokeMethod : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, (1+arg1p3 > 0 /\ -1+arg3 < 0 /\ arg1 > 0 /\ 1-arg1+arg1p3 <= 0), cost: 1
   3: f167_0_length_InvokeMethod -> f167_0_length_InvokeMethod : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, (arg1 > 0 /\ -1+arg1-arg1p4 >= 0 /\ 1+arg1p4 > 0), cost: 1
   4: __init -> f1_0_main_New : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2 arg3
   1: f160_0_main_LE -> f160_0_main_LE : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, (arg3 > 0 /\ -3+arg1p2 > 0 /\ -1-arg2p2+arg2 == 0 /\ -arg3p2+arg2 == 0 /\ arg1 > 0 /\ -3-arg1+arg1p2 <= 0), cost: 1
   2: f160_0_main_LE -> f167_0_length_InvokeMethod : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, (1+arg1p3 > 0 /\ -1+arg3 < 0 /\ arg1 > 0 /\ 1-arg1+arg1p3 <= 0), cost: 1
   3: f167_0_length_InvokeMethod -> f167_0_length_InvokeMethod : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, (arg1 > 0 /\ -1+arg1-arg1p4 >= 0 /\ 1+arg1p4 > 0), cost: 1
   5: __init -> f160_0_main_LE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (27-arg2p1 == 0 /\ arg1p1 > 0 /\ 28-arg3p1 == 0), cost: 1

	Eliminating location f1_0_main_New by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_New : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, T, cost: 1
	Second rule:
	f1_0_main_New -> f160_0_main_LE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (27-arg2p1 == 0 /\ arg1p1 > 0 /\ 28-arg3p1 == 0), cost: 1
	New rule:
	__init -> f160_0_main_LE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (27-arg2p1 == 0 /\ arg1p1 > 0 /\ 28-arg3p1 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 4

Simplified Transitions

Start location: __init
Program variables: arg1 arg2 arg3
   2: f160_0_main_LE -> f167_0_length_InvokeMethod : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, (1+arg1p3 > 0 /\ -1+arg3 < 0 /\ arg1 > 0 /\ 1-arg1+arg1p3 <= 0), cost: 1
   6: f160_0_main_LE -> f160_0_main_LE : arg1'=arg1p2, arg2'=-1+arg2, arg3'=arg2, (arg3 > 0 /\ -3+arg1p2 > 0 /\ arg1 > 0 /\ -3-arg1+arg1p2 <= 0), cost: 1
   3: f167_0_length_InvokeMethod -> f167_0_length_InvokeMethod : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, (arg1 > 0 /\ -1+arg1-arg1p4 >= 0 /\ 1+arg1p4 > 0), cost: 1
   7: __init -> f160_0_main_LE : arg1'=arg1p1, arg2'=27, arg3'=28, arg1p1 > 0, cost: 1

	Propagated Equalities

	Original rule:
	f160_0_main_LE -> f160_0_main_LE : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, (arg3 > 0 /\ -3+arg1p2 > 0 /\ -1-arg2p2+arg2 == 0 /\ -arg3p2+arg2 == 0 /\ arg1 > 0 /\ -3-arg1+arg1p2 <= 0), cost: 1
	New rule:
	f160_0_main_LE -> f160_0_main_LE : arg1'=arg1p2, arg2'=-1+arg2, arg3'=arg2, (0 == 0 /\ arg3 > 0 /\ -3+arg1p2 > 0 /\ arg1 > 0 /\ -3-arg1+arg1p2 <= 0), cost: 1
	
		propagated equality arg2p2 = -1+arg2
		
		propagated equality arg3p2 = arg2
		
	Simplified Guard

	Original rule:
	f160_0_main_LE -> f160_0_main_LE : arg1'=arg1p2, arg2'=-1+arg2, arg3'=arg2, (0 == 0 /\ arg3 > 0 /\ -3+arg1p2 > 0 /\ arg1 > 0 /\ -3-arg1+arg1p2 <= 0), cost: 1
	New rule:
	f160_0_main_LE -> f160_0_main_LE : arg1'=arg1p2, arg2'=-1+arg2, arg3'=arg2, (arg3 > 0 /\ -3+arg1p2 > 0 /\ arg1 > 0 /\ -3-arg1+arg1p2 <= 0), cost: 1
	
	Propagated Equalities

	Original rule:
	__init -> f160_0_main_LE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (27-arg2p1 == 0 /\ arg1p1 > 0 /\ 28-arg3p1 == 0), cost: 1
	New rule:
	__init -> f160_0_main_LE : arg1'=arg1p1, arg2'=27, arg3'=28, (0 == 0 /\ arg1p1 > 0), cost: 1
	
		propagated equality arg2p1 = 27
		
		propagated equality arg3p1 = 28
		
	Simplified Guard

	Original rule:
	__init -> f160_0_main_LE : arg1'=arg1p1, arg2'=27, arg3'=28, (0 == 0 /\ arg1p1 > 0), cost: 1
	New rule:
	__init -> f160_0_main_LE : arg1'=arg1p1, arg2'=27, arg3'=28, arg1p1 > 0, cost: 1

Step with 7

	Trace

	7[(arg1p1 > 0)]
	
	Blocked

	[{}, {}]

Step with 6

	Trace

	7[(arg1p1 > 0)], 6[(arg3 > 0 /\ -3+arg1p2 > 0 /\ arg1 > 0 /\ -3-arg1+arg1p2 <= 0)]
	
	Blocked

	[{}, {2[T]}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2 arg3
   2: f160_0_main_LE -> f167_0_length_InvokeMethod : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, (1+arg1p3 > 0 /\ -1+arg3 < 0 /\ arg1 > 0 /\ 1-arg1+arg1p3 <= 0), cost: 1
   6: f160_0_main_LE -> f160_0_main_LE : arg1'=arg1p2, arg2'=-1+arg2, arg3'=arg2, (arg3 > 0 /\ -3+arg1p2 > 0 /\ arg1 > 0 /\ -3-arg1+arg1p2 <= 0), cost: 1
   8: f160_0_main_LE -> f160_0_main_LE : arg1'=arg1p2, arg2'=-n+arg2, arg3'=1-n+arg2, (-1+n >= 0 /\ arg3 > 0 /\ -3+arg1p2 > 0 /\ arg1 > 0 /\ 2-n+arg2 > 0 /\ 3+arg1-arg1p2 >= 0), cost: 1
   3: f167_0_length_InvokeMethod -> f167_0_length_InvokeMethod : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, (arg1 > 0 /\ -1+arg1-arg1p4 >= 0 /\ 1+arg1p4 > 0), cost: 1
   7: __init -> f160_0_main_LE : arg1'=arg1p1, arg2'=27, arg3'=28, arg1p1 > 0, cost: 1

	Loop Acceleration

	Original rule:
	f160_0_main_LE -> f160_0_main_LE : arg1'=arg1p2, arg2'=-1+arg2, arg3'=arg2, (arg3 > 0 /\ -3+arg1p2 > 0 /\ arg1 > 0 /\ -3-arg1+arg1p2 <= 0), cost: 1
	New rule:
	f160_0_main_LE -> f160_0_main_LE : arg1'=arg1p2, arg2'=-n+arg2, arg3'=1-n+arg2, (-1+n >= 0 /\ arg3 > 0 /\ -3+arg1p2 > 0 /\ arg1 > 0 /\ 2-n+arg2 > 0 /\ 3+arg1-arg1p2 >= 0), cost: 1

		arg3 > 0 [0]: eventual decrease yields (arg3 > 0 /\ 2-n+arg2 > 0)
		
		-3+arg1p2 > 0 [0]: monotonic increase yields -3+arg1p2 > 0
		
		arg1 > 0 [0]: monotonic increase yields arg1 > 0, dependencies: -3+arg1p2 > 0
		
		3+arg1-arg1p2 >= 0 [0]: monotonic increase yields 3+arg1-arg1p2 >= 0
		
		Replacement map: {arg3 > 0 -> (arg3 > 0 /\ 2-n+arg2 > 0), -3+arg1p2 > 0 -> -3+arg1p2 > 0, arg1 > 0 -> arg1 > 0, 3+arg1-arg1p2 >= 0 -> 3+arg1-arg1p2 >= 0}

	Trace

	7[(arg1p1 > 0)], 8[(-1+n >= 0 /\ arg3 > 0 /\ -3+arg1p2 > 0 /\ arg1 > 0 /\ 2-n+arg2 > 0 /\ 3+arg1-arg1p2 >= 0)]
	
	Blocked

	[{}, {2[T]}, {6[T], 8[T]}]

Step with 2

	Trace

	7[(arg1p1 > 0)], 8[(-1+n >= 0 /\ arg3 > 0 /\ -3+arg1p2 > 0 /\ arg1 > 0 /\ 2-n+arg2 > 0 /\ 3+arg1-arg1p2 >= 0)], 2[(1+arg1p3 > 0 /\ -1+arg3 < 0 /\ arg1 > 0 /\ 1-arg1+arg1p3 <= 0)]
	
	Blocked

	[{}, {2[T]}, {6[T], 8[T]}, {}]

Step with 3

	Trace

	7[(arg1p1 > 0)], 8[(-1+n >= 0 /\ arg3 > 0 /\ -3+arg1p2 > 0 /\ arg1 > 0 /\ 2-n+arg2 > 0 /\ 3+arg1-arg1p2 >= 0)], 2[(1+arg1p3 > 0 /\ -1+arg3 < 0 /\ arg1 > 0 /\ 1-arg1+arg1p3 <= 0)], 3[(arg1 > 0 /\ -1+arg1-arg1p4 >= 0 /\ 1+arg1p4 > 0)]
	
	Blocked

	[{}, {2[T]}, {6[T], 8[T]}, {}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 3

	Trace

	7[(arg1p1 > 0)], 8[(-1+n >= 0 /\ arg3 > 0 /\ -3+arg1p2 > 0 /\ arg1 > 0 /\ 2-n+arg2 > 0 /\ 3+arg1-arg1p2 >= 0)], 2[(1+arg1p3 > 0 /\ -1+arg3 < 0 /\ arg1 > 0 /\ 1-arg1+arg1p3 <= 0)], 3[(arg1 > 0 /\ -1+arg1-arg1p4 >= 0 /\ 1+arg1p4 > 0)], 3[(arg1 > 0 /\ -1+arg1-arg1p4 >= 0 /\ 1+arg1p4 > 0)]
	
	Blocked

	[{}, {2[T]}, {6[T], 8[T]}, {}, {}, {}]

Covered

	Trace

	7[(arg1p1 > 0)], 8[(-1+n >= 0 /\ arg3 > 0 /\ -3+arg1p2 > 0 /\ arg1 > 0 /\ 2-n+arg2 > 0 /\ 3+arg1-arg1p2 >= 0)], 2[(1+arg1p3 > 0 /\ -1+arg3 < 0 /\ arg1 > 0 /\ 1-arg1+arg1p3 <= 0)], 3[(arg1 > 0 /\ -1+arg1-arg1p4 >= 0 /\ 1+arg1p4 > 0)]
	
	Blocked

	[{}, {2[T]}, {6[T], 8[T]}, {}, {3[T]}]

Backtrack

	Trace

	7[(arg1p1 > 0)], 8[(-1+n >= 0 /\ arg3 > 0 /\ -3+arg1p2 > 0 /\ arg1 > 0 /\ 2-n+arg2 > 0 /\ 3+arg1-arg1p2 >= 0)], 2[(1+arg1p3 > 0 /\ -1+arg3 < 0 /\ arg1 > 0 /\ 1-arg1+arg1p3 <= 0)]
	
	Blocked

	[{}, {2[T]}, {6[T], 8[T]}, {3[T]}]

Backtrack

	Trace

	7[(arg1p1 > 0)], 8[(-1+n >= 0 /\ arg3 > 0 /\ -3+arg1p2 > 0 /\ arg1 > 0 /\ 2-n+arg2 > 0 /\ 3+arg1-arg1p2 >= 0)]
	
	Blocked

	[{}, {2[T]}, {2[T], 6[T], 8[T]}]

Backtrack

	Trace

	7[(arg1p1 > 0)]
	
	Blocked

	[{}, {2[T], 8[T]}]

Step with 6

	Trace

	7[(arg1p1 > 0)], 6[(arg3 > 0 /\ -3+arg1p2 > 0 /\ arg1 > 0 /\ -3-arg1+arg1p2 <= 0)]
	
	Blocked

	[{}, {2[T], 8[T]}, {}]

Covered

	Trace

	7[(arg1p1 > 0)]
	
	Blocked

	[{}, {2[T], 6[T], 8[T]}]

Backtrack

	Trace

	Blocked

	[{7[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
