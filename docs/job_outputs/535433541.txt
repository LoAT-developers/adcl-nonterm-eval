WORST_CASE(Omega(0),?)

Initial ITS
Start location: __init
   0: f1_0_main_Load -> f80_0_create_LE : arg2'=arg2P0, arg4'=arg4P0, arg1'=arg1P0, arg3'=arg3P0, (-arg3P0 == 0 /\ arg2-arg4P0 == 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ -1+arg2-arg2P0 == 0 /\ arg1P0 > 0 /\ -arg1+arg1P0 <= 0), cost: 1
   1: f80_0_create_LE -> f108_0_main_ArrayAccess : arg2'=arg2P1, arg4'=arg4P1, arg1'=arg1P1, arg3'=arg3P1, (-arg1+arg1P1 <= 0 /\ arg1 > 0 /\ -1+arg2 < 0 /\ -arg3P1+arg4 == 0 /\ arg3 > 0 /\ arg1P1 > 0 /\ arg2P1-arg3 > 0), cost: 1
   2: f80_0_create_LE -> f108_0_main_ArrayAccess : arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg3'=arg3P2, (arg1P2 > 0 /\ -arg3P2+arg4 == 0 /\ -arg1P2+arg1 >= 0 /\ arg1 > 0 /\ 1-arg2P2 == 0 /\ -1+arg2 < 0), cost: 1
   3: f80_0_create_LE -> f80_0_create_LE : arg2'=arg2P3, arg4'=arg4P3, arg1'=arg1P3, arg3'=arg3P3, (arg2 > 0 /\ arg1P3 > 0 /\ arg1P3-arg1 <= 0 /\ -1+arg2-arg2P3 == 0 /\ arg1 > 0 /\ -arg4P3+arg4 == 0), cost: 1
   4: f108_0_main_ArrayAccess -> f147_0_get_LE : arg2'=arg2P4, arg4'=arg4P4, arg1'=arg1P4, arg3'=arg3P4, (-1-arg1P4+x230 == 0 /\ 1+x230 > 0 /\ arg1 > 0 /\ arg3 > 0 /\ arg2-arg2P4 == 0), cost: 1
   5: f147_0_get_LE -> f147_0_get_LE : arg2'=arg2P5, arg4'=arg4P5, arg1'=arg1P5, arg3'=arg3P5, (-arg2P5+x270 < 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ -arg2+x270 < 0 /\ x270 > 0 /\ -1-arg1P5+arg1 == 0), cost: 1
   6: f147_0_get_LE -> f147_0_get_LE : arg2'=arg2P6, arg4'=arg4P6, arg1'=arg1P6, arg3'=arg3P6, (-1-arg1P6+arg1 == 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ -arg2+x300 < 0 /\ 1-arg2P6 == 0), cost: 1
   7: __init -> f1_0_main_Load : arg2'=arg2P7, arg4'=arg4P7, arg1'=arg1P7, arg3'=arg3P7, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_Load -> f80_0_create_LE : arg2'=arg2P0, arg4'=arg4P0, arg1'=arg1P0, arg3'=arg3P0, (-arg3P0 == 0 /\ arg2-arg4P0 == 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ -1+arg2-arg2P0 == 0 /\ arg1P0 > 0 /\ -arg1+arg1P0 <= 0), cost: 1
New rule:
f1_0_main_Load -> f80_0_create_LE : arg2'=-1+arg2, arg4'=arg2, arg1'=arg1P0, arg3'=0, (1+arg2 > 0 /\ arg1P0 > 0 /\ -arg1+arg1P0 <= 0), cost: 1

Applied preprocessing
Original rule:
f80_0_create_LE -> f108_0_main_ArrayAccess : arg2'=arg2P1, arg4'=arg4P1, arg1'=arg1P1, arg3'=arg3P1, (-arg1+arg1P1 <= 0 /\ arg1 > 0 /\ -1+arg2 < 0 /\ -arg3P1+arg4 == 0 /\ arg3 > 0 /\ arg1P1 > 0 /\ arg2P1-arg3 > 0), cost: 1
New rule:
f80_0_create_LE -> f108_0_main_ArrayAccess : arg2'=arg2P1, arg4'=arg4P1, arg1'=arg1P1, arg3'=arg4, (-arg1+arg1P1 <= 0 /\ 1-arg2 > 0 /\ arg3 > 0 /\ arg1P1 > 0 /\ arg2P1-arg3 > 0), cost: 1

Applied preprocessing
Original rule:
f80_0_create_LE -> f108_0_main_ArrayAccess : arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg3'=arg3P2, (arg1P2 > 0 /\ -arg3P2+arg4 == 0 /\ -arg1P2+arg1 >= 0 /\ arg1 > 0 /\ 1-arg2P2 == 0 /\ -1+arg2 < 0), cost: 1
New rule:
f80_0_create_LE -> f108_0_main_ArrayAccess : arg2'=1, arg4'=arg4P2, arg1'=arg1P2, arg3'=arg4, (arg1P2 > 0 /\ -arg1P2+arg1 >= 0 /\ 1-arg2 > 0), cost: 1

Applied preprocessing
Original rule:
f80_0_create_LE -> f80_0_create_LE : arg2'=arg2P3, arg4'=arg4P3, arg1'=arg1P3, arg3'=arg3P3, (arg2 > 0 /\ arg1P3 > 0 /\ arg1P3-arg1 <= 0 /\ -1+arg2-arg2P3 == 0 /\ arg1 > 0 /\ -arg4P3+arg4 == 0), cost: 1
New rule:
f80_0_create_LE -> f80_0_create_LE : arg2'=-1+arg2, arg1'=arg1P3, arg3'=arg3P3, (arg2 > 0 /\ arg1P3 > 0 /\ arg1P3-arg1 <= 0), cost: 1

Applied preprocessing
Original rule:
f108_0_main_ArrayAccess -> f147_0_get_LE : arg2'=arg2P4, arg4'=arg4P4, arg1'=arg1P4, arg3'=arg3P4, (-1-arg1P4+x230 == 0 /\ 1+x230 > 0 /\ arg1 > 0 /\ arg3 > 0 /\ arg2-arg2P4 == 0), cost: 1
New rule:
f108_0_main_ArrayAccess -> f147_0_get_LE : arg4'=arg4P4, arg1'=-1+x230, arg3'=arg3P4, (1+x230 > 0 /\ arg1 > 0 /\ arg3 > 0), cost: 1

Applied preprocessing
Original rule:
f147_0_get_LE -> f147_0_get_LE : arg2'=arg2P5, arg4'=arg4P5, arg1'=arg1P5, arg3'=arg3P5, (-arg2P5+x270 < 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ -arg2+x270 < 0 /\ x270 > 0 /\ -1-arg1P5+arg1 == 0), cost: 1
New rule:
f147_0_get_LE -> f147_0_get_LE : arg2'=arg2P5, arg4'=arg4P5, arg1'=-1+arg1, arg3'=arg3P5, (-2+arg2 >= 0 /\ -2+arg2P5 >= 0 /\ arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f147_0_get_LE -> f147_0_get_LE : arg2'=arg2P6, arg4'=arg4P6, arg1'=arg1P6, arg3'=arg3P6, (-1-arg1P6+arg1 == 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ -arg2+x300 < 0 /\ 1-arg2P6 == 0), cost: 1
New rule:
f147_0_get_LE -> f147_0_get_LE : arg2'=1, arg4'=arg4P6, arg1'=-1+arg1, arg3'=arg3P6, (1+arg2 > 0 /\ arg1 > 0), cost: 1

Simplified rules
Start location: __init
   8: f1_0_main_Load -> f80_0_create_LE : arg2'=-1+arg2, arg4'=arg2, arg1'=arg1P0, arg3'=0, (1+arg2 > 0 /\ arg1P0 > 0 /\ -arg1+arg1P0 <= 0), cost: 1
   9: f80_0_create_LE -> f108_0_main_ArrayAccess : arg2'=arg2P1, arg4'=arg4P1, arg1'=arg1P1, arg3'=arg4, (-arg1+arg1P1 <= 0 /\ 1-arg2 > 0 /\ arg3 > 0 /\ arg1P1 > 0 /\ arg2P1-arg3 > 0), cost: 1
  10: f80_0_create_LE -> f108_0_main_ArrayAccess : arg2'=1, arg4'=arg4P2, arg1'=arg1P2, arg3'=arg4, (arg1P2 > 0 /\ -arg1P2+arg1 >= 0 /\ 1-arg2 > 0), cost: 1
  11: f80_0_create_LE -> f80_0_create_LE : arg2'=-1+arg2, arg1'=arg1P3, arg3'=arg3P3, (arg2 > 0 /\ arg1P3 > 0 /\ arg1P3-arg1 <= 0), cost: 1
  12: f108_0_main_ArrayAccess -> f147_0_get_LE : arg4'=arg4P4, arg1'=-1+x230, arg3'=arg3P4, (1+x230 > 0 /\ arg1 > 0 /\ arg3 > 0), cost: 1
  13: f147_0_get_LE -> f147_0_get_LE : arg2'=arg2P5, arg4'=arg4P5, arg1'=-1+arg1, arg3'=arg3P5, (-2+arg2 >= 0 /\ -2+arg2P5 >= 0 /\ arg1 > 0), cost: 1
  14: f147_0_get_LE -> f147_0_get_LE : arg2'=1, arg4'=arg4P6, arg1'=-1+arg1, arg3'=arg3P6, (1+arg2 > 0 /\ arg1 > 0), cost: 1
   7: __init -> f1_0_main_Load : arg2'=arg2P7, arg4'=arg4P7, arg1'=arg1P7, arg3'=arg3P7, TRUE, cost: 1


Applied acceleration
Original rule:
f80_0_create_LE -> f80_0_create_LE : arg2'=-1+arg2, arg1'=arg1P3, arg3'=arg3P3, (arg2 > 0 /\ arg1P3 > 0 /\ arg1P3-arg1 <= 0), cost: 1
New rule:
f80_0_create_LE -> f80_0_create_LE : arg2'=arg2-n, arg1'=arg1P3, arg3'=arg3P3, (-arg1P3+arg1 >= 0 /\ arg1P3 > 0 /\ -1+n >= 0 /\ 1+arg2-n > 0), cost: n
Sub-proof via acceration calculus written to file:///tmp/tmpnam_OMhDlg.txt

Applied instantiation
Original rule:
f80_0_create_LE -> f80_0_create_LE : arg2'=arg2-n, arg1'=arg1P3, arg3'=arg3P3, (-arg1P3+arg1 >= 0 /\ arg1P3 > 0 /\ -1+n >= 0 /\ 1+arg2-n > 0), cost: n
New rule:
f80_0_create_LE -> f80_0_create_LE : arg2'=0, arg1'=arg1P3, arg3'=arg3P3, (-arg1P3+arg1 >= 0 /\ 1 > 0 /\ arg1P3 > 0 /\ -1+arg2 >= 0), cost: arg2

Applied simplification
Original rule:
f80_0_create_LE -> f80_0_create_LE : arg2'=0, arg1'=arg1P3, arg3'=arg3P3, (-arg1P3+arg1 >= 0 /\ 1 > 0 /\ arg1P3 > 0 /\ -1+arg2 >= 0), cost: arg2
New rule:
f80_0_create_LE -> f80_0_create_LE : arg2'=0, arg1'=arg1P3, arg3'=arg3P3, (-arg1P3+arg1 >= 0 /\ arg1P3 > 0 /\ -1+arg2 >= 0), cost: arg2

Applied deletion
Removed the following rules: 11

Applied acceleration
Original rule:
f147_0_get_LE -> f147_0_get_LE : arg2'=arg2P5, arg4'=arg4P5, arg1'=-1+arg1, arg3'=arg3P5, (-2+arg2 >= 0 /\ -2+arg2P5 >= 0 /\ arg1 > 0), cost: 1
New rule:
f147_0_get_LE -> f147_0_get_LE : arg2'=arg2P5, arg4'=arg4P5, arg1'=arg1-n0, arg3'=arg3P5, (-2+arg2 >= 0 /\ -2+arg2P5 >= 0 /\ 1+arg1-n0 > 0 /\ -1+n0 >= 0), cost: n0
Sub-proof via acceration calculus written to file:///tmp/tmpnam_PPaPIn.txt

Applied instantiation
Original rule:
f147_0_get_LE -> f147_0_get_LE : arg2'=arg2P5, arg4'=arg4P5, arg1'=arg1-n0, arg3'=arg3P5, (-2+arg2 >= 0 /\ -2+arg2P5 >= 0 /\ 1+arg1-n0 > 0 /\ -1+n0 >= 0), cost: n0
New rule:
f147_0_get_LE -> f147_0_get_LE : arg2'=arg2P5, arg4'=arg4P5, arg1'=0, arg3'=arg3P5, (1 > 0 /\ -2+arg2 >= 0 /\ -2+arg2P5 >= 0 /\ -1+arg1 >= 0), cost: arg1

Applied acceleration
Original rule:
f147_0_get_LE -> f147_0_get_LE : arg2'=1, arg4'=arg4P6, arg1'=-1+arg1, arg3'=arg3P6, (1+arg2 > 0 /\ arg1 > 0), cost: 1
New rule:
f147_0_get_LE -> f147_0_get_LE : arg2'=1, arg4'=arg4P6, arg1'=-n1+arg1, arg3'=arg3P6, (1+arg2 > 0 /\ 1-n1+arg1 > 0 /\ -1+n1 >= 0), cost: n1
Sub-proof via acceration calculus written to file:///tmp/tmpnam_LOPnNH.txt

Applied instantiation
Original rule:
f147_0_get_LE -> f147_0_get_LE : arg2'=1, arg4'=arg4P6, arg1'=-n1+arg1, arg3'=arg3P6, (1+arg2 > 0 /\ 1-n1+arg1 > 0 /\ -1+n1 >= 0), cost: n1
New rule:
f147_0_get_LE -> f147_0_get_LE : arg2'=1, arg4'=arg4P6, arg1'=0, arg3'=arg3P6, (1 > 0 /\ 1+arg2 > 0 /\ -1+arg1 >= 0), cost: arg1

Applied simplification
Original rule:
f147_0_get_LE -> f147_0_get_LE : arg2'=arg2P5, arg4'=arg4P5, arg1'=0, arg3'=arg3P5, (1 > 0 /\ -2+arg2 >= 0 /\ -2+arg2P5 >= 0 /\ -1+arg1 >= 0), cost: arg1
New rule:
f147_0_get_LE -> f147_0_get_LE : arg2'=arg2P5, arg4'=arg4P5, arg1'=0, arg3'=arg3P5, (-2+arg2 >= 0 /\ -2+arg2P5 >= 0 /\ -1+arg1 >= 0), cost: arg1

Applied simplification
Original rule:
f147_0_get_LE -> f147_0_get_LE : arg2'=1, arg4'=arg4P6, arg1'=0, arg3'=arg3P6, (1 > 0 /\ 1+arg2 > 0 /\ -1+arg1 >= 0), cost: arg1
New rule:
f147_0_get_LE -> f147_0_get_LE : arg2'=1, arg4'=arg4P6, arg1'=0, arg3'=arg3P6, (1+arg2 > 0 /\ -1+arg1 >= 0), cost: arg1

Applied deletion
Removed the following rules: 13 14

Accelerated simple loops
Start location: __init
   8: f1_0_main_Load -> f80_0_create_LE : arg2'=-1+arg2, arg4'=arg2, arg1'=arg1P0, arg3'=0, (1+arg2 > 0 /\ arg1P0 > 0 /\ -arg1+arg1P0 <= 0), cost: 1
   9: f80_0_create_LE -> f108_0_main_ArrayAccess : arg2'=arg2P1, arg4'=arg4P1, arg1'=arg1P1, arg3'=arg4, (-arg1+arg1P1 <= 0 /\ 1-arg2 > 0 /\ arg3 > 0 /\ arg1P1 > 0 /\ arg2P1-arg3 > 0), cost: 1
  10: f80_0_create_LE -> f108_0_main_ArrayAccess : arg2'=1, arg4'=arg4P2, arg1'=arg1P2, arg3'=arg4, (arg1P2 > 0 /\ -arg1P2+arg1 >= 0 /\ 1-arg2 > 0), cost: 1
  16: f80_0_create_LE -> f80_0_create_LE : arg2'=0, arg1'=arg1P3, arg3'=arg3P3, (-arg1P3+arg1 >= 0 /\ arg1P3 > 0 /\ -1+arg2 >= 0), cost: arg2
  12: f108_0_main_ArrayAccess -> f147_0_get_LE : arg4'=arg4P4, arg1'=-1+x230, arg3'=arg3P4, (1+x230 > 0 /\ arg1 > 0 /\ arg3 > 0), cost: 1
  19: f147_0_get_LE -> f147_0_get_LE : arg2'=arg2P5, arg4'=arg4P5, arg1'=0, arg3'=arg3P5, (-2+arg2 >= 0 /\ -2+arg2P5 >= 0 /\ -1+arg1 >= 0), cost: arg1
  20: f147_0_get_LE -> f147_0_get_LE : arg2'=1, arg4'=arg4P6, arg1'=0, arg3'=arg3P6, (1+arg2 > 0 /\ -1+arg1 >= 0), cost: arg1
   7: __init -> f1_0_main_Load : arg2'=arg2P7, arg4'=arg4P7, arg1'=arg1P7, arg3'=arg3P7, TRUE, cost: 1


Applied chaining
First rule:
f1_0_main_Load -> f80_0_create_LE : arg2'=-1+arg2, arg4'=arg2, arg1'=arg1P0, arg3'=0, (1+arg2 > 0 /\ arg1P0 > 0 /\ -arg1+arg1P0 <= 0), cost: 1
Second rule:
f80_0_create_LE -> f80_0_create_LE : arg2'=0, arg1'=arg1P3, arg3'=arg3P3, (-arg1P3+arg1 >= 0 /\ arg1P3 > 0 /\ -1+arg2 >= 0), cost: arg2
New rule:
f1_0_main_Load -> f80_0_create_LE : arg2'=0, arg4'=arg2, arg1'=arg1P3, arg3'=arg3P3, (arg1P3 > 0 /\ arg1P3-arg1 <= 0 /\ -2+arg2 >= 0), cost: arg2

Applied deletion
Removed the following rules: 16

Applied chaining
First rule:
f108_0_main_ArrayAccess -> f147_0_get_LE : arg4'=arg4P4, arg1'=-1+x230, arg3'=arg3P4, (1+x230 > 0 /\ arg1 > 0 /\ arg3 > 0), cost: 1
Second rule:
f147_0_get_LE -> f147_0_get_LE : arg2'=arg2P5, arg4'=arg4P5, arg1'=0, arg3'=arg3P5, (-2+arg2 >= 0 /\ -2+arg2P5 >= 0 /\ -1+arg1 >= 0), cost: arg1
New rule:
f108_0_main_ArrayAccess -> f147_0_get_LE : arg2'=arg2P5, arg4'=arg4P5, arg1'=0, arg3'=arg3P5, (-2+x230 >= 0 /\ -2+arg2 >= 0 /\ -2+arg2P5 >= 0 /\ arg1 > 0 /\ arg3 > 0), cost: x230

Applied chaining
First rule:
f108_0_main_ArrayAccess -> f147_0_get_LE : arg4'=arg4P4, arg1'=-1+x230, arg3'=arg3P4, (1+x230 > 0 /\ arg1 > 0 /\ arg3 > 0), cost: 1
Second rule:
f147_0_get_LE -> f147_0_get_LE : arg2'=1, arg4'=arg4P6, arg1'=0, arg3'=arg3P6, (1+arg2 > 0 /\ -1+arg1 >= 0), cost: arg1
New rule:
f108_0_main_ArrayAccess -> f147_0_get_LE : arg2'=1, arg4'=arg4P6, arg1'=0, arg3'=arg3P6, (-2+x230 >= 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ arg3 > 0), cost: x230

Applied deletion
Removed the following rules: 19 20

Chained accelerated rules with incoming rules
Start location: __init
   8: f1_0_main_Load -> f80_0_create_LE : arg2'=-1+arg2, arg4'=arg2, arg1'=arg1P0, arg3'=0, (1+arg2 > 0 /\ arg1P0 > 0 /\ -arg1+arg1P0 <= 0), cost: 1
  21: f1_0_main_Load -> f80_0_create_LE : arg2'=0, arg4'=arg2, arg1'=arg1P3, arg3'=arg3P3, (arg1P3 > 0 /\ arg1P3-arg1 <= 0 /\ -2+arg2 >= 0), cost: arg2
   9: f80_0_create_LE -> f108_0_main_ArrayAccess : arg2'=arg2P1, arg4'=arg4P1, arg1'=arg1P1, arg3'=arg4, (-arg1+arg1P1 <= 0 /\ 1-arg2 > 0 /\ arg3 > 0 /\ arg1P1 > 0 /\ arg2P1-arg3 > 0), cost: 1
  10: f80_0_create_LE -> f108_0_main_ArrayAccess : arg2'=1, arg4'=arg4P2, arg1'=arg1P2, arg3'=arg4, (arg1P2 > 0 /\ -arg1P2+arg1 >= 0 /\ 1-arg2 > 0), cost: 1
  12: f108_0_main_ArrayAccess -> f147_0_get_LE : arg4'=arg4P4, arg1'=-1+x230, arg3'=arg3P4, (1+x230 > 0 /\ arg1 > 0 /\ arg3 > 0), cost: 1
  22: f108_0_main_ArrayAccess -> f147_0_get_LE : arg2'=arg2P5, arg4'=arg4P5, arg1'=0, arg3'=arg3P5, (-2+x230 >= 0 /\ -2+arg2 >= 0 /\ -2+arg2P5 >= 0 /\ arg1 > 0 /\ arg3 > 0), cost: x230
  23: f108_0_main_ArrayAccess -> f147_0_get_LE : arg2'=1, arg4'=arg4P6, arg1'=0, arg3'=arg3P6, (-2+x230 >= 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ arg3 > 0), cost: x230
   7: __init -> f1_0_main_Load : arg2'=arg2P7, arg4'=arg4P7, arg1'=arg1P7, arg3'=arg3P7, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
  <empty>


Computing asymptotic complexity

Proved the following lower bound
Complexity:  Unknown
Cpx degree: ?

Solved cost: 0
Rule cost:   0

