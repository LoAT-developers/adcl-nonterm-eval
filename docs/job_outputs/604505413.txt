WORST_CASE(Omega(0),?)

Initial ITS
Start location: __init
   0: f1_0_main_ConstantStackPush -> f46_0_main_GE : arg1'=arg1P0, -arg1P0 == 0, cost: 1
   1: f46_0_main_GE -> f46_0_main_GE : arg1'=arg1P1, (1-arg1P1+arg1 == 0 /\ -100+arg1 < 0), cost: 1
   2: f46_0_main_GE -> f74_0_main_GE : arg1'=arg1P2, (5-arg1P2 == 0 /\ -99+arg1 > 0), cost: 1
   3: f74_0_main_GE -> f74_0_main_GE : arg1'=arg1P3, (-21+arg1 < 0 /\ 3+arg1-arg1P3 == 0), cost: 1
   4: __init -> f1_0_main_ConstantStackPush : arg1'=arg1P4, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_ConstantStackPush -> f46_0_main_GE : arg1'=arg1P0, -arg1P0 == 0, cost: 1
New rule:
f1_0_main_ConstantStackPush -> f46_0_main_GE : arg1'=0, TRUE, cost: 1

Applied preprocessing
Original rule:
f46_0_main_GE -> f46_0_main_GE : arg1'=arg1P1, (1-arg1P1+arg1 == 0 /\ -100+arg1 < 0), cost: 1
New rule:
f46_0_main_GE -> f46_0_main_GE : arg1'=1+arg1, 100-arg1 > 0, cost: 1

Applied preprocessing
Original rule:
f46_0_main_GE -> f74_0_main_GE : arg1'=arg1P2, (5-arg1P2 == 0 /\ -99+arg1 > 0), cost: 1
New rule:
f46_0_main_GE -> f74_0_main_GE : arg1'=5, -99+arg1 > 0, cost: 1

Applied preprocessing
Original rule:
f74_0_main_GE -> f74_0_main_GE : arg1'=arg1P3, (-21+arg1 < 0 /\ 3+arg1-arg1P3 == 0), cost: 1
New rule:
f74_0_main_GE -> f74_0_main_GE : arg1'=3+arg1, 21-arg1 > 0, cost: 1

Simplified rules
Start location: __init
   5: f1_0_main_ConstantStackPush -> f46_0_main_GE : arg1'=0, TRUE, cost: 1
   6: f46_0_main_GE -> f46_0_main_GE : arg1'=1+arg1, 100-arg1 > 0, cost: 1
   7: f46_0_main_GE -> f74_0_main_GE : arg1'=5, -99+arg1 > 0, cost: 1
   8: f74_0_main_GE -> f74_0_main_GE : arg1'=3+arg1, 21-arg1 > 0, cost: 1
   4: __init -> f1_0_main_ConstantStackPush : arg1'=arg1P4, TRUE, cost: 1


Applied acceleration
Original rule:
f46_0_main_GE -> f46_0_main_GE : arg1'=1+arg1, 100-arg1 > 0, cost: 1
New rule:
f46_0_main_GE -> f46_0_main_GE : arg1'=n+arg1, (101-n-arg1 > 0 /\ n >= 0), cost: n
Sub-proof via acceration calculus written to file:///tmp/tmpnam_DMILpL.txt

Applied instantiation
Original rule:
f46_0_main_GE -> f46_0_main_GE : arg1'=n+arg1, (101-n-arg1 > 0 /\ n >= 0), cost: n
New rule:
f46_0_main_GE -> f46_0_main_GE : arg1'=100, (1 > 0 /\ 100-arg1 >= 0), cost: 100-arg1

Applied simplification
Original rule:
f46_0_main_GE -> f46_0_main_GE : arg1'=100, (1 > 0 /\ 100-arg1 >= 0), cost: 100-arg1
New rule:
f46_0_main_GE -> f46_0_main_GE : arg1'=100, -100+arg1 <= 0, cost: 100-arg1

Applied deletion
Removed the following rules: 6

Applied acceleration
Original rule:
f74_0_main_GE -> f74_0_main_GE : arg1'=3+arg1, 21-arg1 > 0, cost: 1
New rule:
f74_0_main_GE -> f74_0_main_GE : arg1'=3*n0+arg1, (n0 >= 0 /\ 24-3*n0-arg1 > 0), cost: n0
Sub-proof via acceration calculus written to file:///tmp/tmpnam_DlOdPN.txt

Applied deletion
Removed the following rules: 8

Accelerated simple loops
Start location: __init
   5: f1_0_main_ConstantStackPush -> f46_0_main_GE : arg1'=0, TRUE, cost: 1
   7: f46_0_main_GE -> f74_0_main_GE : arg1'=5, -99+arg1 > 0, cost: 1
  10: f46_0_main_GE -> f46_0_main_GE : arg1'=100, -100+arg1 <= 0, cost: 100-arg1
  11: f74_0_main_GE -> f74_0_main_GE : arg1'=3*n0+arg1, (n0 >= 0 /\ 24-3*n0-arg1 > 0), cost: n0
   4: __init -> f1_0_main_ConstantStackPush : arg1'=arg1P4, TRUE, cost: 1


Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f46_0_main_GE : arg1'=0, TRUE, cost: 1
Second rule:
f46_0_main_GE -> f46_0_main_GE : arg1'=100, -100+arg1 <= 0, cost: 100-arg1
New rule:
f1_0_main_ConstantStackPush -> f46_0_main_GE : arg1'=100, -100 <= 0, cost: 101

Applied deletion
Removed the following rules: 10

Applied chaining
First rule:
f46_0_main_GE -> f74_0_main_GE : arg1'=5, -99+arg1 > 0, cost: 1
Second rule:
f74_0_main_GE -> f74_0_main_GE : arg1'=3*n0+arg1, (n0 >= 0 /\ 24-3*n0-arg1 > 0), cost: n0
New rule:
f46_0_main_GE -> f74_0_main_GE : arg1'=5+3*n0, (n0 >= 0 /\ 19-3*n0 > 0 /\ -99+arg1 > 0), cost: 1+n0

Applied deletion
Removed the following rules: 11

Chained accelerated rules with incoming rules
Start location: __init
   5: f1_0_main_ConstantStackPush -> f46_0_main_GE : arg1'=0, TRUE, cost: 1
  12: f1_0_main_ConstantStackPush -> f46_0_main_GE : arg1'=100, -100 <= 0, cost: 101
   7: f46_0_main_GE -> f74_0_main_GE : arg1'=5, -99+arg1 > 0, cost: 1
  13: f46_0_main_GE -> f74_0_main_GE : arg1'=5+3*n0, (n0 >= 0 /\ 19-3*n0 > 0 /\ -99+arg1 > 0), cost: 1+n0
   4: __init -> f1_0_main_ConstantStackPush : arg1'=arg1P4, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
  <empty>


Computing asymptotic complexity

Proved the following lower bound
Complexity:  Unknown
Cpx degree: ?

Solved cost: 0
Rule cost:   0

