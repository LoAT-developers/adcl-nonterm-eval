YES

Solver Timeout: 4
Global Timeout: 300
Maximum number of concurrent processes: 900
*******************************************************************************************
*********************** UNPROCESSED TRANSITION SYSTEMS PER FUNCTION ***********************
*******************************************************************************************


List of LLVMGraphs + assumeNodes + staticAssertNodes [1] :

+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++
+                                                                  +
Init Location: 0
Transitions:
<l0, l1, true, seq{main__func_return_ -> 0, main_n -> Â¿functionCall(__VERIFIER_nondet_int), main_y -> Â¿functionCall(__VERIFIER_nondet_int), main_x -> main_n}>
<l1, l2, (main_x >= 0)>
<l1, l14, not((main_x >= 0))>
<l2, l3, true>
<l3, l13, not((main_x >= 0))>
<l3, l4, (main_x >= 0)>
<l4, l5, true, seq{main_y -> 1}>
<l5, l6, (main_y < main_x)>
<l5, l11, not((main_y < main_x))>
<l6, l7, true>
<l7, l10, not((main_y < main_x))>
<l7, l8, (main_y < main_x)>
<l8, l9, true, seq{main_y -> (2 * main_y)}>
<l9, l7, true>
<l10, l11, true>
<l11, l12, true, seq{main_x -> (main_x - 1)}>
<l12, l3, true>
<l13, l14, true>
<l14, l15, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

+ Assume Nodes [0]: ++++++++++++++++++++++++++++++++++++++++++++++++
       
+ Static Assert Nodes [0]: +++++++++++++++++++++++++++++++++++++++++
       
+ After preprocess (paralelization): ++++++++++++++++++++++++++++++

Init Location: 0
Transitions:
<l0, l16, true, seq{main__func_return_ -> 0}>
<l16, l17, true, seq{varCall_1 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l17, l18, true, seq{main_n -> varCall_1}>
<l18, l19, true, seq{varCall_2 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l19, l1, true, seq{main_y -> varCall_2, main_x -> main_n}>
<l1, l2, (main_x >= 0)>
<l1, l14, not((main_x >= 0))>
<l2, l3, true>
<l3, l4, (main_x >= 0)>
<l3, l13, not((main_x >= 0))>
<l4, l5, true, seq{main_y -> 1}>
<l5, l6, (main_y < main_x)>
<l5, l11, not((main_y < main_x))>
<l6, l7, true>
<l7, l8, (main_y < main_x)>
<l7, l10, not((main_y < main_x))>
<l8, l9, true, seq{main_y -> (2 * main_y)}>
<l9, l7, true>
<l10, l11, true>
<l11, l12, true, seq{main_x -> (main_x - 1)}>
<l12, l3, true>
<l13, l14, true>
<l14, l15, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:
15, 
Accepting locations:

Asserts:

+                                                                  +
+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++


Function Return and Parameters Information [2 functions]:
    function name: __VERIFIER_nondet_int [1 return + 0 parameters]        demangled: __VERIFIER_nondet_int
        __VERIFIER_nondet_int__func_return_      [function result] : int
    function name: main [1 return + 0 parameters]        demangled: main
        main__func_return_      [function result] : int


AST Ident Scanner Information [5 idents]:
__VERIFIER_nondet_int | function | [integer, ()] | <line: 11, col: 1> | <line: 15, col: 6> <line: 16, col: 6>
main | function | [integer, ()] | <line: 13, col: 1>
x | local variable | integer | <line: 14, col: 5> | <line: 17, col: 2> <line: 18, col: 6> <line: 19, col: 10> <line: 21, col: 12> <line: 22, col: 16> <line: 26, col: 4> <line: 26, col: 8>
y | local variable | integer | <line: 14, col: 5> | <line: 16, col: 2> <line: 20, col: 4> <line: 21, col: 8> <line: 22, col: 12> <line: 23, col: 6> <line: 23, col: 12>
n | local variable | integer | <line: 14, col: 5> | <line: 15, col: 2> <line: 17, col: 6>

Main function: main
Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l3, (main_x = undef3) /\ (main_y = undef4) /\ (undef3 >= 0)>
<l0, l15, (main_x = undef3) /\ (main_y = undef4) /\ not((undef3 >= 0))>
<l3, l7, (main_x >= 0) /\ (1 < main_x), par{main_y -> 1}>
<l3, l3, (main_x >= 0) /\ not((1 < main_x)), par{main_x -> (main_x - 1), main_y -> 1}>
<l3, l15, not((main_x >= 0))>
<l7, l7, (main_y < main_x), par{main_y -> (2 * main_y)}>
<l7, l3, not((main_y < main_x)), par{main_x -> (main_x - 1)}>

Fresh variables:
undef3, undef4, 

Undef variables:
undef3, undef4, 

Abstraction variables:

Exit nodes:
15, 
Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l3, l7, 2 <= main_x, {main_y -> 1, rest remain the same}>
<l3, l3, 0 <= main_x /\ main_x <= 1, {main_x -> -1 + main_x, main_y -> 1, rest remain the same}>
<l7, l7, 1 + main_y <= main_x, {main_y -> 2*main_y, rest remain the same}>
<l7, l3, main_x <= main_y, {main_x -> -1 + main_x, rest remain the same}>
Variables:
main_x, main_y

Graph 2:
Transitions:
Variables:

Precedence: 
Graph 0

Graph 1
<l0, l3, 0 <= undef3 /\ main_x = undef3 /\ main_y = undef4, {all remain the same}>

Graph 2
<l0, l15, 1 + undef3 <= 0 /\ main_x = undef3 /\ main_y = undef4, {all remain the same}>
<l3, l15, 1 + main_x <= 0, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 3 , 1 )
( 7 , 1 )
( 15 , 2 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.015636

Checking conditional termination of SCC {l3, l7}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000876s
[33mRanking function: [36mmain_x[0m
New Graphs: 
Transitions:
<l3, l7, 2 <= main_x, {main_y -> 1, rest remain the same}>
<l7, l7, 1 + main_y <= main_x, {main_y -> 2*main_y, rest remain the same}>
<l7, l3, main_x <= main_y, {main_x -> -1 + main_x, rest remain the same}>
Variables:
main_x, main_y
Checking conditional termination of SCC {l3, l7}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000419s

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.002332s
[25660 : 25662]
[25660 : 25663]
Successful child: 25662
[ Invariant Graph ]
[33mStrengthening and disabling transitions...[0m

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l7, l7, 1 <= main_x /\ 1 + main_y <= main_x, {main_y -> 2*main_y, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l7, l3, main_x <= main_y /\ 1 <= main_x, {main_x -> -1 + main_x, rest remain the same}>
[ Termination Graph ]
[33mStrengthening and disabling transitions...[0m

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l7, l7, 1 <= main_x /\ 1 + main_y <= main_x, {main_y -> 2*main_y, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l7, l3, main_x <= main_y /\ 1 <= main_x, {main_x -> -1 + main_x, rest remain the same}>
[33mRanking function: [36mmain_x[0m
New Graphs: 
Transitions:
<l7, l7, 1 <= main_x /\ 1 + main_y <= main_x, {main_y -> 2*main_y, rest remain the same}>
Variables:
main_x, main_y
Checking conditional termination of SCC {l7}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000272s

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000859s
[25660 : 25667]
[25660 : 25668]
Successful child: 25667
[ Invariant Graph ]
[33mStrengthening and disabling transitions...[0m

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l3, l7, 2 <= main_x, {main_y -> 1, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l3, l3, 0 <= main_x /\ main_x <= 1, {main_x -> -1 + main_x, main_y -> 1, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l7, l7, 1 <= main_x /\ 1 + main_y <= main_x /\ 1 <= main_y, {main_y -> 2*main_y, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l7, l3, main_x <= main_y /\ 1 <= main_x /\ 1 <= main_y, {main_x -> -1 + main_x, rest remain the same}>
[ Termination Graph ]
[33mStrengthening and disabling transitions...[0m

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l7, l7, 1 <= main_x /\ 1 + main_y <= main_x /\ 1 <= main_y, {main_y -> 2*main_y, rest remain the same}>
[33mRanking function: [36mmain_x - main_y[0m
New Graphs: 
INVARIANTS: 
7: 1 <= main_x , 
Quasi-INVARIANTS to narrow Graph: 
7: 
INVARIANTS: 
3: 0 <= 1 + main_x , 
7: 1 <= main_y , 
Quasi-INVARIANTS to narrow Graph: 
3: 
7: 
Proving termination of subgraph 2
Analyzing SCC {l15}...
No cycles found.

[32mProgram Terminates[0m
