NO

Initial ITS

Start location: [1]
Program variables: res x y z
   0: [1] -> [2] : x'=nondet, T, cost: 1
   1: [2] -> [3] : y'=nondet1, T, cost: 1
   2: [3] -> [4] : z'=y, T, cost: 1
   3: [4] -> [5] : res'=0, T, cost: 1
   4: [5] -> [6] : (z > 0 /\ (y == 0 \/ (y > 0 /\ x > 0))), cost: 1
  14: [5] -> [14] : (z <= 0 \/ ((y <= 0 \/ x <= 0) /\ (y < 0 \/ y > 0))), cost: 1
   5: [6] -> [8] : y == 0, cost: 1
   9: [6] -> [11] : (y < 0 \/ y > 0), cost: 1
  13: [7] -> [5] : T, cost: 1
   6: [8] -> [9] : res'=1+res, T, cost: 1
   7: [9] -> [10] : y'=z, T, cost: 1
   8: [10] -> [7] : T, cost: 1
  10: [11] -> [12] : x'=1+x, T, cost: 1
  11: [12] -> [13] : y'=-1+y, T, cost: 1
  12: [13] -> [7] : T, cost: 1

Chained Linear Paths

Start location: [1]
Program variables: res x y z
  17: [1] -> [5] : res'=0, x'=nondet, y'=nondet1, z'=nondet1, T, cost: 1
   4: [5] -> [6] : (z > 0 /\ (y == 0 \/ (y > 0 /\ x > 0))), cost: 1
  14: [5] -> [14] : (z <= 0 \/ ((y <= 0 \/ x <= 0) /\ (y < 0 \/ y > 0))), cost: 1
  22: [6] -> [7] : res'=1+res, y'=z, y == 0, cost: 1
  23: [6] -> [7] : x'=1+x, y'=-1+y, (y < 0 \/ y > 0), cost: 1
  13: [7] -> [5] : T, cost: 1

	Eliminating location [2] by chaining:

	Applied chaining

	First rule:
	[1] -> [2] : x'=nondet, T, cost: 1
	Second rule:
	[2] -> [3] : y'=nondet1, T, cost: 1
	New rule:
	[1] -> [3] : x'=nondet, y'=nondet1, T, cost: 1
	
	Applied deletion

	Removed the following rules: 0 1
	
	Eliminating location [3] by chaining:

	Applied chaining

	First rule:
	[1] -> [3] : x'=nondet, y'=nondet1, T, cost: 1
	Second rule:
	[3] -> [4] : z'=y, T, cost: 1
	New rule:
	[1] -> [4] : x'=nondet, y'=nondet1, z'=nondet1, T, cost: 1
	
	Applied deletion

	Removed the following rules: 2 15
	
	Eliminating location [4] by chaining:

	Applied chaining

	First rule:
	[1] -> [4] : x'=nondet, y'=nondet1, z'=nondet1, T, cost: 1
	Second rule:
	[4] -> [5] : res'=0, T, cost: 1
	New rule:
	[1] -> [5] : res'=0, x'=nondet, y'=nondet1, z'=nondet1, T, cost: 1
	
	Applied deletion

	Removed the following rules: 3 16
	
	Eliminating location [8] by chaining:

	Applied chaining

	First rule:
	[6] -> [8] : y == 0, cost: 1
	Second rule:
	[8] -> [9] : res'=1+res, T, cost: 1
	New rule:
	[6] -> [9] : res'=1+res, y == 0, cost: 1
	
	Applied deletion

	Removed the following rules: 5 6
	
	Eliminating location [11] by chaining:

	Applied chaining

	First rule:
	[6] -> [11] : (y < 0 \/ y > 0), cost: 1
	Second rule:
	[11] -> [12] : x'=1+x, T, cost: 1
	New rule:
	[6] -> [12] : x'=1+x, (y < 0 \/ y > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 9 10
	
	Eliminating location [9] by chaining:

	Applied chaining

	First rule:
	[6] -> [9] : res'=1+res, y == 0, cost: 1
	Second rule:
	[9] -> [10] : y'=z, T, cost: 1
	New rule:
	[6] -> [10] : res'=1+res, y'=z, y == 0, cost: 1
	
	Applied deletion

	Removed the following rules: 7 18
	
	Eliminating location [12] by chaining:

	Applied chaining

	First rule:
	[6] -> [12] : x'=1+x, (y < 0 \/ y > 0), cost: 1
	Second rule:
	[12] -> [13] : y'=-1+y, T, cost: 1
	New rule:
	[6] -> [13] : x'=1+x, y'=-1+y, (y < 0 \/ y > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 11 19
	
	Eliminating location [10] by chaining:

	Applied chaining

	First rule:
	[6] -> [10] : res'=1+res, y'=z, y == 0, cost: 1
	Second rule:
	[10] -> [7] : T, cost: 1
	New rule:
	[6] -> [7] : res'=1+res, y'=z, y == 0, cost: 1
	
	Applied deletion

	Removed the following rules: 8 20
	
	Eliminating location [13] by chaining:

	Applied chaining

	First rule:
	[6] -> [13] : x'=1+x, y'=-1+y, (y < 0 \/ y > 0), cost: 1
	Second rule:
	[13] -> [7] : T, cost: 1
	New rule:
	[6] -> [7] : x'=1+x, y'=-1+y, (y < 0 \/ y > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 12 21

Step with 17

	Trace

	17[T]
	
	Blocked

	[{}, {}]

Step with 14

	Trace

	17[T], 14[(z <= 0)]
	
	Blocked

	[{}, {}, {}]

Backtrack

	Trace

	17[T]
	
	Blocked

	[{}, {14[z <= 0]}]

Step with 14

	Trace

	17[T], 14[(y > 0 /\ x <= 0)]
	
	Blocked

	[{}, {14[z <= 0]}, {}]

Backtrack

	Trace

	17[T]
	
	Blocked

	[{}, {14[(z <= 0 /\ y > 0 /\ x <= 0)]}]

Step with 4

	Trace

	17[T], 4[(z > 0 /\ y > 0 /\ x > 0)]
	
	Blocked

	[{}, {14[T]}, {}]

Step with 23

	Trace

	17[T], 4[(z > 0 /\ y > 0 /\ x > 0)], 23[(y > 0)]
	
	Blocked

	[{}, {14[T]}, {22[T]}, {}]

Step with 13

	Trace

	17[T], 4[(z > 0 /\ y > 0 /\ x > 0)], 23[(y > 0)], 13[T]
	
	Blocked

	[{}, {14[T]}, {22[T]}, {}, {}]

Accelerate

Start location: [1]
Program variables: res x y z
  17: [1] -> [5] : res'=0, x'=nondet, y'=nondet1, z'=nondet1, T, cost: 1
   4: [5] -> [6] : (z > 0 /\ (y == 0 \/ (y > 0 /\ x > 0))), cost: 1
  14: [5] -> [14] : (z <= 0 \/ ((y <= 0 \/ x <= 0) /\ (y < 0 \/ y > 0))), cost: 1
  24: [5] -> [5] : x'=n+x, y'=-n+y, (-1+n >= 0 /\ z > 0 /\ 1-n+y > 0 /\ x > 0), cost: 1
  22: [6] -> [7] : res'=1+res, y'=z, y == 0, cost: 1
  23: [6] -> [7] : x'=1+x, y'=-1+y, (y < 0 \/ y > 0), cost: 1
  13: [7] -> [5] : T, cost: 1

	Loop Acceleration

	Original rule:
	[5] -> [5] : x'=1+x, y'=-1+y, (z > 0 /\ y > 0 /\ x > 0), cost: 1
	New rule:
	[5] -> [5] : x'=n+x, y'=-n+y, (-1+n >= 0 /\ z > 0 /\ 1-n+y > 0 /\ x > 0), cost: 1

		z > 0 [0]: monotonic increase yields z > 0
		
		y > 0 [0]: montonic decrease yields 1-n+y > 0
		
		y > 0 [1]: eventual increase yields (1 <= 0 /\ y > 0)
		
		x > 0 [0]: monotonic increase yields x > 0
		
		Replacement map: {z > 0 -> z > 0, y > 0 -> 1-n+y > 0, x > 0 -> x > 0}

	Trace

	17[T], 24[(-1+n >= 0 /\ z > 0 /\ 1-n+y > 0 /\ x > 0)]
	
	Blocked

	[{}, {14[T]}, {24[T]}]

Step with 4

	Trace

	17[T], 24[(-1+n >= 0 /\ z > 0 /\ 1-n+y > 0 /\ x > 0)], 4[(z > 0 /\ y > 0 /\ x > 0)]
	
	Blocked

	[{}, {14[T]}, {14[T], 24[T]}, {}]

Step with 23

	Trace

	17[T], 24[(-1+n >= 0 /\ z > 0 /\ 1-n+y > 0 /\ x > 0)], 4[(z > 0 /\ y > 0 /\ x > 0)], 23[(y > 0)]
	
	Blocked

	[{}, {14[T]}, {14[T], 24[T]}, {}, {}]

Step with 13

	Trace

	17[T], 24[(-1+n >= 0 /\ z > 0 /\ 1-n+y > 0 /\ x > 0)], 4[(z > 0 /\ y > 0 /\ x > 0)], 23[(y > 0)], 13[T]
	
	Blocked

	[{}, {14[T]}, {14[T], 24[T]}, {}, {}, {}]

Covered

	Trace

	17[T], 24[(-1+n >= 0 /\ z > 0 /\ 1-n+y > 0 /\ x > 0)], 4[(z > 0 /\ y > 0 /\ x > 0)], 23[(y > 0)]
	
	Blocked

	[{}, {14[T]}, {14[T], 24[T]}, {}, {13[T]}]

Backtrack

	Trace

	17[T], 24[(-1+n >= 0 /\ z > 0 /\ 1-n+y > 0 /\ x > 0)], 4[(z > 0 /\ y > 0 /\ x > 0)]
	
	Blocked

	[{}, {14[T]}, {14[T], 24[T]}, {23[y > 0]}]

Backtrack

	Trace

	17[T], 24[(-1+n >= 0 /\ z > 0 /\ 1-n+y > 0 /\ x > 0)]
	
	Blocked

	[{}, {14[T]}, {4[(z > 0 /\ y > 0 /\ x > 0)], 14[T], 24[T]}]

Step with 4

	Trace

	17[T], 24[(-1+n >= 0 /\ z > 0 /\ 1-n+y > 0 /\ x > 0)], 4[(z > 0 /\ y == 0)]
	
	Blocked

	[{}, {14[T]}, {4[(z > 0 /\ y > 0 /\ x > 0)], 14[T], 24[T]}, {}]

Step with 22

	Trace

	17[T], 24[(-1+n >= 0 /\ z > 0 /\ 1-n+y > 0 /\ x > 0)], 4[(z > 0 /\ y == 0)], 22[(y == 0)]
	
	Blocked

	[{}, {14[T]}, {4[(z > 0 /\ y > 0 /\ x > 0)], 14[T], 24[T]}, {23[T]}, {}]

Step with 13

	Trace

	17[T], 24[(-1+n >= 0 /\ z > 0 /\ 1-n+y > 0 /\ x > 0)], 4[(z > 0 /\ y == 0)], 22[(y == 0)], 13[T]
	
	Blocked

	[{}, {14[T]}, {4[(z > 0 /\ y > 0 /\ x > 0)], 14[T], 24[T]}, {23[T]}, {}, {}]

Acceleration Failed

marked recursive suffix as redundant

Nonterm

Start location: [1]
Program variables: res x y z
  17: [1] -> [5] : res'=0, x'=nondet, y'=nondet1, z'=nondet1, T, cost: 1
   4: [5] -> [6] : (z > 0 /\ (y == 0 \/ (y > 0 /\ x > 0))), cost: 1
  14: [5] -> [14] : (z <= 0 \/ ((y <= 0 \/ x <= 0) /\ (y < 0 \/ y > 0))), cost: 1
  24: [5] -> [5] : x'=n+x, y'=-n+y, (-1+n >= 0 /\ z > 0 /\ 1-n+y > 0 /\ x > 0), cost: 1
  25: [5] -> LoAT_sink : (z > 0 /\ -1+n2 >= 0 /\ -1+y >= 0 /\ x > 0), cost: NONTERM
  26: [5] -> [5] : res'=res+n2, x'=z*n2+x, y'=z, (z > 0 /\ -1+n2 >= 0 /\ -1+y >= 0 /\ x > 0), cost: 1
  22: [6] -> [7] : res'=1+res, y'=z, y == 0, cost: 1
  23: [6] -> [7] : x'=1+x, y'=-1+y, (y < 0 \/ y > 0), cost: 1
  13: [7] -> [5] : T, cost: 1

	Certificate of Non-Termination

	Original rule:
	[5] -> [5] : res'=1+res, x'=y+x, y'=z, (z > 0 /\ -1+y >= 0 /\ x > 0), cost: 1
	New rule:
	[5] -> LoAT_sink : (z > 0 /\ -1+n2 >= 0 /\ -1+y >= 0 /\ x > 0), cost: NONTERM

		z > 0 [0]: monotonic increase yields z > 0
		
		-1+y >= 0 [0]: monotonic increase yields -1+y >= 0, dependencies: z > 0
		
		x > 0 [0]: monotonic increase yields x > 0, dependencies: -1+y >= 0
		
		Replacement map: {z > 0 -> z > 0, -1+y >= 0 -> -1+y >= 0, x > 0 -> x > 0}

	Loop Acceleration

	Original rule:
	[5] -> [5] : res'=1+res, x'=y+x, y'=z, (z > 0 /\ -1+y >= 0 /\ x > 0), cost: 1
	New rule:
	[5] -> [5] : res'=res+n2, x'=z*n2+x, y'=z, (z > 0 /\ -1+n2 >= 0 /\ -1+y >= 0 /\ x > 0), cost: 1

		z > 0 [0]: monotonic increase yields z > 0
		
		-1+y >= 0 [0]: monotonic increase yields -1+y >= 0, dependencies: z > 0
		
		x > 0 [0]: monotonic increase yields x > 0, dependencies: -1+y >= 0
		
		Replacement map: {z > 0 -> z > 0, -1+y >= 0 -> -1+y >= 0, x > 0 -> x > 0}

Step with 25

	Trace

	17[T], 25[(z > 0 /\ -1+n2 >= 0 /\ -1+y >= 0 /\ x > 0)]
	
	Blocked

	[{}, {14[T]}, {25[T]}]

Refute

	Counterexample

	[ res=0 x=1 y=1 z=1 ] 17 [ res=res x=x y=y z=z ] 25
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
