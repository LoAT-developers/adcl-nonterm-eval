WORST_CASE(Omega(0),?)

Initial ITS
Start location: __init
   0: f297_0_createIntList_Return -> f508_0_random_ArrayAccess : arg2'=arg2P0, arg1'=arg1P0, (1+arg1 > 0 /\ 1+arg1P0 > 0 /\ arg1P0-arg1 <= 0), cost: 1
   2: f508_0_random_ArrayAccess -> f698_0_nth_LE : arg2'=arg2P2, arg1'=arg1P2, (arg1 > 0 /\ arg1P2 > 0 /\ 1+arg2P2 > 0 /\ -arg1+arg1P2 <= 0 /\ x70 > 0), cost: 1
   1: f1_0_main_Load -> f508_0_random_ArrayAccess : arg2'=arg2P1, arg1'=arg1P1, (arg1 > 0 /\ 1+arg1P1 > 0), cost: 1
   6: f1_0_main_Load -> f658_0_createIntList_LE : arg2'=arg2P6, arg1'=arg1P6, (1+arg1P6 > 0 /\ 1+arg2 > 0 /\ 1-arg2P6 == 0 /\ arg1 > 0), cost: 1
   3: f698_0_nth_LE -> f746_0_main_LE : arg2'=arg2P3, arg1'=arg1P3, (2+arg1P3-arg1 <= 0 /\ -2+arg2 < 0 /\ arg1 > 0), cost: 1
   4: f698_0_nth_LE -> f698_0_nth_LE : arg2'=arg2P4, arg1'=arg1P4, (1-arg1+arg1P4 <= 0 /\ 1+arg1P4 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ -1+arg2-arg2P4 == 0), cost: 1
   5: f746_0_main_LE -> f746_0_main_LE : arg2'=arg2P5, arg1'=arg1P5, (arg1 > 0 /\ -1-arg1P5+arg1 == 0), cost: 1
   7: f658_0_createIntList_LE -> f658_0_createIntList_LE : arg2'=arg2P7, arg1'=arg1P7, (-1+arg1-arg1P7 == 0 /\ arg2 > 0 /\ arg1 > 0 /\ 1+arg2-arg2P7 == 0), cost: 1
   8: __init -> f1_0_main_Load : arg2'=arg2P8, arg1'=arg1P8, TRUE, cost: 1


Removed unreachable rules and leafs
Start location: __init
   2: f508_0_random_ArrayAccess -> f698_0_nth_LE : arg2'=arg2P2, arg1'=arg1P2, (arg1 > 0 /\ arg1P2 > 0 /\ 1+arg2P2 > 0 /\ -arg1+arg1P2 <= 0 /\ x70 > 0), cost: 1
   1: f1_0_main_Load -> f508_0_random_ArrayAccess : arg2'=arg2P1, arg1'=arg1P1, (arg1 > 0 /\ 1+arg1P1 > 0), cost: 1
   6: f1_0_main_Load -> f658_0_createIntList_LE : arg2'=arg2P6, arg1'=arg1P6, (1+arg1P6 > 0 /\ 1+arg2 > 0 /\ 1-arg2P6 == 0 /\ arg1 > 0), cost: 1
   3: f698_0_nth_LE -> f746_0_main_LE : arg2'=arg2P3, arg1'=arg1P3, (2+arg1P3-arg1 <= 0 /\ -2+arg2 < 0 /\ arg1 > 0), cost: 1
   4: f698_0_nth_LE -> f698_0_nth_LE : arg2'=arg2P4, arg1'=arg1P4, (1-arg1+arg1P4 <= 0 /\ 1+arg1P4 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ -1+arg2-arg2P4 == 0), cost: 1
   5: f746_0_main_LE -> f746_0_main_LE : arg2'=arg2P5, arg1'=arg1P5, (arg1 > 0 /\ -1-arg1P5+arg1 == 0), cost: 1
   7: f658_0_createIntList_LE -> f658_0_createIntList_LE : arg2'=arg2P7, arg1'=arg1P7, (-1+arg1-arg1P7 == 0 /\ arg2 > 0 /\ arg1 > 0 /\ 1+arg2-arg2P7 == 0), cost: 1
   8: __init -> f1_0_main_Load : arg2'=arg2P8, arg1'=arg1P8, TRUE, cost: 1


Applied preprocessing
Original rule:
f508_0_random_ArrayAccess -> f698_0_nth_LE : arg2'=arg2P2, arg1'=arg1P2, (arg1 > 0 /\ arg1P2 > 0 /\ 1+arg2P2 > 0 /\ -arg1+arg1P2 <= 0 /\ x70 > 0), cost: 1
New rule:
f508_0_random_ArrayAccess -> f698_0_nth_LE : arg2'=arg2P2, arg1'=arg1P2, (arg1P2 > 0 /\ 1+arg2P2 > 0 /\ -arg1+arg1P2 <= 0), cost: 1

Applied preprocessing
Original rule:
f698_0_nth_LE -> f746_0_main_LE : arg2'=arg2P3, arg1'=arg1P3, (2+arg1P3-arg1 <= 0 /\ -2+arg2 < 0 /\ arg1 > 0), cost: 1
New rule:
f698_0_nth_LE -> f746_0_main_LE : arg2'=arg2P3, arg1'=arg1P3, (2+arg1P3-arg1 <= 0 /\ arg1 > 0 /\ 2-arg2 > 0), cost: 1

Applied preprocessing
Original rule:
f698_0_nth_LE -> f698_0_nth_LE : arg2'=arg2P4, arg1'=arg1P4, (1-arg1+arg1P4 <= 0 /\ 1+arg1P4 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ -1+arg2-arg2P4 == 0), cost: 1
New rule:
f698_0_nth_LE -> f698_0_nth_LE : arg2'=-1+arg2, arg1'=arg1P4, (1-arg1+arg1P4 <= 0 /\ 1+arg1P4 > 0 /\ -1+arg2 > 0), cost: 1

Applied preprocessing
Original rule:
f746_0_main_LE -> f746_0_main_LE : arg2'=arg2P5, arg1'=arg1P5, (arg1 > 0 /\ -1-arg1P5+arg1 == 0), cost: 1
New rule:
f746_0_main_LE -> f746_0_main_LE : arg2'=arg2P5, arg1'=-1+arg1, arg1 > 0, cost: 1

Applied preprocessing
Original rule:
f1_0_main_Load -> f658_0_createIntList_LE : arg2'=arg2P6, arg1'=arg1P6, (1+arg1P6 > 0 /\ 1+arg2 > 0 /\ 1-arg2P6 == 0 /\ arg1 > 0), cost: 1
New rule:
f1_0_main_Load -> f658_0_createIntList_LE : arg2'=1, arg1'=arg1P6, (1+arg1P6 > 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f658_0_createIntList_LE -> f658_0_createIntList_LE : arg2'=arg2P7, arg1'=arg1P7, (-1+arg1-arg1P7 == 0 /\ arg2 > 0 /\ arg1 > 0 /\ 1+arg2-arg2P7 == 0), cost: 1
New rule:
f658_0_createIntList_LE -> f658_0_createIntList_LE : arg2'=1+arg2, arg1'=-1+arg1, (arg2 > 0 /\ arg1 > 0), cost: 1

Simplified rules
Start location: __init
   9: f508_0_random_ArrayAccess -> f698_0_nth_LE : arg2'=arg2P2, arg1'=arg1P2, (arg1P2 > 0 /\ 1+arg2P2 > 0 /\ -arg1+arg1P2 <= 0), cost: 1
   1: f1_0_main_Load -> f508_0_random_ArrayAccess : arg2'=arg2P1, arg1'=arg1P1, (arg1 > 0 /\ 1+arg1P1 > 0), cost: 1
  13: f1_0_main_Load -> f658_0_createIntList_LE : arg2'=1, arg1'=arg1P6, (1+arg1P6 > 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 1
  10: f698_0_nth_LE -> f746_0_main_LE : arg2'=arg2P3, arg1'=arg1P3, (2+arg1P3-arg1 <= 0 /\ arg1 > 0 /\ 2-arg2 > 0), cost: 1
  11: f698_0_nth_LE -> f698_0_nth_LE : arg2'=-1+arg2, arg1'=arg1P4, (1-arg1+arg1P4 <= 0 /\ 1+arg1P4 > 0 /\ -1+arg2 > 0), cost: 1
  12: f746_0_main_LE -> f746_0_main_LE : arg2'=arg2P5, arg1'=-1+arg1, arg1 > 0, cost: 1
  14: f658_0_createIntList_LE -> f658_0_createIntList_LE : arg2'=1+arg2, arg1'=-1+arg1, (arg2 > 0 /\ arg1 > 0), cost: 1
   8: __init -> f1_0_main_Load : arg2'=arg2P8, arg1'=arg1P8, TRUE, cost: 1


Applied acceleration
Original rule:
f746_0_main_LE -> f746_0_main_LE : arg2'=arg2P5, arg1'=-1+arg1, arg1 > 0, cost: 1
New rule:
f746_0_main_LE -> f746_0_main_LE : arg2'=arg2P5, arg1'=arg1-n0, (-1+n0 >= 0 /\ 1+arg1-n0 > 0), cost: n0
Sub-proof via acceration calculus written to file:///tmp/tmpnam_LJOnmG.txt

Applied instantiation
Original rule:
f746_0_main_LE -> f746_0_main_LE : arg2'=arg2P5, arg1'=arg1-n0, (-1+n0 >= 0 /\ 1+arg1-n0 > 0), cost: n0
New rule:
f746_0_main_LE -> f746_0_main_LE : arg2'=arg2P5, arg1'=0, (1 > 0 /\ -1+arg1 >= 0), cost: arg1

Applied simplification
Original rule:
f746_0_main_LE -> f746_0_main_LE : arg2'=arg2P5, arg1'=0, (1 > 0 /\ -1+arg1 >= 0), cost: arg1
New rule:
f746_0_main_LE -> f746_0_main_LE : arg2'=arg2P5, arg1'=0, -1+arg1 >= 0, cost: arg1

Applied deletion
Removed the following rules: 12

Applied acceleration
Original rule:
f658_0_createIntList_LE -> f658_0_createIntList_LE : arg2'=1+arg2, arg1'=-1+arg1, (arg2 > 0 /\ arg1 > 0), cost: 1
New rule:
f658_0_createIntList_LE -> f658_0_createIntList_LE : arg2'=arg2+n1, arg1'=-n1+arg1, (arg2 > 0 /\ n1 >= 0 /\ 1-n1+arg1 > 0), cost: n1
Sub-proof via acceration calculus written to file:///tmp/tmpnam_gLocMB.txt

Applied instantiation
Original rule:
f658_0_createIntList_LE -> f658_0_createIntList_LE : arg2'=arg2+n1, arg1'=-n1+arg1, (arg2 > 0 /\ n1 >= 0 /\ 1-n1+arg1 > 0), cost: n1
New rule:
f658_0_createIntList_LE -> f658_0_createIntList_LE : arg2'=arg2+arg1, arg1'=0, (1 > 0 /\ arg2 > 0 /\ arg1 >= 0), cost: arg1

Applied simplification
Original rule:
f658_0_createIntList_LE -> f658_0_createIntList_LE : arg2'=arg2+arg1, arg1'=0, (1 > 0 /\ arg2 > 0 /\ arg1 >= 0), cost: arg1
New rule:
f658_0_createIntList_LE -> f658_0_createIntList_LE : arg2'=arg2+arg1, arg1'=0, (arg2 > 0 /\ arg1 >= 0), cost: arg1

Applied deletion
Removed the following rules: 14

Accelerated simple loops
Start location: __init
   9: f508_0_random_ArrayAccess -> f698_0_nth_LE : arg2'=arg2P2, arg1'=arg1P2, (arg1P2 > 0 /\ 1+arg2P2 > 0 /\ -arg1+arg1P2 <= 0), cost: 1
   1: f1_0_main_Load -> f508_0_random_ArrayAccess : arg2'=arg2P1, arg1'=arg1P1, (arg1 > 0 /\ 1+arg1P1 > 0), cost: 1
  13: f1_0_main_Load -> f658_0_createIntList_LE : arg2'=1, arg1'=arg1P6, (1+arg1P6 > 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 1
  10: f698_0_nth_LE -> f746_0_main_LE : arg2'=arg2P3, arg1'=arg1P3, (2+arg1P3-arg1 <= 0 /\ arg1 > 0 /\ 2-arg2 > 0), cost: 1
  11: f698_0_nth_LE -> f698_0_nth_LE : arg2'=-1+arg2, arg1'=arg1P4, (1-arg1+arg1P4 <= 0 /\ 1+arg1P4 > 0 /\ -1+arg2 > 0), cost: 1
  16: f746_0_main_LE -> f746_0_main_LE : arg2'=arg2P5, arg1'=0, -1+arg1 >= 0, cost: arg1
  18: f658_0_createIntList_LE -> f658_0_createIntList_LE : arg2'=arg2+arg1, arg1'=0, (arg2 > 0 /\ arg1 >= 0), cost: arg1
   8: __init -> f1_0_main_Load : arg2'=arg2P8, arg1'=arg1P8, TRUE, cost: 1


Applied chaining
First rule:
f508_0_random_ArrayAccess -> f698_0_nth_LE : arg2'=arg2P2, arg1'=arg1P2, (arg1P2 > 0 /\ 1+arg2P2 > 0 /\ -arg1+arg1P2 <= 0), cost: 1
Second rule:
f698_0_nth_LE -> f698_0_nth_LE : arg2'=-1+arg2, arg1'=arg1P4, (1-arg1+arg1P4 <= 0 /\ 1+arg1P4 > 0 /\ -1+arg2 > 0), cost: 1
New rule:
f508_0_random_ArrayAccess -> f698_0_nth_LE : arg2'=-1+arg2P2, arg1'=arg1P4, (1-arg1+arg1P4 <= 0 /\ -1+arg2P2 > 0 /\ 1+arg1P4 > 0), cost: 2

Applied deletion
Removed the following rules: 11

Applied chaining
First rule:
f698_0_nth_LE -> f746_0_main_LE : arg2'=arg2P3, arg1'=arg1P3, (2+arg1P3-arg1 <= 0 /\ arg1 > 0 /\ 2-arg2 > 0), cost: 1
Second rule:
f746_0_main_LE -> f746_0_main_LE : arg2'=arg2P5, arg1'=0, -1+arg1 >= 0, cost: arg1
New rule:
f698_0_nth_LE -> f746_0_main_LE : arg2'=arg2P5, arg1'=0, (2+arg1P3-arg1 <= 0 /\ -1+arg1P3 >= 0 /\ 2-arg2 > 0), cost: 1+arg1P3

Applied deletion
Removed the following rules: 16

Applied chaining
First rule:
f1_0_main_Load -> f658_0_createIntList_LE : arg2'=1, arg1'=arg1P6, (1+arg1P6 > 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 1
Second rule:
f658_0_createIntList_LE -> f658_0_createIntList_LE : arg2'=arg2+arg1, arg1'=0, (arg2 > 0 /\ arg1 >= 0), cost: arg1
New rule:
f1_0_main_Load -> f658_0_createIntList_LE : arg2'=1+arg1P6, arg1'=0, (arg1P6 >= 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 1+arg1P6

Applied deletion
Removed the following rules: 18

Chained accelerated rules with incoming rules
Start location: __init
   9: f508_0_random_ArrayAccess -> f698_0_nth_LE : arg2'=arg2P2, arg1'=arg1P2, (arg1P2 > 0 /\ 1+arg2P2 > 0 /\ -arg1+arg1P2 <= 0), cost: 1
  19: f508_0_random_ArrayAccess -> f698_0_nth_LE : arg2'=-1+arg2P2, arg1'=arg1P4, (1-arg1+arg1P4 <= 0 /\ -1+arg2P2 > 0 /\ 1+arg1P4 > 0), cost: 2
   1: f1_0_main_Load -> f508_0_random_ArrayAccess : arg2'=arg2P1, arg1'=arg1P1, (arg1 > 0 /\ 1+arg1P1 > 0), cost: 1
  13: f1_0_main_Load -> f658_0_createIntList_LE : arg2'=1, arg1'=arg1P6, (1+arg1P6 > 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 1
  21: f1_0_main_Load -> f658_0_createIntList_LE : arg2'=1+arg1P6, arg1'=0, (arg1P6 >= 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 1+arg1P6
  10: f698_0_nth_LE -> f746_0_main_LE : arg2'=arg2P3, arg1'=arg1P3, (2+arg1P3-arg1 <= 0 /\ arg1 > 0 /\ 2-arg2 > 0), cost: 1
  20: f698_0_nth_LE -> f746_0_main_LE : arg2'=arg2P5, arg1'=0, (2+arg1P3-arg1 <= 0 /\ -1+arg1P3 >= 0 /\ 2-arg2 > 0), cost: 1+arg1P3
   8: __init -> f1_0_main_Load : arg2'=arg2P8, arg1'=arg1P8, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
  <empty>


Computing asymptotic complexity

Proved the following lower bound
Complexity:  Unknown
Cpx degree: ?

Solved cost: 0
Rule cost:   0

