NO

Initial ITS
Start location: __init
   0: f1_0_main_ConstantStackPush -> f79_0_loop_GE : arg2'=arg2P0, arg4'=arg4P0, arg1'=arg1P0, arg3'=arg3P0, (2-arg3P0 == 0 /\ 2-arg1P0 == 0 /\ -arg4P0 == 0 /\ 2-arg2P0 == 0), cost: 1
   1: f79_0_loop_GE -> f100_0_loop_InvokeMethod : arg2'=arg2P1, arg4'=arg4P1, arg1'=arg1P1, arg3'=arg3P1, (arg1-arg1P1 == 0 /\ arg2 > 0 /\ 4+arg2-arg2P1 == 0 /\ -arg2+arg4 > 0 /\ arg2-arg3 == 0 /\ -arg3P1+arg4 == 0), cost: 1
   2: f79_0_loop_GE -> f100_0_loop_InvokeMethod : arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg3'=arg3P2, (arg2 > 0 /\ 2+arg2-arg2P2 == 0 /\ -arg1P2+arg1 == 0 /\ 1-arg3P2+arg4 == 0 /\ -arg2+arg4 <= 0 /\ arg2-arg3 == 0 /\ 1+arg4 > 0), cost: 1
   3: f100_0_loop_InvokeMethod -> f79_0_loop_GE : arg2'=arg2P3, arg4'=arg4P3, arg1'=arg1P3, arg3'=arg3P3, (arg2-arg3P3 == 0 /\ arg2-arg1P3 == 0 /\ arg2-arg2P3 == 0 /\ -1+arg2 > 0 /\ arg3 > 0 /\ -arg4P3+arg3 == 0 /\ -1+arg1 > 0), cost: 1
   4: __init -> f1_0_main_ConstantStackPush : arg2'=arg2P4, arg4'=arg4P4, arg1'=arg1P4, arg3'=arg3P4, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_ConstantStackPush -> f79_0_loop_GE : arg2'=arg2P0, arg4'=arg4P0, arg1'=arg1P0, arg3'=arg3P0, (2-arg3P0 == 0 /\ 2-arg1P0 == 0 /\ -arg4P0 == 0 /\ 2-arg2P0 == 0), cost: 1
New rule:
f1_0_main_ConstantStackPush -> f79_0_loop_GE : arg2'=2, arg4'=0, arg1'=2, arg3'=2, TRUE, cost: 1

Applied preprocessing
Original rule:
f79_0_loop_GE -> f100_0_loop_InvokeMethod : arg2'=arg2P1, arg4'=arg4P1, arg1'=arg1P1, arg3'=arg3P1, (arg1-arg1P1 == 0 /\ arg2 > 0 /\ 4+arg2-arg2P1 == 0 /\ -arg2+arg4 > 0 /\ arg2-arg3 == 0 /\ -arg3P1+arg4 == 0), cost: 1
New rule:
f79_0_loop_GE -> f100_0_loop_InvokeMethod : arg2'=4+arg2, arg4'=arg4P1, arg3'=arg4, (arg2 > 0 /\ -arg2+arg4 > 0 /\ arg2-arg3 == 0), cost: 1

Applied preprocessing
Original rule:
f79_0_loop_GE -> f100_0_loop_InvokeMethod : arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg3'=arg3P2, (arg2 > 0 /\ 2+arg2-arg2P2 == 0 /\ -arg1P2+arg1 == 0 /\ 1-arg3P2+arg4 == 0 /\ -arg2+arg4 <= 0 /\ arg2-arg3 == 0 /\ 1+arg4 > 0), cost: 1
New rule:
f79_0_loop_GE -> f100_0_loop_InvokeMethod : arg2'=2+arg2, arg4'=arg4P2, arg3'=1+arg4, (arg2 > 0 /\ -arg2+arg4 <= 0 /\ arg2-arg3 == 0 /\ 1+arg4 > 0), cost: 1

Applied preprocessing
Original rule:
f100_0_loop_InvokeMethod -> f79_0_loop_GE : arg2'=arg2P3, arg4'=arg4P3, arg1'=arg1P3, arg3'=arg3P3, (arg2-arg3P3 == 0 /\ arg2-arg1P3 == 0 /\ arg2-arg2P3 == 0 /\ -1+arg2 > 0 /\ arg3 > 0 /\ -arg4P3+arg3 == 0 /\ -1+arg1 > 0), cost: 1
New rule:
f100_0_loop_InvokeMethod -> f79_0_loop_GE : arg4'=arg3, arg1'=arg2, arg3'=arg2, (-1+arg2 > 0 /\ arg3 > 0 /\ -1+arg1 > 0), cost: 1

Simplified rules
Start location: __init
   5: f1_0_main_ConstantStackPush -> f79_0_loop_GE : arg2'=2, arg4'=0, arg1'=2, arg3'=2, TRUE, cost: 1
   6: f79_0_loop_GE -> f100_0_loop_InvokeMethod : arg2'=4+arg2, arg4'=arg4P1, arg3'=arg4, (arg2 > 0 /\ -arg2+arg4 > 0 /\ arg2-arg3 == 0), cost: 1
   7: f79_0_loop_GE -> f100_0_loop_InvokeMethod : arg2'=2+arg2, arg4'=arg4P2, arg3'=1+arg4, (arg2 > 0 /\ -arg2+arg4 <= 0 /\ arg2-arg3 == 0 /\ 1+arg4 > 0), cost: 1
   8: f100_0_loop_InvokeMethod -> f79_0_loop_GE : arg4'=arg3, arg1'=arg2, arg3'=arg2, (-1+arg2 > 0 /\ arg3 > 0 /\ -1+arg1 > 0), cost: 1
   4: __init -> f1_0_main_ConstantStackPush : arg2'=arg2P4, arg4'=arg4P4, arg1'=arg1P4, arg3'=arg3P4, TRUE, cost: 1


Eliminating location f1_0_main_ConstantStackPush by chaining:

Applied chaining
First rule:
__init -> f1_0_main_ConstantStackPush : arg2'=arg2P4, arg4'=arg4P4, arg1'=arg1P4, arg3'=arg3P4, TRUE, cost: 1
Second rule:
f1_0_main_ConstantStackPush -> f79_0_loop_GE : arg2'=2, arg4'=0, arg1'=2, arg3'=2, TRUE, cost: 1
New rule:
__init -> f79_0_loop_GE : arg2'=2, arg4'=0, arg1'=2, arg3'=2, TRUE, cost: 2

Applied deletion
Removed the following rules: 4 5

Eliminated locations on linear paths
Start location: __init
   6: f79_0_loop_GE -> f100_0_loop_InvokeMethod : arg2'=4+arg2, arg4'=arg4P1, arg3'=arg4, (arg2 > 0 /\ -arg2+arg4 > 0 /\ arg2-arg3 == 0), cost: 1
   7: f79_0_loop_GE -> f100_0_loop_InvokeMethod : arg2'=2+arg2, arg4'=arg4P2, arg3'=1+arg4, (arg2 > 0 /\ -arg2+arg4 <= 0 /\ arg2-arg3 == 0 /\ 1+arg4 > 0), cost: 1
   8: f100_0_loop_InvokeMethod -> f79_0_loop_GE : arg4'=arg3, arg1'=arg2, arg3'=arg2, (-1+arg2 > 0 /\ arg3 > 0 /\ -1+arg1 > 0), cost: 1
   9: __init -> f79_0_loop_GE : arg2'=2, arg4'=0, arg1'=2, arg3'=2, TRUE, cost: 2


Eliminating location f100_0_loop_InvokeMethod by chaining:

Applied chaining
First rule:
f79_0_loop_GE -> f100_0_loop_InvokeMethod : arg2'=4+arg2, arg4'=arg4P1, arg3'=arg4, (arg2 > 0 /\ -arg2+arg4 > 0 /\ arg2-arg3 == 0), cost: 1
Second rule:
f100_0_loop_InvokeMethod -> f79_0_loop_GE : arg4'=arg3, arg1'=arg2, arg3'=arg2, (-1+arg2 > 0 /\ arg3 > 0 /\ -1+arg1 > 0), cost: 1
New rule:
f79_0_loop_GE -> f79_0_loop_GE : arg2'=4+arg2, arg4'=arg4, arg1'=4+arg2, arg3'=4+arg2, (arg2 > 0 /\ 3+arg2 > 0 /\ arg4 > 0 /\ -arg2+arg4 > 0 /\ arg2-arg3 == 0 /\ -1+arg1 > 0), cost: 2

Applied simplification
Original rule:
f79_0_loop_GE -> f79_0_loop_GE : arg2'=4+arg2, arg4'=arg4, arg1'=4+arg2, arg3'=4+arg2, (arg2 > 0 /\ 3+arg2 > 0 /\ arg4 > 0 /\ -arg2+arg4 > 0 /\ arg2-arg3 == 0 /\ -1+arg1 > 0), cost: 2
New rule:
f79_0_loop_GE -> f79_0_loop_GE : arg2'=4+arg2, arg4'=arg4, arg1'=4+arg2, arg3'=4+arg2, (arg2 > 0 /\ -arg2+arg4 > 0 /\ arg2-arg3 == 0 /\ -1+arg1 > 0), cost: 2

Applied chaining
First rule:
f79_0_loop_GE -> f100_0_loop_InvokeMethod : arg2'=2+arg2, arg4'=arg4P2, arg3'=1+arg4, (arg2 > 0 /\ -arg2+arg4 <= 0 /\ arg2-arg3 == 0 /\ 1+arg4 > 0), cost: 1
Second rule:
f100_0_loop_InvokeMethod -> f79_0_loop_GE : arg4'=arg3, arg1'=arg2, arg3'=arg2, (-1+arg2 > 0 /\ arg3 > 0 /\ -1+arg1 > 0), cost: 1
New rule:
f79_0_loop_GE -> f79_0_loop_GE : arg2'=2+arg2, arg4'=1+arg4, arg1'=2+arg2, arg3'=2+arg2, (arg2 > 0 /\ 1+arg2 > 0 /\ -arg2+arg4 <= 0 /\ arg2-arg3 == 0 /\ -1+arg1 > 0 /\ 1+arg4 > 0), cost: 2

Applied simplification
Original rule:
f79_0_loop_GE -> f79_0_loop_GE : arg2'=2+arg2, arg4'=1+arg4, arg1'=2+arg2, arg3'=2+arg2, (arg2 > 0 /\ 1+arg2 > 0 /\ -arg2+arg4 <= 0 /\ arg2-arg3 == 0 /\ -1+arg1 > 0 /\ 1+arg4 > 0), cost: 2
New rule:
f79_0_loop_GE -> f79_0_loop_GE : arg2'=2+arg2, arg4'=1+arg4, arg1'=2+arg2, arg3'=2+arg2, (arg2 > 0 /\ -arg2+arg4 <= 0 /\ arg2-arg3 == 0 /\ -1+arg1 > 0 /\ 1+arg4 > 0), cost: 2

Applied deletion
Removed the following rules: 6 7 8

Eliminated locations on tree-shaped paths
Start location: __init
  10: f79_0_loop_GE -> f79_0_loop_GE : arg2'=4+arg2, arg4'=arg4, arg1'=4+arg2, arg3'=4+arg2, (arg2 > 0 /\ -arg2+arg4 > 0 /\ arg2-arg3 == 0 /\ -1+arg1 > 0), cost: 2
  11: f79_0_loop_GE -> f79_0_loop_GE : arg2'=2+arg2, arg4'=1+arg4, arg1'=2+arg2, arg3'=2+arg2, (arg2 > 0 /\ -arg2+arg4 <= 0 /\ arg2-arg3 == 0 /\ -1+arg1 > 0 /\ 1+arg4 > 0), cost: 2
   9: __init -> f79_0_loop_GE : arg2'=2, arg4'=0, arg1'=2, arg3'=2, TRUE, cost: 2


Applied simplification
Original rule:
f79_0_loop_GE -> f79_0_loop_GE : arg2'=4+arg2, arg4'=arg4, arg1'=4+arg2, arg3'=4+arg2, (arg2 > 0 /\ -arg2+arg4 > 0 /\ arg2-arg3 == 0 /\ -1+arg1 > 0), cost: 2
New rule:
f79_0_loop_GE -> f79_0_loop_GE : arg2'=4+arg2, arg1'=4+arg2, arg3'=4+arg2, (arg2 > 0 /\ -arg2+arg4 > 0 /\ arg2-arg3 == 0 /\ -1+arg1 > 0), cost: 2

Simplified simple loops
Start location: __init
  11: f79_0_loop_GE -> f79_0_loop_GE : arg2'=2+arg2, arg4'=1+arg4, arg1'=2+arg2, arg3'=2+arg2, (arg2 > 0 /\ -arg2+arg4 <= 0 /\ arg2-arg3 == 0 /\ -1+arg1 > 0 /\ 1+arg4 > 0), cost: 2
  12: f79_0_loop_GE -> f79_0_loop_GE : arg2'=4+arg2, arg1'=4+arg2, arg3'=4+arg2, (arg2 > 0 /\ -arg2+arg4 > 0 /\ arg2-arg3 == 0 /\ -1+arg1 > 0), cost: 2
   9: __init -> f79_0_loop_GE : arg2'=2, arg4'=0, arg1'=2, arg3'=2, TRUE, cost: 2


Applied nonterm
Original rule:
f79_0_loop_GE -> f79_0_loop_GE : arg2'=2+arg2, arg4'=1+arg4, arg1'=2+arg2, arg3'=2+arg2, (arg2 > 0 /\ -arg2+arg4 <= 0 /\ arg2-arg3 == 0 /\ -1+arg1 > 0 /\ 1+arg4 > 0), cost: 2
New rule:
f79_0_loop_GE -> [4] : (arg2 > 0 /\ -1+n >= 0 /\ arg2-arg3 >= 0 /\ -1+arg1 > 0 /\ arg2-arg4 >= 0 /\ -arg2+arg3 >= 0 /\ 1+arg4 > 0), cost: NONTERM
Sub-proof via acceration calculus written to file:///tmp/tmpnam_Gbdala.txt

Applied acceleration
Original rule:
f79_0_loop_GE -> f79_0_loop_GE : arg2'=4+arg2, arg1'=4+arg2, arg3'=4+arg2, (arg2 > 0 /\ -arg2+arg4 > 0 /\ arg2-arg3 == 0 /\ -1+arg1 > 0), cost: 2
New rule:
f79_0_loop_GE -> f79_0_loop_GE : arg2'=arg2+4*n0, arg1'=arg2+4*n0, arg3'=arg2+4*n0, (arg2 > 0 /\ 4-arg2-4*n0+arg4 > 0 /\ -1+n0 >= 0 /\ arg2-arg3 >= 0 /\ -1+arg1 > 0 /\ -arg2+arg3 >= 0), cost: 2*n0
Sub-proof via acceration calculus written to file:///tmp/tmpnam_BPHnfG.txt

Applied deletion
Removed the following rules: 11 12

Accelerated simple loops
Start location: __init
  13: f79_0_loop_GE -> [4] : (arg2 > 0 /\ -1+n >= 0 /\ arg2-arg3 >= 0 /\ -1+arg1 > 0 /\ arg2-arg4 >= 0 /\ -arg2+arg3 >= 0 /\ 1+arg4 > 0), cost: NONTERM
  14: f79_0_loop_GE -> f79_0_loop_GE : arg2'=arg2+4*n0, arg1'=arg2+4*n0, arg3'=arg2+4*n0, (arg2 > 0 /\ 4-arg2-4*n0+arg4 > 0 /\ -1+n0 >= 0 /\ arg2-arg3 >= 0 /\ -1+arg1 > 0 /\ -arg2+arg3 >= 0), cost: 2*n0
   9: __init -> f79_0_loop_GE : arg2'=2, arg4'=0, arg1'=2, arg3'=2, TRUE, cost: 2


Applied chaining
First rule:
__init -> f79_0_loop_GE : arg2'=2, arg4'=0, arg1'=2, arg3'=2, TRUE, cost: 2
Second rule:
f79_0_loop_GE -> [4] : (arg2 > 0 /\ -1+n >= 0 /\ arg2-arg3 >= 0 /\ -1+arg1 > 0 /\ arg2-arg4 >= 0 /\ -arg2+arg3 >= 0 /\ 1+arg4 > 0), cost: NONTERM
New rule:
__init -> [4] : (0 == 0 /\ 2 > 0 /\ 2 >= 0), cost: NONTERM

Applied deletion
Removed the following rules: 13 14

Chained accelerated rules with incoming rules
Start location: __init
   9: __init -> f79_0_loop_GE : arg2'=2, arg4'=0, arg1'=2, arg3'=2, TRUE, cost: 2
  15: __init -> [4] : (0 == 0 /\ 2 > 0 /\ 2 >= 0), cost: NONTERM


Removed unreachable locations and irrelevant leafs
Start location: __init
  15: __init -> [4] : (0 == 0 /\ 2 > 0 /\ 2 >= 0), cost: NONTERM


Computing asymptotic complexity
Proved nontermination of rule 15 via SMT.

Proved the following lower bound
Complexity:  Nonterm
Cpx degree: Nonterm

Solved cost: NONTERM
Rule cost:   NONTERM
Rule guard:  (0 == 0 /\ 2 > 0 /\ 2 >= 0)
