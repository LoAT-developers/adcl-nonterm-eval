WORST_CASE(Omega(0),?)

Initial ITS
Start location: __init
   0: f1_0_main_ConstantStackPush -> f58_0_main_GE : arg1'=arg1P0, -arg1P0 == 0, cost: 1
   1: f58_0_main_GE -> f58_0_main_GE : arg1'=arg1P1, (-20+arg1 < 0 /\ -12+arg1 < 0 /\ 1-arg1P1+arg1 == 0), cost: 1
   2: f58_0_main_GE -> f58_0_main_GE : arg1'=arg1P2, (-11+arg1 > 0 /\ -20+arg1 < 0 /\ 1-arg1P2+arg1 == 0), cost: 1
   3: __init -> f1_0_main_ConstantStackPush : arg1'=arg1P3, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_ConstantStackPush -> f58_0_main_GE : arg1'=arg1P0, -arg1P0 == 0, cost: 1
New rule:
f1_0_main_ConstantStackPush -> f58_0_main_GE : arg1'=0, TRUE, cost: 1

Applied preprocessing
Original rule:
f58_0_main_GE -> f58_0_main_GE : arg1'=arg1P1, (-20+arg1 < 0 /\ -12+arg1 < 0 /\ 1-arg1P1+arg1 == 0), cost: 1
New rule:
f58_0_main_GE -> f58_0_main_GE : arg1'=1+arg1, 12-arg1 > 0, cost: 1

Applied preprocessing
Original rule:
f58_0_main_GE -> f58_0_main_GE : arg1'=arg1P2, (-11+arg1 > 0 /\ -20+arg1 < 0 /\ 1-arg1P2+arg1 == 0), cost: 1
New rule:
f58_0_main_GE -> f58_0_main_GE : arg1'=1+arg1, (-11+arg1 > 0 /\ 20-arg1 > 0), cost: 1

Simplified rules
Start location: __init
   4: f1_0_main_ConstantStackPush -> f58_0_main_GE : arg1'=0, TRUE, cost: 1
   5: f58_0_main_GE -> f58_0_main_GE : arg1'=1+arg1, 12-arg1 > 0, cost: 1
   6: f58_0_main_GE -> f58_0_main_GE : arg1'=1+arg1, (-11+arg1 > 0 /\ 20-arg1 > 0), cost: 1
   3: __init -> f1_0_main_ConstantStackPush : arg1'=arg1P3, TRUE, cost: 1


Applied acceleration
Original rule:
f58_0_main_GE -> f58_0_main_GE : arg1'=1+arg1, 12-arg1 > 0, cost: 1
New rule:
f58_0_main_GE -> f58_0_main_GE : arg1'=n+arg1, (n >= 0 /\ 13-n-arg1 > 0), cost: n
Sub-proof via acceration calculus written to file:///tmp/tmpnam_LPLfjg.txt

Applied instantiation
Original rule:
f58_0_main_GE -> f58_0_main_GE : arg1'=n+arg1, (n >= 0 /\ 13-n-arg1 > 0), cost: n
New rule:
f58_0_main_GE -> f58_0_main_GE : arg1'=12, (12-arg1 >= 0 /\ 1 > 0), cost: 12-arg1

Applied acceleration
Original rule:
f58_0_main_GE -> f58_0_main_GE : arg1'=1+arg1, (-11+arg1 > 0 /\ 20-arg1 > 0), cost: 1
New rule:
f58_0_main_GE -> f58_0_main_GE : arg1'=arg1+n0, (-11+arg1 > 0 /\ 21-arg1-n0 > 0 /\ n0 >= 0), cost: n0
Sub-proof via acceration calculus written to file:///tmp/tmpnam_JbIbDL.txt

Applied instantiation
Original rule:
f58_0_main_GE -> f58_0_main_GE : arg1'=arg1+n0, (-11+arg1 > 0 /\ 21-arg1-n0 > 0 /\ n0 >= 0), cost: n0
New rule:
f58_0_main_GE -> f58_0_main_GE : arg1'=20, (1 > 0 /\ -11+arg1 > 0 /\ 20-arg1 >= 0), cost: 20-arg1

Applied simplification
Original rule:
f58_0_main_GE -> f58_0_main_GE : arg1'=12, (12-arg1 >= 0 /\ 1 > 0), cost: 12-arg1
New rule:
f58_0_main_GE -> f58_0_main_GE : arg1'=12, -12+arg1 <= 0, cost: 12-arg1

Applied simplification
Original rule:
f58_0_main_GE -> f58_0_main_GE : arg1'=20, (1 > 0 /\ -11+arg1 > 0 /\ 20-arg1 >= 0), cost: 20-arg1
New rule:
f58_0_main_GE -> f58_0_main_GE : arg1'=20, (-11+arg1 > 0 /\ -20+arg1 <= 0), cost: 20-arg1

Applied deletion
Removed the following rules: 5 6

Accelerated simple loops
Start location: __init
   4: f1_0_main_ConstantStackPush -> f58_0_main_GE : arg1'=0, TRUE, cost: 1
   9: f58_0_main_GE -> f58_0_main_GE : arg1'=12, -12+arg1 <= 0, cost: 12-arg1
  10: f58_0_main_GE -> f58_0_main_GE : arg1'=20, (-11+arg1 > 0 /\ -20+arg1 <= 0), cost: 20-arg1
   3: __init -> f1_0_main_ConstantStackPush : arg1'=arg1P3, TRUE, cost: 1


Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f58_0_main_GE : arg1'=0, TRUE, cost: 1
Second rule:
f58_0_main_GE -> f58_0_main_GE : arg1'=12, -12+arg1 <= 0, cost: 12-arg1
New rule:
f1_0_main_ConstantStackPush -> f58_0_main_GE : arg1'=12, -12 <= 0, cost: 13

Applied deletion
Removed the following rules: 9 10

Chained accelerated rules with incoming rules
Start location: __init
   4: f1_0_main_ConstantStackPush -> f58_0_main_GE : arg1'=0, TRUE, cost: 1
  11: f1_0_main_ConstantStackPush -> f58_0_main_GE : arg1'=12, -12 <= 0, cost: 13
   3: __init -> f1_0_main_ConstantStackPush : arg1'=arg1P3, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
  <empty>


Computing asymptotic complexity

Proved the following lower bound
Complexity:  Unknown
Cpx degree: ?

Solved cost: 0
Rule cost:   0

