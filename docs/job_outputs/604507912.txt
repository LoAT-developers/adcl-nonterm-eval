NO

Initial ITS

Start location: __init
Program variables: arg1
   0: f1_0_main_ConstantStackPush -> f55_0_main_GE : arg1'=arg1p1, -arg1p1 == 0, cost: 1
   1: f55_0_main_GE -> f55_0_main_GE : arg1'=arg1p2, (1-arg1p2+arg1 == 0 /\ -50+arg1 < 0 /\ -100+arg1 < 0), cost: 1
   2: f55_0_main_GE -> f55_0_main_GE : arg1'=arg1p3, (-49+arg1 > 0 /\ -1-arg1p3+arg1 == 0 /\ -100+arg1 < 0), cost: 1
   3: __init -> f1_0_main_ConstantStackPush : arg1'=arg1p4, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1
   1: f55_0_main_GE -> f55_0_main_GE : arg1'=arg1p2, (1-arg1p2+arg1 == 0 /\ -50+arg1 < 0 /\ -100+arg1 < 0), cost: 1
   2: f55_0_main_GE -> f55_0_main_GE : arg1'=arg1p3, (-49+arg1 > 0 /\ -1-arg1p3+arg1 == 0 /\ -100+arg1 < 0), cost: 1
   4: __init -> f55_0_main_GE : arg1'=arg1p1, -arg1p1 == 0, cost: 1

	Eliminating location f1_0_main_ConstantStackPush by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_ConstantStackPush : arg1'=arg1p4, T, cost: 1
	Second rule:
	f1_0_main_ConstantStackPush -> f55_0_main_GE : arg1'=arg1p1, -arg1p1 == 0, cost: 1
	New rule:
	__init -> f55_0_main_GE : arg1'=arg1p1, -arg1p1 == 0, cost: 1
	
	Applied deletion

	Removed the following rules: 0 3

Simplified Transitions

Start location: __init
Program variables: arg1
   5: f55_0_main_GE -> f55_0_main_GE : arg1'=1+arg1, (-50+arg1 < 0 /\ -100+arg1 < 0), cost: 1
   6: f55_0_main_GE -> f55_0_main_GE : arg1'=-1+arg1, (-49+arg1 > 0 /\ -100+arg1 < 0), cost: 1
   7: __init -> f55_0_main_GE : arg1'=0, T, cost: 1

	Propagated Equalities

	Original rule:
	f55_0_main_GE -> f55_0_main_GE : arg1'=arg1p2, (1-arg1p2+arg1 == 0 /\ -50+arg1 < 0 /\ -100+arg1 < 0), cost: 1
	New rule:
	f55_0_main_GE -> f55_0_main_GE : arg1'=1+arg1, (0 == 0 /\ -50+arg1 < 0 /\ -100+arg1 < 0), cost: 1
	
		propagated equality arg1p2 = 1+arg1
		
	Simplified Guard

	Original rule:
	f55_0_main_GE -> f55_0_main_GE : arg1'=1+arg1, (0 == 0 /\ -50+arg1 < 0 /\ -100+arg1 < 0), cost: 1
	New rule:
	f55_0_main_GE -> f55_0_main_GE : arg1'=1+arg1, (-50+arg1 < 0 /\ -100+arg1 < 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f55_0_main_GE -> f55_0_main_GE : arg1'=arg1p3, (-49+arg1 > 0 /\ -1-arg1p3+arg1 == 0 /\ -100+arg1 < 0), cost: 1
	New rule:
	f55_0_main_GE -> f55_0_main_GE : arg1'=-1+arg1, (0 == 0 /\ -49+arg1 > 0 /\ -100+arg1 < 0), cost: 1
	
		propagated equality arg1p3 = -1+arg1
		
	Simplified Guard

	Original rule:
	f55_0_main_GE -> f55_0_main_GE : arg1'=-1+arg1, (0 == 0 /\ -49+arg1 > 0 /\ -100+arg1 < 0), cost: 1
	New rule:
	f55_0_main_GE -> f55_0_main_GE : arg1'=-1+arg1, (-49+arg1 > 0 /\ -100+arg1 < 0), cost: 1
	
	Propagated Equalities

	Original rule:
	__init -> f55_0_main_GE : arg1'=arg1p1, -arg1p1 == 0, cost: 1
	New rule:
	__init -> f55_0_main_GE : arg1'=0, 0 == 0, cost: 1
	
		propagated equality arg1p1 = 0
		
	Simplified Guard

	Original rule:
	__init -> f55_0_main_GE : arg1'=0, 0 == 0, cost: 1
	New rule:
	__init -> f55_0_main_GE : arg1'=0, T, cost: 1

Step with 7

	Trace

	7[T]
	
	Blocked

	[{}, {}]

Step with 5

	Trace

	7[T], 5[(-50+arg1 < 0 /\ -100+arg1 < 0)]
	
	Blocked

	[{}, {}, {}]

Accelerate

Start location: __init
Program variables: arg1
   5: f55_0_main_GE -> f55_0_main_GE : arg1'=1+arg1, (-50+arg1 < 0 /\ -100+arg1 < 0), cost: 1
   6: f55_0_main_GE -> f55_0_main_GE : arg1'=-1+arg1, (-49+arg1 > 0 /\ -100+arg1 < 0), cost: 1
   8: f55_0_main_GE -> f55_0_main_GE : arg1'=n+arg1, (-1+n >= 0 /\ 51-n-arg1 > 0 /\ 100-arg1 > 0), cost: 1
   7: __init -> f55_0_main_GE : arg1'=0, T, cost: 1

	Loop Acceleration

	Original rule:
	f55_0_main_GE -> f55_0_main_GE : arg1'=1+arg1, (-50+arg1 < 0 /\ -100+arg1 < 0), cost: 1
	New rule:
	f55_0_main_GE -> f55_0_main_GE : arg1'=n+arg1, (-1+n >= 0 /\ 51-n-arg1 > 0 /\ 100-arg1 > 0), cost: 1

		50-arg1 > 0 [0]: montonic decrease yields 51-n-arg1 > 0
		
		50-arg1 > 0 [1]: eventual increase yields (1 <= 0 /\ 50-arg1 > 0)
		
		100-arg1 > 0 [0]: monotonic increase yields 100-arg1 > 0, dependencies: 50-arg1 > 0
		
		Replacement map: {50-arg1 > 0 -> 51-n-arg1 > 0, 100-arg1 > 0 -> 100-arg1 > 0}

	Trace

	7[T], 8[(-1+n >= 0 /\ 51-n-arg1 > 0 /\ 100-arg1 > 0)]
	
	Blocked

	[{}, {}, {5[T], 8[T]}]

Step with 6

	Trace

	7[T], 8[(-1+n >= 0 /\ 51-n-arg1 > 0 /\ 100-arg1 > 0)], 6[(-49+arg1 > 0 /\ -100+arg1 < 0)]
	
	Blocked

	[{}, {}, {5[T], 8[T]}, {}]

Accelerate

Start location: __init
Program variables: arg1
   5: f55_0_main_GE -> f55_0_main_GE : arg1'=1+arg1, (-50+arg1 < 0 /\ -100+arg1 < 0), cost: 1
   6: f55_0_main_GE -> f55_0_main_GE : arg1'=-1+arg1, (-49+arg1 > 0 /\ -100+arg1 < 0), cost: 1
   8: f55_0_main_GE -> f55_0_main_GE : arg1'=n+arg1, (-1+n >= 0 /\ 51-n-arg1 > 0 /\ 100-arg1 > 0), cost: 1
   9: f55_0_main_GE -> f55_0_main_GE : arg1'=-n2+arg1, (-1+n2 >= 0 /\ -48-n2+arg1 > 0 /\ 100-arg1 > 0), cost: 1
   7: __init -> f55_0_main_GE : arg1'=0, T, cost: 1

	Loop Acceleration

	Original rule:
	f55_0_main_GE -> f55_0_main_GE : arg1'=-1+arg1, (-49+arg1 > 0 /\ -100+arg1 < 0), cost: 1
	New rule:
	f55_0_main_GE -> f55_0_main_GE : arg1'=-n2+arg1, (-1+n2 >= 0 /\ -48-n2+arg1 > 0 /\ 100-arg1 > 0), cost: 1

		-49+arg1 > 0 [0]: montonic decrease yields -48-n2+arg1 > 0
		
		-49+arg1 > 0 [1]: eventual increase yields (1 <= 0 /\ -49+arg1 > 0)
		
		100-arg1 > 0 [0]: monotonic increase yields 100-arg1 > 0
		
		Replacement map: {-49+arg1 > 0 -> -48-n2+arg1 > 0, 100-arg1 > 0 -> 100-arg1 > 0}

	Trace

	7[T], 8[(-1+n >= 0 /\ 51-n-arg1 > 0 /\ 100-arg1 > 0)], 9[(-1+n2 >= 0 /\ -48-n2+arg1 > 0 /\ 100-arg1 > 0)]
	
	Blocked

	[{}, {}, {5[T], 8[T]}, {6[T], 9[T]}]

Accelerate

Start location: __init
Program variables: arg1
   5: f55_0_main_GE -> f55_0_main_GE : arg1'=1+arg1, (-50+arg1 < 0 /\ -100+arg1 < 0), cost: 1
   6: f55_0_main_GE -> f55_0_main_GE : arg1'=-1+arg1, (-49+arg1 > 0 /\ -100+arg1 < 0), cost: 1
   8: f55_0_main_GE -> f55_0_main_GE : arg1'=n+arg1, (-1+n >= 0 /\ 51-n-arg1 > 0 /\ 100-arg1 > 0), cost: 1
   9: f55_0_main_GE -> f55_0_main_GE : arg1'=-n2+arg1, (-1+n2 >= 0 /\ -48-n2+arg1 > 0 /\ 100-arg1 > 0), cost: 1
  10: f55_0_main_GE -> LoAT_sink : (-1+n1 >= 0 /\ -n2+n1 <= 0 /\ -48-n2+n1+arg1 > 0 /\ -1+n2 >= 0 /\ 100-n1-arg1 > 0 /\ 51-n1-arg1 > 0 /\ 100-arg1 > 0), cost: NONTERM
  11: f55_0_main_GE -> f55_0_main_GE : arg1'=-n2*n3+n3*n1+arg1, (51-(-1+n3)*n1-n1+(-1+n3)*n2-arg1 > 0 /\ -1+n3 >= 0 /\ -1+n1 >= 0 /\ 100-(-1+n3)*n1-n1+(-1+n3)*n2-arg1 > 0 /\ -48-n2+n1+arg1 > 0 /\ -1+n2 >= 0 /\ 51-n1-arg1 > 0 /\ 100-arg1 > 0), cost: 1
   7: __init -> f55_0_main_GE : arg1'=0, T, cost: 1

	Certificate of Non-Termination

	Original rule:
	f55_0_main_GE -> f55_0_main_GE : arg1'=-n2+n1+arg1, (-1+n1 >= 0 /\ -48-n2+n1+arg1 > 0 /\ -1+n2 >= 0 /\ 100-n1-arg1 > 0 /\ 51-n1-arg1 > 0 /\ 100-arg1 > 0), cost: 1
	New rule:
	f55_0_main_GE -> LoAT_sink : (-1+n1 >= 0 /\ -n2+n1 <= 0 /\ -48-n2+n1+arg1 > 0 /\ -1+n2 >= 0 /\ 100-n1-arg1 > 0 /\ 51-n1-arg1 > 0 /\ 100-arg1 > 0), cost: NONTERM

		-1+n1 >= 0 [0]: monotonic increase yields -1+n1 >= 0
		
		-48-n2+n1+arg1 > 0 [0]: monotonic increase yields -48-n2+n1+arg1 > 0, dependencies: -1+n1 >= 0 51-n1-arg1 > 0
		
		-48-n2+n1+arg1 > 0 [1]: eventual decrease yields (-48+(-1+n3)*n1-n2+n1-(-1+n3)*n2+arg1 > 0 /\ -48-n2+n1+arg1 > 0)
		
		-48-n2+n1+arg1 > 0 [2]: eventual increase yields (n2-n1 <= 0 /\ -48-n2+n1+arg1 > 0)
		
		-1+n2 >= 0 [0]: monotonic increase yields -1+n2 >= 0
		
		100-n1-arg1 > 0 [0]: montonic decrease yields 100-(-1+n3)*n1-n1+(-1+n3)*n2-arg1 > 0, dependencies: 51-n1-arg1 > 0
		
		100-n1-arg1 > 0 [1]: eventual decrease yields (100-(-1+n3)*n1-n1+(-1+n3)*n2-arg1 > 0 /\ 100-n1-arg1 > 0)
		
		100-n1-arg1 > 0 [2]: eventual increase yields (-n2+n1 <= 0 /\ 100-n1-arg1 > 0)
		
		51-n1-arg1 > 0 [0]: eventual decrease yields (51-(-1+n3)*n1-n1+(-1+n3)*n2-arg1 > 0 /\ 51-n1-arg1 > 0)
		
		51-n1-arg1 > 0 [1]: eventual increase yields (-n2+n1 <= 0 /\ 51-n1-arg1 > 0)
		
		100-arg1 > 0 [0]: monotonic increase yields 100-arg1 > 0, dependencies: -1+n2 >= 0 100-n1-arg1 > 0
		
		Replacement map: {-1+n1 >= 0 -> -1+n1 >= 0, -48-n2+n1+arg1 > 0 -> -48-n2+n1+arg1 > 0, -1+n2 >= 0 -> -1+n2 >= 0, 100-n1-arg1 > 0 -> (-n2+n1 <= 0 /\ 100-n1-arg1 > 0), 51-n1-arg1 > 0 -> (-n2+n1 <= 0 /\ 51-n1-arg1 > 0), 100-arg1 > 0 -> 100-arg1 > 0}

	Loop Acceleration

	Original rule:
	f55_0_main_GE -> f55_0_main_GE : arg1'=-n2+n1+arg1, (-1+n1 >= 0 /\ -48-n2+n1+arg1 > 0 /\ -1+n2 >= 0 /\ 100-n1-arg1 > 0 /\ 51-n1-arg1 > 0 /\ 100-arg1 > 0), cost: 1
	New rule:
	f55_0_main_GE -> f55_0_main_GE : arg1'=-n2*n3+n3*n1+arg1, (51-(-1+n3)*n1-n1+(-1+n3)*n2-arg1 > 0 /\ -1+n3 >= 0 /\ -1+n1 >= 0 /\ 100-(-1+n3)*n1-n1+(-1+n3)*n2-arg1 > 0 /\ -48-n2+n1+arg1 > 0 /\ -1+n2 >= 0 /\ 51-n1-arg1 > 0 /\ 100-arg1 > 0), cost: 1

		-1+n1 >= 0 [0]: monotonic increase yields -1+n1 >= 0
		
		-48-n2+n1+arg1 > 0 [0]: monotonic increase yields -48-n2+n1+arg1 > 0, dependencies: -1+n1 >= 0 51-n1-arg1 > 0
		
		-48-n2+n1+arg1 > 0 [1]: eventual decrease yields (-48+(-1+n3)*n1-n2+n1-(-1+n3)*n2+arg1 > 0 /\ -48-n2+n1+arg1 > 0)
		
		-48-n2+n1+arg1 > 0 [2]: eventual increase yields (n2-n1 <= 0 /\ -48-n2+n1+arg1 > 0)
		
		-1+n2 >= 0 [0]: monotonic increase yields -1+n2 >= 0
		
		100-n1-arg1 > 0 [0]: montonic decrease yields 100-(-1+n3)*n1-n1+(-1+n3)*n2-arg1 > 0, dependencies: 51-n1-arg1 > 0
		
		100-n1-arg1 > 0 [1]: eventual decrease yields (100-(-1+n3)*n1-n1+(-1+n3)*n2-arg1 > 0 /\ 100-n1-arg1 > 0)
		
		100-n1-arg1 > 0 [2]: eventual increase yields (-n2+n1 <= 0 /\ 100-n1-arg1 > 0)
		
		51-n1-arg1 > 0 [0]: eventual decrease yields (51-(-1+n3)*n1-n1+(-1+n3)*n2-arg1 > 0 /\ 51-n1-arg1 > 0)
		
		51-n1-arg1 > 0 [1]: eventual increase yields (-n2+n1 <= 0 /\ 51-n1-arg1 > 0)
		
		100-arg1 > 0 [0]: monotonic increase yields 100-arg1 > 0, dependencies: -1+n2 >= 0 100-n1-arg1 > 0
		
		Replacement map: {-1+n1 >= 0 -> -1+n1 >= 0, -48-n2+n1+arg1 > 0 -> -48-n2+n1+arg1 > 0, -1+n2 >= 0 -> -1+n2 >= 0, 100-n1-arg1 > 0 -> 100-(-1+n3)*n1-n1+(-1+n3)*n2-arg1 > 0, 51-n1-arg1 > 0 -> (51-(-1+n3)*n1-n1+(-1+n3)*n2-arg1 > 0 /\ 51-n1-arg1 > 0), 100-arg1 > 0 -> 100-arg1 > 0}

	Trace

	7[T], 11[(51-(-1+n3)*n1-n1+(-1+n3)*n2-arg1 > 0 /\ -1+n3 >= 0 /\ -1+n1 >= 0 /\ 100-(-1+n3)*n1-n1+(-1+n3)*n2-arg1 > 0 /\ -48-n2+n1+arg1 > 0 /\ -1+n2 >= 0 /\ 51-n1-arg1 > 0 /\ 100-arg1 > 0)]
	
	Blocked

	[{}, {}, {11[T]}]

Step with 10

	Trace

	7[T], 11[(51-(-1+n3)*n1-n1+(-1+n3)*n2-arg1 > 0 /\ -1+n3 >= 0 /\ -1+n1 >= 0 /\ 100-(-1+n3)*n1-n1+(-1+n3)*n2-arg1 > 0 /\ -48-n2+n1+arg1 > 0 /\ -1+n2 >= 0 /\ 51-n1-arg1 > 0 /\ 100-arg1 > 0)], 10[(-1+n1 >= 0 /\ -n2+n1 <= 0 /\ -48-n2+n1+arg1 > 0 /\ -1+n2 >= 0 /\ 100-n1-arg1 > 0 /\ 51-n1-arg1 > 0 /\ 100-arg1 > 0)]
	
	Blocked

	[{}, {}, {11[T]}]

Refute

	Counterexample

	[ arg1=0 ] 7 [ arg1=49 ] 11 [ arg1=arg1 ] 10
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
