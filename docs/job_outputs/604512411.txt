unknown

Initial ITS

Start location: [1]
Program variables: x y z
   0: [1] -> [2] : y'=nondet, T, cost: 1
   1: [2] -> [3] : z'=nondet1, T, cost: 1
   2: [3] -> [5] : (nondet2 < 0 \/ nondet2 > 0), cost: 1
   5: [3] -> [7] : (nondet2 <= 0 /\ nondet2 >= 0), cost: 1
   8: [4] -> [9] : (-100+z < 0 /\ -100+y < 0), cost: 1
  12: [4] -> [12] : (-100+z >= 0 \/ -100+y >= 0), cost: 1
   3: [5] -> [6] : x'=1, T, cost: 1
   4: [6] -> [4] : T, cost: 1
   6: [7] -> [8] : x'=-1, T, cost: 1
   7: [8] -> [4] : T, cost: 1
   9: [9] -> [10] : y'=x+y, T, cost: 1
  10: [10] -> [11] : z'=-x+z, T, cost: 1
  11: [11] -> [4] : T, cost: 1

Chained Linear Paths

Start location: [1]
Program variables: x y z
  13: [1] -> [3] : y'=nondet, z'=nondet1, T, cost: 1
  16: [3] -> [4] : x'=1, (nondet2 < 0 \/ nondet2 > 0), cost: 1
  17: [3] -> [4] : x'=-1, (nondet2 <= 0 /\ nondet2 >= 0), cost: 1
  12: [4] -> [12] : (-100+z >= 0 \/ -100+y >= 0), cost: 1
  20: [4] -> [4] : y'=x+y, z'=-x+z, (-100+z < 0 /\ -100+y < 0), cost: 1

	Eliminating location [2] by chaining:

	Applied chaining

	First rule:
	[1] -> [2] : y'=nondet, T, cost: 1
	Second rule:
	[2] -> [3] : z'=nondet1, T, cost: 1
	New rule:
	[1] -> [3] : y'=nondet, z'=nondet1, T, cost: 1
	
	Applied deletion

	Removed the following rules: 0 1
	
	Eliminating location [5] by chaining:

	Applied chaining

	First rule:
	[3] -> [5] : (nondet2 < 0 \/ nondet2 > 0), cost: 1
	Second rule:
	[5] -> [6] : x'=1, T, cost: 1
	New rule:
	[3] -> [6] : x'=1, (nondet2 < 0 \/ nondet2 > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 2 3
	
	Eliminating location [7] by chaining:

	Applied chaining

	First rule:
	[3] -> [7] : (nondet2 <= 0 /\ nondet2 >= 0), cost: 1
	Second rule:
	[7] -> [8] : x'=-1, T, cost: 1
	New rule:
	[3] -> [8] : x'=-1, (nondet2 <= 0 /\ nondet2 >= 0), cost: 1
	
	Applied deletion

	Removed the following rules: 5 6
	
	Eliminating location [6] by chaining:

	Applied chaining

	First rule:
	[3] -> [6] : x'=1, (nondet2 < 0 \/ nondet2 > 0), cost: 1
	Second rule:
	[6] -> [4] : T, cost: 1
	New rule:
	[3] -> [4] : x'=1, (nondet2 < 0 \/ nondet2 > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 4 14
	
	Eliminating location [8] by chaining:

	Applied chaining

	First rule:
	[3] -> [8] : x'=-1, (nondet2 <= 0 /\ nondet2 >= 0), cost: 1
	Second rule:
	[8] -> [4] : T, cost: 1
	New rule:
	[3] -> [4] : x'=-1, (nondet2 <= 0 /\ nondet2 >= 0), cost: 1
	
	Applied deletion

	Removed the following rules: 7 15
	
	Eliminating location [9] by chaining:

	Applied chaining

	First rule:
	[4] -> [9] : (-100+z < 0 /\ -100+y < 0), cost: 1
	Second rule:
	[9] -> [10] : y'=x+y, T, cost: 1
	New rule:
	[4] -> [10] : y'=x+y, (-100+z < 0 /\ -100+y < 0), cost: 1
	
	Applied deletion

	Removed the following rules: 8 9
	
	Eliminating location [10] by chaining:

	Applied chaining

	First rule:
	[4] -> [10] : y'=x+y, (-100+z < 0 /\ -100+y < 0), cost: 1
	Second rule:
	[10] -> [11] : z'=-x+z, T, cost: 1
	New rule:
	[4] -> [11] : y'=x+y, z'=-x+z, (-100+z < 0 /\ -100+y < 0), cost: 1
	
	Applied deletion

	Removed the following rules: 10 18
	
	Eliminating location [11] by chaining:

	Applied chaining

	First rule:
	[4] -> [11] : y'=x+y, z'=-x+z, (-100+z < 0 /\ -100+y < 0), cost: 1
	Second rule:
	[11] -> [4] : T, cost: 1
	New rule:
	[4] -> [4] : y'=x+y, z'=-x+z, (-100+z < 0 /\ -100+y < 0), cost: 1
	
	Applied deletion

	Removed the following rules: 11 19

Simplified Transitions

Start location: [1]
Program variables: x y z
  13: [1] -> [3] : y'=nondet, z'=nondet1, T, cost: 1
  16: [3] -> [4] : x'=1, (nondet2 < 0 \/ nondet2 > 0), cost: 1
  21: [3] -> [4] : x'=-1, T, cost: 1
  12: [4] -> [12] : (-100+z >= 0 \/ -100+y >= 0), cost: 1
  20: [4] -> [4] : y'=x+y, z'=-x+z, (-100+z < 0 /\ -100+y < 0), cost: 1

	made implied equalities explicit

	Original rule:
	[3] -> [4] : x'=-1, (nondet2 <= 0 /\ nondet2 >= 0), cost: 1
	New rule:
	[3] -> [4] : x'=-1, (nondet2 <= 0 /\ nondet2 >= 0 /\ nondet2 == 0), cost: 1
	
	Propagated Equalities

	Original rule:
	[3] -> [4] : x'=-1, (nondet2 <= 0 /\ nondet2 >= 0 /\ nondet2 == 0), cost: 1
	New rule:
	[3] -> [4] : x'=-1, (0 <= 0 /\ 0 >= 0 /\ 0 == 0), cost: 1
	
		propagated equality nondet2 = 0
		
	Simplified Guard

	Original rule:
	[3] -> [4] : x'=-1, (0 <= 0 /\ 0 >= 0 /\ 0 == 0), cost: 1
	New rule:
	[3] -> [4] : x'=-1, T, cost: 1

Step with 13

	Trace

	13[T]
	
	Blocked

	[{}, {}]

Step with 16

	Trace

	13[T], 16[(nondet2 > 0)]
	
	Blocked

	[{}, {}, {}]

Step with 12

	Trace

	13[T], 16[(nondet2 > 0)], 12[(-100+z >= 0)]
	
	Blocked

	[{}, {}, {}, {}]

Backtrack

	Trace

	13[T], 16[(nondet2 > 0)]
	
	Blocked

	[{}, {}, {12[-100+z >= 0]}]

Step with 12

	Trace

	13[T], 16[(nondet2 > 0)], 12[(-100+y >= 0)]
	
	Blocked

	[{}, {}, {12[-100+z >= 0]}, {}]

Backtrack

	Trace

	13[T], 16[(nondet2 > 0)]
	
	Blocked

	[{}, {}, {12[(-100+z >= 0 /\ -100+y >= 0)]}]

Step with 20

	Trace

	13[T], 16[(nondet2 > 0)], 20[(-100+z < 0 /\ -100+y < 0)]
	
	Blocked

	[{}, {}, {12[T]}, {}]

Accelerate

Start location: [1]
Program variables: x y z
  13: [1] -> [3] : y'=nondet, z'=nondet1, T, cost: 1
  16: [3] -> [4] : x'=1, (nondet2 < 0 \/ nondet2 > 0), cost: 1
  21: [3] -> [4] : x'=-1, T, cost: 1
  12: [4] -> [12] : (-100+z >= 0 \/ -100+y >= 0), cost: 1
  20: [4] -> [4] : y'=x+y, z'=-x+z, (-100+z < 0 /\ -100+y < 0), cost: 1
  22: [4] -> LoAT_sink : (-x <= 0 /\ x <= 0 /\ 100-z > 0 /\ 100-y > 0), cost: NONTERM
  23: [4] -> [4] : y'=x*n+y, z'=-x*n+z, (100+x*(-1+n)-z > 0 /\ 100-x*(-1+n)-y > 0 /\ 100-z > 0 /\ -1+n >= 0 /\ 100-y > 0), cost: 1

	Certificate of Non-Termination

	Original rule:
	[4] -> [4] : y'=x+y, z'=-x+z, (-100+z < 0 /\ -100+y < 0), cost: 1
	New rule:
	[4] -> LoAT_sink : (-x <= 0 /\ x <= 0 /\ 100-z > 0 /\ 100-y > 0), cost: NONTERM

		100-z > 0 [0]: eventual decrease yields (100+x*(-1+n)-z > 0 /\ 100-z > 0)
		
		100-z > 0 [1]: eventual increase yields (-x <= 0 /\ 100-z > 0)
		
		100-y > 0 [0]: eventual decrease yields (100-x*(-1+n)-y > 0 /\ 100-y > 0)
		
		100-y > 0 [1]: eventual increase yields (x <= 0 /\ 100-y > 0)
		
		Replacement map: {100-z > 0 -> (-x <= 0 /\ 100-z > 0), 100-y > 0 -> (x <= 0 /\ 100-y > 0)}

	Loop Acceleration

	Original rule:
	[4] -> [4] : y'=x+y, z'=-x+z, (-100+z < 0 /\ -100+y < 0), cost: 1
	New rule:
	[4] -> [4] : y'=x*n+y, z'=-x*n+z, (100+x*(-1+n)-z > 0 /\ 100-x*(-1+n)-y > 0 /\ 100-z > 0 /\ -1+n >= 0 /\ 100-y > 0), cost: 1

		100-z > 0 [0]: eventual decrease yields (100+x*(-1+n)-z > 0 /\ 100-z > 0)
		
		100-z > 0 [1]: eventual increase yields (-x <= 0 /\ 100-z > 0)
		
		100-y > 0 [0]: eventual decrease yields (100-x*(-1+n)-y > 0 /\ 100-y > 0)
		
		100-y > 0 [1]: eventual increase yields (x <= 0 /\ 100-y > 0)
		
		Replacement map: {100-z > 0 -> (100+x*(-1+n)-z > 0 /\ 100-z > 0), 100-y > 0 -> (100-x*(-1+n)-y > 0 /\ 100-y > 0)}

	Trace

	13[T], 16[(nondet2 > 0)], 23[(100+x*(-1+n)-z > 0 /\ 100-x*(-1+n)-y > 0 /\ 100-z > 0 /\ -1+n >= 0 /\ 100-y > 0)]
	
	Blocked

	[{}, {}, {12[T]}, {20[T], 23[T]}]

Step with 12

	Trace

	13[T], 16[(nondet2 > 0)], 23[(100+x*(-1+n)-z > 0 /\ 100-x*(-1+n)-y > 0 /\ 100-z > 0 /\ -1+n >= 0 /\ 100-y > 0)], 12[(-100+y >= 0)]
	
	Blocked

	[{}, {}, {12[T]}, {20[T], 22[T], 23[T]}, {}]

Backtrack

	Trace

	13[T], 16[(nondet2 > 0)], 23[(100+x*(-1+n)-z > 0 /\ 100-x*(-1+n)-y > 0 /\ 100-z > 0 /\ -1+n >= 0 /\ 100-y > 0)]
	
	Blocked

	[{}, {}, {12[T]}, {12[-100+y >= 0], 20[T], 22[T], 23[T]}]

Backtrack

	Trace

	13[T], 16[(nondet2 > 0)]
	
	Blocked

	[{}, {}, {12[T], 23[T]}]

Step with 20

	Trace

	13[T], 16[(nondet2 > 0)], 20[(-100+z < 0 /\ -100+y < 0)]
	
	Blocked

	[{}, {}, {12[T], 23[T]}, {}]

Covered

	Trace

	13[T], 16[(nondet2 > 0)]
	
	Blocked

	[{}, {}, {12[T], 20[T], 23[T]}]

Backtrack

	Trace

	13[T]
	
	Blocked

	[{}, {16[nondet2 > 0]}]

Step with 16

	Trace

	13[T], 16[(nondet2 < 0)]
	
	Blocked

	[{}, {16[nondet2 > 0]}, {}]

Step with 20

	Trace

	13[T], 16[(nondet2 < 0)], 20[(-100+z < 0 /\ -100+y < 0)]
	
	Blocked

	[{}, {16[nondet2 > 0]}, {22[T]}, {}]

Covered

	Trace

	13[T], 16[(nondet2 < 0)]
	
	Blocked

	[{}, {16[nondet2 > 0]}, {20[T], 22[T]}]

Step with 23

	Trace

	13[T], 16[(nondet2 < 0)], 23[(100+x*(-1+n)-z > 0 /\ 100-x*(-1+n)-y > 0 /\ 100-z > 0 /\ -1+n >= 0 /\ 100-y > 0)]
	
	Blocked

	[{}, {16[nondet2 > 0]}, {20[T], 22[T]}, {23[T]}]

Step with 12

	Trace

	13[T], 16[(nondet2 < 0)], 23[(100+x*(-1+n)-z > 0 /\ 100-x*(-1+n)-y > 0 /\ 100-z > 0 /\ -1+n >= 0 /\ 100-y > 0)], 12[(-100+y >= 0)]
	
	Blocked

	[{}, {16[nondet2 > 0]}, {20[T], 22[T]}, {22[T], 23[T]}, {}]

Backtrack

	Trace

	13[T], 16[(nondet2 < 0)], 23[(100+x*(-1+n)-z > 0 /\ 100-x*(-1+n)-y > 0 /\ 100-z > 0 /\ -1+n >= 0 /\ 100-y > 0)]
	
	Blocked

	[{}, {16[nondet2 > 0]}, {20[T], 22[T]}, {12[-100+y >= 0], 22[T], 23[T]}]

Step with 20

	Trace

	13[T], 16[(nondet2 < 0)], 23[(100+x*(-1+n)-z > 0 /\ 100-x*(-1+n)-y > 0 /\ 100-z > 0 /\ -1+n >= 0 /\ 100-y > 0)], 20[(-100+z < 0 /\ -100+y < 0)]
	
	Blocked

	[{}, {16[nondet2 > 0]}, {20[T], 22[T]}, {12[T], 22[T], 23[T]}, {}]

Covered

	Trace

	13[T], 16[(nondet2 < 0)], 23[(100+x*(-1+n)-z > 0 /\ 100-x*(-1+n)-y > 0 /\ 100-z > 0 /\ -1+n >= 0 /\ 100-y > 0)]
	
	Blocked

	[{}, {16[nondet2 > 0]}, {20[T], 22[T]}, {12[T], 20[T], 22[T], 23[T]}]

Backtrack

	Trace

	13[T], 16[(nondet2 < 0)]
	
	Blocked

	[{}, {16[nondet2 > 0]}, {20[T], 22[T], 23[T]}]

Step with 12

	Trace

	13[T], 16[(nondet2 < 0)], 12[(-100+y >= 0)]
	
	Blocked

	[{}, {16[nondet2 > 0]}, {20[T], 22[T], 23[T]}, {}]

Backtrack

	Trace

	13[T], 16[(nondet2 < 0)]
	
	Blocked

	[{}, {16[nondet2 > 0]}, {12[-100+y >= 0], 20[T], 22[T], 23[T]}]

Step with 12

	Trace

	13[T], 16[(nondet2 < 0)], 12[(-100+z >= 0)]
	
	Blocked

	[{}, {16[nondet2 > 0]}, {12[-100+y >= 0], 20[T], 22[T], 23[T]}, {}]

Backtrack

	Trace

	13[T], 16[(nondet2 < 0)]
	
	Blocked

	[{}, {16[nondet2 > 0]}, {12[(-100+z >= 0 /\ -100+y >= 0)], 20[T], 22[T], 23[T]}]

Backtrack

	Trace

	13[T]
	
	Blocked

	[{}, {16[(nondet2 < 0 /\ nondet2 > 0)]}]

Step with 21

	Trace

	13[T], 21[T]
	
	Blocked

	[{}, {16[T]}, {}]

Step with 12

	Trace

	13[T], 21[T], 12[(-100+z >= 0)]
	
	Blocked

	[{}, {16[T]}, {22[T]}, {}]

Backtrack

	Trace

	13[T], 21[T]
	
	Blocked

	[{}, {16[T]}, {12[-100+z >= 0], 22[T]}]

Step with 12

	Trace

	13[T], 21[T], 12[(-100+y >= 0)]
	
	Blocked

	[{}, {16[T]}, {12[-100+z >= 0], 22[T]}, {}]

Backtrack

	Trace

	13[T], 21[T]
	
	Blocked

	[{}, {16[T]}, {12[(-100+z >= 0 /\ -100+y >= 0)], 22[T]}]

Step with 20

	Trace

	13[T], 21[T], 20[(-100+z < 0 /\ -100+y < 0)]
	
	Blocked

	[{}, {16[T]}, {12[T], 22[T]}, {}]

Covered

	Trace

	13[T], 21[T]
	
	Blocked

	[{}, {16[T]}, {12[T], 20[T], 22[T]}]

Step with 23

	Trace

	13[T], 21[T], 23[(100+x*(-1+n)-z > 0 /\ 100-x*(-1+n)-y > 0 /\ 100-z > 0 /\ -1+n >= 0 /\ 100-y > 0)]
	
	Blocked

	[{}, {16[T]}, {12[T], 20[T], 22[T]}, {23[T]}]

Step with 12

	Trace

	13[T], 21[T], 23[(100+x*(-1+n)-z > 0 /\ 100-x*(-1+n)-y > 0 /\ 100-z > 0 /\ -1+n >= 0 /\ 100-y > 0)], 12[(-100+z >= 0)]
	
	Blocked

	[{}, {16[T]}, {12[T], 20[T], 22[T]}, {22[T], 23[T]}, {}]

Backtrack

	Trace

	13[T], 21[T], 23[(100+x*(-1+n)-z > 0 /\ 100-x*(-1+n)-y > 0 /\ 100-z > 0 /\ -1+n >= 0 /\ 100-y > 0)]
	
	Blocked

	[{}, {16[T]}, {12[T], 20[T], 22[T]}, {12[-100+z >= 0], 22[T], 23[T]}]

Step with 20

	Trace

	13[T], 21[T], 23[(100+x*(-1+n)-z > 0 /\ 100-x*(-1+n)-y > 0 /\ 100-z > 0 /\ -1+n >= 0 /\ 100-y > 0)], 20[(-100+z < 0 /\ -100+y < 0)]
	
	Blocked

	[{}, {16[T]}, {12[T], 20[T], 22[T]}, {12[T], 22[T], 23[T]}, {}]

Covered

	Trace

	13[T], 21[T], 23[(100+x*(-1+n)-z > 0 /\ 100-x*(-1+n)-y > 0 /\ 100-z > 0 /\ -1+n >= 0 /\ 100-y > 0)]
	
	Blocked

	[{}, {16[T]}, {12[T], 20[T], 22[T]}, {12[T], 20[T], 22[T], 23[T]}]

Backtrack

	Trace

	13[T], 21[T]
	
	Blocked

	[{}, {16[T]}, {12[T], 20[T], 22[T], 23[T]}]

Backtrack

	Trace

	13[T]
	
	Blocked

	[{}, {16[T], 21[T]}]

Backtrack

	Trace

	Blocked

	[{13[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
