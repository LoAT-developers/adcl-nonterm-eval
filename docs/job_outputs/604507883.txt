unknown

Initial ITS

Start location: __init
Program variables: arg1 arg2
   0: f1_0_main_ConstantStackPush -> f137_0_test_GE : arg1'=arg1p1, arg2'=arg2p1, (-arg1p1 == 0 /\ 10-arg2p1 == 0), cost: 1
   1: f137_0_test_GE -> f137_0_test_GE : arg1'=arg1p2, arg2'=arg2p2, (-arg2p2+arg1 == 0 /\ arg1-arg2 < 0 /\ arg2 > 0 /\ -arg1p2 == 0), cost: 1
   2: f137_0_test_GE -> f137_0_test_GE : arg1'=arg1p3, arg2'=arg2p3, (arg1-arg2 < 0 /\ arg2-arg2p3 == 0 /\ arg2 > 0 /\ 1+arg1-arg1p3 == 0), cost: 1
   3: __init -> f1_0_main_ConstantStackPush : arg1'=arg1p4, arg2'=arg2p4, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2
   1: f137_0_test_GE -> f137_0_test_GE : arg1'=arg1p2, arg2'=arg2p2, (-arg2p2+arg1 == 0 /\ arg1-arg2 < 0 /\ arg2 > 0 /\ -arg1p2 == 0), cost: 1
   2: f137_0_test_GE -> f137_0_test_GE : arg1'=arg1p3, arg2'=arg2p3, (arg1-arg2 < 0 /\ arg2-arg2p3 == 0 /\ arg2 > 0 /\ 1+arg1-arg1p3 == 0), cost: 1
   4: __init -> f137_0_test_GE : arg1'=arg1p1, arg2'=arg2p1, (-arg1p1 == 0 /\ 10-arg2p1 == 0), cost: 1

	Eliminating location f1_0_main_ConstantStackPush by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_ConstantStackPush : arg1'=arg1p4, arg2'=arg2p4, T, cost: 1
	Second rule:
	f1_0_main_ConstantStackPush -> f137_0_test_GE : arg1'=arg1p1, arg2'=arg2p1, (-arg1p1 == 0 /\ 10-arg2p1 == 0), cost: 1
	New rule:
	__init -> f137_0_test_GE : arg1'=arg1p1, arg2'=arg2p1, (-arg1p1 == 0 /\ 10-arg2p1 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 3

Simplified Transitions

Start location: __init
Program variables: arg1 arg2
   5: f137_0_test_GE -> f137_0_test_GE : arg1'=0, arg2'=arg1, (arg1-arg2 < 0 /\ arg2 > 0), cost: 1
   6: f137_0_test_GE -> f137_0_test_GE : arg1'=1+arg1, (arg1-arg2 < 0 /\ arg2 > 0), cost: 1
   7: __init -> f137_0_test_GE : arg1'=0, arg2'=10, T, cost: 1

	Propagated Equalities

	Original rule:
	f137_0_test_GE -> f137_0_test_GE : arg1'=arg1p2, arg2'=arg2p2, (-arg2p2+arg1 == 0 /\ arg1-arg2 < 0 /\ arg2 > 0 /\ -arg1p2 == 0), cost: 1
	New rule:
	f137_0_test_GE -> f137_0_test_GE : arg1'=0, arg2'=arg1, (0 == 0 /\ arg1-arg2 < 0 /\ arg2 > 0), cost: 1
	
		propagated equality arg2p2 = arg1
		
		propagated equality arg1p2 = 0
		
	Simplified Guard

	Original rule:
	f137_0_test_GE -> f137_0_test_GE : arg1'=0, arg2'=arg1, (0 == 0 /\ arg1-arg2 < 0 /\ arg2 > 0), cost: 1
	New rule:
	f137_0_test_GE -> f137_0_test_GE : arg1'=0, arg2'=arg1, (arg1-arg2 < 0 /\ arg2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f137_0_test_GE -> f137_0_test_GE : arg1'=arg1p3, arg2'=arg2p3, (arg1-arg2 < 0 /\ arg2-arg2p3 == 0 /\ arg2 > 0 /\ 1+arg1-arg1p3 == 0), cost: 1
	New rule:
	f137_0_test_GE -> f137_0_test_GE : arg1'=1+arg1, arg2'=arg2, (0 == 0 /\ arg1-arg2 < 0 /\ arg2 > 0), cost: 1
	
		propagated equality arg2p3 = arg2
		
		propagated equality arg1p3 = 1+arg1
		
	Simplified Guard

	Original rule:
	f137_0_test_GE -> f137_0_test_GE : arg1'=1+arg1, arg2'=arg2, (0 == 0 /\ arg1-arg2 < 0 /\ arg2 > 0), cost: 1
	New rule:
	f137_0_test_GE -> f137_0_test_GE : arg1'=1+arg1, arg2'=arg2, (arg1-arg2 < 0 /\ arg2 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f137_0_test_GE -> f137_0_test_GE : arg1'=1+arg1, arg2'=arg2, (arg1-arg2 < 0 /\ arg2 > 0), cost: 1
	New rule:
	f137_0_test_GE -> f137_0_test_GE : arg1'=1+arg1, (arg1-arg2 < 0 /\ arg2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	__init -> f137_0_test_GE : arg1'=arg1p1, arg2'=arg2p1, (-arg1p1 == 0 /\ 10-arg2p1 == 0), cost: 1
	New rule:
	__init -> f137_0_test_GE : arg1'=0, arg2'=10, 0 == 0, cost: 1
	
		propagated equality arg1p1 = 0
		
		propagated equality arg2p1 = 10
		
	Simplified Guard

	Original rule:
	__init -> f137_0_test_GE : arg1'=0, arg2'=10, 0 == 0, cost: 1
	New rule:
	__init -> f137_0_test_GE : arg1'=0, arg2'=10, T, cost: 1

Unrolled Loops

Start location: __init
Program variables: arg1 arg2
   5: f137_0_test_GE -> f137_0_test_GE : arg1'=0, arg2'=arg1, (arg1-arg2 < 0 /\ arg2 > 0), cost: 1
   6: f137_0_test_GE -> f137_0_test_GE : arg1'=1+arg1, (arg1-arg2 < 0 /\ arg2 > 0), cost: 1
   8: f137_0_test_GE -> f137_0_test_GE : arg1'=0, arg2'=0, (arg1 > 0 /\ arg1-arg2 < 0 /\ arg2 > 0 /\ -arg1 < 0), cost: 1
   7: __init -> f137_0_test_GE : arg1'=0, arg2'=10, T, cost: 1

	Unrolling

	Original rule:
	f137_0_test_GE -> f137_0_test_GE : arg1'=0, arg2'=arg1, (arg1-arg2 < 0 /\ arg2 > 0), cost: 1
	New rule:
	f137_0_test_GE -> f137_0_test_GE : arg1'=0, arg2'=0, (arg1 > 0 /\ arg1-arg2 < 0 /\ arg2 > 0 /\ -arg1 < 0), cost: 1

Step with 7

	Trace

	7[T]
	
	Blocked

	[{}, {}]

Step with 5

	Trace

	7[T], 5[(arg1-arg2 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {}]

Accelerate and Drop

Start location: __init
Program variables: arg1 arg2
   5: f137_0_test_GE -> f137_0_test_GE : arg1'=0, arg2'=arg1, (arg1-arg2 < 0 /\ arg2 > 0), cost: 1
   6: f137_0_test_GE -> f137_0_test_GE : arg1'=1+arg1, (arg1-arg2 < 0 /\ arg2 > 0), cost: 1
   8: f137_0_test_GE -> f137_0_test_GE : arg1'=0, arg2'=0, (arg1 > 0 /\ arg1-arg2 < 0 /\ arg2 > 0 /\ -arg1 < 0), cost: 1
   9: f137_0_test_GE -> f137_0_test_GE : arg1'=0, arg2'=0, (arg1 > 0 /\ arg1-arg2 < 0 /\ arg2 > 0 /\ -arg1 < 0), cost: 1
   7: __init -> f137_0_test_GE : arg1'=0, arg2'=10, T, cost: 1

	unrolling

	Original rule:
	f137_0_test_GE -> f137_0_test_GE : arg1'=0, arg2'=arg1, (arg1-arg2 < 0 /\ arg2 > 0), cost: 1
	New rule:
	f137_0_test_GE -> f137_0_test_GE : arg1'=0, arg2'=0, (arg1 > 0 /\ arg1-arg2 < 0 /\ arg2 > 0 /\ -arg1 < 0), cost: 1
	rule cannot be iterated more than once

	Trace

	7[T]
	
	Blocked

	[{}, {5[T]}]

Step with 6

	Trace

	7[T], 6[(arg1-arg2 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {5[T]}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2
   5: f137_0_test_GE -> f137_0_test_GE : arg1'=0, arg2'=arg1, (arg1-arg2 < 0 /\ arg2 > 0), cost: 1
   6: f137_0_test_GE -> f137_0_test_GE : arg1'=1+arg1, (arg1-arg2 < 0 /\ arg2 > 0), cost: 1
   8: f137_0_test_GE -> f137_0_test_GE : arg1'=0, arg2'=0, (arg1 > 0 /\ arg1-arg2 < 0 /\ arg2 > 0 /\ -arg1 < 0), cost: 1
   9: f137_0_test_GE -> f137_0_test_GE : arg1'=0, arg2'=0, (arg1 > 0 /\ arg1-arg2 < 0 /\ arg2 > 0 /\ -arg1 < 0), cost: 1
  10: f137_0_test_GE -> f137_0_test_GE : arg1'=n+arg1, (-1+n >= 0 /\ arg2 > 0 /\ 1-n-arg1+arg2 > 0), cost: 1
   7: __init -> f137_0_test_GE : arg1'=0, arg2'=10, T, cost: 1

	Loop Acceleration

	Original rule:
	f137_0_test_GE -> f137_0_test_GE : arg1'=1+arg1, (arg1-arg2 < 0 /\ arg2 > 0), cost: 1
	New rule:
	f137_0_test_GE -> f137_0_test_GE : arg1'=n+arg1, (-1+n >= 0 /\ arg2 > 0 /\ 1-n-arg1+arg2 > 0), cost: 1

		-arg1+arg2 > 0 [0]: montonic decrease yields 1-n-arg1+arg2 > 0
		
		-arg1+arg2 > 0 [1]: eventual increase yields (1 <= 0 /\ -arg1+arg2 > 0)
		
		arg2 > 0 [0]: monotonic increase yields arg2 > 0
		
		Replacement map: {-arg1+arg2 > 0 -> 1-n-arg1+arg2 > 0, arg2 > 0 -> arg2 > 0}

	Trace

	7[T], 10[(-1+n >= 0 /\ arg2 > 0 /\ 1-n-arg1+arg2 > 0)]
	
	Blocked

	[{}, {5[T]}, {6[T], 10[T]}]

Step with 5

	Trace

	7[T], 10[(-1+n >= 0 /\ arg2 > 0 /\ 1-n-arg1+arg2 > 0)], 5[(arg1-arg2 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {5[T]}, {6[T], 10[T]}, {}]

Covered

	Trace

	7[T], 10[(-1+n >= 0 /\ arg2 > 0 /\ 1-n-arg1+arg2 > 0)]
	
	Blocked

	[{}, {5[T]}, {5[T], 6[T], 10[T]}]

Step with 8

	Trace

	7[T], 10[(-1+n >= 0 /\ arg2 > 0 /\ 1-n-arg1+arg2 > 0)], 8[(arg1 > 0 /\ arg1-arg2 < 0 /\ arg2 > 0 /\ -arg1 < 0)]
	
	Blocked

	[{}, {5[T]}, {5[T], 6[T], 10[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Acceleration Failed

marked recursive suffix as redundant

Backtrack

	Trace

	7[T], 10[(-1+n >= 0 /\ arg2 > 0 /\ 1-n-arg1+arg2 > 0)]
	
	Blocked

	[{}, {5[T]}, {5[T], 6[T], 8[T], 10[T]}]

Step with 9

	Trace

	7[T], 10[(-1+n >= 0 /\ arg2 > 0 /\ 1-n-arg1+arg2 > 0)], 9[(arg1 > 0 /\ arg1-arg2 < 0 /\ arg2 > 0 /\ -arg1 < 0)]
	
	Blocked

	[{}, {5[T]}, {5[T], 6[T], 8[T], 10[T]}, {9[T]}]

Acceleration Failed

marked recursive suffix as redundant

Backtrack

	Trace

	7[T], 10[(-1+n >= 0 /\ arg2 > 0 /\ 1-n-arg1+arg2 > 0)]
	
	Blocked

	[{}, {5[T]}, {5[T], 6[T], 8[T], 9[T], 10[T]}]

Backtrack

	Trace

	7[T]
	
	Blocked

	[{}, {5[T], 10[T]}]

Step with 6

	Trace

	7[T], 6[(arg1-arg2 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {5[T], 9[T], 10[T]}, {}]

Covered

	Trace

	7[T]
	
	Blocked

	[{}, {5[T], 6[T], 9[T], 10[T]}]

Backtrack

	Trace

	Blocked

	[{7[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
