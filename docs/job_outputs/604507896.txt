NO

Initial ITS

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5 arg6
   0: f1_0_main_Load -> f543_0_createTree_GT : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, arg5'=arg5p1, arg6'=arg6p1, (-arg2p1+arg2 == 0 /\ arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0 /\ 1-arg3p1 == 0), cost: 1
   1: f1_0_main_Load -> f1156_0_random_ArrayAccess : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, arg4'=arg4p2, arg5'=arg5p2, arg6'=arg6p2, (-arg3p2 == 0 /\ arg1 > 0 /\ -arg2p2+arg2 == 0 /\ 1+x8 > 0 /\ arg2 > 0 /\ -1+arg1p2 > 0), cost: 1
   3: f1_0_main_Load -> f3334_0_main_LE : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, arg4'=arg4p4, arg5'=arg5p4, arg6'=arg6p4, (-arg1+arg1p4 <= 0 /\ 1+arg4p4 > 0 /\ arg1 > 0 /\ 1+arg2p4 > 0 /\ arg1p4 > 0 /\ 1-arg1+arg2p4 <= 0 /\ arg2 > 0 /\ -1-arg3p4+arg4p4 == 0 /\ 2-arg5p4 == 0), cost: 1
   8: f543_0_createTree_GT -> f998_0_createTree_LE : arg1'=arg1p9, arg2'=arg2p9, arg3'=arg3p9, arg4'=arg4p9, arg5'=arg5p9, arg6'=arg6p9, (arg3 > 0 /\ arg1-arg1p9 == 0 /\ arg1 > 0 /\ 1+arg3-arg4p9 == 0 /\ 1+arg2p9 > 0 /\ 1+arg2 > 0 /\ -arg3p9+arg2 == 0), cost: 1
   4: f1156_0_random_ArrayAccess -> f3334_0_main_LE : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, arg4'=arg4p5, arg5'=arg5p5, arg6'=arg6p5, (-1+arg2p5 > 0 /\ 1+x150-arg5p5 == 0 /\ -arg3 == 0 /\ x150 > 0 /\ 1-arg1+arg1p5 <= 0 /\ 1+arg4p5 > 0 /\ -1+arg1 > 0 /\ arg1p5 > 0 /\ 2-arg1+arg4 <= 0 /\ arg2p5-arg1 <= 0 /\ -1-arg3p5+arg4p5 == 0), cost: 1
   2: f814_0_createTree_Return -> f1156_0_random_ArrayAccess : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, arg4'=arg4p3, arg5'=arg5p3, arg6'=arg6p3, (-arg2+arg1p3 <= 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ 2+arg5-arg2 <= 0 /\ -arg4 == 0 /\ -1+arg1p3 > 0 /\ -arg3p3 == 0 /\ arg5-arg4p3 == 0), cost: 1
   5: f3334_0_main_LE -> f3430_0_main_InvokeMethod : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, arg4'=arg4p6, arg5'=arg5p6, arg6'=arg6p6, (1+arg6p6-arg2 <= 0 /\ arg3-arg2p6 == 0 /\ arg1 > 0 /\ -arg2+arg4p6 <= 0 /\ -arg2+arg1p6 <= 0 /\ arg2 > 0 /\ x27 > 0 /\ arg4 > 0 /\ arg4p6 > 0 /\ -arg1+arg1p6 <= 0 /\ 1+arg3p6 > 0 /\ arg1p6 > 0), cost: 1
   6: f3334_0_main_LE -> f3430_0_main_InvokeMethod : arg1'=arg1p7, arg2'=arg2p7, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, arg6'=arg6p7, (arg4p7 > 0 /\ arg1p7 > 0 /\ arg1 > 0 /\ arg3-arg2p7 == 0 /\ arg1p7-arg1 <= 0 /\ arg4p7-arg2 <= 0 /\ -1+arg3p7 > 0 /\ arg1p7-arg2 <= 0 /\ arg2 > 0 /\ arg4 > 0 /\ x38 > 0 /\ 1-arg2+arg6p7 <= 0), cost: 1
  12: f3334_0_main_LE -> f2378_0_random_ArrayAccess : arg1'=arg1p13, arg2'=arg2p13, arg3'=arg3p13, arg4'=arg4p13, arg5'=arg5p13, arg6'=arg6p13, (x75 > 0 /\ arg1 > 0 /\ arg1p13-arg2 <= 0 /\ arg1p13 > 0 /\ 1+arg2p13-arg2 <= 0 /\ arg2 > 0 /\ arg4 > 0), cost: 1
  19: f3334_0_main_LE -> f3446_0_visit_NE : arg1'=arg1p20, arg2'=arg2p20, arg3'=arg3p20, arg4'=arg4p20, arg5'=arg5p20, arg6'=arg6p20, (2-arg2+arg2p20 <= 0 /\ -arg3p20+arg2p20 == 0 /\ 2+arg4p20-arg2 <= 0 /\ x120 > 0 /\ arg1 > 0 /\ arg1p20-arg2 <= 0 /\ arg1p20 > 0 /\ -1+arg4 < 0 /\ arg2 > 0), cost: 1
   7: f3430_0_main_InvokeMethod -> f3334_0_main_LE : arg1'=arg1p8, arg2'=arg2p8, arg3'=arg3p8, arg4'=arg4p8, arg5'=arg5p8, arg6'=arg6p8, (x49 > 0 /\ -arg4p8+arg2 == 0 /\ arg3 > 0 /\ arg1 > 0 /\ arg1p8 > 0 /\ -arg3+arg1p8 <= 0 /\ arg1p8-arg4 <= 0 /\ 1+arg6-arg4 <= 0 /\ -arg1+arg1p8 <= 0 /\ -1-arg3p8+arg2 == 0 /\ arg4 > 0 /\ arg2p8 > 0), cost: 1
  13: f3430_0_main_InvokeMethod -> f2378_0_random_ArrayAccess : arg1'=arg1p14, arg2'=arg2p14, arg3'=arg3p14, arg4'=arg4p14, arg5'=arg5p14, arg6'=arg6p14, (x83 > 0 /\ arg6-arg2p14 == 0 /\ arg1 > 0 /\ arg1p14-arg4 <= 0 /\ arg1p14 > 0 /\ 1+arg6-arg4 <= 0 /\ 1+arg3 > 0 /\ arg4 > 0), cost: 1
   9: f998_0_createTree_LE -> f543_0_createTree_GT : arg1'=arg1p10, arg2'=arg2p10, arg3'=arg3p10, arg4'=arg4p10, arg5'=arg5p10, arg6'=arg6p10, (-1+arg1-arg1p10 == 0 /\ arg1 > 0 /\ -1+arg4 > 0 /\ arg2 > 0 /\ arg4-arg3p10 == 0 /\ -1 < 0 /\ arg3-arg2p10 == 0), cost: 1
  10: f998_0_createTree_LE -> f998_0_createTree_LE : arg1'=arg1p11, arg2'=arg2p11, arg3'=arg3p11, arg4'=arg4p11, arg5'=arg5p11, arg6'=arg6p11, (-1-arg2p11+arg2 == 0 /\ arg3-arg3p11 == 0 /\ -arg4p11+arg4 == 0 /\ 1-arg1 == 0 /\ 1-arg1p11 == 0 /\ -1+arg4 > 0 /\ arg2 > 0), cost: 1
  11: f998_0_createTree_LE -> f998_0_createTree_LE : arg1'=arg1p12, arg2'=arg2p12, arg3'=arg3p12, arg4'=arg4p12, arg5'=arg5p12, arg6'=arg6p12, (-arg1p12+arg1 == 0 /\ arg3-arg3p12 == 0 /\ arg1 > 0 /\ -1-arg2p12+arg2 == 0 /\ -1+arg4 > 0 /\ arg2 > 0 /\ -1 < 0), cost: 1
  14: f2378_0_random_ArrayAccess -> f3147_0_getRandom_LT : arg1'=arg1p15, arg2'=arg2p15, arg3'=arg3p15, arg4'=arg4p15, arg5'=arg5p15, arg6'=arg6p15, (-1+arg3p15-arg1p15 == 0 /\ arg1 > 0 /\ 1+x91 > 0 /\ 1-arg1+arg2 <= 0 /\ 1+x91-arg4p15 == 0 /\ 1+arg3p15 > 0 /\ -arg1+arg2p15 <= 0 /\ arg2p15 > 0), cost: 1
  15: f3147_0_getRandom_LT -> f3577_0_getRandom_LT : arg1'=arg1p16, arg2'=arg2p16, arg3'=arg3p16, arg4'=arg4p16, arg5'=arg5p16, arg6'=arg6p16, (arg3p16 > 0 /\ 1+arg4p16 > 0 /\ arg1-arg1p16 == 0 /\ 1+arg4 > 0 /\ 1-arg5p16+arg4 == 0 /\ 1+arg3 > 0 /\ -2+arg2 > 0 /\ -2-arg3p16+arg2 >= 0 /\ -1+arg4p16-arg2p16 == 0), cost: 1
  16: f3577_0_getRandom_LT -> f3577_0_getRandom_LT : arg1'=arg1p17, arg2'=arg2p17, arg3'=arg3p17, arg4'=arg4p17, arg5'=arg5p17, arg6'=arg6p17, (arg3p17 > 0 /\ -arg4p17+arg2 == 0 /\ 1+arg4 > 0 /\ 2+arg3p17-arg3 <= 0 /\ -1+arg2-arg2p17 == 0 /\ arg1-arg1p17 == 0 /\ -2+arg3 > 0 /\ arg5-arg5p17 == 0), cost: 1
  17: f3577_0_getRandom_LT -> f3147_0_getRandom_LT : arg1'=arg1p18, arg2'=arg2p18, arg3'=arg3p18, arg4'=arg4p18, arg5'=arg5p18, arg6'=arg6p18, (arg3 > 0 /\ arg5-arg4p18 == 0 /\ -arg3p18+arg1 == 0 /\ -1-arg1p18+arg1 == 0 /\ arg4 < 0 /\ 1+arg2p18 > 0), cost: 1
  18: f3577_0_getRandom_LT -> f3147_0_getRandom_LT : arg1'=arg1p19, arg2'=arg2p19, arg3'=arg3p19, arg4'=arg4p19, arg5'=arg5p19, arg6'=arg6p19, (-1+arg1-arg1p19 == 0 /\ -1+arg3 > 0 /\ 1+arg4 > 0 /\ -arg3p19+arg1 == 0 /\ -arg4p19+arg5 == 0 /\ 1+arg2p19 > 0), cost: 1
  20: f3446_0_visit_NE -> f3530_0_visit_NULL : arg1'=arg1p21, arg2'=arg2p21, arg3'=arg3p21, arg4'=arg4p21, arg5'=arg5p21, arg6'=arg6p21, (2-arg1+arg2 <= 0 /\ -arg1p21+arg2 == 0 /\ arg1 > 0 /\ 1+arg2p21 > 0 /\ -arg3+arg2 == 0 /\ 2-arg1+arg4 <= 0), cost: 1
  21: f3530_0_visit_NULL -> f3446_0_visit_NE : arg1'=arg1p22, arg2'=arg2p22, arg3'=arg3p22, arg4'=arg4p22, arg5'=arg5p22, arg6'=arg6p22, (arg1-arg2p22 == 0 /\ arg1p22 > 0 /\ arg2 > 0), cost: 1
  22: f3530_0_visit_NULL -> f3530_0_visit_NULL : arg1'=arg1p23, arg2'=arg2p23, arg3'=arg3p23, arg4'=arg4p23, arg5'=arg5p23, arg6'=arg6p23, (1+arg2p23-arg2 <= 0 /\ arg3-arg3p23 == 0 /\ arg2 > 0 /\ -arg1p23+arg1 == 0 /\ 1+arg2p23 > 0), cost: 1
  23: __init -> f1_0_main_Load : arg1'=arg1p24, arg2'=arg2p24, arg3'=arg3p24, arg4'=arg4p24, arg5'=arg5p24, arg6'=arg6p24, T, cost: 1

Simplified Transitions

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5 arg6
  24: f1_0_main_Load -> f543_0_createTree_GT : arg1'=arg1p1, arg3'=1, arg4'=arg4p1, arg5'=arg5p1, arg6'=arg6p1, (arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0), cost: 1
  25: f1_0_main_Load -> f1156_0_random_ArrayAccess : arg1'=arg1p2, arg3'=0, arg4'=arg4p2, arg5'=arg5p2, arg6'=arg6p2, (arg1 > 0 /\ arg2 > 0 /\ -1+arg1p2 > 0), cost: 1
  27: f1_0_main_Load -> f3334_0_main_LE : arg1'=arg1p4, arg2'=arg2p4, arg3'=-1+arg4p4, arg4'=arg4p4, arg5'=2, arg6'=arg6p4, (-arg1+arg1p4 <= 0 /\ 1+arg4p4 > 0 /\ arg1 > 0 /\ 1+arg2p4 > 0 /\ arg1p4 > 0 /\ 1-arg1+arg2p4 <= 0 /\ arg2 > 0), cost: 1
  32: f543_0_createTree_GT -> f998_0_createTree_LE : arg2'=arg2p9, arg3'=arg2, arg4'=1+arg3, arg5'=arg5p9, arg6'=arg6p9, (arg3 > 0 /\ arg1 > 0 /\ 1+arg2p9 > 0 /\ 1+arg2 > 0), cost: 1
  28: f1156_0_random_ArrayAccess -> f3334_0_main_LE : arg1'=arg1p5, arg2'=arg2p5, arg3'=-1+arg4p5, arg4'=arg4p5, arg5'=1+x150, arg6'=arg6p5, (-1+arg2p5 > 0 /\ -arg3 == 0 /\ x150 > 0 /\ 1-arg1+arg1p5 <= 0 /\ 1+arg4p5 > 0 /\ -1+arg1 > 0 /\ arg1p5 > 0 /\ 2-arg1+arg4 <= 0 /\ arg2p5-arg1 <= 0), cost: 1
  26: f814_0_createTree_Return -> f1156_0_random_ArrayAccess : arg1'=arg1p3, arg2'=arg2p3, arg3'=0, arg4'=arg5, arg5'=arg5p3, arg6'=arg6p3, (-arg2+arg1p3 <= 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ 2+arg5-arg2 <= 0 /\ -arg4 == 0 /\ -1+arg1p3 > 0), cost: 1
  29: f3334_0_main_LE -> f3430_0_main_InvokeMethod : arg1'=arg1p6, arg2'=arg3, arg3'=arg3p6, arg4'=arg4p6, arg5'=arg5p6, arg6'=arg6p6, (1+arg6p6-arg2 <= 0 /\ arg1 > 0 /\ -arg2+arg4p6 <= 0 /\ -arg2+arg1p6 <= 0 /\ arg2 > 0 /\ arg4 > 0 /\ arg4p6 > 0 /\ -arg1+arg1p6 <= 0 /\ 1+arg3p6 > 0 /\ arg1p6 > 0), cost: 1
  30: f3334_0_main_LE -> f3430_0_main_InvokeMethod : arg1'=arg1p7, arg2'=arg3, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, arg6'=arg6p7, (arg4p7 > 0 /\ arg1p7 > 0 /\ arg1 > 0 /\ arg1p7-arg1 <= 0 /\ arg4p7-arg2 <= 0 /\ -1+arg3p7 > 0 /\ arg1p7-arg2 <= 0 /\ arg2 > 0 /\ arg4 > 0 /\ 1-arg2+arg6p7 <= 0), cost: 1
  36: f3334_0_main_LE -> f2378_0_random_ArrayAccess : arg1'=arg1p13, arg2'=arg2p13, arg3'=arg3p13, arg4'=arg4p13, arg5'=arg5p13, arg6'=arg6p13, (arg1 > 0 /\ arg1p13-arg2 <= 0 /\ arg1p13 > 0 /\ 1+arg2p13-arg2 <= 0 /\ arg2 > 0 /\ arg4 > 0), cost: 1
  43: f3334_0_main_LE -> f3446_0_visit_NE : arg1'=arg1p20, arg2'=arg3p20, arg3'=arg3p20, arg4'=arg4p20, arg5'=arg5p20, arg6'=arg6p20, (2+arg4p20-arg2 <= 0 /\ arg1 > 0 /\ arg1p20-arg2 <= 0 /\ 2+arg3p20-arg2 <= 0 /\ arg1p20 > 0 /\ -1+arg4 < 0 /\ arg2 > 0), cost: 1
  31: f3430_0_main_InvokeMethod -> f3334_0_main_LE : arg1'=arg1p8, arg2'=arg2p8, arg3'=-1+arg2, arg4'=arg2, arg5'=arg5p8, arg6'=arg6p8, (arg3 > 0 /\ arg1 > 0 /\ arg1p8 > 0 /\ -arg3+arg1p8 <= 0 /\ arg1p8-arg4 <= 0 /\ 1+arg6-arg4 <= 0 /\ -arg1+arg1p8 <= 0 /\ arg4 > 0 /\ arg2p8 > 0), cost: 1
  37: f3430_0_main_InvokeMethod -> f2378_0_random_ArrayAccess : arg1'=arg1p14, arg2'=arg6, arg3'=arg3p14, arg4'=arg4p14, arg5'=arg5p14, arg6'=arg6p14, (arg1 > 0 /\ arg1p14-arg4 <= 0 /\ arg1p14 > 0 /\ 1+arg6-arg4 <= 0 /\ 1+arg3 > 0 /\ arg4 > 0), cost: 1
  33: f998_0_createTree_LE -> f543_0_createTree_GT : arg1'=-1+arg1, arg2'=arg3, arg3'=arg4, arg4'=arg4p10, arg5'=arg5p10, arg6'=arg6p10, (arg1 > 0 /\ -1+arg4 > 0 /\ arg2 > 0), cost: 1
  34: f998_0_createTree_LE -> f998_0_createTree_LE : arg1'=1, arg2'=-1+arg2, arg5'=arg5p11, arg6'=arg6p11, (1-arg1 == 0 /\ -1+arg4 > 0 /\ arg2 > 0), cost: 1
  35: f998_0_createTree_LE -> f998_0_createTree_LE : arg2'=-1+arg2, arg4'=arg4p12, arg5'=arg5p12, arg6'=arg6p12, (arg1 > 0 /\ -1+arg4 > 0 /\ arg2 > 0), cost: 1
  38: f2378_0_random_ArrayAccess -> f3147_0_getRandom_LT : arg1'=-1+arg3p15, arg2'=arg2p15, arg3'=arg3p15, arg4'=1+x91, arg5'=arg5p15, arg6'=arg6p15, (arg1 > 0 /\ 1+x91 > 0 /\ 1-arg1+arg2 <= 0 /\ 1+arg3p15 > 0 /\ -arg1+arg2p15 <= 0 /\ arg2p15 > 0), cost: 1
  39: f3147_0_getRandom_LT -> f3577_0_getRandom_LT : arg2'=-1+arg4p16, arg3'=arg3p16, arg4'=arg4p16, arg5'=1+arg4, arg6'=arg6p16, (arg3p16 > 0 /\ 1+arg4p16 > 0 /\ 1+arg4 > 0 /\ 1+arg3 > 0 /\ -2+arg2 > 0 /\ -2-arg3p16+arg2 >= 0), cost: 1
  40: f3577_0_getRandom_LT -> f3577_0_getRandom_LT : arg2'=-1+arg2, arg3'=arg3p17, arg4'=arg2, arg6'=arg6p17, (arg3p17 > 0 /\ 1+arg4 > 0 /\ 2+arg3p17-arg3 <= 0 /\ -2+arg3 > 0), cost: 1
  41: f3577_0_getRandom_LT -> f3147_0_getRandom_LT : arg1'=-1+arg1, arg2'=arg2p18, arg3'=arg1, arg4'=arg5, arg5'=arg5p18, arg6'=arg6p18, (arg3 > 0 /\ arg4 < 0 /\ 1+arg2p18 > 0), cost: 1
  42: f3577_0_getRandom_LT -> f3147_0_getRandom_LT : arg1'=-1+arg1, arg2'=arg2p19, arg3'=arg1, arg4'=arg5, arg5'=arg5p19, arg6'=arg6p19, (-1+arg3 > 0 /\ 1+arg4 > 0 /\ 1+arg2p19 > 0), cost: 1
  44: f3446_0_visit_NE -> f3530_0_visit_NULL : arg1'=arg2, arg2'=arg2p21, arg3'=arg3p21, arg4'=arg4p21, arg5'=arg5p21, arg6'=arg6p21, (2-arg1+arg2 <= 0 /\ arg1 > 0 /\ 1+arg2p21 > 0 /\ -arg3+arg2 == 0 /\ 2-arg1+arg4 <= 0), cost: 1
  45: f3530_0_visit_NULL -> f3446_0_visit_NE : arg1'=arg1p22, arg2'=arg1, arg3'=arg3p22, arg4'=arg4p22, arg5'=arg5p22, arg6'=arg6p22, (arg1p22 > 0 /\ arg2 > 0), cost: 1
  46: f3530_0_visit_NULL -> f3530_0_visit_NULL : arg2'=arg2p23, arg4'=arg4p23, arg5'=arg5p23, arg6'=arg6p23, (1+arg2p23-arg2 <= 0 /\ arg2 > 0 /\ 1+arg2p23 > 0), cost: 1
  23: __init -> f1_0_main_Load : arg1'=arg1p24, arg2'=arg2p24, arg3'=arg3p24, arg4'=arg4p24, arg5'=arg5p24, arg6'=arg6p24, T, cost: 1

	Propagated Equalities

	Original rule:
	f1_0_main_Load -> f543_0_createTree_GT : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, arg5'=arg5p1, arg6'=arg6p1, (-arg2p1+arg2 == 0 /\ arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0 /\ 1-arg3p1 == 0), cost: 1
	New rule:
	f1_0_main_Load -> f543_0_createTree_GT : arg1'=arg1p1, arg2'=arg2, arg3'=1, arg4'=arg4p1, arg5'=arg5p1, arg6'=arg6p1, (0 == 0 /\ arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0), cost: 1
	
		propagated equality arg2p1 = arg2
		
		propagated equality arg3p1 = 1
		
	Simplified Guard

	Original rule:
	f1_0_main_Load -> f543_0_createTree_GT : arg1'=arg1p1, arg2'=arg2, arg3'=1, arg4'=arg4p1, arg5'=arg5p1, arg6'=arg6p1, (0 == 0 /\ arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f543_0_createTree_GT : arg1'=arg1p1, arg2'=arg2, arg3'=1, arg4'=arg4p1, arg5'=arg5p1, arg6'=arg6p1, (arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f1_0_main_Load -> f543_0_createTree_GT : arg1'=arg1p1, arg2'=arg2, arg3'=1, arg4'=arg4p1, arg5'=arg5p1, arg6'=arg6p1, (arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f543_0_createTree_GT : arg1'=arg1p1, arg3'=1, arg4'=arg4p1, arg5'=arg5p1, arg6'=arg6p1, (arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f1_0_main_Load -> f1156_0_random_ArrayAccess : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, arg4'=arg4p2, arg5'=arg5p2, arg6'=arg6p2, (-arg3p2 == 0 /\ arg1 > 0 /\ -arg2p2+arg2 == 0 /\ 1+x8 > 0 /\ arg2 > 0 /\ -1+arg1p2 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f1156_0_random_ArrayAccess : arg1'=arg1p2, arg2'=arg2, arg3'=0, arg4'=arg4p2, arg5'=arg5p2, arg6'=arg6p2, (0 == 0 /\ arg1 > 0 /\ 1+x8 > 0 /\ arg2 > 0 /\ -1+arg1p2 > 0), cost: 1
	
		propagated equality arg3p2 = 0
		
		propagated equality arg2p2 = arg2
		
	Simplified Guard

	Original rule:
	f1_0_main_Load -> f1156_0_random_ArrayAccess : arg1'=arg1p2, arg2'=arg2, arg3'=0, arg4'=arg4p2, arg5'=arg5p2, arg6'=arg6p2, (0 == 0 /\ arg1 > 0 /\ 1+x8 > 0 /\ arg2 > 0 /\ -1+arg1p2 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f1156_0_random_ArrayAccess : arg1'=arg1p2, arg2'=arg2, arg3'=0, arg4'=arg4p2, arg5'=arg5p2, arg6'=arg6p2, (arg1 > 0 /\ 1+x8 > 0 /\ arg2 > 0 /\ -1+arg1p2 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	f1_0_main_Load -> f1156_0_random_ArrayAccess : arg1'=arg1p2, arg2'=arg2, arg3'=0, arg4'=arg4p2, arg5'=arg5p2, arg6'=arg6p2, (arg1 > 0 /\ 1+x8 > 0 /\ arg2 > 0 /\ -1+arg1p2 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f1156_0_random_ArrayAccess : arg1'=arg1p2, arg2'=arg2, arg3'=0, arg4'=arg4p2, arg5'=arg5p2, arg6'=arg6p2, (arg1 > 0 /\ arg2 > 0 /\ -1+arg1p2 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f1_0_main_Load -> f1156_0_random_ArrayAccess : arg1'=arg1p2, arg2'=arg2, arg3'=0, arg4'=arg4p2, arg5'=arg5p2, arg6'=arg6p2, (arg1 > 0 /\ arg2 > 0 /\ -1+arg1p2 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f1156_0_random_ArrayAccess : arg1'=arg1p2, arg3'=0, arg4'=arg4p2, arg5'=arg5p2, arg6'=arg6p2, (arg1 > 0 /\ arg2 > 0 /\ -1+arg1p2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f814_0_createTree_Return -> f1156_0_random_ArrayAccess : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, arg4'=arg4p3, arg5'=arg5p3, arg6'=arg6p3, (-arg2+arg1p3 <= 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ 2+arg5-arg2 <= 0 /\ -arg4 == 0 /\ -1+arg1p3 > 0 /\ -arg3p3 == 0 /\ arg5-arg4p3 == 0), cost: 1
	New rule:
	f814_0_createTree_Return -> f1156_0_random_ArrayAccess : arg1'=arg1p3, arg2'=arg2p3, arg3'=0, arg4'=arg5, arg5'=arg5p3, arg6'=arg6p3, (0 == 0 /\ -arg2+arg1p3 <= 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ 2+arg5-arg2 <= 0 /\ -arg4 == 0 /\ -1+arg1p3 > 0), cost: 1
	
		propagated equality arg3p3 = 0
		
		propagated equality arg4p3 = arg5
		
	Simplified Guard

	Original rule:
	f814_0_createTree_Return -> f1156_0_random_ArrayAccess : arg1'=arg1p3, arg2'=arg2p3, arg3'=0, arg4'=arg5, arg5'=arg5p3, arg6'=arg6p3, (0 == 0 /\ -arg2+arg1p3 <= 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ 2+arg5-arg2 <= 0 /\ -arg4 == 0 /\ -1+arg1p3 > 0), cost: 1
	New rule:
	f814_0_createTree_Return -> f1156_0_random_ArrayAccess : arg1'=arg1p3, arg2'=arg2p3, arg3'=0, arg4'=arg5, arg5'=arg5p3, arg6'=arg6p3, (-arg2+arg1p3 <= 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ 2+arg5-arg2 <= 0 /\ -arg4 == 0 /\ -1+arg1p3 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f1_0_main_Load -> f3334_0_main_LE : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, arg4'=arg4p4, arg5'=arg5p4, arg6'=arg6p4, (-arg1+arg1p4 <= 0 /\ 1+arg4p4 > 0 /\ arg1 > 0 /\ 1+arg2p4 > 0 /\ arg1p4 > 0 /\ 1-arg1+arg2p4 <= 0 /\ arg2 > 0 /\ -1-arg3p4+arg4p4 == 0 /\ 2-arg5p4 == 0), cost: 1
	New rule:
	f1_0_main_Load -> f3334_0_main_LE : arg1'=arg1p4, arg2'=arg2p4, arg3'=-1+arg4p4, arg4'=arg4p4, arg5'=2, arg6'=arg6p4, (0 == 0 /\ -arg1+arg1p4 <= 0 /\ 1+arg4p4 > 0 /\ arg1 > 0 /\ 1+arg2p4 > 0 /\ arg1p4 > 0 /\ 1-arg1+arg2p4 <= 0 /\ arg2 > 0), cost: 1
	
		propagated equality arg3p4 = -1+arg4p4
		
		propagated equality arg5p4 = 2
		
	Simplified Guard

	Original rule:
	f1_0_main_Load -> f3334_0_main_LE : arg1'=arg1p4, arg2'=arg2p4, arg3'=-1+arg4p4, arg4'=arg4p4, arg5'=2, arg6'=arg6p4, (0 == 0 /\ -arg1+arg1p4 <= 0 /\ 1+arg4p4 > 0 /\ arg1 > 0 /\ 1+arg2p4 > 0 /\ arg1p4 > 0 /\ 1-arg1+arg2p4 <= 0 /\ arg2 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f3334_0_main_LE : arg1'=arg1p4, arg2'=arg2p4, arg3'=-1+arg4p4, arg4'=arg4p4, arg5'=2, arg6'=arg6p4, (-arg1+arg1p4 <= 0 /\ 1+arg4p4 > 0 /\ arg1 > 0 /\ 1+arg2p4 > 0 /\ arg1p4 > 0 /\ 1-arg1+arg2p4 <= 0 /\ arg2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f1156_0_random_ArrayAccess -> f3334_0_main_LE : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, arg4'=arg4p5, arg5'=arg5p5, arg6'=arg6p5, (-1+arg2p5 > 0 /\ 1+x150-arg5p5 == 0 /\ -arg3 == 0 /\ x150 > 0 /\ 1-arg1+arg1p5 <= 0 /\ 1+arg4p5 > 0 /\ -1+arg1 > 0 /\ arg1p5 > 0 /\ 2-arg1+arg4 <= 0 /\ arg2p5-arg1 <= 0 /\ -1-arg3p5+arg4p5 == 0), cost: 1
	New rule:
	f1156_0_random_ArrayAccess -> f3334_0_main_LE : arg1'=arg1p5, arg2'=arg2p5, arg3'=-1+arg4p5, arg4'=arg4p5, arg5'=1+x150, arg6'=arg6p5, (0 == 0 /\ -1+arg2p5 > 0 /\ -arg3 == 0 /\ x150 > 0 /\ 1-arg1+arg1p5 <= 0 /\ 1+arg4p5 > 0 /\ -1+arg1 > 0 /\ arg1p5 > 0 /\ 2-arg1+arg4 <= 0 /\ arg2p5-arg1 <= 0), cost: 1
	
		propagated equality arg5p5 = 1+x150
		
		propagated equality arg3p5 = -1+arg4p5
		
	Simplified Guard

	Original rule:
	f1156_0_random_ArrayAccess -> f3334_0_main_LE : arg1'=arg1p5, arg2'=arg2p5, arg3'=-1+arg4p5, arg4'=arg4p5, arg5'=1+x150, arg6'=arg6p5, (0 == 0 /\ -1+arg2p5 > 0 /\ -arg3 == 0 /\ x150 > 0 /\ 1-arg1+arg1p5 <= 0 /\ 1+arg4p5 > 0 /\ -1+arg1 > 0 /\ arg1p5 > 0 /\ 2-arg1+arg4 <= 0 /\ arg2p5-arg1 <= 0), cost: 1
	New rule:
	f1156_0_random_ArrayAccess -> f3334_0_main_LE : arg1'=arg1p5, arg2'=arg2p5, arg3'=-1+arg4p5, arg4'=arg4p5, arg5'=1+x150, arg6'=arg6p5, (-1+arg2p5 > 0 /\ -arg3 == 0 /\ x150 > 0 /\ 1-arg1+arg1p5 <= 0 /\ 1+arg4p5 > 0 /\ -1+arg1 > 0 /\ arg1p5 > 0 /\ 2-arg1+arg4 <= 0 /\ arg2p5-arg1 <= 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f3334_0_main_LE -> f3430_0_main_InvokeMethod : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, arg4'=arg4p6, arg5'=arg5p6, arg6'=arg6p6, (1+arg6p6-arg2 <= 0 /\ arg3-arg2p6 == 0 /\ arg1 > 0 /\ -arg2+arg4p6 <= 0 /\ -arg2+arg1p6 <= 0 /\ arg2 > 0 /\ x27 > 0 /\ arg4 > 0 /\ arg4p6 > 0 /\ -arg1+arg1p6 <= 0 /\ 1+arg3p6 > 0 /\ arg1p6 > 0), cost: 1
	New rule:
	f3334_0_main_LE -> f3430_0_main_InvokeMethod : arg1'=arg1p6, arg2'=arg3, arg3'=arg3p6, arg4'=arg4p6, arg5'=arg5p6, arg6'=arg6p6, (0 == 0 /\ 1+arg6p6-arg2 <= 0 /\ arg1 > 0 /\ -arg2+arg4p6 <= 0 /\ -arg2+arg1p6 <= 0 /\ arg2 > 0 /\ x27 > 0 /\ arg4 > 0 /\ arg4p6 > 0 /\ -arg1+arg1p6 <= 0 /\ 1+arg3p6 > 0 /\ arg1p6 > 0), cost: 1
	
		propagated equality arg2p6 = arg3
		
	Simplified Guard

	Original rule:
	f3334_0_main_LE -> f3430_0_main_InvokeMethod : arg1'=arg1p6, arg2'=arg3, arg3'=arg3p6, arg4'=arg4p6, arg5'=arg5p6, arg6'=arg6p6, (0 == 0 /\ 1+arg6p6-arg2 <= 0 /\ arg1 > 0 /\ -arg2+arg4p6 <= 0 /\ -arg2+arg1p6 <= 0 /\ arg2 > 0 /\ x27 > 0 /\ arg4 > 0 /\ arg4p6 > 0 /\ -arg1+arg1p6 <= 0 /\ 1+arg3p6 > 0 /\ arg1p6 > 0), cost: 1
	New rule:
	f3334_0_main_LE -> f3430_0_main_InvokeMethod : arg1'=arg1p6, arg2'=arg3, arg3'=arg3p6, arg4'=arg4p6, arg5'=arg5p6, arg6'=arg6p6, (1+arg6p6-arg2 <= 0 /\ arg1 > 0 /\ -arg2+arg4p6 <= 0 /\ -arg2+arg1p6 <= 0 /\ arg2 > 0 /\ x27 > 0 /\ arg4 > 0 /\ arg4p6 > 0 /\ -arg1+arg1p6 <= 0 /\ 1+arg3p6 > 0 /\ arg1p6 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	f3334_0_main_LE -> f3430_0_main_InvokeMethod : arg1'=arg1p6, arg2'=arg3, arg3'=arg3p6, arg4'=arg4p6, arg5'=arg5p6, arg6'=arg6p6, (1+arg6p6-arg2 <= 0 /\ arg1 > 0 /\ -arg2+arg4p6 <= 0 /\ -arg2+arg1p6 <= 0 /\ arg2 > 0 /\ x27 > 0 /\ arg4 > 0 /\ arg4p6 > 0 /\ -arg1+arg1p6 <= 0 /\ 1+arg3p6 > 0 /\ arg1p6 > 0), cost: 1
	New rule:
	f3334_0_main_LE -> f3430_0_main_InvokeMethod : arg1'=arg1p6, arg2'=arg3, arg3'=arg3p6, arg4'=arg4p6, arg5'=arg5p6, arg6'=arg6p6, (1+arg6p6-arg2 <= 0 /\ arg1 > 0 /\ -arg2+arg4p6 <= 0 /\ -arg2+arg1p6 <= 0 /\ arg2 > 0 /\ arg4 > 0 /\ arg4p6 > 0 /\ -arg1+arg1p6 <= 0 /\ 1+arg3p6 > 0 /\ arg1p6 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f3334_0_main_LE -> f3430_0_main_InvokeMethod : arg1'=arg1p7, arg2'=arg2p7, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, arg6'=arg6p7, (arg4p7 > 0 /\ arg1p7 > 0 /\ arg1 > 0 /\ arg3-arg2p7 == 0 /\ arg1p7-arg1 <= 0 /\ arg4p7-arg2 <= 0 /\ -1+arg3p7 > 0 /\ arg1p7-arg2 <= 0 /\ arg2 > 0 /\ arg4 > 0 /\ x38 > 0 /\ 1-arg2+arg6p7 <= 0), cost: 1
	New rule:
	f3334_0_main_LE -> f3430_0_main_InvokeMethod : arg1'=arg1p7, arg2'=arg3, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, arg6'=arg6p7, (0 == 0 /\ arg4p7 > 0 /\ arg1p7 > 0 /\ arg1 > 0 /\ arg1p7-arg1 <= 0 /\ arg4p7-arg2 <= 0 /\ -1+arg3p7 > 0 /\ arg1p7-arg2 <= 0 /\ arg2 > 0 /\ arg4 > 0 /\ x38 > 0 /\ 1-arg2+arg6p7 <= 0), cost: 1
	
		propagated equality arg2p7 = arg3
		
	Simplified Guard

	Original rule:
	f3334_0_main_LE -> f3430_0_main_InvokeMethod : arg1'=arg1p7, arg2'=arg3, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, arg6'=arg6p7, (0 == 0 /\ arg4p7 > 0 /\ arg1p7 > 0 /\ arg1 > 0 /\ arg1p7-arg1 <= 0 /\ arg4p7-arg2 <= 0 /\ -1+arg3p7 > 0 /\ arg1p7-arg2 <= 0 /\ arg2 > 0 /\ arg4 > 0 /\ x38 > 0 /\ 1-arg2+arg6p7 <= 0), cost: 1
	New rule:
	f3334_0_main_LE -> f3430_0_main_InvokeMethod : arg1'=arg1p7, arg2'=arg3, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, arg6'=arg6p7, (arg4p7 > 0 /\ arg1p7 > 0 /\ arg1 > 0 /\ arg1p7-arg1 <= 0 /\ arg4p7-arg2 <= 0 /\ -1+arg3p7 > 0 /\ arg1p7-arg2 <= 0 /\ arg2 > 0 /\ arg4 > 0 /\ x38 > 0 /\ 1-arg2+arg6p7 <= 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	f3334_0_main_LE -> f3430_0_main_InvokeMethod : arg1'=arg1p7, arg2'=arg3, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, arg6'=arg6p7, (arg4p7 > 0 /\ arg1p7 > 0 /\ arg1 > 0 /\ arg1p7-arg1 <= 0 /\ arg4p7-arg2 <= 0 /\ -1+arg3p7 > 0 /\ arg1p7-arg2 <= 0 /\ arg2 > 0 /\ arg4 > 0 /\ x38 > 0 /\ 1-arg2+arg6p7 <= 0), cost: 1
	New rule:
	f3334_0_main_LE -> f3430_0_main_InvokeMethod : arg1'=arg1p7, arg2'=arg3, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, arg6'=arg6p7, (arg4p7 > 0 /\ arg1p7 > 0 /\ arg1 > 0 /\ arg1p7-arg1 <= 0 /\ arg4p7-arg2 <= 0 /\ -1+arg3p7 > 0 /\ arg1p7-arg2 <= 0 /\ arg2 > 0 /\ arg4 > 0 /\ 1-arg2+arg6p7 <= 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f3430_0_main_InvokeMethod -> f3334_0_main_LE : arg1'=arg1p8, arg2'=arg2p8, arg3'=arg3p8, arg4'=arg4p8, arg5'=arg5p8, arg6'=arg6p8, (x49 > 0 /\ -arg4p8+arg2 == 0 /\ arg3 > 0 /\ arg1 > 0 /\ arg1p8 > 0 /\ -arg3+arg1p8 <= 0 /\ arg1p8-arg4 <= 0 /\ 1+arg6-arg4 <= 0 /\ -arg1+arg1p8 <= 0 /\ -1-arg3p8+arg2 == 0 /\ arg4 > 0 /\ arg2p8 > 0), cost: 1
	New rule:
	f3430_0_main_InvokeMethod -> f3334_0_main_LE : arg1'=arg1p8, arg2'=arg2p8, arg3'=-1+arg2, arg4'=arg2, arg5'=arg5p8, arg6'=arg6p8, (0 == 0 /\ x49 > 0 /\ arg3 > 0 /\ arg1 > 0 /\ arg1p8 > 0 /\ -arg3+arg1p8 <= 0 /\ arg1p8-arg4 <= 0 /\ 1+arg6-arg4 <= 0 /\ -arg1+arg1p8 <= 0 /\ arg4 > 0 /\ arg2p8 > 0), cost: 1
	
		propagated equality arg4p8 = arg2
		
		propagated equality arg3p8 = -1+arg2
		
	Simplified Guard

	Original rule:
	f3430_0_main_InvokeMethod -> f3334_0_main_LE : arg1'=arg1p8, arg2'=arg2p8, arg3'=-1+arg2, arg4'=arg2, arg5'=arg5p8, arg6'=arg6p8, (0 == 0 /\ x49 > 0 /\ arg3 > 0 /\ arg1 > 0 /\ arg1p8 > 0 /\ -arg3+arg1p8 <= 0 /\ arg1p8-arg4 <= 0 /\ 1+arg6-arg4 <= 0 /\ -arg1+arg1p8 <= 0 /\ arg4 > 0 /\ arg2p8 > 0), cost: 1
	New rule:
	f3430_0_main_InvokeMethod -> f3334_0_main_LE : arg1'=arg1p8, arg2'=arg2p8, arg3'=-1+arg2, arg4'=arg2, arg5'=arg5p8, arg6'=arg6p8, (x49 > 0 /\ arg3 > 0 /\ arg1 > 0 /\ arg1p8 > 0 /\ -arg3+arg1p8 <= 0 /\ arg1p8-arg4 <= 0 /\ 1+arg6-arg4 <= 0 /\ -arg1+arg1p8 <= 0 /\ arg4 > 0 /\ arg2p8 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	f3430_0_main_InvokeMethod -> f3334_0_main_LE : arg1'=arg1p8, arg2'=arg2p8, arg3'=-1+arg2, arg4'=arg2, arg5'=arg5p8, arg6'=arg6p8, (x49 > 0 /\ arg3 > 0 /\ arg1 > 0 /\ arg1p8 > 0 /\ -arg3+arg1p8 <= 0 /\ arg1p8-arg4 <= 0 /\ 1+arg6-arg4 <= 0 /\ -arg1+arg1p8 <= 0 /\ arg4 > 0 /\ arg2p8 > 0), cost: 1
	New rule:
	f3430_0_main_InvokeMethod -> f3334_0_main_LE : arg1'=arg1p8, arg2'=arg2p8, arg3'=-1+arg2, arg4'=arg2, arg5'=arg5p8, arg6'=arg6p8, (arg3 > 0 /\ arg1 > 0 /\ arg1p8 > 0 /\ -arg3+arg1p8 <= 0 /\ arg1p8-arg4 <= 0 /\ 1+arg6-arg4 <= 0 /\ -arg1+arg1p8 <= 0 /\ arg4 > 0 /\ arg2p8 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f543_0_createTree_GT -> f998_0_createTree_LE : arg1'=arg1p9, arg2'=arg2p9, arg3'=arg3p9, arg4'=arg4p9, arg5'=arg5p9, arg6'=arg6p9, (arg3 > 0 /\ arg1-arg1p9 == 0 /\ arg1 > 0 /\ 1+arg3-arg4p9 == 0 /\ 1+arg2p9 > 0 /\ 1+arg2 > 0 /\ -arg3p9+arg2 == 0), cost: 1
	New rule:
	f543_0_createTree_GT -> f998_0_createTree_LE : arg1'=arg1, arg2'=arg2p9, arg3'=arg2, arg4'=1+arg3, arg5'=arg5p9, arg6'=arg6p9, (0 == 0 /\ arg3 > 0 /\ arg1 > 0 /\ 1+arg2p9 > 0 /\ 1+arg2 > 0), cost: 1
	
		propagated equality arg1p9 = arg1
		
		propagated equality arg4p9 = 1+arg3
		
		propagated equality arg3p9 = arg2
		
	Simplified Guard

	Original rule:
	f543_0_createTree_GT -> f998_0_createTree_LE : arg1'=arg1, arg2'=arg2p9, arg3'=arg2, arg4'=1+arg3, arg5'=arg5p9, arg6'=arg6p9, (0 == 0 /\ arg3 > 0 /\ arg1 > 0 /\ 1+arg2p9 > 0 /\ 1+arg2 > 0), cost: 1
	New rule:
	f543_0_createTree_GT -> f998_0_createTree_LE : arg1'=arg1, arg2'=arg2p9, arg3'=arg2, arg4'=1+arg3, arg5'=arg5p9, arg6'=arg6p9, (arg3 > 0 /\ arg1 > 0 /\ 1+arg2p9 > 0 /\ 1+arg2 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f543_0_createTree_GT -> f998_0_createTree_LE : arg1'=arg1, arg2'=arg2p9, arg3'=arg2, arg4'=1+arg3, arg5'=arg5p9, arg6'=arg6p9, (arg3 > 0 /\ arg1 > 0 /\ 1+arg2p9 > 0 /\ 1+arg2 > 0), cost: 1
	New rule:
	f543_0_createTree_GT -> f998_0_createTree_LE : arg2'=arg2p9, arg3'=arg2, arg4'=1+arg3, arg5'=arg5p9, arg6'=arg6p9, (arg3 > 0 /\ arg1 > 0 /\ 1+arg2p9 > 0 /\ 1+arg2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f998_0_createTree_LE -> f543_0_createTree_GT : arg1'=arg1p10, arg2'=arg2p10, arg3'=arg3p10, arg4'=arg4p10, arg5'=arg5p10, arg6'=arg6p10, (-1+arg1-arg1p10 == 0 /\ arg1 > 0 /\ -1+arg4 > 0 /\ arg2 > 0 /\ arg4-arg3p10 == 0 /\ -1 < 0 /\ arg3-arg2p10 == 0), cost: 1
	New rule:
	f998_0_createTree_LE -> f543_0_createTree_GT : arg1'=-1+arg1, arg2'=arg3, arg3'=arg4, arg4'=arg4p10, arg5'=arg5p10, arg6'=arg6p10, (0 == 0 /\ arg1 > 0 /\ -1+arg4 > 0 /\ arg2 > 0 /\ -1 < 0), cost: 1
	
		propagated equality arg1p10 = -1+arg1
		
		propagated equality arg3p10 = arg4
		
		propagated equality arg2p10 = arg3
		
	Simplified Guard

	Original rule:
	f998_0_createTree_LE -> f543_0_createTree_GT : arg1'=-1+arg1, arg2'=arg3, arg3'=arg4, arg4'=arg4p10, arg5'=arg5p10, arg6'=arg6p10, (0 == 0 /\ arg1 > 0 /\ -1+arg4 > 0 /\ arg2 > 0 /\ -1 < 0), cost: 1
	New rule:
	f998_0_createTree_LE -> f543_0_createTree_GT : arg1'=-1+arg1, arg2'=arg3, arg3'=arg4, arg4'=arg4p10, arg5'=arg5p10, arg6'=arg6p10, (arg1 > 0 /\ -1+arg4 > 0 /\ arg2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f998_0_createTree_LE -> f998_0_createTree_LE : arg1'=arg1p11, arg2'=arg2p11, arg3'=arg3p11, arg4'=arg4p11, arg5'=arg5p11, arg6'=arg6p11, (-1-arg2p11+arg2 == 0 /\ arg3-arg3p11 == 0 /\ -arg4p11+arg4 == 0 /\ 1-arg1 == 0 /\ 1-arg1p11 == 0 /\ -1+arg4 > 0 /\ arg2 > 0), cost: 1
	New rule:
	f998_0_createTree_LE -> f998_0_createTree_LE : arg1'=1, arg2'=-1+arg2, arg3'=arg3, arg4'=arg4, arg5'=arg5p11, arg6'=arg6p11, (0 == 0 /\ 1-arg1 == 0 /\ -1+arg4 > 0 /\ arg2 > 0), cost: 1
	
		propagated equality arg2p11 = -1+arg2
		
		propagated equality arg3p11 = arg3
		
		propagated equality arg4p11 = arg4
		
		propagated equality arg1p11 = 1
		
	Simplified Guard

	Original rule:
	f998_0_createTree_LE -> f998_0_createTree_LE : arg1'=1, arg2'=-1+arg2, arg3'=arg3, arg4'=arg4, arg5'=arg5p11, arg6'=arg6p11, (0 == 0 /\ 1-arg1 == 0 /\ -1+arg4 > 0 /\ arg2 > 0), cost: 1
	New rule:
	f998_0_createTree_LE -> f998_0_createTree_LE : arg1'=1, arg2'=-1+arg2, arg3'=arg3, arg4'=arg4, arg5'=arg5p11, arg6'=arg6p11, (1-arg1 == 0 /\ -1+arg4 > 0 /\ arg2 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f998_0_createTree_LE -> f998_0_createTree_LE : arg1'=1, arg2'=-1+arg2, arg3'=arg3, arg4'=arg4, arg5'=arg5p11, arg6'=arg6p11, (1-arg1 == 0 /\ -1+arg4 > 0 /\ arg2 > 0), cost: 1
	New rule:
	f998_0_createTree_LE -> f998_0_createTree_LE : arg1'=1, arg2'=-1+arg2, arg5'=arg5p11, arg6'=arg6p11, (1-arg1 == 0 /\ -1+arg4 > 0 /\ arg2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f998_0_createTree_LE -> f998_0_createTree_LE : arg1'=arg1p12, arg2'=arg2p12, arg3'=arg3p12, arg4'=arg4p12, arg5'=arg5p12, arg6'=arg6p12, (-arg1p12+arg1 == 0 /\ arg3-arg3p12 == 0 /\ arg1 > 0 /\ -1-arg2p12+arg2 == 0 /\ -1+arg4 > 0 /\ arg2 > 0 /\ -1 < 0), cost: 1
	New rule:
	f998_0_createTree_LE -> f998_0_createTree_LE : arg1'=arg1, arg2'=-1+arg2, arg3'=arg3, arg4'=arg4p12, arg5'=arg5p12, arg6'=arg6p12, (0 == 0 /\ arg1 > 0 /\ -1+arg4 > 0 /\ arg2 > 0 /\ -1 < 0), cost: 1
	
		propagated equality arg1p12 = arg1
		
		propagated equality arg3p12 = arg3
		
		propagated equality arg2p12 = -1+arg2
		
	Simplified Guard

	Original rule:
	f998_0_createTree_LE -> f998_0_createTree_LE : arg1'=arg1, arg2'=-1+arg2, arg3'=arg3, arg4'=arg4p12, arg5'=arg5p12, arg6'=arg6p12, (0 == 0 /\ arg1 > 0 /\ -1+arg4 > 0 /\ arg2 > 0 /\ -1 < 0), cost: 1
	New rule:
	f998_0_createTree_LE -> f998_0_createTree_LE : arg1'=arg1, arg2'=-1+arg2, arg3'=arg3, arg4'=arg4p12, arg5'=arg5p12, arg6'=arg6p12, (arg1 > 0 /\ -1+arg4 > 0 /\ arg2 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f998_0_createTree_LE -> f998_0_createTree_LE : arg1'=arg1, arg2'=-1+arg2, arg3'=arg3, arg4'=arg4p12, arg5'=arg5p12, arg6'=arg6p12, (arg1 > 0 /\ -1+arg4 > 0 /\ arg2 > 0), cost: 1
	New rule:
	f998_0_createTree_LE -> f998_0_createTree_LE : arg2'=-1+arg2, arg4'=arg4p12, arg5'=arg5p12, arg6'=arg6p12, (arg1 > 0 /\ -1+arg4 > 0 /\ arg2 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	f3334_0_main_LE -> f2378_0_random_ArrayAccess : arg1'=arg1p13, arg2'=arg2p13, arg3'=arg3p13, arg4'=arg4p13, arg5'=arg5p13, arg6'=arg6p13, (x75 > 0 /\ arg1 > 0 /\ arg1p13-arg2 <= 0 /\ arg1p13 > 0 /\ 1+arg2p13-arg2 <= 0 /\ arg2 > 0 /\ arg4 > 0), cost: 1
	New rule:
	f3334_0_main_LE -> f2378_0_random_ArrayAccess : arg1'=arg1p13, arg2'=arg2p13, arg3'=arg3p13, arg4'=arg4p13, arg5'=arg5p13, arg6'=arg6p13, (arg1 > 0 /\ arg1p13-arg2 <= 0 /\ arg1p13 > 0 /\ 1+arg2p13-arg2 <= 0 /\ arg2 > 0 /\ arg4 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f3430_0_main_InvokeMethod -> f2378_0_random_ArrayAccess : arg1'=arg1p14, arg2'=arg2p14, arg3'=arg3p14, arg4'=arg4p14, arg5'=arg5p14, arg6'=arg6p14, (x83 > 0 /\ arg6-arg2p14 == 0 /\ arg1 > 0 /\ arg1p14-arg4 <= 0 /\ arg1p14 > 0 /\ 1+arg6-arg4 <= 0 /\ 1+arg3 > 0 /\ arg4 > 0), cost: 1
	New rule:
	f3430_0_main_InvokeMethod -> f2378_0_random_ArrayAccess : arg1'=arg1p14, arg2'=arg6, arg3'=arg3p14, arg4'=arg4p14, arg5'=arg5p14, arg6'=arg6p14, (0 == 0 /\ x83 > 0 /\ arg1 > 0 /\ arg1p14-arg4 <= 0 /\ arg1p14 > 0 /\ 1+arg6-arg4 <= 0 /\ 1+arg3 > 0 /\ arg4 > 0), cost: 1
	
		propagated equality arg2p14 = arg6
		
	Simplified Guard

	Original rule:
	f3430_0_main_InvokeMethod -> f2378_0_random_ArrayAccess : arg1'=arg1p14, arg2'=arg6, arg3'=arg3p14, arg4'=arg4p14, arg5'=arg5p14, arg6'=arg6p14, (0 == 0 /\ x83 > 0 /\ arg1 > 0 /\ arg1p14-arg4 <= 0 /\ arg1p14 > 0 /\ 1+arg6-arg4 <= 0 /\ 1+arg3 > 0 /\ arg4 > 0), cost: 1
	New rule:
	f3430_0_main_InvokeMethod -> f2378_0_random_ArrayAccess : arg1'=arg1p14, arg2'=arg6, arg3'=arg3p14, arg4'=arg4p14, arg5'=arg5p14, arg6'=arg6p14, (x83 > 0 /\ arg1 > 0 /\ arg1p14-arg4 <= 0 /\ arg1p14 > 0 /\ 1+arg6-arg4 <= 0 /\ 1+arg3 > 0 /\ arg4 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	f3430_0_main_InvokeMethod -> f2378_0_random_ArrayAccess : arg1'=arg1p14, arg2'=arg6, arg3'=arg3p14, arg4'=arg4p14, arg5'=arg5p14, arg6'=arg6p14, (x83 > 0 /\ arg1 > 0 /\ arg1p14-arg4 <= 0 /\ arg1p14 > 0 /\ 1+arg6-arg4 <= 0 /\ 1+arg3 > 0 /\ arg4 > 0), cost: 1
	New rule:
	f3430_0_main_InvokeMethod -> f2378_0_random_ArrayAccess : arg1'=arg1p14, arg2'=arg6, arg3'=arg3p14, arg4'=arg4p14, arg5'=arg5p14, arg6'=arg6p14, (arg1 > 0 /\ arg1p14-arg4 <= 0 /\ arg1p14 > 0 /\ 1+arg6-arg4 <= 0 /\ 1+arg3 > 0 /\ arg4 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f2378_0_random_ArrayAccess -> f3147_0_getRandom_LT : arg1'=arg1p15, arg2'=arg2p15, arg3'=arg3p15, arg4'=arg4p15, arg5'=arg5p15, arg6'=arg6p15, (-1+arg3p15-arg1p15 == 0 /\ arg1 > 0 /\ 1+x91 > 0 /\ 1-arg1+arg2 <= 0 /\ 1+x91-arg4p15 == 0 /\ 1+arg3p15 > 0 /\ -arg1+arg2p15 <= 0 /\ arg2p15 > 0), cost: 1
	New rule:
	f2378_0_random_ArrayAccess -> f3147_0_getRandom_LT : arg1'=-1+arg3p15, arg2'=arg2p15, arg3'=arg3p15, arg4'=1+x91, arg5'=arg5p15, arg6'=arg6p15, (0 == 0 /\ arg1 > 0 /\ 1+x91 > 0 /\ 1-arg1+arg2 <= 0 /\ 1+arg3p15 > 0 /\ -arg1+arg2p15 <= 0 /\ arg2p15 > 0), cost: 1
	
		propagated equality arg1p15 = -1+arg3p15
		
		propagated equality arg4p15 = 1+x91
		
	Simplified Guard

	Original rule:
	f2378_0_random_ArrayAccess -> f3147_0_getRandom_LT : arg1'=-1+arg3p15, arg2'=arg2p15, arg3'=arg3p15, arg4'=1+x91, arg5'=arg5p15, arg6'=arg6p15, (0 == 0 /\ arg1 > 0 /\ 1+x91 > 0 /\ 1-arg1+arg2 <= 0 /\ 1+arg3p15 > 0 /\ -arg1+arg2p15 <= 0 /\ arg2p15 > 0), cost: 1
	New rule:
	f2378_0_random_ArrayAccess -> f3147_0_getRandom_LT : arg1'=-1+arg3p15, arg2'=arg2p15, arg3'=arg3p15, arg4'=1+x91, arg5'=arg5p15, arg6'=arg6p15, (arg1 > 0 /\ 1+x91 > 0 /\ 1-arg1+arg2 <= 0 /\ 1+arg3p15 > 0 /\ -arg1+arg2p15 <= 0 /\ arg2p15 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f3147_0_getRandom_LT -> f3577_0_getRandom_LT : arg1'=arg1p16, arg2'=arg2p16, arg3'=arg3p16, arg4'=arg4p16, arg5'=arg5p16, arg6'=arg6p16, (arg3p16 > 0 /\ 1+arg4p16 > 0 /\ arg1-arg1p16 == 0 /\ 1+arg4 > 0 /\ 1-arg5p16+arg4 == 0 /\ 1+arg3 > 0 /\ -2+arg2 > 0 /\ -2-arg3p16+arg2 >= 0 /\ -1+arg4p16-arg2p16 == 0), cost: 1
	New rule:
	f3147_0_getRandom_LT -> f3577_0_getRandom_LT : arg1'=arg1, arg2'=-1+arg4p16, arg3'=arg3p16, arg4'=arg4p16, arg5'=1+arg4, arg6'=arg6p16, (0 == 0 /\ arg3p16 > 0 /\ 1+arg4p16 > 0 /\ 1+arg4 > 0 /\ 1+arg3 > 0 /\ -2+arg2 > 0 /\ -2-arg3p16+arg2 >= 0), cost: 1
	
		propagated equality arg1p16 = arg1
		
		propagated equality arg5p16 = 1+arg4
		
		propagated equality arg2p16 = -1+arg4p16
		
	Simplified Guard

	Original rule:
	f3147_0_getRandom_LT -> f3577_0_getRandom_LT : arg1'=arg1, arg2'=-1+arg4p16, arg3'=arg3p16, arg4'=arg4p16, arg5'=1+arg4, arg6'=arg6p16, (0 == 0 /\ arg3p16 > 0 /\ 1+arg4p16 > 0 /\ 1+arg4 > 0 /\ 1+arg3 > 0 /\ -2+arg2 > 0 /\ -2-arg3p16+arg2 >= 0), cost: 1
	New rule:
	f3147_0_getRandom_LT -> f3577_0_getRandom_LT : arg1'=arg1, arg2'=-1+arg4p16, arg3'=arg3p16, arg4'=arg4p16, arg5'=1+arg4, arg6'=arg6p16, (arg3p16 > 0 /\ 1+arg4p16 > 0 /\ 1+arg4 > 0 /\ 1+arg3 > 0 /\ -2+arg2 > 0 /\ -2-arg3p16+arg2 >= 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f3147_0_getRandom_LT -> f3577_0_getRandom_LT : arg1'=arg1, arg2'=-1+arg4p16, arg3'=arg3p16, arg4'=arg4p16, arg5'=1+arg4, arg6'=arg6p16, (arg3p16 > 0 /\ 1+arg4p16 > 0 /\ 1+arg4 > 0 /\ 1+arg3 > 0 /\ -2+arg2 > 0 /\ -2-arg3p16+arg2 >= 0), cost: 1
	New rule:
	f3147_0_getRandom_LT -> f3577_0_getRandom_LT : arg2'=-1+arg4p16, arg3'=arg3p16, arg4'=arg4p16, arg5'=1+arg4, arg6'=arg6p16, (arg3p16 > 0 /\ 1+arg4p16 > 0 /\ 1+arg4 > 0 /\ 1+arg3 > 0 /\ -2+arg2 > 0 /\ -2-arg3p16+arg2 >= 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f3577_0_getRandom_LT -> f3577_0_getRandom_LT : arg1'=arg1p17, arg2'=arg2p17, arg3'=arg3p17, arg4'=arg4p17, arg5'=arg5p17, arg6'=arg6p17, (arg3p17 > 0 /\ -arg4p17+arg2 == 0 /\ 1+arg4 > 0 /\ 2+arg3p17-arg3 <= 0 /\ -1+arg2-arg2p17 == 0 /\ arg1-arg1p17 == 0 /\ -2+arg3 > 0 /\ arg5-arg5p17 == 0), cost: 1
	New rule:
	f3577_0_getRandom_LT -> f3577_0_getRandom_LT : arg1'=arg1, arg2'=-1+arg2, arg3'=arg3p17, arg4'=arg2, arg5'=arg5, arg6'=arg6p17, (0 == 0 /\ arg3p17 > 0 /\ 1+arg4 > 0 /\ 2+arg3p17-arg3 <= 0 /\ -2+arg3 > 0), cost: 1
	
		propagated equality arg4p17 = arg2
		
		propagated equality arg2p17 = -1+arg2
		
		propagated equality arg1p17 = arg1
		
		propagated equality arg5p17 = arg5
		
	Simplified Guard

	Original rule:
	f3577_0_getRandom_LT -> f3577_0_getRandom_LT : arg1'=arg1, arg2'=-1+arg2, arg3'=arg3p17, arg4'=arg2, arg5'=arg5, arg6'=arg6p17, (0 == 0 /\ arg3p17 > 0 /\ 1+arg4 > 0 /\ 2+arg3p17-arg3 <= 0 /\ -2+arg3 > 0), cost: 1
	New rule:
	f3577_0_getRandom_LT -> f3577_0_getRandom_LT : arg1'=arg1, arg2'=-1+arg2, arg3'=arg3p17, arg4'=arg2, arg5'=arg5, arg6'=arg6p17, (arg3p17 > 0 /\ 1+arg4 > 0 /\ 2+arg3p17-arg3 <= 0 /\ -2+arg3 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f3577_0_getRandom_LT -> f3577_0_getRandom_LT : arg1'=arg1, arg2'=-1+arg2, arg3'=arg3p17, arg4'=arg2, arg5'=arg5, arg6'=arg6p17, (arg3p17 > 0 /\ 1+arg4 > 0 /\ 2+arg3p17-arg3 <= 0 /\ -2+arg3 > 0), cost: 1
	New rule:
	f3577_0_getRandom_LT -> f3577_0_getRandom_LT : arg2'=-1+arg2, arg3'=arg3p17, arg4'=arg2, arg6'=arg6p17, (arg3p17 > 0 /\ 1+arg4 > 0 /\ 2+arg3p17-arg3 <= 0 /\ -2+arg3 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f3577_0_getRandom_LT -> f3147_0_getRandom_LT : arg1'=arg1p18, arg2'=arg2p18, arg3'=arg3p18, arg4'=arg4p18, arg5'=arg5p18, arg6'=arg6p18, (arg3 > 0 /\ arg5-arg4p18 == 0 /\ -arg3p18+arg1 == 0 /\ -1-arg1p18+arg1 == 0 /\ arg4 < 0 /\ 1+arg2p18 > 0), cost: 1
	New rule:
	f3577_0_getRandom_LT -> f3147_0_getRandom_LT : arg1'=-1+arg1, arg2'=arg2p18, arg3'=arg1, arg4'=arg5, arg5'=arg5p18, arg6'=arg6p18, (0 == 0 /\ arg3 > 0 /\ arg4 < 0 /\ 1+arg2p18 > 0), cost: 1
	
		propagated equality arg4p18 = arg5
		
		propagated equality arg3p18 = arg1
		
		propagated equality arg1p18 = -1+arg1
		
	Simplified Guard

	Original rule:
	f3577_0_getRandom_LT -> f3147_0_getRandom_LT : arg1'=-1+arg1, arg2'=arg2p18, arg3'=arg1, arg4'=arg5, arg5'=arg5p18, arg6'=arg6p18, (0 == 0 /\ arg3 > 0 /\ arg4 < 0 /\ 1+arg2p18 > 0), cost: 1
	New rule:
	f3577_0_getRandom_LT -> f3147_0_getRandom_LT : arg1'=-1+arg1, arg2'=arg2p18, arg3'=arg1, arg4'=arg5, arg5'=arg5p18, arg6'=arg6p18, (arg3 > 0 /\ arg4 < 0 /\ 1+arg2p18 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f3577_0_getRandom_LT -> f3147_0_getRandom_LT : arg1'=arg1p19, arg2'=arg2p19, arg3'=arg3p19, arg4'=arg4p19, arg5'=arg5p19, arg6'=arg6p19, (-1+arg1-arg1p19 == 0 /\ -1+arg3 > 0 /\ 1+arg4 > 0 /\ -arg3p19+arg1 == 0 /\ -arg4p19+arg5 == 0 /\ 1+arg2p19 > 0), cost: 1
	New rule:
	f3577_0_getRandom_LT -> f3147_0_getRandom_LT : arg1'=-1+arg1, arg2'=arg2p19, arg3'=arg1, arg4'=arg5, arg5'=arg5p19, arg6'=arg6p19, (0 == 0 /\ -1+arg3 > 0 /\ 1+arg4 > 0 /\ 1+arg2p19 > 0), cost: 1
	
		propagated equality arg1p19 = -1+arg1
		
		propagated equality arg3p19 = arg1
		
		propagated equality arg4p19 = arg5
		
	Simplified Guard

	Original rule:
	f3577_0_getRandom_LT -> f3147_0_getRandom_LT : arg1'=-1+arg1, arg2'=arg2p19, arg3'=arg1, arg4'=arg5, arg5'=arg5p19, arg6'=arg6p19, (0 == 0 /\ -1+arg3 > 0 /\ 1+arg4 > 0 /\ 1+arg2p19 > 0), cost: 1
	New rule:
	f3577_0_getRandom_LT -> f3147_0_getRandom_LT : arg1'=-1+arg1, arg2'=arg2p19, arg3'=arg1, arg4'=arg5, arg5'=arg5p19, arg6'=arg6p19, (-1+arg3 > 0 /\ 1+arg4 > 0 /\ 1+arg2p19 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f3334_0_main_LE -> f3446_0_visit_NE : arg1'=arg1p20, arg2'=arg2p20, arg3'=arg3p20, arg4'=arg4p20, arg5'=arg5p20, arg6'=arg6p20, (2-arg2+arg2p20 <= 0 /\ -arg3p20+arg2p20 == 0 /\ 2+arg4p20-arg2 <= 0 /\ x120 > 0 /\ arg1 > 0 /\ arg1p20-arg2 <= 0 /\ arg1p20 > 0 /\ -1+arg4 < 0 /\ arg2 > 0), cost: 1
	New rule:
	f3334_0_main_LE -> f3446_0_visit_NE : arg1'=arg1p20, arg2'=arg3p20, arg3'=arg3p20, arg4'=arg4p20, arg5'=arg5p20, arg6'=arg6p20, (0 == 0 /\ 2+arg4p20-arg2 <= 0 /\ x120 > 0 /\ arg1 > 0 /\ arg1p20-arg2 <= 0 /\ 2+arg3p20-arg2 <= 0 /\ arg1p20 > 0 /\ -1+arg4 < 0 /\ arg2 > 0), cost: 1
	
		propagated equality arg2p20 = arg3p20
		
	Simplified Guard

	Original rule:
	f3334_0_main_LE -> f3446_0_visit_NE : arg1'=arg1p20, arg2'=arg3p20, arg3'=arg3p20, arg4'=arg4p20, arg5'=arg5p20, arg6'=arg6p20, (0 == 0 /\ 2+arg4p20-arg2 <= 0 /\ x120 > 0 /\ arg1 > 0 /\ arg1p20-arg2 <= 0 /\ 2+arg3p20-arg2 <= 0 /\ arg1p20 > 0 /\ -1+arg4 < 0 /\ arg2 > 0), cost: 1
	New rule:
	f3334_0_main_LE -> f3446_0_visit_NE : arg1'=arg1p20, arg2'=arg3p20, arg3'=arg3p20, arg4'=arg4p20, arg5'=arg5p20, arg6'=arg6p20, (2+arg4p20-arg2 <= 0 /\ x120 > 0 /\ arg1 > 0 /\ arg1p20-arg2 <= 0 /\ 2+arg3p20-arg2 <= 0 /\ arg1p20 > 0 /\ -1+arg4 < 0 /\ arg2 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	f3334_0_main_LE -> f3446_0_visit_NE : arg1'=arg1p20, arg2'=arg3p20, arg3'=arg3p20, arg4'=arg4p20, arg5'=arg5p20, arg6'=arg6p20, (2+arg4p20-arg2 <= 0 /\ x120 > 0 /\ arg1 > 0 /\ arg1p20-arg2 <= 0 /\ 2+arg3p20-arg2 <= 0 /\ arg1p20 > 0 /\ -1+arg4 < 0 /\ arg2 > 0), cost: 1
	New rule:
	f3334_0_main_LE -> f3446_0_visit_NE : arg1'=arg1p20, arg2'=arg3p20, arg3'=arg3p20, arg4'=arg4p20, arg5'=arg5p20, arg6'=arg6p20, (2+arg4p20-arg2 <= 0 /\ arg1 > 0 /\ arg1p20-arg2 <= 0 /\ 2+arg3p20-arg2 <= 0 /\ arg1p20 > 0 /\ -1+arg4 < 0 /\ arg2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f3446_0_visit_NE -> f3530_0_visit_NULL : arg1'=arg1p21, arg2'=arg2p21, arg3'=arg3p21, arg4'=arg4p21, arg5'=arg5p21, arg6'=arg6p21, (2-arg1+arg2 <= 0 /\ -arg1p21+arg2 == 0 /\ arg1 > 0 /\ 1+arg2p21 > 0 /\ -arg3+arg2 == 0 /\ 2-arg1+arg4 <= 0), cost: 1
	New rule:
	f3446_0_visit_NE -> f3530_0_visit_NULL : arg1'=arg2, arg2'=arg2p21, arg3'=arg3p21, arg4'=arg4p21, arg5'=arg5p21, arg6'=arg6p21, (0 == 0 /\ 2-arg1+arg2 <= 0 /\ arg1 > 0 /\ 1+arg2p21 > 0 /\ -arg3+arg2 == 0 /\ 2-arg1+arg4 <= 0), cost: 1
	
		propagated equality arg1p21 = arg2
		
	Simplified Guard

	Original rule:
	f3446_0_visit_NE -> f3530_0_visit_NULL : arg1'=arg2, arg2'=arg2p21, arg3'=arg3p21, arg4'=arg4p21, arg5'=arg5p21, arg6'=arg6p21, (0 == 0 /\ 2-arg1+arg2 <= 0 /\ arg1 > 0 /\ 1+arg2p21 > 0 /\ -arg3+arg2 == 0 /\ 2-arg1+arg4 <= 0), cost: 1
	New rule:
	f3446_0_visit_NE -> f3530_0_visit_NULL : arg1'=arg2, arg2'=arg2p21, arg3'=arg3p21, arg4'=arg4p21, arg5'=arg5p21, arg6'=arg6p21, (2-arg1+arg2 <= 0 /\ arg1 > 0 /\ 1+arg2p21 > 0 /\ -arg3+arg2 == 0 /\ 2-arg1+arg4 <= 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f3530_0_visit_NULL -> f3446_0_visit_NE : arg1'=arg1p22, arg2'=arg2p22, arg3'=arg3p22, arg4'=arg4p22, arg5'=arg5p22, arg6'=arg6p22, (arg1-arg2p22 == 0 /\ arg1p22 > 0 /\ arg2 > 0), cost: 1
	New rule:
	f3530_0_visit_NULL -> f3446_0_visit_NE : arg1'=arg1p22, arg2'=arg1, arg3'=arg3p22, arg4'=arg4p22, arg5'=arg5p22, arg6'=arg6p22, (0 == 0 /\ arg1p22 > 0 /\ arg2 > 0), cost: 1
	
		propagated equality arg2p22 = arg1
		
	Simplified Guard

	Original rule:
	f3530_0_visit_NULL -> f3446_0_visit_NE : arg1'=arg1p22, arg2'=arg1, arg3'=arg3p22, arg4'=arg4p22, arg5'=arg5p22, arg6'=arg6p22, (0 == 0 /\ arg1p22 > 0 /\ arg2 > 0), cost: 1
	New rule:
	f3530_0_visit_NULL -> f3446_0_visit_NE : arg1'=arg1p22, arg2'=arg1, arg3'=arg3p22, arg4'=arg4p22, arg5'=arg5p22, arg6'=arg6p22, (arg1p22 > 0 /\ arg2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f3530_0_visit_NULL -> f3530_0_visit_NULL : arg1'=arg1p23, arg2'=arg2p23, arg3'=arg3p23, arg4'=arg4p23, arg5'=arg5p23, arg6'=arg6p23, (1+arg2p23-arg2 <= 0 /\ arg3-arg3p23 == 0 /\ arg2 > 0 /\ -arg1p23+arg1 == 0 /\ 1+arg2p23 > 0), cost: 1
	New rule:
	f3530_0_visit_NULL -> f3530_0_visit_NULL : arg1'=arg1, arg2'=arg2p23, arg3'=arg3, arg4'=arg4p23, arg5'=arg5p23, arg6'=arg6p23, (0 == 0 /\ 1+arg2p23-arg2 <= 0 /\ arg2 > 0 /\ 1+arg2p23 > 0), cost: 1
	
		propagated equality arg3p23 = arg3
		
		propagated equality arg1p23 = arg1
		
	Simplified Guard

	Original rule:
	f3530_0_visit_NULL -> f3530_0_visit_NULL : arg1'=arg1, arg2'=arg2p23, arg3'=arg3, arg4'=arg4p23, arg5'=arg5p23, arg6'=arg6p23, (0 == 0 /\ 1+arg2p23-arg2 <= 0 /\ arg2 > 0 /\ 1+arg2p23 > 0), cost: 1
	New rule:
	f3530_0_visit_NULL -> f3530_0_visit_NULL : arg1'=arg1, arg2'=arg2p23, arg3'=arg3, arg4'=arg4p23, arg5'=arg5p23, arg6'=arg6p23, (1+arg2p23-arg2 <= 0 /\ arg2 > 0 /\ 1+arg2p23 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f3530_0_visit_NULL -> f3530_0_visit_NULL : arg1'=arg1, arg2'=arg2p23, arg3'=arg3, arg4'=arg4p23, arg5'=arg5p23, arg6'=arg6p23, (1+arg2p23-arg2 <= 0 /\ arg2 > 0 /\ 1+arg2p23 > 0), cost: 1
	New rule:
	f3530_0_visit_NULL -> f3530_0_visit_NULL : arg2'=arg2p23, arg4'=arg4p23, arg5'=arg5p23, arg6'=arg6p23, (1+arg2p23-arg2 <= 0 /\ arg2 > 0 /\ 1+arg2p23 > 0), cost: 1

Step with 23

	Trace

	23[T]
	
	Blocked

	[{}, {}]

Step with 24

	Trace

	23[T], 24[(arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {}]

Step with 32

	Trace

	23[T], 24[(arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0)], 32[(arg3 > 0 /\ arg1 > 0 /\ 1+arg2p9 > 0 /\ 1+arg2 > 0)]
	
	Blocked

	[{}, {}, {}, {}]

Step with 33

	Trace

	23[T], 24[(arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0)], 32[(arg3 > 0 /\ arg1 > 0 /\ 1+arg2p9 > 0 /\ 1+arg2 > 0)], 33[(arg1 > 0 /\ -1+arg4 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {}, {}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5 arg6
  24: f1_0_main_Load -> f543_0_createTree_GT : arg1'=arg1p1, arg3'=1, arg4'=arg4p1, arg5'=arg5p1, arg6'=arg6p1, (arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0), cost: 1
  25: f1_0_main_Load -> f1156_0_random_ArrayAccess : arg1'=arg1p2, arg3'=0, arg4'=arg4p2, arg5'=arg5p2, arg6'=arg6p2, (arg1 > 0 /\ arg2 > 0 /\ -1+arg1p2 > 0), cost: 1
  27: f1_0_main_Load -> f3334_0_main_LE : arg1'=arg1p4, arg2'=arg2p4, arg3'=-1+arg4p4, arg4'=arg4p4, arg5'=2, arg6'=arg6p4, (-arg1+arg1p4 <= 0 /\ 1+arg4p4 > 0 /\ arg1 > 0 /\ 1+arg2p4 > 0 /\ arg1p4 > 0 /\ 1-arg1+arg2p4 <= 0 /\ arg2 > 0), cost: 1
  32: f543_0_createTree_GT -> f998_0_createTree_LE : arg2'=arg2p9, arg3'=arg2, arg4'=1+arg3, arg5'=arg5p9, arg6'=arg6p9, (arg3 > 0 /\ arg1 > 0 /\ 1+arg2p9 > 0 /\ 1+arg2 > 0), cost: 1
  47: f543_0_createTree_GT -> f543_0_createTree_GT : arg1'=arg1-n, arg3'=arg3+n, arg4'=arg4p10, arg5'=arg5p10, arg6'=arg6p10, (arg3 > 0 /\ -1+n >= 0 /\ 1+arg2 > 0 /\ 1+arg1-n > 0), cost: 1
  28: f1156_0_random_ArrayAccess -> f3334_0_main_LE : arg1'=arg1p5, arg2'=arg2p5, arg3'=-1+arg4p5, arg4'=arg4p5, arg5'=1+x150, arg6'=arg6p5, (-1+arg2p5 > 0 /\ -arg3 == 0 /\ x150 > 0 /\ 1-arg1+arg1p5 <= 0 /\ 1+arg4p5 > 0 /\ -1+arg1 > 0 /\ arg1p5 > 0 /\ 2-arg1+arg4 <= 0 /\ arg2p5-arg1 <= 0), cost: 1
  26: f814_0_createTree_Return -> f1156_0_random_ArrayAccess : arg1'=arg1p3, arg2'=arg2p3, arg3'=0, arg4'=arg5, arg5'=arg5p3, arg6'=arg6p3, (-arg2+arg1p3 <= 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ 2+arg5-arg2 <= 0 /\ -arg4 == 0 /\ -1+arg1p3 > 0), cost: 1
  29: f3334_0_main_LE -> f3430_0_main_InvokeMethod : arg1'=arg1p6, arg2'=arg3, arg3'=arg3p6, arg4'=arg4p6, arg5'=arg5p6, arg6'=arg6p6, (1+arg6p6-arg2 <= 0 /\ arg1 > 0 /\ -arg2+arg4p6 <= 0 /\ -arg2+arg1p6 <= 0 /\ arg2 > 0 /\ arg4 > 0 /\ arg4p6 > 0 /\ -arg1+arg1p6 <= 0 /\ 1+arg3p6 > 0 /\ arg1p6 > 0), cost: 1
  30: f3334_0_main_LE -> f3430_0_main_InvokeMethod : arg1'=arg1p7, arg2'=arg3, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, arg6'=arg6p7, (arg4p7 > 0 /\ arg1p7 > 0 /\ arg1 > 0 /\ arg1p7-arg1 <= 0 /\ arg4p7-arg2 <= 0 /\ -1+arg3p7 > 0 /\ arg1p7-arg2 <= 0 /\ arg2 > 0 /\ arg4 > 0 /\ 1-arg2+arg6p7 <= 0), cost: 1
  36: f3334_0_main_LE -> f2378_0_random_ArrayAccess : arg1'=arg1p13, arg2'=arg2p13, arg3'=arg3p13, arg4'=arg4p13, arg5'=arg5p13, arg6'=arg6p13, (arg1 > 0 /\ arg1p13-arg2 <= 0 /\ arg1p13 > 0 /\ 1+arg2p13-arg2 <= 0 /\ arg2 > 0 /\ arg4 > 0), cost: 1
  43: f3334_0_main_LE -> f3446_0_visit_NE : arg1'=arg1p20, arg2'=arg3p20, arg3'=arg3p20, arg4'=arg4p20, arg5'=arg5p20, arg6'=arg6p20, (2+arg4p20-arg2 <= 0 /\ arg1 > 0 /\ arg1p20-arg2 <= 0 /\ 2+arg3p20-arg2 <= 0 /\ arg1p20 > 0 /\ -1+arg4 < 0 /\ arg2 > 0), cost: 1
  31: f3430_0_main_InvokeMethod -> f3334_0_main_LE : arg1'=arg1p8, arg2'=arg2p8, arg3'=-1+arg2, arg4'=arg2, arg5'=arg5p8, arg6'=arg6p8, (arg3 > 0 /\ arg1 > 0 /\ arg1p8 > 0 /\ -arg3+arg1p8 <= 0 /\ arg1p8-arg4 <= 0 /\ 1+arg6-arg4 <= 0 /\ -arg1+arg1p8 <= 0 /\ arg4 > 0 /\ arg2p8 > 0), cost: 1
  37: f3430_0_main_InvokeMethod -> f2378_0_random_ArrayAccess : arg1'=arg1p14, arg2'=arg6, arg3'=arg3p14, arg4'=arg4p14, arg5'=arg5p14, arg6'=arg6p14, (arg1 > 0 /\ arg1p14-arg4 <= 0 /\ arg1p14 > 0 /\ 1+arg6-arg4 <= 0 /\ 1+arg3 > 0 /\ arg4 > 0), cost: 1
  33: f998_0_createTree_LE -> f543_0_createTree_GT : arg1'=-1+arg1, arg2'=arg3, arg3'=arg4, arg4'=arg4p10, arg5'=arg5p10, arg6'=arg6p10, (arg1 > 0 /\ -1+arg4 > 0 /\ arg2 > 0), cost: 1
  34: f998_0_createTree_LE -> f998_0_createTree_LE : arg1'=1, arg2'=-1+arg2, arg5'=arg5p11, arg6'=arg6p11, (1-arg1 == 0 /\ -1+arg4 > 0 /\ arg2 > 0), cost: 1
  35: f998_0_createTree_LE -> f998_0_createTree_LE : arg2'=-1+arg2, arg4'=arg4p12, arg5'=arg5p12, arg6'=arg6p12, (arg1 > 0 /\ -1+arg4 > 0 /\ arg2 > 0), cost: 1
  38: f2378_0_random_ArrayAccess -> f3147_0_getRandom_LT : arg1'=-1+arg3p15, arg2'=arg2p15, arg3'=arg3p15, arg4'=1+x91, arg5'=arg5p15, arg6'=arg6p15, (arg1 > 0 /\ 1+x91 > 0 /\ 1-arg1+arg2 <= 0 /\ 1+arg3p15 > 0 /\ -arg1+arg2p15 <= 0 /\ arg2p15 > 0), cost: 1
  39: f3147_0_getRandom_LT -> f3577_0_getRandom_LT : arg2'=-1+arg4p16, arg3'=arg3p16, arg4'=arg4p16, arg5'=1+arg4, arg6'=arg6p16, (arg3p16 > 0 /\ 1+arg4p16 > 0 /\ 1+arg4 > 0 /\ 1+arg3 > 0 /\ -2+arg2 > 0 /\ -2-arg3p16+arg2 >= 0), cost: 1
  40: f3577_0_getRandom_LT -> f3577_0_getRandom_LT : arg2'=-1+arg2, arg3'=arg3p17, arg4'=arg2, arg6'=arg6p17, (arg3p17 > 0 /\ 1+arg4 > 0 /\ 2+arg3p17-arg3 <= 0 /\ -2+arg3 > 0), cost: 1
  41: f3577_0_getRandom_LT -> f3147_0_getRandom_LT : arg1'=-1+arg1, arg2'=arg2p18, arg3'=arg1, arg4'=arg5, arg5'=arg5p18, arg6'=arg6p18, (arg3 > 0 /\ arg4 < 0 /\ 1+arg2p18 > 0), cost: 1
  42: f3577_0_getRandom_LT -> f3147_0_getRandom_LT : arg1'=-1+arg1, arg2'=arg2p19, arg3'=arg1, arg4'=arg5, arg5'=arg5p19, arg6'=arg6p19, (-1+arg3 > 0 /\ 1+arg4 > 0 /\ 1+arg2p19 > 0), cost: 1
  44: f3446_0_visit_NE -> f3530_0_visit_NULL : arg1'=arg2, arg2'=arg2p21, arg3'=arg3p21, arg4'=arg4p21, arg5'=arg5p21, arg6'=arg6p21, (2-arg1+arg2 <= 0 /\ arg1 > 0 /\ 1+arg2p21 > 0 /\ -arg3+arg2 == 0 /\ 2-arg1+arg4 <= 0), cost: 1
  45: f3530_0_visit_NULL -> f3446_0_visit_NE : arg1'=arg1p22, arg2'=arg1, arg3'=arg3p22, arg4'=arg4p22, arg5'=arg5p22, arg6'=arg6p22, (arg1p22 > 0 /\ arg2 > 0), cost: 1
  46: f3530_0_visit_NULL -> f3530_0_visit_NULL : arg2'=arg2p23, arg4'=arg4p23, arg5'=arg5p23, arg6'=arg6p23, (1+arg2p23-arg2 <= 0 /\ arg2 > 0 /\ 1+arg2p23 > 0), cost: 1
  23: __init -> f1_0_main_Load : arg1'=arg1p24, arg2'=arg2p24, arg3'=arg3p24, arg4'=arg4p24, arg5'=arg5p24, arg6'=arg6p24, T, cost: 1

	Loop Acceleration

	Original rule:
	f543_0_createTree_GT -> f543_0_createTree_GT : arg1'=-1+arg1, arg3'=1+arg3, arg4'=arg4p10, arg5'=arg5p10, arg6'=arg6p10, (arg3 > 0 /\ arg1 > 0 /\ 1+arg2 > 0), cost: 1
	New rule:
	f543_0_createTree_GT -> f543_0_createTree_GT : arg1'=arg1-n, arg3'=arg3+n, arg4'=arg4p10, arg5'=arg5p10, arg6'=arg6p10, (arg3 > 0 /\ -1+n >= 0 /\ 1+arg2 > 0 /\ 1+arg1-n > 0), cost: 1

		arg3 > 0 [0]: monotonic increase yields arg3 > 0
		
		arg1 > 0 [0]: montonic decrease yields 1+arg1-n > 0
		
		arg1 > 0 [1]: eventual increase yields (1 <= 0 /\ arg1 > 0)
		
		1+arg2 > 0 [0]: monotonic increase yields 1+arg2 > 0
		
		Replacement map: {arg3 > 0 -> arg3 > 0, arg1 > 0 -> 1+arg1-n > 0, 1+arg2 > 0 -> 1+arg2 > 0}

	Trace

	23[T], 24[(arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0)], 47[(arg3 > 0 /\ -1+n >= 0 /\ 1+arg2 > 0 /\ 1+arg1-n > 0)]
	
	Blocked

	[{}, {}, {}, {47[T]}]

Step with 32

	Trace

	23[T], 24[(arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0)], 47[(arg3 > 0 /\ -1+n >= 0 /\ 1+arg2 > 0 /\ 1+arg1-n > 0)], 32[(arg3 > 0 /\ arg1 > 0 /\ 1+arg2p9 > 0 /\ 1+arg2 > 0)]
	
	Blocked

	[{}, {}, {}, {47[T]}, {}]

Step with 33

	Trace

	23[T], 24[(arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0)], 47[(arg3 > 0 /\ -1+n >= 0 /\ 1+arg2 > 0 /\ 1+arg1-n > 0)], 32[(arg3 > 0 /\ arg1 > 0 /\ 1+arg2p9 > 0 /\ 1+arg2 > 0)], 33[(arg1 > 0 /\ -1+arg4 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {}, {47[T]}, {}, {}]

Covered

	Trace

	23[T], 24[(arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0)], 47[(arg3 > 0 /\ -1+n >= 0 /\ 1+arg2 > 0 /\ 1+arg1-n > 0)], 32[(arg3 > 0 /\ arg1 > 0 /\ 1+arg2p9 > 0 /\ 1+arg2 > 0)]
	
	Blocked

	[{}, {}, {}, {47[T]}, {33[T]}]

Step with 34

	Trace

	23[T], 24[(arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0)], 47[(arg3 > 0 /\ -1+n >= 0 /\ 1+arg2 > 0 /\ 1+arg1-n > 0)], 32[(arg3 > 0 /\ arg1 > 0 /\ 1+arg2p9 > 0 /\ 1+arg2 > 0)], 34[(1-arg1 == 0 /\ -1+arg4 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {}, {47[T]}, {33[T]}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5 arg6
  24: f1_0_main_Load -> f543_0_createTree_GT : arg1'=arg1p1, arg3'=1, arg4'=arg4p1, arg5'=arg5p1, arg6'=arg6p1, (arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0), cost: 1
  25: f1_0_main_Load -> f1156_0_random_ArrayAccess : arg1'=arg1p2, arg3'=0, arg4'=arg4p2, arg5'=arg5p2, arg6'=arg6p2, (arg1 > 0 /\ arg2 > 0 /\ -1+arg1p2 > 0), cost: 1
  27: f1_0_main_Load -> f3334_0_main_LE : arg1'=arg1p4, arg2'=arg2p4, arg3'=-1+arg4p4, arg4'=arg4p4, arg5'=2, arg6'=arg6p4, (-arg1+arg1p4 <= 0 /\ 1+arg4p4 > 0 /\ arg1 > 0 /\ 1+arg2p4 > 0 /\ arg1p4 > 0 /\ 1-arg1+arg2p4 <= 0 /\ arg2 > 0), cost: 1
  32: f543_0_createTree_GT -> f998_0_createTree_LE : arg2'=arg2p9, arg3'=arg2, arg4'=1+arg3, arg5'=arg5p9, arg6'=arg6p9, (arg3 > 0 /\ arg1 > 0 /\ 1+arg2p9 > 0 /\ 1+arg2 > 0), cost: 1
  47: f543_0_createTree_GT -> f543_0_createTree_GT : arg1'=arg1-n, arg3'=arg3+n, arg4'=arg4p10, arg5'=arg5p10, arg6'=arg6p10, (arg3 > 0 /\ -1+n >= 0 /\ 1+arg2 > 0 /\ 1+arg1-n > 0), cost: 1
  28: f1156_0_random_ArrayAccess -> f3334_0_main_LE : arg1'=arg1p5, arg2'=arg2p5, arg3'=-1+arg4p5, arg4'=arg4p5, arg5'=1+x150, arg6'=arg6p5, (-1+arg2p5 > 0 /\ -arg3 == 0 /\ x150 > 0 /\ 1-arg1+arg1p5 <= 0 /\ 1+arg4p5 > 0 /\ -1+arg1 > 0 /\ arg1p5 > 0 /\ 2-arg1+arg4 <= 0 /\ arg2p5-arg1 <= 0), cost: 1
  26: f814_0_createTree_Return -> f1156_0_random_ArrayAccess : arg1'=arg1p3, arg2'=arg2p3, arg3'=0, arg4'=arg5, arg5'=arg5p3, arg6'=arg6p3, (-arg2+arg1p3 <= 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ 2+arg5-arg2 <= 0 /\ -arg4 == 0 /\ -1+arg1p3 > 0), cost: 1
  29: f3334_0_main_LE -> f3430_0_main_InvokeMethod : arg1'=arg1p6, arg2'=arg3, arg3'=arg3p6, arg4'=arg4p6, arg5'=arg5p6, arg6'=arg6p6, (1+arg6p6-arg2 <= 0 /\ arg1 > 0 /\ -arg2+arg4p6 <= 0 /\ -arg2+arg1p6 <= 0 /\ arg2 > 0 /\ arg4 > 0 /\ arg4p6 > 0 /\ -arg1+arg1p6 <= 0 /\ 1+arg3p6 > 0 /\ arg1p6 > 0), cost: 1
  30: f3334_0_main_LE -> f3430_0_main_InvokeMethod : arg1'=arg1p7, arg2'=arg3, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, arg6'=arg6p7, (arg4p7 > 0 /\ arg1p7 > 0 /\ arg1 > 0 /\ arg1p7-arg1 <= 0 /\ arg4p7-arg2 <= 0 /\ -1+arg3p7 > 0 /\ arg1p7-arg2 <= 0 /\ arg2 > 0 /\ arg4 > 0 /\ 1-arg2+arg6p7 <= 0), cost: 1
  36: f3334_0_main_LE -> f2378_0_random_ArrayAccess : arg1'=arg1p13, arg2'=arg2p13, arg3'=arg3p13, arg4'=arg4p13, arg5'=arg5p13, arg6'=arg6p13, (arg1 > 0 /\ arg1p13-arg2 <= 0 /\ arg1p13 > 0 /\ 1+arg2p13-arg2 <= 0 /\ arg2 > 0 /\ arg4 > 0), cost: 1
  43: f3334_0_main_LE -> f3446_0_visit_NE : arg1'=arg1p20, arg2'=arg3p20, arg3'=arg3p20, arg4'=arg4p20, arg5'=arg5p20, arg6'=arg6p20, (2+arg4p20-arg2 <= 0 /\ arg1 > 0 /\ arg1p20-arg2 <= 0 /\ 2+arg3p20-arg2 <= 0 /\ arg1p20 > 0 /\ -1+arg4 < 0 /\ arg2 > 0), cost: 1
  31: f3430_0_main_InvokeMethod -> f3334_0_main_LE : arg1'=arg1p8, arg2'=arg2p8, arg3'=-1+arg2, arg4'=arg2, arg5'=arg5p8, arg6'=arg6p8, (arg3 > 0 /\ arg1 > 0 /\ arg1p8 > 0 /\ -arg3+arg1p8 <= 0 /\ arg1p8-arg4 <= 0 /\ 1+arg6-arg4 <= 0 /\ -arg1+arg1p8 <= 0 /\ arg4 > 0 /\ arg2p8 > 0), cost: 1
  37: f3430_0_main_InvokeMethod -> f2378_0_random_ArrayAccess : arg1'=arg1p14, arg2'=arg6, arg3'=arg3p14, arg4'=arg4p14, arg5'=arg5p14, arg6'=arg6p14, (arg1 > 0 /\ arg1p14-arg4 <= 0 /\ arg1p14 > 0 /\ 1+arg6-arg4 <= 0 /\ 1+arg3 > 0 /\ arg4 > 0), cost: 1
  33: f998_0_createTree_LE -> f543_0_createTree_GT : arg1'=-1+arg1, arg2'=arg3, arg3'=arg4, arg4'=arg4p10, arg5'=arg5p10, arg6'=arg6p10, (arg1 > 0 /\ -1+arg4 > 0 /\ arg2 > 0), cost: 1
  34: f998_0_createTree_LE -> f998_0_createTree_LE : arg1'=1, arg2'=-1+arg2, arg5'=arg5p11, arg6'=arg6p11, (1-arg1 == 0 /\ -1+arg4 > 0 /\ arg2 > 0), cost: 1
  35: f998_0_createTree_LE -> f998_0_createTree_LE : arg2'=-1+arg2, arg4'=arg4p12, arg5'=arg5p12, arg6'=arg6p12, (arg1 > 0 /\ -1+arg4 > 0 /\ arg2 > 0), cost: 1
  48: f998_0_createTree_LE -> f998_0_createTree_LE : arg1'=1, arg2'=-n2+arg2, arg5'=arg5p11, arg6'=arg6p11, (1-n2+arg2 > 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0 /\ -1+arg4 > 0 /\ -1+n2 >= 0), cost: 1
  38: f2378_0_random_ArrayAccess -> f3147_0_getRandom_LT : arg1'=-1+arg3p15, arg2'=arg2p15, arg3'=arg3p15, arg4'=1+x91, arg5'=arg5p15, arg6'=arg6p15, (arg1 > 0 /\ 1+x91 > 0 /\ 1-arg1+arg2 <= 0 /\ 1+arg3p15 > 0 /\ -arg1+arg2p15 <= 0 /\ arg2p15 > 0), cost: 1
  39: f3147_0_getRandom_LT -> f3577_0_getRandom_LT : arg2'=-1+arg4p16, arg3'=arg3p16, arg4'=arg4p16, arg5'=1+arg4, arg6'=arg6p16, (arg3p16 > 0 /\ 1+arg4p16 > 0 /\ 1+arg4 > 0 /\ 1+arg3 > 0 /\ -2+arg2 > 0 /\ -2-arg3p16+arg2 >= 0), cost: 1
  40: f3577_0_getRandom_LT -> f3577_0_getRandom_LT : arg2'=-1+arg2, arg3'=arg3p17, arg4'=arg2, arg6'=arg6p17, (arg3p17 > 0 /\ 1+arg4 > 0 /\ 2+arg3p17-arg3 <= 0 /\ -2+arg3 > 0), cost: 1
  41: f3577_0_getRandom_LT -> f3147_0_getRandom_LT : arg1'=-1+arg1, arg2'=arg2p18, arg3'=arg1, arg4'=arg5, arg5'=arg5p18, arg6'=arg6p18, (arg3 > 0 /\ arg4 < 0 /\ 1+arg2p18 > 0), cost: 1
  42: f3577_0_getRandom_LT -> f3147_0_getRandom_LT : arg1'=-1+arg1, arg2'=arg2p19, arg3'=arg1, arg4'=arg5, arg5'=arg5p19, arg6'=arg6p19, (-1+arg3 > 0 /\ 1+arg4 > 0 /\ 1+arg2p19 > 0), cost: 1
  44: f3446_0_visit_NE -> f3530_0_visit_NULL : arg1'=arg2, arg2'=arg2p21, arg3'=arg3p21, arg4'=arg4p21, arg5'=arg5p21, arg6'=arg6p21, (2-arg1+arg2 <= 0 /\ arg1 > 0 /\ 1+arg2p21 > 0 /\ -arg3+arg2 == 0 /\ 2-arg1+arg4 <= 0), cost: 1
  45: f3530_0_visit_NULL -> f3446_0_visit_NE : arg1'=arg1p22, arg2'=arg1, arg3'=arg3p22, arg4'=arg4p22, arg5'=arg5p22, arg6'=arg6p22, (arg1p22 > 0 /\ arg2 > 0), cost: 1
  46: f3530_0_visit_NULL -> f3530_0_visit_NULL : arg2'=arg2p23, arg4'=arg4p23, arg5'=arg5p23, arg6'=arg6p23, (1+arg2p23-arg2 <= 0 /\ arg2 > 0 /\ 1+arg2p23 > 0), cost: 1
  23: __init -> f1_0_main_Load : arg1'=arg1p24, arg2'=arg2p24, arg3'=arg3p24, arg4'=arg4p24, arg5'=arg5p24, arg6'=arg6p24, T, cost: 1

	Loop Acceleration

	Original rule:
	f998_0_createTree_LE -> f998_0_createTree_LE : arg1'=1, arg2'=-1+arg2, arg5'=arg5p11, arg6'=arg6p11, (1-arg1 == 0 /\ -1+arg4 > 0 /\ arg2 > 0), cost: 1
	New rule:
	f998_0_createTree_LE -> f998_0_createTree_LE : arg1'=1, arg2'=-n2+arg2, arg5'=arg5p11, arg6'=arg6p11, (1-n2+arg2 > 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0 /\ -1+arg4 > 0 /\ -1+n2 >= 0), cost: 1

		1-arg1 >= 0 [0]: monotonic increase yields 1-arg1 >= 0
		
		-1+arg1 >= 0 [0]: monotonic increase yields -1+arg1 >= 0
		
		-1+arg4 > 0 [0]: monotonic increase yields -1+arg4 > 0
		
		arg2 > 0 [0]: montonic decrease yields 1-n2+arg2 > 0
		
		arg2 > 0 [1]: eventual increase yields (1 <= 0 /\ arg2 > 0)
		
		Replacement map: {1-arg1 >= 0 -> 1-arg1 >= 0, -1+arg1 >= 0 -> -1+arg1 >= 0, -1+arg4 > 0 -> -1+arg4 > 0, arg2 > 0 -> 1-n2+arg2 > 0}

	Trace

	23[T], 24[(arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0)], 47[(arg3 > 0 /\ -1+n >= 0 /\ 1+arg2 > 0 /\ 1+arg1-n > 0)], 32[(arg3 > 0 /\ arg1 > 0 /\ 1+arg2p9 > 0 /\ 1+arg2 > 0)], 48[(1-n2+arg2 > 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0 /\ -1+arg4 > 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {}, {}, {47[T]}, {33[T]}, {34[T], 48[T]}]

Step with 33

	Trace

	23[T], 24[(arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0)], 47[(arg3 > 0 /\ -1+n >= 0 /\ 1+arg2 > 0 /\ 1+arg1-n > 0)], 32[(arg3 > 0 /\ arg1 > 0 /\ 1+arg2p9 > 0 /\ 1+arg2 > 0)], 48[(1-n2+arg2 > 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0 /\ -1+arg4 > 0 /\ -1+n2 >= 0)], 33[(arg1 > 0 /\ -1+arg4 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {}, {47[T]}, {33[T]}, {34[T], 48[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Acceleration Failed

marked recursive suffix as redundant

Backtrack

	Trace

	23[T], 24[(arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0)], 47[(arg3 > 0 /\ -1+n >= 0 /\ 1+arg2 > 0 /\ 1+arg1-n > 0)], 32[(arg3 > 0 /\ arg1 > 0 /\ 1+arg2p9 > 0 /\ 1+arg2 > 0)], 48[(1-n2+arg2 > 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0 /\ -1+arg4 > 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {}, {}, {47[T]}, {33[T]}, {33[T], 34[T], 48[T]}]

Step with 35

	Trace

	23[T], 24[(arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0)], 47[(arg3 > 0 /\ -1+n >= 0 /\ 1+arg2 > 0 /\ 1+arg1-n > 0)], 32[(arg3 > 0 /\ arg1 > 0 /\ 1+arg2p9 > 0 /\ 1+arg2 > 0)], 48[(1-n2+arg2 > 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0 /\ -1+arg4 > 0 /\ -1+n2 >= 0)], 35[(arg1 > 0 /\ -1+arg4 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {}, {47[T]}, {33[T]}, {33[T], 34[T], 48[T]}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5 arg6
  24: f1_0_main_Load -> f543_0_createTree_GT : arg1'=arg1p1, arg3'=1, arg4'=arg4p1, arg5'=arg5p1, arg6'=arg6p1, (arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0), cost: 1
  25: f1_0_main_Load -> f1156_0_random_ArrayAccess : arg1'=arg1p2, arg3'=0, arg4'=arg4p2, arg5'=arg5p2, arg6'=arg6p2, (arg1 > 0 /\ arg2 > 0 /\ -1+arg1p2 > 0), cost: 1
  27: f1_0_main_Load -> f3334_0_main_LE : arg1'=arg1p4, arg2'=arg2p4, arg3'=-1+arg4p4, arg4'=arg4p4, arg5'=2, arg6'=arg6p4, (-arg1+arg1p4 <= 0 /\ 1+arg4p4 > 0 /\ arg1 > 0 /\ 1+arg2p4 > 0 /\ arg1p4 > 0 /\ 1-arg1+arg2p4 <= 0 /\ arg2 > 0), cost: 1
  32: f543_0_createTree_GT -> f998_0_createTree_LE : arg2'=arg2p9, arg3'=arg2, arg4'=1+arg3, arg5'=arg5p9, arg6'=arg6p9, (arg3 > 0 /\ arg1 > 0 /\ 1+arg2p9 > 0 /\ 1+arg2 > 0), cost: 1
  47: f543_0_createTree_GT -> f543_0_createTree_GT : arg1'=arg1-n, arg3'=arg3+n, arg4'=arg4p10, arg5'=arg5p10, arg6'=arg6p10, (arg3 > 0 /\ -1+n >= 0 /\ 1+arg2 > 0 /\ 1+arg1-n > 0), cost: 1
  28: f1156_0_random_ArrayAccess -> f3334_0_main_LE : arg1'=arg1p5, arg2'=arg2p5, arg3'=-1+arg4p5, arg4'=arg4p5, arg5'=1+x150, arg6'=arg6p5, (-1+arg2p5 > 0 /\ -arg3 == 0 /\ x150 > 0 /\ 1-arg1+arg1p5 <= 0 /\ 1+arg4p5 > 0 /\ -1+arg1 > 0 /\ arg1p5 > 0 /\ 2-arg1+arg4 <= 0 /\ arg2p5-arg1 <= 0), cost: 1
  26: f814_0_createTree_Return -> f1156_0_random_ArrayAccess : arg1'=arg1p3, arg2'=arg2p3, arg3'=0, arg4'=arg5, arg5'=arg5p3, arg6'=arg6p3, (-arg2+arg1p3 <= 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ 2+arg5-arg2 <= 0 /\ -arg4 == 0 /\ -1+arg1p3 > 0), cost: 1
  29: f3334_0_main_LE -> f3430_0_main_InvokeMethod : arg1'=arg1p6, arg2'=arg3, arg3'=arg3p6, arg4'=arg4p6, arg5'=arg5p6, arg6'=arg6p6, (1+arg6p6-arg2 <= 0 /\ arg1 > 0 /\ -arg2+arg4p6 <= 0 /\ -arg2+arg1p6 <= 0 /\ arg2 > 0 /\ arg4 > 0 /\ arg4p6 > 0 /\ -arg1+arg1p6 <= 0 /\ 1+arg3p6 > 0 /\ arg1p6 > 0), cost: 1
  30: f3334_0_main_LE -> f3430_0_main_InvokeMethod : arg1'=arg1p7, arg2'=arg3, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, arg6'=arg6p7, (arg4p7 > 0 /\ arg1p7 > 0 /\ arg1 > 0 /\ arg1p7-arg1 <= 0 /\ arg4p7-arg2 <= 0 /\ -1+arg3p7 > 0 /\ arg1p7-arg2 <= 0 /\ arg2 > 0 /\ arg4 > 0 /\ 1-arg2+arg6p7 <= 0), cost: 1
  36: f3334_0_main_LE -> f2378_0_random_ArrayAccess : arg1'=arg1p13, arg2'=arg2p13, arg3'=arg3p13, arg4'=arg4p13, arg5'=arg5p13, arg6'=arg6p13, (arg1 > 0 /\ arg1p13-arg2 <= 0 /\ arg1p13 > 0 /\ 1+arg2p13-arg2 <= 0 /\ arg2 > 0 /\ arg4 > 0), cost: 1
  43: f3334_0_main_LE -> f3446_0_visit_NE : arg1'=arg1p20, arg2'=arg3p20, arg3'=arg3p20, arg4'=arg4p20, arg5'=arg5p20, arg6'=arg6p20, (2+arg4p20-arg2 <= 0 /\ arg1 > 0 /\ arg1p20-arg2 <= 0 /\ 2+arg3p20-arg2 <= 0 /\ arg1p20 > 0 /\ -1+arg4 < 0 /\ arg2 > 0), cost: 1
  31: f3430_0_main_InvokeMethod -> f3334_0_main_LE : arg1'=arg1p8, arg2'=arg2p8, arg3'=-1+arg2, arg4'=arg2, arg5'=arg5p8, arg6'=arg6p8, (arg3 > 0 /\ arg1 > 0 /\ arg1p8 > 0 /\ -arg3+arg1p8 <= 0 /\ arg1p8-arg4 <= 0 /\ 1+arg6-arg4 <= 0 /\ -arg1+arg1p8 <= 0 /\ arg4 > 0 /\ arg2p8 > 0), cost: 1
  37: f3430_0_main_InvokeMethod -> f2378_0_random_ArrayAccess : arg1'=arg1p14, arg2'=arg6, arg3'=arg3p14, arg4'=arg4p14, arg5'=arg5p14, arg6'=arg6p14, (arg1 > 0 /\ arg1p14-arg4 <= 0 /\ arg1p14 > 0 /\ 1+arg6-arg4 <= 0 /\ 1+arg3 > 0 /\ arg4 > 0), cost: 1
  33: f998_0_createTree_LE -> f543_0_createTree_GT : arg1'=-1+arg1, arg2'=arg3, arg3'=arg4, arg4'=arg4p10, arg5'=arg5p10, arg6'=arg6p10, (arg1 > 0 /\ -1+arg4 > 0 /\ arg2 > 0), cost: 1
  34: f998_0_createTree_LE -> f998_0_createTree_LE : arg1'=1, arg2'=-1+arg2, arg5'=arg5p11, arg6'=arg6p11, (1-arg1 == 0 /\ -1+arg4 > 0 /\ arg2 > 0), cost: 1
  35: f998_0_createTree_LE -> f998_0_createTree_LE : arg2'=-1+arg2, arg4'=arg4p12, arg5'=arg5p12, arg6'=arg6p12, (arg1 > 0 /\ -1+arg4 > 0 /\ arg2 > 0), cost: 1
  48: f998_0_createTree_LE -> f998_0_createTree_LE : arg1'=1, arg2'=-n2+arg2, arg5'=arg5p11, arg6'=arg6p11, (1-n2+arg2 > 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0 /\ -1+arg4 > 0 /\ -1+n2 >= 0), cost: 1
  49: f998_0_createTree_LE -> f998_0_createTree_LE : arg2'=-n3+arg2, arg4'=arg4p12, arg5'=arg5p12, arg6'=arg6p12, (-1+arg4p12 > 0 /\ 1-n3+arg2 > 0 /\ arg1 > 0 /\ -1+n3 >= 0 /\ -1+arg4 > 0), cost: 1
  38: f2378_0_random_ArrayAccess -> f3147_0_getRandom_LT : arg1'=-1+arg3p15, arg2'=arg2p15, arg3'=arg3p15, arg4'=1+x91, arg5'=arg5p15, arg6'=arg6p15, (arg1 > 0 /\ 1+x91 > 0 /\ 1-arg1+arg2 <= 0 /\ 1+arg3p15 > 0 /\ -arg1+arg2p15 <= 0 /\ arg2p15 > 0), cost: 1
  39: f3147_0_getRandom_LT -> f3577_0_getRandom_LT : arg2'=-1+arg4p16, arg3'=arg3p16, arg4'=arg4p16, arg5'=1+arg4, arg6'=arg6p16, (arg3p16 > 0 /\ 1+arg4p16 > 0 /\ 1+arg4 > 0 /\ 1+arg3 > 0 /\ -2+arg2 > 0 /\ -2-arg3p16+arg2 >= 0), cost: 1
  40: f3577_0_getRandom_LT -> f3577_0_getRandom_LT : arg2'=-1+arg2, arg3'=arg3p17, arg4'=arg2, arg6'=arg6p17, (arg3p17 > 0 /\ 1+arg4 > 0 /\ 2+arg3p17-arg3 <= 0 /\ -2+arg3 > 0), cost: 1
  41: f3577_0_getRandom_LT -> f3147_0_getRandom_LT : arg1'=-1+arg1, arg2'=arg2p18, arg3'=arg1, arg4'=arg5, arg5'=arg5p18, arg6'=arg6p18, (arg3 > 0 /\ arg4 < 0 /\ 1+arg2p18 > 0), cost: 1
  42: f3577_0_getRandom_LT -> f3147_0_getRandom_LT : arg1'=-1+arg1, arg2'=arg2p19, arg3'=arg1, arg4'=arg5, arg5'=arg5p19, arg6'=arg6p19, (-1+arg3 > 0 /\ 1+arg4 > 0 /\ 1+arg2p19 > 0), cost: 1
  44: f3446_0_visit_NE -> f3530_0_visit_NULL : arg1'=arg2, arg2'=arg2p21, arg3'=arg3p21, arg4'=arg4p21, arg5'=arg5p21, arg6'=arg6p21, (2-arg1+arg2 <= 0 /\ arg1 > 0 /\ 1+arg2p21 > 0 /\ -arg3+arg2 == 0 /\ 2-arg1+arg4 <= 0), cost: 1
  45: f3530_0_visit_NULL -> f3446_0_visit_NE : arg1'=arg1p22, arg2'=arg1, arg3'=arg3p22, arg4'=arg4p22, arg5'=arg5p22, arg6'=arg6p22, (arg1p22 > 0 /\ arg2 > 0), cost: 1
  46: f3530_0_visit_NULL -> f3530_0_visit_NULL : arg2'=arg2p23, arg4'=arg4p23, arg5'=arg5p23, arg6'=arg6p23, (1+arg2p23-arg2 <= 0 /\ arg2 > 0 /\ 1+arg2p23 > 0), cost: 1
  23: __init -> f1_0_main_Load : arg1'=arg1p24, arg2'=arg2p24, arg3'=arg3p24, arg4'=arg4p24, arg5'=arg5p24, arg6'=arg6p24, T, cost: 1

	Loop Acceleration

	Original rule:
	f998_0_createTree_LE -> f998_0_createTree_LE : arg2'=-1+arg2, arg4'=arg4p12, arg5'=arg5p12, arg6'=arg6p12, (arg1 > 0 /\ -1+arg4 > 0 /\ arg2 > 0), cost: 1
	New rule:
	f998_0_createTree_LE -> f998_0_createTree_LE : arg2'=-n3+arg2, arg4'=arg4p12, arg5'=arg5p12, arg6'=arg6p12, (-1+arg4p12 > 0 /\ 1-n3+arg2 > 0 /\ arg1 > 0 /\ -1+n3 >= 0 /\ -1+arg4 > 0), cost: 1

		arg1 > 0 [0]: monotonic increase yields arg1 > 0
		
		-1+arg4 > 0 [0]: eventual decrease yields (-1+arg4p12 > 0 /\ -1+arg4 > 0)
		
		-1+arg4 > 0 [1]: eventual increase yields (-1+arg4 > 0 /\ -arg4p12+arg4 <= 0)
		
		arg2 > 0 [0]: montonic decrease yields 1-n3+arg2 > 0
		
		arg2 > 0 [1]: eventual increase yields (1 <= 0 /\ arg2 > 0)
		
		Replacement map: {arg1 > 0 -> arg1 > 0, -1+arg4 > 0 -> (-1+arg4p12 > 0 /\ -1+arg4 > 0), arg2 > 0 -> 1-n3+arg2 > 0}

	Trace

	23[T], 24[(arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0)], 47[(arg3 > 0 /\ -1+n >= 0 /\ 1+arg2 > 0 /\ 1+arg1-n > 0)], 32[(arg3 > 0 /\ arg1 > 0 /\ 1+arg2p9 > 0 /\ 1+arg2 > 0)], 48[(1-n2+arg2 > 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0 /\ -1+arg4 > 0 /\ -1+n2 >= 0)], 49[(-1+arg4p12 > 0 /\ 1-n3+arg2 > 0 /\ arg1 > 0 /\ -1+n3 >= 0 /\ -1+arg4 > 0)]
	
	Blocked

	[{}, {}, {}, {47[T]}, {33[T]}, {33[T], 34[T], 48[T]}, {35[T], 49[T]}]

Accelerate

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5 arg6
  24: f1_0_main_Load -> f543_0_createTree_GT : arg1'=arg1p1, arg3'=1, arg4'=arg4p1, arg5'=arg5p1, arg6'=arg6p1, (arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0), cost: 1
  25: f1_0_main_Load -> f1156_0_random_ArrayAccess : arg1'=arg1p2, arg3'=0, arg4'=arg4p2, arg5'=arg5p2, arg6'=arg6p2, (arg1 > 0 /\ arg2 > 0 /\ -1+arg1p2 > 0), cost: 1
  27: f1_0_main_Load -> f3334_0_main_LE : arg1'=arg1p4, arg2'=arg2p4, arg3'=-1+arg4p4, arg4'=arg4p4, arg5'=2, arg6'=arg6p4, (-arg1+arg1p4 <= 0 /\ 1+arg4p4 > 0 /\ arg1 > 0 /\ 1+arg2p4 > 0 /\ arg1p4 > 0 /\ 1-arg1+arg2p4 <= 0 /\ arg2 > 0), cost: 1
  32: f543_0_createTree_GT -> f998_0_createTree_LE : arg2'=arg2p9, arg3'=arg2, arg4'=1+arg3, arg5'=arg5p9, arg6'=arg6p9, (arg3 > 0 /\ arg1 > 0 /\ 1+arg2p9 > 0 /\ 1+arg2 > 0), cost: 1
  47: f543_0_createTree_GT -> f543_0_createTree_GT : arg1'=arg1-n, arg3'=arg3+n, arg4'=arg4p10, arg5'=arg5p10, arg6'=arg6p10, (arg3 > 0 /\ -1+n >= 0 /\ 1+arg2 > 0 /\ 1+arg1-n > 0), cost: 1
  28: f1156_0_random_ArrayAccess -> f3334_0_main_LE : arg1'=arg1p5, arg2'=arg2p5, arg3'=-1+arg4p5, arg4'=arg4p5, arg5'=1+x150, arg6'=arg6p5, (-1+arg2p5 > 0 /\ -arg3 == 0 /\ x150 > 0 /\ 1-arg1+arg1p5 <= 0 /\ 1+arg4p5 > 0 /\ -1+arg1 > 0 /\ arg1p5 > 0 /\ 2-arg1+arg4 <= 0 /\ arg2p5-arg1 <= 0), cost: 1
  26: f814_0_createTree_Return -> f1156_0_random_ArrayAccess : arg1'=arg1p3, arg2'=arg2p3, arg3'=0, arg4'=arg5, arg5'=arg5p3, arg6'=arg6p3, (-arg2+arg1p3 <= 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ 2+arg5-arg2 <= 0 /\ -arg4 == 0 /\ -1+arg1p3 > 0), cost: 1
  29: f3334_0_main_LE -> f3430_0_main_InvokeMethod : arg1'=arg1p6, arg2'=arg3, arg3'=arg3p6, arg4'=arg4p6, arg5'=arg5p6, arg6'=arg6p6, (1+arg6p6-arg2 <= 0 /\ arg1 > 0 /\ -arg2+arg4p6 <= 0 /\ -arg2+arg1p6 <= 0 /\ arg2 > 0 /\ arg4 > 0 /\ arg4p6 > 0 /\ -arg1+arg1p6 <= 0 /\ 1+arg3p6 > 0 /\ arg1p6 > 0), cost: 1
  30: f3334_0_main_LE -> f3430_0_main_InvokeMethod : arg1'=arg1p7, arg2'=arg3, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, arg6'=arg6p7, (arg4p7 > 0 /\ arg1p7 > 0 /\ arg1 > 0 /\ arg1p7-arg1 <= 0 /\ arg4p7-arg2 <= 0 /\ -1+arg3p7 > 0 /\ arg1p7-arg2 <= 0 /\ arg2 > 0 /\ arg4 > 0 /\ 1-arg2+arg6p7 <= 0), cost: 1
  36: f3334_0_main_LE -> f2378_0_random_ArrayAccess : arg1'=arg1p13, arg2'=arg2p13, arg3'=arg3p13, arg4'=arg4p13, arg5'=arg5p13, arg6'=arg6p13, (arg1 > 0 /\ arg1p13-arg2 <= 0 /\ arg1p13 > 0 /\ 1+arg2p13-arg2 <= 0 /\ arg2 > 0 /\ arg4 > 0), cost: 1
  43: f3334_0_main_LE -> f3446_0_visit_NE : arg1'=arg1p20, arg2'=arg3p20, arg3'=arg3p20, arg4'=arg4p20, arg5'=arg5p20, arg6'=arg6p20, (2+arg4p20-arg2 <= 0 /\ arg1 > 0 /\ arg1p20-arg2 <= 0 /\ 2+arg3p20-arg2 <= 0 /\ arg1p20 > 0 /\ -1+arg4 < 0 /\ arg2 > 0), cost: 1
  31: f3430_0_main_InvokeMethod -> f3334_0_main_LE : arg1'=arg1p8, arg2'=arg2p8, arg3'=-1+arg2, arg4'=arg2, arg5'=arg5p8, arg6'=arg6p8, (arg3 > 0 /\ arg1 > 0 /\ arg1p8 > 0 /\ -arg3+arg1p8 <= 0 /\ arg1p8-arg4 <= 0 /\ 1+arg6-arg4 <= 0 /\ -arg1+arg1p8 <= 0 /\ arg4 > 0 /\ arg2p8 > 0), cost: 1
  37: f3430_0_main_InvokeMethod -> f2378_0_random_ArrayAccess : arg1'=arg1p14, arg2'=arg6, arg3'=arg3p14, arg4'=arg4p14, arg5'=arg5p14, arg6'=arg6p14, (arg1 > 0 /\ arg1p14-arg4 <= 0 /\ arg1p14 > 0 /\ 1+arg6-arg4 <= 0 /\ 1+arg3 > 0 /\ arg4 > 0), cost: 1
  33: f998_0_createTree_LE -> f543_0_createTree_GT : arg1'=-1+arg1, arg2'=arg3, arg3'=arg4, arg4'=arg4p10, arg5'=arg5p10, arg6'=arg6p10, (arg1 > 0 /\ -1+arg4 > 0 /\ arg2 > 0), cost: 1
  34: f998_0_createTree_LE -> f998_0_createTree_LE : arg1'=1, arg2'=-1+arg2, arg5'=arg5p11, arg6'=arg6p11, (1-arg1 == 0 /\ -1+arg4 > 0 /\ arg2 > 0), cost: 1
  35: f998_0_createTree_LE -> f998_0_createTree_LE : arg2'=-1+arg2, arg4'=arg4p12, arg5'=arg5p12, arg6'=arg6p12, (arg1 > 0 /\ -1+arg4 > 0 /\ arg2 > 0), cost: 1
  48: f998_0_createTree_LE -> f998_0_createTree_LE : arg1'=1, arg2'=-n2+arg2, arg5'=arg5p11, arg6'=arg6p11, (1-n2+arg2 > 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0 /\ -1+arg4 > 0 /\ -1+n2 >= 0), cost: 1
  49: f998_0_createTree_LE -> f998_0_createTree_LE : arg2'=-n3+arg2, arg4'=arg4p12, arg5'=arg5p12, arg6'=arg6p12, (-1+arg4p12 > 0 /\ 1-n3+arg2 > 0 /\ arg1 > 0 /\ -1+n3 >= 0 /\ -1+arg4 > 0), cost: 1
  50: f998_0_createTree_LE -> f998_0_createTree_LE : arg1'=1, arg2'=-n21*n4-n3*n4+arg2, arg4'=arg4p12, arg5'=arg5p12, arg6'=arg6p12, (1-n3*(-1+n4)-n3-n21+arg2-n21*(-1+n4) > 0 /\ -1+arg4p12 > 0 /\ -1+n4 >= 0 /\ 1-n3*(-1+n4)-n21+arg2-n21*(-1+n4) > 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0 /\ -1+n3 >= 0 /\ -1+arg4 > 0 /\ -1+n21 >= 0), cost: 1
  38: f2378_0_random_ArrayAccess -> f3147_0_getRandom_LT : arg1'=-1+arg3p15, arg2'=arg2p15, arg3'=arg3p15, arg4'=1+x91, arg5'=arg5p15, arg6'=arg6p15, (arg1 > 0 /\ 1+x91 > 0 /\ 1-arg1+arg2 <= 0 /\ 1+arg3p15 > 0 /\ -arg1+arg2p15 <= 0 /\ arg2p15 > 0), cost: 1
  39: f3147_0_getRandom_LT -> f3577_0_getRandom_LT : arg2'=-1+arg4p16, arg3'=arg3p16, arg4'=arg4p16, arg5'=1+arg4, arg6'=arg6p16, (arg3p16 > 0 /\ 1+arg4p16 > 0 /\ 1+arg4 > 0 /\ 1+arg3 > 0 /\ -2+arg2 > 0 /\ -2-arg3p16+arg2 >= 0), cost: 1
  40: f3577_0_getRandom_LT -> f3577_0_getRandom_LT : arg2'=-1+arg2, arg3'=arg3p17, arg4'=arg2, arg6'=arg6p17, (arg3p17 > 0 /\ 1+arg4 > 0 /\ 2+arg3p17-arg3 <= 0 /\ -2+arg3 > 0), cost: 1
  41: f3577_0_getRandom_LT -> f3147_0_getRandom_LT : arg1'=-1+arg1, arg2'=arg2p18, arg3'=arg1, arg4'=arg5, arg5'=arg5p18, arg6'=arg6p18, (arg3 > 0 /\ arg4 < 0 /\ 1+arg2p18 > 0), cost: 1
  42: f3577_0_getRandom_LT -> f3147_0_getRandom_LT : arg1'=-1+arg1, arg2'=arg2p19, arg3'=arg1, arg4'=arg5, arg5'=arg5p19, arg6'=arg6p19, (-1+arg3 > 0 /\ 1+arg4 > 0 /\ 1+arg2p19 > 0), cost: 1
  44: f3446_0_visit_NE -> f3530_0_visit_NULL : arg1'=arg2, arg2'=arg2p21, arg3'=arg3p21, arg4'=arg4p21, arg5'=arg5p21, arg6'=arg6p21, (2-arg1+arg2 <= 0 /\ arg1 > 0 /\ 1+arg2p21 > 0 /\ -arg3+arg2 == 0 /\ 2-arg1+arg4 <= 0), cost: 1
  45: f3530_0_visit_NULL -> f3446_0_visit_NE : arg1'=arg1p22, arg2'=arg1, arg3'=arg3p22, arg4'=arg4p22, arg5'=arg5p22, arg6'=arg6p22, (arg1p22 > 0 /\ arg2 > 0), cost: 1
  46: f3530_0_visit_NULL -> f3530_0_visit_NULL : arg2'=arg2p23, arg4'=arg4p23, arg5'=arg5p23, arg6'=arg6p23, (1+arg2p23-arg2 <= 0 /\ arg2 > 0 /\ 1+arg2p23 > 0), cost: 1
  23: __init -> f1_0_main_Load : arg1'=arg1p24, arg2'=arg2p24, arg3'=arg3p24, arg4'=arg4p24, arg5'=arg5p24, arg6'=arg6p24, T, cost: 1

	Loop Acceleration

	Original rule:
	f998_0_createTree_LE -> f998_0_createTree_LE : arg1'=1, arg2'=-n3-n21+arg2, arg4'=arg4p12, arg5'=arg5p12, arg6'=arg6p12, (-1+arg4p12 > 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0 /\ -1+arg1 == 0 /\ -1+n3 >= 0 /\ 1-n3-n21+arg2 > 0 /\ -1+arg4 > 0 /\ -1+n21 >= 0 /\ 1-n21+arg2 > 0), cost: 1
	New rule:
	f998_0_createTree_LE -> f998_0_createTree_LE : arg1'=1, arg2'=-n21*n4-n3*n4+arg2, arg4'=arg4p12, arg5'=arg5p12, arg6'=arg6p12, (1-n3*(-1+n4)-n3-n21+arg2-n21*(-1+n4) > 0 /\ -1+arg4p12 > 0 /\ -1+n4 >= 0 /\ 1-n3*(-1+n4)-n21+arg2-n21*(-1+n4) > 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0 /\ -1+n3 >= 0 /\ -1+arg4 > 0 /\ -1+n21 >= 0), cost: 1

		-1+arg4p12 > 0 [0]: monotonic increase yields -1+arg4p12 > 0
		
		1-arg1 >= 0 [0]: monotonic increase yields 1-arg1 >= 0
		
		-1+arg1 >= 0 [0]: monotonic increase yields -1+arg1 >= 0
		
		-1+n3 >= 0 [0]: monotonic increase yields -1+n3 >= 0
		
		1-n3-n21+arg2 > 0 [0]: montonic decrease yields 1-n3*(-1+n4)-n3-n21+arg2-n21*(-1+n4) > 0, dependencies: -1+n3 >= 0 -1+n21 >= 0
		
		1-n3-n21+arg2 > 0 [1]: eventual decrease yields (1-n3*(-1+n4)-n3-n21+arg2-n21*(-1+n4) > 0 /\ 1-n3-n21+arg2 > 0)
		
		1-n3-n21+arg2 > 0 [2]: eventual increase yields (n3+n21 <= 0 /\ 1-n3-n21+arg2 > 0)
		
		-1+arg4 > 0 [0]: eventual decrease yields (-1+arg4p12 > 0 /\ -1+arg4 > 0)
		
		-1+arg4 > 0 [1]: eventual increase yields (-1+arg4 > 0 /\ -arg4p12+arg4 <= 0)
		
		-1+n21 >= 0 [0]: monotonic increase yields -1+n21 >= 0
		
		1-n21+arg2 > 0 [0]: montonic decrease yields 1-n3*(-1+n4)-n21+arg2-n21*(-1+n4) > 0, dependencies: -1+n3 >= 0 1-n3-n21+arg2 > 0
		
		1-n21+arg2 > 0 [1]: eventual increase yields (n3+n21 <= 0 /\ 1-n21+arg2 > 0)
		
		Replacement map: {-1+arg4p12 > 0 -> -1+arg4p12 > 0, 1-arg1 >= 0 -> 1-arg1 >= 0, -1+arg1 >= 0 -> -1+arg1 >= 0, -1+n3 >= 0 -> -1+n3 >= 0, 1-n3-n21+arg2 > 0 -> 1-n3*(-1+n4)-n3-n21+arg2-n21*(-1+n4) > 0, -1+arg4 > 0 -> (-1+arg4p12 > 0 /\ -1+arg4 > 0), -1+n21 >= 0 -> -1+n21 >= 0, 1-n21+arg2 > 0 -> 1-n3*(-1+n4)-n21+arg2-n21*(-1+n4) > 0}

	Trace

	23[T], 24[(arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0)], 47[(arg3 > 0 /\ -1+n >= 0 /\ 1+arg2 > 0 /\ 1+arg1-n > 0)], 32[(arg3 > 0 /\ arg1 > 0 /\ 1+arg2p9 > 0 /\ 1+arg2 > 0)], 50[(1-n3*(-1+n4)-n3-n21+arg2-n21*(-1+n4) > 0 /\ -1+arg4p12 > 0 /\ -1+n4 >= 0 /\ 1-n3*(-1+n4)-n21+arg2-n21*(-1+n4) > 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0 /\ -1+n3 >= 0 /\ -1+arg4 > 0 /\ -1+n21 >= 0)]
	
	Blocked

	[{}, {}, {}, {47[T]}, {33[T]}, {50[T]}]

Step with 33

	Trace

	23[T], 24[(arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0)], 47[(arg3 > 0 /\ -1+n >= 0 /\ 1+arg2 > 0 /\ 1+arg1-n > 0)], 32[(arg3 > 0 /\ arg1 > 0 /\ 1+arg2p9 > 0 /\ 1+arg2 > 0)], 50[(1-n3*(-1+n4)-n3-n21+arg2-n21*(-1+n4) > 0 /\ -1+arg4p12 > 0 /\ -1+n4 >= 0 /\ 1-n3*(-1+n4)-n21+arg2-n21*(-1+n4) > 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0 /\ -1+n3 >= 0 /\ -1+arg4 > 0 /\ -1+n21 >= 0)], 33[(arg1 > 0 /\ -1+arg4 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {}, {47[T]}, {33[T]}, {50[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Acceleration Failed

marked recursive suffix as redundant

Backtrack

	Trace

	23[T], 24[(arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0)], 47[(arg3 > 0 /\ -1+n >= 0 /\ 1+arg2 > 0 /\ 1+arg1-n > 0)], 32[(arg3 > 0 /\ arg1 > 0 /\ 1+arg2p9 > 0 /\ 1+arg2 > 0)], 50[(1-n3*(-1+n4)-n3-n21+arg2-n21*(-1+n4) > 0 /\ -1+arg4p12 > 0 /\ -1+n4 >= 0 /\ 1-n3*(-1+n4)-n21+arg2-n21*(-1+n4) > 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0 /\ -1+n3 >= 0 /\ -1+arg4 > 0 /\ -1+n21 >= 0)]
	
	Blocked

	[{}, {}, {}, {47[T]}, {33[T]}, {33[T], 50[T]}]

Step with 34

	Trace

	23[T], 24[(arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0)], 47[(arg3 > 0 /\ -1+n >= 0 /\ 1+arg2 > 0 /\ 1+arg1-n > 0)], 32[(arg3 > 0 /\ arg1 > 0 /\ 1+arg2p9 > 0 /\ 1+arg2 > 0)], 50[(1-n3*(-1+n4)-n3-n21+arg2-n21*(-1+n4) > 0 /\ -1+arg4p12 > 0 /\ -1+n4 >= 0 /\ 1-n3*(-1+n4)-n21+arg2-n21*(-1+n4) > 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0 /\ -1+n3 >= 0 /\ -1+arg4 > 0 /\ -1+n21 >= 0)], 34[(1-arg1 == 0 /\ -1+arg4 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {}, {47[T]}, {33[T]}, {33[T], 50[T]}, {}]

Covered

	Trace

	23[T], 24[(arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0)], 47[(arg3 > 0 /\ -1+n >= 0 /\ 1+arg2 > 0 /\ 1+arg1-n > 0)], 32[(arg3 > 0 /\ arg1 > 0 /\ 1+arg2p9 > 0 /\ 1+arg2 > 0)], 50[(1-n3*(-1+n4)-n3-n21+arg2-n21*(-1+n4) > 0 /\ -1+arg4p12 > 0 /\ -1+n4 >= 0 /\ 1-n3*(-1+n4)-n21+arg2-n21*(-1+n4) > 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0 /\ -1+n3 >= 0 /\ -1+arg4 > 0 /\ -1+n21 >= 0)]
	
	Blocked

	[{}, {}, {}, {47[T]}, {33[T]}, {33[T], 34[T], 50[T]}]

Step with 35

	Trace

	23[T], 24[(arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0)], 47[(arg3 > 0 /\ -1+n >= 0 /\ 1+arg2 > 0 /\ 1+arg1-n > 0)], 32[(arg3 > 0 /\ arg1 > 0 /\ 1+arg2p9 > 0 /\ 1+arg2 > 0)], 50[(1-n3*(-1+n4)-n3-n21+arg2-n21*(-1+n4) > 0 /\ -1+arg4p12 > 0 /\ -1+n4 >= 0 /\ 1-n3*(-1+n4)-n21+arg2-n21*(-1+n4) > 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0 /\ -1+n3 >= 0 /\ -1+arg4 > 0 /\ -1+n21 >= 0)], 35[(arg1 > 0 /\ -1+arg4 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {}, {47[T]}, {33[T]}, {33[T], 34[T], 50[T]}, {}]

Covered

	Trace

	23[T], 24[(arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0)], 47[(arg3 > 0 /\ -1+n >= 0 /\ 1+arg2 > 0 /\ 1+arg1-n > 0)], 32[(arg3 > 0 /\ arg1 > 0 /\ 1+arg2p9 > 0 /\ 1+arg2 > 0)], 50[(1-n3*(-1+n4)-n3-n21+arg2-n21*(-1+n4) > 0 /\ -1+arg4p12 > 0 /\ -1+n4 >= 0 /\ 1-n3*(-1+n4)-n21+arg2-n21*(-1+n4) > 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0 /\ -1+n3 >= 0 /\ -1+arg4 > 0 /\ -1+n21 >= 0)]
	
	Blocked

	[{}, {}, {}, {47[T]}, {33[T]}, {33[T], 34[T], 35[T], 50[T]}]

Step with 48

	Trace

	23[T], 24[(arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0)], 47[(arg3 > 0 /\ -1+n >= 0 /\ 1+arg2 > 0 /\ 1+arg1-n > 0)], 32[(arg3 > 0 /\ arg1 > 0 /\ 1+arg2p9 > 0 /\ 1+arg2 > 0)], 50[(1-n3*(-1+n4)-n3-n21+arg2-n21*(-1+n4) > 0 /\ -1+arg4p12 > 0 /\ -1+n4 >= 0 /\ 1-n3*(-1+n4)-n21+arg2-n21*(-1+n4) > 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0 /\ -1+n3 >= 0 /\ -1+arg4 > 0 /\ -1+n21 >= 0)], 48[(1-n2+arg2 > 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0 /\ -1+arg4 > 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {}, {}, {47[T]}, {33[T]}, {33[T], 34[T], 35[T], 50[T]}, {48[T]}]

Accelerate

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5 arg6
  24: f1_0_main_Load -> f543_0_createTree_GT : arg1'=arg1p1, arg3'=1, arg4'=arg4p1, arg5'=arg5p1, arg6'=arg6p1, (arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0), cost: 1
  25: f1_0_main_Load -> f1156_0_random_ArrayAccess : arg1'=arg1p2, arg3'=0, arg4'=arg4p2, arg5'=arg5p2, arg6'=arg6p2, (arg1 > 0 /\ arg2 > 0 /\ -1+arg1p2 > 0), cost: 1
  27: f1_0_main_Load -> f3334_0_main_LE : arg1'=arg1p4, arg2'=arg2p4, arg3'=-1+arg4p4, arg4'=arg4p4, arg5'=2, arg6'=arg6p4, (-arg1+arg1p4 <= 0 /\ 1+arg4p4 > 0 /\ arg1 > 0 /\ 1+arg2p4 > 0 /\ arg1p4 > 0 /\ 1-arg1+arg2p4 <= 0 /\ arg2 > 0), cost: 1
  32: f543_0_createTree_GT -> f998_0_createTree_LE : arg2'=arg2p9, arg3'=arg2, arg4'=1+arg3, arg5'=arg5p9, arg6'=arg6p9, (arg3 > 0 /\ arg1 > 0 /\ 1+arg2p9 > 0 /\ 1+arg2 > 0), cost: 1
  47: f543_0_createTree_GT -> f543_0_createTree_GT : arg1'=arg1-n, arg3'=arg3+n, arg4'=arg4p10, arg5'=arg5p10, arg6'=arg6p10, (arg3 > 0 /\ -1+n >= 0 /\ 1+arg2 > 0 /\ 1+arg1-n > 0), cost: 1
  28: f1156_0_random_ArrayAccess -> f3334_0_main_LE : arg1'=arg1p5, arg2'=arg2p5, arg3'=-1+arg4p5, arg4'=arg4p5, arg5'=1+x150, arg6'=arg6p5, (-1+arg2p5 > 0 /\ -arg3 == 0 /\ x150 > 0 /\ 1-arg1+arg1p5 <= 0 /\ 1+arg4p5 > 0 /\ -1+arg1 > 0 /\ arg1p5 > 0 /\ 2-arg1+arg4 <= 0 /\ arg2p5-arg1 <= 0), cost: 1
  26: f814_0_createTree_Return -> f1156_0_random_ArrayAccess : arg1'=arg1p3, arg2'=arg2p3, arg3'=0, arg4'=arg5, arg5'=arg5p3, arg6'=arg6p3, (-arg2+arg1p3 <= 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ 2+arg5-arg2 <= 0 /\ -arg4 == 0 /\ -1+arg1p3 > 0), cost: 1
  29: f3334_0_main_LE -> f3430_0_main_InvokeMethod : arg1'=arg1p6, arg2'=arg3, arg3'=arg3p6, arg4'=arg4p6, arg5'=arg5p6, arg6'=arg6p6, (1+arg6p6-arg2 <= 0 /\ arg1 > 0 /\ -arg2+arg4p6 <= 0 /\ -arg2+arg1p6 <= 0 /\ arg2 > 0 /\ arg4 > 0 /\ arg4p6 > 0 /\ -arg1+arg1p6 <= 0 /\ 1+arg3p6 > 0 /\ arg1p6 > 0), cost: 1
  30: f3334_0_main_LE -> f3430_0_main_InvokeMethod : arg1'=arg1p7, arg2'=arg3, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, arg6'=arg6p7, (arg4p7 > 0 /\ arg1p7 > 0 /\ arg1 > 0 /\ arg1p7-arg1 <= 0 /\ arg4p7-arg2 <= 0 /\ -1+arg3p7 > 0 /\ arg1p7-arg2 <= 0 /\ arg2 > 0 /\ arg4 > 0 /\ 1-arg2+arg6p7 <= 0), cost: 1
  36: f3334_0_main_LE -> f2378_0_random_ArrayAccess : arg1'=arg1p13, arg2'=arg2p13, arg3'=arg3p13, arg4'=arg4p13, arg5'=arg5p13, arg6'=arg6p13, (arg1 > 0 /\ arg1p13-arg2 <= 0 /\ arg1p13 > 0 /\ 1+arg2p13-arg2 <= 0 /\ arg2 > 0 /\ arg4 > 0), cost: 1
  43: f3334_0_main_LE -> f3446_0_visit_NE : arg1'=arg1p20, arg2'=arg3p20, arg3'=arg3p20, arg4'=arg4p20, arg5'=arg5p20, arg6'=arg6p20, (2+arg4p20-arg2 <= 0 /\ arg1 > 0 /\ arg1p20-arg2 <= 0 /\ 2+arg3p20-arg2 <= 0 /\ arg1p20 > 0 /\ -1+arg4 < 0 /\ arg2 > 0), cost: 1
  31: f3430_0_main_InvokeMethod -> f3334_0_main_LE : arg1'=arg1p8, arg2'=arg2p8, arg3'=-1+arg2, arg4'=arg2, arg5'=arg5p8, arg6'=arg6p8, (arg3 > 0 /\ arg1 > 0 /\ arg1p8 > 0 /\ -arg3+arg1p8 <= 0 /\ arg1p8-arg4 <= 0 /\ 1+arg6-arg4 <= 0 /\ -arg1+arg1p8 <= 0 /\ arg4 > 0 /\ arg2p8 > 0), cost: 1
  37: f3430_0_main_InvokeMethod -> f2378_0_random_ArrayAccess : arg1'=arg1p14, arg2'=arg6, arg3'=arg3p14, arg4'=arg4p14, arg5'=arg5p14, arg6'=arg6p14, (arg1 > 0 /\ arg1p14-arg4 <= 0 /\ arg1p14 > 0 /\ 1+arg6-arg4 <= 0 /\ 1+arg3 > 0 /\ arg4 > 0), cost: 1
  33: f998_0_createTree_LE -> f543_0_createTree_GT : arg1'=-1+arg1, arg2'=arg3, arg3'=arg4, arg4'=arg4p10, arg5'=arg5p10, arg6'=arg6p10, (arg1 > 0 /\ -1+arg4 > 0 /\ arg2 > 0), cost: 1
  34: f998_0_createTree_LE -> f998_0_createTree_LE : arg1'=1, arg2'=-1+arg2, arg5'=arg5p11, arg6'=arg6p11, (1-arg1 == 0 /\ -1+arg4 > 0 /\ arg2 > 0), cost: 1
  35: f998_0_createTree_LE -> f998_0_createTree_LE : arg2'=-1+arg2, arg4'=arg4p12, arg5'=arg5p12, arg6'=arg6p12, (arg1 > 0 /\ -1+arg4 > 0 /\ arg2 > 0), cost: 1
  48: f998_0_createTree_LE -> f998_0_createTree_LE : arg1'=1, arg2'=-n2+arg2, arg5'=arg5p11, arg6'=arg6p11, (1-n2+arg2 > 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0 /\ -1+arg4 > 0 /\ -1+n2 >= 0), cost: 1
  49: f998_0_createTree_LE -> f998_0_createTree_LE : arg2'=-n3+arg2, arg4'=arg4p12, arg5'=arg5p12, arg6'=arg6p12, (-1+arg4p12 > 0 /\ 1-n3+arg2 > 0 /\ arg1 > 0 /\ -1+n3 >= 0 /\ -1+arg4 > 0), cost: 1
  50: f998_0_createTree_LE -> f998_0_createTree_LE : arg1'=1, arg2'=-n21*n4-n3*n4+arg2, arg4'=arg4p12, arg5'=arg5p12, arg6'=arg6p12, (1-n3*(-1+n4)-n3-n21+arg2-n21*(-1+n4) > 0 /\ -1+arg4p12 > 0 /\ -1+n4 >= 0 /\ 1-n3*(-1+n4)-n21+arg2-n21*(-1+n4) > 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0 /\ -1+n3 >= 0 /\ -1+arg4 > 0 /\ -1+n21 >= 0), cost: 1
  51: f998_0_createTree_LE -> f998_0_createTree_LE : arg1'=1, arg2'=-n2*n5-n32*n41*n5+arg2-n41*n5*n211, arg4'=arg4p123, arg5'=arg5p11, arg6'=arg6p11, (-1+n41 >= 0 /\ 1-n32-(-1+n41)*n211-(-1+n5)*n41*n211+arg2-(-1+n5)*n32*n41-(-1+n5)*n2-(-1+n41)*n32-n211 > 0 /\ -1+n5 >= 0 /\ 1-(-1+n41)*n211-(-1+n5)*n41*n211+arg2-(-1+n5)*n32*n41-(-1+n5)*n2-(-1+n41)*n32-n211 > 0 /\ -1+n32 >= 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0 /\ -1+arg4 > 0 /\ 1-n32*n41-n41*n211-n2-(-1+n5)*n41*n211+arg2-(-1+n5)*n32*n41-(-1+n5)*n2 > 0 /\ -1+n211 >= 0 /\ -1+arg4p123 > 0 /\ -1+n2 >= 0), cost: 1
  38: f2378_0_random_ArrayAccess -> f3147_0_getRandom_LT : arg1'=-1+arg3p15, arg2'=arg2p15, arg3'=arg3p15, arg4'=1+x91, arg5'=arg5p15, arg6'=arg6p15, (arg1 > 0 /\ 1+x91 > 0 /\ 1-arg1+arg2 <= 0 /\ 1+arg3p15 > 0 /\ -arg1+arg2p15 <= 0 /\ arg2p15 > 0), cost: 1
  39: f3147_0_getRandom_LT -> f3577_0_getRandom_LT : arg2'=-1+arg4p16, arg3'=arg3p16, arg4'=arg4p16, arg5'=1+arg4, arg6'=arg6p16, (arg3p16 > 0 /\ 1+arg4p16 > 0 /\ 1+arg4 > 0 /\ 1+arg3 > 0 /\ -2+arg2 > 0 /\ -2-arg3p16+arg2 >= 0), cost: 1
  40: f3577_0_getRandom_LT -> f3577_0_getRandom_LT : arg2'=-1+arg2, arg3'=arg3p17, arg4'=arg2, arg6'=arg6p17, (arg3p17 > 0 /\ 1+arg4 > 0 /\ 2+arg3p17-arg3 <= 0 /\ -2+arg3 > 0), cost: 1
  41: f3577_0_getRandom_LT -> f3147_0_getRandom_LT : arg1'=-1+arg1, arg2'=arg2p18, arg3'=arg1, arg4'=arg5, arg5'=arg5p18, arg6'=arg6p18, (arg3 > 0 /\ arg4 < 0 /\ 1+arg2p18 > 0), cost: 1
  42: f3577_0_getRandom_LT -> f3147_0_getRandom_LT : arg1'=-1+arg1, arg2'=arg2p19, arg3'=arg1, arg4'=arg5, arg5'=arg5p19, arg6'=arg6p19, (-1+arg3 > 0 /\ 1+arg4 > 0 /\ 1+arg2p19 > 0), cost: 1
  44: f3446_0_visit_NE -> f3530_0_visit_NULL : arg1'=arg2, arg2'=arg2p21, arg3'=arg3p21, arg4'=arg4p21, arg5'=arg5p21, arg6'=arg6p21, (2-arg1+arg2 <= 0 /\ arg1 > 0 /\ 1+arg2p21 > 0 /\ -arg3+arg2 == 0 /\ 2-arg1+arg4 <= 0), cost: 1
  45: f3530_0_visit_NULL -> f3446_0_visit_NE : arg1'=arg1p22, arg2'=arg1, arg3'=arg3p22, arg4'=arg4p22, arg5'=arg5p22, arg6'=arg6p22, (arg1p22 > 0 /\ arg2 > 0), cost: 1
  46: f3530_0_visit_NULL -> f3530_0_visit_NULL : arg2'=arg2p23, arg4'=arg4p23, arg5'=arg5p23, arg6'=arg6p23, (1+arg2p23-arg2 <= 0 /\ arg2 > 0 /\ 1+arg2p23 > 0), cost: 1
  23: __init -> f1_0_main_Load : arg1'=arg1p24, arg2'=arg2p24, arg3'=arg3p24, arg4'=arg4p24, arg5'=arg5p24, arg6'=arg6p24, T, cost: 1

	Loop Acceleration

	Original rule:
	f998_0_createTree_LE -> f998_0_createTree_LE : arg1'=1, arg2'=-n32*n41-n41*n211-n2+arg2, arg4'=arg4p123, arg5'=arg5p11, arg6'=arg6p11, (-1+n41 >= 0 /\ 1-n32-(-1+n41)*n211+arg2-(-1+n41)*n32-n211 > 0 /\ 1-n32*n41-n41*n211-n2+arg2 > 0 /\ -1+n32 >= 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0 /\ -1+arg1 == 0 /\ -1+arg4 > 0 /\ -1+n211 >= 0 /\ 1-(-1+n41)*n211+arg2-(-1+n41)*n32-n211 > 0 /\ -1+arg4p123 > 0 /\ -1+n2 >= 0), cost: 1
	New rule:
	f998_0_createTree_LE -> f998_0_createTree_LE : arg1'=1, arg2'=-n2*n5-n32*n41*n5+arg2-n41*n5*n211, arg4'=arg4p123, arg5'=arg5p11, arg6'=arg6p11, (-1+n41 >= 0 /\ 1-n32-(-1+n41)*n211-(-1+n5)*n41*n211+arg2-(-1+n5)*n32*n41-(-1+n5)*n2-(-1+n41)*n32-n211 > 0 /\ -1+n5 >= 0 /\ 1-(-1+n41)*n211-(-1+n5)*n41*n211+arg2-(-1+n5)*n32*n41-(-1+n5)*n2-(-1+n41)*n32-n211 > 0 /\ -1+n32 >= 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0 /\ -1+arg4 > 0 /\ 1-n32*n41-n41*n211-n2-(-1+n5)*n41*n211+arg2-(-1+n5)*n32*n41-(-1+n5)*n2 > 0 /\ -1+n211 >= 0 /\ -1+arg4p123 > 0 /\ -1+n2 >= 0), cost: 1

		-1+n41 >= 0 [0]: monotonic increase yields -1+n41 >= 0
		
		1-n32-(-1+n41)*n211+arg2-(-1+n41)*n32-n211 > 0 [0]: montonic decrease yields 1-n32-(-1+n41)*n211-(-1+n5)*n41*n211+arg2-(-1+n5)*n32*n41-(-1+n5)*n2-(-1+n41)*n32-n211 > 0, dependencies: 1-n32*n41-n41*n211-n2+arg2 > 0 -1+n2 >= 0
		
		1-n32-(-1+n41)*n211+arg2-(-1+n41)*n32-n211 > 0 [1]: eventual decrease yields (1-n32-(-1+n41)*n211-(-1+n5)*n41*n211+arg2-(-1+n5)*n32*n41-(-1+n5)*n2-(-1+n41)*n32-n211 > 0 /\ 1-n32-(-1+n41)*n211+arg2-(-1+n41)*n32-n211 > 0)
		
		1-n32-(-1+n41)*n211+arg2-(-1+n41)*n32-n211 > 0 [2]: eventual increase yields (1-n32-(-1+n41)*n211+arg2-(-1+n41)*n32-n211 > 0 /\ n32*n41+n41*n211+n2 <= 0)
		
		1-n32*n41-n41*n211-n2+arg2 > 0 [0]: montonic decrease yields 1-n32*n41-n41*n211-n2-(-1+n5)*n41*n211+arg2-(-1+n5)*n32*n41-(-1+n5)*n2 > 0, dependencies: -1+n41 >= 0 -1+n32 >= 0 -1+n211 >= 0 -1+n2 >= 0
		
		1-n32*n41-n41*n211-n2+arg2 > 0 [1]: eventual decrease yields (1-n32*n41-n41*n211-n2+arg2 > 0 /\ 1-n32*n41-n41*n211-n2-(-1+n5)*n41*n211+arg2-(-1+n5)*n32*n41-(-1+n5)*n2 > 0)
		
		1-n32*n41-n41*n211-n2+arg2 > 0 [2]: eventual increase yields (1-n32*n41-n41*n211-n2+arg2 > 0 /\ n32*n41+n41*n211+n2 <= 0)
		
		-1+n32 >= 0 [0]: monotonic increase yields -1+n32 >= 0
		
		1-arg1 >= 0 [0]: monotonic increase yields 1-arg1 >= 0
		
		-1+arg1 >= 0 [0]: monotonic increase yields -1+arg1 >= 0
		
		-1+arg4 > 0 [0]: eventual decrease yields (-1+arg4 > 0 /\ -1+arg4p123 > 0)
		
		-1+arg4 > 0 [1]: eventual increase yields (-1+arg4 > 0 /\ arg4-arg4p123 <= 0)
		
		-1+n211 >= 0 [0]: monotonic increase yields -1+n211 >= 0
		
		1-(-1+n41)*n211+arg2-(-1+n41)*n32-n211 > 0 [0]: montonic decrease yields 1-(-1+n41)*n211-(-1+n5)*n41*n211+arg2-(-1+n5)*n32*n41-(-1+n5)*n2-(-1+n41)*n32-n211 > 0, dependencies: 1-n32*n41-n41*n211-n2+arg2 > 0 -1+n32 >= 0 -1+n2 >= 0
		
		1-(-1+n41)*n211+arg2-(-1+n41)*n32-n211 > 0 [1]: eventual decrease yields (1-(-1+n41)*n211-(-1+n5)*n41*n211+arg2-(-1+n5)*n32*n41-(-1+n5)*n2-(-1+n41)*n32-n211 > 0 /\ 1-(-1+n41)*n211+arg2-(-1+n41)*n32-n211 > 0)
		
		1-(-1+n41)*n211+arg2-(-1+n41)*n32-n211 > 0 [2]: eventual increase yields (1-(-1+n41)*n211+arg2-(-1+n41)*n32-n211 > 0 /\ n32*n41+n41*n211+n2 <= 0)
		
		-1+arg4p123 > 0 [0]: monotonic increase yields -1+arg4p123 > 0
		
		-1+n2 >= 0 [0]: monotonic increase yields -1+n2 >= 0
		
		Replacement map: {-1+n41 >= 0 -> -1+n41 >= 0, 1-n32-(-1+n41)*n211+arg2-(-1+n41)*n32-n211 > 0 -> 1-n32-(-1+n41)*n211-(-1+n5)*n41*n211+arg2-(-1+n5)*n32*n41-(-1+n5)*n2-(-1+n41)*n32-n211 > 0, 1-n32*n41-n41*n211-n2+arg2 > 0 -> 1-n32*n41-n41*n211-n2-(-1+n5)*n41*n211+arg2-(-1+n5)*n32*n41-(-1+n5)*n2 > 0, -1+n32 >= 0 -> -1+n32 >= 0, 1-arg1 >= 0 -> 1-arg1 >= 0, -1+arg1 >= 0 -> -1+arg1 >= 0, -1+arg4 > 0 -> (-1+arg4 > 0 /\ -1+arg4p123 > 0), -1+n211 >= 0 -> -1+n211 >= 0, 1-(-1+n41)*n211+arg2-(-1+n41)*n32-n211 > 0 -> 1-(-1+n41)*n211-(-1+n5)*n41*n211+arg2-(-1+n5)*n32*n41-(-1+n5)*n2-(-1+n41)*n32-n211 > 0, -1+arg4p123 > 0 -> -1+arg4p123 > 0, -1+n2 >= 0 -> -1+n2 >= 0}

	Trace

	23[T], 24[(arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0)], 47[(arg3 > 0 /\ -1+n >= 0 /\ 1+arg2 > 0 /\ 1+arg1-n > 0)], 32[(arg3 > 0 /\ arg1 > 0 /\ 1+arg2p9 > 0 /\ 1+arg2 > 0)], 51[(-1+n41 >= 0 /\ 1-n32-(-1+n41)*n211-(-1+n5)*n41*n211+arg2-(-1+n5)*n32*n41-(-1+n5)*n2-(-1+n41)*n32-n211 > 0 /\ -1+n5 >= 0 /\ 1-(-1+n41)*n211-(-1+n5)*n41*n211+arg2-(-1+n5)*n32*n41-(-1+n5)*n2-(-1+n41)*n32-n211 > 0 /\ -1+n32 >= 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0 /\ -1+arg4 > 0 /\ 1-n32*n41-n41*n211-n2-(-1+n5)*n41*n211+arg2-(-1+n5)*n32*n41-(-1+n5)*n2 > 0 /\ -1+n211 >= 0 /\ -1+arg4p123 > 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {}, {}, {47[T]}, {33[T]}, {51[T]}]

Step with 33

	Trace

	23[T], 24[(arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0)], 47[(arg3 > 0 /\ -1+n >= 0 /\ 1+arg2 > 0 /\ 1+arg1-n > 0)], 32[(arg3 > 0 /\ arg1 > 0 /\ 1+arg2p9 > 0 /\ 1+arg2 > 0)], 51[(-1+n41 >= 0 /\ 1-n32-(-1+n41)*n211-(-1+n5)*n41*n211+arg2-(-1+n5)*n32*n41-(-1+n5)*n2-(-1+n41)*n32-n211 > 0 /\ -1+n5 >= 0 /\ 1-(-1+n41)*n211-(-1+n5)*n41*n211+arg2-(-1+n5)*n32*n41-(-1+n5)*n2-(-1+n41)*n32-n211 > 0 /\ -1+n32 >= 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0 /\ -1+arg4 > 0 /\ 1-n32*n41-n41*n211-n2-(-1+n5)*n41*n211+arg2-(-1+n5)*n32*n41-(-1+n5)*n2 > 0 /\ -1+n211 >= 0 /\ -1+arg4p123 > 0 /\ -1+n2 >= 0)], 33[(arg1 > 0 /\ -1+arg4 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {}, {47[T]}, {33[T]}, {51[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Restart

Step with 23

	Trace

	23[T]
	
	Blocked

	[{}, {}]

Step with 27

	Trace

	23[T], 27[(-arg1+arg1p4 <= 0 /\ 1+arg4p4 > 0 /\ arg1 > 0 /\ 1+arg2p4 > 0 /\ arg1p4 > 0 /\ 1-arg1+arg2p4 <= 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {}]

Step with 43

	Trace

	23[T], 27[(-arg1+arg1p4 <= 0 /\ 1+arg4p4 > 0 /\ arg1 > 0 /\ 1+arg2p4 > 0 /\ arg1p4 > 0 /\ 1-arg1+arg2p4 <= 0 /\ arg2 > 0)], 43[(2+arg4p20-arg2 <= 0 /\ arg1 > 0 /\ arg1p20-arg2 <= 0 /\ 2+arg3p20-arg2 <= 0 /\ arg1p20 > 0 /\ -1+arg4 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {}, {}]

Step with 44

	Trace

	23[T], 27[(-arg1+arg1p4 <= 0 /\ 1+arg4p4 > 0 /\ arg1 > 0 /\ 1+arg2p4 > 0 /\ arg1p4 > 0 /\ 1-arg1+arg2p4 <= 0 /\ arg2 > 0)], 43[(2+arg4p20-arg2 <= 0 /\ arg1 > 0 /\ arg1p20-arg2 <= 0 /\ 2+arg3p20-arg2 <= 0 /\ arg1p20 > 0 /\ -1+arg4 < 0 /\ arg2 > 0)], 44[(2-arg1+arg2 <= 0 /\ arg1 > 0 /\ 1+arg2p21 > 0 /\ -arg3+arg2 == 0 /\ 2-arg1+arg4 <= 0)]
	
	Blocked

	[{}, {}, {}, {}, {}]

Step with 46

	Trace

	23[T], 27[(-arg1+arg1p4 <= 0 /\ 1+arg4p4 > 0 /\ arg1 > 0 /\ 1+arg2p4 > 0 /\ arg1p4 > 0 /\ 1-arg1+arg2p4 <= 0 /\ arg2 > 0)], 43[(2+arg4p20-arg2 <= 0 /\ arg1 > 0 /\ arg1p20-arg2 <= 0 /\ 2+arg3p20-arg2 <= 0 /\ arg1p20 > 0 /\ -1+arg4 < 0 /\ arg2 > 0)], 44[(2-arg1+arg2 <= 0 /\ arg1 > 0 /\ 1+arg2p21 > 0 /\ -arg3+arg2 == 0 /\ 2-arg1+arg4 <= 0)], 46[(1+arg2p23-arg2 <= 0 /\ arg2 > 0 /\ 1+arg2p23 > 0)]
	
	Blocked

	[{}, {}, {}, {}, {}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 46

	Trace

	23[T], 27[(-arg1+arg1p4 <= 0 /\ 1+arg4p4 > 0 /\ arg1 > 0 /\ 1+arg2p4 > 0 /\ arg1p4 > 0 /\ 1-arg1+arg2p4 <= 0 /\ arg2 > 0)], 43[(2+arg4p20-arg2 <= 0 /\ arg1 > 0 /\ arg1p20-arg2 <= 0 /\ 2+arg3p20-arg2 <= 0 /\ arg1p20 > 0 /\ -1+arg4 < 0 /\ arg2 > 0)], 44[(2-arg1+arg2 <= 0 /\ arg1 > 0 /\ 1+arg2p21 > 0 /\ -arg3+arg2 == 0 /\ 2-arg1+arg4 <= 0)], 46[(1+arg2p23-arg2 <= 0 /\ arg2 > 0 /\ 1+arg2p23 > 0)], 46[(1+arg2p23-arg2 <= 0 /\ arg2 > 0 /\ 1+arg2p23 > 0)]
	
	Blocked

	[{}, {}, {}, {}, {}, {}, {}]

Covered

	Trace

	23[T], 27[(-arg1+arg1p4 <= 0 /\ 1+arg4p4 > 0 /\ arg1 > 0 /\ 1+arg2p4 > 0 /\ arg1p4 > 0 /\ 1-arg1+arg2p4 <= 0 /\ arg2 > 0)], 43[(2+arg4p20-arg2 <= 0 /\ arg1 > 0 /\ arg1p20-arg2 <= 0 /\ 2+arg3p20-arg2 <= 0 /\ arg1p20 > 0 /\ -1+arg4 < 0 /\ arg2 > 0)], 44[(2-arg1+arg2 <= 0 /\ arg1 > 0 /\ 1+arg2p21 > 0 /\ -arg3+arg2 == 0 /\ 2-arg1+arg4 <= 0)], 46[(1+arg2p23-arg2 <= 0 /\ arg2 > 0 /\ 1+arg2p23 > 0)]
	
	Blocked

	[{}, {}, {}, {}, {}, {46[T]}]

Step with 45

	Trace

	23[T], 27[(-arg1+arg1p4 <= 0 /\ 1+arg4p4 > 0 /\ arg1 > 0 /\ 1+arg2p4 > 0 /\ arg1p4 > 0 /\ 1-arg1+arg2p4 <= 0 /\ arg2 > 0)], 43[(2+arg4p20-arg2 <= 0 /\ arg1 > 0 /\ arg1p20-arg2 <= 0 /\ 2+arg3p20-arg2 <= 0 /\ arg1p20 > 0 /\ -1+arg4 < 0 /\ arg2 > 0)], 44[(2-arg1+arg2 <= 0 /\ arg1 > 0 /\ 1+arg2p21 > 0 /\ -arg3+arg2 == 0 /\ 2-arg1+arg4 <= 0)], 46[(1+arg2p23-arg2 <= 0 /\ arg2 > 0 /\ 1+arg2p23 > 0)], 45[(arg1p22 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {}, {}, {}, {46[T]}, {}]

Nonterm

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5 arg6
  24: f1_0_main_Load -> f543_0_createTree_GT : arg1'=arg1p1, arg3'=1, arg4'=arg4p1, arg5'=arg5p1, arg6'=arg6p1, (arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0), cost: 1
  25: f1_0_main_Load -> f1156_0_random_ArrayAccess : arg1'=arg1p2, arg3'=0, arg4'=arg4p2, arg5'=arg5p2, arg6'=arg6p2, (arg1 > 0 /\ arg2 > 0 /\ -1+arg1p2 > 0), cost: 1
  27: f1_0_main_Load -> f3334_0_main_LE : arg1'=arg1p4, arg2'=arg2p4, arg3'=-1+arg4p4, arg4'=arg4p4, arg5'=2, arg6'=arg6p4, (-arg1+arg1p4 <= 0 /\ 1+arg4p4 > 0 /\ arg1 > 0 /\ 1+arg2p4 > 0 /\ arg1p4 > 0 /\ 1-arg1+arg2p4 <= 0 /\ arg2 > 0), cost: 1
  32: f543_0_createTree_GT -> f998_0_createTree_LE : arg2'=arg2p9, arg3'=arg2, arg4'=1+arg3, arg5'=arg5p9, arg6'=arg6p9, (arg3 > 0 /\ arg1 > 0 /\ 1+arg2p9 > 0 /\ 1+arg2 > 0), cost: 1
  47: f543_0_createTree_GT -> f543_0_createTree_GT : arg1'=arg1-n, arg3'=arg3+n, arg4'=arg4p10, arg5'=arg5p10, arg6'=arg6p10, (arg3 > 0 /\ -1+n >= 0 /\ 1+arg2 > 0 /\ 1+arg1-n > 0), cost: 1
  28: f1156_0_random_ArrayAccess -> f3334_0_main_LE : arg1'=arg1p5, arg2'=arg2p5, arg3'=-1+arg4p5, arg4'=arg4p5, arg5'=1+x150, arg6'=arg6p5, (-1+arg2p5 > 0 /\ -arg3 == 0 /\ x150 > 0 /\ 1-arg1+arg1p5 <= 0 /\ 1+arg4p5 > 0 /\ -1+arg1 > 0 /\ arg1p5 > 0 /\ 2-arg1+arg4 <= 0 /\ arg2p5-arg1 <= 0), cost: 1
  26: f814_0_createTree_Return -> f1156_0_random_ArrayAccess : arg1'=arg1p3, arg2'=arg2p3, arg3'=0, arg4'=arg5, arg5'=arg5p3, arg6'=arg6p3, (-arg2+arg1p3 <= 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ 2+arg5-arg2 <= 0 /\ -arg4 == 0 /\ -1+arg1p3 > 0), cost: 1
  29: f3334_0_main_LE -> f3430_0_main_InvokeMethod : arg1'=arg1p6, arg2'=arg3, arg3'=arg3p6, arg4'=arg4p6, arg5'=arg5p6, arg6'=arg6p6, (1+arg6p6-arg2 <= 0 /\ arg1 > 0 /\ -arg2+arg4p6 <= 0 /\ -arg2+arg1p6 <= 0 /\ arg2 > 0 /\ arg4 > 0 /\ arg4p6 > 0 /\ -arg1+arg1p6 <= 0 /\ 1+arg3p6 > 0 /\ arg1p6 > 0), cost: 1
  30: f3334_0_main_LE -> f3430_0_main_InvokeMethod : arg1'=arg1p7, arg2'=arg3, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, arg6'=arg6p7, (arg4p7 > 0 /\ arg1p7 > 0 /\ arg1 > 0 /\ arg1p7-arg1 <= 0 /\ arg4p7-arg2 <= 0 /\ -1+arg3p7 > 0 /\ arg1p7-arg2 <= 0 /\ arg2 > 0 /\ arg4 > 0 /\ 1-arg2+arg6p7 <= 0), cost: 1
  36: f3334_0_main_LE -> f2378_0_random_ArrayAccess : arg1'=arg1p13, arg2'=arg2p13, arg3'=arg3p13, arg4'=arg4p13, arg5'=arg5p13, arg6'=arg6p13, (arg1 > 0 /\ arg1p13-arg2 <= 0 /\ arg1p13 > 0 /\ 1+arg2p13-arg2 <= 0 /\ arg2 > 0 /\ arg4 > 0), cost: 1
  43: f3334_0_main_LE -> f3446_0_visit_NE : arg1'=arg1p20, arg2'=arg3p20, arg3'=arg3p20, arg4'=arg4p20, arg5'=arg5p20, arg6'=arg6p20, (2+arg4p20-arg2 <= 0 /\ arg1 > 0 /\ arg1p20-arg2 <= 0 /\ 2+arg3p20-arg2 <= 0 /\ arg1p20 > 0 /\ -1+arg4 < 0 /\ arg2 > 0), cost: 1
  31: f3430_0_main_InvokeMethod -> f3334_0_main_LE : arg1'=arg1p8, arg2'=arg2p8, arg3'=-1+arg2, arg4'=arg2, arg5'=arg5p8, arg6'=arg6p8, (arg3 > 0 /\ arg1 > 0 /\ arg1p8 > 0 /\ -arg3+arg1p8 <= 0 /\ arg1p8-arg4 <= 0 /\ 1+arg6-arg4 <= 0 /\ -arg1+arg1p8 <= 0 /\ arg4 > 0 /\ arg2p8 > 0), cost: 1
  37: f3430_0_main_InvokeMethod -> f2378_0_random_ArrayAccess : arg1'=arg1p14, arg2'=arg6, arg3'=arg3p14, arg4'=arg4p14, arg5'=arg5p14, arg6'=arg6p14, (arg1 > 0 /\ arg1p14-arg4 <= 0 /\ arg1p14 > 0 /\ 1+arg6-arg4 <= 0 /\ 1+arg3 > 0 /\ arg4 > 0), cost: 1
  33: f998_0_createTree_LE -> f543_0_createTree_GT : arg1'=-1+arg1, arg2'=arg3, arg3'=arg4, arg4'=arg4p10, arg5'=arg5p10, arg6'=arg6p10, (arg1 > 0 /\ -1+arg4 > 0 /\ arg2 > 0), cost: 1
  34: f998_0_createTree_LE -> f998_0_createTree_LE : arg1'=1, arg2'=-1+arg2, arg5'=arg5p11, arg6'=arg6p11, (1-arg1 == 0 /\ -1+arg4 > 0 /\ arg2 > 0), cost: 1
  35: f998_0_createTree_LE -> f998_0_createTree_LE : arg2'=-1+arg2, arg4'=arg4p12, arg5'=arg5p12, arg6'=arg6p12, (arg1 > 0 /\ -1+arg4 > 0 /\ arg2 > 0), cost: 1
  48: f998_0_createTree_LE -> f998_0_createTree_LE : arg1'=1, arg2'=-n2+arg2, arg5'=arg5p11, arg6'=arg6p11, (1-n2+arg2 > 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0 /\ -1+arg4 > 0 /\ -1+n2 >= 0), cost: 1
  49: f998_0_createTree_LE -> f998_0_createTree_LE : arg2'=-n3+arg2, arg4'=arg4p12, arg5'=arg5p12, arg6'=arg6p12, (-1+arg4p12 > 0 /\ 1-n3+arg2 > 0 /\ arg1 > 0 /\ -1+n3 >= 0 /\ -1+arg4 > 0), cost: 1
  50: f998_0_createTree_LE -> f998_0_createTree_LE : arg1'=1, arg2'=-n21*n4-n3*n4+arg2, arg4'=arg4p12, arg5'=arg5p12, arg6'=arg6p12, (1-n3*(-1+n4)-n3-n21+arg2-n21*(-1+n4) > 0 /\ -1+arg4p12 > 0 /\ -1+n4 >= 0 /\ 1-n3*(-1+n4)-n21+arg2-n21*(-1+n4) > 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0 /\ -1+n3 >= 0 /\ -1+arg4 > 0 /\ -1+n21 >= 0), cost: 1
  51: f998_0_createTree_LE -> f998_0_createTree_LE : arg1'=1, arg2'=-n2*n5-n32*n41*n5+arg2-n41*n5*n211, arg4'=arg4p123, arg5'=arg5p11, arg6'=arg6p11, (-1+n41 >= 0 /\ 1-n32-(-1+n41)*n211-(-1+n5)*n41*n211+arg2-(-1+n5)*n32*n41-(-1+n5)*n2-(-1+n41)*n32-n211 > 0 /\ -1+n5 >= 0 /\ 1-(-1+n41)*n211-(-1+n5)*n41*n211+arg2-(-1+n5)*n32*n41-(-1+n5)*n2-(-1+n41)*n32-n211 > 0 /\ -1+n32 >= 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0 /\ -1+arg4 > 0 /\ 1-n32*n41-n41*n211-n2-(-1+n5)*n41*n211+arg2-(-1+n5)*n32*n41-(-1+n5)*n2 > 0 /\ -1+n211 >= 0 /\ -1+arg4p123 > 0 /\ -1+n2 >= 0), cost: 1
  38: f2378_0_random_ArrayAccess -> f3147_0_getRandom_LT : arg1'=-1+arg3p15, arg2'=arg2p15, arg3'=arg3p15, arg4'=1+x91, arg5'=arg5p15, arg6'=arg6p15, (arg1 > 0 /\ 1+x91 > 0 /\ 1-arg1+arg2 <= 0 /\ 1+arg3p15 > 0 /\ -arg1+arg2p15 <= 0 /\ arg2p15 > 0), cost: 1
  39: f3147_0_getRandom_LT -> f3577_0_getRandom_LT : arg2'=-1+arg4p16, arg3'=arg3p16, arg4'=arg4p16, arg5'=1+arg4, arg6'=arg6p16, (arg3p16 > 0 /\ 1+arg4p16 > 0 /\ 1+arg4 > 0 /\ 1+arg3 > 0 /\ -2+arg2 > 0 /\ -2-arg3p16+arg2 >= 0), cost: 1
  40: f3577_0_getRandom_LT -> f3577_0_getRandom_LT : arg2'=-1+arg2, arg3'=arg3p17, arg4'=arg2, arg6'=arg6p17, (arg3p17 > 0 /\ 1+arg4 > 0 /\ 2+arg3p17-arg3 <= 0 /\ -2+arg3 > 0), cost: 1
  41: f3577_0_getRandom_LT -> f3147_0_getRandom_LT : arg1'=-1+arg1, arg2'=arg2p18, arg3'=arg1, arg4'=arg5, arg5'=arg5p18, arg6'=arg6p18, (arg3 > 0 /\ arg4 < 0 /\ 1+arg2p18 > 0), cost: 1
  42: f3577_0_getRandom_LT -> f3147_0_getRandom_LT : arg1'=-1+arg1, arg2'=arg2p19, arg3'=arg1, arg4'=arg5, arg5'=arg5p19, arg6'=arg6p19, (-1+arg3 > 0 /\ 1+arg4 > 0 /\ 1+arg2p19 > 0), cost: 1
  44: f3446_0_visit_NE -> f3530_0_visit_NULL : arg1'=arg2, arg2'=arg2p21, arg3'=arg3p21, arg4'=arg4p21, arg5'=arg5p21, arg6'=arg6p21, (2-arg1+arg2 <= 0 /\ arg1 > 0 /\ 1+arg2p21 > 0 /\ -arg3+arg2 == 0 /\ 2-arg1+arg4 <= 0), cost: 1
  52: f3446_0_visit_NE -> LoAT_sink : (arg3p22-arg3 <= 0 /\ -2+arg1-arg2 >= 0 /\ arg1 > 0 /\ -arg3p22+arg3 <= 0 /\ arg1p22 > 0 /\ arg1-arg1p22 <= 0 /\ -arg3+arg2 >= 0 /\ -2+arg1-arg4 >= 0 /\ arg3-arg2 >= 0 /\ arg1+arg4p22-arg1p22-arg4 <= 0), cost: NONTERM
  53: f3446_0_visit_NE -> f3446_0_visit_NE : arg1'=arg1p22, arg3'=arg2, arg4'=arg4p22, arg5'=arg5p22, arg6'=arg6p22, (-2+arg1-arg2 >= 0 /\ arg1 > 0 /\ arg1p22 > 0 /\ -2-arg4p22+arg1p22 >= 0 /\ -arg3+arg2 >= 0 /\ -2+arg1p22-arg2 >= 0 /\ -2+arg1-arg4 >= 0 /\ arg3-arg2 >= 0 /\ arg3-arg2 == 0), cost: 1
  45: f3530_0_visit_NULL -> f3446_0_visit_NE : arg1'=arg1p22, arg2'=arg1, arg3'=arg3p22, arg4'=arg4p22, arg5'=arg5p22, arg6'=arg6p22, (arg1p22 > 0 /\ arg2 > 0), cost: 1
  46: f3530_0_visit_NULL -> f3530_0_visit_NULL : arg2'=arg2p23, arg4'=arg4p23, arg5'=arg5p23, arg6'=arg6p23, (1+arg2p23-arg2 <= 0 /\ arg2 > 0 /\ 1+arg2p23 > 0), cost: 1
  23: __init -> f1_0_main_Load : arg1'=arg1p24, arg2'=arg2p24, arg3'=arg3p24, arg4'=arg4p24, arg5'=arg5p24, arg6'=arg6p24, T, cost: 1

	Certificate of Non-Termination

	Original rule:
	f3446_0_visit_NE -> f3446_0_visit_NE : arg1'=arg1p22, arg3'=arg3p22, arg4'=arg4p22, arg5'=arg5p22, arg6'=arg6p22, (2-arg1+arg2 <= 0 /\ arg1 > 0 /\ arg1p22 > 0 /\ -arg3+arg2 == 0 /\ 2-arg1+arg4 <= 0), cost: 1
	New rule:
	f3446_0_visit_NE -> LoAT_sink : (arg3p22-arg3 <= 0 /\ -2+arg1-arg2 >= 0 /\ arg1 > 0 /\ -arg3p22+arg3 <= 0 /\ arg1p22 > 0 /\ arg1-arg1p22 <= 0 /\ -arg3+arg2 >= 0 /\ -2+arg1-arg4 >= 0 /\ arg3-arg2 >= 0 /\ arg1+arg4p22-arg1p22-arg4 <= 0), cost: NONTERM

		-2+arg1-arg2 >= 0 [0]: eventual decrease yields (-2+arg1-arg2 >= 0 /\ -2+arg1p22-arg2 >= 0)
		
		-2+arg1-arg2 >= 0 [1]: eventual increase yields (-2+arg1-arg2 >= 0 /\ arg1-arg1p22 <= 0)
		
		arg1 > 0 [0]: eventual decrease yields (arg1 > 0 /\ arg1p22 > 0)
		
		arg1 > 0 [1]: eventual increase yields (arg1 > 0 /\ arg1-arg1p22 <= 0)
		
		arg1p22 > 0 [0]: monotonic increase yields arg1p22 > 0
		
		-arg3+arg2 >= 0 [0]: eventual decrease yields (-arg3p22+arg2 >= 0 /\ -arg3+arg2 >= 0)
		
		-arg3+arg2 >= 0 [1]: eventual increase yields (arg3p22-arg3 <= 0 /\ -arg3+arg2 >= 0)
		
		-2+arg1-arg4 >= 0 [0]: eventual decrease yields (-2-arg4p22+arg1p22 >= 0 /\ -2+arg1-arg4 >= 0)
		
		-2+arg1-arg4 >= 0 [1]: eventual increase yields (-2+arg1-arg4 >= 0 /\ arg1+arg4p22-arg1p22-arg4 <= 0)
		
		arg3-arg2 >= 0 [0]: eventual decrease yields (arg3p22-arg2 >= 0 /\ arg3-arg2 >= 0)
		
		arg3-arg2 >= 0 [1]: eventual increase yields (-arg3p22+arg3 <= 0 /\ arg3-arg2 >= 0)
		
		Replacement map: {-2+arg1-arg2 >= 0 -> (-2+arg1-arg2 >= 0 /\ arg1-arg1p22 <= 0), arg1 > 0 -> (arg1 > 0 /\ arg1-arg1p22 <= 0), arg1p22 > 0 -> arg1p22 > 0, -arg3+arg2 >= 0 -> (arg3p22-arg3 <= 0 /\ -arg3+arg2 >= 0), -2+arg1-arg4 >= 0 -> (-2+arg1-arg4 >= 0 /\ arg1+arg4p22-arg1p22-arg4 <= 0), arg3-arg2 >= 0 -> (-arg3p22+arg3 <= 0 /\ arg3-arg2 >= 0)}

	Loop Acceleration

	Original rule:
	f3446_0_visit_NE -> f3446_0_visit_NE : arg1'=arg1p22, arg3'=arg3p22, arg4'=arg4p22, arg5'=arg5p22, arg6'=arg6p22, (2-arg1+arg2 <= 0 /\ arg1 > 0 /\ arg1p22 > 0 /\ -arg3+arg2 == 0 /\ 2-arg1+arg4 <= 0), cost: 1
	New rule:
	f3446_0_visit_NE -> f3446_0_visit_NE : arg1'=arg1p22, arg3'=arg3p22, arg4'=arg4p22, arg5'=arg5p22, arg6'=arg6p22, (-1+n6 >= 0 /\ arg3p22-arg2 >= 0 /\ -2+arg1-arg2 >= 0 /\ arg1 > 0 /\ arg1p22 > 0 /\ -arg3p22+arg2 >= 0 /\ -2-arg4p22+arg1p22 >= 0 /\ -arg3+arg2 >= 0 /\ -2+arg1p22-arg2 >= 0 /\ -2+arg1-arg4 >= 0 /\ arg3-arg2 >= 0), cost: 1

		-2+arg1-arg2 >= 0 [0]: eventual decrease yields (-2+arg1-arg2 >= 0 /\ -2+arg1p22-arg2 >= 0)
		
		-2+arg1-arg2 >= 0 [1]: eventual increase yields (-2+arg1-arg2 >= 0 /\ arg1-arg1p22 <= 0)
		
		arg1 > 0 [0]: eventual decrease yields (arg1 > 0 /\ arg1p22 > 0)
		
		arg1 > 0 [1]: eventual increase yields (arg1 > 0 /\ arg1-arg1p22 <= 0)
		
		arg1p22 > 0 [0]: monotonic increase yields arg1p22 > 0
		
		-arg3+arg2 >= 0 [0]: eventual decrease yields (-arg3p22+arg2 >= 0 /\ -arg3+arg2 >= 0)
		
		-arg3+arg2 >= 0 [1]: eventual increase yields (arg3p22-arg3 <= 0 /\ -arg3+arg2 >= 0)
		
		-2+arg1-arg4 >= 0 [0]: eventual decrease yields (-2-arg4p22+arg1p22 >= 0 /\ -2+arg1-arg4 >= 0)
		
		-2+arg1-arg4 >= 0 [1]: eventual increase yields (-2+arg1-arg4 >= 0 /\ arg1+arg4p22-arg1p22-arg4 <= 0)
		
		arg3-arg2 >= 0 [0]: eventual decrease yields (arg3p22-arg2 >= 0 /\ arg3-arg2 >= 0)
		
		arg3-arg2 >= 0 [1]: eventual increase yields (-arg3p22+arg3 <= 0 /\ arg3-arg2 >= 0)
		
		Replacement map: {-2+arg1-arg2 >= 0 -> (-2+arg1-arg2 >= 0 /\ -2+arg1p22-arg2 >= 0), arg1 > 0 -> (arg1 > 0 /\ arg1p22 > 0), arg1p22 > 0 -> arg1p22 > 0, -arg3+arg2 >= 0 -> (-arg3p22+arg2 >= 0 /\ -arg3+arg2 >= 0), -2+arg1-arg4 >= 0 -> (-2-arg4p22+arg1p22 >= 0 /\ -2+arg1-arg4 >= 0), arg3-arg2 >= 0 -> (arg3p22-arg2 >= 0 /\ arg3-arg2 >= 0)}

	made implied equalities explicit

	Original rule:
	f3446_0_visit_NE -> f3446_0_visit_NE : arg1'=arg1p22, arg3'=arg3p22, arg4'=arg4p22, arg5'=arg5p22, arg6'=arg6p22, (-1+n6 >= 0 /\ arg3p22-arg2 >= 0 /\ -2+arg1-arg2 >= 0 /\ arg1 > 0 /\ arg1p22 > 0 /\ -arg3p22+arg2 >= 0 /\ -2-arg4p22+arg1p22 >= 0 /\ -arg3+arg2 >= 0 /\ -2+arg1p22-arg2 >= 0 /\ -2+arg1-arg4 >= 0 /\ arg3-arg2 >= 0), cost: 1
	New rule:
	f3446_0_visit_NE -> f3446_0_visit_NE : arg1'=arg1p22, arg3'=arg3p22, arg4'=arg4p22, arg5'=arg5p22, arg6'=arg6p22, (-1+n6 >= 0 /\ arg3p22-arg2 >= 0 /\ -2+arg1-arg2 >= 0 /\ arg1 > 0 /\ arg1p22 > 0 /\ -arg3p22+arg2 >= 0 /\ -arg3p22+arg2 == 0 /\ -2-arg4p22+arg1p22 >= 0 /\ -arg3+arg2 >= 0 /\ -2+arg1p22-arg2 >= 0 /\ -2+arg1-arg4 >= 0 /\ arg3-arg2 >= 0 /\ arg3-arg2 == 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f3446_0_visit_NE -> f3446_0_visit_NE : arg1'=arg1p22, arg3'=arg3p22, arg4'=arg4p22, arg5'=arg5p22, arg6'=arg6p22, (-1+n6 >= 0 /\ arg3p22-arg2 >= 0 /\ -2+arg1-arg2 >= 0 /\ arg1 > 0 /\ arg1p22 > 0 /\ -arg3p22+arg2 >= 0 /\ -arg3p22+arg2 == 0 /\ -2-arg4p22+arg1p22 >= 0 /\ -arg3+arg2 >= 0 /\ -2+arg1p22-arg2 >= 0 /\ -2+arg1-arg4 >= 0 /\ arg3-arg2 >= 0 /\ arg3-arg2 == 0), cost: 1
	New rule:
	f3446_0_visit_NE -> f3446_0_visit_NE : arg1'=arg1p22, arg3'=arg2, arg4'=arg4p22, arg5'=arg5p22, arg6'=arg6p22, (0 >= 0 /\ 0 == 0 /\ -1+n6 >= 0 /\ -2+arg1-arg2 >= 0 /\ arg1 > 0 /\ arg1p22 > 0 /\ -2-arg4p22+arg1p22 >= 0 /\ -arg3+arg2 >= 0 /\ -2+arg1p22-arg2 >= 0 /\ -2+arg1-arg4 >= 0 /\ arg3-arg2 >= 0 /\ arg3-arg2 == 0), cost: 1
	
		propagated equality arg3p22 = arg2
		
	Simplified Guard

	Original rule:
	f3446_0_visit_NE -> f3446_0_visit_NE : arg1'=arg1p22, arg3'=arg2, arg4'=arg4p22, arg5'=arg5p22, arg6'=arg6p22, (0 >= 0 /\ 0 == 0 /\ -1+n6 >= 0 /\ -2+arg1-arg2 >= 0 /\ arg1 > 0 /\ arg1p22 > 0 /\ -2-arg4p22+arg1p22 >= 0 /\ -arg3+arg2 >= 0 /\ -2+arg1p22-arg2 >= 0 /\ -2+arg1-arg4 >= 0 /\ arg3-arg2 >= 0 /\ arg3-arg2 == 0), cost: 1
	New rule:
	f3446_0_visit_NE -> f3446_0_visit_NE : arg1'=arg1p22, arg3'=arg2, arg4'=arg4p22, arg5'=arg5p22, arg6'=arg6p22, (-1+n6 >= 0 /\ -2+arg1-arg2 >= 0 /\ arg1 > 0 /\ arg1p22 > 0 /\ -2-arg4p22+arg1p22 >= 0 /\ -arg3+arg2 >= 0 /\ -2+arg1p22-arg2 >= 0 /\ -2+arg1-arg4 >= 0 /\ arg3-arg2 >= 0 /\ arg3-arg2 == 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	f3446_0_visit_NE -> f3446_0_visit_NE : arg1'=arg1p22, arg3'=arg2, arg4'=arg4p22, arg5'=arg5p22, arg6'=arg6p22, (-1+n6 >= 0 /\ -2+arg1-arg2 >= 0 /\ arg1 > 0 /\ arg1p22 > 0 /\ -2-arg4p22+arg1p22 >= 0 /\ -arg3+arg2 >= 0 /\ -2+arg1p22-arg2 >= 0 /\ -2+arg1-arg4 >= 0 /\ arg3-arg2 >= 0 /\ arg3-arg2 == 0), cost: 1
	New rule:
	f3446_0_visit_NE -> f3446_0_visit_NE : arg1'=arg1p22, arg3'=arg2, arg4'=arg4p22, arg5'=arg5p22, arg6'=arg6p22, (-2+arg1-arg2 >= 0 /\ arg1 > 0 /\ arg1p22 > 0 /\ -2-arg4p22+arg1p22 >= 0 /\ -arg3+arg2 >= 0 /\ -2+arg1p22-arg2 >= 0 /\ -2+arg1-arg4 >= 0 /\ arg3-arg2 >= 0 /\ arg3-arg2 == 0), cost: 1

Step with 52

	Trace

	23[T], 27[(-arg1+arg1p4 <= 0 /\ 1+arg4p4 > 0 /\ arg1 > 0 /\ 1+arg2p4 > 0 /\ arg1p4 > 0 /\ 1-arg1+arg2p4 <= 0 /\ arg2 > 0)], 43[(2+arg4p20-arg2 <= 0 /\ arg1 > 0 /\ arg1p20-arg2 <= 0 /\ 2+arg3p20-arg2 <= 0 /\ arg1p20 > 0 /\ -1+arg4 < 0 /\ arg2 > 0)], 52[(arg3p22-arg3 <= 0 /\ -2+arg1-arg2 >= 0 /\ arg1 > 0 /\ -arg3p22+arg3 <= 0 /\ arg1p22 > 0 /\ arg1-arg1p22 <= 0 /\ -arg3+arg2 >= 0 /\ -2+arg1-arg4 >= 0 /\ arg3-arg2 >= 0 /\ arg1+arg4p22-arg1p22-arg4 <= 0)]
	
	Blocked

	[{}, {}, {}, {}, {52[T]}]

Refute

	Counterexample

	[ arg1=2 arg2=1 arg3=0 arg4=0 arg5=0 arg6=0 ] 23 [ arg1=1 arg2=1 arg3=-1 arg4=0 arg5=2 arg6=0 ] 27 [ arg1=1 arg2=-1 arg3=-1 arg4=-1 arg5=0 arg6=0 ] 43 [ arg1=arg1 arg2=arg2 arg3=arg3 arg4=arg4 arg5=arg5 arg6=arg6 ] 52
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
