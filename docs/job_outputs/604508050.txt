NO

Initial ITS

Start location: __init
Program variables: arg1 arg2
   0: f1_0_main_Load -> f113_0_upAndDown_GT : arg1'=arg1p1, arg2'=arg2p1, (1+arg2 > 0 /\ -arg1p1 == 0 /\ arg1 > 0 /\ -arg2p1+arg2 == 0), cost: 1
   1: f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=arg1p2, arg2'=arg2p2, (-11+arg2 < 0 /\ 1-arg2p2+arg2 == 0 /\ 1-arg1 == 0 /\ -10+arg2 < 0 /\ 1-arg1p2 == 0 /\ arg2 > 0), cost: 1
   2: f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=arg1p3, arg2'=arg2p3, (-11+arg2 < 0 /\ -1-arg2p3+arg2 == 0 /\ -arg1 == 0 /\ -10+arg2 < 0 /\ -arg1p3 == 0 /\ arg2 > 0), cost: 1
   3: f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=arg1p4, arg2'=arg2p4, (10-arg2 == 0 /\ -arg1p4 == 0 /\ 9-arg2p4 == 0), cost: 1
   4: f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=arg1p5, arg2'=arg2p5, (1-arg2p5 == 0 /\ 1-arg1p5 == 0 /\ -arg2 == 0), cost: 1
   5: __init -> f1_0_main_Load : arg1'=arg1p6, arg2'=arg2p6, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2
   1: f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=arg1p2, arg2'=arg2p2, (-11+arg2 < 0 /\ 1-arg2p2+arg2 == 0 /\ 1-arg1 == 0 /\ -10+arg2 < 0 /\ 1-arg1p2 == 0 /\ arg2 > 0), cost: 1
   2: f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=arg1p3, arg2'=arg2p3, (-11+arg2 < 0 /\ -1-arg2p3+arg2 == 0 /\ -arg1 == 0 /\ -10+arg2 < 0 /\ -arg1p3 == 0 /\ arg2 > 0), cost: 1
   3: f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=arg1p4, arg2'=arg2p4, (10-arg2 == 0 /\ -arg1p4 == 0 /\ 9-arg2p4 == 0), cost: 1
   4: f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=arg1p5, arg2'=arg2p5, (1-arg2p5 == 0 /\ 1-arg1p5 == 0 /\ -arg2 == 0), cost: 1
   6: __init -> f113_0_upAndDown_GT : arg1'=arg1p1, arg2'=arg2p1, (-arg2p1+arg2p6 == 0 /\ -arg1p1 == 0 /\ arg1p6 > 0 /\ 1+arg2p6 > 0), cost: 1

	Eliminating location f1_0_main_Load by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_Load : arg1'=arg1p6, arg2'=arg2p6, T, cost: 1
	Second rule:
	f1_0_main_Load -> f113_0_upAndDown_GT : arg1'=arg1p1, arg2'=arg2p1, (1+arg2 > 0 /\ -arg1p1 == 0 /\ arg1 > 0 /\ -arg2p1+arg2 == 0), cost: 1
	New rule:
	__init -> f113_0_upAndDown_GT : arg1'=arg1p1, arg2'=arg2p1, (-arg2p1+arg2p6 == 0 /\ -arg1p1 == 0 /\ arg1p6 > 0 /\ 1+arg2p6 > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 5

Simplified Transitions

Start location: __init
Program variables: arg1 arg2
   7: f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=1, arg2'=1+arg2, (-11+arg2 < 0 /\ 1-arg1 == 0 /\ -10+arg2 < 0 /\ arg2 > 0), cost: 1
   8: f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=0, arg2'=-1+arg2, (-11+arg2 < 0 /\ -arg1 == 0 /\ -10+arg2 < 0 /\ arg2 > 0), cost: 1
   9: f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=0, arg2'=9, 10-arg2 == 0, cost: 1
  10: f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=1, arg2'=1, -arg2 == 0, cost: 1
  11: __init -> f113_0_upAndDown_GT : arg1'=0, arg2'=arg2p6, (1+arg2p6 > 0), cost: 1

	Propagated Equalities

	Original rule:
	f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=arg1p2, arg2'=arg2p2, (-11+arg2 < 0 /\ 1-arg2p2+arg2 == 0 /\ 1-arg1 == 0 /\ -10+arg2 < 0 /\ 1-arg1p2 == 0 /\ arg2 > 0), cost: 1
	New rule:
	f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=1, arg2'=1+arg2, (0 == 0 /\ -11+arg2 < 0 /\ 1-arg1 == 0 /\ -10+arg2 < 0 /\ arg2 > 0), cost: 1
	
		propagated equality arg2p2 = 1+arg2
		
		propagated equality arg1p2 = 1
		
	Simplified Guard

	Original rule:
	f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=1, arg2'=1+arg2, (0 == 0 /\ -11+arg2 < 0 /\ 1-arg1 == 0 /\ -10+arg2 < 0 /\ arg2 > 0), cost: 1
	New rule:
	f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=1, arg2'=1+arg2, (-11+arg2 < 0 /\ 1-arg1 == 0 /\ -10+arg2 < 0 /\ arg2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=arg1p3, arg2'=arg2p3, (-11+arg2 < 0 /\ -1-arg2p3+arg2 == 0 /\ -arg1 == 0 /\ -10+arg2 < 0 /\ -arg1p3 == 0 /\ arg2 > 0), cost: 1
	New rule:
	f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=0, arg2'=-1+arg2, (0 == 0 /\ -11+arg2 < 0 /\ -arg1 == 0 /\ -10+arg2 < 0 /\ arg2 > 0), cost: 1
	
		propagated equality arg2p3 = -1+arg2
		
		propagated equality arg1p3 = 0
		
	Simplified Guard

	Original rule:
	f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=0, arg2'=-1+arg2, (0 == 0 /\ -11+arg2 < 0 /\ -arg1 == 0 /\ -10+arg2 < 0 /\ arg2 > 0), cost: 1
	New rule:
	f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=0, arg2'=-1+arg2, (-11+arg2 < 0 /\ -arg1 == 0 /\ -10+arg2 < 0 /\ arg2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=arg1p4, arg2'=arg2p4, (10-arg2 == 0 /\ -arg1p4 == 0 /\ 9-arg2p4 == 0), cost: 1
	New rule:
	f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=0, arg2'=9, (0 == 0 /\ 10-arg2 == 0), cost: 1
	
		propagated equality arg1p4 = 0
		
		propagated equality arg2p4 = 9
		
	Simplified Guard

	Original rule:
	f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=0, arg2'=9, (0 == 0 /\ 10-arg2 == 0), cost: 1
	New rule:
	f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=0, arg2'=9, 10-arg2 == 0, cost: 1
	
	Propagated Equalities

	Original rule:
	f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=arg1p5, arg2'=arg2p5, (1-arg2p5 == 0 /\ 1-arg1p5 == 0 /\ -arg2 == 0), cost: 1
	New rule:
	f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=1, arg2'=1, (0 == 0 /\ -arg2 == 0), cost: 1
	
		propagated equality arg2p5 = 1
		
		propagated equality arg1p5 = 1
		
	Simplified Guard

	Original rule:
	f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=1, arg2'=1, (0 == 0 /\ -arg2 == 0), cost: 1
	New rule:
	f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=1, arg2'=1, -arg2 == 0, cost: 1
	
	Propagated Equalities

	Original rule:
	__init -> f113_0_upAndDown_GT : arg1'=arg1p1, arg2'=arg2p1, (-arg2p1+arg2p6 == 0 /\ -arg1p1 == 0 /\ arg1p6 > 0 /\ 1+arg2p6 > 0), cost: 1
	New rule:
	__init -> f113_0_upAndDown_GT : arg1'=0, arg2'=arg2p6, (0 == 0 /\ arg1p6 > 0 /\ 1+arg2p6 > 0), cost: 1
	
		propagated equality arg2p1 = arg2p6
		
		propagated equality arg1p1 = 0
		
	Simplified Guard

	Original rule:
	__init -> f113_0_upAndDown_GT : arg1'=0, arg2'=arg2p6, (0 == 0 /\ arg1p6 > 0 /\ 1+arg2p6 > 0), cost: 1
	New rule:
	__init -> f113_0_upAndDown_GT : arg1'=0, arg2'=arg2p6, (arg1p6 > 0 /\ 1+arg2p6 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	__init -> f113_0_upAndDown_GT : arg1'=0, arg2'=arg2p6, (arg1p6 > 0 /\ 1+arg2p6 > 0), cost: 1
	New rule:
	__init -> f113_0_upAndDown_GT : arg1'=0, arg2'=arg2p6, (1+arg2p6 > 0), cost: 1

Step with 11

	Trace

	11[(1+arg2p6 > 0)]
	
	Blocked

	[{}, {}]

Step with 8

	Trace

	11[(1+arg2p6 > 0)], 8[(-11+arg2 < 0 /\ -arg1 == 0 /\ -10+arg2 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {7[T]}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2
   7: f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=1, arg2'=1+arg2, (-11+arg2 < 0 /\ 1-arg1 == 0 /\ -10+arg2 < 0 /\ arg2 > 0), cost: 1
   8: f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=0, arg2'=-1+arg2, (-11+arg2 < 0 /\ -arg1 == 0 /\ -10+arg2 < 0 /\ arg2 > 0), cost: 1
   9: f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=0, arg2'=9, 10-arg2 == 0, cost: 1
  10: f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=1, arg2'=1, -arg2 == 0, cost: 1
  12: f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=0, arg2'=-n+arg2, (-1+n >= 0 /\ 10-arg2 > 0 /\ -arg1 >= 0 /\ 11-arg2 > 0 /\ arg1 >= 0 /\ 1-n+arg2 > 0), cost: 1
  11: __init -> f113_0_upAndDown_GT : arg1'=0, arg2'=arg2p6, (1+arg2p6 > 0), cost: 1

	Loop Acceleration

	Original rule:
	f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=0, arg2'=-1+arg2, (-11+arg2 < 0 /\ -arg1 == 0 /\ -10+arg2 < 0 /\ arg2 > 0), cost: 1
	New rule:
	f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=0, arg2'=-n+arg2, (-1+n >= 0 /\ 10-arg2 > 0 /\ -arg1 >= 0 /\ 11-arg2 > 0 /\ arg1 >= 0 /\ 1-n+arg2 > 0), cost: 1

		10-arg2 > 0 [0]: monotonic increase yields 10-arg2 > 0
		
		-arg1 >= 0 [0]: monotonic increase yields -arg1 >= 0
		
		11-arg2 > 0 [0]: monotonic increase yields 11-arg2 > 0, dependencies: 10-arg2 > 0
		
		arg1 >= 0 [0]: monotonic increase yields arg1 >= 0
		
		arg2 > 0 [0]: montonic decrease yields 1-n+arg2 > 0
		
		arg2 > 0 [1]: eventual increase yields (1 <= 0 /\ arg2 > 0)
		
		Replacement map: {10-arg2 > 0 -> 10-arg2 > 0, -arg1 >= 0 -> -arg1 >= 0, 11-arg2 > 0 -> 11-arg2 > 0, arg1 >= 0 -> arg1 >= 0, arg2 > 0 -> 1-n+arg2 > 0}

	Trace

	11[(1+arg2p6 > 0)], 12[(-1+n >= 0 /\ 10-arg2 > 0 /\ -arg1 >= 0 /\ 11-arg2 > 0 /\ arg1 >= 0 /\ 1-n+arg2 > 0)]
	
	Blocked

	[{}, {7[T]}, {8[T], 12[T]}]

Step with 10

	Trace

	11[(1+arg2p6 > 0)], 12[(-1+n >= 0 /\ 10-arg2 > 0 /\ -arg1 >= 0 /\ 11-arg2 > 0 /\ arg1 >= 0 /\ 1-n+arg2 > 0)], 10[(-arg2 == 0)]
	
	Blocked

	[{}, {7[T]}, {7[T], 8[T], 9[T], 12[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Acceleration Failed

marked recursive suffix as redundant

Step with 7

	Trace

	11[(1+arg2p6 > 0)], 12[(-1+n >= 0 /\ 10-arg2 > 0 /\ -arg1 >= 0 /\ 11-arg2 > 0 /\ arg1 >= 0 /\ 1-n+arg2 > 0)], 10[(-arg2 == 0)], 7[(-11+arg2 < 0 /\ 1-arg1 == 0 /\ -10+arg2 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {7[T]}, {7[T], 8[T], 9[T], 12[T]}, {10[T], 12[T]}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2
   7: f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=1, arg2'=1+arg2, (-11+arg2 < 0 /\ 1-arg1 == 0 /\ -10+arg2 < 0 /\ arg2 > 0), cost: 1
   8: f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=0, arg2'=-1+arg2, (-11+arg2 < 0 /\ -arg1 == 0 /\ -10+arg2 < 0 /\ arg2 > 0), cost: 1
   9: f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=0, arg2'=9, 10-arg2 == 0, cost: 1
  10: f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=1, arg2'=1, -arg2 == 0, cost: 1
  12: f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=0, arg2'=-n+arg2, (-1+n >= 0 /\ 10-arg2 > 0 /\ -arg1 >= 0 /\ 11-arg2 > 0 /\ arg1 >= 0 /\ 1-n+arg2 > 0), cost: 1
  13: f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=1, arg2'=n2+arg2, (11-n2-arg2 > 0 /\ -1+n2 >= 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0 /\ 12-n2-arg2 > 0 /\ arg2 > 0), cost: 1
  11: __init -> f113_0_upAndDown_GT : arg1'=0, arg2'=arg2p6, (1+arg2p6 > 0), cost: 1

	Loop Acceleration

	Original rule:
	f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=1, arg2'=1+arg2, (-11+arg2 < 0 /\ 1-arg1 == 0 /\ -10+arg2 < 0 /\ arg2 > 0), cost: 1
	New rule:
	f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=1, arg2'=n2+arg2, (11-n2-arg2 > 0 /\ -1+n2 >= 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0 /\ 12-n2-arg2 > 0 /\ arg2 > 0), cost: 1

		10-arg2 > 0 [0]: montonic decrease yields 11-n2-arg2 > 0
		
		10-arg2 > 0 [1]: eventual increase yields (1 <= 0 /\ 10-arg2 > 0)
		
		1-arg1 >= 0 [0]: monotonic increase yields 1-arg1 >= 0
		
		-1+arg1 >= 0 [0]: monotonic increase yields -1+arg1 >= 0
		
		11-arg2 > 0 [0]: montonic decrease yields 12-n2-arg2 > 0
		
		11-arg2 > 0 [1]: eventual increase yields (1 <= 0 /\ 11-arg2 > 0)
		
		arg2 > 0 [0]: monotonic increase yields arg2 > 0
		
		Replacement map: {10-arg2 > 0 -> 11-n2-arg2 > 0, 1-arg1 >= 0 -> 1-arg1 >= 0, -1+arg1 >= 0 -> -1+arg1 >= 0, 11-arg2 > 0 -> 12-n2-arg2 > 0, arg2 > 0 -> arg2 > 0}

	Trace

	11[(1+arg2p6 > 0)], 12[(-1+n >= 0 /\ 10-arg2 > 0 /\ -arg1 >= 0 /\ 11-arg2 > 0 /\ arg1 >= 0 /\ 1-n+arg2 > 0)], 10[(-arg2 == 0)], 13[(11-n2-arg2 > 0 /\ -1+n2 >= 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0 /\ 12-n2-arg2 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {7[T]}, {7[T], 8[T], 9[T], 12[T]}, {10[T], 12[T]}, {7[T], 13[T]}]

Acceleration Failed

marked recursive suffix as redundant

Acceleration Failed

marked recursive suffix as redundant

Step with 9

	Trace

	11[(1+arg2p6 > 0)], 12[(-1+n >= 0 /\ 10-arg2 > 0 /\ -arg1 >= 0 /\ 11-arg2 > 0 /\ arg1 >= 0 /\ 1-n+arg2 > 0)], 10[(-arg2 == 0)], 13[(11-n2-arg2 > 0 /\ -1+n2 >= 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0 /\ 12-n2-arg2 > 0 /\ arg2 > 0)], 9[(10-arg2 == 0)]
	
	Blocked

	[{}, {7[T]}, {7[T], 8[T], 9[T], 12[T]}, {10[T], 12[T]}, {7[T], 8[T], 13[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Acceleration Failed

marked recursive suffix as redundant

Acceleration Failed

marked recursive suffix as redundant

Nonterm

Start location: __init
Program variables: arg1 arg2
   7: f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=1, arg2'=1+arg2, (-11+arg2 < 0 /\ 1-arg1 == 0 /\ -10+arg2 < 0 /\ arg2 > 0), cost: 1
   8: f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=0, arg2'=-1+arg2, (-11+arg2 < 0 /\ -arg1 == 0 /\ -10+arg2 < 0 /\ arg2 > 0), cost: 1
   9: f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=0, arg2'=9, 10-arg2 == 0, cost: 1
  10: f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=1, arg2'=1, -arg2 == 0, cost: 1
  12: f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=0, arg2'=-n+arg2, (-1+n >= 0 /\ 10-arg2 > 0 /\ -arg1 >= 0 /\ 11-arg2 > 0 /\ arg1 >= 0 /\ 1-n+arg2 > 0), cost: 1
  13: f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=1, arg2'=n2+arg2, (11-n2-arg2 > 0 /\ -1+n2 >= 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0 /\ 12-n2-arg2 > 0 /\ arg2 > 0), cost: 1
  14: f113_0_upAndDown_GT -> LoAT_sink : (10-arg2 > 0 /\ -arg1 >= 0 /\ 11-arg2 > 0 /\ arg1 >= 0 /\ -1+n3 >= 0 /\ -1+arg2 >= 0), cost: NONTERM
  11: __init -> f113_0_upAndDown_GT : arg1'=0, arg2'=arg2p6, (1+arg2p6 > 0), cost: 1

	Certificate of Non-Termination

	Original rule:
	f113_0_upAndDown_GT -> f113_0_upAndDown_GT : arg1'=0, arg2'=9, (10-arg2 > 0 /\ -arg1 >= 0 /\ 11-arg2 > 0 /\ arg1 >= 0 /\ arg1 == 0 /\ -1+arg2 >= 0), cost: 1
	New rule:
	f113_0_upAndDown_GT -> LoAT_sink : (10-arg2 > 0 /\ -arg1 >= 0 /\ 11-arg2 > 0 /\ arg1 >= 0 /\ -1+n3 >= 0 /\ -1+arg2 >= 0), cost: NONTERM

		10-arg2 > 0 [0]: monotonic increase yields 10-arg2 > 0
		
		-arg1 >= 0 [0]: monotonic increase yields -arg1 >= 0
		
		11-arg2 > 0 [0]: monotonic increase yields 11-arg2 > 0
		
		arg1 >= 0 [0]: monotonic increase yields arg1 >= 0
		
		-1+arg2 >= 0 [0]: monotonic increase yields -1+arg2 >= 0
		
		Replacement map: {10-arg2 > 0 -> 10-arg2 > 0, -arg1 >= 0 -> -arg1 >= 0, 11-arg2 > 0 -> 11-arg2 > 0, arg1 >= 0 -> arg1 >= 0, -1+arg2 >= 0 -> -1+arg2 >= 0}

Step with 14

	Trace

	11[(1+arg2p6 > 0)], 14[(10-arg2 > 0 /\ -arg1 >= 0 /\ 11-arg2 > 0 /\ arg1 >= 0 /\ -1+n3 >= 0 /\ -1+arg2 >= 0)]
	
	Blocked

	[{}, {7[T]}, {14[T]}]

Refute

	Counterexample

	[ arg1=0 arg2=1 ] 11 [ arg1=arg1 arg2=arg2 ] 14
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
