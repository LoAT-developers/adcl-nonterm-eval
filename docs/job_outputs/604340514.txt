NO

Solver Timeout: 4
Global Timeout: 300
Maximum number of concurrent processes: 900
*******************************************************************************************
*********************** UNPROCESSED TRANSITION SYSTEMS PER FUNCTION ***********************
*******************************************************************************************


List of LLVMGraphs + assumeNodes + staticAssertNodes [1] :

+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++
+                                                                  +
Init Location: 0
Transitions:
<l0, l1, true, seq{main__func_return_ -> 0, main_i -> Â¿functionCall(__VERIFIER_nondet_int), main_j -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l1, l2, true>
<l2, l5, not(((main_i - main_j) >= 1))>
<l2, l3, ((main_i - main_j) >= 1)>
<l3, l4, true, seq{main_i -> (main_i - Â¿functionCall(__VERIFIER_nondet_int)), main_r -> (Â¿functionCall(__VERIFIER_nondet_int) + 1), main_j -> (main_j + main_r)}>
<l4, l2, true>
<l5, l6, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

+ Assume Nodes [0]: ++++++++++++++++++++++++++++++++++++++++++++++++
       
+ Static Assert Nodes [0]: +++++++++++++++++++++++++++++++++++++++++
       
+ After preprocess (paralelization): ++++++++++++++++++++++++++++++

Init Location: 0
Transitions:
<l0, l7, true, seq{main__func_return_ -> 0}>
<l7, l8, true, seq{varCall_1 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l8, l9, true, seq{main_i -> varCall_1}>
<l9, l10, true, seq{varCall_2 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l10, l1, true, seq{main_j -> varCall_2}>
<l1, l2, true>
<l2, l3, ((main_i - main_j) >= 1)>
<l2, l5, not(((main_i - main_j) >= 1))>
<l3, l11, true, seq{varCall_3 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l11, l12, true, seq{main_i -> (main_i - varCall_3)}>
<l12, l13, true, seq{varCall_4 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l13, l4, true, seq{main_r -> (varCall_4 + 1), main_j -> (main_j + main_r)}>
<l4, l2, true>
<l5, l6, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:
6, 
Accepting locations:

Asserts:

+                                                                  +
+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++


Function Return and Parameters Information [2 functions]:
    function name: __VERIFIER_nondet_int [1 return + 0 parameters]        demangled: __VERIFIER_nondet_int
        __VERIFIER_nondet_int__func_return_      [function result] : int
    function name: main [1 return + 0 parameters]        demangled: main
        main__func_return_      [function result] : int


AST Ident Scanner Information [5 idents]:
__VERIFIER_nondet_int | function | [integer, ()] | <line: 3, col: 1> | <line: 9, col: 9> <line: 10, col: 9> <line: 13, col: 17> <line: 14, col: 13>
main | function | [integer, ()] | <line: 5, col: 1>
i | local variable | integer | <line: 6, col: 5> | <line: 9, col: 5> <line: 12, col: 12> <line: 13, col: 9> <line: 13, col: 13>
j | local variable | integer | <line: 7, col: 5> | <line: 10, col: 5> <line: 12, col: 16> <line: 15, col: 9> <line: 15, col: 13>
r | local variable | integer | <line: 8, col: 5> | <line: 14, col: 9> <line: 15, col: 17>

Main function: main
Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l2, (main_i = undef5) /\ (main_j = undef6)>
<l2, l2, ((main_i - main_j) >= 1), par{main_i -> (main_i - undef7), main_j -> (main_j + (undef8 + 1))}>
<l2, l6, not(((main_i - main_j) >= 1))>

Fresh variables:
undef5, undef6, undef7, undef8, 

Undef variables:
undef5, undef6, undef7, undef8, 

Abstraction variables:

Exit nodes:
6, 
Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l2, l2, 1 + main_j <= main_i, {main_i -> main_i - undef7, main_j -> 1 + main_j + undef8, rest remain the same}>
Variables:
main_i, main_j

Graph 2:
Transitions:
Variables:

Precedence: 
Graph 0

Graph 1
<l0, l2, main_i = undef5 /\ main_j = undef6, {all remain the same}>

Graph 2
<l2, l6, main_i <= main_j, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 2 , 1 )
( 6 , 2 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.001809

Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000581s

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.001254s
[19450 : 19452]
[19450 : 19453]
Successful child: 19452
[ Invariant Graph ]
[33mStrengthening and disabling transitions...[0m

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
It's unfeasible. Removing transition: 
<l2, l2, 1 + main_j <= main_i, {main_i -> main_i - undef7, main_j -> 1 + main_j + undef8, rest remain the same}>
[ Termination Graph ]
[33mStrengthening and disabling transitions...[0m
> It's unfeasible. Removing transition: 
<l2, l2, 1 + main_j <= main_i, {main_i -> main_i - undef7, main_j -> 1 + main_j + undef8, rest remain the same}>
New Graphs: 

LOG: CALL check - Post:1 + main_i <= main_j - Process 1
* Exit transition: <l0, l2, main_i = undef5 /\ main_j = undef6, {all remain the same}>
* Postcondition  : 1 + main_i <= main_j

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000450s
[31m> Postcondition is not implied![0m

LOG: RETURN check - Elapsed time: 0.000522s
INVARIANTS: 
2: 
Quasi-INVARIANTS to narrow Graph: 
2: 1 + main_i <= main_j , 
Narrowing transition: 
<l2, l2, 1 + main_j <= main_i, {main_i -> main_i - undef7, main_j -> 1 + main_j + undef8, rest remain the same}>

LOG: Narrow transition size 1
invGraph after Narrowing: 
Transitions:
<l2, l2, 1 + main_j <= main_i, {main_i -> main_i - undef7, main_j -> 1 + main_j + undef8, rest remain the same}>
Variables:
main_i, main_j
Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000554s

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.001337s
[19450 : 19457]
[19450 : 19458]
Successful child: 19457
[ Invariant Graph ]
[33mStrengthening and disabling transitions...[0m

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
It's unfeasible. Removing transition: 
<l2, l2, 1 + main_j <= main_i, {main_i -> main_i - undef7, main_j -> 1 + main_j + undef8, rest remain the same}>
[ Termination Graph ]
[33mStrengthening and disabling transitions...[0m
> It's unfeasible. Removing transition: 
<l2, l2, 1 + main_j <= main_i, {main_i -> main_i - undef7, main_j -> 1 + main_j + undef8, rest remain the same}>
New Graphs: 

LOG: CALL check - Post:main_i <= main_j - Process 2
* Exit transition: <l0, l2, main_j <= main_i /\ main_i = undef5 /\ main_j = undef6, {all remain the same}>
* Postcondition  : main_i <= main_j

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000384s
[31m> Postcondition is not implied![0m

LOG: RETURN check - Elapsed time: 0.000442s
INVARIANTS: 
2: 
Quasi-INVARIANTS to narrow Graph: 
2: main_i <= main_j , 
Narrowing transition: 
<l2, l2, 1 + main_j <= main_i, {main_i -> main_i - undef7, main_j -> 1 + main_j + undef8, rest remain the same}>

LOG: Narrow transition size 1
invGraph after Narrowing: 
Transitions:
<l2, l2, 1 + main_j <= main_i, {main_i -> main_i - undef7, main_j -> 1 + main_j + undef8, rest remain the same}>
Variables:
main_i, main_j
Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000557s

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.001341s
[19450 : 19462]
[19450 : 19463]
Solving with 1 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 0.002638s
Time used: 0.002509

[19450 : 19467]
[19450 : 19470]
Successful child: 19470

[32mProgram does NOT terminate[0m
