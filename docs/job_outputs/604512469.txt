NO

Initial ITS

Start location: [1]
Program variables: x y z
   0: [1] -> [2] : x'=nondet, T, cost: 1
   1: [2] -> [3] : y'=nondet1, T, cost: 1
   2: [3] -> [4] : z'=nondet2, T, cost: 1
   3: [4] -> [5] : x > 0, cost: 1
   7: [4] -> [8] : x <= 0, cost: 1
   4: [5] -> [6] : x'=y+x, T, cost: 1
   5: [6] -> [7] : y'=z+y, T, cost: 1
   6: [7] -> [4] : T, cost: 1

Chained Linear Paths

Start location: [1]
Program variables: x y z
   9: [1] -> [4] : x'=nondet, y'=nondet1, z'=nondet2, T, cost: 1
   7: [4] -> [8] : x <= 0, cost: 1
  12: [4] -> [4] : x'=y+x, y'=z+y, x > 0, cost: 1

	Eliminating location [2] by chaining:

	Applied chaining

	First rule:
	[1] -> [2] : x'=nondet, T, cost: 1
	Second rule:
	[2] -> [3] : y'=nondet1, T, cost: 1
	New rule:
	[1] -> [3] : x'=nondet, y'=nondet1, T, cost: 1
	
	Applied deletion

	Removed the following rules: 0 1
	
	Eliminating location [3] by chaining:

	Applied chaining

	First rule:
	[1] -> [3] : x'=nondet, y'=nondet1, T, cost: 1
	Second rule:
	[3] -> [4] : z'=nondet2, T, cost: 1
	New rule:
	[1] -> [4] : x'=nondet, y'=nondet1, z'=nondet2, T, cost: 1
	
	Applied deletion

	Removed the following rules: 2 8
	
	Eliminating location [5] by chaining:

	Applied chaining

	First rule:
	[4] -> [5] : x > 0, cost: 1
	Second rule:
	[5] -> [6] : x'=y+x, T, cost: 1
	New rule:
	[4] -> [6] : x'=y+x, x > 0, cost: 1
	
	Applied deletion

	Removed the following rules: 3 4
	
	Eliminating location [6] by chaining:

	Applied chaining

	First rule:
	[4] -> [6] : x'=y+x, x > 0, cost: 1
	Second rule:
	[6] -> [7] : y'=z+y, T, cost: 1
	New rule:
	[4] -> [7] : x'=y+x, y'=z+y, x > 0, cost: 1
	
	Applied deletion

	Removed the following rules: 5 10
	
	Eliminating location [7] by chaining:

	Applied chaining

	First rule:
	[4] -> [7] : x'=y+x, y'=z+y, x > 0, cost: 1
	Second rule:
	[7] -> [4] : T, cost: 1
	New rule:
	[4] -> [4] : x'=y+x, y'=z+y, x > 0, cost: 1
	
	Applied deletion

	Removed the following rules: 6 11

Step with 9

	Trace

	9[T]
	
	Blocked

	[{}, {}]

Step with 7

	Trace

	9[T], 7[(x <= 0)]
	
	Blocked

	[{}, {}, {}]

Backtrack

	Trace

	9[T]
	
	Blocked

	[{}, {7[T]}]

Step with 12

	Trace

	9[T], 12[(x > 0)]
	
	Blocked

	[{}, {7[T]}, {}]

Nonterm

Start location: [1]
Program variables: x y z
   9: [1] -> [4] : x'=nondet, y'=nondet1, z'=nondet2, T, cost: 1
   7: [4] -> [8] : x <= 0, cost: 1
  12: [4] -> [4] : x'=y+x, y'=z+y, x > 0, cost: 1
  13: [4] -> LoAT_sink : (0 == 0 /\ -z == 0 /\ -y == 0 /\ -1+n >= 0 /\ x > 0), cost: NONTERM
  14: [4] -> [4] : x'=1/2*z*n^2-1/2*z*n+y*n+x, y'=z*n+y, (-z == 0 /\ -y == 0 /\ -1+n >= 0 /\ x > 0), cost: 1

	Certificate of Non-Termination

	Original rule:
	[4] -> [4] : x'=y+x, y'=z+y, (x > 0), cost: 1
	New rule:
	[4] -> LoAT_sink : (0 == 0 /\ -z == 0 /\ -y == 0 /\ -1+n >= 0 /\ x > 0), cost: NONTERM

		x > 0 [0]: fixpoint yields (0 == 0 /\ -z == 0 /\ -y == 0 /\ x > 0)
		
		Replacement map: {x > 0 -> (0 == 0 /\ -z == 0 /\ -y == 0 /\ x > 0)}

	Loop Acceleration

	Original rule:
	[4] -> [4] : x'=y+x, y'=z+y, (x > 0), cost: 1
	New rule:
	[4] -> [4] : x'=1/2*z*n^2-1/2*z*n+y*n+x, y'=z*n+y, (0 == 0 /\ -z == 0 /\ -y == 0 /\ -1+n >= 0 /\ x > 0), cost: 1

		x > 0 [0]: fixpoint yields (0 == 0 /\ -z == 0 /\ -y == 0 /\ x > 0)
		
		Replacement map: {x > 0 -> (0 == 0 /\ -z == 0 /\ -y == 0 /\ x > 0)}

	Simplified Guard

	Original rule:
	[4] -> [4] : x'=1/2*z*n^2-1/2*z*n+y*n+x, y'=z*n+y, (0 == 0 /\ -z == 0 /\ -y == 0 /\ -1+n >= 0 /\ x > 0), cost: 1
	New rule:
	[4] -> [4] : x'=1/2*z*n^2-1/2*z*n+y*n+x, y'=z*n+y, (-z == 0 /\ -y == 0 /\ -1+n >= 0 /\ x > 0), cost: 1

Step with 13

	Trace

	9[T], 13[(0 == 0 /\ -z == 0 /\ -y == 0 /\ -1+n >= 0 /\ x > 0)]
	
	Blocked

	[{}, {7[T]}, {13[T]}]

Refute

	Counterexample

	[ x=1 y=0 z=0 ] 9 [ x=x y=y z=z ] 13
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
