unknown

Initial ITS

Start location: [1]
Program variables: i m n x
   0: [1] -> [2] : x'=nondet, T, cost: 1
   1: [2] -> [3] : i'=nondet1, T, cost: 1
   2: [3] -> [4] : n'=nondet2, T, cost: 1
   3: [4] -> [5] : m'=nondet3, T, cost: 1
   4: [5] -> [6] : -n+x < 0, cost: 1
   8: [5] -> [9] : -n+x >= 0, cost: 1
   5: [6] -> [7] : i'=1+i, T, cost: 1
   6: [7] -> [8] : x'=1+x, T, cost: 1
   7: [8] -> [5] : T, cost: 1
   9: [9] -> [10] : -m+x < 0, cost: 1
  13: [9] -> [13] : -m+x >= 0, cost: 1
  10: [10] -> [11] : i'=1+i, T, cost: 1
  11: [11] -> [12] : x'=1+x, T, cost: 1
  12: [12] -> [9] : T, cost: 1

Chained Linear Paths

Start location: [1]
Program variables: i m n x
  16: [1] -> [5] : i'=nondet1, m'=nondet3, n'=nondet2, x'=nondet, T, cost: 1
   8: [5] -> [9] : -n+x >= 0, cost: 1
  19: [5] -> [5] : i'=1+i, x'=1+x, -n+x < 0, cost: 1
  13: [9] -> [13] : -m+x >= 0, cost: 1
  22: [9] -> [9] : i'=1+i, x'=1+x, -m+x < 0, cost: 1

	Eliminating location [2] by chaining:

	Applied chaining

	First rule:
	[1] -> [2] : x'=nondet, T, cost: 1
	Second rule:
	[2] -> [3] : i'=nondet1, T, cost: 1
	New rule:
	[1] -> [3] : i'=nondet1, x'=nondet, T, cost: 1
	
	Applied deletion

	Removed the following rules: 0 1
	
	Eliminating location [3] by chaining:

	Applied chaining

	First rule:
	[1] -> [3] : i'=nondet1, x'=nondet, T, cost: 1
	Second rule:
	[3] -> [4] : n'=nondet2, T, cost: 1
	New rule:
	[1] -> [4] : i'=nondet1, n'=nondet2, x'=nondet, T, cost: 1
	
	Applied deletion

	Removed the following rules: 2 14
	
	Eliminating location [4] by chaining:

	Applied chaining

	First rule:
	[1] -> [4] : i'=nondet1, n'=nondet2, x'=nondet, T, cost: 1
	Second rule:
	[4] -> [5] : m'=nondet3, T, cost: 1
	New rule:
	[1] -> [5] : i'=nondet1, m'=nondet3, n'=nondet2, x'=nondet, T, cost: 1
	
	Applied deletion

	Removed the following rules: 3 15
	
	Eliminating location [6] by chaining:

	Applied chaining

	First rule:
	[5] -> [6] : -n+x < 0, cost: 1
	Second rule:
	[6] -> [7] : i'=1+i, T, cost: 1
	New rule:
	[5] -> [7] : i'=1+i, -n+x < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 4 5
	
	Eliminating location [7] by chaining:

	Applied chaining

	First rule:
	[5] -> [7] : i'=1+i, -n+x < 0, cost: 1
	Second rule:
	[7] -> [8] : x'=1+x, T, cost: 1
	New rule:
	[5] -> [8] : i'=1+i, x'=1+x, -n+x < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 6 17
	
	Eliminating location [8] by chaining:

	Applied chaining

	First rule:
	[5] -> [8] : i'=1+i, x'=1+x, -n+x < 0, cost: 1
	Second rule:
	[8] -> [5] : T, cost: 1
	New rule:
	[5] -> [5] : i'=1+i, x'=1+x, -n+x < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 7 18
	
	Eliminating location [10] by chaining:

	Applied chaining

	First rule:
	[9] -> [10] : -m+x < 0, cost: 1
	Second rule:
	[10] -> [11] : i'=1+i, T, cost: 1
	New rule:
	[9] -> [11] : i'=1+i, -m+x < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 9 10
	
	Eliminating location [11] by chaining:

	Applied chaining

	First rule:
	[9] -> [11] : i'=1+i, -m+x < 0, cost: 1
	Second rule:
	[11] -> [12] : x'=1+x, T, cost: 1
	New rule:
	[9] -> [12] : i'=1+i, x'=1+x, -m+x < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 11 20
	
	Eliminating location [12] by chaining:

	Applied chaining

	First rule:
	[9] -> [12] : i'=1+i, x'=1+x, -m+x < 0, cost: 1
	Second rule:
	[12] -> [9] : T, cost: 1
	New rule:
	[9] -> [9] : i'=1+i, x'=1+x, -m+x < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 12 21

Step with 16

	Trace

	16[T]
	
	Blocked

	[{}, {}]

Step with 8

	Trace

	16[T], 8[(-n+x >= 0)]
	
	Blocked

	[{}, {}, {}]

Step with 13

	Trace

	16[T], 8[(-n+x >= 0)], 13[(-m+x >= 0)]
	
	Blocked

	[{}, {}, {}, {}]

Backtrack

	Trace

	16[T], 8[(-n+x >= 0)]
	
	Blocked

	[{}, {}, {13[T]}]

Step with 22

	Trace

	16[T], 8[(-n+x >= 0)], 22[(-m+x < 0)]
	
	Blocked

	[{}, {}, {13[T]}, {}]

Accelerate

Start location: [1]
Program variables: i m n x
  16: [1] -> [5] : i'=nondet1, m'=nondet3, n'=nondet2, x'=nondet, T, cost: 1
   8: [5] -> [9] : -n+x >= 0, cost: 1
  19: [5] -> [5] : i'=1+i, x'=1+x, -n+x < 0, cost: 1
  13: [9] -> [13] : -m+x >= 0, cost: 1
  22: [9] -> [9] : i'=1+i, x'=1+x, -m+x < 0, cost: 1
  23: [9] -> [9] : i'=n5+i, x'=n5+x, (-1+n5 >= 0 /\ 1+m-n5-x > 0), cost: 1

	Loop Acceleration

	Original rule:
	[9] -> [9] : i'=1+i, x'=1+x, (-m+x < 0), cost: 1
	New rule:
	[9] -> [9] : i'=n5+i, x'=n5+x, (-1+n5 >= 0 /\ 1+m-n5-x > 0), cost: 1

		m-x > 0 [0]: montonic decrease yields 1+m-n5-x > 0
		
		m-x > 0 [1]: eventual increase yields (m-x > 0 /\ 1 <= 0)
		
		Replacement map: {m-x > 0 -> 1+m-n5-x > 0}

	Trace

	16[T], 8[(-n+x >= 0)], 23[(-1+n5 >= 0 /\ 1+m-n5-x > 0)]
	
	Blocked

	[{}, {}, {13[T]}, {22[T], 23[T]}]

Step with 13

	Trace

	16[T], 8[(-n+x >= 0)], 23[(-1+n5 >= 0 /\ 1+m-n5-x > 0)], 13[(-m+x >= 0)]
	
	Blocked

	[{}, {}, {13[T]}, {22[T], 23[T]}, {}]

Backtrack

	Trace

	16[T], 8[(-n+x >= 0)], 23[(-1+n5 >= 0 /\ 1+m-n5-x > 0)]
	
	Blocked

	[{}, {}, {13[T]}, {13[T], 22[T], 23[T]}]

Backtrack

	Trace

	16[T], 8[(-n+x >= 0)]
	
	Blocked

	[{}, {}, {13[T], 23[T]}]

Step with 22

	Trace

	16[T], 8[(-n+x >= 0)], 22[(-m+x < 0)]
	
	Blocked

	[{}, {}, {13[T], 23[T]}, {}]

Covered

	Trace

	16[T], 8[(-n+x >= 0)]
	
	Blocked

	[{}, {}, {13[T], 22[T], 23[T]}]

Backtrack

	Trace

	16[T]
	
	Blocked

	[{}, {8[T]}]

Step with 19

	Trace

	16[T], 19[(-n+x < 0)]
	
	Blocked

	[{}, {8[T]}, {}]

Accelerate

Start location: [1]
Program variables: i m n x
  16: [1] -> [5] : i'=nondet1, m'=nondet3, n'=nondet2, x'=nondet, T, cost: 1
   8: [5] -> [9] : -n+x >= 0, cost: 1
  19: [5] -> [5] : i'=1+i, x'=1+x, -n+x < 0, cost: 1
  24: [5] -> [5] : i'=n10+i, x'=n10+x, (-1+n10 >= 0 /\ 1+n-n10-x > 0), cost: 1
  13: [9] -> [13] : -m+x >= 0, cost: 1
  22: [9] -> [9] : i'=1+i, x'=1+x, -m+x < 0, cost: 1
  23: [9] -> [9] : i'=n5+i, x'=n5+x, (-1+n5 >= 0 /\ 1+m-n5-x > 0), cost: 1

	Loop Acceleration

	Original rule:
	[5] -> [5] : i'=1+i, x'=1+x, (-n+x < 0), cost: 1
	New rule:
	[5] -> [5] : i'=n10+i, x'=n10+x, (-1+n10 >= 0 /\ 1+n-n10-x > 0), cost: 1

		n-x > 0 [0]: montonic decrease yields 1+n-n10-x > 0
		
		n-x > 0 [1]: eventual increase yields (1 <= 0 /\ n-x > 0)
		
		Replacement map: {n-x > 0 -> 1+n-n10-x > 0}

	Trace

	16[T], 24[(-1+n10 >= 0 /\ 1+n-n10-x > 0)]
	
	Blocked

	[{}, {8[T]}, {19[T], 24[T]}]

Step with 8

	Trace

	16[T], 24[(-1+n10 >= 0 /\ 1+n-n10-x > 0)], 8[(-n+x >= 0)]
	
	Blocked

	[{}, {8[T]}, {19[T], 24[T]}, {}]

Step with 22

	Trace

	16[T], 24[(-1+n10 >= 0 /\ 1+n-n10-x > 0)], 8[(-n+x >= 0)], 22[(-m+x < 0)]
	
	Blocked

	[{}, {8[T]}, {19[T], 24[T]}, {}, {}]

Covered

	Trace

	16[T], 24[(-1+n10 >= 0 /\ 1+n-n10-x > 0)], 8[(-n+x >= 0)]
	
	Blocked

	[{}, {8[T]}, {19[T], 24[T]}, {22[T]}]

Step with 23

	Trace

	16[T], 24[(-1+n10 >= 0 /\ 1+n-n10-x > 0)], 8[(-n+x >= 0)], 23[(-1+n5 >= 0 /\ 1+m-n5-x > 0)]
	
	Blocked

	[{}, {8[T]}, {19[T], 24[T]}, {22[T]}, {23[T]}]

Step with 13

	Trace

	16[T], 24[(-1+n10 >= 0 /\ 1+n-n10-x > 0)], 8[(-n+x >= 0)], 23[(-1+n5 >= 0 /\ 1+m-n5-x > 0)], 13[(-m+x >= 0)]
	
	Blocked

	[{}, {8[T]}, {19[T], 24[T]}, {22[T]}, {23[T]}, {}]

Backtrack

	Trace

	16[T], 24[(-1+n10 >= 0 /\ 1+n-n10-x > 0)], 8[(-n+x >= 0)], 23[(-1+n5 >= 0 /\ 1+m-n5-x > 0)]
	
	Blocked

	[{}, {8[T]}, {19[T], 24[T]}, {22[T]}, {13[T], 23[T]}]

Step with 22

	Trace

	16[T], 24[(-1+n10 >= 0 /\ 1+n-n10-x > 0)], 8[(-n+x >= 0)], 23[(-1+n5 >= 0 /\ 1+m-n5-x > 0)], 22[(-m+x < 0)]
	
	Blocked

	[{}, {8[T]}, {19[T], 24[T]}, {22[T]}, {13[T], 23[T]}, {}]

Covered

	Trace

	16[T], 24[(-1+n10 >= 0 /\ 1+n-n10-x > 0)], 8[(-n+x >= 0)], 23[(-1+n5 >= 0 /\ 1+m-n5-x > 0)]
	
	Blocked

	[{}, {8[T]}, {19[T], 24[T]}, {22[T]}, {13[T], 22[T], 23[T]}]

Backtrack

	Trace

	16[T], 24[(-1+n10 >= 0 /\ 1+n-n10-x > 0)], 8[(-n+x >= 0)]
	
	Blocked

	[{}, {8[T]}, {19[T], 24[T]}, {22[T], 23[T]}]

Step with 13

	Trace

	16[T], 24[(-1+n10 >= 0 /\ 1+n-n10-x > 0)], 8[(-n+x >= 0)], 13[(-m+x >= 0)]
	
	Blocked

	[{}, {8[T]}, {19[T], 24[T]}, {22[T], 23[T]}, {}]

Backtrack

	Trace

	16[T], 24[(-1+n10 >= 0 /\ 1+n-n10-x > 0)], 8[(-n+x >= 0)]
	
	Blocked

	[{}, {8[T]}, {19[T], 24[T]}, {13[T], 22[T], 23[T]}]

Backtrack

	Trace

	16[T], 24[(-1+n10 >= 0 /\ 1+n-n10-x > 0)]
	
	Blocked

	[{}, {8[T]}, {8[T], 19[T], 24[T]}]

Backtrack

	Trace

	16[T]
	
	Blocked

	[{}, {8[T], 24[T]}]

Step with 19

	Trace

	16[T], 19[(-n+x < 0)]
	
	Blocked

	[{}, {8[T], 24[T]}, {}]

Covered

	Trace

	16[T]
	
	Blocked

	[{}, {8[T], 19[T], 24[T]}]

Backtrack

	Trace

	Blocked

	[{16[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
