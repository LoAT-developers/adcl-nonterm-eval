unknown

Initial ITS

Start location: l4
Program variables: __const_10^0 i5^0 length4^0 s^0 tmp^0 tmp___08^0
   0: l0 -> l1 : __const_10^0'=__const_10^post1, i5^0'=i5^post1, length4^0'=length4^post1, s^0'=s^post1, tmp^0'=tmp^post1, tmp___08^0'=tmp___08^post1, (s^0-s^post1 == 0 /\ length4^0-i5^0 <= 0 /\ -tmp^post1+tmp^0 == 0 /\ -i5^post1+i5^0 == 0 /\ -tmp___08^post1+tmp___08^0 == 0 /\ __const_10^0-__const_10^post1 == 0 /\ -length4^post1+length4^0 == 0), cost: 1
   1: l0 -> l2 : __const_10^0'=__const_10^post2, i5^0'=i5^post2, length4^0'=length4^post2, s^0'=s^post2, tmp^0'=tmp^post2, tmp___08^0'=tmp___08^post2, (0 == 0 /\ __const_10^0-__const_10^post2 == 0 /\ tmp^0-tmp^post2 == 0 /\ s^0-s^post2 == 0 /\ -length4^post2+length4^0 == 0 /\ 1-length4^0+i5^0 <= 0 /\ -1+i5^post2-i5^0 == 0), cost: 1
   2: l2 -> l0 : __const_10^0'=__const_10^post3, i5^0'=i5^post3, length4^0'=length4^post3, s^0'=s^post3, tmp^0'=tmp^post3, tmp___08^0'=tmp___08^post3, (__const_10^0-__const_10^post3 == 0 /\ tmp___08^0-tmp___08^post3 == 0 /\ -i5^post3+i5^0 == 0 /\ -s^post3+s^0 == 0 /\ tmp^0-tmp^post3 == 0 /\ -length4^post3+length4^0 == 0), cost: 1
   3: l3 -> l2 : __const_10^0'=__const_10^post4, i5^0'=i5^post4, length4^0'=length4^post4, s^0'=s^post4, tmp^0'=tmp^post4, tmp___08^0'=tmp___08^post4, (0 == 0 /\ s^post4-tmp^post4 == 0 /\ i5^post4 == 0 /\ -__const_10^0+length4^post4 == 0 /\ -__const_10^post4+__const_10^0 == 0 /\ tmp___08^0-tmp___08^post4 == 0), cost: 1
   4: l4 -> l3 : __const_10^0'=__const_10^post5, i5^0'=i5^post5, length4^0'=length4^post5, s^0'=s^post5, tmp^0'=tmp^post5, tmp___08^0'=tmp___08^post5, (-s^post5+s^0 == 0 /\ -tmp___08^post5+tmp___08^0 == 0 /\ tmp^0-tmp^post5 == 0 /\ -i5^post5+i5^0 == 0 /\ length4^0-length4^post5 == 0 /\ -__const_10^post5+__const_10^0 == 0), cost: 1

Chained Linear Paths

Start location: l4
Program variables: __const_10^0 i5^0 length4^0 s^0 tmp^0 tmp___08^0
   0: l0 -> l1 : __const_10^0'=__const_10^post1, i5^0'=i5^post1, length4^0'=length4^post1, s^0'=s^post1, tmp^0'=tmp^post1, tmp___08^0'=tmp___08^post1, (s^0-s^post1 == 0 /\ length4^0-i5^0 <= 0 /\ -tmp^post1+tmp^0 == 0 /\ -i5^post1+i5^0 == 0 /\ -tmp___08^post1+tmp___08^0 == 0 /\ __const_10^0-__const_10^post1 == 0 /\ -length4^post1+length4^0 == 0), cost: 1
   1: l0 -> l2 : __const_10^0'=__const_10^post2, i5^0'=i5^post2, length4^0'=length4^post2, s^0'=s^post2, tmp^0'=tmp^post2, tmp___08^0'=tmp___08^post2, (0 == 0 /\ __const_10^0-__const_10^post2 == 0 /\ tmp^0-tmp^post2 == 0 /\ s^0-s^post2 == 0 /\ -length4^post2+length4^0 == 0 /\ 1-length4^0+i5^0 <= 0 /\ -1+i5^post2-i5^0 == 0), cost: 1
   2: l2 -> l0 : __const_10^0'=__const_10^post3, i5^0'=i5^post3, length4^0'=length4^post3, s^0'=s^post3, tmp^0'=tmp^post3, tmp___08^0'=tmp___08^post3, (__const_10^0-__const_10^post3 == 0 /\ tmp___08^0-tmp___08^post3 == 0 /\ -i5^post3+i5^0 == 0 /\ -s^post3+s^0 == 0 /\ tmp^0-tmp^post3 == 0 /\ -length4^post3+length4^0 == 0), cost: 1
   5: l4 -> l2 : __const_10^0'=__const_10^post4, i5^0'=i5^post4, length4^0'=length4^post4, s^0'=s^post4, tmp^0'=tmp^post4, tmp___08^0'=tmp___08^post4, (0 == 0 /\ -s^post5+s^0 == 0 /\ s^post4-tmp^post4 == 0 /\ -tmp___08^post5+tmp___08^0 == 0 /\ tmp^0-tmp^post5 == 0 /\ tmp___08^post5-tmp___08^post4 == 0 /\ -i5^post5+i5^0 == 0 /\ __const_10^post5-__const_10^post4 == 0 /\ i5^post4 == 0 /\ length4^0-length4^post5 == 0 /\ -__const_10^post5+__const_10^0 == 0 /\ -__const_10^post5+length4^post4 == 0), cost: 1

	Eliminating location l3 by chaining:

	Applied chaining

	First rule:
	l4 -> l3 : __const_10^0'=__const_10^post5, i5^0'=i5^post5, length4^0'=length4^post5, s^0'=s^post5, tmp^0'=tmp^post5, tmp___08^0'=tmp___08^post5, (-s^post5+s^0 == 0 /\ -tmp___08^post5+tmp___08^0 == 0 /\ tmp^0-tmp^post5 == 0 /\ -i5^post5+i5^0 == 0 /\ length4^0-length4^post5 == 0 /\ -__const_10^post5+__const_10^0 == 0), cost: 1
	Second rule:
	l3 -> l2 : __const_10^0'=__const_10^post4, i5^0'=i5^post4, length4^0'=length4^post4, s^0'=s^post4, tmp^0'=tmp^post4, tmp___08^0'=tmp___08^post4, (0 == 0 /\ s^post4-tmp^post4 == 0 /\ i5^post4 == 0 /\ -__const_10^0+length4^post4 == 0 /\ -__const_10^post4+__const_10^0 == 0 /\ tmp___08^0-tmp___08^post4 == 0), cost: 1
	New rule:
	l4 -> l2 : __const_10^0'=__const_10^post4, i5^0'=i5^post4, length4^0'=length4^post4, s^0'=s^post4, tmp^0'=tmp^post4, tmp___08^0'=tmp___08^post4, (0 == 0 /\ -s^post5+s^0 == 0 /\ s^post4-tmp^post4 == 0 /\ -tmp___08^post5+tmp___08^0 == 0 /\ tmp^0-tmp^post5 == 0 /\ tmp___08^post5-tmp___08^post4 == 0 /\ -i5^post5+i5^0 == 0 /\ __const_10^post5-__const_10^post4 == 0 /\ i5^post4 == 0 /\ length4^0-length4^post5 == 0 /\ -__const_10^post5+__const_10^0 == 0 /\ -__const_10^post5+length4^post4 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 3 4

Simplified Transitions

Start location: l4
Program variables: __const_10^0 i5^0 length4^0 s^0 tmp^0 tmp___08^0
   6: l0 -> l1 : length4^0-i5^0 <= 0, cost: 1
   7: l0 -> l2 : i5^0'=1+i5^0, tmp___08^0'=tmp___08^post2, 1-length4^0+i5^0 <= 0, cost: 1
   8: l2 -> l0 : T, cost: 1
   9: l4 -> l2 : i5^0'=0, length4^0'=__const_10^0, s^0'=tmp^post4, tmp^0'=tmp^post4, T, cost: 1

	Propagated Equalities

	Original rule:
	l0 -> l1 : __const_10^0'=__const_10^post1, i5^0'=i5^post1, length4^0'=length4^post1, s^0'=s^post1, tmp^0'=tmp^post1, tmp___08^0'=tmp___08^post1, (s^0-s^post1 == 0 /\ length4^0-i5^0 <= 0 /\ -tmp^post1+tmp^0 == 0 /\ -i5^post1+i5^0 == 0 /\ -tmp___08^post1+tmp___08^0 == 0 /\ __const_10^0-__const_10^post1 == 0 /\ -length4^post1+length4^0 == 0), cost: 1
	New rule:
	l0 -> l1 : __const_10^0'=__const_10^0, i5^0'=i5^0, length4^0'=length4^0, s^0'=s^0, tmp^0'=tmp^0, tmp___08^0'=tmp___08^0, (0 == 0 /\ length4^0-i5^0 <= 0), cost: 1
	
		propagated equality s^post1 = s^0
		
		propagated equality tmp^post1 = tmp^0
		
		propagated equality i5^post1 = i5^0
		
		propagated equality tmp___08^post1 = tmp___08^0
		
		propagated equality __const_10^post1 = __const_10^0
		
		propagated equality length4^post1 = length4^0
		
	Simplified Guard

	Original rule:
	l0 -> l1 : __const_10^0'=__const_10^0, i5^0'=i5^0, length4^0'=length4^0, s^0'=s^0, tmp^0'=tmp^0, tmp___08^0'=tmp___08^0, (0 == 0 /\ length4^0-i5^0 <= 0), cost: 1
	New rule:
	l0 -> l1 : __const_10^0'=__const_10^0, i5^0'=i5^0, length4^0'=length4^0, s^0'=s^0, tmp^0'=tmp^0, tmp___08^0'=tmp___08^0, length4^0-i5^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l1 : __const_10^0'=__const_10^0, i5^0'=i5^0, length4^0'=length4^0, s^0'=s^0, tmp^0'=tmp^0, tmp___08^0'=tmp___08^0, length4^0-i5^0 <= 0, cost: 1
	New rule:
	l0 -> l1 : length4^0-i5^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l0 -> l2 : __const_10^0'=__const_10^post2, i5^0'=i5^post2, length4^0'=length4^post2, s^0'=s^post2, tmp^0'=tmp^post2, tmp___08^0'=tmp___08^post2, (0 == 0 /\ __const_10^0-__const_10^post2 == 0 /\ tmp^0-tmp^post2 == 0 /\ s^0-s^post2 == 0 /\ -length4^post2+length4^0 == 0 /\ 1-length4^0+i5^0 <= 0 /\ -1+i5^post2-i5^0 == 0), cost: 1
	New rule:
	l0 -> l2 : __const_10^0'=__const_10^0, i5^0'=1+i5^0, length4^0'=length4^0, s^0'=s^0, tmp^0'=tmp^0, tmp___08^0'=tmp___08^post2, (0 == 0 /\ 1-length4^0+i5^0 <= 0), cost: 1
	
		propagated equality __const_10^post2 = __const_10^0
		
		propagated equality tmp^post2 = tmp^0
		
		propagated equality s^post2 = s^0
		
		propagated equality length4^post2 = length4^0
		
		propagated equality i5^post2 = 1+i5^0
		
	Simplified Guard

	Original rule:
	l0 -> l2 : __const_10^0'=__const_10^0, i5^0'=1+i5^0, length4^0'=length4^0, s^0'=s^0, tmp^0'=tmp^0, tmp___08^0'=tmp___08^post2, (0 == 0 /\ 1-length4^0+i5^0 <= 0), cost: 1
	New rule:
	l0 -> l2 : __const_10^0'=__const_10^0, i5^0'=1+i5^0, length4^0'=length4^0, s^0'=s^0, tmp^0'=tmp^0, tmp___08^0'=tmp___08^post2, 1-length4^0+i5^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l2 : __const_10^0'=__const_10^0, i5^0'=1+i5^0, length4^0'=length4^0, s^0'=s^0, tmp^0'=tmp^0, tmp___08^0'=tmp___08^post2, 1-length4^0+i5^0 <= 0, cost: 1
	New rule:
	l0 -> l2 : i5^0'=1+i5^0, tmp___08^0'=tmp___08^post2, 1-length4^0+i5^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l2 -> l0 : __const_10^0'=__const_10^post3, i5^0'=i5^post3, length4^0'=length4^post3, s^0'=s^post3, tmp^0'=tmp^post3, tmp___08^0'=tmp___08^post3, (__const_10^0-__const_10^post3 == 0 /\ tmp___08^0-tmp___08^post3 == 0 /\ -i5^post3+i5^0 == 0 /\ -s^post3+s^0 == 0 /\ tmp^0-tmp^post3 == 0 /\ -length4^post3+length4^0 == 0), cost: 1
	New rule:
	l2 -> l0 : __const_10^0'=__const_10^0, i5^0'=i5^0, length4^0'=length4^0, s^0'=s^0, tmp^0'=tmp^0, tmp___08^0'=tmp___08^0, 0 == 0, cost: 1
	
		propagated equality __const_10^post3 = __const_10^0
		
		propagated equality tmp___08^post3 = tmp___08^0
		
		propagated equality i5^post3 = i5^0
		
		propagated equality s^post3 = s^0
		
		propagated equality tmp^post3 = tmp^0
		
		propagated equality length4^post3 = length4^0
		
	Simplified Guard

	Original rule:
	l2 -> l0 : __const_10^0'=__const_10^0, i5^0'=i5^0, length4^0'=length4^0, s^0'=s^0, tmp^0'=tmp^0, tmp___08^0'=tmp___08^0, 0 == 0, cost: 1
	New rule:
	l2 -> l0 : __const_10^0'=__const_10^0, i5^0'=i5^0, length4^0'=length4^0, s^0'=s^0, tmp^0'=tmp^0, tmp___08^0'=tmp___08^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l2 -> l0 : __const_10^0'=__const_10^0, i5^0'=i5^0, length4^0'=length4^0, s^0'=s^0, tmp^0'=tmp^0, tmp___08^0'=tmp___08^0, T, cost: 1
	New rule:
	l2 -> l0 : T, cost: 1
	
	Propagated Equalities

	Original rule:
	l4 -> l2 : __const_10^0'=__const_10^post4, i5^0'=i5^post4, length4^0'=length4^post4, s^0'=s^post4, tmp^0'=tmp^post4, tmp___08^0'=tmp___08^post4, (0 == 0 /\ -s^post5+s^0 == 0 /\ s^post4-tmp^post4 == 0 /\ -tmp___08^post5+tmp___08^0 == 0 /\ tmp^0-tmp^post5 == 0 /\ tmp___08^post5-tmp___08^post4 == 0 /\ -i5^post5+i5^0 == 0 /\ __const_10^post5-__const_10^post4 == 0 /\ i5^post4 == 0 /\ length4^0-length4^post5 == 0 /\ -__const_10^post5+__const_10^0 == 0 /\ -__const_10^post5+length4^post4 == 0), cost: 1
	New rule:
	l4 -> l2 : __const_10^0'=__const_10^post5, i5^0'=0, length4^0'=__const_10^post5, s^0'=tmp^post4, tmp^0'=tmp^post4, tmp___08^0'=tmp___08^post5, (0 == 0 /\ -s^post5+s^0 == 0 /\ -tmp___08^post5+tmp___08^0 == 0 /\ tmp^0-tmp^post5 == 0 /\ -i5^post5+i5^0 == 0 /\ length4^0-length4^post5 == 0 /\ -__const_10^post5+__const_10^0 == 0), cost: 1
	
		propagated equality s^post4 = tmp^post4
		
		propagated equality tmp___08^post4 = tmp___08^post5
		
		propagated equality __const_10^post4 = __const_10^post5
		
		propagated equality i5^post4 = 0
		
		propagated equality length4^post4 = __const_10^post5
		
	Propagated Equalities

	Original rule:
	l4 -> l2 : __const_10^0'=__const_10^post5, i5^0'=0, length4^0'=__const_10^post5, s^0'=tmp^post4, tmp^0'=tmp^post4, tmp___08^0'=tmp___08^post5, (0 == 0 /\ -s^post5+s^0 == 0 /\ -tmp___08^post5+tmp___08^0 == 0 /\ tmp^0-tmp^post5 == 0 /\ -i5^post5+i5^0 == 0 /\ length4^0-length4^post5 == 0 /\ -__const_10^post5+__const_10^0 == 0), cost: 1
	New rule:
	l4 -> l2 : __const_10^0'=__const_10^0, i5^0'=0, length4^0'=__const_10^0, s^0'=tmp^post4, tmp^0'=tmp^post4, tmp___08^0'=tmp___08^0, 0 == 0, cost: 1
	
		propagated equality s^post5 = s^0
		
		propagated equality tmp___08^post5 = tmp___08^0
		
		propagated equality tmp^post5 = tmp^0
		
		propagated equality i5^post5 = i5^0
		
		propagated equality length4^post5 = length4^0
		
		propagated equality __const_10^post5 = __const_10^0
		
	Simplified Guard

	Original rule:
	l4 -> l2 : __const_10^0'=__const_10^0, i5^0'=0, length4^0'=__const_10^0, s^0'=tmp^post4, tmp^0'=tmp^post4, tmp___08^0'=tmp___08^0, 0 == 0, cost: 1
	New rule:
	l4 -> l2 : __const_10^0'=__const_10^0, i5^0'=0, length4^0'=__const_10^0, s^0'=tmp^post4, tmp^0'=tmp^post4, tmp___08^0'=tmp___08^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l4 -> l2 : __const_10^0'=__const_10^0, i5^0'=0, length4^0'=__const_10^0, s^0'=tmp^post4, tmp^0'=tmp^post4, tmp___08^0'=tmp___08^0, T, cost: 1
	New rule:
	l4 -> l2 : i5^0'=0, length4^0'=__const_10^0, s^0'=tmp^post4, tmp^0'=tmp^post4, T, cost: 1

Step with 9

	Trace

	9[T]
	
	Blocked

	[{}, {}]

Step with 8

	Trace

	9[T], 8[T]
	
	Blocked

	[{}, {}, {}]

Step with 6

	Trace

	9[T], 8[T], 6[(length4^0-i5^0 <= 0)]
	
	Blocked

	[{}, {}, {}, {}]

Backtrack

	Trace

	9[T], 8[T]
	
	Blocked

	[{}, {}, {6[T]}]

Step with 7

	Trace

	9[T], 8[T], 7[(1-length4^0+i5^0 <= 0)]
	
	Blocked

	[{}, {}, {6[T]}, {}]

Accelerate

Start location: l4
Program variables: __const_10^0 i5^0 length4^0 s^0 tmp^0 tmp___08^0
   6: l0 -> l1 : length4^0-i5^0 <= 0, cost: 1
   7: l0 -> l2 : i5^0'=1+i5^0, tmp___08^0'=tmp___08^post2, 1-length4^0+i5^0 <= 0, cost: 1
   8: l2 -> l0 : T, cost: 1
  10: l2 -> l2 : i5^0'=n+i5^0, tmp___08^0'=tmp___08^post2, (-1+n >= 0 /\ -n+length4^0-i5^0 >= 0), cost: 1
   9: l4 -> l2 : i5^0'=0, length4^0'=__const_10^0, s^0'=tmp^post4, tmp^0'=tmp^post4, T, cost: 1

	Loop Acceleration

	Original rule:
	l2 -> l2 : i5^0'=1+i5^0, tmp___08^0'=tmp___08^post2, 1-length4^0+i5^0 <= 0, cost: 1
	New rule:
	l2 -> l2 : i5^0'=n+i5^0, tmp___08^0'=tmp___08^post2, (-1+n >= 0 /\ -n+length4^0-i5^0 >= 0), cost: 1

		-1+length4^0-i5^0 >= 0 [0]: montonic decrease yields -n+length4^0-i5^0 >= 0
		
		-1+length4^0-i5^0 >= 0 [1]: eventual increase yields (1 <= 0 /\ -1+length4^0-i5^0 >= 0)
		
		Replacement map: {-1+length4^0-i5^0 >= 0 -> -n+length4^0-i5^0 >= 0}

	Trace

	9[T], 10[(-1+n >= 0 /\ -n+length4^0-i5^0 >= 0)]
	
	Blocked

	[{}, {}, {10[T]}]

Step with 8

	Trace

	9[T], 10[(-1+n >= 0 /\ -n+length4^0-i5^0 >= 0)], 8[T]
	
	Blocked

	[{}, {}, {10[T]}, {}]

Step with 7

	Trace

	9[T], 10[(-1+n >= 0 /\ -n+length4^0-i5^0 >= 0)], 8[T], 7[(1-length4^0+i5^0 <= 0)]
	
	Blocked

	[{}, {}, {10[T]}, {}, {}]

Covered

	Trace

	9[T], 10[(-1+n >= 0 /\ -n+length4^0-i5^0 >= 0)], 8[T]
	
	Blocked

	[{}, {}, {10[T]}, {7[T]}]

Step with 6

	Trace

	9[T], 10[(-1+n >= 0 /\ -n+length4^0-i5^0 >= 0)], 8[T], 6[(length4^0-i5^0 <= 0)]
	
	Blocked

	[{}, {}, {10[T]}, {7[T]}, {}]

Backtrack

	Trace

	9[T], 10[(-1+n >= 0 /\ -n+length4^0-i5^0 >= 0)], 8[T]
	
	Blocked

	[{}, {}, {10[T]}, {6[T], 7[T]}]

Backtrack

	Trace

	9[T], 10[(-1+n >= 0 /\ -n+length4^0-i5^0 >= 0)]
	
	Blocked

	[{}, {}, {8[T], 10[T]}]

Backtrack

	Trace

	9[T]
	
	Blocked

	[{}, {10[T]}]

Step with 8

	Trace

	9[T], 8[T]
	
	Blocked

	[{}, {10[T]}, {}]

Step with 6

	Trace

	9[T], 8[T], 6[(length4^0-i5^0 <= 0)]
	
	Blocked

	[{}, {10[T]}, {}, {}]

Backtrack

	Trace

	9[T], 8[T]
	
	Blocked

	[{}, {10[T]}, {6[T]}]

Step with 7

	Trace

	9[T], 8[T], 7[(1-length4^0+i5^0 <= 0)]
	
	Blocked

	[{}, {10[T]}, {6[T]}, {}]

Covered

	Trace

	9[T], 8[T]
	
	Blocked

	[{}, {10[T]}, {6[T], 7[T]}]

Backtrack

	Trace

	9[T]
	
	Blocked

	[{}, {8[T], 10[T]}]

Backtrack

	Trace

	Blocked

	[{9[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
