NO

Initial ITS

Start location: __init
Program variables: arg1 arg2
   0: f1_0_main_Load -> f61_0_flip_EQ : arg1'=arg1p1, arg2'=arg2p1, (5-arg1p1+arg2 == 0 /\ -arg2p1+arg2 == 0 /\ 1+arg2 > 0 /\ 5 > 0 /\ arg1 > 0), cost: 1
   1: f61_0_flip_EQ -> f61_0_flip_EQ : arg1'=arg1p2, arg2'=arg2p2, (-arg2p2+arg1 == 0 /\ arg2-arg1p2 == 0 /\ arg2 > 0 /\ arg1 > 0), cost: 1
   2: __init -> f1_0_main_Load : arg1'=arg1p3, arg2'=arg2p3, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2
   1: f61_0_flip_EQ -> f61_0_flip_EQ : arg1'=arg1p2, arg2'=arg2p2, (-arg2p2+arg1 == 0 /\ arg2-arg1p2 == 0 /\ arg2 > 0 /\ arg1 > 0), cost: 1
   3: __init -> f61_0_flip_EQ : arg1'=arg1p1, arg2'=arg2p1, (1+arg2p3 > 0 /\ arg1p3 > 0 /\ 5 > 0 /\ -arg2p1+arg2p3 == 0 /\ 5-arg1p1+arg2p3 == 0), cost: 1

	Eliminating location f1_0_main_Load by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_Load : arg1'=arg1p3, arg2'=arg2p3, T, cost: 1
	Second rule:
	f1_0_main_Load -> f61_0_flip_EQ : arg1'=arg1p1, arg2'=arg2p1, (5-arg1p1+arg2 == 0 /\ -arg2p1+arg2 == 0 /\ 1+arg2 > 0 /\ 5 > 0 /\ arg1 > 0), cost: 1
	New rule:
	__init -> f61_0_flip_EQ : arg1'=arg1p1, arg2'=arg2p1, (1+arg2p3 > 0 /\ arg1p3 > 0 /\ 5 > 0 /\ -arg2p1+arg2p3 == 0 /\ 5-arg1p1+arg2p3 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 2

Simplified Transitions

Start location: __init
Program variables: arg1 arg2
   4: f61_0_flip_EQ -> f61_0_flip_EQ : arg1'=arg2, arg2'=arg1, (arg2 > 0 /\ arg1 > 0), cost: 1
   5: __init -> f61_0_flip_EQ : arg1'=5+arg2p3, arg2'=arg2p3, (1+arg2p3 > 0), cost: 1

	Propagated Equalities

	Original rule:
	f61_0_flip_EQ -> f61_0_flip_EQ : arg1'=arg1p2, arg2'=arg2p2, (-arg2p2+arg1 == 0 /\ arg2-arg1p2 == 0 /\ arg2 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f61_0_flip_EQ -> f61_0_flip_EQ : arg1'=arg2, arg2'=arg1, (0 == 0 /\ arg2 > 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg2p2 = arg1
		
		propagated equality arg1p2 = arg2
		
	Simplified Guard

	Original rule:
	f61_0_flip_EQ -> f61_0_flip_EQ : arg1'=arg2, arg2'=arg1, (0 == 0 /\ arg2 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f61_0_flip_EQ -> f61_0_flip_EQ : arg1'=arg2, arg2'=arg1, (arg2 > 0 /\ arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	__init -> f61_0_flip_EQ : arg1'=arg1p1, arg2'=arg2p1, (1+arg2p3 > 0 /\ arg1p3 > 0 /\ 5 > 0 /\ -arg2p1+arg2p3 == 0 /\ 5-arg1p1+arg2p3 == 0), cost: 1
	New rule:
	__init -> f61_0_flip_EQ : arg1'=5+arg2p3, arg2'=arg2p3, (0 == 0 /\ 1+arg2p3 > 0 /\ arg1p3 > 0 /\ 5 > 0), cost: 1
	
		propagated equality arg2p1 = arg2p3
		
		propagated equality arg1p1 = 5+arg2p3
		
	Simplified Guard

	Original rule:
	__init -> f61_0_flip_EQ : arg1'=5+arg2p3, arg2'=arg2p3, (0 == 0 /\ 1+arg2p3 > 0 /\ arg1p3 > 0 /\ 5 > 0), cost: 1
	New rule:
	__init -> f61_0_flip_EQ : arg1'=5+arg2p3, arg2'=arg2p3, (1+arg2p3 > 0 /\ arg1p3 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	__init -> f61_0_flip_EQ : arg1'=5+arg2p3, arg2'=arg2p3, (1+arg2p3 > 0 /\ arg1p3 > 0), cost: 1
	New rule:
	__init -> f61_0_flip_EQ : arg1'=5+arg2p3, arg2'=arg2p3, (1+arg2p3 > 0), cost: 1

Unrolled Loops

Start location: __init
Program variables: arg1 arg2
   4: f61_0_flip_EQ -> f61_0_flip_EQ : arg1'=arg2, arg2'=arg1, (arg2 > 0 /\ arg1 > 0), cost: 1
   6: f61_0_flip_EQ -> f61_0_flip_EQ : (arg2 > 0 /\ arg1 > 0), cost: 1
   5: __init -> f61_0_flip_EQ : arg1'=5+arg2p3, arg2'=arg2p3, (1+arg2p3 > 0), cost: 1

	Unrolling

	Original rule:
	f61_0_flip_EQ -> f61_0_flip_EQ : arg1'=arg2, arg2'=arg1, (arg2 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f61_0_flip_EQ -> f61_0_flip_EQ : arg1'=arg1, arg2'=arg2, (arg2 > 0 /\ arg1 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f61_0_flip_EQ -> f61_0_flip_EQ : arg1'=arg1, arg2'=arg2, (arg2 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f61_0_flip_EQ -> f61_0_flip_EQ : (arg2 > 0 /\ arg1 > 0), cost: 1

Step with 5

	Trace

	5[(1+arg2p3 > 0)]
	
	Blocked

	[{}, {}]

Step with 4

	Trace

	5[(1+arg2p3 > 0)], 4[(arg2 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {}]

Nonterm

Start location: __init
Program variables: arg1 arg2
   4: f61_0_flip_EQ -> f61_0_flip_EQ : arg1'=arg2, arg2'=arg1, (arg2 > 0 /\ arg1 > 0), cost: 1
   6: f61_0_flip_EQ -> f61_0_flip_EQ : (arg2 > 0 /\ arg1 > 0), cost: 1
   7: f61_0_flip_EQ -> LoAT_sink : (-1+n >= 0 /\ arg2 > 0 /\ arg1 > 0), cost: NONTERM
   8: f61_0_flip_EQ -> f61_0_flip_EQ : (arg2 > 0 /\ arg1 > 0), cost: 1
   5: __init -> f61_0_flip_EQ : arg1'=5+arg2p3, arg2'=arg2p3, (1+arg2p3 > 0), cost: 1

	unrolling

	Original rule:
	f61_0_flip_EQ -> f61_0_flip_EQ : arg1'=arg2, arg2'=arg1, (arg2 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f61_0_flip_EQ -> f61_0_flip_EQ : arg1'=arg1, arg2'=arg2, (arg2 > 0 /\ arg1 > 0), cost: 1
	
	Certificate of Non-Termination

	Original rule:
	f61_0_flip_EQ -> f61_0_flip_EQ : arg1'=arg1, arg2'=arg2, (arg2 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f61_0_flip_EQ -> LoAT_sink : (-1+n >= 0 /\ arg2 > 0 /\ arg1 > 0), cost: NONTERM

		arg2 > 0 [0]: monotonic increase yields arg2 > 0
		
		arg1 > 0 [0]: monotonic increase yields arg1 > 0
		
		Replacement map: {arg2 > 0 -> arg2 > 0, arg1 > 0 -> arg1 > 0}

	Loop Acceleration

	Original rule:
	f61_0_flip_EQ -> f61_0_flip_EQ : arg1'=arg1, arg2'=arg2, (arg2 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f61_0_flip_EQ -> f61_0_flip_EQ : arg1'=arg1, arg2'=arg2, (-1+n >= 0 /\ arg2 > 0 /\ arg1 > 0), cost: 1

		arg2 > 0 [0]: monotonic increase yields arg2 > 0
		
		arg1 > 0 [0]: monotonic increase yields arg1 > 0
		
		Replacement map: {arg2 > 0 -> arg2 > 0, arg1 > 0 -> arg1 > 0}

	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	f61_0_flip_EQ -> f61_0_flip_EQ : arg1'=arg1, arg2'=arg2, (-1+n >= 0 /\ arg2 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f61_0_flip_EQ -> f61_0_flip_EQ : arg1'=arg1, arg2'=arg2, (arg2 > 0 /\ arg1 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f61_0_flip_EQ -> f61_0_flip_EQ : arg1'=arg1, arg2'=arg2, (arg2 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f61_0_flip_EQ -> f61_0_flip_EQ : (arg2 > 0 /\ arg1 > 0), cost: 1

Step with 7

	Trace

	5[(1+arg2p3 > 0)], 7[(-1+n >= 0 /\ arg2 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {7[T]}]

Refute

	Counterexample

	[ arg1=6 arg2=1 ] 5 [ arg1=arg1 arg2=arg2 ] 7
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
