unknown

Initial ITS

Start location: [1]
Program variables: c x y z
   0: [1] -> [2] : x'=nondet, T, cost: 1
   1: [2] -> [3] : y'=nondet1, T, cost: 1
   2: [3] -> [4] : z'=nondet2, T, cost: 1
   3: [4] -> [5] : c'=0, T, cost: 1
   4: [5] -> [6] : (-y+x == 0 /\ -z+x > 0), cost: 1
  12: [5] -> [12] : (-y+x < 0 \/ -y+x > 0 \/ -z+x <= 0), cost: 1
   5: [6] -> [7] : -z+y > 0, cost: 1
  10: [6] -> [11] : -z+y <= 0, cost: 1
   6: [7] -> [8] : x'=-1+x, T, cost: 1
   7: [8] -> [9] : y'=-1+y, T, cost: 1
   8: [9] -> [10] : c'=1+c, T, cost: 1
   9: [10] -> [6] : T, cost: 1
  11: [11] -> [5] : T, cost: 1

Chained Linear Paths

Start location: [1]
Program variables: c x y z
  15: [1] -> [5] : c'=0, x'=nondet, y'=nondet1, z'=nondet2, T, cost: 1
   4: [5] -> [6] : (-y+x == 0 /\ -z+x > 0), cost: 1
  12: [5] -> [12] : (-y+x < 0 \/ -y+x > 0 \/ -z+x <= 0), cost: 1
  17: [6] -> [5] : -z+y <= 0, cost: 1
  20: [6] -> [6] : c'=1+c, x'=-1+x, y'=-1+y, -z+y > 0, cost: 1

	Eliminating location [2] by chaining:

	Applied chaining

	First rule:
	[1] -> [2] : x'=nondet, T, cost: 1
	Second rule:
	[2] -> [3] : y'=nondet1, T, cost: 1
	New rule:
	[1] -> [3] : x'=nondet, y'=nondet1, T, cost: 1
	
	Applied deletion

	Removed the following rules: 0 1
	
	Eliminating location [3] by chaining:

	Applied chaining

	First rule:
	[1] -> [3] : x'=nondet, y'=nondet1, T, cost: 1
	Second rule:
	[3] -> [4] : z'=nondet2, T, cost: 1
	New rule:
	[1] -> [4] : x'=nondet, y'=nondet1, z'=nondet2, T, cost: 1
	
	Applied deletion

	Removed the following rules: 2 13
	
	Eliminating location [4] by chaining:

	Applied chaining

	First rule:
	[1] -> [4] : x'=nondet, y'=nondet1, z'=nondet2, T, cost: 1
	Second rule:
	[4] -> [5] : c'=0, T, cost: 1
	New rule:
	[1] -> [5] : c'=0, x'=nondet, y'=nondet1, z'=nondet2, T, cost: 1
	
	Applied deletion

	Removed the following rules: 3 14
	
	Eliminating location [7] by chaining:

	Applied chaining

	First rule:
	[6] -> [7] : -z+y > 0, cost: 1
	Second rule:
	[7] -> [8] : x'=-1+x, T, cost: 1
	New rule:
	[6] -> [8] : x'=-1+x, -z+y > 0, cost: 1
	
	Applied deletion

	Removed the following rules: 5 6
	
	Eliminating location [11] by chaining:

	Applied chaining

	First rule:
	[6] -> [11] : -z+y <= 0, cost: 1
	Second rule:
	[11] -> [5] : T, cost: 1
	New rule:
	[6] -> [5] : -z+y <= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 10 11
	
	Eliminating location [8] by chaining:

	Applied chaining

	First rule:
	[6] -> [8] : x'=-1+x, -z+y > 0, cost: 1
	Second rule:
	[8] -> [9] : y'=-1+y, T, cost: 1
	New rule:
	[6] -> [9] : x'=-1+x, y'=-1+y, -z+y > 0, cost: 1
	
	Applied deletion

	Removed the following rules: 7 16
	
	Eliminating location [9] by chaining:

	Applied chaining

	First rule:
	[6] -> [9] : x'=-1+x, y'=-1+y, -z+y > 0, cost: 1
	Second rule:
	[9] -> [10] : c'=1+c, T, cost: 1
	New rule:
	[6] -> [10] : c'=1+c, x'=-1+x, y'=-1+y, -z+y > 0, cost: 1
	
	Applied deletion

	Removed the following rules: 8 18
	
	Eliminating location [10] by chaining:

	Applied chaining

	First rule:
	[6] -> [10] : c'=1+c, x'=-1+x, y'=-1+y, -z+y > 0, cost: 1
	Second rule:
	[10] -> [6] : T, cost: 1
	New rule:
	[6] -> [6] : c'=1+c, x'=-1+x, y'=-1+y, -z+y > 0, cost: 1
	
	Applied deletion

	Removed the following rules: 9 19

Step with 15

	Trace

	15[T]
	
	Blocked

	[{}, {}]

Step with 12

	Trace

	15[T], 12[(-y+x > 0)]
	
	Blocked

	[{}, {}, {}]

Backtrack

	Trace

	15[T]
	
	Blocked

	[{}, {12[-y+x > 0]}]

Step with 12

	Trace

	15[T], 12[(-y+x < 0)]
	
	Blocked

	[{}, {12[-y+x > 0]}, {}]

Backtrack

	Trace

	15[T]
	
	Blocked

	[{}, {12[(-y+x < 0 /\ -y+x > 0)]}]

Step with 12

	Trace

	15[T], 12[(-z+x <= 0)]
	
	Blocked

	[{}, {12[(-y+x < 0 /\ -y+x > 0)]}, {}]

Backtrack

	Trace

	15[T]
	
	Blocked

	[{}, {12[(-y+x < 0 /\ -y+x > 0 /\ -z+x <= 0)]}]

Step with 4

	Trace

	15[T], 4[(-y+x == 0 /\ -z+x > 0)]
	
	Blocked

	[{}, {12[T]}, {}]

Step with 20

	Trace

	15[T], 4[(-y+x == 0 /\ -z+x > 0)], 20[(-z+y > 0)]
	
	Blocked

	[{}, {12[T]}, {17[T]}, {}]

Accelerate

Start location: [1]
Program variables: c x y z
  15: [1] -> [5] : c'=0, x'=nondet, y'=nondet1, z'=nondet2, T, cost: 1
   4: [5] -> [6] : (-y+x == 0 /\ -z+x > 0), cost: 1
  12: [5] -> [12] : (-y+x < 0 \/ -y+x > 0 \/ -z+x <= 0), cost: 1
  17: [6] -> [5] : -z+y <= 0, cost: 1
  20: [6] -> [6] : c'=1+c, x'=-1+x, y'=-1+y, -z+y > 0, cost: 1
  21: [6] -> [6] : c'=n+c, x'=-n+x, y'=-n+y, (1-n-z+y > 0 /\ -1+n >= 0), cost: 1

	Loop Acceleration

	Original rule:
	[6] -> [6] : c'=1+c, x'=-1+x, y'=-1+y, (-z+y > 0), cost: 1
	New rule:
	[6] -> [6] : c'=n+c, x'=-n+x, y'=-n+y, (1-n-z+y > 0 /\ -1+n >= 0), cost: 1

		-z+y > 0 [0]: montonic decrease yields 1-n-z+y > 0
		
		-z+y > 0 [1]: eventual increase yields (1 <= 0 /\ -z+y > 0)
		
		Replacement map: {-z+y > 0 -> 1-n-z+y > 0}

	Trace

	15[T], 4[(-y+x == 0 /\ -z+x > 0)], 21[(1-n-z+y > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {12[T]}, {17[T]}, {20[T], 21[T]}]

Step with 17

	Trace

	15[T], 4[(-y+x == 0 /\ -z+x > 0)], 21[(1-n-z+y > 0 /\ -1+n >= 0)], 17[(-z+y <= 0)]
	
	Blocked

	[{}, {12[T]}, {17[T]}, {20[T], 21[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 12

	Trace

	15[T], 4[(-y+x == 0 /\ -z+x > 0)], 21[(1-n-z+y > 0 /\ -1+n >= 0)], 17[(-z+y <= 0)], 12[(-z+x <= 0)]
	
	Blocked

	[{}, {12[T]}, {17[T]}, {20[T], 21[T]}, {4[T]}, {}]

Backtrack

	Trace

	15[T], 4[(-y+x == 0 /\ -z+x > 0)], 21[(1-n-z+y > 0 /\ -1+n >= 0)], 17[(-z+y <= 0)]
	
	Blocked

	[{}, {12[T]}, {17[T]}, {20[T], 21[T]}, {4[T], 12[-z+x <= 0]}]

Backtrack

	Trace

	15[T], 4[(-y+x == 0 /\ -z+x > 0)], 21[(1-n-z+y > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {12[T]}, {17[T]}, {17[T], 20[T], 21[T]}]

Backtrack

	Trace

	15[T], 4[(-y+x == 0 /\ -z+x > 0)]
	
	Blocked

	[{}, {12[T]}, {17[T], 21[T]}]

Step with 20

	Trace

	15[T], 4[(-y+x == 0 /\ -z+x > 0)], 20[(-z+y > 0)]
	
	Blocked

	[{}, {12[T]}, {17[T], 21[T]}, {}]

Covered

	Trace

	15[T], 4[(-y+x == 0 /\ -z+x > 0)]
	
	Blocked

	[{}, {12[T]}, {17[T], 20[T], 21[T]}]

Backtrack

	Trace

	15[T]
	
	Blocked

	[{}, {4[T], 12[T]}]

Backtrack

	Trace

	Blocked

	[{15[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
