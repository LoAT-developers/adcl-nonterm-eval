unknown

Initial ITS

Start location: l4
Program variables: __const_30^0 a^0 ans8^0 fnew5^0 fold6^0 i4^0 n3^0 ret_fib9^0 temp7^0 tmp^0
   0: l0 -> l1 : __const_30^0'=__const_30^post1, a^0'=a^post1, ans8^0'=ans8^post1, fnew5^0'=fnew5^post1, fold6^0'=fold6^post1, i4^0'=i4^post1, n3^0'=n3^post1, ret_fib9^0'=ret_fib9^post1, temp7^0'=temp7^post1, tmp^0'=tmp^post1, (a^0-a^post1 == 0 /\ ret_fib9^post1-ans8^post1 == 0 /\ 1+n3^0-i4^0 <= 0 /\ -ret_fib9^post1+tmp^post1 == 0 /\ -fnew5^0+ans8^post1 == 0 /\ -fold6^post1+fold6^0 == 0 /\ temp7^0-temp7^post1 == 0 /\ -i4^post1+i4^0 == 0 /\ -__const_30^post1+__const_30^0 == 0 /\ -fnew5^post1+fnew5^0 == 0 /\ -n3^post1+n3^0 == 0), cost: 1
   1: l0 -> l2 : __const_30^0'=__const_30^post2, a^0'=a^post2, ans8^0'=ans8^post2, fnew5^0'=fnew5^post2, fold6^0'=fold6^post2, i4^0'=i4^post2, n3^0'=n3^post2, ret_fib9^0'=ret_fib9^post2, temp7^0'=temp7^post2, tmp^0'=tmp^post2, (-n3^post2+n3^0 == 0 /\ a^0-a^post2 == 0 /\ -fnew5^0+temp7^post2 == 0 /\ -tmp^post2+tmp^0 == 0 /\ -1+i4^post2-i4^0 == 0 /\ -n3^0+i4^0 <= 0 /\ fnew5^post2-fnew5^0-fold6^0 == 0 /\ -__const_30^post2+__const_30^0 == 0 /\ ret_fib9^0-ret_fib9^post2 == 0 /\ fold6^post2-temp7^post2 == 0 /\ ans8^0-ans8^post2 == 0), cost: 1
   2: l2 -> l0 : __const_30^0'=__const_30^post3, a^0'=a^post3, ans8^0'=ans8^post3, fnew5^0'=fnew5^post3, fold6^0'=fold6^post3, i4^0'=i4^post3, n3^0'=n3^post3, ret_fib9^0'=ret_fib9^post3, temp7^0'=temp7^post3, tmp^0'=tmp^post3, (-fnew5^post3+fnew5^0 == 0 /\ temp7^0-temp7^post3 == 0 /\ ret_fib9^0-ret_fib9^post3 == 0 /\ -n3^post3+n3^0 == 0 /\ -fold6^post3+fold6^0 == 0 /\ a^0-a^post3 == 0 /\ i4^0-i4^post3 == 0 /\ -tmp^post3+tmp^0 == 0 /\ -__const_30^post3+__const_30^0 == 0 /\ ans8^0-ans8^post3 == 0), cost: 1
   3: l3 -> l2 : __const_30^0'=__const_30^post4, a^0'=a^post4, ans8^0'=ans8^post4, fnew5^0'=fnew5^post4, fold6^0'=fold6^post4, i4^0'=i4^post4, n3^0'=n3^post4, ret_fib9^0'=ret_fib9^post4, temp7^0'=temp7^post4, tmp^0'=tmp^post4, (ans8^0-ans8^post4 == 0 /\ -tmp^post4+tmp^0 == 0 /\ n3^post4-a^post4 == 0 /\ -__const_30^0+a^post4 == 0 /\ ret_fib9^0-ret_fib9^post4 == 0 /\ __const_30^0-__const_30^post4 == 0 /\ fold6^post4 == 0 /\ -2+i4^post4 == 0 /\ -1+fnew5^post4 == 0 /\ -temp7^post4+temp7^0 == 0), cost: 1
   4: l4 -> l3 : __const_30^0'=__const_30^post5, a^0'=a^post5, ans8^0'=ans8^post5, fnew5^0'=fnew5^post5, fold6^0'=fold6^post5, i4^0'=i4^post5, n3^0'=n3^post5, ret_fib9^0'=ret_fib9^post5, temp7^0'=temp7^post5, tmp^0'=tmp^post5, (-ret_fib9^post5+ret_fib9^0 == 0 /\ temp7^0-temp7^post5 == 0 /\ __const_30^0-__const_30^post5 == 0 /\ -fold6^post5+fold6^0 == 0 /\ ans8^0-ans8^post5 == 0 /\ n3^0-n3^post5 == 0 /\ tmp^0-tmp^post5 == 0 /\ a^0-a^post5 == 0 /\ fnew5^0-fnew5^post5 == 0 /\ -i4^post5+i4^0 == 0), cost: 1

Chained Linear Paths

Start location: l4
Program variables: __const_30^0 a^0 ans8^0 fnew5^0 fold6^0 i4^0 n3^0 ret_fib9^0 temp7^0 tmp^0
   0: l0 -> l1 : __const_30^0'=__const_30^post1, a^0'=a^post1, ans8^0'=ans8^post1, fnew5^0'=fnew5^post1, fold6^0'=fold6^post1, i4^0'=i4^post1, n3^0'=n3^post1, ret_fib9^0'=ret_fib9^post1, temp7^0'=temp7^post1, tmp^0'=tmp^post1, (a^0-a^post1 == 0 /\ ret_fib9^post1-ans8^post1 == 0 /\ 1+n3^0-i4^0 <= 0 /\ -ret_fib9^post1+tmp^post1 == 0 /\ -fnew5^0+ans8^post1 == 0 /\ -fold6^post1+fold6^0 == 0 /\ temp7^0-temp7^post1 == 0 /\ -i4^post1+i4^0 == 0 /\ -__const_30^post1+__const_30^0 == 0 /\ -fnew5^post1+fnew5^0 == 0 /\ -n3^post1+n3^0 == 0), cost: 1
   1: l0 -> l2 : __const_30^0'=__const_30^post2, a^0'=a^post2, ans8^0'=ans8^post2, fnew5^0'=fnew5^post2, fold6^0'=fold6^post2, i4^0'=i4^post2, n3^0'=n3^post2, ret_fib9^0'=ret_fib9^post2, temp7^0'=temp7^post2, tmp^0'=tmp^post2, (-n3^post2+n3^0 == 0 /\ a^0-a^post2 == 0 /\ -fnew5^0+temp7^post2 == 0 /\ -tmp^post2+tmp^0 == 0 /\ -1+i4^post2-i4^0 == 0 /\ -n3^0+i4^0 <= 0 /\ fnew5^post2-fnew5^0-fold6^0 == 0 /\ -__const_30^post2+__const_30^0 == 0 /\ ret_fib9^0-ret_fib9^post2 == 0 /\ fold6^post2-temp7^post2 == 0 /\ ans8^0-ans8^post2 == 0), cost: 1
   2: l2 -> l0 : __const_30^0'=__const_30^post3, a^0'=a^post3, ans8^0'=ans8^post3, fnew5^0'=fnew5^post3, fold6^0'=fold6^post3, i4^0'=i4^post3, n3^0'=n3^post3, ret_fib9^0'=ret_fib9^post3, temp7^0'=temp7^post3, tmp^0'=tmp^post3, (-fnew5^post3+fnew5^0 == 0 /\ temp7^0-temp7^post3 == 0 /\ ret_fib9^0-ret_fib9^post3 == 0 /\ -n3^post3+n3^0 == 0 /\ -fold6^post3+fold6^0 == 0 /\ a^0-a^post3 == 0 /\ i4^0-i4^post3 == 0 /\ -tmp^post3+tmp^0 == 0 /\ -__const_30^post3+__const_30^0 == 0 /\ ans8^0-ans8^post3 == 0), cost: 1
   5: l4 -> l2 : __const_30^0'=__const_30^post4, a^0'=a^post4, ans8^0'=ans8^post4, fnew5^0'=fnew5^post4, fold6^0'=fold6^post4, i4^0'=i4^post4, n3^0'=n3^post4, ret_fib9^0'=ret_fib9^post4, temp7^0'=temp7^post4, tmp^0'=tmp^post4, (-tmp^post4+tmp^post5 == 0 /\ -ret_fib9^post5+ret_fib9^0 == 0 /\ temp7^0-temp7^post5 == 0 /\ n3^post4-a^post4 == 0 /\ __const_30^0-__const_30^post5 == 0 /\ -fold6^post5+fold6^0 == 0 /\ ans8^0-ans8^post5 == 0 /\ n3^0-n3^post5 == 0 /\ tmp^0-tmp^post5 == 0 /\ ret_fib9^post5-ret_fib9^post4 == 0 /\ a^0-a^post5 == 0 /\ -ans8^post4+ans8^post5 == 0 /\ fold6^post4 == 0 /\ -temp7^post4+temp7^post5 == 0 /\ fnew5^0-fnew5^post5 == 0 /\ -2+i4^post4 == 0 /\ -i4^post5+i4^0 == 0 /\ a^post4-__const_30^post5 == 0 /\ -__const_30^post4+__const_30^post5 == 0 /\ -1+fnew5^post4 == 0), cost: 1

	Eliminating location l3 by chaining:

	Applied chaining

	First rule:
	l4 -> l3 : __const_30^0'=__const_30^post5, a^0'=a^post5, ans8^0'=ans8^post5, fnew5^0'=fnew5^post5, fold6^0'=fold6^post5, i4^0'=i4^post5, n3^0'=n3^post5, ret_fib9^0'=ret_fib9^post5, temp7^0'=temp7^post5, tmp^0'=tmp^post5, (-ret_fib9^post5+ret_fib9^0 == 0 /\ temp7^0-temp7^post5 == 0 /\ __const_30^0-__const_30^post5 == 0 /\ -fold6^post5+fold6^0 == 0 /\ ans8^0-ans8^post5 == 0 /\ n3^0-n3^post5 == 0 /\ tmp^0-tmp^post5 == 0 /\ a^0-a^post5 == 0 /\ fnew5^0-fnew5^post5 == 0 /\ -i4^post5+i4^0 == 0), cost: 1
	Second rule:
	l3 -> l2 : __const_30^0'=__const_30^post4, a^0'=a^post4, ans8^0'=ans8^post4, fnew5^0'=fnew5^post4, fold6^0'=fold6^post4, i4^0'=i4^post4, n3^0'=n3^post4, ret_fib9^0'=ret_fib9^post4, temp7^0'=temp7^post4, tmp^0'=tmp^post4, (ans8^0-ans8^post4 == 0 /\ -tmp^post4+tmp^0 == 0 /\ n3^post4-a^post4 == 0 /\ -__const_30^0+a^post4 == 0 /\ ret_fib9^0-ret_fib9^post4 == 0 /\ __const_30^0-__const_30^post4 == 0 /\ fold6^post4 == 0 /\ -2+i4^post4 == 0 /\ -1+fnew5^post4 == 0 /\ -temp7^post4+temp7^0 == 0), cost: 1
	New rule:
	l4 -> l2 : __const_30^0'=__const_30^post4, a^0'=a^post4, ans8^0'=ans8^post4, fnew5^0'=fnew5^post4, fold6^0'=fold6^post4, i4^0'=i4^post4, n3^0'=n3^post4, ret_fib9^0'=ret_fib9^post4, temp7^0'=temp7^post4, tmp^0'=tmp^post4, (-tmp^post4+tmp^post5 == 0 /\ -ret_fib9^post5+ret_fib9^0 == 0 /\ temp7^0-temp7^post5 == 0 /\ n3^post4-a^post4 == 0 /\ __const_30^0-__const_30^post5 == 0 /\ -fold6^post5+fold6^0 == 0 /\ ans8^0-ans8^post5 == 0 /\ n3^0-n3^post5 == 0 /\ tmp^0-tmp^post5 == 0 /\ ret_fib9^post5-ret_fib9^post4 == 0 /\ a^0-a^post5 == 0 /\ -ans8^post4+ans8^post5 == 0 /\ fold6^post4 == 0 /\ -temp7^post4+temp7^post5 == 0 /\ fnew5^0-fnew5^post5 == 0 /\ -2+i4^post4 == 0 /\ -i4^post5+i4^0 == 0 /\ a^post4-__const_30^post5 == 0 /\ -__const_30^post4+__const_30^post5 == 0 /\ -1+fnew5^post4 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 3 4

Simplified Transitions

Start location: l4
Program variables: __const_30^0 a^0 ans8^0 fnew5^0 fold6^0 i4^0 n3^0 ret_fib9^0 temp7^0 tmp^0
   6: l0 -> l1 : ans8^0'=fnew5^0, ret_fib9^0'=fnew5^0, tmp^0'=fnew5^0, 1+n3^0-i4^0 <= 0, cost: 1
   7: l0 -> l2 : fnew5^0'=fnew5^0+fold6^0, fold6^0'=fnew5^0, i4^0'=1+i4^0, temp7^0'=fnew5^0, -n3^0+i4^0 <= 0, cost: 1
   8: l2 -> l0 : T, cost: 1
   9: l4 -> l2 : a^0'=__const_30^0, fnew5^0'=1, fold6^0'=0, i4^0'=2, n3^0'=__const_30^0, T, cost: 1

	Propagated Equalities

	Original rule:
	l0 -> l1 : __const_30^0'=__const_30^post1, a^0'=a^post1, ans8^0'=ans8^post1, fnew5^0'=fnew5^post1, fold6^0'=fold6^post1, i4^0'=i4^post1, n3^0'=n3^post1, ret_fib9^0'=ret_fib9^post1, temp7^0'=temp7^post1, tmp^0'=tmp^post1, (a^0-a^post1 == 0 /\ ret_fib9^post1-ans8^post1 == 0 /\ 1+n3^0-i4^0 <= 0 /\ -ret_fib9^post1+tmp^post1 == 0 /\ -fnew5^0+ans8^post1 == 0 /\ -fold6^post1+fold6^0 == 0 /\ temp7^0-temp7^post1 == 0 /\ -i4^post1+i4^0 == 0 /\ -__const_30^post1+__const_30^0 == 0 /\ -fnew5^post1+fnew5^0 == 0 /\ -n3^post1+n3^0 == 0), cost: 1
	New rule:
	l0 -> l1 : __const_30^0'=__const_30^0, a^0'=a^0, ans8^0'=fnew5^0, fnew5^0'=fnew5^0, fold6^0'=fold6^0, i4^0'=i4^0, n3^0'=n3^0, ret_fib9^0'=fnew5^0, temp7^0'=temp7^0, tmp^0'=fnew5^0, (0 == 0 /\ 1+n3^0-i4^0 <= 0), cost: 1
	
		propagated equality a^post1 = a^0
		
		propagated equality ans8^post1 = ret_fib9^post1
		
		propagated equality ret_fib9^post1 = tmp^post1
		
		propagated equality tmp^post1 = fnew5^0
		
		propagated equality fold6^post1 = fold6^0
		
		propagated equality temp7^post1 = temp7^0
		
		propagated equality i4^post1 = i4^0
		
		propagated equality __const_30^post1 = __const_30^0
		
		propagated equality fnew5^post1 = fnew5^0
		
		propagated equality n3^post1 = n3^0
		
	Simplified Guard

	Original rule:
	l0 -> l1 : __const_30^0'=__const_30^0, a^0'=a^0, ans8^0'=fnew5^0, fnew5^0'=fnew5^0, fold6^0'=fold6^0, i4^0'=i4^0, n3^0'=n3^0, ret_fib9^0'=fnew5^0, temp7^0'=temp7^0, tmp^0'=fnew5^0, (0 == 0 /\ 1+n3^0-i4^0 <= 0), cost: 1
	New rule:
	l0 -> l1 : __const_30^0'=__const_30^0, a^0'=a^0, ans8^0'=fnew5^0, fnew5^0'=fnew5^0, fold6^0'=fold6^0, i4^0'=i4^0, n3^0'=n3^0, ret_fib9^0'=fnew5^0, temp7^0'=temp7^0, tmp^0'=fnew5^0, 1+n3^0-i4^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l1 : __const_30^0'=__const_30^0, a^0'=a^0, ans8^0'=fnew5^0, fnew5^0'=fnew5^0, fold6^0'=fold6^0, i4^0'=i4^0, n3^0'=n3^0, ret_fib9^0'=fnew5^0, temp7^0'=temp7^0, tmp^0'=fnew5^0, 1+n3^0-i4^0 <= 0, cost: 1
	New rule:
	l0 -> l1 : ans8^0'=fnew5^0, ret_fib9^0'=fnew5^0, tmp^0'=fnew5^0, 1+n3^0-i4^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l0 -> l2 : __const_30^0'=__const_30^post2, a^0'=a^post2, ans8^0'=ans8^post2, fnew5^0'=fnew5^post2, fold6^0'=fold6^post2, i4^0'=i4^post2, n3^0'=n3^post2, ret_fib9^0'=ret_fib9^post2, temp7^0'=temp7^post2, tmp^0'=tmp^post2, (-n3^post2+n3^0 == 0 /\ a^0-a^post2 == 0 /\ -fnew5^0+temp7^post2 == 0 /\ -tmp^post2+tmp^0 == 0 /\ -1+i4^post2-i4^0 == 0 /\ -n3^0+i4^0 <= 0 /\ fnew5^post2-fnew5^0-fold6^0 == 0 /\ -__const_30^post2+__const_30^0 == 0 /\ ret_fib9^0-ret_fib9^post2 == 0 /\ fold6^post2-temp7^post2 == 0 /\ ans8^0-ans8^post2 == 0), cost: 1
	New rule:
	l0 -> l2 : __const_30^0'=__const_30^0, a^0'=a^0, ans8^0'=ans8^0, fnew5^0'=fnew5^0+fold6^0, fold6^0'=fnew5^0, i4^0'=1+i4^0, n3^0'=n3^0, ret_fib9^0'=ret_fib9^0, temp7^0'=fnew5^0, tmp^0'=tmp^0, (0 == 0 /\ -n3^0+i4^0 <= 0), cost: 1
	
		propagated equality n3^post2 = n3^0
		
		propagated equality a^post2 = a^0
		
		propagated equality temp7^post2 = fnew5^0
		
		propagated equality tmp^post2 = tmp^0
		
		propagated equality i4^post2 = 1+i4^0
		
		propagated equality fnew5^post2 = fnew5^0+fold6^0
		
		propagated equality __const_30^post2 = __const_30^0
		
		propagated equality ret_fib9^post2 = ret_fib9^0
		
		propagated equality fold6^post2 = fnew5^0
		
		propagated equality ans8^post2 = ans8^0
		
	Simplified Guard

	Original rule:
	l0 -> l2 : __const_30^0'=__const_30^0, a^0'=a^0, ans8^0'=ans8^0, fnew5^0'=fnew5^0+fold6^0, fold6^0'=fnew5^0, i4^0'=1+i4^0, n3^0'=n3^0, ret_fib9^0'=ret_fib9^0, temp7^0'=fnew5^0, tmp^0'=tmp^0, (0 == 0 /\ -n3^0+i4^0 <= 0), cost: 1
	New rule:
	l0 -> l2 : __const_30^0'=__const_30^0, a^0'=a^0, ans8^0'=ans8^0, fnew5^0'=fnew5^0+fold6^0, fold6^0'=fnew5^0, i4^0'=1+i4^0, n3^0'=n3^0, ret_fib9^0'=ret_fib9^0, temp7^0'=fnew5^0, tmp^0'=tmp^0, -n3^0+i4^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l2 : __const_30^0'=__const_30^0, a^0'=a^0, ans8^0'=ans8^0, fnew5^0'=fnew5^0+fold6^0, fold6^0'=fnew5^0, i4^0'=1+i4^0, n3^0'=n3^0, ret_fib9^0'=ret_fib9^0, temp7^0'=fnew5^0, tmp^0'=tmp^0, -n3^0+i4^0 <= 0, cost: 1
	New rule:
	l0 -> l2 : fnew5^0'=fnew5^0+fold6^0, fold6^0'=fnew5^0, i4^0'=1+i4^0, temp7^0'=fnew5^0, -n3^0+i4^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l2 -> l0 : __const_30^0'=__const_30^post3, a^0'=a^post3, ans8^0'=ans8^post3, fnew5^0'=fnew5^post3, fold6^0'=fold6^post3, i4^0'=i4^post3, n3^0'=n3^post3, ret_fib9^0'=ret_fib9^post3, temp7^0'=temp7^post3, tmp^0'=tmp^post3, (-fnew5^post3+fnew5^0 == 0 /\ temp7^0-temp7^post3 == 0 /\ ret_fib9^0-ret_fib9^post3 == 0 /\ -n3^post3+n3^0 == 0 /\ -fold6^post3+fold6^0 == 0 /\ a^0-a^post3 == 0 /\ i4^0-i4^post3 == 0 /\ -tmp^post3+tmp^0 == 0 /\ -__const_30^post3+__const_30^0 == 0 /\ ans8^0-ans8^post3 == 0), cost: 1
	New rule:
	l2 -> l0 : __const_30^0'=__const_30^0, a^0'=a^0, ans8^0'=ans8^0, fnew5^0'=fnew5^0, fold6^0'=fold6^0, i4^0'=i4^0, n3^0'=n3^0, ret_fib9^0'=ret_fib9^0, temp7^0'=temp7^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	
		propagated equality fnew5^post3 = fnew5^0
		
		propagated equality temp7^post3 = temp7^0
		
		propagated equality ret_fib9^post3 = ret_fib9^0
		
		propagated equality n3^post3 = n3^0
		
		propagated equality fold6^post3 = fold6^0
		
		propagated equality a^post3 = a^0
		
		propagated equality i4^post3 = i4^0
		
		propagated equality tmp^post3 = tmp^0
		
		propagated equality __const_30^post3 = __const_30^0
		
		propagated equality ans8^post3 = ans8^0
		
	Simplified Guard

	Original rule:
	l2 -> l0 : __const_30^0'=__const_30^0, a^0'=a^0, ans8^0'=ans8^0, fnew5^0'=fnew5^0, fold6^0'=fold6^0, i4^0'=i4^0, n3^0'=n3^0, ret_fib9^0'=ret_fib9^0, temp7^0'=temp7^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	New rule:
	l2 -> l0 : __const_30^0'=__const_30^0, a^0'=a^0, ans8^0'=ans8^0, fnew5^0'=fnew5^0, fold6^0'=fold6^0, i4^0'=i4^0, n3^0'=n3^0, ret_fib9^0'=ret_fib9^0, temp7^0'=temp7^0, tmp^0'=tmp^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l2 -> l0 : __const_30^0'=__const_30^0, a^0'=a^0, ans8^0'=ans8^0, fnew5^0'=fnew5^0, fold6^0'=fold6^0, i4^0'=i4^0, n3^0'=n3^0, ret_fib9^0'=ret_fib9^0, temp7^0'=temp7^0, tmp^0'=tmp^0, T, cost: 1
	New rule:
	l2 -> l0 : T, cost: 1
	
	Propagated Equalities

	Original rule:
	l4 -> l2 : __const_30^0'=__const_30^post4, a^0'=a^post4, ans8^0'=ans8^post4, fnew5^0'=fnew5^post4, fold6^0'=fold6^post4, i4^0'=i4^post4, n3^0'=n3^post4, ret_fib9^0'=ret_fib9^post4, temp7^0'=temp7^post4, tmp^0'=tmp^post4, (-tmp^post4+tmp^post5 == 0 /\ -ret_fib9^post5+ret_fib9^0 == 0 /\ temp7^0-temp7^post5 == 0 /\ n3^post4-a^post4 == 0 /\ __const_30^0-__const_30^post5 == 0 /\ -fold6^post5+fold6^0 == 0 /\ ans8^0-ans8^post5 == 0 /\ n3^0-n3^post5 == 0 /\ tmp^0-tmp^post5 == 0 /\ ret_fib9^post5-ret_fib9^post4 == 0 /\ a^0-a^post5 == 0 /\ -ans8^post4+ans8^post5 == 0 /\ fold6^post4 == 0 /\ -temp7^post4+temp7^post5 == 0 /\ fnew5^0-fnew5^post5 == 0 /\ -2+i4^post4 == 0 /\ -i4^post5+i4^0 == 0 /\ a^post4-__const_30^post5 == 0 /\ -__const_30^post4+__const_30^post5 == 0 /\ -1+fnew5^post4 == 0), cost: 1
	New rule:
	l4 -> l2 : __const_30^0'=__const_30^post5, a^0'=__const_30^post5, ans8^0'=ans8^post5, fnew5^0'=1, fold6^0'=0, i4^0'=2, n3^0'=__const_30^post5, ret_fib9^0'=ret_fib9^post5, temp7^0'=temp7^post5, tmp^0'=tmp^post5, (0 == 0 /\ -ret_fib9^post5+ret_fib9^0 == 0 /\ temp7^0-temp7^post5 == 0 /\ __const_30^0-__const_30^post5 == 0 /\ -fold6^post5+fold6^0 == 0 /\ ans8^0-ans8^post5 == 0 /\ n3^0-n3^post5 == 0 /\ tmp^0-tmp^post5 == 0 /\ a^0-a^post5 == 0 /\ fnew5^0-fnew5^post5 == 0 /\ -i4^post5+i4^0 == 0), cost: 1
	
		propagated equality tmp^post4 = tmp^post5
		
		propagated equality a^post4 = n3^post4
		
		propagated equality ret_fib9^post4 = ret_fib9^post5
		
		propagated equality ans8^post4 = ans8^post5
		
		propagated equality fold6^post4 = 0
		
		propagated equality temp7^post4 = temp7^post5
		
		propagated equality i4^post4 = 2
		
		propagated equality n3^post4 = __const_30^post5
		
		propagated equality __const_30^post4 = __const_30^post5
		
		propagated equality fnew5^post4 = 1
		
	Propagated Equalities

	Original rule:
	l4 -> l2 : __const_30^0'=__const_30^post5, a^0'=__const_30^post5, ans8^0'=ans8^post5, fnew5^0'=1, fold6^0'=0, i4^0'=2, n3^0'=__const_30^post5, ret_fib9^0'=ret_fib9^post5, temp7^0'=temp7^post5, tmp^0'=tmp^post5, (0 == 0 /\ -ret_fib9^post5+ret_fib9^0 == 0 /\ temp7^0-temp7^post5 == 0 /\ __const_30^0-__const_30^post5 == 0 /\ -fold6^post5+fold6^0 == 0 /\ ans8^0-ans8^post5 == 0 /\ n3^0-n3^post5 == 0 /\ tmp^0-tmp^post5 == 0 /\ a^0-a^post5 == 0 /\ fnew5^0-fnew5^post5 == 0 /\ -i4^post5+i4^0 == 0), cost: 1
	New rule:
	l4 -> l2 : __const_30^0'=__const_30^0, a^0'=__const_30^0, ans8^0'=ans8^0, fnew5^0'=1, fold6^0'=0, i4^0'=2, n3^0'=__const_30^0, ret_fib9^0'=ret_fib9^0, temp7^0'=temp7^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	
		propagated equality ret_fib9^post5 = ret_fib9^0
		
		propagated equality temp7^post5 = temp7^0
		
		propagated equality __const_30^post5 = __const_30^0
		
		propagated equality fold6^post5 = fold6^0
		
		propagated equality ans8^post5 = ans8^0
		
		propagated equality n3^post5 = n3^0
		
		propagated equality tmp^post5 = tmp^0
		
		propagated equality a^post5 = a^0
		
		propagated equality fnew5^post5 = fnew5^0
		
		propagated equality i4^post5 = i4^0
		
	Simplified Guard

	Original rule:
	l4 -> l2 : __const_30^0'=__const_30^0, a^0'=__const_30^0, ans8^0'=ans8^0, fnew5^0'=1, fold6^0'=0, i4^0'=2, n3^0'=__const_30^0, ret_fib9^0'=ret_fib9^0, temp7^0'=temp7^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	New rule:
	l4 -> l2 : __const_30^0'=__const_30^0, a^0'=__const_30^0, ans8^0'=ans8^0, fnew5^0'=1, fold6^0'=0, i4^0'=2, n3^0'=__const_30^0, ret_fib9^0'=ret_fib9^0, temp7^0'=temp7^0, tmp^0'=tmp^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l4 -> l2 : __const_30^0'=__const_30^0, a^0'=__const_30^0, ans8^0'=ans8^0, fnew5^0'=1, fold6^0'=0, i4^0'=2, n3^0'=__const_30^0, ret_fib9^0'=ret_fib9^0, temp7^0'=temp7^0, tmp^0'=tmp^0, T, cost: 1
	New rule:
	l4 -> l2 : a^0'=__const_30^0, fnew5^0'=1, fold6^0'=0, i4^0'=2, n3^0'=__const_30^0, T, cost: 1

Step with 9

	Trace

	9[T]
	
	Blocked

	[{}, {}]

Step with 8

	Trace

	9[T], 8[T]
	
	Blocked

	[{}, {}, {}]

Step with 6

	Trace

	9[T], 8[T], 6[(1+n3^0-i4^0 <= 0)]
	
	Blocked

	[{}, {}, {}, {}]

Backtrack

	Trace

	9[T], 8[T]
	
	Blocked

	[{}, {}, {6[T]}]

Step with 7

	Trace

	9[T], 8[T], 7[(-n3^0+i4^0 <= 0)]
	
	Blocked

	[{}, {}, {6[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 8

	Trace

	9[T], 8[T], 7[(-n3^0+i4^0 <= 0)], 8[T]
	
	Blocked

	[{}, {}, {6[T]}, {}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 7

	Trace

	9[T], 8[T], 7[(-n3^0+i4^0 <= 0)], 8[T], 7[(-n3^0+i4^0 <= 0)]
	
	Blocked

	[{}, {}, {6[T]}, {}, {}, {}]

Covered

	Trace

	9[T], 8[T], 7[(-n3^0+i4^0 <= 0)], 8[T]
	
	Blocked

	[{}, {}, {6[T]}, {}, {7[T]}]

Step with 6

	Trace

	9[T], 8[T], 7[(-n3^0+i4^0 <= 0)], 8[T], 6[(1+n3^0-i4^0 <= 0)]
	
	Blocked

	[{}, {}, {6[T]}, {}, {7[T]}, {}]

Backtrack

	Trace

	9[T], 8[T], 7[(-n3^0+i4^0 <= 0)], 8[T]
	
	Blocked

	[{}, {}, {6[T]}, {}, {6[T], 7[T]}]

Backtrack

	Trace

	9[T], 8[T], 7[(-n3^0+i4^0 <= 0)]
	
	Blocked

	[{}, {}, {6[T]}, {8[T]}]

Backtrack

	Trace

	9[T], 8[T]
	
	Blocked

	[{}, {}, {6[T], 7[T]}]

Backtrack

	Trace

	9[T]
	
	Blocked

	[{}, {8[T]}]

Backtrack

	Trace

	Blocked

	[{9[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
