NO

Initial ITS

Start location: l5
Program variables: hi^0 lo^0
   0: l0 -> l1 : hi^0'=hi^post1, lo^0'=lo^post1, (0 == 0 /\ -lo^post1+lo^0 == 0), cost: 1
   1: l0 -> l1 : hi^0'=hi^post2, lo^0'=lo^post2, (0 == 0 /\ hi^0-hi^post2 == 0), cost: 1
   4: l1 -> l2 : hi^0'=hi^post5, lo^0'=lo^post5, (hi^0-hi^post5 == 0 /\ -lo^post5+lo^0 == 0), cost: 1
   2: l2 -> l3 : hi^0'=hi^post3, lo^0'=lo^post3, (-hi^0+lo^0 <= 0 /\ -hi^post3+hi^0 == 0 /\ -lo^post3+lo^0 == 0), cost: 1
   3: l2 -> l0 : hi^0'=hi^post4, lo^0'=lo^post4, (-lo^post4+lo^0 == 0 /\ -hi^post4+hi^0 == 0 /\ 1+hi^0-lo^0 <= 0), cost: 1
   5: l4 -> l1 : hi^0'=hi^post6, lo^0'=lo^post6, (-99+lo^post6 == 0 /\ hi^post6 == 0), cost: 1
   6: l5 -> l4 : hi^0'=hi^post7, lo^0'=lo^post7, (-hi^post7+hi^0 == 0 /\ -lo^post7+lo^0 == 0), cost: 1

Chained Linear Paths

Start location: l5
Program variables: hi^0 lo^0
   0: l0 -> l1 : hi^0'=hi^post1, lo^0'=lo^post1, (0 == 0 /\ -lo^post1+lo^0 == 0), cost: 1
   1: l0 -> l1 : hi^0'=hi^post2, lo^0'=lo^post2, (0 == 0 /\ hi^0-hi^post2 == 0), cost: 1
   4: l1 -> l2 : hi^0'=hi^post5, lo^0'=lo^post5, (hi^0-hi^post5 == 0 /\ -lo^post5+lo^0 == 0), cost: 1
   2: l2 -> l3 : hi^0'=hi^post3, lo^0'=lo^post3, (-hi^0+lo^0 <= 0 /\ -hi^post3+hi^0 == 0 /\ -lo^post3+lo^0 == 0), cost: 1
   3: l2 -> l0 : hi^0'=hi^post4, lo^0'=lo^post4, (-lo^post4+lo^0 == 0 /\ -hi^post4+hi^0 == 0 /\ 1+hi^0-lo^0 <= 0), cost: 1
   7: l5 -> l1 : hi^0'=hi^post6, lo^0'=lo^post6, (-99+lo^post6 == 0 /\ -hi^post7+hi^0 == 0 /\ hi^post6 == 0 /\ -lo^post7+lo^0 == 0), cost: 1

	Eliminating location l4 by chaining:

	Applied chaining

	First rule:
	l5 -> l4 : hi^0'=hi^post7, lo^0'=lo^post7, (-hi^post7+hi^0 == 0 /\ -lo^post7+lo^0 == 0), cost: 1
	Second rule:
	l4 -> l1 : hi^0'=hi^post6, lo^0'=lo^post6, (-99+lo^post6 == 0 /\ hi^post6 == 0), cost: 1
	New rule:
	l5 -> l1 : hi^0'=hi^post6, lo^0'=lo^post6, (-99+lo^post6 == 0 /\ -hi^post7+hi^0 == 0 /\ hi^post6 == 0 /\ -lo^post7+lo^0 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 5 6

Simplified Transitions

Start location: l5
Program variables: hi^0 lo^0
   8: l0 -> l1 : hi^0'=hi^post1, T, cost: 1
   9: l0 -> l1 : lo^0'=lo^post2, T, cost: 1
  12: l1 -> l2 : T, cost: 1
  10: l2 -> l3 : -hi^0+lo^0 <= 0, cost: 1
  11: l2 -> l0 : 1+hi^0-lo^0 <= 0, cost: 1
  13: l5 -> l1 : hi^0'=0, lo^0'=99, T, cost: 1

	Propagated Equalities

	Original rule:
	l0 -> l1 : hi^0'=hi^post1, lo^0'=lo^post1, (0 == 0 /\ -lo^post1+lo^0 == 0), cost: 1
	New rule:
	l0 -> l1 : hi^0'=hi^post1, lo^0'=lo^0, 0 == 0, cost: 1
	
		propagated equality lo^post1 = lo^0
		
	Simplified Guard

	Original rule:
	l0 -> l1 : hi^0'=hi^post1, lo^0'=lo^0, 0 == 0, cost: 1
	New rule:
	l0 -> l1 : hi^0'=hi^post1, lo^0'=lo^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l1 : hi^0'=hi^post1, lo^0'=lo^0, T, cost: 1
	New rule:
	l0 -> l1 : hi^0'=hi^post1, T, cost: 1
	
	Propagated Equalities

	Original rule:
	l0 -> l1 : hi^0'=hi^post2, lo^0'=lo^post2, (0 == 0 /\ hi^0-hi^post2 == 0), cost: 1
	New rule:
	l0 -> l1 : hi^0'=hi^0, lo^0'=lo^post2, 0 == 0, cost: 1
	
		propagated equality hi^post2 = hi^0
		
	Simplified Guard

	Original rule:
	l0 -> l1 : hi^0'=hi^0, lo^0'=lo^post2, 0 == 0, cost: 1
	New rule:
	l0 -> l1 : hi^0'=hi^0, lo^0'=lo^post2, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l1 : hi^0'=hi^0, lo^0'=lo^post2, T, cost: 1
	New rule:
	l0 -> l1 : lo^0'=lo^post2, T, cost: 1
	
	Propagated Equalities

	Original rule:
	l2 -> l3 : hi^0'=hi^post3, lo^0'=lo^post3, (-hi^0+lo^0 <= 0 /\ -hi^post3+hi^0 == 0 /\ -lo^post3+lo^0 == 0), cost: 1
	New rule:
	l2 -> l3 : hi^0'=hi^0, lo^0'=lo^0, (0 == 0 /\ -hi^0+lo^0 <= 0), cost: 1
	
		propagated equality hi^post3 = hi^0
		
		propagated equality lo^post3 = lo^0
		
	Simplified Guard

	Original rule:
	l2 -> l3 : hi^0'=hi^0, lo^0'=lo^0, (0 == 0 /\ -hi^0+lo^0 <= 0), cost: 1
	New rule:
	l2 -> l3 : hi^0'=hi^0, lo^0'=lo^0, -hi^0+lo^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l2 -> l3 : hi^0'=hi^0, lo^0'=lo^0, -hi^0+lo^0 <= 0, cost: 1
	New rule:
	l2 -> l3 : -hi^0+lo^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l2 -> l0 : hi^0'=hi^post4, lo^0'=lo^post4, (-lo^post4+lo^0 == 0 /\ -hi^post4+hi^0 == 0 /\ 1+hi^0-lo^0 <= 0), cost: 1
	New rule:
	l2 -> l0 : hi^0'=hi^0, lo^0'=lo^0, (0 == 0 /\ 1+hi^0-lo^0 <= 0), cost: 1
	
		propagated equality lo^post4 = lo^0
		
		propagated equality hi^post4 = hi^0
		
	Simplified Guard

	Original rule:
	l2 -> l0 : hi^0'=hi^0, lo^0'=lo^0, (0 == 0 /\ 1+hi^0-lo^0 <= 0), cost: 1
	New rule:
	l2 -> l0 : hi^0'=hi^0, lo^0'=lo^0, 1+hi^0-lo^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l2 -> l0 : hi^0'=hi^0, lo^0'=lo^0, 1+hi^0-lo^0 <= 0, cost: 1
	New rule:
	l2 -> l0 : 1+hi^0-lo^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l1 -> l2 : hi^0'=hi^post5, lo^0'=lo^post5, (hi^0-hi^post5 == 0 /\ -lo^post5+lo^0 == 0), cost: 1
	New rule:
	l1 -> l2 : hi^0'=hi^0, lo^0'=lo^0, 0 == 0, cost: 1
	
		propagated equality hi^post5 = hi^0
		
		propagated equality lo^post5 = lo^0
		
	Simplified Guard

	Original rule:
	l1 -> l2 : hi^0'=hi^0, lo^0'=lo^0, 0 == 0, cost: 1
	New rule:
	l1 -> l2 : hi^0'=hi^0, lo^0'=lo^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l1 -> l2 : hi^0'=hi^0, lo^0'=lo^0, T, cost: 1
	New rule:
	l1 -> l2 : T, cost: 1
	
	Propagated Equalities

	Original rule:
	l5 -> l1 : hi^0'=hi^post6, lo^0'=lo^post6, (-99+lo^post6 == 0 /\ -hi^post7+hi^0 == 0 /\ hi^post6 == 0 /\ -lo^post7+lo^0 == 0), cost: 1
	New rule:
	l5 -> l1 : hi^0'=0, lo^0'=99, (0 == 0 /\ -hi^post7+hi^0 == 0 /\ -lo^post7+lo^0 == 0), cost: 1
	
		propagated equality lo^post6 = 99
		
		propagated equality hi^post6 = 0
		
	Propagated Equalities

	Original rule:
	l5 -> l1 : hi^0'=0, lo^0'=99, (0 == 0 /\ -hi^post7+hi^0 == 0 /\ -lo^post7+lo^0 == 0), cost: 1
	New rule:
	l5 -> l1 : hi^0'=0, lo^0'=99, 0 == 0, cost: 1
	
		propagated equality hi^post7 = hi^0
		
		propagated equality lo^post7 = lo^0
		
	Simplified Guard

	Original rule:
	l5 -> l1 : hi^0'=0, lo^0'=99, 0 == 0, cost: 1
	New rule:
	l5 -> l1 : hi^0'=0, lo^0'=99, T, cost: 1

Step with 13

	Trace

	13[T]
	
	Blocked

	[{}, {}]

Step with 12

	Trace

	13[T], 12[T]
	
	Blocked

	[{}, {}, {}]

Step with 11

	Trace

	13[T], 12[T], 11[(1+hi^0-lo^0 <= 0)]
	
	Blocked

	[{}, {}, {10[T]}, {}]

Step with 8

	Trace

	13[T], 12[T], 11[(1+hi^0-lo^0 <= 0)], 8[T]
	
	Blocked

	[{}, {}, {10[T]}, {}, {}]

Nonterm

Start location: l5
Program variables: hi^0 lo^0
   8: l0 -> l1 : hi^0'=hi^post1, T, cost: 1
   9: l0 -> l1 : lo^0'=lo^post2, T, cost: 1
  12: l1 -> l2 : T, cost: 1
  14: l1 -> LoAT_sink : (-1-hi^0+lo^0 >= 0 /\ hi^post1-hi^0 <= 0), cost: NONTERM
  10: l2 -> l3 : -hi^0+lo^0 <= 0, cost: 1
  11: l2 -> l0 : 1+hi^0-lo^0 <= 0, cost: 1
  13: l5 -> l1 : hi^0'=0, lo^0'=99, T, cost: 1

	Certificate of Non-Termination

	Original rule:
	l1 -> l1 : hi^0'=hi^post1, 1+hi^0-lo^0 <= 0, cost: 1
	New rule:
	l1 -> LoAT_sink : (-1-hi^0+lo^0 >= 0 /\ hi^post1-hi^0 <= 0), cost: NONTERM

		-1-hi^0+lo^0 >= 0 [0]: eventual decrease yields (-1-hi^0+lo^0 >= 0 /\ -1-hi^post1+lo^0 >= 0)
		
		-1-hi^0+lo^0 >= 0 [1]: eventual increase yields (-1-hi^0+lo^0 >= 0 /\ hi^post1-hi^0 <= 0)
		
		Replacement map: {-1-hi^0+lo^0 >= 0 -> (-1-hi^0+lo^0 >= 0 /\ hi^post1-hi^0 <= 0)}

Step with 14

	Trace

	13[T], 14[(-1-hi^0+lo^0 >= 0 /\ hi^post1-hi^0 <= 0)]
	
	Blocked

	[{}, {}, {14[T]}]

Refute

	Counterexample

	[ hi^0=0 lo^0=99 ] 13 [ hi^0=hi^0 lo^0=lo^0 ] 14
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
