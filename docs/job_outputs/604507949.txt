unknown

Initial ITS

Start location: __init
Program variables: arg1 arg2
   0: f1_0_main_ConstantStackPush -> f139_0_main_GE : arg1'=arg1p1, arg2'=arg2p1, -arg1p1 == 0, cost: 1
   1: f139_0_main_GE -> f169_0_main_GE : arg1'=arg1p2, arg2'=arg2p2, (3-arg2p2 == 0 /\ -arg1p2+arg1 == 0 /\ -10+arg1 < 0), cost: 1
   2: f169_0_main_GE -> f139_0_main_GE : arg1'=arg1p3, arg2'=arg2p3, (1-arg1p3+arg1 == 0 /\ -11+arg2 > 0), cost: 1
   3: f169_0_main_GE -> f169_0_main_GE : arg1'=arg1p4, arg2'=arg2p4, (-12+arg2 < 0 /\ 1-arg2p4+arg2 == 0 /\ -arg1p4+arg1 == 0), cost: 1
   4: __init -> f1_0_main_ConstantStackPush : arg1'=arg1p5, arg2'=arg2p5, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2
   1: f139_0_main_GE -> f169_0_main_GE : arg1'=arg1p2, arg2'=arg2p2, (3-arg2p2 == 0 /\ -arg1p2+arg1 == 0 /\ -10+arg1 < 0), cost: 1
   2: f169_0_main_GE -> f139_0_main_GE : arg1'=arg1p3, arg2'=arg2p3, (1-arg1p3+arg1 == 0 /\ -11+arg2 > 0), cost: 1
   3: f169_0_main_GE -> f169_0_main_GE : arg1'=arg1p4, arg2'=arg2p4, (-12+arg2 < 0 /\ 1-arg2p4+arg2 == 0 /\ -arg1p4+arg1 == 0), cost: 1
   5: __init -> f139_0_main_GE : arg1'=arg1p1, arg2'=arg2p1, -arg1p1 == 0, cost: 1

	Eliminating location f1_0_main_ConstantStackPush by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_ConstantStackPush : arg1'=arg1p5, arg2'=arg2p5, T, cost: 1
	Second rule:
	f1_0_main_ConstantStackPush -> f139_0_main_GE : arg1'=arg1p1, arg2'=arg2p1, -arg1p1 == 0, cost: 1
	New rule:
	__init -> f139_0_main_GE : arg1'=arg1p1, arg2'=arg2p1, -arg1p1 == 0, cost: 1
	
	Applied deletion

	Removed the following rules: 0 4

Simplified Transitions

Start location: __init
Program variables: arg1 arg2
   6: f139_0_main_GE -> f169_0_main_GE : arg2'=3, -10+arg1 < 0, cost: 1
   7: f169_0_main_GE -> f139_0_main_GE : arg1'=1+arg1, arg2'=arg2p3, -11+arg2 > 0, cost: 1
   8: f169_0_main_GE -> f169_0_main_GE : arg2'=1+arg2, -12+arg2 < 0, cost: 1
   9: __init -> f139_0_main_GE : arg1'=0, arg2'=arg2p1, T, cost: 1

	Propagated Equalities

	Original rule:
	f139_0_main_GE -> f169_0_main_GE : arg1'=arg1p2, arg2'=arg2p2, (3-arg2p2 == 0 /\ -arg1p2+arg1 == 0 /\ -10+arg1 < 0), cost: 1
	New rule:
	f139_0_main_GE -> f169_0_main_GE : arg1'=arg1, arg2'=3, (0 == 0 /\ -10+arg1 < 0), cost: 1
	
		propagated equality arg2p2 = 3
		
		propagated equality arg1p2 = arg1
		
	Simplified Guard

	Original rule:
	f139_0_main_GE -> f169_0_main_GE : arg1'=arg1, arg2'=3, (0 == 0 /\ -10+arg1 < 0), cost: 1
	New rule:
	f139_0_main_GE -> f169_0_main_GE : arg1'=arg1, arg2'=3, -10+arg1 < 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	f139_0_main_GE -> f169_0_main_GE : arg1'=arg1, arg2'=3, -10+arg1 < 0, cost: 1
	New rule:
	f139_0_main_GE -> f169_0_main_GE : arg2'=3, -10+arg1 < 0, cost: 1
	
	Propagated Equalities

	Original rule:
	f169_0_main_GE -> f139_0_main_GE : arg1'=arg1p3, arg2'=arg2p3, (1-arg1p3+arg1 == 0 /\ -11+arg2 > 0), cost: 1
	New rule:
	f169_0_main_GE -> f139_0_main_GE : arg1'=1+arg1, arg2'=arg2p3, (0 == 0 /\ -11+arg2 > 0), cost: 1
	
		propagated equality arg1p3 = 1+arg1
		
	Simplified Guard

	Original rule:
	f169_0_main_GE -> f139_0_main_GE : arg1'=1+arg1, arg2'=arg2p3, (0 == 0 /\ -11+arg2 > 0), cost: 1
	New rule:
	f169_0_main_GE -> f139_0_main_GE : arg1'=1+arg1, arg2'=arg2p3, -11+arg2 > 0, cost: 1
	
	Propagated Equalities

	Original rule:
	f169_0_main_GE -> f169_0_main_GE : arg1'=arg1p4, arg2'=arg2p4, (-12+arg2 < 0 /\ 1-arg2p4+arg2 == 0 /\ -arg1p4+arg1 == 0), cost: 1
	New rule:
	f169_0_main_GE -> f169_0_main_GE : arg1'=arg1, arg2'=1+arg2, (0 == 0 /\ -12+arg2 < 0), cost: 1
	
		propagated equality arg2p4 = 1+arg2
		
		propagated equality arg1p4 = arg1
		
	Simplified Guard

	Original rule:
	f169_0_main_GE -> f169_0_main_GE : arg1'=arg1, arg2'=1+arg2, (0 == 0 /\ -12+arg2 < 0), cost: 1
	New rule:
	f169_0_main_GE -> f169_0_main_GE : arg1'=arg1, arg2'=1+arg2, -12+arg2 < 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	f169_0_main_GE -> f169_0_main_GE : arg1'=arg1, arg2'=1+arg2, -12+arg2 < 0, cost: 1
	New rule:
	f169_0_main_GE -> f169_0_main_GE : arg2'=1+arg2, -12+arg2 < 0, cost: 1
	
	Propagated Equalities

	Original rule:
	__init -> f139_0_main_GE : arg1'=arg1p1, arg2'=arg2p1, -arg1p1 == 0, cost: 1
	New rule:
	__init -> f139_0_main_GE : arg1'=0, arg2'=arg2p1, 0 == 0, cost: 1
	
		propagated equality arg1p1 = 0
		
	Simplified Guard

	Original rule:
	__init -> f139_0_main_GE : arg1'=0, arg2'=arg2p1, 0 == 0, cost: 1
	New rule:
	__init -> f139_0_main_GE : arg1'=0, arg2'=arg2p1, T, cost: 1

Step with 9

	Trace

	9[T]
	
	Blocked

	[{}, {}]

Step with 6

	Trace

	9[T], 6[(-10+arg1 < 0)]
	
	Blocked

	[{}, {}, {}]

Step with 8

	Trace

	9[T], 6[(-10+arg1 < 0)], 8[(-12+arg2 < 0)]
	
	Blocked

	[{}, {}, {7[T]}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2
   6: f139_0_main_GE -> f169_0_main_GE : arg2'=3, -10+arg1 < 0, cost: 1
   7: f169_0_main_GE -> f139_0_main_GE : arg1'=1+arg1, arg2'=arg2p3, -11+arg2 > 0, cost: 1
   8: f169_0_main_GE -> f169_0_main_GE : arg2'=1+arg2, -12+arg2 < 0, cost: 1
  10: f169_0_main_GE -> f169_0_main_GE : arg2'=arg2+n, (13-arg2-n > 0 /\ -1+n >= 0), cost: 1
   9: __init -> f139_0_main_GE : arg1'=0, arg2'=arg2p1, T, cost: 1

	Loop Acceleration

	Original rule:
	f169_0_main_GE -> f169_0_main_GE : arg2'=1+arg2, (-12+arg2 < 0), cost: 1
	New rule:
	f169_0_main_GE -> f169_0_main_GE : arg2'=arg2+n, (13-arg2-n > 0 /\ -1+n >= 0), cost: 1

		12-arg2 > 0 [0]: montonic decrease yields 13-arg2-n > 0
		
		12-arg2 > 0 [1]: eventual increase yields (1 <= 0 /\ 12-arg2 > 0)
		
		Replacement map: {12-arg2 > 0 -> 13-arg2-n > 0}

	Trace

	9[T], 6[(-10+arg1 < 0)], 10[(13-arg2-n > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {}, {7[T]}, {8[T], 10[T]}]

Step with 7

	Trace

	9[T], 6[(-10+arg1 < 0)], 10[(13-arg2-n > 0 /\ -1+n >= 0)], 7[(-11+arg2 > 0)]
	
	Blocked

	[{}, {}, {7[T]}, {8[T], 10[T]}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2
   6: f139_0_main_GE -> f169_0_main_GE : arg2'=3, -10+arg1 < 0, cost: 1
  11: f139_0_main_GE -> f139_0_main_GE : arg1'=n2+arg1, arg2'=arg2p3, (-1+n2 >= 0 /\ 11-n2-arg1 > 0), cost: 1
   7: f169_0_main_GE -> f139_0_main_GE : arg1'=1+arg1, arg2'=arg2p3, -11+arg2 > 0, cost: 1
   8: f169_0_main_GE -> f169_0_main_GE : arg2'=1+arg2, -12+arg2 < 0, cost: 1
  10: f169_0_main_GE -> f169_0_main_GE : arg2'=arg2+n, (13-arg2-n > 0 /\ -1+n >= 0), cost: 1
   9: __init -> f139_0_main_GE : arg1'=0, arg2'=arg2p1, T, cost: 1

	Loop Acceleration

	Original rule:
	f139_0_main_GE -> f139_0_main_GE : arg1'=1+arg1, arg2'=arg2p3, -10+arg1 < 0, cost: 1
	New rule:
	f139_0_main_GE -> f139_0_main_GE : arg1'=n2+arg1, arg2'=arg2p3, (-1+n2 >= 0 /\ 11-n2-arg1 > 0), cost: 1

		10-arg1 > 0 [0]: montonic decrease yields 11-n2-arg1 > 0
		
		10-arg1 > 0 [1]: eventual increase yields (1 <= 0 /\ 10-arg1 > 0)
		
		Replacement map: {10-arg1 > 0 -> 11-n2-arg1 > 0}

	Trace

	9[T], 11[(-1+n2 >= 0 /\ 11-n2-arg1 > 0)]
	
	Blocked

	[{}, {}, {11[T]}]

Step with 6

	Trace

	9[T], 11[(-1+n2 >= 0 /\ 11-n2-arg1 > 0)], 6[(-10+arg1 < 0)]
	
	Blocked

	[{}, {}, {11[T]}, {}]

Step with 8

	Trace

	9[T], 11[(-1+n2 >= 0 /\ 11-n2-arg1 > 0)], 6[(-10+arg1 < 0)], 8[(-12+arg2 < 0)]
	
	Blocked

	[{}, {}, {11[T]}, {7[T]}, {}]

Covered

	Trace

	9[T], 11[(-1+n2 >= 0 /\ 11-n2-arg1 > 0)], 6[(-10+arg1 < 0)]
	
	Blocked

	[{}, {}, {11[T]}, {7[T], 8[T]}]

Step with 10

	Trace

	9[T], 11[(-1+n2 >= 0 /\ 11-n2-arg1 > 0)], 6[(-10+arg1 < 0)], 10[(13-arg2-n > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {}, {11[T]}, {7[T], 8[T]}, {10[T]}]

Step with 7

	Trace

	9[T], 11[(-1+n2 >= 0 /\ 11-n2-arg1 > 0)], 6[(-10+arg1 < 0)], 10[(13-arg2-n > 0 /\ -1+n >= 0)], 7[(-11+arg2 > 0)]
	
	Blocked

	[{}, {}, {11[T]}, {7[T], 8[T]}, {10[T]}, {}]

Covered

	Trace

	9[T], 11[(-1+n2 >= 0 /\ 11-n2-arg1 > 0)], 6[(-10+arg1 < 0)], 10[(13-arg2-n > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {}, {11[T]}, {7[T], 8[T]}, {7[T], 10[T]}]

Step with 8

	Trace

	9[T], 11[(-1+n2 >= 0 /\ 11-n2-arg1 > 0)], 6[(-10+arg1 < 0)], 10[(13-arg2-n > 0 /\ -1+n >= 0)], 8[(-12+arg2 < 0)]
	
	Blocked

	[{}, {}, {11[T]}, {7[T], 8[T]}, {7[T], 10[T]}, {}]

Covered

	Trace

	9[T], 11[(-1+n2 >= 0 /\ 11-n2-arg1 > 0)], 6[(-10+arg1 < 0)], 10[(13-arg2-n > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {}, {11[T]}, {7[T], 8[T]}, {7[T], 8[T], 10[T]}]

Backtrack

	Trace

	9[T], 11[(-1+n2 >= 0 /\ 11-n2-arg1 > 0)], 6[(-10+arg1 < 0)]
	
	Blocked

	[{}, {}, {11[T]}, {7[T], 8[T], 10[T]}]

Backtrack

	Trace

	9[T], 11[(-1+n2 >= 0 /\ 11-n2-arg1 > 0)]
	
	Blocked

	[{}, {}, {6[T], 11[T]}]

Backtrack

	Trace

	9[T]
	
	Blocked

	[{}, {11[T]}]

Step with 6

	Trace

	9[T], 6[(-10+arg1 < 0)]
	
	Blocked

	[{}, {11[T]}, {}]

Step with 8

	Trace

	9[T], 6[(-10+arg1 < 0)], 8[(-12+arg2 < 0)]
	
	Blocked

	[{}, {11[T]}, {}, {}]

Covered

	Trace

	9[T], 6[(-10+arg1 < 0)]
	
	Blocked

	[{}, {11[T]}, {8[T]}]

Step with 10

	Trace

	9[T], 6[(-10+arg1 < 0)], 10[(13-arg2-n > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {11[T]}, {8[T]}, {10[T]}]

Step with 7

	Trace

	9[T], 6[(-10+arg1 < 0)], 10[(13-arg2-n > 0 /\ -1+n >= 0)], 7[(-11+arg2 > 0)]
	
	Blocked

	[{}, {11[T]}, {8[T]}, {10[T]}, {}]

Covered

	Trace

	9[T], 6[(-10+arg1 < 0)], 10[(13-arg2-n > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {11[T]}, {8[T]}, {7[T], 10[T]}]

Step with 8

	Trace

	9[T], 6[(-10+arg1 < 0)], 10[(13-arg2-n > 0 /\ -1+n >= 0)], 8[(-12+arg2 < 0)]
	
	Blocked

	[{}, {11[T]}, {8[T]}, {7[T], 10[T]}, {}]

Covered

	Trace

	9[T], 6[(-10+arg1 < 0)], 10[(13-arg2-n > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {11[T]}, {8[T]}, {7[T], 8[T], 10[T]}]

Backtrack

	Trace

	9[T], 6[(-10+arg1 < 0)]
	
	Blocked

	[{}, {11[T]}, {8[T], 10[T]}]

Backtrack

	Trace

	9[T]
	
	Blocked

	[{}, {6[T], 11[T]}]

Backtrack

	Trace

	Blocked

	[{9[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
