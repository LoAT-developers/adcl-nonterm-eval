YES

Solver Timeout: 4
Global Timeout: 300
No parsing errors!
Init Location: 0
Transitions:
<l0, l4, true>
<l1, l2, (undef2 > ~(1)) /\ (arg2 > ~(1)) /\ (undef3 > ~(1)) /\ (undef1 > ~(1)) /\ (arg1 > 0), par{arg1 -> undef1, arg2 -> undef2, arg3 -> undef3}>
<l2, l3, (arg3 < arg2)>
<l2, l3, (arg2 <= arg3) /\ (arg1 > arg3)>
<l3, l2, (arg3 < arg2), par{arg2 -> (arg2 - 1)}>
<l3, l2, (arg3 >= arg2) /\ (arg3 >= arg1)>
<l3, l2, (arg3 >= arg2) /\ (arg3 < arg1), par{arg1 -> (arg1 - 1)}>
<l4, l1, true, par{arg1 -> undef19, arg2 -> undef20, arg3 -> undef21}>

Fresh variables:
undef1, undef2, undef3, undef19, undef20, undef21, 

Undef variables:
undef1, undef2, undef3, undef19, undef20, undef21, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l2, (arg1 = undef1) /\ (arg2 = undef2) /\ (arg3 = undef3) /\ (undef2 > ~(1)) /\ (undef20 > ~(1)) /\ (undef3 > ~(1)) /\ (undef1 > ~(1)) /\ (undef19 > 0)>
<l2, l2, (arg3 < arg2) /\ (arg3 < arg2), par{arg2 -> (arg2 - 1)}>
<l2, l2, (arg2 <= arg3) /\ (arg1 > arg3) /\ (arg3 >= arg2) /\ (arg3 < arg1), par{arg1 -> (arg1 - 1)}>

Fresh variables:
undef1, undef2, undef3, undef19, undef20, undef21, 

Undef variables:
undef1, undef2, undef3, undef19, undef20, undef21, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l2, l2, 1 + arg3 <= arg2, {arg2 -> -1 + arg2, rest remain the same}>
<l2, l2, 1 + arg3 <= arg1 /\ arg2 <= arg3, {arg1 -> -1 + arg1, rest remain the same}>
Variables:
arg2, arg3, arg1

Precedence: 
Graph 0

Graph 1
<l0, l2, 1 <= undef19 /\ 0 <= undef1 /\ 0 <= undef2 /\ 0 <= undef3 /\ 0 <= undef20 /\ arg1 = undef1 /\ arg2 = undef2 /\ arg3 = undef3, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 2 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.003401

Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000905s
[33mRanking function: [36m-1 + arg1 - arg3[0m
New Graphs: 
Transitions:
<l2, l2, 1 + arg3 <= arg2, {arg2 -> -1 + arg2, rest remain the same}>
Variables:
arg2, arg3
Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000394s
[33mRanking function: [36m-1 + arg2 - arg3[0m
New Graphs: 
[32mProgram Terminates[0m
