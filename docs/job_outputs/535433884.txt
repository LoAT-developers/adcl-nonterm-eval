WORST_CASE(Omega(0),?)

Initial ITS
Start location: __init
   0: f1_0_main_Load -> f115_0_loop_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2 > 0 /\ -arg1P0 == 0 /\ arg1 > 0 /\ -arg2P0+arg2 == 0), cost: 1
   1: f115_0_loop_LE -> f115_0_loop_LE : arg2'=arg2P1, arg1'=arg1P1, (1-arg1P1 == 0 /\ 1-arg2 == 0 /\ 2-arg2P1 == 0), cost: 1
   2: f115_0_loop_LE -> f115_0_loop_LE : arg2'=arg2P2, arg1'=arg1P2, (1-arg1P2 == 0 /\ -1+arg2 > 0 /\ -10+arg2 < 0 /\ 1-arg1 == 0 /\ 1+arg2-arg2P2 == 0), cost: 1
   3: f115_0_loop_LE -> f115_0_loop_LE : arg2'=arg2P3, arg1'=arg1P3, (-1+arg2-arg2P3 == 0 /\ -arg1P3 == 0 /\ -1+arg2 > 0 /\ -arg1 == 0 /\ -10+arg2 < 0), cost: 1
   4: f115_0_loop_LE -> f115_0_loop_LE : arg2'=arg2P4, arg1'=arg1P4, (1+arg2-arg2P4 == 0 /\ 1-arg1P4 == 0 /\ -10+arg2 > 0 /\ 1-arg1 == 0), cost: 1
   5: f115_0_loop_LE -> f115_0_loop_LE : arg2'=arg2P5, arg1'=arg1P5, (-1+arg2-arg2P5 == 0 /\ -arg1 == 0 /\ -10+arg2 > 0 /\ -arg1P5 == 0), cost: 1
   6: f115_0_loop_LE -> f115_0_loop_LE : arg2'=arg2P6, arg1'=arg1P6, (9-arg2P6 == 0 /\ 10-arg2 == 0 /\ -arg1P6 == 0), cost: 1
   7: __init -> f1_0_main_Load : arg2'=arg2P7, arg1'=arg1P7, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_Load -> f115_0_loop_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2 > 0 /\ -arg1P0 == 0 /\ arg1 > 0 /\ -arg2P0+arg2 == 0), cost: 1
New rule:
f1_0_main_Load -> f115_0_loop_LE : arg1'=0, (1+arg2 > 0 /\ arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f115_0_loop_LE -> f115_0_loop_LE : arg2'=arg2P1, arg1'=arg1P1, (1-arg1P1 == 0 /\ 1-arg2 == 0 /\ 2-arg2P1 == 0), cost: 1
New rule:
f115_0_loop_LE -> f115_0_loop_LE : arg2'=2, arg1'=1, -1+arg2 == 0, cost: 1

Applied preprocessing
Original rule:
f115_0_loop_LE -> f115_0_loop_LE : arg2'=arg2P2, arg1'=arg1P2, (1-arg1P2 == 0 /\ -1+arg2 > 0 /\ -10+arg2 < 0 /\ 1-arg1 == 0 /\ 1+arg2-arg2P2 == 0), cost: 1
New rule:
f115_0_loop_LE -> f115_0_loop_LE : arg2'=1+arg2, arg1'=1, (10-arg2 > 0 /\ -1+arg2 > 0 /\ -1+arg1 == 0), cost: 1

Applied preprocessing
Original rule:
f115_0_loop_LE -> f115_0_loop_LE : arg2'=arg2P3, arg1'=arg1P3, (-1+arg2-arg2P3 == 0 /\ -arg1P3 == 0 /\ -1+arg2 > 0 /\ -arg1 == 0 /\ -10+arg2 < 0), cost: 1
New rule:
f115_0_loop_LE -> f115_0_loop_LE : arg2'=-1+arg2, arg1'=0, (10-arg2 > 0 /\ arg1 == 0 /\ -1+arg2 > 0), cost: 1

Applied preprocessing
Original rule:
f115_0_loop_LE -> f115_0_loop_LE : arg2'=arg2P4, arg1'=arg1P4, (1+arg2-arg2P4 == 0 /\ 1-arg1P4 == 0 /\ -10+arg2 > 0 /\ 1-arg1 == 0), cost: 1
New rule:
f115_0_loop_LE -> f115_0_loop_LE : arg2'=1+arg2, arg1'=1, (-10+arg2 > 0 /\ -1+arg1 == 0), cost: 1

Applied preprocessing
Original rule:
f115_0_loop_LE -> f115_0_loop_LE : arg2'=arg2P5, arg1'=arg1P5, (-1+arg2-arg2P5 == 0 /\ -arg1 == 0 /\ -10+arg2 > 0 /\ -arg1P5 == 0), cost: 1
New rule:
f115_0_loop_LE -> f115_0_loop_LE : arg2'=-1+arg2, arg1'=0, (arg1 == 0 /\ -10+arg2 > 0), cost: 1

Applied preprocessing
Original rule:
f115_0_loop_LE -> f115_0_loop_LE : arg2'=arg2P6, arg1'=arg1P6, (9-arg2P6 == 0 /\ 10-arg2 == 0 /\ -arg1P6 == 0), cost: 1
New rule:
f115_0_loop_LE -> f115_0_loop_LE : arg2'=9, arg1'=0, -10+arg2 == 0, cost: 1

Simplified rules
Start location: __init
   8: f1_0_main_Load -> f115_0_loop_LE : arg1'=0, (1+arg2 > 0 /\ arg1 > 0), cost: 1
   9: f115_0_loop_LE -> f115_0_loop_LE : arg2'=2, arg1'=1, -1+arg2 == 0, cost: 1
  10: f115_0_loop_LE -> f115_0_loop_LE : arg2'=1+arg2, arg1'=1, (10-arg2 > 0 /\ -1+arg2 > 0 /\ -1+arg1 == 0), cost: 1
  11: f115_0_loop_LE -> f115_0_loop_LE : arg2'=-1+arg2, arg1'=0, (10-arg2 > 0 /\ arg1 == 0 /\ -1+arg2 > 0), cost: 1
  12: f115_0_loop_LE -> f115_0_loop_LE : arg2'=1+arg2, arg1'=1, (-10+arg2 > 0 /\ -1+arg1 == 0), cost: 1
  13: f115_0_loop_LE -> f115_0_loop_LE : arg2'=-1+arg2, arg1'=0, (arg1 == 0 /\ -10+arg2 > 0), cost: 1
  14: f115_0_loop_LE -> f115_0_loop_LE : arg2'=9, arg1'=0, -10+arg2 == 0, cost: 1
   7: __init -> f1_0_main_Load : arg2'=arg2P7, arg1'=arg1P7, TRUE, cost: 1


Applied acceleration
Original rule:
f115_0_loop_LE -> f115_0_loop_LE : arg2'=1+arg2, arg1'=1, (10-arg2 > 0 /\ -1+arg2 > 0 /\ -1+arg1 == 0), cost: 1
New rule:
f115_0_loop_LE -> f115_0_loop_LE : arg2'=arg2+n0, arg1'=1, (-1+n0 >= 0 /\ -1+arg2 > 0 /\ 11-arg2-n0 > 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0), cost: n0
Sub-proof via acceration calculus written to file:///tmp/tmpnam_kpPMMa.txt

Applied instantiation
Original rule:
f115_0_loop_LE -> f115_0_loop_LE : arg2'=arg2+n0, arg1'=1, (-1+n0 >= 0 /\ -1+arg2 > 0 /\ 11-arg2-n0 > 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0), cost: n0
New rule:
f115_0_loop_LE -> f115_0_loop_LE : arg2'=10, arg1'=1, (1 > 0 /\ -1+arg2 > 0 /\ 9-arg2 >= 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0), cost: 10-arg2

Applied acceleration
Original rule:
f115_0_loop_LE -> f115_0_loop_LE : arg2'=-1+arg2, arg1'=0, (10-arg2 > 0 /\ arg1 == 0 /\ -1+arg2 > 0), cost: 1
New rule:
f115_0_loop_LE -> f115_0_loop_LE : arg2'=arg2-n1, arg1'=0, (-1+n1 >= 0 /\ 10-arg2 > 0 /\ arg1 >= 0 /\ -arg1 >= 0 /\ arg2-n1 > 0), cost: n1
Sub-proof via acceration calculus written to file:///tmp/tmpnam_hhnpll.txt

Applied instantiation
Original rule:
f115_0_loop_LE -> f115_0_loop_LE : arg2'=arg2-n1, arg1'=0, (-1+n1 >= 0 /\ 10-arg2 > 0 /\ arg1 >= 0 /\ -arg1 >= 0 /\ arg2-n1 > 0), cost: n1
New rule:
f115_0_loop_LE -> f115_0_loop_LE : arg2'=1, arg1'=0, (1 > 0 /\ 10-arg2 > 0 /\ -2+arg2 >= 0 /\ arg1 >= 0 /\ -arg1 >= 0), cost: -1+arg2

Applied nonterm
Original rule:
f115_0_loop_LE -> f115_0_loop_LE : arg2'=1+arg2, arg1'=1, (-10+arg2 > 0 /\ -1+arg1 == 0), cost: 1
New rule:
f115_0_loop_LE -> [3] : (-10+arg2 > 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0 /\ -1+n2 >= 0), cost: NONTERM
Sub-proof via acceration calculus written to file:///tmp/tmpnam_AdlJbh.txt

Applied acceleration
Original rule:
f115_0_loop_LE -> f115_0_loop_LE : arg2'=-1+arg2, arg1'=0, (arg1 == 0 /\ -10+arg2 > 0), cost: 1
New rule:
f115_0_loop_LE -> f115_0_loop_LE : arg2'=arg2-n3, arg1'=0, (-1+n3 >= 0 /\ arg1 >= 0 /\ -9+arg2-n3 > 0 /\ -arg1 >= 0), cost: n3
Sub-proof via acceration calculus written to file:///tmp/tmpnam_HnLCLI.txt

Applied instantiation
Original rule:
f115_0_loop_LE -> f115_0_loop_LE : arg2'=arg2-n3, arg1'=0, (-1+n3 >= 0 /\ arg1 >= 0 /\ -9+arg2-n3 > 0 /\ -arg1 >= 0), cost: n3
New rule:
f115_0_loop_LE -> f115_0_loop_LE : arg2'=10, arg1'=0, (1 > 0 /\ -11+arg2 >= 0 /\ arg1 >= 0 /\ -arg1 >= 0), cost: -10+arg2

Applied simplification
Original rule:
f115_0_loop_LE -> f115_0_loop_LE : arg2'=10, arg1'=1, (1 > 0 /\ -1+arg2 > 0 /\ 9-arg2 >= 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0), cost: 10-arg2
New rule:
f115_0_loop_LE -> f115_0_loop_LE : arg2'=10, arg1'=1, (-9+arg2 <= 0 /\ -1+arg2 > 0 /\ -1+arg1 <= 0 /\ -1+arg1 >= 0), cost: 10-arg2

Applied simplification
Original rule:
f115_0_loop_LE -> f115_0_loop_LE : arg2'=1, arg1'=0, (1 > 0 /\ 10-arg2 > 0 /\ -2+arg2 >= 0 /\ arg1 >= 0 /\ -arg1 >= 0), cost: -1+arg2
New rule:
f115_0_loop_LE -> f115_0_loop_LE : arg2'=1, arg1'=0, (10-arg2 > 0 /\ -2+arg2 >= 0 /\ arg1 <= 0 /\ arg1 >= 0), cost: -1+arg2

Applied simplification
Original rule:
f115_0_loop_LE -> [3] : (-10+arg2 > 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0 /\ -1+n2 >= 0), cost: NONTERM
New rule:
f115_0_loop_LE -> [3] : (-10+arg2 > 0 /\ -1+arg1 <= 0 /\ -1+arg1 >= 0 /\ -1+n2 >= 0), cost: NONTERM

Applied simplification
Original rule:
f115_0_loop_LE -> f115_0_loop_LE : arg2'=10, arg1'=0, (1 > 0 /\ -11+arg2 >= 0 /\ arg1 >= 0 /\ -arg1 >= 0), cost: -10+arg2
New rule:
f115_0_loop_LE -> f115_0_loop_LE : arg2'=10, arg1'=0, (-11+arg2 >= 0 /\ arg1 <= 0 /\ arg1 >= 0), cost: -10+arg2

Applied deletion
Removed the following rules: 10 11 12 13

Accelerated simple loops
Start location: __init
   8: f1_0_main_Load -> f115_0_loop_LE : arg1'=0, (1+arg2 > 0 /\ arg1 > 0), cost: 1
   9: f115_0_loop_LE -> f115_0_loop_LE : arg2'=2, arg1'=1, -1+arg2 == 0, cost: 1
  14: f115_0_loop_LE -> f115_0_loop_LE : arg2'=9, arg1'=0, -10+arg2 == 0, cost: 1
  19: f115_0_loop_LE -> f115_0_loop_LE : arg2'=10, arg1'=1, (-9+arg2 <= 0 /\ -1+arg2 > 0 /\ -1+arg1 <= 0 /\ -1+arg1 >= 0), cost: 10-arg2
  20: f115_0_loop_LE -> f115_0_loop_LE : arg2'=1, arg1'=0, (10-arg2 > 0 /\ -2+arg2 >= 0 /\ arg1 <= 0 /\ arg1 >= 0), cost: -1+arg2
  21: f115_0_loop_LE -> [3] : (-10+arg2 > 0 /\ -1+arg1 <= 0 /\ -1+arg1 >= 0 /\ -1+n2 >= 0), cost: NONTERM
  22: f115_0_loop_LE -> f115_0_loop_LE : arg2'=10, arg1'=0, (-11+arg2 >= 0 /\ arg1 <= 0 /\ arg1 >= 0), cost: -10+arg2
   7: __init -> f1_0_main_Load : arg2'=arg2P7, arg1'=arg1P7, TRUE, cost: 1


Applied chaining
First rule:
f1_0_main_Load -> f115_0_loop_LE : arg1'=0, (1+arg2 > 0 /\ arg1 > 0), cost: 1
Second rule:
f115_0_loop_LE -> f115_0_loop_LE : arg2'=2, arg1'=1, -1+arg2 == 0, cost: 1
New rule:
f1_0_main_Load -> f115_0_loop_LE : arg2'=2, arg1'=1, (arg1 > 0 /\ -1+arg2 == 0), cost: 2

Applied chaining
First rule:
f1_0_main_Load -> f115_0_loop_LE : arg1'=0, (1+arg2 > 0 /\ arg1 > 0), cost: 1
Second rule:
f115_0_loop_LE -> f115_0_loop_LE : arg2'=9, arg1'=0, -10+arg2 == 0, cost: 1
New rule:
f1_0_main_Load -> f115_0_loop_LE : arg2'=9, arg1'=0, (arg1 > 0 /\ -10+arg2 == 0), cost: 2

Applied chaining
First rule:
f1_0_main_Load -> f115_0_loop_LE : arg1'=0, (1+arg2 > 0 /\ arg1 > 0), cost: 1
Second rule:
f115_0_loop_LE -> f115_0_loop_LE : arg2'=1, arg1'=0, (10-arg2 > 0 /\ -2+arg2 >= 0 /\ arg1 <= 0 /\ arg1 >= 0), cost: -1+arg2
New rule:
f1_0_main_Load -> f115_0_loop_LE : arg2'=1, arg1'=0, (10-arg2 > 0 /\ -2+arg2 >= 0 /\ arg1 > 0), cost: arg2

Applied chaining
First rule:
f1_0_main_Load -> f115_0_loop_LE : arg1'=0, (1+arg2 > 0 /\ arg1 > 0), cost: 1
Second rule:
f115_0_loop_LE -> f115_0_loop_LE : arg2'=10, arg1'=0, (-11+arg2 >= 0 /\ arg1 <= 0 /\ arg1 >= 0), cost: -10+arg2
New rule:
f1_0_main_Load -> f115_0_loop_LE : arg2'=10, arg1'=0, (-11+arg2 >= 0 /\ arg1 > 0), cost: -9+arg2

Applied deletion
Removed the following rules: 9 14 19 20 21 22

Chained accelerated rules with incoming rules
Start location: __init
   8: f1_0_main_Load -> f115_0_loop_LE : arg1'=0, (1+arg2 > 0 /\ arg1 > 0), cost: 1
  23: f1_0_main_Load -> f115_0_loop_LE : arg2'=2, arg1'=1, (arg1 > 0 /\ -1+arg2 == 0), cost: 2
  24: f1_0_main_Load -> f115_0_loop_LE : arg2'=9, arg1'=0, (arg1 > 0 /\ -10+arg2 == 0), cost: 2
  25: f1_0_main_Load -> f115_0_loop_LE : arg2'=1, arg1'=0, (10-arg2 > 0 /\ -2+arg2 >= 0 /\ arg1 > 0), cost: arg2
  26: f1_0_main_Load -> f115_0_loop_LE : arg2'=10, arg1'=0, (-11+arg2 >= 0 /\ arg1 > 0), cost: -9+arg2
   7: __init -> f1_0_main_Load : arg2'=arg2P7, arg1'=arg1P7, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
  <empty>


Computing asymptotic complexity

Proved the following lower bound
Complexity:  Unknown
Cpx degree: ?

Solved cost: 0
Rule cost:   0

