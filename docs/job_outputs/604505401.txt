NO

Initial ITS
Start location: __init
   0: f1_0_main_Load -> f53_0_loop_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2 > 0 /\ arg1 > 0 /\ arg2-arg1P0 == 0), cost: 1
   1: f53_0_loop_LE -> f74_0_loop_NE : arg2'=arg2P1, arg1'=arg1P1, (-21+arg1 < 0 /\ -10+arg1 > 0 /\ -1+arg1-arg1P1 == 0), cost: 1
   2: f53_0_loop_LE -> f74_0_loop_NE : arg2'=arg2P2, arg1'=arg1P2, (-20+arg1 > 0 /\ 1+arg1-arg1P2 == 0), cost: 1
   3: f74_0_loop_NE -> f53_0_loop_LE : arg2'=arg2P3, arg1'=arg1P3, (-30+arg1 < 0 /\ -arg1P3+arg1 == 0), cost: 1
   4: f74_0_loop_NE -> f53_0_loop_LE : arg2'=arg2P4, arg1'=arg1P4, (-30+arg1 > 0 /\ arg1-arg1P4 == 0), cost: 1
   5: __init -> f1_0_main_Load : arg2'=arg2P5, arg1'=arg1P5, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_Load -> f53_0_loop_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2 > 0 /\ arg1 > 0 /\ arg2-arg1P0 == 0), cost: 1
New rule:
f1_0_main_Load -> f53_0_loop_LE : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f53_0_loop_LE -> f74_0_loop_NE : arg2'=arg2P1, arg1'=arg1P1, (-21+arg1 < 0 /\ -10+arg1 > 0 /\ -1+arg1-arg1P1 == 0), cost: 1
New rule:
f53_0_loop_LE -> f74_0_loop_NE : arg2'=arg2P1, arg1'=-1+arg1, (21-arg1 > 0 /\ -10+arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f53_0_loop_LE -> f74_0_loop_NE : arg2'=arg2P2, arg1'=arg1P2, (-20+arg1 > 0 /\ 1+arg1-arg1P2 == 0), cost: 1
New rule:
f53_0_loop_LE -> f74_0_loop_NE : arg2'=arg2P2, arg1'=1+arg1, -20+arg1 > 0, cost: 1

Applied preprocessing
Original rule:
f74_0_loop_NE -> f53_0_loop_LE : arg2'=arg2P3, arg1'=arg1P3, (-30+arg1 < 0 /\ -arg1P3+arg1 == 0), cost: 1
New rule:
f74_0_loop_NE -> f53_0_loop_LE : arg2'=arg2P3, 30-arg1 > 0, cost: 1

Applied preprocessing
Original rule:
f74_0_loop_NE -> f53_0_loop_LE : arg2'=arg2P4, arg1'=arg1P4, (-30+arg1 > 0 /\ arg1-arg1P4 == 0), cost: 1
New rule:
f74_0_loop_NE -> f53_0_loop_LE : arg2'=arg2P4, -30+arg1 > 0, cost: 1

Simplified rules
Start location: __init
   6: f1_0_main_Load -> f53_0_loop_LE : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
   7: f53_0_loop_LE -> f74_0_loop_NE : arg2'=arg2P1, arg1'=-1+arg1, (21-arg1 > 0 /\ -10+arg1 > 0), cost: 1
   8: f53_0_loop_LE -> f74_0_loop_NE : arg2'=arg2P2, arg1'=1+arg1, -20+arg1 > 0, cost: 1
   9: f74_0_loop_NE -> f53_0_loop_LE : arg2'=arg2P3, 30-arg1 > 0, cost: 1
  10: f74_0_loop_NE -> f53_0_loop_LE : arg2'=arg2P4, -30+arg1 > 0, cost: 1
   5: __init -> f1_0_main_Load : arg2'=arg2P5, arg1'=arg1P5, TRUE, cost: 1


Eliminating location f1_0_main_Load by chaining:

Applied chaining
First rule:
__init -> f1_0_main_Load : arg2'=arg2P5, arg1'=arg1P5, TRUE, cost: 1
Second rule:
f1_0_main_Load -> f53_0_loop_LE : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
New rule:
__init -> f53_0_loop_LE : arg2'=arg2P0, arg1'=arg2P5, (1+arg2P5 > 0 /\ arg1P5 > 0), cost: 2

Applied deletion
Removed the following rules: 5 6

Eliminated locations on linear paths
Start location: __init
   7: f53_0_loop_LE -> f74_0_loop_NE : arg2'=arg2P1, arg1'=-1+arg1, (21-arg1 > 0 /\ -10+arg1 > 0), cost: 1
   8: f53_0_loop_LE -> f74_0_loop_NE : arg2'=arg2P2, arg1'=1+arg1, -20+arg1 > 0, cost: 1
   9: f74_0_loop_NE -> f53_0_loop_LE : arg2'=arg2P3, 30-arg1 > 0, cost: 1
  10: f74_0_loop_NE -> f53_0_loop_LE : arg2'=arg2P4, -30+arg1 > 0, cost: 1
  11: __init -> f53_0_loop_LE : arg2'=arg2P0, arg1'=arg2P5, (1+arg2P5 > 0 /\ arg1P5 > 0), cost: 2


Eliminating location f74_0_loop_NE by chaining:

Applied chaining
First rule:
f53_0_loop_LE -> f74_0_loop_NE : arg2'=arg2P1, arg1'=-1+arg1, (21-arg1 > 0 /\ -10+arg1 > 0), cost: 1
Second rule:
f74_0_loop_NE -> f53_0_loop_LE : arg2'=arg2P3, 30-arg1 > 0, cost: 1
New rule:
f53_0_loop_LE -> f53_0_loop_LE : arg2'=arg2P3, arg1'=-1+arg1, (31-arg1 > 0 /\ 21-arg1 > 0 /\ -10+arg1 > 0), cost: 2

Applied simplification
Original rule:
f53_0_loop_LE -> f53_0_loop_LE : arg2'=arg2P3, arg1'=-1+arg1, (31-arg1 > 0 /\ 21-arg1 > 0 /\ -10+arg1 > 0), cost: 2
New rule:
f53_0_loop_LE -> f53_0_loop_LE : arg2'=arg2P3, arg1'=-1+arg1, (21-arg1 > 0 /\ -10+arg1 > 0), cost: 2

Applied chaining
First rule:
f53_0_loop_LE -> f74_0_loop_NE : arg2'=arg2P2, arg1'=1+arg1, -20+arg1 > 0, cost: 1
Second rule:
f74_0_loop_NE -> f53_0_loop_LE : arg2'=arg2P3, 30-arg1 > 0, cost: 1
New rule:
f53_0_loop_LE -> f53_0_loop_LE : arg2'=arg2P3, arg1'=1+arg1, (-20+arg1 > 0 /\ 29-arg1 > 0), cost: 2

Applied chaining
First rule:
f53_0_loop_LE -> f74_0_loop_NE : arg2'=arg2P2, arg1'=1+arg1, -20+arg1 > 0, cost: 1
Second rule:
f74_0_loop_NE -> f53_0_loop_LE : arg2'=arg2P4, -30+arg1 > 0, cost: 1
New rule:
f53_0_loop_LE -> f53_0_loop_LE : arg2'=arg2P4, arg1'=1+arg1, (-29+arg1 > 0 /\ -20+arg1 > 0), cost: 2

Applied simplification
Original rule:
f53_0_loop_LE -> f53_0_loop_LE : arg2'=arg2P4, arg1'=1+arg1, (-29+arg1 > 0 /\ -20+arg1 > 0), cost: 2
New rule:
f53_0_loop_LE -> f53_0_loop_LE : arg2'=arg2P4, arg1'=1+arg1, -29+arg1 > 0, cost: 2

Applied deletion
Removed the following rules: 7 8 9 10

Eliminated locations on tree-shaped paths
Start location: __init
  12: f53_0_loop_LE -> f53_0_loop_LE : arg2'=arg2P3, arg1'=-1+arg1, (21-arg1 > 0 /\ -10+arg1 > 0), cost: 2
  13: f53_0_loop_LE -> f53_0_loop_LE : arg2'=arg2P3, arg1'=1+arg1, (-20+arg1 > 0 /\ 29-arg1 > 0), cost: 2
  14: f53_0_loop_LE -> f53_0_loop_LE : arg2'=arg2P4, arg1'=1+arg1, -29+arg1 > 0, cost: 2
  11: __init -> f53_0_loop_LE : arg2'=arg2P0, arg1'=arg2P5, (1+arg2P5 > 0 /\ arg1P5 > 0), cost: 2


Applied acceleration
Original rule:
f53_0_loop_LE -> f53_0_loop_LE : arg2'=arg2P3, arg1'=-1+arg1, (21-arg1 > 0 /\ -10+arg1 > 0), cost: 2
New rule:
f53_0_loop_LE -> f53_0_loop_LE : arg2'=arg2P3, arg1'=arg1-n, (-9+arg1-n > 0 /\ -1+n >= 0 /\ 21-arg1 > 0), cost: 2*n
Sub-proof via acceration calculus written to file:///tmp/tmpnam_FlHOKH.txt

Applied instantiation
Original rule:
f53_0_loop_LE -> f53_0_loop_LE : arg2'=arg2P3, arg1'=arg1-n, (-9+arg1-n > 0 /\ -1+n >= 0 /\ 21-arg1 > 0), cost: 2*n
New rule:
f53_0_loop_LE -> f53_0_loop_LE : arg2'=arg2P3, arg1'=10, (1 > 0 /\ -11+arg1 >= 0 /\ 21-arg1 > 0), cost: -20+2*arg1

Applied acceleration
Original rule:
f53_0_loop_LE -> f53_0_loop_LE : arg2'=arg2P3, arg1'=1+arg1, (-20+arg1 > 0 /\ 29-arg1 > 0), cost: 2
New rule:
f53_0_loop_LE -> f53_0_loop_LE : arg2'=arg2P3, arg1'=arg1+n0, (30-arg1-n0 > 0 /\ -20+arg1 > 0 /\ -1+n0 >= 0), cost: 2*n0
Sub-proof via acceration calculus written to file:///tmp/tmpnam_KOCBOk.txt

Applied instantiation
Original rule:
f53_0_loop_LE -> f53_0_loop_LE : arg2'=arg2P3, arg1'=arg1+n0, (30-arg1-n0 > 0 /\ -20+arg1 > 0 /\ -1+n0 >= 0), cost: 2*n0
New rule:
f53_0_loop_LE -> f53_0_loop_LE : arg2'=arg2P3, arg1'=29, (1 > 0 /\ -20+arg1 > 0 /\ 28-arg1 >= 0), cost: 58-2*arg1

Applied nonterm
Original rule:
f53_0_loop_LE -> f53_0_loop_LE : arg2'=arg2P4, arg1'=1+arg1, -29+arg1 > 0, cost: 2
New rule:
f53_0_loop_LE -> [4] : (-29+arg1 > 0 /\ -1+n1 >= 0), cost: NONTERM
Sub-proof via acceration calculus written to file:///tmp/tmpnam_CIkmKK.txt

Applied simplification
Original rule:
f53_0_loop_LE -> f53_0_loop_LE : arg2'=arg2P3, arg1'=10, (1 > 0 /\ -11+arg1 >= 0 /\ 21-arg1 > 0), cost: -20+2*arg1
New rule:
f53_0_loop_LE -> f53_0_loop_LE : arg2'=arg2P3, arg1'=10, (-11+arg1 >= 0 /\ 21-arg1 > 0), cost: -20+2*arg1

Applied simplification
Original rule:
f53_0_loop_LE -> f53_0_loop_LE : arg2'=arg2P3, arg1'=29, (1 > 0 /\ -20+arg1 > 0 /\ 28-arg1 >= 0), cost: 58-2*arg1
New rule:
f53_0_loop_LE -> f53_0_loop_LE : arg2'=arg2P3, arg1'=29, (-20+arg1 > 0 /\ -28+arg1 <= 0), cost: 58-2*arg1

Applied deletion
Removed the following rules: 12 13 14

Accelerated simple loops
Start location: __init
  17: f53_0_loop_LE -> [4] : (-29+arg1 > 0 /\ -1+n1 >= 0), cost: NONTERM
  18: f53_0_loop_LE -> f53_0_loop_LE : arg2'=arg2P3, arg1'=10, (-11+arg1 >= 0 /\ 21-arg1 > 0), cost: -20+2*arg1
  19: f53_0_loop_LE -> f53_0_loop_LE : arg2'=arg2P3, arg1'=29, (-20+arg1 > 0 /\ -28+arg1 <= 0), cost: 58-2*arg1
  11: __init -> f53_0_loop_LE : arg2'=arg2P0, arg1'=arg2P5, (1+arg2P5 > 0 /\ arg1P5 > 0), cost: 2


Applied chaining
First rule:
__init -> f53_0_loop_LE : arg2'=arg2P0, arg1'=arg2P5, (1+arg2P5 > 0 /\ arg1P5 > 0), cost: 2
Second rule:
f53_0_loop_LE -> [4] : (-29+arg1 > 0 /\ -1+n1 >= 0), cost: NONTERM
New rule:
__init -> [4] : TRUE, cost: NONTERM

Applied chaining
First rule:
__init -> f53_0_loop_LE : arg2'=arg2P0, arg1'=arg2P5, (1+arg2P5 > 0 /\ arg1P5 > 0), cost: 2
Second rule:
f53_0_loop_LE -> f53_0_loop_LE : arg2'=arg2P3, arg1'=10, (-11+arg1 >= 0 /\ 21-arg1 > 0), cost: -20+2*arg1
New rule:
__init -> f53_0_loop_LE : arg2'=arg2P3, arg1'=10, (21-arg2P5 > 0 /\ -11+arg2P5 >= 0), cost: -18+2*arg2P5

Applied chaining
First rule:
__init -> f53_0_loop_LE : arg2'=arg2P0, arg1'=arg2P5, (1+arg2P5 > 0 /\ arg1P5 > 0), cost: 2
Second rule:
f53_0_loop_LE -> f53_0_loop_LE : arg2'=arg2P3, arg1'=29, (-20+arg1 > 0 /\ -28+arg1 <= 0), cost: 58-2*arg1
New rule:
__init -> f53_0_loop_LE : arg2'=arg2P3, arg1'=29, (-20+arg2P5 > 0 /\ -28+arg2P5 <= 0), cost: 60-2*arg2P5

Applied deletion
Removed the following rules: 17 18 19

Chained accelerated rules with incoming rules
Start location: __init
  11: __init -> f53_0_loop_LE : arg2'=arg2P0, arg1'=arg2P5, (1+arg2P5 > 0 /\ arg1P5 > 0), cost: 2
  20: __init -> [4] : TRUE, cost: NONTERM
  21: __init -> f53_0_loop_LE : arg2'=arg2P3, arg1'=10, (21-arg2P5 > 0 /\ -11+arg2P5 >= 0), cost: -18+2*arg2P5
  22: __init -> f53_0_loop_LE : arg2'=arg2P3, arg1'=29, (-20+arg2P5 > 0 /\ -28+arg2P5 <= 0), cost: 60-2*arg2P5


Removed unreachable locations and irrelevant leafs
Start location: __init
  20: __init -> [4] : TRUE, cost: NONTERM


Computing asymptotic complexity
Proved nontermination of rule 20 via SMT.

Proved the following lower bound
Complexity:  Nonterm
Cpx degree: Nonterm

Solved cost: NONTERM
Rule cost:   NONTERM
Rule guard:  TRUE
