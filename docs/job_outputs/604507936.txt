unknown

Initial ITS

Start location: __init
Program variables: arg1 arg2
   0: f1_0_main_Load -> f142_0_main_LE : arg1'=arg1p1, arg2'=arg2p1, (1+arg2 > 0 /\ arg1 > 0 /\ 1+arg1p1 > 0 /\ 1+arg2p1 > 0), cost: 1
   1: f142_0_main_LE -> f153_0_main_LE : arg1'=arg1p2, arg2'=arg2p2, (-arg1p2+arg2 == 0 /\ -arg2p2+arg1 == 0 /\ arg2 > 0), cost: 1
   2: f153_0_main_LE -> f142_0_main_LE : arg1'=arg1p3, arg2'=arg2p3, (-1+arg1-arg2p3 == 0 /\ -arg1p3 == 0 /\ -arg2 == 0), cost: 1
   3: f153_0_main_LE -> f153_0_main_LE : arg1'=arg1p4, arg2'=arg2p4, (-arg1p4+arg1 == 0 /\ -1-arg2p4+arg2 == 0 /\ arg2 > 0), cost: 1
   4: __init -> f1_0_main_Load : arg1'=arg1p5, arg2'=arg2p5, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2
   1: f142_0_main_LE -> f153_0_main_LE : arg1'=arg1p2, arg2'=arg2p2, (-arg1p2+arg2 == 0 /\ -arg2p2+arg1 == 0 /\ arg2 > 0), cost: 1
   2: f153_0_main_LE -> f142_0_main_LE : arg1'=arg1p3, arg2'=arg2p3, (-1+arg1-arg2p3 == 0 /\ -arg1p3 == 0 /\ -arg2 == 0), cost: 1
   3: f153_0_main_LE -> f153_0_main_LE : arg1'=arg1p4, arg2'=arg2p4, (-arg1p4+arg1 == 0 /\ -1-arg2p4+arg2 == 0 /\ arg2 > 0), cost: 1
   5: __init -> f142_0_main_LE : arg1'=arg1p1, arg2'=arg2p1, (1+arg1p1 > 0 /\ 1+arg2p1 > 0 /\ arg1p5 > 0 /\ 1+arg2p5 > 0), cost: 1

	Eliminating location f1_0_main_Load by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_Load : arg1'=arg1p5, arg2'=arg2p5, T, cost: 1
	Second rule:
	f1_0_main_Load -> f142_0_main_LE : arg1'=arg1p1, arg2'=arg2p1, (1+arg2 > 0 /\ arg1 > 0 /\ 1+arg1p1 > 0 /\ 1+arg2p1 > 0), cost: 1
	New rule:
	__init -> f142_0_main_LE : arg1'=arg1p1, arg2'=arg2p1, (1+arg1p1 > 0 /\ 1+arg2p1 > 0 /\ arg1p5 > 0 /\ 1+arg2p5 > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 4

Simplified Transitions

Start location: __init
Program variables: arg1 arg2
   6: f142_0_main_LE -> f153_0_main_LE : arg1'=arg2, arg2'=arg1, arg2 > 0, cost: 1
   7: f153_0_main_LE -> f142_0_main_LE : arg1'=0, arg2'=-1+arg1, -arg2 == 0, cost: 1
   8: f153_0_main_LE -> f153_0_main_LE : arg2'=-1+arg2, arg2 > 0, cost: 1
   9: __init -> f142_0_main_LE : arg1'=arg1p1, arg2'=arg2p1, (1+arg1p1 > 0 /\ 1+arg2p1 > 0), cost: 1

	Propagated Equalities

	Original rule:
	f142_0_main_LE -> f153_0_main_LE : arg1'=arg1p2, arg2'=arg2p2, (-arg1p2+arg2 == 0 /\ -arg2p2+arg1 == 0 /\ arg2 > 0), cost: 1
	New rule:
	f142_0_main_LE -> f153_0_main_LE : arg1'=arg2, arg2'=arg1, (0 == 0 /\ arg2 > 0), cost: 1
	
		propagated equality arg1p2 = arg2
		
		propagated equality arg2p2 = arg1
		
	Simplified Guard

	Original rule:
	f142_0_main_LE -> f153_0_main_LE : arg1'=arg2, arg2'=arg1, (0 == 0 /\ arg2 > 0), cost: 1
	New rule:
	f142_0_main_LE -> f153_0_main_LE : arg1'=arg2, arg2'=arg1, arg2 > 0, cost: 1
	
	Propagated Equalities

	Original rule:
	f153_0_main_LE -> f142_0_main_LE : arg1'=arg1p3, arg2'=arg2p3, (-1+arg1-arg2p3 == 0 /\ -arg1p3 == 0 /\ -arg2 == 0), cost: 1
	New rule:
	f153_0_main_LE -> f142_0_main_LE : arg1'=0, arg2'=-1+arg1, (0 == 0 /\ -arg2 == 0), cost: 1
	
		propagated equality arg2p3 = -1+arg1
		
		propagated equality arg1p3 = 0
		
	Simplified Guard

	Original rule:
	f153_0_main_LE -> f142_0_main_LE : arg1'=0, arg2'=-1+arg1, (0 == 0 /\ -arg2 == 0), cost: 1
	New rule:
	f153_0_main_LE -> f142_0_main_LE : arg1'=0, arg2'=-1+arg1, -arg2 == 0, cost: 1
	
	Propagated Equalities

	Original rule:
	f153_0_main_LE -> f153_0_main_LE : arg1'=arg1p4, arg2'=arg2p4, (-arg1p4+arg1 == 0 /\ -1-arg2p4+arg2 == 0 /\ arg2 > 0), cost: 1
	New rule:
	f153_0_main_LE -> f153_0_main_LE : arg1'=arg1, arg2'=-1+arg2, (0 == 0 /\ arg2 > 0), cost: 1
	
		propagated equality arg1p4 = arg1
		
		propagated equality arg2p4 = -1+arg2
		
	Simplified Guard

	Original rule:
	f153_0_main_LE -> f153_0_main_LE : arg1'=arg1, arg2'=-1+arg2, (0 == 0 /\ arg2 > 0), cost: 1
	New rule:
	f153_0_main_LE -> f153_0_main_LE : arg1'=arg1, arg2'=-1+arg2, arg2 > 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	f153_0_main_LE -> f153_0_main_LE : arg1'=arg1, arg2'=-1+arg2, arg2 > 0, cost: 1
	New rule:
	f153_0_main_LE -> f153_0_main_LE : arg2'=-1+arg2, arg2 > 0, cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	__init -> f142_0_main_LE : arg1'=arg1p1, arg2'=arg2p1, (1+arg1p1 > 0 /\ 1+arg2p1 > 0 /\ arg1p5 > 0 /\ 1+arg2p5 > 0), cost: 1
	New rule:
	__init -> f142_0_main_LE : arg1'=arg1p1, arg2'=arg2p1, (1+arg1p1 > 0 /\ 1+arg2p1 > 0), cost: 1

Step with 9

	Trace

	9[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)]
	
	Blocked

	[{}, {}]

Step with 6

	Trace

	9[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 6[(arg2 > 0)]
	
	Blocked

	[{}, {}, {}]

Step with 7

	Trace

	9[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 6[(arg2 > 0)], 7[(-arg2 == 0)]
	
	Blocked

	[{}, {}, {}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2
   6: f142_0_main_LE -> f153_0_main_LE : arg1'=arg2, arg2'=arg1, arg2 > 0, cost: 1
  10: f142_0_main_LE -> f142_0_main_LE : arg1'=0, arg2'=-n+arg2, (-arg1 >= 0 /\ arg1 >= 0 /\ -1+n >= 0 /\ 1-n+arg2 > 0), cost: 1
   7: f153_0_main_LE -> f142_0_main_LE : arg1'=0, arg2'=-1+arg1, -arg2 == 0, cost: 1
   8: f153_0_main_LE -> f153_0_main_LE : arg2'=-1+arg2, arg2 > 0, cost: 1
   9: __init -> f142_0_main_LE : arg1'=arg1p1, arg2'=arg2p1, (1+arg1p1 > 0 /\ 1+arg2p1 > 0), cost: 1

	Loop Acceleration

	Original rule:
	f142_0_main_LE -> f142_0_main_LE : arg1'=0, arg2'=-1+arg2, (-arg1 == 0 /\ arg2 > 0), cost: 1
	New rule:
	f142_0_main_LE -> f142_0_main_LE : arg1'=0, arg2'=-n+arg2, (-arg1 >= 0 /\ arg1 >= 0 /\ -1+n >= 0 /\ 1-n+arg2 > 0), cost: 1

		-arg1 >= 0 [0]: monotonic increase yields -arg1 >= 0
		
		arg1 >= 0 [0]: monotonic increase yields arg1 >= 0
		
		arg2 > 0 [0]: montonic decrease yields 1-n+arg2 > 0
		
		arg2 > 0 [1]: eventual increase yields (1 <= 0 /\ arg2 > 0)
		
		Replacement map: {-arg1 >= 0 -> -arg1 >= 0, arg1 >= 0 -> arg1 >= 0, arg2 > 0 -> 1-n+arg2 > 0}

	Trace

	9[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 10[(-arg1 >= 0 /\ arg1 >= 0 /\ -1+n >= 0 /\ 1-n+arg2 > 0)]
	
	Blocked

	[{}, {}, {10[T]}]

Step with 6

	Trace

	9[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 10[(-arg1 >= 0 /\ arg1 >= 0 /\ -1+n >= 0 /\ 1-n+arg2 > 0)], 6[(arg2 > 0)]
	
	Blocked

	[{}, {}, {10[T]}, {}]

Step with 7

	Trace

	9[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 10[(-arg1 >= 0 /\ arg1 >= 0 /\ -1+n >= 0 /\ 1-n+arg2 > 0)], 6[(arg2 > 0)], 7[(-arg2 == 0)]
	
	Blocked

	[{}, {}, {10[T]}, {}, {}]

Covered

	Trace

	9[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 10[(-arg1 >= 0 /\ arg1 >= 0 /\ -1+n >= 0 /\ 1-n+arg2 > 0)], 6[(arg2 > 0)]
	
	Blocked

	[{}, {}, {10[T]}, {7[T]}]

Backtrack

	Trace

	9[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 10[(-arg1 >= 0 /\ arg1 >= 0 /\ -1+n >= 0 /\ 1-n+arg2 > 0)]
	
	Blocked

	[{}, {}, {6[T], 10[T]}]

Backtrack

	Trace

	9[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)]
	
	Blocked

	[{}, {10[T]}]

Step with 6

	Trace

	9[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 6[(arg2 > 0)]
	
	Blocked

	[{}, {10[T]}, {}]

Step with 7

	Trace

	9[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 6[(arg2 > 0)], 7[(-arg2 == 0)]
	
	Blocked

	[{}, {10[T]}, {}, {}]

Covered

	Trace

	9[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 6[(arg2 > 0)]
	
	Blocked

	[{}, {10[T]}, {7[T]}]

Step with 8

	Trace

	9[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 6[(arg2 > 0)], 8[(arg2 > 0)]
	
	Blocked

	[{}, {10[T]}, {7[T]}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2
   6: f142_0_main_LE -> f153_0_main_LE : arg1'=arg2, arg2'=arg1, arg2 > 0, cost: 1
  10: f142_0_main_LE -> f142_0_main_LE : arg1'=0, arg2'=-n+arg2, (-arg1 >= 0 /\ arg1 >= 0 /\ -1+n >= 0 /\ 1-n+arg2 > 0), cost: 1
   7: f153_0_main_LE -> f142_0_main_LE : arg1'=0, arg2'=-1+arg1, -arg2 == 0, cost: 1
   8: f153_0_main_LE -> f153_0_main_LE : arg2'=-1+arg2, arg2 > 0, cost: 1
  11: f153_0_main_LE -> f153_0_main_LE : arg2'=-n2+arg2, (1-n2+arg2 > 0 /\ -1+n2 >= 0), cost: 1
   9: __init -> f142_0_main_LE : arg1'=arg1p1, arg2'=arg2p1, (1+arg1p1 > 0 /\ 1+arg2p1 > 0), cost: 1

	Loop Acceleration

	Original rule:
	f153_0_main_LE -> f153_0_main_LE : arg2'=-1+arg2, (arg2 > 0), cost: 1
	New rule:
	f153_0_main_LE -> f153_0_main_LE : arg2'=-n2+arg2, (1-n2+arg2 > 0 /\ -1+n2 >= 0), cost: 1

		arg2 > 0 [0]: montonic decrease yields 1-n2+arg2 > 0
		
		arg2 > 0 [1]: eventual increase yields (1 <= 0 /\ arg2 > 0)
		
		Replacement map: {arg2 > 0 -> 1-n2+arg2 > 0}

	Trace

	9[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 6[(arg2 > 0)], 11[(1-n2+arg2 > 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {10[T]}, {7[T]}, {8[T], 11[T]}]

Step with 7

	Trace

	9[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 6[(arg2 > 0)], 11[(1-n2+arg2 > 0 /\ -1+n2 >= 0)], 7[(-arg2 == 0)]
	
	Blocked

	[{}, {10[T]}, {7[T]}, {8[T], 11[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 6

	Trace

	9[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 6[(arg2 > 0)], 11[(1-n2+arg2 > 0 /\ -1+n2 >= 0)], 7[(-arg2 == 0)], 6[(arg2 > 0)]
	
	Blocked

	[{}, {10[T]}, {7[T]}, {8[T], 11[T]}, {}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2
   6: f142_0_main_LE -> f153_0_main_LE : arg1'=arg2, arg2'=arg1, arg2 > 0, cost: 1
  10: f142_0_main_LE -> f142_0_main_LE : arg1'=0, arg2'=-n+arg2, (-arg1 >= 0 /\ arg1 >= 0 /\ -1+n >= 0 /\ 1-n+arg2 > 0), cost: 1
   7: f153_0_main_LE -> f142_0_main_LE : arg1'=0, arg2'=-1+arg1, -arg2 == 0, cost: 1
   8: f153_0_main_LE -> f153_0_main_LE : arg2'=-1+arg2, arg2 > 0, cost: 1
  11: f153_0_main_LE -> f153_0_main_LE : arg2'=-n2+arg2, (1-n2+arg2 > 0 /\ -1+n2 >= 0), cost: 1
  12: f153_0_main_LE -> f153_0_main_LE : arg1'=-n3+arg1, arg2'=0, (-n3+arg1 > 0 /\ -1+n3 >= 0 /\ arg2 >= 0 /\ -arg2 >= 0), cost: 1
   9: __init -> f142_0_main_LE : arg1'=arg1p1, arg2'=arg2p1, (1+arg1p1 > 0 /\ 1+arg2p1 > 0), cost: 1

	Loop Acceleration

	Original rule:
	f153_0_main_LE -> f153_0_main_LE : arg1'=-1+arg1, arg2'=0, (-1+arg1 > 0 /\ -arg2 == 0), cost: 1
	New rule:
	f153_0_main_LE -> f153_0_main_LE : arg1'=-n3+arg1, arg2'=0, (-n3+arg1 > 0 /\ -1+n3 >= 0 /\ arg2 >= 0 /\ -arg2 >= 0), cost: 1

		-1+arg1 > 0 [0]: montonic decrease yields -n3+arg1 > 0
		
		-1+arg1 > 0 [1]: eventual increase yields (1 <= 0 /\ -1+arg1 > 0)
		
		arg2 >= 0 [0]: monotonic increase yields arg2 >= 0
		
		-arg2 >= 0 [0]: monotonic increase yields -arg2 >= 0
		
		Replacement map: {-1+arg1 > 0 -> -n3+arg1 > 0, arg2 >= 0 -> arg2 >= 0, -arg2 >= 0 -> -arg2 >= 0}

	Trace

	9[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 6[(arg2 > 0)], 11[(1-n2+arg2 > 0 /\ -1+n2 >= 0)], 12[(-n3+arg1 > 0 /\ -1+n3 >= 0 /\ arg2 >= 0 /\ -arg2 >= 0)]
	
	Blocked

	[{}, {10[T]}, {7[T]}, {8[T], 11[T]}, {12[T]}]

Acceleration Failed

marked recursive suffix as redundant

Step with 7

	Trace

	9[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 6[(arg2 > 0)], 11[(1-n2+arg2 > 0 /\ -1+n2 >= 0)], 12[(-n3+arg1 > 0 /\ -1+n3 >= 0 /\ arg2 >= 0 /\ -arg2 >= 0)], 7[(-arg2 == 0)]
	
	Blocked

	[{}, {10[T]}, {7[T]}, {8[T], 11[T]}, {12[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 6

	Trace

	9[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 6[(arg2 > 0)], 11[(1-n2+arg2 > 0 /\ -1+n2 >= 0)], 12[(-n3+arg1 > 0 /\ -1+n3 >= 0 /\ arg2 >= 0 /\ -arg2 >= 0)], 7[(-arg2 == 0)], 6[(arg2 > 0)]
	
	Blocked

	[{}, {10[T]}, {7[T]}, {8[T], 11[T]}, {12[T]}, {}, {}]

Covered

	Trace

	9[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 6[(arg2 > 0)], 11[(1-n2+arg2 > 0 /\ -1+n2 >= 0)], 12[(-n3+arg1 > 0 /\ -1+n3 >= 0 /\ arg2 >= 0 /\ -arg2 >= 0)], 7[(-arg2 == 0)]
	
	Blocked

	[{}, {10[T]}, {7[T]}, {8[T], 11[T]}, {12[T]}, {6[T]}]

Step with 10

	Trace

	9[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 6[(arg2 > 0)], 11[(1-n2+arg2 > 0 /\ -1+n2 >= 0)], 12[(-n3+arg1 > 0 /\ -1+n3 >= 0 /\ arg2 >= 0 /\ -arg2 >= 0)], 7[(-arg2 == 0)], 10[(-arg1 >= 0 /\ arg1 >= 0 /\ -1+n >= 0 /\ 1-n+arg2 > 0)]
	
	Blocked

	[{}, {10[T]}, {7[T]}, {8[T], 11[T]}, {12[T]}, {6[T]}, {10[T]}]

Covered

	Trace

	9[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 6[(arg2 > 0)], 11[(1-n2+arg2 > 0 /\ -1+n2 >= 0)], 12[(-n3+arg1 > 0 /\ -1+n3 >= 0 /\ arg2 >= 0 /\ -arg2 >= 0)], 7[(-arg2 == 0)]
	
	Blocked

	[{}, {10[T]}, {7[T]}, {8[T], 11[T]}, {12[T]}, {6[T], 10[T]}]

Backtrack

	Trace

	9[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 6[(arg2 > 0)], 11[(1-n2+arg2 > 0 /\ -1+n2 >= 0)], 12[(-n3+arg1 > 0 /\ -1+n3 >= 0 /\ arg2 >= 0 /\ -arg2 >= 0)]
	
	Blocked

	[{}, {10[T]}, {7[T]}, {8[T], 11[T]}, {7[T], 12[T]}]

Backtrack

	Trace

	9[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 6[(arg2 > 0)], 11[(1-n2+arg2 > 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {10[T]}, {7[T]}, {8[T], 11[T], 12[T]}]

Step with 7

	Trace

	9[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 6[(arg2 > 0)], 11[(1-n2+arg2 > 0 /\ -1+n2 >= 0)], 7[(-arg2 == 0)]
	
	Blocked

	[{}, {10[T]}, {7[T]}, {8[T], 11[T], 12[T]}, {}]

Step with 10

	Trace

	9[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 6[(arg2 > 0)], 11[(1-n2+arg2 > 0 /\ -1+n2 >= 0)], 7[(-arg2 == 0)], 10[(-arg1 >= 0 /\ arg1 >= 0 /\ -1+n >= 0 /\ 1-n+arg2 > 0)]
	
	Blocked

	[{}, {10[T]}, {7[T]}, {8[T], 11[T], 12[T]}, {}, {10[T]}]

Covered

	Trace

	9[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 6[(arg2 > 0)], 11[(1-n2+arg2 > 0 /\ -1+n2 >= 0)], 7[(-arg2 == 0)]
	
	Blocked

	[{}, {10[T]}, {7[T]}, {8[T], 11[T], 12[T]}, {10[T]}]

Step with 6

	Trace

	9[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 6[(arg2 > 0)], 11[(1-n2+arg2 > 0 /\ -1+n2 >= 0)], 7[(-arg2 == 0)], 6[(arg2 > 0)]
	
	Blocked

	[{}, {10[T]}, {7[T]}, {8[T], 11[T], 12[T]}, {10[T]}, {}]

Covered

	Trace

	9[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 6[(arg2 > 0)], 11[(1-n2+arg2 > 0 /\ -1+n2 >= 0)], 7[(-arg2 == 0)]
	
	Blocked

	[{}, {10[T]}, {7[T]}, {8[T], 11[T], 12[T]}, {6[T], 10[T]}]

Backtrack

	Trace

	9[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 6[(arg2 > 0)], 11[(1-n2+arg2 > 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {10[T]}, {7[T]}, {7[T], 8[T], 11[T], 12[T]}]

Backtrack

	Trace

	9[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 6[(arg2 > 0)]
	
	Blocked

	[{}, {10[T]}, {7[T], 11[T]}]

Step with 8

	Trace

	9[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 6[(arg2 > 0)], 8[(arg2 > 0)]
	
	Blocked

	[{}, {10[T]}, {7[T], 11[T]}, {}]

Covered

	Trace

	9[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 6[(arg2 > 0)]
	
	Blocked

	[{}, {10[T]}, {7[T], 8[T], 11[T]}]

Step with 12

	Trace

	9[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 6[(arg2 > 0)], 12[(-n3+arg1 > 0 /\ -1+n3 >= 0 /\ arg2 >= 0 /\ -arg2 >= 0)]
	
	Blocked

	[{}, {10[T]}, {7[T], 8[T], 11[T]}, {12[T]}]

Step with 7

	Trace

	9[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 6[(arg2 > 0)], 12[(-n3+arg1 > 0 /\ -1+n3 >= 0 /\ arg2 >= 0 /\ -arg2 >= 0)], 7[(-arg2 == 0)]
	
	Blocked

	[{}, {10[T]}, {7[T], 8[T], 11[T]}, {12[T]}, {}]

Covered

	Trace

	9[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 6[(arg2 > 0)], 12[(-n3+arg1 > 0 /\ -1+n3 >= 0 /\ arg2 >= 0 /\ -arg2 >= 0)]
	
	Blocked

	[{}, {10[T]}, {7[T], 8[T], 11[T]}, {7[T], 12[T]}]

Backtrack

	Trace

	9[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)], 6[(arg2 > 0)]
	
	Blocked

	[{}, {10[T]}, {7[T], 8[T], 11[T], 12[T]}]

Backtrack

	Trace

	9[(1+arg1p1 > 0 /\ 1+arg2p1 > 0)]
	
	Blocked

	[{}, {6[T], 10[T]}]

Backtrack

	Trace

	Blocked

	[{9[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
