YES

Solver Timeout: 4
Global Timeout: 300
Maximum number of concurrent processes: 900
*******************************************************************************************
*********************** UNPROCESSED TRANSITION SYSTEMS PER FUNCTION ***********************
*******************************************************************************************


List of LLVMGraphs + assumeNodes + staticAssertNodes [1] :

+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++
+                                                                  +
Init Location: 0
Transitions:
<l0, l1, true, seq{main__func_return_ -> 0, main_i -> Â¿functionCall(__VERIFIER_nondet_int), main_j -> Â¿functionCall(__VERIFIER_nondet_int), main_k -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l1, l2, true>
<l2, l6, not((main_i <= 100))>
<l2, l3, (main_i <= 100)>
<l3, l6, not((main_j <= main_k))>
<l3, l4, (main_j <= main_k)>
<l4, l5, true, seq{main_i -> main_j, main_j -> (main_i + 1), main_k -> (main_k - 1)}>
<l5, l2, true>
<l6, l7, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

+ Assume Nodes [0]: ++++++++++++++++++++++++++++++++++++++++++++++++
       
+ Static Assert Nodes [0]: +++++++++++++++++++++++++++++++++++++++++
       
+ After preprocess (paralelization): ++++++++++++++++++++++++++++++

Init Location: 0
Transitions:
<l0, l8, true, seq{main__func_return_ -> 0}>
<l8, l9, true, seq{varCall_1 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l9, l10, true, seq{main_i -> varCall_1}>
<l10, l11, true, seq{varCall_2 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l11, l12, true, seq{main_j -> varCall_2}>
<l12, l13, true, seq{varCall_3 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l13, l1, true, seq{main_k -> varCall_3}>
<l1, l2, true>
<l2, l3, (main_i <= 100)>
<l2, l6, not((main_i <= 100))>
<l3, l4, (main_j <= main_k)>
<l3, l6, not((main_j <= main_k))>
<l4, l5, true, seq{main_i -> main_j, main_j -> (main_i + 1), main_k -> (main_k - 1)}>
<l5, l2, true>
<l6, l7, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:
7, 
Accepting locations:

Asserts:

+                                                                  +
+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++


Function Return and Parameters Information [2 functions]:
    function name: __VERIFIER_nondet_int [1 return + 0 parameters]        demangled: __VERIFIER_nondet_int
        __VERIFIER_nondet_int__func_return_      [function result] : int
    function name: main [1 return + 0 parameters]        demangled: main
        main__func_return_      [function result] : int


AST Ident Scanner Information [6 idents]:
__VERIFIER_nondet_int | function | [integer, ()] | <line: 3, col: 1> | <line: 10, col: 9> <line: 11, col: 9> <line: 12, col: 9>
main | function | [integer, ()] | <line: 5, col: 1>
i | local variable | integer | <line: 6, col: 5> | <line: 10, col: 5> <line: 14, col: 12> <line: 15, col: 9> <line: 16, col: 13>
j | local variable | integer | <line: 7, col: 5> | <line: 11, col: 5> <line: 14, col: 24> <line: 15, col: 13> <line: 16, col: 9>
k | local variable | integer | <line: 8, col: 5> | <line: 12, col: 5> <line: 14, col: 29> <line: 17, col: 9> <line: 17, col: 13>
t | local variable | integer | <line: 9, col: 5>

Main function: main
Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l2, (main_i = undef4) /\ (main_j = undef5) /\ (main_k = undef6)>
<l2, l2, (main_i <= 100) /\ (main_j <= main_k), par{main_i -> main_j, main_j -> (main_j + 1), main_k -> (main_k - 1)}>
<l2, l7, (main_i <= 100) /\ not((main_j <= main_k))>
<l2, l7, not((main_i <= 100))>

Fresh variables:
undef4, undef5, undef6, 

Undef variables:
undef4, undef5, undef6, 

Abstraction variables:

Exit nodes:
7, 
Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l2, l2, main_j <= main_k /\ main_i <= 100, {main_i -> main_j, main_j -> 1 + main_j, main_k -> -1 + main_k, rest remain the same}>
Variables:
main_i, main_j, main_k

Graph 2:
Transitions:
Variables:

Precedence: 
Graph 0

Graph 1
<l0, l2, main_i = undef4 /\ main_j = undef5 /\ main_k = undef6, {all remain the same}>

Graph 2
<l2, l7, 1 + main_k <= main_j /\ main_i <= 100, {all remain the same}>
<l2, l7, 101 <= main_i, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 2 , 1 )
( 7 , 2 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.002185

Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000491s
[33mRanking function: [36m(~(1) / 2)*main_j + (1 / 2)*main_k[0m
New Graphs: 
Proving termination of subgraph 2
Analyzing SCC {l7}...
No cycles found.

[32mProgram Terminates[0m
