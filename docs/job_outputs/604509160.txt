YES

Solver Timeout: 4
Global Timeout: 300
No parsing errors!
Init Location: 0
Transitions:
<l0, l4, true>
<l1, l2, (arg2 > 0) /\ (undef3 > ~(1)) /\ (arg1 > 0)>
<l2, l3, (arg2 > 0) /\ (undef6 > ~(1)) /\ (arg1 > 0) /\ ((undef6 - (100 * undef7)) < 100) /\ ((undef6 - (100 * undef7)) >= 0), par{arg1 -> (undef6 - (100 * undef7)), arg2 -> undef5}>
<l3, l3, (arg1 > 0), par{arg1 -> (arg1 - 1), arg2 -> undef9}>
<l4, l1, true, par{arg1 -> undef10, arg2 -> undef11}>

Fresh variables:
undef3, undef5, undef6, undef7, undef9, undef10, undef11, 

Undef variables:
undef3, undef5, undef6, undef7, undef9, undef10, undef11, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l3, (arg1 = (undef6 - (100 * undef7))) /\ (undef11 > 0) /\ (undef3 > ~(1)) /\ (undef10 > 0) /\ (undef11 > 0) /\ (undef6 > ~(1)) /\ (undef10 > 0) /\ ((undef6 - (100 * undef7)) < 100) /\ ((undef6 - (100 * undef7)) >= 0)>
<l3, l3, (arg1 > 0), par{arg1 -> (arg1 - 1)}>

Fresh variables:
undef3, undef5, undef6, undef7, undef9, undef10, undef11, 

Undef variables:
undef3, undef5, undef6, undef7, undef9, undef10, undef11, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l3, l3, 1 <= arg1, {arg1 -> -1 + arg1, rest remain the same}>
Variables:
arg1

Precedence: 
Graph 0

Graph 1
<l0, l3, 0 <= undef3 /\ 0 <= undef6 /\ 100*undef7 <= undef6 /\ 1 <= undef10 /\ 1 <= undef11 /\ undef6 <= 99 + 100*undef7 /\ arg1 + 100*undef7 = undef6, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 3 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.001769

Checking conditional termination of SCC {l3}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000507s
[33mRanking function: [36m-1 + arg1[0m
New Graphs: 
[32mProgram Terminates[0m
