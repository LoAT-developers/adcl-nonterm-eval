NO

Initial ITS

Start location: __init
Program variables: arg1 arg2
   0: f1_0_main_Load -> f81_0_loop_EQ : arg1'=arg1p1, arg2'=arg2p1, (-arg1p1+arg2 == 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 1
   1: f81_0_loop_EQ -> f81_0_loop_EQ : arg1'=arg1p2, arg2'=arg2p2, (2+arg1-arg1p2 == 0 /\ arg1 < 0 /\ 3+arg1 > 0), cost: 1
   2: f81_0_loop_EQ -> f81_0_loop_EQ : arg1'=arg1p3, arg2'=arg2p3, (-3+arg1 < 0 /\ -2-arg1p3+arg1 == 0 /\ arg1 > 0), cost: 1
   3: f81_0_loop_EQ -> f81_0_loop_EQ : arg1'=arg1p4, arg2'=arg2p4, (1+arg1 < 0 /\ arg1 < 0 /\ -2-arg1p4-arg1 == 0 /\ 2+arg1 < 0), cost: 1
   4: f81_0_loop_EQ -> f81_0_loop_EQ : arg1'=arg1p5, arg2'=arg2p5, (-2+arg1 > 0 /\ 2-arg1-arg1p5 == 0), cost: 1
   5: __init -> f1_0_main_Load : arg1'=arg1p6, arg2'=arg2p6, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2
   1: f81_0_loop_EQ -> f81_0_loop_EQ : arg1'=arg1p2, arg2'=arg2p2, (2+arg1-arg1p2 == 0 /\ arg1 < 0 /\ 3+arg1 > 0), cost: 1
   2: f81_0_loop_EQ -> f81_0_loop_EQ : arg1'=arg1p3, arg2'=arg2p3, (-3+arg1 < 0 /\ -2-arg1p3+arg1 == 0 /\ arg1 > 0), cost: 1
   3: f81_0_loop_EQ -> f81_0_loop_EQ : arg1'=arg1p4, arg2'=arg2p4, (1+arg1 < 0 /\ arg1 < 0 /\ -2-arg1p4-arg1 == 0 /\ 2+arg1 < 0), cost: 1
   4: f81_0_loop_EQ -> f81_0_loop_EQ : arg1'=arg1p5, arg2'=arg2p5, (-2+arg1 > 0 /\ 2-arg1-arg1p5 == 0), cost: 1
   6: __init -> f81_0_loop_EQ : arg1'=arg1p1, arg2'=arg2p1, (arg1p6 > 0 /\ -arg1p1+arg2p6 == 0 /\ 1+arg2p6 > 0), cost: 1

	Eliminating location f1_0_main_Load by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_Load : arg1'=arg1p6, arg2'=arg2p6, T, cost: 1
	Second rule:
	f1_0_main_Load -> f81_0_loop_EQ : arg1'=arg1p1, arg2'=arg2p1, (-arg1p1+arg2 == 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 1
	New rule:
	__init -> f81_0_loop_EQ : arg1'=arg1p1, arg2'=arg2p1, (arg1p6 > 0 /\ -arg1p1+arg2p6 == 0 /\ 1+arg2p6 > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 5

Simplified Transitions

Start location: __init
Program variables: arg1 arg2
   7: f81_0_loop_EQ -> f81_0_loop_EQ : arg1'=2+arg1, arg2'=arg2p2, (arg1 < 0 /\ 3+arg1 > 0), cost: 1
   8: f81_0_loop_EQ -> f81_0_loop_EQ : arg1'=-2+arg1, arg2'=arg2p3, (-3+arg1 < 0 /\ arg1 > 0), cost: 1
   9: f81_0_loop_EQ -> f81_0_loop_EQ : arg1'=-2-arg1, arg2'=arg2p4, (1+arg1 < 0 /\ arg1 < 0 /\ 2+arg1 < 0), cost: 1
  10: f81_0_loop_EQ -> f81_0_loop_EQ : arg1'=2-arg1, arg2'=arg2p5, -2+arg1 > 0, cost: 1
  11: __init -> f81_0_loop_EQ : arg1'=arg2p6, arg2'=arg2p1, (1+arg2p6 > 0), cost: 1

	Propagated Equalities

	Original rule:
	f81_0_loop_EQ -> f81_0_loop_EQ : arg1'=arg1p2, arg2'=arg2p2, (2+arg1-arg1p2 == 0 /\ arg1 < 0 /\ 3+arg1 > 0), cost: 1
	New rule:
	f81_0_loop_EQ -> f81_0_loop_EQ : arg1'=2+arg1, arg2'=arg2p2, (0 == 0 /\ arg1 < 0 /\ 3+arg1 > 0), cost: 1
	
		propagated equality arg1p2 = 2+arg1
		
	Simplified Guard

	Original rule:
	f81_0_loop_EQ -> f81_0_loop_EQ : arg1'=2+arg1, arg2'=arg2p2, (0 == 0 /\ arg1 < 0 /\ 3+arg1 > 0), cost: 1
	New rule:
	f81_0_loop_EQ -> f81_0_loop_EQ : arg1'=2+arg1, arg2'=arg2p2, (arg1 < 0 /\ 3+arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f81_0_loop_EQ -> f81_0_loop_EQ : arg1'=arg1p3, arg2'=arg2p3, (-3+arg1 < 0 /\ -2-arg1p3+arg1 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f81_0_loop_EQ -> f81_0_loop_EQ : arg1'=-2+arg1, arg2'=arg2p3, (0 == 0 /\ -3+arg1 < 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg1p3 = -2+arg1
		
	Simplified Guard

	Original rule:
	f81_0_loop_EQ -> f81_0_loop_EQ : arg1'=-2+arg1, arg2'=arg2p3, (0 == 0 /\ -3+arg1 < 0 /\ arg1 > 0), cost: 1
	New rule:
	f81_0_loop_EQ -> f81_0_loop_EQ : arg1'=-2+arg1, arg2'=arg2p3, (-3+arg1 < 0 /\ arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f81_0_loop_EQ -> f81_0_loop_EQ : arg1'=arg1p4, arg2'=arg2p4, (1+arg1 < 0 /\ arg1 < 0 /\ -2-arg1p4-arg1 == 0 /\ 2+arg1 < 0), cost: 1
	New rule:
	f81_0_loop_EQ -> f81_0_loop_EQ : arg1'=-2-arg1, arg2'=arg2p4, (0 == 0 /\ 1+arg1 < 0 /\ arg1 < 0 /\ 2+arg1 < 0), cost: 1
	
		propagated equality arg1p4 = -2-arg1
		
	Simplified Guard

	Original rule:
	f81_0_loop_EQ -> f81_0_loop_EQ : arg1'=-2-arg1, arg2'=arg2p4, (0 == 0 /\ 1+arg1 < 0 /\ arg1 < 0 /\ 2+arg1 < 0), cost: 1
	New rule:
	f81_0_loop_EQ -> f81_0_loop_EQ : arg1'=-2-arg1, arg2'=arg2p4, (1+arg1 < 0 /\ arg1 < 0 /\ 2+arg1 < 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f81_0_loop_EQ -> f81_0_loop_EQ : arg1'=arg1p5, arg2'=arg2p5, (-2+arg1 > 0 /\ 2-arg1-arg1p5 == 0), cost: 1
	New rule:
	f81_0_loop_EQ -> f81_0_loop_EQ : arg1'=2-arg1, arg2'=arg2p5, (0 == 0 /\ -2+arg1 > 0), cost: 1
	
		propagated equality arg1p5 = 2-arg1
		
	Simplified Guard

	Original rule:
	f81_0_loop_EQ -> f81_0_loop_EQ : arg1'=2-arg1, arg2'=arg2p5, (0 == 0 /\ -2+arg1 > 0), cost: 1
	New rule:
	f81_0_loop_EQ -> f81_0_loop_EQ : arg1'=2-arg1, arg2'=arg2p5, -2+arg1 > 0, cost: 1
	
	Propagated Equalities

	Original rule:
	__init -> f81_0_loop_EQ : arg1'=arg1p1, arg2'=arg2p1, (arg1p6 > 0 /\ -arg1p1+arg2p6 == 0 /\ 1+arg2p6 > 0), cost: 1
	New rule:
	__init -> f81_0_loop_EQ : arg1'=arg2p6, arg2'=arg2p1, (0 == 0 /\ arg1p6 > 0 /\ 1+arg2p6 > 0), cost: 1
	
		propagated equality arg1p1 = arg2p6
		
	Simplified Guard

	Original rule:
	__init -> f81_0_loop_EQ : arg1'=arg2p6, arg2'=arg2p1, (0 == 0 /\ arg1p6 > 0 /\ 1+arg2p6 > 0), cost: 1
	New rule:
	__init -> f81_0_loop_EQ : arg1'=arg2p6, arg2'=arg2p1, (arg1p6 > 0 /\ 1+arg2p6 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	__init -> f81_0_loop_EQ : arg1'=arg2p6, arg2'=arg2p1, (arg1p6 > 0 /\ 1+arg2p6 > 0), cost: 1
	New rule:
	__init -> f81_0_loop_EQ : arg1'=arg2p6, arg2'=arg2p1, (1+arg2p6 > 0), cost: 1

Unrolled Loops

Start location: __init
Program variables: arg1 arg2
   7: f81_0_loop_EQ -> f81_0_loop_EQ : arg1'=2+arg1, arg2'=arg2p2, (arg1 < 0 /\ 3+arg1 > 0), cost: 1
   8: f81_0_loop_EQ -> f81_0_loop_EQ : arg1'=-2+arg1, arg2'=arg2p3, (-3+arg1 < 0 /\ arg1 > 0), cost: 1
   9: f81_0_loop_EQ -> f81_0_loop_EQ : arg1'=-2-arg1, arg2'=arg2p4, (1+arg1 < 0 /\ arg1 < 0 /\ 2+arg1 < 0), cost: 1
  10: f81_0_loop_EQ -> f81_0_loop_EQ : arg1'=2-arg1, arg2'=arg2p5, -2+arg1 > 0, cost: 1
  12: f81_0_loop_EQ -> f81_0_loop_EQ : arg2'=arg2p41, (-arg1 < 0 /\ -2-arg1 < 0 /\ 1+arg1 < 0 /\ -1-arg1 < 0 /\ arg1 < 0 /\ 2+arg1 < 0), cost: 1
  13: f81_0_loop_EQ -> f81_0_loop_EQ : arg2'=arg2p51, (-arg1 > 0 /\ -2+arg1 > 0), cost: 1
  11: __init -> f81_0_loop_EQ : arg1'=arg2p6, arg2'=arg2p1, (1+arg2p6 > 0), cost: 1

	Unrolling

	Original rule:
	f81_0_loop_EQ -> f81_0_loop_EQ : arg1'=-2-arg1, arg2'=arg2p4, (1+arg1 < 0 /\ arg1 < 0 /\ 2+arg1 < 0), cost: 1
	New rule:
	f81_0_loop_EQ -> f81_0_loop_EQ : arg1'=arg1, arg2'=arg2p41, (-arg1 < 0 /\ -2-arg1 < 0 /\ 1+arg1 < 0 /\ -1-arg1 < 0 /\ arg1 < 0 /\ 2+arg1 < 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f81_0_loop_EQ -> f81_0_loop_EQ : arg1'=arg1, arg2'=arg2p41, (-arg1 < 0 /\ -2-arg1 < 0 /\ 1+arg1 < 0 /\ -1-arg1 < 0 /\ arg1 < 0 /\ 2+arg1 < 0), cost: 1
	New rule:
	f81_0_loop_EQ -> f81_0_loop_EQ : arg2'=arg2p41, (-arg1 < 0 /\ -2-arg1 < 0 /\ 1+arg1 < 0 /\ -1-arg1 < 0 /\ arg1 < 0 /\ 2+arg1 < 0), cost: 1
	
	Unrolling

	Original rule:
	f81_0_loop_EQ -> f81_0_loop_EQ : arg1'=2-arg1, arg2'=arg2p5, -2+arg1 > 0, cost: 1
	New rule:
	f81_0_loop_EQ -> f81_0_loop_EQ : arg1'=arg1, arg2'=arg2p51, (-arg1 > 0 /\ -2+arg1 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f81_0_loop_EQ -> f81_0_loop_EQ : arg1'=arg1, arg2'=arg2p51, (-arg1 > 0 /\ -2+arg1 > 0), cost: 1
	New rule:
	f81_0_loop_EQ -> f81_0_loop_EQ : arg2'=arg2p51, (-arg1 > 0 /\ -2+arg1 > 0), cost: 1

Step with 11

	Trace

	11[(1+arg2p6 > 0)]
	
	Blocked

	[{}, {}]

Step with 8

	Trace

	11[(1+arg2p6 > 0)], 8[(-3+arg1 < 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {7[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 7

	Trace

	11[(1+arg2p6 > 0)], 8[(-3+arg1 < 0 /\ arg1 > 0)], 7[(arg1 < 0 /\ 3+arg1 > 0)]
	
	Blocked

	[{}, {7[T]}, {8[T], 9[T], 10[T], 12[T], 13[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Nonterm

Start location: __init
Program variables: arg1 arg2
   7: f81_0_loop_EQ -> f81_0_loop_EQ : arg1'=2+arg1, arg2'=arg2p2, (arg1 < 0 /\ 3+arg1 > 0), cost: 1
   8: f81_0_loop_EQ -> f81_0_loop_EQ : arg1'=-2+arg1, arg2'=arg2p3, (-3+arg1 < 0 /\ arg1 > 0), cost: 1
   9: f81_0_loop_EQ -> f81_0_loop_EQ : arg1'=-2-arg1, arg2'=arg2p4, (1+arg1 < 0 /\ arg1 < 0 /\ 2+arg1 < 0), cost: 1
  10: f81_0_loop_EQ -> f81_0_loop_EQ : arg1'=2-arg1, arg2'=arg2p5, -2+arg1 > 0, cost: 1
  12: f81_0_loop_EQ -> f81_0_loop_EQ : arg2'=arg2p41, (-arg1 < 0 /\ -2-arg1 < 0 /\ 1+arg1 < 0 /\ -1-arg1 < 0 /\ arg1 < 0 /\ 2+arg1 < 0), cost: 1
  13: f81_0_loop_EQ -> f81_0_loop_EQ : arg2'=arg2p51, (-arg1 > 0 /\ -2+arg1 > 0), cost: 1
  14: f81_0_loop_EQ -> LoAT_sink : (3-arg1 > 0 /\ -1+n >= 0 /\ 2-arg1 > 0 /\ 1+arg1 > 0 /\ arg1 > 0), cost: NONTERM
  11: __init -> f81_0_loop_EQ : arg1'=arg2p6, arg2'=arg2p1, (1+arg2p6 > 0), cost: 1

	Certificate of Non-Termination

	Original rule:
	f81_0_loop_EQ -> f81_0_loop_EQ : arg2'=arg2p2, (-3+arg1 < 0 /\ 1+arg1 > 0 /\ -2+arg1 < 0 /\ arg1 > 0), cost: 1
	New rule:
	f81_0_loop_EQ -> LoAT_sink : (3-arg1 > 0 /\ -1+n >= 0 /\ 2-arg1 > 0 /\ 1+arg1 > 0 /\ arg1 > 0), cost: NONTERM

		3-arg1 > 0 [0]: monotonic increase yields 3-arg1 > 0
		
		2-arg1 > 0 [0]: monotonic increase yields 2-arg1 > 0
		
		1+arg1 > 0 [0]: monotonic increase yields 1+arg1 > 0
		
		arg1 > 0 [0]: monotonic increase yields arg1 > 0
		
		Replacement map: {3-arg1 > 0 -> 3-arg1 > 0, 2-arg1 > 0 -> 2-arg1 > 0, 1+arg1 > 0 -> 1+arg1 > 0, arg1 > 0 -> arg1 > 0}

Step with 14

	Trace

	11[(1+arg2p6 > 0)], 14[(3-arg1 > 0 /\ -1+n >= 0 /\ 2-arg1 > 0 /\ 1+arg1 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {7[T]}, {14[T]}]

Refute

	Counterexample

	[ arg1=1 arg2=0 ] 11 [ arg1=arg1 arg2=arg2 ] 14
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
