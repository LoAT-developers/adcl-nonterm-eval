unknown

Initial ITS

Start location: [1]
Program variables: a b
   0: [1] -> [2] : a'=-nondet, T, cost: 1
   1: [2] -> [3] : b'=-nondet1, T, cost: 1
   2: [3] -> [4] : -b+a > 0, cost: 1
   6: [3] -> [7] : -b+a <= 0, cost: 1
   3: [4] -> [5] : b'=b+a, T, cost: 1
   4: [5] -> [6] : a'=1+a, T, cost: 1
   5: [6] -> [3] : T, cost: 1

Chained Linear Paths

Start location: [1]
Program variables: a b
   7: [1] -> [3] : a'=-nondet, b'=-nondet1, T, cost: 1
   6: [3] -> [7] : -b+a <= 0, cost: 1
  10: [3] -> [3] : a'=1+a, b'=b+a, -b+a > 0, cost: 1

	Eliminating location [2] by chaining:

	Applied chaining

	First rule:
	[1] -> [2] : a'=-nondet, T, cost: 1
	Second rule:
	[2] -> [3] : b'=-nondet1, T, cost: 1
	New rule:
	[1] -> [3] : a'=-nondet, b'=-nondet1, T, cost: 1
	
	Applied deletion

	Removed the following rules: 0 1
	
	Eliminating location [4] by chaining:

	Applied chaining

	First rule:
	[3] -> [4] : -b+a > 0, cost: 1
	Second rule:
	[4] -> [5] : b'=b+a, T, cost: 1
	New rule:
	[3] -> [5] : b'=b+a, -b+a > 0, cost: 1
	
	Applied deletion

	Removed the following rules: 2 3
	
	Eliminating location [5] by chaining:

	Applied chaining

	First rule:
	[3] -> [5] : b'=b+a, -b+a > 0, cost: 1
	Second rule:
	[5] -> [6] : a'=1+a, T, cost: 1
	New rule:
	[3] -> [6] : a'=1+a, b'=b+a, -b+a > 0, cost: 1
	
	Applied deletion

	Removed the following rules: 4 8
	
	Eliminating location [6] by chaining:

	Applied chaining

	First rule:
	[3] -> [6] : a'=1+a, b'=b+a, -b+a > 0, cost: 1
	Second rule:
	[6] -> [3] : T, cost: 1
	New rule:
	[3] -> [3] : a'=1+a, b'=b+a, -b+a > 0, cost: 1
	
	Applied deletion

	Removed the following rules: 5 9

Step with 7

	Trace

	7[T]
	
	Blocked

	[{}, {}]

Step with 6

	Trace

	7[T], 6[(-b+a <= 0)]
	
	Blocked

	[{}, {}, {}]

Backtrack

	Trace

	7[T]
	
	Blocked

	[{}, {6[T]}]

Step with 10

	Trace

	7[T], 10[(-b+a > 0)]
	
	Blocked

	[{}, {6[T]}, {}]

Accelerate

Start location: [1]
Program variables: a b
   7: [1] -> [3] : a'=-nondet, b'=-nondet1, T, cost: 1
   6: [3] -> [7] : -b+a <= 0, cost: 1
  10: [3] -> [3] : a'=1+a, b'=b+a, -b+a > 0, cost: 1
  11: [3] -> [3] : a'=n+a, b'=1/2*n^2+n*a-1/2*n+b, (-b+a > 0 /\ -3/2-(-1+n)*a+3/2*n-b-1/2*(-1+n)^2+a > 0 /\ -1+n >= 0), cost: 1

	Loop Acceleration

	Original rule:
	[3] -> [3] : a'=1+a, b'=b+a, (-b+a > 0), cost: 1
	New rule:
	[3] -> [3] : a'=n+a, b'=1/2*n^2+n*a-1/2*n+b, (-b+a > 0 /\ -3/2-(-1+n)*a+3/2*n-b-1/2*(-1+n)^2+a > 0 /\ -1+n >= 0), cost: 1

		-b+a > 0 [0]: eventual decrease yields (-b+a > 0 /\ -3/2-(-1+n)*a+3/2*n-b-1/2*(-1+n)^2+a > 0)
		
		Replacement map: {-b+a > 0 -> (-b+a > 0 /\ -3/2-(-1+n)*a+3/2*n-b-1/2*(-1+n)^2+a > 0)}

	Trace

	7[T], 11[(-b+a > 0 /\ -3/2-(-1+n)*a+3/2*n-b-1/2*(-1+n)^2+a > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {6[T]}, {10[T], 11[T]}]

Step with 6

	Trace

	7[T], 11[(-b+a > 0 /\ -3/2-(-1+n)*a+3/2*n-b-1/2*(-1+n)^2+a > 0 /\ -1+n >= 0)], 6[(-b+a <= 0)]
	
	Blocked

	[{}, {6[T]}, {10[T], 11[T]}, {}]

Backtrack

	Trace

	7[T], 11[(-b+a > 0 /\ -3/2-(-1+n)*a+3/2*n-b-1/2*(-1+n)^2+a > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {6[T]}, {6[T], 10[T], 11[T]}]

Backtrack

	Trace

	7[T]
	
	Blocked

	[{}, {6[T], 11[T]}]

Step with 10

	Trace

	7[T], 10[(-b+a > 0)]
	
	Blocked

	[{}, {6[T], 11[T]}, {}]

Covered

	Trace

	7[T]
	
	Blocked

	[{}, {6[T], 10[T], 11[T]}]

Backtrack

	Trace

	Blocked

	[{7[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
