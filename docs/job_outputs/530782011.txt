YES

Solver Timeout: 4
Global Timeout: 300
No parsing errors!
Init Location: 0
Transitions:
<l0, l4, true>
<l1, l2, (undef2 > ~(1)) /\ (arg2 > 0) /\ (arg1 > 0), par{arg1 -> 0, arg2 -> undef2}>
<l2, l3, (arg2 > 0) /\ (arg2 > undef5) /\ (undef5 > ~(1)) /\ (arg1 > ~(1))>
<l3, l2, (arg2 > 0) /\ (arg2 > undef7) /\ (arg1 > ~(1)) /\ (undef7 > ~(1)) /\ ((arg2 - (2 * undef7)) < 2) /\ ((arg2 - (2 * undef7)) >= 0), par{arg1 -> (arg1 + undef7), arg2 -> undef7}>
<l4, l1, true, par{arg1 -> undef8, arg2 -> undef9}>

Fresh variables:
undef2, undef5, undef7, undef8, undef9, 

Undef variables:
undef2, undef5, undef7, undef8, undef9, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l2, (arg1 = 0) /\ (arg2 = undef2) /\ (undef2 > ~(1)) /\ (undef9 > 0) /\ (undef8 > 0)>
<l2, l2, (arg2 > 0) /\ (arg2 > undef5) /\ (undef5 > ~(1)) /\ (arg1 > ~(1)) /\ (arg2 > 0) /\ (arg2 > undef7) /\ (arg1 > ~(1)) /\ (undef7 > ~(1)) /\ ((arg2 - (2 * undef7)) < 2) /\ ((arg2 - (2 * undef7)) >= 0), par{arg1 -> (arg1 + undef7), arg2 -> undef7}>

Fresh variables:
undef2, undef5, undef7, undef8, undef9, 

Undef variables:
undef2, undef5, undef7, undef8, undef9, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l2, l2, 1 <= arg2 /\ 1 + undef5 <= arg2 /\ 1 + undef7 <= arg2 /\ arg2 <= 1 + 2*undef7 /\ 0 <= arg1 /\ 2*undef7 <= arg2 /\ 0 <= undef5 /\ 0 <= undef7, {arg1 -> arg1 + undef7, arg2 -> undef7, rest remain the same}>
Variables:
arg1, arg2

Precedence: 
Graph 0

Graph 1
<l0, l2, 1 <= undef8 /\ 1 <= undef9 /\ 0 <= undef2 /\ arg1 = 0 /\ arg2 = undef2, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 2 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.002634

Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.001251s
[33mRanking function: [36m-2 + 2*arg2[0m
New Graphs: 
[32mProgram Terminates[0m
