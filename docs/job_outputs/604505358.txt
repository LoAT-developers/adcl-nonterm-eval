WORST_CASE(Omega(0),?)

Initial ITS
Start location: __init
   0: f1_0_main_Load -> f213_0_main_GE : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ 1+arg3P0 > 0 /\ 1+arg2P0 > 0), cost: 1
   1: f213_0_main_GE -> f213_0_main_GE : arg2'=arg2P1, arg1'=arg1P1, arg3'=arg3P1, (arg2-arg1 >= 0 /\ arg3-arg3P1 == 0 /\ 1+arg1-arg1P1 == 0 /\ arg2-arg2P1 == 0 /\ -arg2+arg3 > 0), cost: 1
   2: f213_0_main_GE -> f213_0_main_GE : arg2'=arg2P2, arg1'=arg1P2, arg3'=arg3P2, (arg3-arg3P2 == 0 /\ arg2-arg1 < 0 /\ 1+arg2-arg2P2 == 0 /\ arg2-arg3 < 0 /\ -arg1P2+arg1 == 0), cost: 1
   3: __init -> f1_0_main_Load : arg2'=arg2P3, arg1'=arg1P3, arg3'=arg3P3, TRUE, cost: 1


Applied preprocessing
Original rule:
f213_0_main_GE -> f213_0_main_GE : arg2'=arg2P1, arg1'=arg1P1, arg3'=arg3P1, (arg2-arg1 >= 0 /\ arg3-arg3P1 == 0 /\ 1+arg1-arg1P1 == 0 /\ arg2-arg2P1 == 0 /\ -arg2+arg3 > 0), cost: 1
New rule:
f213_0_main_GE -> f213_0_main_GE : arg1'=1+arg1, (arg2-arg1 >= 0 /\ -arg2+arg3 > 0), cost: 1

Applied preprocessing
Original rule:
f213_0_main_GE -> f213_0_main_GE : arg2'=arg2P2, arg1'=arg1P2, arg3'=arg3P2, (arg3-arg3P2 == 0 /\ arg2-arg1 < 0 /\ 1+arg2-arg2P2 == 0 /\ arg2-arg3 < 0 /\ -arg1P2+arg1 == 0), cost: 1
New rule:
f213_0_main_GE -> f213_0_main_GE : arg2'=1+arg2, (-arg2+arg1 > 0 /\ -arg2+arg3 > 0), cost: 1

Simplified rules
Start location: __init
   0: f1_0_main_Load -> f213_0_main_GE : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ 1+arg3P0 > 0 /\ 1+arg2P0 > 0), cost: 1
   4: f213_0_main_GE -> f213_0_main_GE : arg1'=1+arg1, (arg2-arg1 >= 0 /\ -arg2+arg3 > 0), cost: 1
   5: f213_0_main_GE -> f213_0_main_GE : arg2'=1+arg2, (-arg2+arg1 > 0 /\ -arg2+arg3 > 0), cost: 1
   3: __init -> f1_0_main_Load : arg2'=arg2P3, arg1'=arg1P3, arg3'=arg3P3, TRUE, cost: 1


Applied acceleration
Original rule:
f213_0_main_GE -> f213_0_main_GE : arg1'=1+arg1, (arg2-arg1 >= 0 /\ -arg2+arg3 > 0), cost: 1
New rule:
f213_0_main_GE -> f213_0_main_GE : arg1'=n+arg1, (n >= 0 /\ 1-n+arg2-arg1 >= 0 /\ -arg2+arg3 > 0), cost: n
Sub-proof via acceration calculus written to file:///tmp/tmpnam_KiHeiN.txt

Applied instantiation
Original rule:
f213_0_main_GE -> f213_0_main_GE : arg1'=n+arg1, (n >= 0 /\ 1-n+arg2-arg1 >= 0 /\ -arg2+arg3 > 0), cost: n
New rule:
f213_0_main_GE -> f213_0_main_GE : arg1'=1+arg2, (0 >= 0 /\ 1+arg2-arg1 >= 0 /\ -arg2+arg3 > 0), cost: 1+arg2-arg1

Applied acceleration
Original rule:
f213_0_main_GE -> f213_0_main_GE : arg2'=1+arg2, (-arg2+arg1 > 0 /\ -arg2+arg3 > 0), cost: 1
New rule:
f213_0_main_GE -> f213_0_main_GE : arg2'=arg2+n0, (1-arg2+arg1-n0 > 0 /\ n0 >= 0 /\ 1-arg2-n0+arg3 > 0), cost: n0
Sub-proof via acceration calculus written to file:///tmp/tmpnam_EnGHaP.txt

Applied instantiation
Original rule:
f213_0_main_GE -> f213_0_main_GE : arg2'=arg2+n0, (1-arg2+arg1-n0 > 0 /\ n0 >= 0 /\ 1-arg2-n0+arg3 > 0), cost: n0
New rule:
f213_0_main_GE -> f213_0_main_GE : arg2'=arg1, (1 > 0 /\ -arg2+arg1 >= 0 /\ 1-arg1+arg3 > 0), cost: -arg2+arg1

Applied instantiation
Original rule:
f213_0_main_GE -> f213_0_main_GE : arg2'=arg2+n0, (1-arg2+arg1-n0 > 0 /\ n0 >= 0 /\ 1-arg2-n0+arg3 > 0), cost: n0
New rule:
f213_0_main_GE -> f213_0_main_GE : arg2'=arg3, (1 > 0 /\ 1+arg1-arg3 > 0 /\ -arg2+arg3 >= 0), cost: -arg2+arg3

Applied simplification
Original rule:
f213_0_main_GE -> f213_0_main_GE : arg1'=1+arg2, (0 >= 0 /\ 1+arg2-arg1 >= 0 /\ -arg2+arg3 > 0), cost: 1+arg2-arg1
New rule:
f213_0_main_GE -> f213_0_main_GE : arg1'=1+arg2, (1+arg2-arg1 >= 0 /\ -arg2+arg3 > 0), cost: 1+arg2-arg1

Applied simplification
Original rule:
f213_0_main_GE -> f213_0_main_GE : arg2'=arg1, (1 > 0 /\ -arg2+arg1 >= 0 /\ 1-arg1+arg3 > 0), cost: -arg2+arg1
New rule:
f213_0_main_GE -> f213_0_main_GE : arg2'=arg1, (-arg2+arg1 >= 0 /\ 1-arg1+arg3 > 0), cost: -arg2+arg1

Applied simplification
Original rule:
f213_0_main_GE -> f213_0_main_GE : arg2'=arg3, (1 > 0 /\ 1+arg1-arg3 > 0 /\ -arg2+arg3 >= 0), cost: -arg2+arg3
New rule:
f213_0_main_GE -> f213_0_main_GE : arg2'=arg3, (1+arg1-arg3 > 0 /\ -arg2+arg3 >= 0), cost: -arg2+arg3

Applied deletion
Removed the following rules: 4 5

Accelerated simple loops
Start location: __init
   0: f1_0_main_Load -> f213_0_main_GE : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ 1+arg3P0 > 0 /\ 1+arg2P0 > 0), cost: 1
   9: f213_0_main_GE -> f213_0_main_GE : arg1'=1+arg2, (1+arg2-arg1 >= 0 /\ -arg2+arg3 > 0), cost: 1+arg2-arg1
  10: f213_0_main_GE -> f213_0_main_GE : arg2'=arg1, (-arg2+arg1 >= 0 /\ 1-arg1+arg3 > 0), cost: -arg2+arg1
  11: f213_0_main_GE -> f213_0_main_GE : arg2'=arg3, (1+arg1-arg3 > 0 /\ -arg2+arg3 >= 0), cost: -arg2+arg3
   3: __init -> f1_0_main_Load : arg2'=arg2P3, arg1'=arg1P3, arg3'=arg3P3, TRUE, cost: 1


Applied chaining
First rule:
f1_0_main_Load -> f213_0_main_GE : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ 1+arg3P0 > 0 /\ 1+arg2P0 > 0), cost: 1
Second rule:
f213_0_main_GE -> f213_0_main_GE : arg1'=1+arg2, (1+arg2-arg1 >= 0 /\ -arg2+arg3 > 0), cost: 1+arg2-arg1
New rule:
f1_0_main_Load -> f213_0_main_GE : arg2'=arg2P0, arg1'=1+arg2P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ 1+arg2 > 0 /\ 1+arg2P0-arg1P0 >= 0 /\ arg1 > 0 /\ -arg2P0+arg3P0 > 0 /\ 1+arg2P0 > 0), cost: 2+arg2P0-arg1P0

Applied chaining
First rule:
f1_0_main_Load -> f213_0_main_GE : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ 1+arg3P0 > 0 /\ 1+arg2P0 > 0), cost: 1
Second rule:
f213_0_main_GE -> f213_0_main_GE : arg2'=arg1, (-arg2+arg1 >= 0 /\ 1-arg1+arg3 > 0), cost: -arg2+arg1
New rule:
f1_0_main_Load -> f213_0_main_GE : arg2'=arg1P0, arg1'=arg1P0, arg3'=arg3P0, (-arg2P0+arg1P0 >= 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ 1-arg1P0+arg3P0 > 0 /\ 1+arg2P0 > 0), cost: 1-arg2P0+arg1P0

Applied chaining
First rule:
f1_0_main_Load -> f213_0_main_GE : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ 1+arg3P0 > 0 /\ 1+arg2P0 > 0), cost: 1
Second rule:
f213_0_main_GE -> f213_0_main_GE : arg2'=arg3, (1+arg1-arg3 > 0 /\ -arg2+arg3 >= 0), cost: -arg2+arg3
New rule:
f1_0_main_Load -> f213_0_main_GE : arg2'=arg3P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg2 > 0 /\ arg1 > 0 /\ 1+arg1P0-arg3P0 > 0 /\ -arg2P0+arg3P0 >= 0 /\ 1+arg2P0 > 0), cost: 1-arg2P0+arg3P0

Applied deletion
Removed the following rules: 9 10 11

Chained accelerated rules with incoming rules
Start location: __init
   0: f1_0_main_Load -> f213_0_main_GE : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ 1+arg3P0 > 0 /\ 1+arg2P0 > 0), cost: 1
  12: f1_0_main_Load -> f213_0_main_GE : arg2'=arg2P0, arg1'=1+arg2P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ 1+arg2 > 0 /\ 1+arg2P0-arg1P0 >= 0 /\ arg1 > 0 /\ -arg2P0+arg3P0 > 0 /\ 1+arg2P0 > 0), cost: 2+arg2P0-arg1P0
  13: f1_0_main_Load -> f213_0_main_GE : arg2'=arg1P0, arg1'=arg1P0, arg3'=arg3P0, (-arg2P0+arg1P0 >= 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ 1-arg1P0+arg3P0 > 0 /\ 1+arg2P0 > 0), cost: 1-arg2P0+arg1P0
  14: f1_0_main_Load -> f213_0_main_GE : arg2'=arg3P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg2 > 0 /\ arg1 > 0 /\ 1+arg1P0-arg3P0 > 0 /\ -arg2P0+arg3P0 >= 0 /\ 1+arg2P0 > 0), cost: 1-arg2P0+arg3P0
   3: __init -> f1_0_main_Load : arg2'=arg2P3, arg1'=arg1P3, arg3'=arg3P3, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
  <empty>


Computing asymptotic complexity

Proved the following lower bound
Complexity:  Unknown
Cpx degree: ?

Solved cost: 0
Rule cost:   0

