NO

Initial ITS
Start location: __init
   0: f1_0_main_Load -> f50_0_loop_EQ : arg2'=arg2P0, arg1'=arg1P0, (1+arg2 > 0 /\ arg1 > 0 /\ arg2-arg1P0 == 0), cost: 1
   1: f50_0_loop_EQ -> f50_0_loop_EQ : arg2'=arg2P1, arg1'=arg1P1, (-2+arg1 < 0 /\ arg1 < 0 /\ 1-arg1-arg1P1 == 0 /\ -1+arg1 < 0), cost: 1
   2: f50_0_loop_EQ -> f50_0_loop_EQ : arg2'=arg2P2, arg1'=arg1P2, (2+arg1 > 0 /\ -1-arg1-arg1P2 == 0 /\ arg1 > 0), cost: 1
   3: __init -> f1_0_main_Load : arg2'=arg2P3, arg1'=arg1P3, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_Load -> f50_0_loop_EQ : arg2'=arg2P0, arg1'=arg1P0, (1+arg2 > 0 /\ arg1 > 0 /\ arg2-arg1P0 == 0), cost: 1
New rule:
f1_0_main_Load -> f50_0_loop_EQ : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f50_0_loop_EQ -> f50_0_loop_EQ : arg2'=arg2P1, arg1'=arg1P1, (-2+arg1 < 0 /\ arg1 < 0 /\ 1-arg1-arg1P1 == 0 /\ -1+arg1 < 0), cost: 1
New rule:
f50_0_loop_EQ -> f50_0_loop_EQ : arg2'=arg2P1, arg1'=1-arg1, -arg1 > 0, cost: 1

Applied preprocessing
Original rule:
f50_0_loop_EQ -> f50_0_loop_EQ : arg2'=arg2P2, arg1'=arg1P2, (2+arg1 > 0 /\ -1-arg1-arg1P2 == 0 /\ arg1 > 0), cost: 1
New rule:
f50_0_loop_EQ -> f50_0_loop_EQ : arg2'=arg2P2, arg1'=-1-arg1, arg1 > 0, cost: 1

Simplified rules
Start location: __init
   4: f1_0_main_Load -> f50_0_loop_EQ : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
   5: f50_0_loop_EQ -> f50_0_loop_EQ : arg2'=arg2P1, arg1'=1-arg1, -arg1 > 0, cost: 1
   6: f50_0_loop_EQ -> f50_0_loop_EQ : arg2'=arg2P2, arg1'=-1-arg1, arg1 > 0, cost: 1
   3: __init -> f1_0_main_Load : arg2'=arg2P3, arg1'=arg1P3, TRUE, cost: 1


Applied chaining
First rule:
f50_0_loop_EQ -> f50_0_loop_EQ : arg2'=arg2P2, arg1'=-1-arg1, arg1 > 0, cost: 1
Second rule:
f50_0_loop_EQ -> f50_0_loop_EQ : arg2'=arg2P1, arg1'=1-arg1, -arg1 > 0, cost: 1
New rule:
f50_0_loop_EQ -> f50_0_loop_EQ : arg2'=arg2P1, arg1'=2+arg1, arg1 > 0, cost: 2

Applied nonterm
Original rule:
f50_0_loop_EQ -> f50_0_loop_EQ : arg2'=arg2P1, arg1'=2+arg1, arg1 > 0, cost: 2
New rule:
f50_0_loop_EQ -> [3] : (arg1 > 0 /\ -1+n >= 0), cost: NONTERM
Sub-proof via acceration calculus written to file:///tmp/tmpnam_nKflkn.txt

Applied chaining
First rule:
f50_0_loop_EQ -> f50_0_loop_EQ : arg2'=arg2P1, arg1'=1-arg1, -arg1 > 0, cost: 1
Second rule:
f50_0_loop_EQ -> [3] : (arg1 > 0 /\ -1+n >= 0), cost: NONTERM
New rule:
f50_0_loop_EQ -> [3] : (-arg1 > 0 /\ -1+n >= 0 /\ 1-arg1 > 0), cost: NONTERM

Applied chaining
First rule:
f50_0_loop_EQ -> f50_0_loop_EQ : arg2'=arg2P1, arg1'=1-arg1, -arg1 > 0, cost: 1
Second rule:
f50_0_loop_EQ -> f50_0_loop_EQ : arg2'=arg2P2, arg1'=-1-arg1, arg1 > 0, cost: 1
New rule:
f50_0_loop_EQ -> f50_0_loop_EQ : arg2'=arg2P2, arg1'=-2+arg1, -arg1 > 0, cost: 2

Applied nonterm
Original rule:
f50_0_loop_EQ -> f50_0_loop_EQ : arg2'=arg2P2, arg1'=-2+arg1, -arg1 > 0, cost: 2
New rule:
f50_0_loop_EQ -> [3] : (-arg1 > 0 /\ -1+n0 >= 0), cost: NONTERM
Sub-proof via acceration calculus written to file:///tmp/tmpnam_fDgDLe.txt

Applied chaining
First rule:
f50_0_loop_EQ -> f50_0_loop_EQ : arg2'=arg2P2, arg1'=-1-arg1, arg1 > 0, cost: 1
Second rule:
f50_0_loop_EQ -> [3] : (-arg1 > 0 /\ -1+n0 >= 0), cost: NONTERM
New rule:
f50_0_loop_EQ -> [3] : (1+arg1 > 0 /\ arg1 > 0 /\ -1+n0 >= 0), cost: NONTERM

Applied simplification
Original rule:
f50_0_loop_EQ -> [3] : (-arg1 > 0 /\ -1+n >= 0 /\ 1-arg1 > 0), cost: NONTERM
New rule:
f50_0_loop_EQ -> [3] : (-arg1 > 0 /\ -1+n >= 0), cost: NONTERM

Applied simplification
Original rule:
f50_0_loop_EQ -> [3] : (1+arg1 > 0 /\ arg1 > 0 /\ -1+n0 >= 0), cost: NONTERM
New rule:
f50_0_loop_EQ -> [3] : (arg1 > 0 /\ -1+n0 >= 0), cost: NONTERM

Accelerated simple loops
Start location: __init
   4: f1_0_main_Load -> f50_0_loop_EQ : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
   5: f50_0_loop_EQ -> f50_0_loop_EQ : arg2'=arg2P1, arg1'=1-arg1, -arg1 > 0, cost: 1
   6: f50_0_loop_EQ -> f50_0_loop_EQ : arg2'=arg2P2, arg1'=-1-arg1, arg1 > 0, cost: 1
   7: f50_0_loop_EQ -> [3] : (arg1 > 0 /\ -1+n >= 0), cost: NONTERM
   9: f50_0_loop_EQ -> [3] : (-arg1 > 0 /\ -1+n0 >= 0), cost: NONTERM
  11: f50_0_loop_EQ -> [3] : (-arg1 > 0 /\ -1+n >= 0), cost: NONTERM
  12: f50_0_loop_EQ -> [3] : (arg1 > 0 /\ -1+n0 >= 0), cost: NONTERM
   3: __init -> f1_0_main_Load : arg2'=arg2P3, arg1'=arg1P3, TRUE, cost: 1


Applied chaining
First rule:
f1_0_main_Load -> f50_0_loop_EQ : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
Second rule:
f50_0_loop_EQ -> f50_0_loop_EQ : arg2'=arg2P2, arg1'=-1-arg1, arg1 > 0, cost: 1
New rule:
f1_0_main_Load -> f50_0_loop_EQ : arg2'=arg2P2, arg1'=-1-arg2, (arg2 > 0 /\ arg1 > 0), cost: 2

Applied chaining
First rule:
f1_0_main_Load -> f50_0_loop_EQ : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
Second rule:
f50_0_loop_EQ -> [3] : (arg1 > 0 /\ -1+n >= 0), cost: NONTERM
New rule:
f1_0_main_Load -> [3] : (arg2 > 0 /\ arg1 > 0), cost: NONTERM

Applied chaining
First rule:
f1_0_main_Load -> f50_0_loop_EQ : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
Second rule:
f50_0_loop_EQ -> [3] : (arg1 > 0 /\ -1+n0 >= 0), cost: NONTERM
New rule:
f1_0_main_Load -> [3] : (arg2 > 0 /\ arg1 > 0), cost: NONTERM

Applied deletion
Removed the following rules: 5 6 7 9 11 12

Chained accelerated rules with incoming rules
Start location: __init
   4: f1_0_main_Load -> f50_0_loop_EQ : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
  13: f1_0_main_Load -> f50_0_loop_EQ : arg2'=arg2P2, arg1'=-1-arg2, (arg2 > 0 /\ arg1 > 0), cost: 2
  14: f1_0_main_Load -> [3] : (arg2 > 0 /\ arg1 > 0), cost: NONTERM
   3: __init -> f1_0_main_Load : arg2'=arg2P3, arg1'=arg1P3, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
  14: f1_0_main_Load -> [3] : (arg2 > 0 /\ arg1 > 0), cost: NONTERM
   3: __init -> f1_0_main_Load : arg2'=arg2P3, arg1'=arg1P3, TRUE, cost: 1


Eliminating location f1_0_main_Load by chaining:

Applied chaining
First rule:
__init -> f1_0_main_Load : arg2'=arg2P3, arg1'=arg1P3, TRUE, cost: 1
Second rule:
f1_0_main_Load -> [3] : (arg2 > 0 /\ arg1 > 0), cost: NONTERM
New rule:
__init -> [3] : (arg1P3 > 0 /\ arg2P3 > 0), cost: NONTERM

Applied deletion
Removed the following rules: 3 14

Eliminated locations on linear paths
Start location: __init
  15: __init -> [3] : (arg1P3 > 0 /\ arg2P3 > 0), cost: NONTERM


Computing asymptotic complexity
Proved nontermination of rule 15 via SMT.

Proved the following lower bound
Complexity:  Nonterm
Cpx degree: Nonterm

Solved cost: NONTERM
Rule cost:   NONTERM
Rule guard:  (arg1P3 > 0 /\ arg2P3 > 0)
