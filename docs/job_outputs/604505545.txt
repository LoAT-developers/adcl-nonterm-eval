WORST_CASE(Omega(0),?)

Initial ITS
Start location: __init
   0: f1_0_main_Load -> f587_0_main_LT : arg2'=arg2P0, arg4'=arg4P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ -arg2P0+arg1P0-arg3P0 == 0 /\ 1+arg2P0 > 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ 2-arg4P0 == 0), cost: 1
   1: f587_0_main_LT -> f587_0_main_LT : arg2'=arg2P1, arg4'=arg4P1, arg1'=arg1P1, arg3'=arg3P1, (2+arg4-arg4P1 == 0 /\ 1-arg2P1+arg2+x90 == 0 /\ 1+x90 > 0 /\ 1+x80 > 0 /\ 1+arg2 > 0 /\ 1+arg2+x90 >= 0 /\ -arg1P1+arg1-x80 == 0 /\ arg3 > 0 /\ -1-arg2-x90-arg3P1+arg1-x80 == 0 /\ 1+arg4 > 0), cost: 1
   2: __init -> f1_0_main_Load : arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg3'=arg3P2, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_Load -> f587_0_main_LT : arg2'=arg2P0, arg4'=arg4P0, arg1'=arg1P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ -arg2P0+arg1P0-arg3P0 == 0 /\ 1+arg2P0 > 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ 2-arg4P0 == 0), cost: 1
New rule:
f1_0_main_Load -> f587_0_main_LT : arg2'=arg1P0-arg3P0, arg4'=2, arg1'=arg1P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ 1+arg1P0-arg3P0 > 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f587_0_main_LT -> f587_0_main_LT : arg2'=arg2P1, arg4'=arg4P1, arg1'=arg1P1, arg3'=arg3P1, (2+arg4-arg4P1 == 0 /\ 1-arg2P1+arg2+x90 == 0 /\ 1+x90 > 0 /\ 1+x80 > 0 /\ 1+arg2 > 0 /\ 1+arg2+x90 >= 0 /\ -arg1P1+arg1-x80 == 0 /\ arg3 > 0 /\ -1-arg2-x90-arg3P1+arg1-x80 == 0 /\ 1+arg4 > 0), cost: 1
New rule:
f587_0_main_LT -> f587_0_main_LT : arg2'=1+arg2+x90, arg4'=2+arg4, arg1'=arg1-x80, arg3'=-1-arg2-x90+arg1-x80, (1+x90 > 0 /\ 1+x80 > 0 /\ 1+arg2 > 0 /\ arg3 > 0 /\ 1+arg4 > 0), cost: 1

Simplified rules
Start location: __init
   3: f1_0_main_Load -> f587_0_main_LT : arg2'=arg1P0-arg3P0, arg4'=2, arg1'=arg1P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ 1+arg1P0-arg3P0 > 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 1
   4: f587_0_main_LT -> f587_0_main_LT : arg2'=1+arg2+x90, arg4'=2+arg4, arg1'=arg1-x80, arg3'=-1-arg2-x90+arg1-x80, (1+x90 > 0 /\ 1+x80 > 0 /\ 1+arg2 > 0 /\ arg3 > 0 /\ 1+arg4 > 0), cost: 1
   2: __init -> f1_0_main_Load : arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg3'=arg3P2, TRUE, cost: 1


Applied acceleration
Original rule:
f587_0_main_LT -> f587_0_main_LT : arg2'=1+arg2+x90, arg4'=2+arg4, arg1'=arg1-x80, arg3'=-1-arg2-x90+arg1-x80, (1+x90 > 0 /\ 1+x80 > 0 /\ 1+arg2 > 0 /\ arg3 > 0 /\ 1+arg4 > 0), cost: 1
New rule:
f587_0_main_LT -> f587_0_main_LT : arg2'=n+arg2+n*x90, arg4'=2*n+arg4, arg1'=-n*x80+arg1, arg3'=-n-arg2-x90-x90*(-1+n)-x80*(-1+n)+arg1-x80, (1+x90 > 0 /\ 1+x80 > 0 /\ 1+arg2 > 0 /\ 1-n-arg2-x90+arg1-x80-(-2+n)*x90-(-2+n)*x80 > 0 /\ arg3 > 0 /\ -1+n >= 0 /\ 1+arg4 > 0), cost: n
Sub-proof via acceration calculus written to file:///tmp/tmpnam_AJGfpi.txt

Applied instantiation
Original rule:
f587_0_main_LT -> f587_0_main_LT : arg2'=n+arg2+n*x90, arg4'=2*n+arg4, arg1'=-n*x80+arg1, arg3'=-n-arg2-x90-x90*(-1+n)-x80*(-1+n)+arg1-x80, (1+x90 > 0 /\ 1+x80 > 0 /\ 1+arg2 > 0 /\ 1-n-arg2-x90+arg1-x80-(-2+n)*x90-(-2+n)*x80 > 0 /\ arg3 > 0 /\ -1+n >= 0 /\ 1+arg4 > 0), cost: n
New rule:
f587_0_main_LT -> f587_0_main_LT : arg2'=arg1, arg4'=-2*arg2+arg4+2*arg1, arg1'=arg1, arg3'=0, (1 > 0 /\ 1+arg2 > 0 /\ -1-arg2+arg1 >= 0 /\ arg3 > 0 /\ 1+arg4 > 0), cost: -arg2+arg1

Applied simplification
Original rule:
f587_0_main_LT -> f587_0_main_LT : arg2'=arg1, arg4'=-2*arg2+arg4+2*arg1, arg1'=arg1, arg3'=0, (1 > 0 /\ 1+arg2 > 0 /\ -1-arg2+arg1 >= 0 /\ arg3 > 0 /\ 1+arg4 > 0), cost: -arg2+arg1
New rule:
f587_0_main_LT -> f587_0_main_LT : arg2'=arg1, arg4'=-2*arg2+arg4+2*arg1, arg1'=arg1, arg3'=0, (1+arg2 > 0 /\ -1-arg2+arg1 >= 0 /\ arg3 > 0 /\ 1+arg4 > 0), cost: -arg2+arg1

Applied deletion
Removed the following rules: 4

Accelerated simple loops
Start location: __init
   3: f1_0_main_Load -> f587_0_main_LT : arg2'=arg1P0-arg3P0, arg4'=2, arg1'=arg1P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ 1+arg1P0-arg3P0 > 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 1
   6: f587_0_main_LT -> f587_0_main_LT : arg2'=arg1, arg4'=-2*arg2+arg4+2*arg1, arg1'=arg1, arg3'=0, (1+arg2 > 0 /\ -1-arg2+arg1 >= 0 /\ arg3 > 0 /\ 1+arg4 > 0), cost: -arg2+arg1
   2: __init -> f1_0_main_Load : arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg3'=arg3P2, TRUE, cost: 1


Applied chaining
First rule:
f1_0_main_Load -> f587_0_main_LT : arg2'=arg1P0-arg3P0, arg4'=2, arg1'=arg1P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ 1+arg1P0-arg3P0 > 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 1
Second rule:
f587_0_main_LT -> f587_0_main_LT : arg2'=arg1, arg4'=-2*arg2+arg4+2*arg1, arg1'=arg1, arg3'=0, (1+arg2 > 0 /\ -1-arg2+arg1 >= 0 /\ arg3 > 0 /\ 1+arg4 > 0), cost: -arg2+arg1
New rule:
f1_0_main_Load -> f587_0_main_LT : arg2'=arg1P0, arg4'=2+2*arg3P0, arg1'=arg1P0, arg3'=0, (1+arg1P0-arg3P0 > 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ arg3P0 > 0), cost: 1+arg3P0

Applied deletion
Removed the following rules: 6

Chained accelerated rules with incoming rules
Start location: __init
   3: f1_0_main_Load -> f587_0_main_LT : arg2'=arg1P0-arg3P0, arg4'=2, arg1'=arg1P0, arg3'=arg3P0, (1+arg1P0 > 0 /\ 1+arg1P0-arg3P0 > 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 1
   7: f1_0_main_Load -> f587_0_main_LT : arg2'=arg1P0, arg4'=2+2*arg3P0, arg1'=arg1P0, arg3'=0, (1+arg1P0-arg3P0 > 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ arg3P0 > 0), cost: 1+arg3P0
   2: __init -> f1_0_main_Load : arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg3'=arg3P2, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
  <empty>


Computing asymptotic complexity

Proved the following lower bound
Complexity:  Unknown
Cpx degree: ?

Solved cost: 0
Rule cost:   0

