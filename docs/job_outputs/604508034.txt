NO

Initial ITS

Start location: __init
Program variables: arg1 arg2
   0: f1_0_main_Load -> f1_0_main_Load\' : arg1'=arg1p1, arg2'=arg2p1, (-arg2p1+arg2 == 0 /\ 1+x9 > 0 /\ -arg1p1+arg1 == 0 /\ x9-2*x10 == 0 /\ 1+x8 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1
   1: f1_0_main_Load\' -> f128_0_loop_GE : arg1'=arg1p2, arg2'=arg2p2, (x14-2*x15 >= 0 /\ x14-2*x15 == 0 /\ -2+x14-2*x15 < 0 /\ 1+x13 > 0 /\ -x13-arg1p2 == 0 /\ arg1 > 0 /\ 1+x14 > 0 /\ -1+arg2 > 0), cost: 1
   2: f128_0_loop_GE -> f128_0_loop_GE : arg1'=arg1p3, arg2'=arg2p3, (-5-arg1p3 == 0 /\ -5-arg1 == 0), cost: 1
   3: f128_0_loop_GE -> f128_0_loop_GE : arg1'=arg1p4, arg2'=arg2p4, (5+arg1 < 0 /\ 1-arg1p4+arg1 == 0 /\ arg1 < 0), cost: 1
   4: f128_0_loop_GE -> f128_0_loop_GE : arg1'=arg1p5, arg2'=arg2p5, (1-arg1p5+arg1 == 0 /\ 5+arg1 > 0 /\ arg1 < 0), cost: 1
   5: __init -> f1_0_main_Load : arg1'=arg1p6, arg2'=arg2p6, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2
   2: f128_0_loop_GE -> f128_0_loop_GE : arg1'=arg1p3, arg2'=arg2p3, (-5-arg1p3 == 0 /\ -5-arg1 == 0), cost: 1
   3: f128_0_loop_GE -> f128_0_loop_GE : arg1'=arg1p4, arg2'=arg2p4, (5+arg1 < 0 /\ 1-arg1p4+arg1 == 0 /\ arg1 < 0), cost: 1
   4: f128_0_loop_GE -> f128_0_loop_GE : arg1'=arg1p5, arg2'=arg2p5, (1-arg1p5+arg1 == 0 /\ 5+arg1 > 0 /\ arg1 < 0), cost: 1
   7: __init -> f128_0_loop_GE : arg1'=arg1p2, arg2'=arg2p2, (x14-2*x15 >= 0 /\ x14-2*x15 == 0 /\ arg1p1 > 0 /\ -1+arg2p6 > 0 /\ -2+x14-2*x15 < 0 /\ -arg1p1+arg1p6 == 0 /\ arg1p6 > 0 /\ 1+x13 > 0 /\ 1+x9 > 0 /\ -x13-arg1p2 == 0 /\ x9-2*x10 == 0 /\ 1+x8 > 0 /\ -arg2p1+arg2p6 == 0 /\ -1+arg2p1 > 0 /\ 1+x14 > 0), cost: 1

	Eliminating location f1_0_main_Load by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_Load : arg1'=arg1p6, arg2'=arg2p6, T, cost: 1
	Second rule:
	f1_0_main_Load -> f1_0_main_Load\' : arg1'=arg1p1, arg2'=arg2p1, (-arg2p1+arg2 == 0 /\ 1+x9 > 0 /\ -arg1p1+arg1 == 0 /\ x9-2*x10 == 0 /\ 1+x8 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1
	New rule:
	__init -> f1_0_main_Load\' : arg1'=arg1p1, arg2'=arg2p1, (-1+arg2p6 > 0 /\ -arg1p1+arg1p6 == 0 /\ arg1p6 > 0 /\ 1+x9 > 0 /\ x9-2*x10 == 0 /\ 1+x8 > 0 /\ -arg2p1+arg2p6 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 5
	
	Eliminating location f1_0_main_Load\' by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_Load\' : arg1'=arg1p1, arg2'=arg2p1, (-1+arg2p6 > 0 /\ -arg1p1+arg1p6 == 0 /\ arg1p6 > 0 /\ 1+x9 > 0 /\ x9-2*x10 == 0 /\ 1+x8 > 0 /\ -arg2p1+arg2p6 == 0), cost: 1
	Second rule:
	f1_0_main_Load\' -> f128_0_loop_GE : arg1'=arg1p2, arg2'=arg2p2, (x14-2*x15 >= 0 /\ x14-2*x15 == 0 /\ -2+x14-2*x15 < 0 /\ 1+x13 > 0 /\ -x13-arg1p2 == 0 /\ arg1 > 0 /\ 1+x14 > 0 /\ -1+arg2 > 0), cost: 1
	New rule:
	__init -> f128_0_loop_GE : arg1'=arg1p2, arg2'=arg2p2, (x14-2*x15 >= 0 /\ x14-2*x15 == 0 /\ arg1p1 > 0 /\ -1+arg2p6 > 0 /\ -2+x14-2*x15 < 0 /\ -arg1p1+arg1p6 == 0 /\ arg1p6 > 0 /\ 1+x13 > 0 /\ 1+x9 > 0 /\ -x13-arg1p2 == 0 /\ x9-2*x10 == 0 /\ 1+x8 > 0 /\ -arg2p1+arg2p6 == 0 /\ -1+arg2p1 > 0 /\ 1+x14 > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 1 6

Simplified Transitions

Start location: __init
Program variables: arg1 arg2
   8: f128_0_loop_GE -> f128_0_loop_GE : arg1'=-5, arg2'=arg2p3, -5-arg1 == 0, cost: 1
   9: f128_0_loop_GE -> f128_0_loop_GE : arg1'=1+arg1, arg2'=arg2p4, (5+arg1 < 0 /\ arg1 < 0), cost: 1
  10: f128_0_loop_GE -> f128_0_loop_GE : arg1'=1+arg1, arg2'=arg2p5, (5+arg1 > 0 /\ arg1 < 0), cost: 1
  11: __init -> f128_0_loop_GE : arg1'=-x13, arg2'=arg2p2, (1+x13 > 0 /\ 1+2*x15 > 0 /\ 1+2*x10 > 0), cost: 1

	Propagated Equalities

	Original rule:
	f128_0_loop_GE -> f128_0_loop_GE : arg1'=arg1p3, arg2'=arg2p3, (-5-arg1p3 == 0 /\ -5-arg1 == 0), cost: 1
	New rule:
	f128_0_loop_GE -> f128_0_loop_GE : arg1'=-5, arg2'=arg2p3, (0 == 0 /\ -5-arg1 == 0), cost: 1
	
		propagated equality arg1p3 = -5
		
	Simplified Guard

	Original rule:
	f128_0_loop_GE -> f128_0_loop_GE : arg1'=-5, arg2'=arg2p3, (0 == 0 /\ -5-arg1 == 0), cost: 1
	New rule:
	f128_0_loop_GE -> f128_0_loop_GE : arg1'=-5, arg2'=arg2p3, -5-arg1 == 0, cost: 1
	
	Propagated Equalities

	Original rule:
	f128_0_loop_GE -> f128_0_loop_GE : arg1'=arg1p4, arg2'=arg2p4, (5+arg1 < 0 /\ 1-arg1p4+arg1 == 0 /\ arg1 < 0), cost: 1
	New rule:
	f128_0_loop_GE -> f128_0_loop_GE : arg1'=1+arg1, arg2'=arg2p4, (0 == 0 /\ 5+arg1 < 0 /\ arg1 < 0), cost: 1
	
		propagated equality arg1p4 = 1+arg1
		
	Simplified Guard

	Original rule:
	f128_0_loop_GE -> f128_0_loop_GE : arg1'=1+arg1, arg2'=arg2p4, (0 == 0 /\ 5+arg1 < 0 /\ arg1 < 0), cost: 1
	New rule:
	f128_0_loop_GE -> f128_0_loop_GE : arg1'=1+arg1, arg2'=arg2p4, (5+arg1 < 0 /\ arg1 < 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f128_0_loop_GE -> f128_0_loop_GE : arg1'=arg1p5, arg2'=arg2p5, (1-arg1p5+arg1 == 0 /\ 5+arg1 > 0 /\ arg1 < 0), cost: 1
	New rule:
	f128_0_loop_GE -> f128_0_loop_GE : arg1'=1+arg1, arg2'=arg2p5, (0 == 0 /\ 5+arg1 > 0 /\ arg1 < 0), cost: 1
	
		propagated equality arg1p5 = 1+arg1
		
	Simplified Guard

	Original rule:
	f128_0_loop_GE -> f128_0_loop_GE : arg1'=1+arg1, arg2'=arg2p5, (0 == 0 /\ 5+arg1 > 0 /\ arg1 < 0), cost: 1
	New rule:
	f128_0_loop_GE -> f128_0_loop_GE : arg1'=1+arg1, arg2'=arg2p5, (5+arg1 > 0 /\ arg1 < 0), cost: 1
	
	Propagated Equalities

	Original rule:
	__init -> f128_0_loop_GE : arg1'=arg1p2, arg2'=arg2p2, (x14-2*x15 >= 0 /\ x14-2*x15 == 0 /\ arg1p1 > 0 /\ -1+arg2p6 > 0 /\ -2+x14-2*x15 < 0 /\ -arg1p1+arg1p6 == 0 /\ arg1p6 > 0 /\ 1+x13 > 0 /\ 1+x9 > 0 /\ -x13-arg1p2 == 0 /\ x9-2*x10 == 0 /\ 1+x8 > 0 /\ -arg2p1+arg2p6 == 0 /\ -1+arg2p1 > 0 /\ 1+x14 > 0), cost: 1
	New rule:
	__init -> f128_0_loop_GE : arg1'=-x13, arg2'=arg2p2, (0 == 0 /\ x14-2*x15 >= 0 /\ x14-2*x15 == 0 /\ arg1p1 > 0 /\ -1+arg2p6 > 0 /\ -2+x14-2*x15 < 0 /\ -arg1p1+arg1p6 == 0 /\ arg1p6 > 0 /\ 1+x13 > 0 /\ 1+x9 > 0 /\ x9-2*x10 == 0 /\ 1+x8 > 0 /\ -arg2p1+arg2p6 == 0 /\ -1+arg2p1 > 0 /\ 1+x14 > 0), cost: 1
	
		propagated equality arg1p2 = -x13
		
	Propagated Equalities

	Original rule:
	__init -> f128_0_loop_GE : arg1'=-x13, arg2'=arg2p2, (0 == 0 /\ x14-2*x15 >= 0 /\ x14-2*x15 == 0 /\ arg1p1 > 0 /\ -1+arg2p6 > 0 /\ -2+x14-2*x15 < 0 /\ -arg1p1+arg1p6 == 0 /\ arg1p6 > 0 /\ 1+x13 > 0 /\ 1+x9 > 0 /\ x9-2*x10 == 0 /\ 1+x8 > 0 /\ -arg2p1+arg2p6 == 0 /\ -1+arg2p1 > 0 /\ 1+x14 > 0), cost: 1
	New rule:
	__init -> f128_0_loop_GE : arg1'=-x13, arg2'=arg2p2, (0 >= 0 /\ 0 == 0 /\ -2 < 0 /\ -1+arg2p6 > 0 /\ arg1p6 > 0 /\ 1+x13 > 0 /\ 1+2*x15 > 0 /\ 1+2*x10 > 0 /\ 1+x8 > 0), cost: 1
	
		propagated equality x14 = 2*x15
		
		propagated equality arg1p1 = arg1p6
		
		propagated equality x9 = 2*x10
		
		propagated equality arg2p1 = arg2p6
		
	Simplified Guard

	Original rule:
	__init -> f128_0_loop_GE : arg1'=-x13, arg2'=arg2p2, (0 >= 0 /\ 0 == 0 /\ -2 < 0 /\ -1+arg2p6 > 0 /\ arg1p6 > 0 /\ 1+x13 > 0 /\ 1+2*x15 > 0 /\ 1+2*x10 > 0 /\ 1+x8 > 0), cost: 1
	New rule:
	__init -> f128_0_loop_GE : arg1'=-x13, arg2'=arg2p2, (-1+arg2p6 > 0 /\ arg1p6 > 0 /\ 1+x13 > 0 /\ 1+2*x15 > 0 /\ 1+2*x10 > 0 /\ 1+x8 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	__init -> f128_0_loop_GE : arg1'=-x13, arg2'=arg2p2, (-1+arg2p6 > 0 /\ arg1p6 > 0 /\ 1+x13 > 0 /\ 1+2*x15 > 0 /\ 1+2*x10 > 0 /\ 1+x8 > 0), cost: 1
	New rule:
	__init -> f128_0_loop_GE : arg1'=-x13, arg2'=arg2p2, (1+x13 > 0 /\ 1+2*x15 > 0 /\ 1+2*x10 > 0), cost: 1

Step with 11

	Trace

	11[(1+x13 > 0 /\ 1+2*x15 > 0 /\ 1+2*x10 > 0)]
	
	Blocked

	[{}, {}]

Step with 8

	Trace

	11[(1+x13 > 0 /\ 1+2*x15 > 0 /\ 1+2*x10 > 0)], 8[(-5-arg1 == 0)]
	
	Blocked

	[{}, {}, {}]

Nonterm

Start location: __init
Program variables: arg1 arg2
   8: f128_0_loop_GE -> f128_0_loop_GE : arg1'=-5, arg2'=arg2p3, -5-arg1 == 0, cost: 1
   9: f128_0_loop_GE -> f128_0_loop_GE : arg1'=1+arg1, arg2'=arg2p4, (5+arg1 < 0 /\ arg1 < 0), cost: 1
  10: f128_0_loop_GE -> f128_0_loop_GE : arg1'=1+arg1, arg2'=arg2p5, (5+arg1 > 0 /\ arg1 < 0), cost: 1
  12: f128_0_loop_GE -> LoAT_sink : (-5-arg1 >= 0 /\ 5+arg1 >= 0 /\ -1+n >= 0), cost: NONTERM
  11: __init -> f128_0_loop_GE : arg1'=-x13, arg2'=arg2p2, (1+x13 > 0 /\ 1+2*x15 > 0 /\ 1+2*x10 > 0), cost: 1

	Certificate of Non-Termination

	Original rule:
	f128_0_loop_GE -> f128_0_loop_GE : arg1'=-5, arg2'=arg2p3, (-5-arg1 == 0), cost: 1
	New rule:
	f128_0_loop_GE -> LoAT_sink : (-5-arg1 >= 0 /\ 5+arg1 >= 0 /\ -1+n >= 0), cost: NONTERM

		-5-arg1 >= 0 [0]: monotonic increase yields -5-arg1 >= 0
		
		5+arg1 >= 0 [0]: monotonic increase yields 5+arg1 >= 0
		
		Replacement map: {-5-arg1 >= 0 -> -5-arg1 >= 0, 5+arg1 >= 0 -> 5+arg1 >= 0}

Step with 12

	Trace

	11[(1+x13 > 0 /\ 1+2*x15 > 0 /\ 1+2*x10 > 0)], 12[(-5-arg1 >= 0 /\ 5+arg1 >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {}, {12[T]}]

Refute

	Counterexample

	[ arg1=-5 arg2=0 ] 11 [ arg1=arg1 arg2=arg2 ] 12
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
