NO

Initial ITS

Start location: l4
Program variables: __const_300^0 __disjvr_0^0 x^0
   0: l0 -> l2 : __const_300^0'=__const_300^post1, __disjvr_0^0'=__disjvr_0^post1, x^0'=x^post1, (1+x^post1-x^0 == 0 /\ -__disjvr_0^post1+__disjvr_0^0 == 0 /\ __const_300^0-__const_300^post1 == 0), cost: 1
   1: l2 -> l1 : __const_300^0'=__const_300^post2, __disjvr_0^0'=__disjvr_0^post2, x^0'=x^post2, (-x^post2+x^0 == 0 /\ -__disjvr_0^post2+__disjvr_0^0 == 0 /\ __const_300^0-__const_300^post2 == 0 /\ __disjvr_0^post2-__disjvr_0^0 == 0), cost: 1
   2: l1 -> l0 : __const_300^0'=__const_300^post3, __disjvr_0^0'=__disjvr_0^post3, x^0'=x^post3, (-x^post3+x^0 == 0 /\ -__disjvr_0^post3+__disjvr_0^0 == 0 /\ __const_300^0-__const_300^post3 == 0), cost: 1
   3: l3 -> l0 : __const_300^0'=__const_300^post4, __disjvr_0^0'=__disjvr_0^post4, x^0'=x^post4, (__const_300^0-__const_300^post4 == 0 /\ -__const_300^0+x^post4 == 0 /\ -__disjvr_0^post4+__disjvr_0^0 == 0), cost: 1
   4: l4 -> l3 : __const_300^0'=__const_300^post5, __disjvr_0^0'=__disjvr_0^post5, x^0'=x^post5, (__const_300^0-__const_300^post5 == 0 /\ __disjvr_0^0-__disjvr_0^post5 == 0 /\ -x^post5+x^0 == 0), cost: 1

Chained Linear Paths

Start location: l4
Program variables: __const_300^0 __disjvr_0^0 x^0
   7: l0 -> l0 : __const_300^0'=__const_300^post3, __disjvr_0^0'=__disjvr_0^post3, x^0'=x^post3, (__disjvr_0^post2-__disjvr_0^post3 == 0 /\ -__disjvr_0^post2+__disjvr_0^post1 == 0 /\ x^post2-x^post3 == 0 /\ -x^post2+x^post1 == 0 /\ 1+x^post1-x^0 == 0 /\ -__disjvr_0^post1+__disjvr_0^0 == 0 /\ __disjvr_0^post2-__disjvr_0^post1 == 0 /\ -__const_300^post2+__const_300^post1 == 0 /\ __const_300^0-__const_300^post1 == 0 /\ __const_300^post2-__const_300^post3 == 0), cost: 1
   5: l4 -> l0 : __const_300^0'=__const_300^post4, __disjvr_0^0'=__disjvr_0^post4, x^0'=x^post4, (__const_300^0-__const_300^post5 == 0 /\ __disjvr_0^0-__disjvr_0^post5 == 0 /\ x^post4-__const_300^post5 == 0 /\ __const_300^post5-__const_300^post4 == 0 /\ -x^post5+x^0 == 0 /\ -__disjvr_0^post4+__disjvr_0^post5 == 0), cost: 1

	Eliminating location l3 by chaining:

	Applied chaining

	First rule:
	l4 -> l3 : __const_300^0'=__const_300^post5, __disjvr_0^0'=__disjvr_0^post5, x^0'=x^post5, (__const_300^0-__const_300^post5 == 0 /\ __disjvr_0^0-__disjvr_0^post5 == 0 /\ -x^post5+x^0 == 0), cost: 1
	Second rule:
	l3 -> l0 : __const_300^0'=__const_300^post4, __disjvr_0^0'=__disjvr_0^post4, x^0'=x^post4, (__const_300^0-__const_300^post4 == 0 /\ -__const_300^0+x^post4 == 0 /\ -__disjvr_0^post4+__disjvr_0^0 == 0), cost: 1
	New rule:
	l4 -> l0 : __const_300^0'=__const_300^post4, __disjvr_0^0'=__disjvr_0^post4, x^0'=x^post4, (__const_300^0-__const_300^post5 == 0 /\ __disjvr_0^0-__disjvr_0^post5 == 0 /\ x^post4-__const_300^post5 == 0 /\ __const_300^post5-__const_300^post4 == 0 /\ -x^post5+x^0 == 0 /\ -__disjvr_0^post4+__disjvr_0^post5 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 3 4
	
	Eliminating location l2 by chaining:

	Applied chaining

	First rule:
	l0 -> l2 : __const_300^0'=__const_300^post1, __disjvr_0^0'=__disjvr_0^post1, x^0'=x^post1, (1+x^post1-x^0 == 0 /\ -__disjvr_0^post1+__disjvr_0^0 == 0 /\ __const_300^0-__const_300^post1 == 0), cost: 1
	Second rule:
	l2 -> l1 : __const_300^0'=__const_300^post2, __disjvr_0^0'=__disjvr_0^post2, x^0'=x^post2, (-x^post2+x^0 == 0 /\ -__disjvr_0^post2+__disjvr_0^0 == 0 /\ __const_300^0-__const_300^post2 == 0 /\ __disjvr_0^post2-__disjvr_0^0 == 0), cost: 1
	New rule:
	l0 -> l1 : __const_300^0'=__const_300^post2, __disjvr_0^0'=__disjvr_0^post2, x^0'=x^post2, (-__disjvr_0^post2+__disjvr_0^post1 == 0 /\ -x^post2+x^post1 == 0 /\ 1+x^post1-x^0 == 0 /\ -__disjvr_0^post1+__disjvr_0^0 == 0 /\ __disjvr_0^post2-__disjvr_0^post1 == 0 /\ -__const_300^post2+__const_300^post1 == 0 /\ __const_300^0-__const_300^post1 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 1
	
	Eliminating location l1 by chaining:

	Applied chaining

	First rule:
	l0 -> l1 : __const_300^0'=__const_300^post2, __disjvr_0^0'=__disjvr_0^post2, x^0'=x^post2, (-__disjvr_0^post2+__disjvr_0^post1 == 0 /\ -x^post2+x^post1 == 0 /\ 1+x^post1-x^0 == 0 /\ -__disjvr_0^post1+__disjvr_0^0 == 0 /\ __disjvr_0^post2-__disjvr_0^post1 == 0 /\ -__const_300^post2+__const_300^post1 == 0 /\ __const_300^0-__const_300^post1 == 0), cost: 1
	Second rule:
	l1 -> l0 : __const_300^0'=__const_300^post3, __disjvr_0^0'=__disjvr_0^post3, x^0'=x^post3, (-x^post3+x^0 == 0 /\ -__disjvr_0^post3+__disjvr_0^0 == 0 /\ __const_300^0-__const_300^post3 == 0), cost: 1
	New rule:
	l0 -> l0 : __const_300^0'=__const_300^post3, __disjvr_0^0'=__disjvr_0^post3, x^0'=x^post3, (__disjvr_0^post2-__disjvr_0^post3 == 0 /\ -__disjvr_0^post2+__disjvr_0^post1 == 0 /\ x^post2-x^post3 == 0 /\ -x^post2+x^post1 == 0 /\ 1+x^post1-x^0 == 0 /\ -__disjvr_0^post1+__disjvr_0^0 == 0 /\ __disjvr_0^post2-__disjvr_0^post1 == 0 /\ -__const_300^post2+__const_300^post1 == 0 /\ __const_300^0-__const_300^post1 == 0 /\ __const_300^post2-__const_300^post3 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 2 6

Simplified Transitions

Start location: l4
Program variables: __const_300^0 x^0
   9: l0 -> l0 : x^0'=-1+x^0, T, cost: 1
   8: l4 -> l0 : x^0'=__const_300^0, T, cost: 1

	Propagated Equalities

	Original rule:
	l4 -> l0 : __const_300^0'=__const_300^post4, __disjvr_0^0'=__disjvr_0^post4, x^0'=x^post4, (__const_300^0-__const_300^post5 == 0 /\ __disjvr_0^0-__disjvr_0^post5 == 0 /\ x^post4-__const_300^post5 == 0 /\ __const_300^post5-__const_300^post4 == 0 /\ -x^post5+x^0 == 0 /\ -__disjvr_0^post4+__disjvr_0^post5 == 0), cost: 1
	New rule:
	l4 -> l0 : __const_300^0'=__const_300^post5, __disjvr_0^0'=__disjvr_0^post5, x^0'=__const_300^post5, (0 == 0 /\ __const_300^0-__const_300^post5 == 0 /\ __disjvr_0^0-__disjvr_0^post5 == 0 /\ -x^post5+x^0 == 0), cost: 1
	
		propagated equality x^post4 = __const_300^post5
		
		propagated equality __const_300^post4 = __const_300^post5
		
		propagated equality __disjvr_0^post4 = __disjvr_0^post5
		
	Propagated Equalities

	Original rule:
	l4 -> l0 : __const_300^0'=__const_300^post5, __disjvr_0^0'=__disjvr_0^post5, x^0'=__const_300^post5, (0 == 0 /\ __const_300^0-__const_300^post5 == 0 /\ __disjvr_0^0-__disjvr_0^post5 == 0 /\ -x^post5+x^0 == 0), cost: 1
	New rule:
	l4 -> l0 : __const_300^0'=__const_300^0, __disjvr_0^0'=__disjvr_0^0, x^0'=__const_300^0, 0 == 0, cost: 1
	
		propagated equality __const_300^post5 = __const_300^0
		
		propagated equality __disjvr_0^post5 = __disjvr_0^0
		
		propagated equality x^post5 = x^0
		
	Simplified Guard

	Original rule:
	l4 -> l0 : __const_300^0'=__const_300^0, __disjvr_0^0'=__disjvr_0^0, x^0'=__const_300^0, 0 == 0, cost: 1
	New rule:
	l4 -> l0 : __const_300^0'=__const_300^0, __disjvr_0^0'=__disjvr_0^0, x^0'=__const_300^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l4 -> l0 : __const_300^0'=__const_300^0, __disjvr_0^0'=__disjvr_0^0, x^0'=__const_300^0, T, cost: 1
	New rule:
	l4 -> l0 : x^0'=__const_300^0, T, cost: 1
	
	Propagated Equalities

	Original rule:
	l0 -> l0 : __const_300^0'=__const_300^post3, __disjvr_0^0'=__disjvr_0^post3, x^0'=x^post3, (__disjvr_0^post2-__disjvr_0^post3 == 0 /\ -__disjvr_0^post2+__disjvr_0^post1 == 0 /\ x^post2-x^post3 == 0 /\ -x^post2+x^post1 == 0 /\ 1+x^post1-x^0 == 0 /\ -__disjvr_0^post1+__disjvr_0^0 == 0 /\ __disjvr_0^post2-__disjvr_0^post1 == 0 /\ -__const_300^post2+__const_300^post1 == 0 /\ __const_300^0-__const_300^post1 == 0 /\ __const_300^post2-__const_300^post3 == 0), cost: 1
	New rule:
	l0 -> l0 : __const_300^0'=__const_300^post2, __disjvr_0^0'=__disjvr_0^post2, x^0'=x^post2, (0 == 0 /\ -__disjvr_0^post2+__disjvr_0^post1 == 0 /\ -x^post2+x^post1 == 0 /\ 1+x^post1-x^0 == 0 /\ -__disjvr_0^post1+__disjvr_0^0 == 0 /\ __disjvr_0^post2-__disjvr_0^post1 == 0 /\ -__const_300^post2+__const_300^post1 == 0 /\ __const_300^0-__const_300^post1 == 0), cost: 1
	
		propagated equality __disjvr_0^post3 = __disjvr_0^post2
		
		propagated equality x^post3 = x^post2
		
		propagated equality __const_300^post3 = __const_300^post2
		
	Propagated Equalities

	Original rule:
	l0 -> l0 : __const_300^0'=__const_300^post2, __disjvr_0^0'=__disjvr_0^post2, x^0'=x^post2, (0 == 0 /\ -__disjvr_0^post2+__disjvr_0^post1 == 0 /\ -x^post2+x^post1 == 0 /\ 1+x^post1-x^0 == 0 /\ -__disjvr_0^post1+__disjvr_0^0 == 0 /\ __disjvr_0^post2-__disjvr_0^post1 == 0 /\ -__const_300^post2+__const_300^post1 == 0 /\ __const_300^0-__const_300^post1 == 0), cost: 1
	New rule:
	l0 -> l0 : __const_300^0'=__const_300^0, __disjvr_0^0'=__disjvr_0^0, x^0'=-1+x^0, 0 == 0, cost: 1
	
		propagated equality __disjvr_0^post1 = __disjvr_0^post2
		
		propagated equality x^post1 = x^post2
		
		propagated equality x^post2 = -1+x^0
		
		propagated equality __disjvr_0^post2 = __disjvr_0^0
		
		propagated equality __const_300^post1 = __const_300^post2
		
		propagated equality __const_300^post2 = __const_300^0
		
	Simplified Guard

	Original rule:
	l0 -> l0 : __const_300^0'=__const_300^0, __disjvr_0^0'=__disjvr_0^0, x^0'=-1+x^0, 0 == 0, cost: 1
	New rule:
	l0 -> l0 : __const_300^0'=__const_300^0, __disjvr_0^0'=__disjvr_0^0, x^0'=-1+x^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l0 : __const_300^0'=__const_300^0, __disjvr_0^0'=__disjvr_0^0, x^0'=-1+x^0, T, cost: 1
	New rule:
	l0 -> l0 : x^0'=-1+x^0, T, cost: 1

Step with 8

	Trace

	8[T]
	
	Blocked

	[{}, {}]

Step with 9

	Trace

	8[T], 9[T]
	
	Blocked

	[{}, {}, {}]

Nonterm

Start location: l4
Program variables: __const_300^0 x^0
   9: l0 -> l0 : x^0'=-1+x^0, T, cost: 1
  10: l0 -> LoAT_sink : -1+n >= 0, cost: NONTERM
  11: l0 -> l0 : x^0'=-n+x^0, -1+n >= 0, cost: 1
   8: l4 -> l0 : x^0'=__const_300^0, T, cost: 1

	Certificate of Non-Termination

	Original rule:
	l0 -> l0 : x^0'=-1+x^0, T, cost: 1
	New rule:
	l0 -> LoAT_sink : -1+n >= 0, cost: NONTERM

		Replacement map: {}

	Loop Acceleration

	Original rule:
	l0 -> l0 : x^0'=-1+x^0, T, cost: 1
	New rule:
	l0 -> l0 : x^0'=-n+x^0, -1+n >= 0, cost: 1

		Replacement map: {}

Step with 10

	Trace

	8[T], 10[-1+n >= 0]
	
	Blocked

	[{}, {}, {10[T]}]

Refute

	Counterexample

	[ __const_300^0=0 x^0=0 ] 8 [ __const_300^0=0 x^0=x^0 ] 10
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
