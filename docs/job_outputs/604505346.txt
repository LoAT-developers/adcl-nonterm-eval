WORST_CASE(Omega(0),?)

Initial ITS
Start location: __init
   0: f1_0_main_ConstantStackPush -> f138_0_ack_GT : arg2'=arg2P0, arg1'=arg1P0, (10-arg2P0 == 0 /\ 12-arg1P0 == 0), cost: 1
   1: f138_0_ack_GT -> f138_0_ack_GT : arg2'=arg2P1, arg1'=arg1P1, (1-arg1P1 == 0 /\ arg2 > 0 /\ -1+arg2-arg2P1 == 0 /\ -1+arg1 < 0), cost: 1
   2: f138_0_ack_GT -> f138_0_ack_GT : arg2'=arg2P2, arg1'=arg1P2, (-1+arg1-arg1P2 == 0 /\ arg2 > 0 /\ arg1 > 0 /\ -1 < 0 /\ arg2-arg2P2 == 0), cost: 1
   3: f138_0_ack_GT -> f138_0_ack_GT : arg2'=arg2P3, arg1'=arg1P3, (-1+arg2-arg2P3 == 0 /\ arg2 > 0 /\ arg1 > 0 /\ -1 < 0), cost: 1
   4: __init -> f1_0_main_ConstantStackPush : arg2'=arg2P4, arg1'=arg1P4, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_ConstantStackPush -> f138_0_ack_GT : arg2'=arg2P0, arg1'=arg1P0, (10-arg2P0 == 0 /\ 12-arg1P0 == 0), cost: 1
New rule:
f1_0_main_ConstantStackPush -> f138_0_ack_GT : arg2'=10, arg1'=12, TRUE, cost: 1

Applied preprocessing
Original rule:
f138_0_ack_GT -> f138_0_ack_GT : arg2'=arg2P1, arg1'=arg1P1, (1-arg1P1 == 0 /\ arg2 > 0 /\ -1+arg2-arg2P1 == 0 /\ -1+arg1 < 0), cost: 1
New rule:
f138_0_ack_GT -> f138_0_ack_GT : arg2'=-1+arg2, arg1'=1, (arg2 > 0 /\ 1-arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f138_0_ack_GT -> f138_0_ack_GT : arg2'=arg2P2, arg1'=arg1P2, (-1+arg1-arg1P2 == 0 /\ arg2 > 0 /\ arg1 > 0 /\ -1 < 0 /\ arg2-arg2P2 == 0), cost: 1
New rule:
f138_0_ack_GT -> f138_0_ack_GT : arg1'=-1+arg1, (arg2 > 0 /\ arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f138_0_ack_GT -> f138_0_ack_GT : arg2'=arg2P3, arg1'=arg1P3, (-1+arg2-arg2P3 == 0 /\ arg2 > 0 /\ arg1 > 0 /\ -1 < 0), cost: 1
New rule:
f138_0_ack_GT -> f138_0_ack_GT : arg2'=-1+arg2, arg1'=arg1P3, (arg2 > 0 /\ arg1 > 0), cost: 1

Simplified rules
Start location: __init
   5: f1_0_main_ConstantStackPush -> f138_0_ack_GT : arg2'=10, arg1'=12, TRUE, cost: 1
   6: f138_0_ack_GT -> f138_0_ack_GT : arg2'=-1+arg2, arg1'=1, (arg2 > 0 /\ 1-arg1 > 0), cost: 1
   7: f138_0_ack_GT -> f138_0_ack_GT : arg1'=-1+arg1, (arg2 > 0 /\ arg1 > 0), cost: 1
   8: f138_0_ack_GT -> f138_0_ack_GT : arg2'=-1+arg2, arg1'=arg1P3, (arg2 > 0 /\ arg1 > 0), cost: 1
   4: __init -> f1_0_main_ConstantStackPush : arg2'=arg2P4, arg1'=arg1P4, TRUE, cost: 1


Applied acceleration
Original rule:
f138_0_ack_GT -> f138_0_ack_GT : arg1'=-1+arg1, (arg2 > 0 /\ arg1 > 0), cost: 1
New rule:
f138_0_ack_GT -> f138_0_ack_GT : arg1'=-n0+arg1, (arg2 > 0 /\ n0 >= 0 /\ 1-n0+arg1 > 0), cost: n0
Sub-proof via acceration calculus written to file:///tmp/tmpnam_HhBlCI.txt

Applied instantiation
Original rule:
f138_0_ack_GT -> f138_0_ack_GT : arg1'=-n0+arg1, (arg2 > 0 /\ n0 >= 0 /\ 1-n0+arg1 > 0), cost: n0
New rule:
f138_0_ack_GT -> f138_0_ack_GT : arg1'=0, (1 > 0 /\ arg2 > 0 /\ arg1 >= 0), cost: arg1

Applied acceleration
Original rule:
f138_0_ack_GT -> f138_0_ack_GT : arg2'=-1+arg2, arg1'=arg1P3, (arg2 > 0 /\ arg1 > 0), cost: 1
New rule:
f138_0_ack_GT -> f138_0_ack_GT : arg2'=arg2-n1, arg1'=arg1P3, (-1+n1 >= 0 /\ arg1P3 > 0 /\ arg1 > 0 /\ 1+arg2-n1 > 0), cost: n1
Sub-proof via acceration calculus written to file:///tmp/tmpnam_PFpnDF.txt

Applied instantiation
Original rule:
f138_0_ack_GT -> f138_0_ack_GT : arg2'=arg2-n1, arg1'=arg1P3, (-1+n1 >= 0 /\ arg1P3 > 0 /\ arg1 > 0 /\ 1+arg2-n1 > 0), cost: n1
New rule:
f138_0_ack_GT -> f138_0_ack_GT : arg2'=0, arg1'=arg1P3, (1 > 0 /\ arg1P3 > 0 /\ arg1 > 0 /\ -1+arg2 >= 0), cost: arg2

Applied simplification
Original rule:
f138_0_ack_GT -> f138_0_ack_GT : arg1'=0, (1 > 0 /\ arg2 > 0 /\ arg1 >= 0), cost: arg1
New rule:
f138_0_ack_GT -> f138_0_ack_GT : arg1'=0, (arg2 > 0 /\ arg1 >= 0), cost: arg1

Applied simplification
Original rule:
f138_0_ack_GT -> f138_0_ack_GT : arg2'=0, arg1'=arg1P3, (1 > 0 /\ arg1P3 > 0 /\ arg1 > 0 /\ -1+arg2 >= 0), cost: arg2
New rule:
f138_0_ack_GT -> f138_0_ack_GT : arg2'=0, arg1'=arg1P3, (arg1P3 > 0 /\ arg1 > 0 /\ -1+arg2 >= 0), cost: arg2

Applied deletion
Removed the following rules: 7 8

Accelerated simple loops
Start location: __init
   5: f1_0_main_ConstantStackPush -> f138_0_ack_GT : arg2'=10, arg1'=12, TRUE, cost: 1
   6: f138_0_ack_GT -> f138_0_ack_GT : arg2'=-1+arg2, arg1'=1, (arg2 > 0 /\ 1-arg1 > 0), cost: 1
  11: f138_0_ack_GT -> f138_0_ack_GT : arg1'=0, (arg2 > 0 /\ arg1 >= 0), cost: arg1
  12: f138_0_ack_GT -> f138_0_ack_GT : arg2'=0, arg1'=arg1P3, (arg1P3 > 0 /\ arg1 > 0 /\ -1+arg2 >= 0), cost: arg2
   4: __init -> f1_0_main_ConstantStackPush : arg2'=arg2P4, arg1'=arg1P4, TRUE, cost: 1


Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f138_0_ack_GT : arg2'=10, arg1'=12, TRUE, cost: 1
Second rule:
f138_0_ack_GT -> f138_0_ack_GT : arg1'=0, (arg2 > 0 /\ arg1 >= 0), cost: arg1
New rule:
f1_0_main_ConstantStackPush -> f138_0_ack_GT : arg2'=10, arg1'=0, (12 >= 0 /\ 10 > 0), cost: 13

Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f138_0_ack_GT : arg2'=10, arg1'=12, TRUE, cost: 1
Second rule:
f138_0_ack_GT -> f138_0_ack_GT : arg2'=0, arg1'=arg1P3, (arg1P3 > 0 /\ arg1 > 0 /\ -1+arg2 >= 0), cost: arg2
New rule:
f1_0_main_ConstantStackPush -> f138_0_ack_GT : arg2'=0, arg1'=arg1P3, arg1P3 > 0, cost: 11

Applied deletion
Removed the following rules: 6 11 12

Chained accelerated rules with incoming rules
Start location: __init
   5: f1_0_main_ConstantStackPush -> f138_0_ack_GT : arg2'=10, arg1'=12, TRUE, cost: 1
  13: f1_0_main_ConstantStackPush -> f138_0_ack_GT : arg2'=10, arg1'=0, (12 >= 0 /\ 10 > 0), cost: 13
  14: f1_0_main_ConstantStackPush -> f138_0_ack_GT : arg2'=0, arg1'=arg1P3, arg1P3 > 0, cost: 11
   4: __init -> f1_0_main_ConstantStackPush : arg2'=arg2P4, arg1'=arg1P4, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
  <empty>


Computing asymptotic complexity

Proved the following lower bound
Complexity:  Unknown
Cpx degree: ?

Solved cost: 0
Rule cost:   0

