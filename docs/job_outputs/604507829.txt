unknown

Initial ITS

Start location: __init
Program variables: arg1 arg2 arg3 arg4
   0: f1_0_main_Load -> f80_0_create_LE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, (-1+arg2-arg2p1 == 0 /\ -arg3p1 == 0 /\ 1+arg2 > 0 /\ arg1p1-arg1 <= 0 /\ arg1p1 > 0 /\ arg2-arg4p1 == 0 /\ arg1 > 0), cost: 1
   1: f80_0_create_LE -> f108_0_main_ArrayAccess : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, arg4'=arg4p2, (arg2p2-arg3 > 0 /\ -arg3p2+arg4 == 0 /\ arg3 > 0 /\ -1+arg2 < 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0), cost: 1
   2: f80_0_create_LE -> f108_0_main_ArrayAccess : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, arg4'=arg4p3, (arg1p3 > 0 /\ -arg3p3+arg4 == 0 /\ -1+arg2 < 0 /\ 1-arg2p3 == 0 /\ -arg1p3+arg1 >= 0 /\ arg1 > 0), cost: 1
   3: f80_0_create_LE -> f80_0_create_LE : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, arg4'=arg4p4, (-arg4p4+arg4 == 0 /\ arg1p4 > 0 /\ arg2 > 0 /\ arg1p4-arg1 <= 0 /\ -1+arg2-arg2p4 == 0 /\ arg1 > 0), cost: 1
   4: f108_0_main_ArrayAccess -> f147_0_get_LE : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, arg4'=arg4p5, (-1+x23-arg1p5 == 0 /\ -arg2p5+arg2 == 0 /\ arg3 > 0 /\ 1+x23 > 0 /\ arg1 > 0), cost: 1
   5: f147_0_get_LE -> f147_0_get_LE : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, arg4'=arg4p6, (-1-arg1p6+arg1 == 0 /\ 1+arg2 > 0 /\ -arg2+x27 < 0 /\ x27 > 0 /\ -arg2p6+x27 < 0 /\ arg1 > 0), cost: 1
   6: f147_0_get_LE -> f147_0_get_LE : arg1'=arg1p7, arg2'=arg2p7, arg3'=arg3p7, arg4'=arg4p7, (-1-arg1p7+arg1 == 0 /\ 1-arg2p7 == 0 /\ 1+arg2 > 0 /\ -arg2+x30 < 0 /\ arg1 > 0), cost: 1
   7: __init -> f1_0_main_Load : arg1'=arg1p8, arg2'=arg2p8, arg3'=arg3p8, arg4'=arg4p8, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2 arg3 arg4
   1: f80_0_create_LE -> f108_0_main_ArrayAccess : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, arg4'=arg4p2, (arg2p2-arg3 > 0 /\ -arg3p2+arg4 == 0 /\ arg3 > 0 /\ -1+arg2 < 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0), cost: 1
   2: f80_0_create_LE -> f108_0_main_ArrayAccess : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, arg4'=arg4p3, (arg1p3 > 0 /\ -arg3p3+arg4 == 0 /\ -1+arg2 < 0 /\ 1-arg2p3 == 0 /\ -arg1p3+arg1 >= 0 /\ arg1 > 0), cost: 1
   3: f80_0_create_LE -> f80_0_create_LE : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, arg4'=arg4p4, (-arg4p4+arg4 == 0 /\ arg1p4 > 0 /\ arg2 > 0 /\ arg1p4-arg1 <= 0 /\ -1+arg2-arg2p4 == 0 /\ arg1 > 0), cost: 1
   4: f108_0_main_ArrayAccess -> f147_0_get_LE : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, arg4'=arg4p5, (-1+x23-arg1p5 == 0 /\ -arg2p5+arg2 == 0 /\ arg3 > 0 /\ 1+x23 > 0 /\ arg1 > 0), cost: 1
   5: f147_0_get_LE -> f147_0_get_LE : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, arg4'=arg4p6, (-1-arg1p6+arg1 == 0 /\ 1+arg2 > 0 /\ -arg2+x27 < 0 /\ x27 > 0 /\ -arg2p6+x27 < 0 /\ arg1 > 0), cost: 1
   6: f147_0_get_LE -> f147_0_get_LE : arg1'=arg1p7, arg2'=arg2p7, arg3'=arg3p7, arg4'=arg4p7, (-1-arg1p7+arg1 == 0 /\ 1-arg2p7 == 0 /\ 1+arg2 > 0 /\ -arg2+x30 < 0 /\ arg1 > 0), cost: 1
   8: __init -> f80_0_create_LE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, (arg1p8 > 0 /\ -arg3p1 == 0 /\ 1+arg2p8 > 0 /\ -1+arg2p8-arg2p1 == 0 /\ arg1p1 > 0 /\ -arg1p8+arg1p1 <= 0 /\ arg2p8-arg4p1 == 0), cost: 1

	Eliminating location f1_0_main_Load by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_Load : arg1'=arg1p8, arg2'=arg2p8, arg3'=arg3p8, arg4'=arg4p8, T, cost: 1
	Second rule:
	f1_0_main_Load -> f80_0_create_LE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, (-1+arg2-arg2p1 == 0 /\ -arg3p1 == 0 /\ 1+arg2 > 0 /\ arg1p1-arg1 <= 0 /\ arg1p1 > 0 /\ arg2-arg4p1 == 0 /\ arg1 > 0), cost: 1
	New rule:
	__init -> f80_0_create_LE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, (arg1p8 > 0 /\ -arg3p1 == 0 /\ 1+arg2p8 > 0 /\ -1+arg2p8-arg2p1 == 0 /\ arg1p1 > 0 /\ -arg1p8+arg1p1 <= 0 /\ arg2p8-arg4p1 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 7

Simplified Transitions

Start location: __init
Program variables: arg1 arg2 arg3 arg4
   9: f80_0_create_LE -> f108_0_main_ArrayAccess : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg4, arg4'=arg4p2, (arg2p2-arg3 > 0 /\ arg3 > 0 /\ -1+arg2 < 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0), cost: 1
  10: f80_0_create_LE -> f108_0_main_ArrayAccess : arg1'=arg1p3, arg2'=1, arg3'=arg4, arg4'=arg4p3, (arg1p3 > 0 /\ -1+arg2 < 0 /\ -arg1p3+arg1 >= 0 /\ arg1 > 0), cost: 1
  11: f80_0_create_LE -> f80_0_create_LE : arg1'=arg1p4, arg2'=-1+arg2, arg3'=arg3p4, (arg1p4 > 0 /\ arg2 > 0 /\ arg1p4-arg1 <= 0 /\ arg1 > 0), cost: 1
  12: f108_0_main_ArrayAccess -> f147_0_get_LE : arg1'=-1+x23, arg3'=arg3p5, arg4'=arg4p5, (arg3 > 0 /\ 1+x23 > 0 /\ arg1 > 0), cost: 1
  13: f147_0_get_LE -> f147_0_get_LE : arg1'=-1+arg1, arg2'=arg2p6, arg3'=arg3p6, arg4'=arg4p6, (1+arg2 > 0 /\ 2-arg2p6 <= 0 /\ 2-arg2 <= 0 /\ arg1 > 0), cost: 1
  14: f147_0_get_LE -> f147_0_get_LE : arg1'=-1+arg1, arg2'=1, arg3'=arg3p7, arg4'=arg4p7, (1+arg2 > 0 /\ arg1 > 0), cost: 1
  15: __init -> f80_0_create_LE : arg1'=arg1p1, arg2'=-1+arg2p8, arg3'=0, arg4'=arg2p8, (1+arg2p8 > 0 /\ arg1p1 > 0), cost: 1

	Propagated Equalities

	Original rule:
	f80_0_create_LE -> f108_0_main_ArrayAccess : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, arg4'=arg4p2, (arg2p2-arg3 > 0 /\ -arg3p2+arg4 == 0 /\ arg3 > 0 /\ -1+arg2 < 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f80_0_create_LE -> f108_0_main_ArrayAccess : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg4, arg4'=arg4p2, (0 == 0 /\ arg2p2-arg3 > 0 /\ arg3 > 0 /\ -1+arg2 < 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg3p2 = arg4
		
	Simplified Guard

	Original rule:
	f80_0_create_LE -> f108_0_main_ArrayAccess : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg4, arg4'=arg4p2, (0 == 0 /\ arg2p2-arg3 > 0 /\ arg3 > 0 /\ -1+arg2 < 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f80_0_create_LE -> f108_0_main_ArrayAccess : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg4, arg4'=arg4p2, (arg2p2-arg3 > 0 /\ arg3 > 0 /\ -1+arg2 < 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f80_0_create_LE -> f108_0_main_ArrayAccess : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, arg4'=arg4p3, (arg1p3 > 0 /\ -arg3p3+arg4 == 0 /\ -1+arg2 < 0 /\ 1-arg2p3 == 0 /\ -arg1p3+arg1 >= 0 /\ arg1 > 0), cost: 1
	New rule:
	f80_0_create_LE -> f108_0_main_ArrayAccess : arg1'=arg1p3, arg2'=1, arg3'=arg4, arg4'=arg4p3, (0 == 0 /\ arg1p3 > 0 /\ -1+arg2 < 0 /\ -arg1p3+arg1 >= 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg3p3 = arg4
		
		propagated equality arg2p3 = 1
		
	Simplified Guard

	Original rule:
	f80_0_create_LE -> f108_0_main_ArrayAccess : arg1'=arg1p3, arg2'=1, arg3'=arg4, arg4'=arg4p3, (0 == 0 /\ arg1p3 > 0 /\ -1+arg2 < 0 /\ -arg1p3+arg1 >= 0 /\ arg1 > 0), cost: 1
	New rule:
	f80_0_create_LE -> f108_0_main_ArrayAccess : arg1'=arg1p3, arg2'=1, arg3'=arg4, arg4'=arg4p3, (arg1p3 > 0 /\ -1+arg2 < 0 /\ -arg1p3+arg1 >= 0 /\ arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f80_0_create_LE -> f80_0_create_LE : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, arg4'=arg4p4, (-arg4p4+arg4 == 0 /\ arg1p4 > 0 /\ arg2 > 0 /\ arg1p4-arg1 <= 0 /\ -1+arg2-arg2p4 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f80_0_create_LE -> f80_0_create_LE : arg1'=arg1p4, arg2'=-1+arg2, arg3'=arg3p4, arg4'=arg4, (0 == 0 /\ arg1p4 > 0 /\ arg2 > 0 /\ arg1p4-arg1 <= 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg4p4 = arg4
		
		propagated equality arg2p4 = -1+arg2
		
	Simplified Guard

	Original rule:
	f80_0_create_LE -> f80_0_create_LE : arg1'=arg1p4, arg2'=-1+arg2, arg3'=arg3p4, arg4'=arg4, (0 == 0 /\ arg1p4 > 0 /\ arg2 > 0 /\ arg1p4-arg1 <= 0 /\ arg1 > 0), cost: 1
	New rule:
	f80_0_create_LE -> f80_0_create_LE : arg1'=arg1p4, arg2'=-1+arg2, arg3'=arg3p4, arg4'=arg4, (arg1p4 > 0 /\ arg2 > 0 /\ arg1p4-arg1 <= 0 /\ arg1 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f80_0_create_LE -> f80_0_create_LE : arg1'=arg1p4, arg2'=-1+arg2, arg3'=arg3p4, arg4'=arg4, (arg1p4 > 0 /\ arg2 > 0 /\ arg1p4-arg1 <= 0 /\ arg1 > 0), cost: 1
	New rule:
	f80_0_create_LE -> f80_0_create_LE : arg1'=arg1p4, arg2'=-1+arg2, arg3'=arg3p4, (arg1p4 > 0 /\ arg2 > 0 /\ arg1p4-arg1 <= 0 /\ arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f108_0_main_ArrayAccess -> f147_0_get_LE : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, arg4'=arg4p5, (-1+x23-arg1p5 == 0 /\ -arg2p5+arg2 == 0 /\ arg3 > 0 /\ 1+x23 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f108_0_main_ArrayAccess -> f147_0_get_LE : arg1'=-1+x23, arg2'=arg2, arg3'=arg3p5, arg4'=arg4p5, (0 == 0 /\ arg3 > 0 /\ 1+x23 > 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg1p5 = -1+x23
		
		propagated equality arg2p5 = arg2
		
	Simplified Guard

	Original rule:
	f108_0_main_ArrayAccess -> f147_0_get_LE : arg1'=-1+x23, arg2'=arg2, arg3'=arg3p5, arg4'=arg4p5, (0 == 0 /\ arg3 > 0 /\ 1+x23 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f108_0_main_ArrayAccess -> f147_0_get_LE : arg1'=-1+x23, arg2'=arg2, arg3'=arg3p5, arg4'=arg4p5, (arg3 > 0 /\ 1+x23 > 0 /\ arg1 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f108_0_main_ArrayAccess -> f147_0_get_LE : arg1'=-1+x23, arg2'=arg2, arg3'=arg3p5, arg4'=arg4p5, (arg3 > 0 /\ 1+x23 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f108_0_main_ArrayAccess -> f147_0_get_LE : arg1'=-1+x23, arg3'=arg3p5, arg4'=arg4p5, (arg3 > 0 /\ 1+x23 > 0 /\ arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f147_0_get_LE -> f147_0_get_LE : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, arg4'=arg4p6, (-1-arg1p6+arg1 == 0 /\ 1+arg2 > 0 /\ -arg2+x27 < 0 /\ x27 > 0 /\ -arg2p6+x27 < 0 /\ arg1 > 0), cost: 1
	New rule:
	f147_0_get_LE -> f147_0_get_LE : arg1'=-1+arg1, arg2'=arg2p6, arg3'=arg3p6, arg4'=arg4p6, (0 == 0 /\ 1+arg2 > 0 /\ -arg2+x27 < 0 /\ x27 > 0 /\ -arg2p6+x27 < 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg1p6 = -1+arg1
		
	Simplified Guard

	Original rule:
	f147_0_get_LE -> f147_0_get_LE : arg1'=-1+arg1, arg2'=arg2p6, arg3'=arg3p6, arg4'=arg4p6, (0 == 0 /\ 1+arg2 > 0 /\ -arg2+x27 < 0 /\ x27 > 0 /\ -arg2p6+x27 < 0 /\ arg1 > 0), cost: 1
	New rule:
	f147_0_get_LE -> f147_0_get_LE : arg1'=-1+arg1, arg2'=arg2p6, arg3'=arg3p6, arg4'=arg4p6, (1+arg2 > 0 /\ -arg2+x27 < 0 /\ x27 > 0 /\ -arg2p6+x27 < 0 /\ arg1 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	f147_0_get_LE -> f147_0_get_LE : arg1'=-1+arg1, arg2'=arg2p6, arg3'=arg3p6, arg4'=arg4p6, (1+arg2 > 0 /\ -arg2+x27 < 0 /\ x27 > 0 /\ -arg2p6+x27 < 0 /\ arg1 > 0), cost: 1
	New rule:
	f147_0_get_LE -> f147_0_get_LE : arg1'=-1+arg1, arg2'=arg2p6, arg3'=arg3p6, arg4'=arg4p6, (1+arg2 > 0 /\ 2-arg2p6 <= 0 /\ 2-arg2 <= 0 /\ arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f147_0_get_LE -> f147_0_get_LE : arg1'=arg1p7, arg2'=arg2p7, arg3'=arg3p7, arg4'=arg4p7, (-1-arg1p7+arg1 == 0 /\ 1-arg2p7 == 0 /\ 1+arg2 > 0 /\ -arg2+x30 < 0 /\ arg1 > 0), cost: 1
	New rule:
	f147_0_get_LE -> f147_0_get_LE : arg1'=-1+arg1, arg2'=1, arg3'=arg3p7, arg4'=arg4p7, (0 == 0 /\ 1+arg2 > 0 /\ -arg2+x30 < 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg1p7 = -1+arg1
		
		propagated equality arg2p7 = 1
		
	Simplified Guard

	Original rule:
	f147_0_get_LE -> f147_0_get_LE : arg1'=-1+arg1, arg2'=1, arg3'=arg3p7, arg4'=arg4p7, (0 == 0 /\ 1+arg2 > 0 /\ -arg2+x30 < 0 /\ arg1 > 0), cost: 1
	New rule:
	f147_0_get_LE -> f147_0_get_LE : arg1'=-1+arg1, arg2'=1, arg3'=arg3p7, arg4'=arg4p7, (1+arg2 > 0 /\ -arg2+x30 < 0 /\ arg1 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	f147_0_get_LE -> f147_0_get_LE : arg1'=-1+arg1, arg2'=1, arg3'=arg3p7, arg4'=arg4p7, (1+arg2 > 0 /\ -arg2+x30 < 0 /\ arg1 > 0), cost: 1
	New rule:
	f147_0_get_LE -> f147_0_get_LE : arg1'=-1+arg1, arg2'=1, arg3'=arg3p7, arg4'=arg4p7, (1+arg2 > 0 /\ arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	__init -> f80_0_create_LE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, (arg1p8 > 0 /\ -arg3p1 == 0 /\ 1+arg2p8 > 0 /\ -1+arg2p8-arg2p1 == 0 /\ arg1p1 > 0 /\ -arg1p8+arg1p1 <= 0 /\ arg2p8-arg4p1 == 0), cost: 1
	New rule:
	__init -> f80_0_create_LE : arg1'=arg1p1, arg2'=-1+arg2p8, arg3'=0, arg4'=arg2p8, (0 == 0 /\ arg1p8 > 0 /\ 1+arg2p8 > 0 /\ arg1p1 > 0 /\ -arg1p8+arg1p1 <= 0), cost: 1
	
		propagated equality arg3p1 = 0
		
		propagated equality arg2p1 = -1+arg2p8
		
		propagated equality arg4p1 = arg2p8
		
	Simplified Guard

	Original rule:
	__init -> f80_0_create_LE : arg1'=arg1p1, arg2'=-1+arg2p8, arg3'=0, arg4'=arg2p8, (0 == 0 /\ arg1p8 > 0 /\ 1+arg2p8 > 0 /\ arg1p1 > 0 /\ -arg1p8+arg1p1 <= 0), cost: 1
	New rule:
	__init -> f80_0_create_LE : arg1'=arg1p1, arg2'=-1+arg2p8, arg3'=0, arg4'=arg2p8, (arg1p8 > 0 /\ 1+arg2p8 > 0 /\ arg1p1 > 0 /\ -arg1p8+arg1p1 <= 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	__init -> f80_0_create_LE : arg1'=arg1p1, arg2'=-1+arg2p8, arg3'=0, arg4'=arg2p8, (arg1p8 > 0 /\ 1+arg2p8 > 0 /\ arg1p1 > 0 /\ -arg1p8+arg1p1 <= 0), cost: 1
	New rule:
	__init -> f80_0_create_LE : arg1'=arg1p1, arg2'=-1+arg2p8, arg3'=0, arg4'=arg2p8, (1+arg2p8 > 0 /\ arg1p1 > 0), cost: 1

Step with 15

	Trace

	15[(1+arg2p8 > 0 /\ arg1p1 > 0)]
	
	Blocked

	[{}, {}]

Step with 10

	Trace

	15[(1+arg2p8 > 0 /\ arg1p1 > 0)], 10[(arg1p3 > 0 /\ -1+arg2 < 0 /\ -arg1p3+arg1 >= 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {9[T]}, {}]

Step with 12

	Trace

	15[(1+arg2p8 > 0 /\ arg1p1 > 0)], 10[(arg1p3 > 0 /\ -1+arg2 < 0 /\ -arg1p3+arg1 >= 0 /\ arg1 > 0)], 12[(arg3 > 0 /\ 1+x23 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {9[T]}, {}, {}]

Step with 14

	Trace

	15[(1+arg2p8 > 0 /\ arg1p1 > 0)], 10[(arg1p3 > 0 /\ -1+arg2 < 0 /\ -arg1p3+arg1 >= 0 /\ arg1 > 0)], 12[(arg3 > 0 /\ 1+x23 > 0 /\ arg1 > 0)], 14[(1+arg2 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {9[T]}, {}, {13[T]}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2 arg3 arg4
   9: f80_0_create_LE -> f108_0_main_ArrayAccess : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg4, arg4'=arg4p2, (arg2p2-arg3 > 0 /\ arg3 > 0 /\ -1+arg2 < 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0), cost: 1
  10: f80_0_create_LE -> f108_0_main_ArrayAccess : arg1'=arg1p3, arg2'=1, arg3'=arg4, arg4'=arg4p3, (arg1p3 > 0 /\ -1+arg2 < 0 /\ -arg1p3+arg1 >= 0 /\ arg1 > 0), cost: 1
  11: f80_0_create_LE -> f80_0_create_LE : arg1'=arg1p4, arg2'=-1+arg2, arg3'=arg3p4, (arg1p4 > 0 /\ arg2 > 0 /\ arg1p4-arg1 <= 0 /\ arg1 > 0), cost: 1
  12: f108_0_main_ArrayAccess -> f147_0_get_LE : arg1'=-1+x23, arg3'=arg3p5, arg4'=arg4p5, (arg3 > 0 /\ 1+x23 > 0 /\ arg1 > 0), cost: 1
  13: f147_0_get_LE -> f147_0_get_LE : arg1'=-1+arg1, arg2'=arg2p6, arg3'=arg3p6, arg4'=arg4p6, (1+arg2 > 0 /\ 2-arg2p6 <= 0 /\ 2-arg2 <= 0 /\ arg1 > 0), cost: 1
  14: f147_0_get_LE -> f147_0_get_LE : arg1'=-1+arg1, arg2'=1, arg3'=arg3p7, arg4'=arg4p7, (1+arg2 > 0 /\ arg1 > 0), cost: 1
  16: f147_0_get_LE -> f147_0_get_LE : arg1'=-n+arg1, arg2'=1, arg3'=arg3p7, arg4'=arg4p7, (-1+n >= 0 /\ 1-n+arg1 > 0 /\ 1+arg2 > 0), cost: 1
  15: __init -> f80_0_create_LE : arg1'=arg1p1, arg2'=-1+arg2p8, arg3'=0, arg4'=arg2p8, (1+arg2p8 > 0 /\ arg1p1 > 0), cost: 1

	Loop Acceleration

	Original rule:
	f147_0_get_LE -> f147_0_get_LE : arg1'=-1+arg1, arg2'=1, arg3'=arg3p7, arg4'=arg4p7, (1+arg2 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f147_0_get_LE -> f147_0_get_LE : arg1'=-n+arg1, arg2'=1, arg3'=arg3p7, arg4'=arg4p7, (-1+n >= 0 /\ 1-n+arg1 > 0 /\ 1+arg2 > 0), cost: 1

		1+arg2 > 0 [0]: monotonic increase yields 1+arg2 > 0
		
		arg1 > 0 [0]: montonic decrease yields 1-n+arg1 > 0
		
		arg1 > 0 [1]: eventual increase yields (1 <= 0 /\ arg1 > 0)
		
		Replacement map: {1+arg2 > 0 -> 1+arg2 > 0, arg1 > 0 -> 1-n+arg1 > 0}

	Trace

	15[(1+arg2p8 > 0 /\ arg1p1 > 0)], 10[(arg1p3 > 0 /\ -1+arg2 < 0 /\ -arg1p3+arg1 >= 0 /\ arg1 > 0)], 12[(arg3 > 0 /\ 1+x23 > 0 /\ arg1 > 0)], 16[(-1+n >= 0 /\ 1-n+arg1 > 0 /\ 1+arg2 > 0)]
	
	Blocked

	[{}, {9[T]}, {}, {13[T]}, {14[T], 16[T]}]

Backtrack

	Trace

	15[(1+arg2p8 > 0 /\ arg1p1 > 0)], 10[(arg1p3 > 0 /\ -1+arg2 < 0 /\ -arg1p3+arg1 >= 0 /\ arg1 > 0)], 12[(arg3 > 0 /\ 1+x23 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {9[T]}, {}, {13[T], 16[T]}]

Step with 14

	Trace

	15[(1+arg2p8 > 0 /\ arg1p1 > 0)], 10[(arg1p3 > 0 /\ -1+arg2 < 0 /\ -arg1p3+arg1 >= 0 /\ arg1 > 0)], 12[(arg3 > 0 /\ 1+x23 > 0 /\ arg1 > 0)], 14[(1+arg2 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {9[T]}, {}, {13[T], 16[T]}, {}]

Covered

	Trace

	15[(1+arg2p8 > 0 /\ arg1p1 > 0)], 10[(arg1p3 > 0 /\ -1+arg2 < 0 /\ -arg1p3+arg1 >= 0 /\ arg1 > 0)], 12[(arg3 > 0 /\ 1+x23 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {9[T]}, {}, {13[T], 14[T], 16[T]}]

Backtrack

	Trace

	15[(1+arg2p8 > 0 /\ arg1p1 > 0)], 10[(arg1p3 > 0 /\ -1+arg2 < 0 /\ -arg1p3+arg1 >= 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {9[T]}, {12[T]}]

Backtrack

	Trace

	15[(1+arg2p8 > 0 /\ arg1p1 > 0)]
	
	Blocked

	[{}, {9[T], 10[T]}]

Step with 11

	Trace

	15[(1+arg2p8 > 0 /\ arg1p1 > 0)], 11[(arg1p4 > 0 /\ arg2 > 0 /\ arg1p4-arg1 <= 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {9[T], 10[T]}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2 arg3 arg4
   9: f80_0_create_LE -> f108_0_main_ArrayAccess : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg4, arg4'=arg4p2, (arg2p2-arg3 > 0 /\ arg3 > 0 /\ -1+arg2 < 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0), cost: 1
  10: f80_0_create_LE -> f108_0_main_ArrayAccess : arg1'=arg1p3, arg2'=1, arg3'=arg4, arg4'=arg4p3, (arg1p3 > 0 /\ -1+arg2 < 0 /\ -arg1p3+arg1 >= 0 /\ arg1 > 0), cost: 1
  11: f80_0_create_LE -> f80_0_create_LE : arg1'=arg1p4, arg2'=-1+arg2, arg3'=arg3p4, (arg1p4 > 0 /\ arg2 > 0 /\ arg1p4-arg1 <= 0 /\ arg1 > 0), cost: 1
  17: f80_0_create_LE -> f80_0_create_LE : arg1'=arg1p4, arg2'=arg2-n2, arg3'=arg3p4, (arg1p4 > 0 /\ 1+arg2-n2 > 0 /\ -arg1p4+arg1 >= 0 /\ -1+n2 >= 0), cost: 1
  12: f108_0_main_ArrayAccess -> f147_0_get_LE : arg1'=-1+x23, arg3'=arg3p5, arg4'=arg4p5, (arg3 > 0 /\ 1+x23 > 0 /\ arg1 > 0), cost: 1
  13: f147_0_get_LE -> f147_0_get_LE : arg1'=-1+arg1, arg2'=arg2p6, arg3'=arg3p6, arg4'=arg4p6, (1+arg2 > 0 /\ 2-arg2p6 <= 0 /\ 2-arg2 <= 0 /\ arg1 > 0), cost: 1
  14: f147_0_get_LE -> f147_0_get_LE : arg1'=-1+arg1, arg2'=1, arg3'=arg3p7, arg4'=arg4p7, (1+arg2 > 0 /\ arg1 > 0), cost: 1
  16: f147_0_get_LE -> f147_0_get_LE : arg1'=-n+arg1, arg2'=1, arg3'=arg3p7, arg4'=arg4p7, (-1+n >= 0 /\ 1-n+arg1 > 0 /\ 1+arg2 > 0), cost: 1
  15: __init -> f80_0_create_LE : arg1'=arg1p1, arg2'=-1+arg2p8, arg3'=0, arg4'=arg2p8, (1+arg2p8 > 0 /\ arg1p1 > 0), cost: 1

	Loop Acceleration

	Original rule:
	f80_0_create_LE -> f80_0_create_LE : arg1'=arg1p4, arg2'=-1+arg2, arg3'=arg3p4, (arg1p4 > 0 /\ arg2 > 0 /\ arg1p4-arg1 <= 0 /\ arg1 > 0), cost: 1
	New rule:
	f80_0_create_LE -> f80_0_create_LE : arg1'=arg1p4, arg2'=arg2-n2, arg3'=arg3p4, (arg1p4 > 0 /\ 1+arg2-n2 > 0 /\ -arg1p4+arg1 >= 0 /\ -1+n2 >= 0), cost: 1

		arg1p4 > 0 [0]: monotonic increase yields arg1p4 > 0
		
		arg2 > 0 [0]: montonic decrease yields 1+arg2-n2 > 0
		
		arg2 > 0 [1]: eventual increase yields (1 <= 0 /\ arg2 > 0)
		
		-arg1p4+arg1 >= 0 [0]: monotonic increase yields -arg1p4+arg1 >= 0
		
		arg1 > 0 [0]: montonic decrease yields arg1p4 > 0, dependencies: -arg1p4+arg1 >= 0
		
		arg1 > 0 [1]: eventual increase yields (-arg1p4+arg1 <= 0 /\ arg1 > 0)
		
		Replacement map: {arg1p4 > 0 -> arg1p4 > 0, arg2 > 0 -> 1+arg2-n2 > 0, -arg1p4+arg1 >= 0 -> -arg1p4+arg1 >= 0, arg1 > 0 -> arg1p4 > 0}

	Trace

	15[(1+arg2p8 > 0 /\ arg1p1 > 0)], 17[(arg1p4 > 0 /\ 1+arg2-n2 > 0 /\ -arg1p4+arg1 >= 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {9[T], 10[T]}, {11[T], 17[T]}]

Step with 9

	Trace

	15[(1+arg2p8 > 0 /\ arg1p1 > 0)], 17[(arg1p4 > 0 /\ 1+arg2-n2 > 0 /\ -arg1p4+arg1 >= 0 /\ -1+n2 >= 0)], 9[(arg2p2-arg3 > 0 /\ arg3 > 0 /\ -1+arg2 < 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {9[T], 10[T]}, {11[T], 17[T]}, {}]

Step with 12

	Trace

	15[(1+arg2p8 > 0 /\ arg1p1 > 0)], 17[(arg1p4 > 0 /\ 1+arg2-n2 > 0 /\ -arg1p4+arg1 >= 0 /\ -1+n2 >= 0)], 9[(arg2p2-arg3 > 0 /\ arg3 > 0 /\ -1+arg2 < 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0)], 12[(arg3 > 0 /\ 1+x23 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {9[T], 10[T]}, {11[T], 17[T]}, {}, {}]

Step with 14

	Trace

	15[(1+arg2p8 > 0 /\ arg1p1 > 0)], 17[(arg1p4 > 0 /\ 1+arg2-n2 > 0 /\ -arg1p4+arg1 >= 0 /\ -1+n2 >= 0)], 9[(arg2p2-arg3 > 0 /\ arg3 > 0 /\ -1+arg2 < 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0)], 12[(arg3 > 0 /\ 1+x23 > 0 /\ arg1 > 0)], 14[(1+arg2 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {9[T], 10[T]}, {11[T], 17[T]}, {}, {}, {}]

Covered

	Trace

	15[(1+arg2p8 > 0 /\ arg1p1 > 0)], 17[(arg1p4 > 0 /\ 1+arg2-n2 > 0 /\ -arg1p4+arg1 >= 0 /\ -1+n2 >= 0)], 9[(arg2p2-arg3 > 0 /\ arg3 > 0 /\ -1+arg2 < 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0)], 12[(arg3 > 0 /\ 1+x23 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {9[T], 10[T]}, {11[T], 17[T]}, {}, {14[T]}]

Step with 16

	Trace

	15[(1+arg2p8 > 0 /\ arg1p1 > 0)], 17[(arg1p4 > 0 /\ 1+arg2-n2 > 0 /\ -arg1p4+arg1 >= 0 /\ -1+n2 >= 0)], 9[(arg2p2-arg3 > 0 /\ arg3 > 0 /\ -1+arg2 < 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0)], 12[(arg3 > 0 /\ 1+x23 > 0 /\ arg1 > 0)], 16[(-1+n >= 0 /\ 1-n+arg1 > 0 /\ 1+arg2 > 0)]
	
	Blocked

	[{}, {9[T], 10[T]}, {11[T], 17[T]}, {}, {14[T]}, {16[T]}]

Step with 14

	Trace

	15[(1+arg2p8 > 0 /\ arg1p1 > 0)], 17[(arg1p4 > 0 /\ 1+arg2-n2 > 0 /\ -arg1p4+arg1 >= 0 /\ -1+n2 >= 0)], 9[(arg2p2-arg3 > 0 /\ arg3 > 0 /\ -1+arg2 < 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0)], 12[(arg3 > 0 /\ 1+x23 > 0 /\ arg1 > 0)], 16[(-1+n >= 0 /\ 1-n+arg1 > 0 /\ 1+arg2 > 0)], 14[(1+arg2 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {9[T], 10[T]}, {11[T], 17[T]}, {}, {14[T]}, {13[T], 16[T]}, {}]

Covered

	Trace

	15[(1+arg2p8 > 0 /\ arg1p1 > 0)], 17[(arg1p4 > 0 /\ 1+arg2-n2 > 0 /\ -arg1p4+arg1 >= 0 /\ -1+n2 >= 0)], 9[(arg2p2-arg3 > 0 /\ arg3 > 0 /\ -1+arg2 < 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0)], 12[(arg3 > 0 /\ 1+x23 > 0 /\ arg1 > 0)], 16[(-1+n >= 0 /\ 1-n+arg1 > 0 /\ 1+arg2 > 0)]
	
	Blocked

	[{}, {9[T], 10[T]}, {11[T], 17[T]}, {}, {14[T]}, {13[T], 14[T], 16[T]}]

Backtrack

	Trace

	15[(1+arg2p8 > 0 /\ arg1p1 > 0)], 17[(arg1p4 > 0 /\ 1+arg2-n2 > 0 /\ -arg1p4+arg1 >= 0 /\ -1+n2 >= 0)], 9[(arg2p2-arg3 > 0 /\ arg3 > 0 /\ -1+arg2 < 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0)], 12[(arg3 > 0 /\ 1+x23 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {9[T], 10[T]}, {11[T], 17[T]}, {}, {14[T], 16[T]}]

Step with 13

	Trace

	15[(1+arg2p8 > 0 /\ arg1p1 > 0)], 17[(arg1p4 > 0 /\ 1+arg2-n2 > 0 /\ -arg1p4+arg1 >= 0 /\ -1+n2 >= 0)], 9[(arg2p2-arg3 > 0 /\ arg3 > 0 /\ -1+arg2 < 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0)], 12[(arg3 > 0 /\ 1+x23 > 0 /\ arg1 > 0)], 13[(1+arg2 > 0 /\ 2-arg2p6 <= 0 /\ 2-arg2 <= 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {9[T], 10[T]}, {11[T], 17[T]}, {}, {14[T], 16[T]}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2 arg3 arg4
   9: f80_0_create_LE -> f108_0_main_ArrayAccess : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg4, arg4'=arg4p2, (arg2p2-arg3 > 0 /\ arg3 > 0 /\ -1+arg2 < 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0), cost: 1
  10: f80_0_create_LE -> f108_0_main_ArrayAccess : arg1'=arg1p3, arg2'=1, arg3'=arg4, arg4'=arg4p3, (arg1p3 > 0 /\ -1+arg2 < 0 /\ -arg1p3+arg1 >= 0 /\ arg1 > 0), cost: 1
  11: f80_0_create_LE -> f80_0_create_LE : arg1'=arg1p4, arg2'=-1+arg2, arg3'=arg3p4, (arg1p4 > 0 /\ arg2 > 0 /\ arg1p4-arg1 <= 0 /\ arg1 > 0), cost: 1
  17: f80_0_create_LE -> f80_0_create_LE : arg1'=arg1p4, arg2'=arg2-n2, arg3'=arg3p4, (arg1p4 > 0 /\ 1+arg2-n2 > 0 /\ -arg1p4+arg1 >= 0 /\ -1+n2 >= 0), cost: 1
  12: f108_0_main_ArrayAccess -> f147_0_get_LE : arg1'=-1+x23, arg3'=arg3p5, arg4'=arg4p5, (arg3 > 0 /\ 1+x23 > 0 /\ arg1 > 0), cost: 1
  13: f147_0_get_LE -> f147_0_get_LE : arg1'=-1+arg1, arg2'=arg2p6, arg3'=arg3p6, arg4'=arg4p6, (1+arg2 > 0 /\ 2-arg2p6 <= 0 /\ 2-arg2 <= 0 /\ arg1 > 0), cost: 1
  14: f147_0_get_LE -> f147_0_get_LE : arg1'=-1+arg1, arg2'=1, arg3'=arg3p7, arg4'=arg4p7, (1+arg2 > 0 /\ arg1 > 0), cost: 1
  16: f147_0_get_LE -> f147_0_get_LE : arg1'=-n+arg1, arg2'=1, arg3'=arg3p7, arg4'=arg4p7, (-1+n >= 0 /\ 1-n+arg1 > 0 /\ 1+arg2 > 0), cost: 1
  18: f147_0_get_LE -> f147_0_get_LE : arg1'=-n4+arg1, arg2'=arg2p6, arg3'=arg3p6, arg4'=arg4p6, (-1+n4 >= 0 /\ 1+arg2 > 0 /\ -2+arg2 >= 0 /\ 1-n4+arg1 > 0 /\ -2+arg2p6 >= 0), cost: 1
  15: __init -> f80_0_create_LE : arg1'=arg1p1, arg2'=-1+arg2p8, arg3'=0, arg4'=arg2p8, (1+arg2p8 > 0 /\ arg1p1 > 0), cost: 1

	Loop Acceleration

	Original rule:
	f147_0_get_LE -> f147_0_get_LE : arg1'=-1+arg1, arg2'=arg2p6, arg3'=arg3p6, arg4'=arg4p6, (1+arg2 > 0 /\ 2-arg2p6 <= 0 /\ 2-arg2 <= 0 /\ arg1 > 0), cost: 1
	New rule:
	f147_0_get_LE -> f147_0_get_LE : arg1'=-n4+arg1, arg2'=arg2p6, arg3'=arg3p6, arg4'=arg4p6, (-1+n4 >= 0 /\ 1+arg2 > 0 /\ -2+arg2 >= 0 /\ 1-n4+arg1 > 0 /\ -2+arg2p6 >= 0), cost: 1

		1+arg2 > 0 [0]: monotonic increase yields 1+arg2 > 0, dependencies: -2+arg2p6 >= 0
		
		1+arg2 > 0 [1]: montonic decrease yields 1+arg2p6 > 0, dependencies: -2+arg2 >= 0
		
		1+arg2 > 0 [2]: eventual decrease yields (1+arg2 > 0 /\ 1+arg2p6 > 0)
		
		1+arg2 > 0 [3]: eventual increase yields (arg2-arg2p6 <= 0 /\ 1+arg2 > 0)
		
		-2+arg2 >= 0 [0]: eventual decrease yields (-2+arg2 >= 0 /\ -2+arg2p6 >= 0)
		
		-2+arg2 >= 0 [1]: eventual increase yields (arg2-arg2p6 <= 0 /\ -2+arg2 >= 0)
		
		-2+arg2p6 >= 0 [0]: monotonic increase yields -2+arg2p6 >= 0
		
		arg1 > 0 [0]: montonic decrease yields 1-n4+arg1 > 0
		
		arg1 > 0 [1]: eventual increase yields (1 <= 0 /\ arg1 > 0)
		
		Replacement map: {1+arg2 > 0 -> 1+arg2 > 0, -2+arg2 >= 0 -> (-2+arg2 >= 0 /\ -2+arg2p6 >= 0), -2+arg2p6 >= 0 -> -2+arg2p6 >= 0, arg1 > 0 -> 1-n4+arg1 > 0}

	Trace

	15[(1+arg2p8 > 0 /\ arg1p1 > 0)], 17[(arg1p4 > 0 /\ 1+arg2-n2 > 0 /\ -arg1p4+arg1 >= 0 /\ -1+n2 >= 0)], 9[(arg2p2-arg3 > 0 /\ arg3 > 0 /\ -1+arg2 < 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0)], 12[(arg3 > 0 /\ 1+x23 > 0 /\ arg1 > 0)], 18[(-1+n4 >= 0 /\ 1+arg2 > 0 /\ -2+arg2 >= 0 /\ 1-n4+arg1 > 0 /\ -2+arg2p6 >= 0)]
	
	Blocked

	[{}, {9[T], 10[T]}, {11[T], 17[T]}, {}, {14[T], 16[T]}, {13[T], 18[T]}]

Step with 14

	Trace

	15[(1+arg2p8 > 0 /\ arg1p1 > 0)], 17[(arg1p4 > 0 /\ 1+arg2-n2 > 0 /\ -arg1p4+arg1 >= 0 /\ -1+n2 >= 0)], 9[(arg2p2-arg3 > 0 /\ arg3 > 0 /\ -1+arg2 < 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0)], 12[(arg3 > 0 /\ 1+x23 > 0 /\ arg1 > 0)], 18[(-1+n4 >= 0 /\ 1+arg2 > 0 /\ -2+arg2 >= 0 /\ 1-n4+arg1 > 0 /\ -2+arg2p6 >= 0)], 14[(1+arg2 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {9[T], 10[T]}, {11[T], 17[T]}, {}, {14[T], 16[T]}, {13[T], 18[T]}, {}]

Covered

	Trace

	15[(1+arg2p8 > 0 /\ arg1p1 > 0)], 17[(arg1p4 > 0 /\ 1+arg2-n2 > 0 /\ -arg1p4+arg1 >= 0 /\ -1+n2 >= 0)], 9[(arg2p2-arg3 > 0 /\ arg3 > 0 /\ -1+arg2 < 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0)], 12[(arg3 > 0 /\ 1+x23 > 0 /\ arg1 > 0)], 18[(-1+n4 >= 0 /\ 1+arg2 > 0 /\ -2+arg2 >= 0 /\ 1-n4+arg1 > 0 /\ -2+arg2p6 >= 0)]
	
	Blocked

	[{}, {9[T], 10[T]}, {11[T], 17[T]}, {}, {14[T], 16[T]}, {13[T], 14[T], 18[T]}]

Step with 16

	Trace

	15[(1+arg2p8 > 0 /\ arg1p1 > 0)], 17[(arg1p4 > 0 /\ 1+arg2-n2 > 0 /\ -arg1p4+arg1 >= 0 /\ -1+n2 >= 0)], 9[(arg2p2-arg3 > 0 /\ arg3 > 0 /\ -1+arg2 < 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0)], 12[(arg3 > 0 /\ 1+x23 > 0 /\ arg1 > 0)], 18[(-1+n4 >= 0 /\ 1+arg2 > 0 /\ -2+arg2 >= 0 /\ 1-n4+arg1 > 0 /\ -2+arg2p6 >= 0)], 16[(-1+n >= 0 /\ 1-n+arg1 > 0 /\ 1+arg2 > 0)]
	
	Blocked

	[{}, {9[T], 10[T]}, {11[T], 17[T]}, {}, {14[T], 16[T]}, {13[T], 14[T], 18[T]}, {16[T]}]

Acceleration Failed

marked recursive suffix as redundant

Step with 14

	Trace

	15[(1+arg2p8 > 0 /\ arg1p1 > 0)], 17[(arg1p4 > 0 /\ 1+arg2-n2 > 0 /\ -arg1p4+arg1 >= 0 /\ -1+n2 >= 0)], 9[(arg2p2-arg3 > 0 /\ arg3 > 0 /\ -1+arg2 < 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0)], 12[(arg3 > 0 /\ 1+x23 > 0 /\ arg1 > 0)], 18[(-1+n4 >= 0 /\ 1+arg2 > 0 /\ -2+arg2 >= 0 /\ 1-n4+arg1 > 0 /\ -2+arg2p6 >= 0)], 16[(-1+n >= 0 /\ 1-n+arg1 > 0 /\ 1+arg2 > 0)], 14[(1+arg2 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {9[T], 10[T]}, {11[T], 17[T]}, {}, {14[T], 16[T]}, {13[T], 14[T], 18[T]}, {13[T], 16[T], 18[T]}, {}]

Covered

	Trace

	15[(1+arg2p8 > 0 /\ arg1p1 > 0)], 17[(arg1p4 > 0 /\ 1+arg2-n2 > 0 /\ -arg1p4+arg1 >= 0 /\ -1+n2 >= 0)], 9[(arg2p2-arg3 > 0 /\ arg3 > 0 /\ -1+arg2 < 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0)], 12[(arg3 > 0 /\ 1+x23 > 0 /\ arg1 > 0)], 18[(-1+n4 >= 0 /\ 1+arg2 > 0 /\ -2+arg2 >= 0 /\ 1-n4+arg1 > 0 /\ -2+arg2p6 >= 0)], 16[(-1+n >= 0 /\ 1-n+arg1 > 0 /\ 1+arg2 > 0)]
	
	Blocked

	[{}, {9[T], 10[T]}, {11[T], 17[T]}, {}, {14[T], 16[T]}, {13[T], 14[T], 18[T]}, {13[T], 14[T], 16[T], 18[T]}]

Backtrack

	Trace

	15[(1+arg2p8 > 0 /\ arg1p1 > 0)], 17[(arg1p4 > 0 /\ 1+arg2-n2 > 0 /\ -arg1p4+arg1 >= 0 /\ -1+n2 >= 0)], 9[(arg2p2-arg3 > 0 /\ arg3 > 0 /\ -1+arg2 < 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0)], 12[(arg3 > 0 /\ 1+x23 > 0 /\ arg1 > 0)], 18[(-1+n4 >= 0 /\ 1+arg2 > 0 /\ -2+arg2 >= 0 /\ 1-n4+arg1 > 0 /\ -2+arg2p6 >= 0)]
	
	Blocked

	[{}, {9[T], 10[T]}, {11[T], 17[T]}, {}, {14[T], 16[T]}, {13[T], 14[T], 16[T], 18[T]}]

Backtrack

	Trace

	15[(1+arg2p8 > 0 /\ arg1p1 > 0)], 17[(arg1p4 > 0 /\ 1+arg2-n2 > 0 /\ -arg1p4+arg1 >= 0 /\ -1+n2 >= 0)], 9[(arg2p2-arg3 > 0 /\ arg3 > 0 /\ -1+arg2 < 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0)], 12[(arg3 > 0 /\ 1+x23 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {9[T], 10[T]}, {11[T], 17[T]}, {}, {14[T], 16[T], 18[T]}]

Step with 13

	Trace

	15[(1+arg2p8 > 0 /\ arg1p1 > 0)], 17[(arg1p4 > 0 /\ 1+arg2-n2 > 0 /\ -arg1p4+arg1 >= 0 /\ -1+n2 >= 0)], 9[(arg2p2-arg3 > 0 /\ arg3 > 0 /\ -1+arg2 < 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0)], 12[(arg3 > 0 /\ 1+x23 > 0 /\ arg1 > 0)], 13[(1+arg2 > 0 /\ 2-arg2p6 <= 0 /\ 2-arg2 <= 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {9[T], 10[T]}, {11[T], 17[T]}, {}, {14[T], 16[T], 18[T]}, {}]

Covered

	Trace

	15[(1+arg2p8 > 0 /\ arg1p1 > 0)], 17[(arg1p4 > 0 /\ 1+arg2-n2 > 0 /\ -arg1p4+arg1 >= 0 /\ -1+n2 >= 0)], 9[(arg2p2-arg3 > 0 /\ arg3 > 0 /\ -1+arg2 < 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0)], 12[(arg3 > 0 /\ 1+x23 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {9[T], 10[T]}, {11[T], 17[T]}, {}, {13[T], 14[T], 16[T], 18[T]}]

Backtrack

	Trace

	15[(1+arg2p8 > 0 /\ arg1p1 > 0)], 17[(arg1p4 > 0 /\ 1+arg2-n2 > 0 /\ -arg1p4+arg1 >= 0 /\ -1+n2 >= 0)], 9[(arg2p2-arg3 > 0 /\ arg3 > 0 /\ -1+arg2 < 0 /\ arg1p2-arg1 <= 0 /\ arg1p2 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {9[T], 10[T]}, {11[T], 17[T]}, {12[T]}]

Backtrack

	Trace

	15[(1+arg2p8 > 0 /\ arg1p1 > 0)], 17[(arg1p4 > 0 /\ 1+arg2-n2 > 0 /\ -arg1p4+arg1 >= 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {9[T], 10[T]}, {9[T], 11[T], 17[T]}]

Step with 10

	Trace

	15[(1+arg2p8 > 0 /\ arg1p1 > 0)], 17[(arg1p4 > 0 /\ 1+arg2-n2 > 0 /\ -arg1p4+arg1 >= 0 /\ -1+n2 >= 0)], 10[(arg1p3 > 0 /\ -1+arg2 < 0 /\ -arg1p3+arg1 >= 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {9[T], 10[T]}, {9[T], 11[T], 17[T]}, {}]

Step with 12

	Trace

	15[(1+arg2p8 > 0 /\ arg1p1 > 0)], 17[(arg1p4 > 0 /\ 1+arg2-n2 > 0 /\ -arg1p4+arg1 >= 0 /\ -1+n2 >= 0)], 10[(arg1p3 > 0 /\ -1+arg2 < 0 /\ -arg1p3+arg1 >= 0 /\ arg1 > 0)], 12[(arg3 > 0 /\ 1+x23 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {9[T], 10[T]}, {9[T], 11[T], 17[T]}, {}, {}]

Step with 14

	Trace

	15[(1+arg2p8 > 0 /\ arg1p1 > 0)], 17[(arg1p4 > 0 /\ 1+arg2-n2 > 0 /\ -arg1p4+arg1 >= 0 /\ -1+n2 >= 0)], 10[(arg1p3 > 0 /\ -1+arg2 < 0 /\ -arg1p3+arg1 >= 0 /\ arg1 > 0)], 12[(arg3 > 0 /\ 1+x23 > 0 /\ arg1 > 0)], 14[(1+arg2 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {9[T], 10[T]}, {9[T], 11[T], 17[T]}, {}, {13[T]}, {}]

Covered

	Trace

	15[(1+arg2p8 > 0 /\ arg1p1 > 0)], 17[(arg1p4 > 0 /\ 1+arg2-n2 > 0 /\ -arg1p4+arg1 >= 0 /\ -1+n2 >= 0)], 10[(arg1p3 > 0 /\ -1+arg2 < 0 /\ -arg1p3+arg1 >= 0 /\ arg1 > 0)], 12[(arg3 > 0 /\ 1+x23 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {9[T], 10[T]}, {9[T], 11[T], 17[T]}, {}, {13[T], 14[T]}]

Step with 16

	Trace

	15[(1+arg2p8 > 0 /\ arg1p1 > 0)], 17[(arg1p4 > 0 /\ 1+arg2-n2 > 0 /\ -arg1p4+arg1 >= 0 /\ -1+n2 >= 0)], 10[(arg1p3 > 0 /\ -1+arg2 < 0 /\ -arg1p3+arg1 >= 0 /\ arg1 > 0)], 12[(arg3 > 0 /\ 1+x23 > 0 /\ arg1 > 0)], 16[(-1+n >= 0 /\ 1-n+arg1 > 0 /\ 1+arg2 > 0)]
	
	Blocked

	[{}, {9[T], 10[T]}, {9[T], 11[T], 17[T]}, {}, {13[T], 14[T]}, {16[T]}]

Step with 14

	Trace

	15[(1+arg2p8 > 0 /\ arg1p1 > 0)], 17[(arg1p4 > 0 /\ 1+arg2-n2 > 0 /\ -arg1p4+arg1 >= 0 /\ -1+n2 >= 0)], 10[(arg1p3 > 0 /\ -1+arg2 < 0 /\ -arg1p3+arg1 >= 0 /\ arg1 > 0)], 12[(arg3 > 0 /\ 1+x23 > 0 /\ arg1 > 0)], 16[(-1+n >= 0 /\ 1-n+arg1 > 0 /\ 1+arg2 > 0)], 14[(1+arg2 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {9[T], 10[T]}, {9[T], 11[T], 17[T]}, {}, {13[T], 14[T]}, {13[T], 16[T], 18[T]}, {}]

Covered

	Trace

	15[(1+arg2p8 > 0 /\ arg1p1 > 0)], 17[(arg1p4 > 0 /\ 1+arg2-n2 > 0 /\ -arg1p4+arg1 >= 0 /\ -1+n2 >= 0)], 10[(arg1p3 > 0 /\ -1+arg2 < 0 /\ -arg1p3+arg1 >= 0 /\ arg1 > 0)], 12[(arg3 > 0 /\ 1+x23 > 0 /\ arg1 > 0)], 16[(-1+n >= 0 /\ 1-n+arg1 > 0 /\ 1+arg2 > 0)]
	
	Blocked

	[{}, {9[T], 10[T]}, {9[T], 11[T], 17[T]}, {}, {13[T], 14[T]}, {13[T], 14[T], 16[T], 18[T]}]

Backtrack

	Trace

	15[(1+arg2p8 > 0 /\ arg1p1 > 0)], 17[(arg1p4 > 0 /\ 1+arg2-n2 > 0 /\ -arg1p4+arg1 >= 0 /\ -1+n2 >= 0)], 10[(arg1p3 > 0 /\ -1+arg2 < 0 /\ -arg1p3+arg1 >= 0 /\ arg1 > 0)], 12[(arg3 > 0 /\ 1+x23 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {9[T], 10[T]}, {9[T], 11[T], 17[T]}, {}, {13[T], 14[T], 16[T]}]

Backtrack

	Trace

	15[(1+arg2p8 > 0 /\ arg1p1 > 0)], 17[(arg1p4 > 0 /\ 1+arg2-n2 > 0 /\ -arg1p4+arg1 >= 0 /\ -1+n2 >= 0)], 10[(arg1p3 > 0 /\ -1+arg2 < 0 /\ -arg1p3+arg1 >= 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {9[T], 10[T]}, {9[T], 11[T], 17[T]}, {12[T]}]

Backtrack

	Trace

	15[(1+arg2p8 > 0 /\ arg1p1 > 0)], 17[(arg1p4 > 0 /\ 1+arg2-n2 > 0 /\ -arg1p4+arg1 >= 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {9[T], 10[T]}, {9[T], 10[T], 11[T], 17[T]}]

Backtrack

	Trace

	15[(1+arg2p8 > 0 /\ arg1p1 > 0)]
	
	Blocked

	[{}, {9[T], 10[T], 17[T]}]

Step with 11

	Trace

	15[(1+arg2p8 > 0 /\ arg1p1 > 0)], 11[(arg1p4 > 0 /\ arg2 > 0 /\ arg1p4-arg1 <= 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {9[T], 10[T], 17[T]}, {}]

Covered

	Trace

	15[(1+arg2p8 > 0 /\ arg1p1 > 0)]
	
	Blocked

	[{}, {9[T], 10[T], 11[T], 17[T]}]

Backtrack

	Trace

	Blocked

	[{15[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
