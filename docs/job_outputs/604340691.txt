YES

Solver Timeout: 4
Global Timeout: 300
Maximum number of concurrent processes: 900
*******************************************************************************************
*********************** UNPROCESSED TRANSITION SYSTEMS PER FUNCTION ***********************
*******************************************************************************************


List of LLVMGraphs + assumeNodes + staticAssertNodes [1] :

+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++
+                                                                  +
Init Location: 0
Transitions:
<l0, l1, true, seq{main__func_return_ -> 0, main_n -> Â¿functionCall(__VERIFIER_nondet_int), main_x -> Â¿functionCall(__VERIFIER_nondet_int), main_y -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l1, l2, true>
<l2, l15, not((main_x >= 0))>
<l2, l3, (main_x >= 0)>
<l3, l4, true>
<l4, l8, not((main_y >= 0))>
<l4, l5, (main_y >= 0)>
<l5, l8, (Â¿functionCall(__VERIFIER_nondet_int) = 0)>
<l5, l6, not((Â¿functionCall(__VERIFIER_nondet_int) = 0))>
<l6, l7, true, seq{main_y -> (main_y - 1)}>
<l7, l4, true>
<l8, l9, true, seq{main_x -> (main_x - 1)}>
<l9, l10, true>
<l10, l14, not((main_y <= main_n))>
<l10, l11, (main_y <= main_n)>
<l11, l14, (Â¿functionCall(__VERIFIER_nondet_int) = 0)>
<l11, l12, not((Â¿functionCall(__VERIFIER_nondet_int) = 0))>
<l12, l13, true, seq{main_y -> (main_y + 1)}>
<l13, l10, true>
<l14, l2, true>
<l15, l16, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

+ Assume Nodes [0]: ++++++++++++++++++++++++++++++++++++++++++++++++
       
+ Static Assert Nodes [0]: +++++++++++++++++++++++++++++++++++++++++
       
+ After preprocess (paralelization): ++++++++++++++++++++++++++++++

Init Location: 0
Transitions:
<l0, l17, true, seq{main__func_return_ -> 0}>
<l17, l18, true, seq{varCall_1 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l18, l19, true, seq{main_n -> varCall_1}>
<l19, l20, true, seq{varCall_2 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l20, l21, true, seq{main_x -> varCall_2}>
<l21, l22, true, seq{varCall_3 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l22, l1, true, seq{main_y -> varCall_3}>
<l1, l2, true>
<l2, l3, (main_x >= 0)>
<l2, l15, not((main_x >= 0))>
<l3, l4, true>
<l4, l5, (main_y >= 0)>
<l4, l8, not((main_y >= 0))>
<l5, l23, true, seq{varCall_4 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l23, l8, (varCall_4 = 0)>
<l23, l6, (varCall_4 = 1)>
<l6, l7, true, seq{main_y -> (main_y - 1)}>
<l7, l4, true>
<l8, l9, true, seq{main_x -> (main_x - 1)}>
<l9, l10, true>
<l10, l11, (main_y <= main_n)>
<l10, l14, not((main_y <= main_n))>
<l11, l24, true, seq{varCall_5 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l24, l14, (varCall_5 = 0)>
<l24, l12, (varCall_5 = 1)>
<l12, l13, true, seq{main_y -> (main_y + 1)}>
<l13, l10, true>
<l14, l2, true>
<l15, l16, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:
16, 
Accepting locations:

Asserts:

+                                                                  +
+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++


Function Return and Parameters Information [2 functions]:
    function name: __VERIFIER_nondet_int [1 return + 0 parameters]        demangled: __VERIFIER_nondet_int
        __VERIFIER_nondet_int__func_return_      [function result] : int
    function name: main [1 return + 0 parameters]        demangled: main
        main__func_return_      [function result] : int


AST Ident Scanner Information [5 idents]:
__VERIFIER_nondet_int | function | [integer, ()] | <line: 11, col: 1> | <line: 15, col: 6> <line: 16, col: 6> <line: 17, col: 6> <line: 19, col: 20> <line: 23, col: 20>
main | function | [integer, ()] | <line: 13, col: 1>
x | local variable | integer | <line: 14, col: 5> | <line: 16, col: 2> <line: 18, col: 9> <line: 22, col: 3> <line: 22, col: 7>
y | local variable | integer | <line: 14, col: 5> | <line: 17, col: 2> <line: 19, col: 10> <line: 20, col: 4> <line: 20, col: 8> <line: 23, col: 10> <line: 24, col: 4> <line: 24, col: 8>
n | local variable | integer | <line: 14, col: 5> | <line: 15, col: 2> <line: 23, col: 15>

Main function: main
Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l4, (main_x = undef7) /\ (main_y = undef8) /\ (main_n = undef6) /\ (undef7 >= 0)>
<l0, l16, (main_x = undef7) /\ (main_y = undef8) /\ (main_n = undef6) /\ not((undef7 >= 0))>
<l4, l10, (main_y >= 0) /\ (undef9 = 0), par{main_x -> (main_x - 1)}>
<l4, l4, (main_y >= 0) /\ (undef9 = 1), par{main_y -> (main_y - 1)}>
<l4, l10, not((main_y >= 0)), par{main_x -> (main_x - 1)}>
<l10, l4, (main_y <= main_n) /\ (undef10 = 0) /\ (main_x >= 0)>
<l10, l16, (main_y <= main_n) /\ (undef10 = 0) /\ not((main_x >= 0))>
<l10, l10, (main_y <= main_n) /\ (undef10 = 1), par{main_y -> (main_y + 1)}>
<l10, l4, not((main_y <= main_n)) /\ (main_x >= 0)>
<l10, l16, not((main_y <= main_n)) /\ not((main_x >= 0))>

Fresh variables:
undef6, undef7, undef8, undef9, undef10, 

Undef variables:
undef6, undef7, undef8, undef9, undef10, 

Abstraction variables:

Exit nodes:
16, 
Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l4, l10, 0 <= main_y /\ undef9 = 0, {main_x -> -1 + main_x, rest remain the same}>
<l4, l4, 0 <= main_y /\ undef9 = 1, {main_y -> -1 + main_y, rest remain the same}>
<l4, l10, 1 + main_y <= 0, {main_x -> -1 + main_x, rest remain the same}>
<l10, l4, 0 <= main_x /\ main_y <= main_n /\ undef10 = 0, {all remain the same}>
<l10, l10, main_y <= main_n /\ undef10 = 1, {main_y -> 1 + main_y, rest remain the same}>
<l10, l4, 0 <= main_x /\ 1 + main_n <= main_y, {all remain the same}>
Variables:
main_x, main_y, main_n

Graph 2:
Transitions:
Variables:

Precedence: 
Graph 0

Graph 1
<l0, l4, 0 <= undef7 /\ main_x = undef7 /\ main_y = undef8 /\ main_n = undef6, {all remain the same}>

Graph 2
<l0, l16, 1 + undef7 <= 0 /\ main_x = undef7 /\ main_y = undef8 /\ main_n = undef6, {all remain the same}>
<l10, l16, main_y <= main_n /\ 1 + main_x <= 0 /\ undef10 = 0, {all remain the same}>
<l10, l16, 1 + main_x <= 0 /\ 1 + main_n <= main_y, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 4 , 1 )
( 10 , 1 )
( 16 , 2 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.010976

Checking conditional termination of SCC {l4, l10}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.001304s

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.006418s
[4204 : 4206]
[4204 : 4207]
Successful child: 4206
[ Invariant Graph ]
[33mStrengthening and disabling transitions...[0m

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l4, l10, 0 <= main_y /\ 0 <= 1 + main_x /\ undef9 = 0, {main_x -> -1 + main_x, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l4, l4, 0 <= main_y /\ 0 <= 1 + main_x /\ undef9 = 1, {main_y -> -1 + main_y, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l4, l10, 1 + main_y <= 0 /\ 0 <= 1 + main_x, {main_x -> -1 + main_x, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
[ Termination Graph ]
[33mStrengthening and disabling transitions...[0m

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l4, l10, 0 <= main_y /\ 0 <= 1 + main_x /\ undef9 = 0, {main_x -> -1 + main_x, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l4, l4, 0 <= main_y /\ 0 <= 1 + main_x /\ undef9 = 1, {main_y -> -1 + main_y, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l4, l10, 1 + main_y <= 0 /\ 0 <= 1 + main_x, {main_x -> -1 + main_x, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
[33mRanking function: [36m1 + main_x[0m
New Graphs: 
Transitions:
<l10, l10, main_y <= main_n /\ undef10 = 1, {main_y -> 1 + main_y, rest remain the same}>
Variables:
main_y, main_n
Transitions:
<l4, l4, 0 <= main_y /\ 0 <= 1 + main_x /\ undef9 = 1, {main_y -> -1 + main_y, rest remain the same}>
Variables:
main_x, main_y
Checking conditional termination of SCC {l10}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000406s
[33mRanking function: [36m-main_y + main_n[0m
New Graphs: 
Transitions:
<l4, l4, 0 <= main_y /\ 0 <= 1 + main_x /\ undef9 = 1, {main_y -> -1 + main_y, rest remain the same}>
Variables:
main_x, main_y
Checking conditional termination of SCC {l4}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000435s
[33mRanking function: [36mmain_y[0m
New Graphs: 
INVARIANTS: 
4: 0 <= 1 + main_x , 
Quasi-INVARIANTS to narrow Graph: 
4: 
Proving termination of subgraph 2
Analyzing SCC {l16}...
No cycles found.

[32mProgram Terminates[0m
