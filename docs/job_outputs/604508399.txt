NO

Solver Timeout: 4
Global Timeout: 300
No parsing errors!
Init Location: 0
Transitions:
<l0, l4, true>
<l1, l2, ((0 + x^0) <= (0 + y^0)) /\ ((0 + y^0) <= (0 + x^0)), par{x^0 -> (0 + x^0)}>
<l2, l1, true>
<l3, l1, true>
<l4, l3, true>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l1, true>
<l1, l1, ((0 + x^0) <= (0 + y^0)) /\ ((0 + y^0) <= (0 + x^0)), par{x^0 -> (0 + x^0)}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l1, l1, x^0 = y^0, {all remain the same}>
Variables:
x^0, y^0

Precedence: 
Graph 0

Graph 1
<l0, l1, true, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 1 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.00171

> No variable changes in termination graph.
Checking conditional unfeasibility...
Calling Safety with literal 1 + x^0 <= y^0 and entry <l1, l1, x^0 <= y^0, {all remain the same}>

LOG: CALL check - Post:1 + x^0 <= y^0 - Process 1
* Exit transition: <l1, l1, x^0 <= y^0, {all remain the same}>
* Postcondition  : 1 + x^0 <= y^0
Postcodition moved up: 1 + x^0 <= y^0

LOG: Try proving POST
Postcondition: 1 + x^0 <= y^0

LOG: CALL check - Post:1 + x^0 <= y^0 - Process 2
* Exit transition: <l0, l1, x^0 <= y^0, {all remain the same}>
* Postcondition  : 1 + x^0 <= y^0

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000261s
[31m> Postcondition is not implied![0m

LOG: RETURN check - Elapsed time: 0.000328s

LOG: NarrowEntry size 1
Narrowing transition: 
<l1, l1, x^0 = y^0, {all remain the same}>

LOG: Narrow transition size 1
ENTRIES:
<l0, l1, x^0 = y^0, {all remain the same}>
END ENTRIES:
GRAPH:
<l1, l1, x^0 = y^0, {all remain the same}>
END GRAPH:
EXIT: <l1, l1, x^0 <= y^0, {all remain the same}>
POST: 1 + x^0 <= y^0


LOG: Try proving POST
Solving with 1 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 0.004123s
Time used: 0.00404
Solving with 2 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 4.000422s
Time used: 4.00024
Solving with 3 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 1.001484s
Time used: 1.00017

LOG: Postcondition is not implied - no solution
[31m> Postcondition is not implied![0m

LOG: RETURN check - Elapsed time: 5.009665s

Proving non-termination of subgraph 1
Transitions:
<l1, l1, x^0 = y^0, {all remain the same}>
Variables:
x^0, y^0

Checking conditional non-termination of SCC {l1}...
EXIT TRANSITIONS:
<l1, end, 1 + y^0 <= x^0, {all remain the same}>
<l1, end, 1 + x^0 <= y^0, {all remain the same}>

Solving with 1 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 0.002516s
Time used: 0.002424
Improving Solution with cost 2 ...

LOG: CALL solveNonLinearGetNextSolution

LOG: RETURN solveNonLinearGetNextSolution - Elapsed time: 0.002975s
Time used: 0.002973

LOG: SAT solveNonLinear - Elapsed time: 0.005491s
Cost: 2; Total time: 0.005397
[31mFailed at location 1: x^0 <= y^0[0m
Before Improving: 
[36mQuasi-invariant at l1: x^0 <= y^0[0m
Optimizing invariants...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000848s
Remaining time after improvement: 0.999581
[33mNon-termination implied by a set of quasi-invariant(s):[0m
[36mQuasi-invariant at l1: x^0 <= y^0[0m

[33mStrengthening and disabling EXIT transitions...[0m
Closed exits from l1: 1
Strengthening exit transition (result): 
<l1, end, 1 + x^0 <= y^0, {all remain the same}>

[33mStrengthening and disabling transitions...[0m

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l1, l1, x^0 = y^0, {all remain the same}>

Checking conditional non-termination of SCC {l1}...
EXIT TRANSITIONS:
<l1, end, 1 + x^0 <= y^0, {all remain the same}>

Solving with 1 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 0.001952s
Time used: 0.00187
Improving Solution with cost 1 ...

LOG: CALL solveNonLinearGetNextSolution

LOG: RETURN solveNonLinearGetNextSolution - Elapsed time: 0.001952s
Time used: 0.001951

LOG: SAT solveNonLinear - Elapsed time: 0.003904s
Cost: 1; Total time: 0.003821
[31mFailed at location 1: y^0 <= x^0[0m
Before Improving: 
[36mQuasi-invariant at l1: y^0 <= x^0[0m
Optimizing invariants...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000688s
Remaining time after improvement: 0.999616
[33mNon-termination implied by a set of quasi-invariant(s):[0m
[36mQuasi-invariant at l1: y^0 <= x^0[0m

[33mStrengthening and disabling EXIT transitions...[0m
Closed exits from l1: 1

[33mStrengthening and disabling transitions...[0m

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l1, l1, x^0 = y^0, {all remain the same}>

Calling reachability with...
Transition: <l1, end, true, {all remain the same}>
Conditions: x^0 <= y^0, y^0 <= x^0, 
OPEN EXITS: 
<l1, end, true, {all remain the same}> (condsUp: x^0 <= y^0, y^0 <= x^0)

--- Reachability graph ---
> Graph without transitions.

Calling reachability with...
Transition: <l0, l1, true, {all remain the same}>
Conditions: x^0 <= y^0, y^0 <= x^0, 
OPEN EXITS: 
<l0, l1, x^0 = y^0, {all remain the same}>

[32m> Conditions are reachable![0m

[32mProgram does NOT terminate[0m
