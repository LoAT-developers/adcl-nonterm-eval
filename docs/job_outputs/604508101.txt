unknown

Initial ITS

Start location: __init
Program variables: arg1 arg2
   0: f1_0_main_Load -> f84_0_main_LE : arg1'=arg1p1, arg2'=arg2p1, (arg1 > 0 /\ 1+arg2 > 0 /\ 1+arg1p1 > 0), cost: 1
   1: f84_0_main_LE -> f84_0_main_LE\' : arg1'=arg1p2, arg2'=arg2p2, (arg1-2*x6 == 0 /\ -x7+arg1 > 0 /\ -1+arg1 > 0 /\ arg1-arg1p2 == 0), cost: 1
   3: f84_0_main_LE -> f84_0_main_LE\' : arg1'=arg1p4, arg2'=arg2p4, (3*arg1 > 0 /\ arg1-arg1p4 == 0 /\ -1+arg1 > 0 /\ -1-2*x12+arg1 == 0), cost: 1
   2: f84_0_main_LE\' -> f84_0_main_LE : arg1'=arg1p3, arg2'=arg2p3, (-2*x10+arg1 >= 0 /\ -2*x10+arg1 == 0 /\ -2-2*x10+arg1 < 0 /\ -2+arg1-2*arg1p3 < 0 /\ arg1-2*arg1p3 >= 0 /\ arg1-arg1p3 > 0 /\ -1+arg1 > 0), cost: 1
   4: f84_0_main_LE\' -> f84_0_main_LE : arg1'=arg1p5, arg2'=arg2p5, (3*arg1 > 0 /\ -2-2*x14+arg1 < 0 /\ 1+3*arg1-arg1p5 == 0 /\ -2*x14+arg1 >= 0 /\ -1+arg1 > 0 /\ -1-2*x14+arg1 == 0), cost: 1
   5: __init -> f1_0_main_Load : arg1'=arg1p6, arg2'=arg2p6, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2
   1: f84_0_main_LE -> f84_0_main_LE\' : arg1'=arg1p2, arg2'=arg2p2, (arg1-2*x6 == 0 /\ -x7+arg1 > 0 /\ -1+arg1 > 0 /\ arg1-arg1p2 == 0), cost: 1
   3: f84_0_main_LE -> f84_0_main_LE\' : arg1'=arg1p4, arg2'=arg2p4, (3*arg1 > 0 /\ arg1-arg1p4 == 0 /\ -1+arg1 > 0 /\ -1-2*x12+arg1 == 0), cost: 1
   2: f84_0_main_LE\' -> f84_0_main_LE : arg1'=arg1p3, arg2'=arg2p3, (-2*x10+arg1 >= 0 /\ -2*x10+arg1 == 0 /\ -2-2*x10+arg1 < 0 /\ -2+arg1-2*arg1p3 < 0 /\ arg1-2*arg1p3 >= 0 /\ arg1-arg1p3 > 0 /\ -1+arg1 > 0), cost: 1
   4: f84_0_main_LE\' -> f84_0_main_LE : arg1'=arg1p5, arg2'=arg2p5, (3*arg1 > 0 /\ -2-2*x14+arg1 < 0 /\ 1+3*arg1-arg1p5 == 0 /\ -2*x14+arg1 >= 0 /\ -1+arg1 > 0 /\ -1-2*x14+arg1 == 0), cost: 1
   6: __init -> f84_0_main_LE : arg1'=arg1p1, arg2'=arg2p1, (1+arg2p6 > 0 /\ 1+arg1p1 > 0 /\ arg1p6 > 0), cost: 1

	Eliminating location f1_0_main_Load by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_Load : arg1'=arg1p6, arg2'=arg2p6, T, cost: 1
	Second rule:
	f1_0_main_Load -> f84_0_main_LE : arg1'=arg1p1, arg2'=arg2p1, (arg1 > 0 /\ 1+arg2 > 0 /\ 1+arg1p1 > 0), cost: 1
	New rule:
	__init -> f84_0_main_LE : arg1'=arg1p1, arg2'=arg2p1, (1+arg2p6 > 0 /\ 1+arg1p1 > 0 /\ arg1p6 > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 5

Simplified Transitions

Start location: __init
Program variables: arg1 arg2
   7: f84_0_main_LE -> f84_0_main_LE\' : arg2'=arg2p2, (arg1-2*x6 == 0 /\ -1+arg1 > 0), cost: 1
   8: f84_0_main_LE -> f84_0_main_LE\' : arg2'=arg2p4, (3*arg1 > 0 /\ -1+arg1 > 0 /\ -1-2*x12+arg1 == 0), cost: 1
   2: f84_0_main_LE\' -> f84_0_main_LE : arg1'=arg1p3, arg2'=arg2p3, (-2*x10+arg1 >= 0 /\ -2*x10+arg1 == 0 /\ -2-2*x10+arg1 < 0 /\ -2+arg1-2*arg1p3 < 0 /\ arg1-2*arg1p3 >= 0 /\ arg1-arg1p3 > 0 /\ -1+arg1 > 0), cost: 1
   9: f84_0_main_LE\' -> f84_0_main_LE : arg1'=1+3*arg1, arg2'=arg2p5, (3*arg1 > 0 /\ -2-2*x14+arg1 < 0 /\ -2*x14+arg1 >= 0 /\ -1+arg1 > 0 /\ -1-2*x14+arg1 == 0), cost: 1
  10: __init -> f84_0_main_LE : arg1'=arg1p1, arg2'=arg2p1, (1+arg1p1 > 0), cost: 1

	Propagated Equalities

	Original rule:
	f84_0_main_LE -> f84_0_main_LE\' : arg1'=arg1p2, arg2'=arg2p2, (arg1-2*x6 == 0 /\ -x7+arg1 > 0 /\ -1+arg1 > 0 /\ arg1-arg1p2 == 0), cost: 1
	New rule:
	f84_0_main_LE -> f84_0_main_LE\' : arg1'=arg1, arg2'=arg2p2, (0 == 0 /\ arg1-2*x6 == 0 /\ -x7+arg1 > 0 /\ -1+arg1 > 0), cost: 1
	
		propagated equality arg1p2 = arg1
		
	Simplified Guard

	Original rule:
	f84_0_main_LE -> f84_0_main_LE\' : arg1'=arg1, arg2'=arg2p2, (0 == 0 /\ arg1-2*x6 == 0 /\ -x7+arg1 > 0 /\ -1+arg1 > 0), cost: 1
	New rule:
	f84_0_main_LE -> f84_0_main_LE\' : arg1'=arg1, arg2'=arg2p2, (arg1-2*x6 == 0 /\ -x7+arg1 > 0 /\ -1+arg1 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	f84_0_main_LE -> f84_0_main_LE\' : arg1'=arg1, arg2'=arg2p2, (arg1-2*x6 == 0 /\ -x7+arg1 > 0 /\ -1+arg1 > 0), cost: 1
	New rule:
	f84_0_main_LE -> f84_0_main_LE\' : arg1'=arg1, arg2'=arg2p2, (arg1-2*x6 == 0 /\ -1+arg1 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f84_0_main_LE -> f84_0_main_LE\' : arg1'=arg1, arg2'=arg2p2, (arg1-2*x6 == 0 /\ -1+arg1 > 0), cost: 1
	New rule:
	f84_0_main_LE -> f84_0_main_LE\' : arg2'=arg2p2, (arg1-2*x6 == 0 /\ -1+arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f84_0_main_LE -> f84_0_main_LE\' : arg1'=arg1p4, arg2'=arg2p4, (3*arg1 > 0 /\ arg1-arg1p4 == 0 /\ -1+arg1 > 0 /\ -1-2*x12+arg1 == 0), cost: 1
	New rule:
	f84_0_main_LE -> f84_0_main_LE\' : arg1'=arg1, arg2'=arg2p4, (0 == 0 /\ 3*arg1 > 0 /\ -1+arg1 > 0 /\ -1-2*x12+arg1 == 0), cost: 1
	
		propagated equality arg1p4 = arg1
		
	Simplified Guard

	Original rule:
	f84_0_main_LE -> f84_0_main_LE\' : arg1'=arg1, arg2'=arg2p4, (0 == 0 /\ 3*arg1 > 0 /\ -1+arg1 > 0 /\ -1-2*x12+arg1 == 0), cost: 1
	New rule:
	f84_0_main_LE -> f84_0_main_LE\' : arg1'=arg1, arg2'=arg2p4, (3*arg1 > 0 /\ -1+arg1 > 0 /\ -1-2*x12+arg1 == 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f84_0_main_LE -> f84_0_main_LE\' : arg1'=arg1, arg2'=arg2p4, (3*arg1 > 0 /\ -1+arg1 > 0 /\ -1-2*x12+arg1 == 0), cost: 1
	New rule:
	f84_0_main_LE -> f84_0_main_LE\' : arg2'=arg2p4, (3*arg1 > 0 /\ -1+arg1 > 0 /\ -1-2*x12+arg1 == 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f84_0_main_LE\' -> f84_0_main_LE : arg1'=arg1p5, arg2'=arg2p5, (3*arg1 > 0 /\ -2-2*x14+arg1 < 0 /\ 1+3*arg1-arg1p5 == 0 /\ -2*x14+arg1 >= 0 /\ -1+arg1 > 0 /\ -1-2*x14+arg1 == 0), cost: 1
	New rule:
	f84_0_main_LE\' -> f84_0_main_LE : arg1'=1+3*arg1, arg2'=arg2p5, (0 == 0 /\ 3*arg1 > 0 /\ -2-2*x14+arg1 < 0 /\ -2*x14+arg1 >= 0 /\ -1+arg1 > 0 /\ -1-2*x14+arg1 == 0), cost: 1
	
		propagated equality arg1p5 = 1+3*arg1
		
	Simplified Guard

	Original rule:
	f84_0_main_LE\' -> f84_0_main_LE : arg1'=1+3*arg1, arg2'=arg2p5, (0 == 0 /\ 3*arg1 > 0 /\ -2-2*x14+arg1 < 0 /\ -2*x14+arg1 >= 0 /\ -1+arg1 > 0 /\ -1-2*x14+arg1 == 0), cost: 1
	New rule:
	f84_0_main_LE\' -> f84_0_main_LE : arg1'=1+3*arg1, arg2'=arg2p5, (3*arg1 > 0 /\ -2-2*x14+arg1 < 0 /\ -2*x14+arg1 >= 0 /\ -1+arg1 > 0 /\ -1-2*x14+arg1 == 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	__init -> f84_0_main_LE : arg1'=arg1p1, arg2'=arg2p1, (1+arg2p6 > 0 /\ 1+arg1p1 > 0 /\ arg1p6 > 0), cost: 1
	New rule:
	__init -> f84_0_main_LE : arg1'=arg1p1, arg2'=arg2p1, (1+arg1p1 > 0), cost: 1

Step with 10

	Trace

	10[(1+arg1p1 > 0)]
	
	Blocked

	[{}, {}]

Step with 7

	Trace

	10[(1+arg1p1 > 0)], 7[(arg1-2*x6 == 0 /\ -1+arg1 > 0)]
	
	Blocked

	[{}, {}, {}]

Step with 2

	Trace

	10[(1+arg1p1 > 0)], 7[(arg1-2*x6 == 0 /\ -1+arg1 > 0)], 2[(-2*x10+arg1 >= 0 /\ -2*x10+arg1 == 0 /\ -2-2*x10+arg1 < 0 /\ -2+arg1-2*arg1p3 < 0 /\ arg1-2*arg1p3 >= 0 /\ arg1-arg1p3 > 0 /\ -1+arg1 > 0)]
	
	Blocked

	[{}, {}, {}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 8

	Trace

	10[(1+arg1p1 > 0)], 7[(arg1-2*x6 == 0 /\ -1+arg1 > 0)], 2[(-2*x10+arg1 >= 0 /\ -2*x10+arg1 == 0 /\ -2-2*x10+arg1 < 0 /\ -2+arg1-2*arg1p3 < 0 /\ arg1-2*arg1p3 >= 0 /\ arg1-arg1p3 > 0 /\ -1+arg1 > 0)], 8[(3*arg1 > 0 /\ -1+arg1 > 0 /\ -1-2*x12+arg1 == 0)]
	
	Blocked

	[{}, {}, {}, {7[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 9

	Trace

	10[(1+arg1p1 > 0)], 7[(arg1-2*x6 == 0 /\ -1+arg1 > 0)], 2[(-2*x10+arg1 >= 0 /\ -2*x10+arg1 == 0 /\ -2-2*x10+arg1 < 0 /\ -2+arg1-2*arg1p3 < 0 /\ arg1-2*arg1p3 >= 0 /\ arg1-arg1p3 > 0 /\ -1+arg1 > 0)], 8[(3*arg1 > 0 /\ -1+arg1 > 0 /\ -1-2*x12+arg1 == 0)], 9[(3*arg1 > 0 /\ -2-2*x14+arg1 < 0 /\ -2*x14+arg1 >= 0 /\ -1+arg1 > 0 /\ -1-2*x14+arg1 == 0)]
	
	Blocked

	[{}, {}, {}, {7[T]}, {2[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Acceleration Failed

marked recursive suffix as redundant

Backtrack

	Trace

	10[(1+arg1p1 > 0)], 7[(arg1-2*x6 == 0 /\ -1+arg1 > 0)], 2[(-2*x10+arg1 >= 0 /\ -2*x10+arg1 == 0 /\ -2-2*x10+arg1 < 0 /\ -2+arg1-2*arg1p3 < 0 /\ arg1-2*arg1p3 >= 0 /\ arg1-arg1p3 > 0 /\ -1+arg1 > 0)], 8[(3*arg1 > 0 /\ -1+arg1 > 0 /\ -1-2*x12+arg1 == 0)]
	
	Blocked

	[{}, {}, {}, {7[T]}, {2[T], 9[T]}]

Backtrack

	Trace

	10[(1+arg1p1 > 0)], 7[(arg1-2*x6 == 0 /\ -1+arg1 > 0)], 2[(-2*x10+arg1 >= 0 /\ -2*x10+arg1 == 0 /\ -2-2*x10+arg1 < 0 /\ -2+arg1-2*arg1p3 < 0 /\ arg1-2*arg1p3 >= 0 /\ arg1-arg1p3 > 0 /\ -1+arg1 > 0)]
	
	Blocked

	[{}, {}, {}, {7[T], 8[T]}]

Backtrack

	Trace

	10[(1+arg1p1 > 0)], 7[(arg1-2*x6 == 0 /\ -1+arg1 > 0)]
	
	Blocked

	[{}, {}, {2[T]}]

Backtrack

	Trace

	10[(1+arg1p1 > 0)]
	
	Blocked

	[{}, {7[T]}]

Step with 8

	Trace

	10[(1+arg1p1 > 0)], 8[(3*arg1 > 0 /\ -1+arg1 > 0 /\ -1-2*x12+arg1 == 0)]
	
	Blocked

	[{}, {7[T]}, {}]

Step with 9

	Trace

	10[(1+arg1p1 > 0)], 8[(3*arg1 > 0 /\ -1+arg1 > 0 /\ -1-2*x12+arg1 == 0)], 9[(3*arg1 > 0 /\ -2-2*x14+arg1 < 0 /\ -2*x14+arg1 >= 0 /\ -1+arg1 > 0 /\ -1-2*x14+arg1 == 0)]
	
	Blocked

	[{}, {7[T]}, {}, {}]

Step with 7

	Trace

	10[(1+arg1p1 > 0)], 8[(3*arg1 > 0 /\ -1+arg1 > 0 /\ -1-2*x12+arg1 == 0)], 9[(3*arg1 > 0 /\ -2-2*x14+arg1 < 0 /\ -2*x14+arg1 >= 0 /\ -1+arg1 > 0 /\ -1-2*x14+arg1 == 0)], 7[(arg1-2*x6 == 0 /\ -1+arg1 > 0)]
	
	Blocked

	[{}, {7[T]}, {}, {8[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 2

	Trace

	10[(1+arg1p1 > 0)], 8[(3*arg1 > 0 /\ -1+arg1 > 0 /\ -1-2*x12+arg1 == 0)], 9[(3*arg1 > 0 /\ -2-2*x14+arg1 < 0 /\ -2*x14+arg1 >= 0 /\ -1+arg1 > 0 /\ -1-2*x14+arg1 == 0)], 7[(arg1-2*x6 == 0 /\ -1+arg1 > 0)], 2[(-2*x10+arg1 >= 0 /\ -2*x10+arg1 == 0 /\ -2-2*x10+arg1 < 0 /\ -2+arg1-2*arg1p3 < 0 /\ arg1-2*arg1p3 >= 0 /\ arg1-arg1p3 > 0 /\ -1+arg1 > 0)]
	
	Blocked

	[{}, {7[T]}, {}, {8[T]}, {9[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Backtrack

	Trace

	10[(1+arg1p1 > 0)], 8[(3*arg1 > 0 /\ -1+arg1 > 0 /\ -1-2*x12+arg1 == 0)], 9[(3*arg1 > 0 /\ -2-2*x14+arg1 < 0 /\ -2*x14+arg1 >= 0 /\ -1+arg1 > 0 /\ -1-2*x14+arg1 == 0)], 7[(arg1-2*x6 == 0 /\ -1+arg1 > 0)]
	
	Blocked

	[{}, {7[T]}, {}, {8[T]}, {2[T], 9[T]}]

Backtrack

	Trace

	10[(1+arg1p1 > 0)], 8[(3*arg1 > 0 /\ -1+arg1 > 0 /\ -1-2*x12+arg1 == 0)], 9[(3*arg1 > 0 /\ -2-2*x14+arg1 < 0 /\ -2*x14+arg1 >= 0 /\ -1+arg1 > 0 /\ -1-2*x14+arg1 == 0)]
	
	Blocked

	[{}, {7[T]}, {}, {7[T], 8[T]}]

Backtrack

	Trace

	10[(1+arg1p1 > 0)], 8[(3*arg1 > 0 /\ -1+arg1 > 0 /\ -1-2*x12+arg1 == 0)]
	
	Blocked

	[{}, {7[T]}, {9[T]}]

Backtrack

	Trace

	10[(1+arg1p1 > 0)]
	
	Blocked

	[{}, {7[T], 8[T]}]

Backtrack

	Trace

	Blocked

	[{10[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
