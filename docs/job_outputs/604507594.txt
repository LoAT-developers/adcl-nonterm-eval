NO

Initial ITS

Start location: l9
Program variables: __disjvr_0^0 __disjvr_1^0 result_4^0 tmp_6^0 x_5^0
   0: l0 -> l1 : __disjvr_0^0'=__disjvr_0^post1, __disjvr_1^0'=__disjvr_1^post1, result_4^0'=result_4^post1, tmp_6^0'=tmp_6^post1, x_5^0'=x_5^post1, (x_5^0-x_5^post1 == 0 /\ -tmp_6^post1+tmp_6^0 == 0 /\ result_4^0-result_4^post1 == 0 /\ -__disjvr_1^post1+__disjvr_1^0 == 0 /\ -__disjvr_0^post1+__disjvr_0^0 == 0), cost: 1
   1: l1 -> l2 : __disjvr_0^0'=__disjvr_0^post2, __disjvr_1^0'=__disjvr_1^post2, result_4^0'=result_4^post2, tmp_6^0'=tmp_6^post2, x_5^0'=x_5^post2, (0 == 0 /\ x_5^0-x_5^post2 == 0 /\ x_5^0 <= 0 /\ __disjvr_0^0-__disjvr_0^post2 == 0 /\ -tmp_6^post2 <= 0 /\ tmp_6^post2 <= 0 /\ -__disjvr_1^post2+__disjvr_1^0 == 0), cost: 1
   2: l1 -> l3 : __disjvr_0^0'=__disjvr_0^post3, __disjvr_1^0'=__disjvr_1^post3, result_4^0'=result_4^post3, tmp_6^0'=tmp_6^post3, x_5^0'=x_5^post3, (0 == 0 /\ result_4^0-result_4^post3 == 0 /\ tmp_6^post3 <= 0 /\ 1-x_5^0 <= 0 /\ -tmp_6^post3 <= 0 /\ -__disjvr_0^post3+__disjvr_0^0 == 0 /\ -__disjvr_1^post3+__disjvr_1^0 == 0 /\ x_5^0-x_5^post3 == 0), cost: 1
   4: l1 -> l4 : __disjvr_0^0'=__disjvr_0^post5, __disjvr_1^0'=__disjvr_1^post5, result_4^0'=result_4^post5, tmp_6^0'=tmp_6^post5, x_5^0'=x_5^post5, (0 == 0 /\ x_5^0-x_5^post5 == 0 /\ result_4^0-result_4^post5 == 0 /\ -__disjvr_0^post5+__disjvr_0^0 == 0 /\ -__disjvr_1^post5+__disjvr_1^0 == 0), cost: 1
   7: l1 -> l7 : __disjvr_0^0'=__disjvr_0^post8, __disjvr_1^0'=__disjvr_1^post8, result_4^0'=result_4^post8, tmp_6^0'=tmp_6^post8, x_5^0'=x_5^post8, (0 == 0 /\ -result_4^post8+result_4^0 == 0 /\ x_5^0-x_5^post8 == 0 /\ __disjvr_0^0-__disjvr_0^post8 == 0 /\ -__disjvr_1^post8+__disjvr_1^0 == 0), cost: 1
   3: l3 -> l1 : __disjvr_0^0'=__disjvr_0^post4, __disjvr_1^0'=__disjvr_1^post4, result_4^0'=result_4^post4, tmp_6^0'=tmp_6^post4, x_5^0'=x_5^post4, (x_5^0-x_5^post4 == 0 /\ tmp_6^0-tmp_6^post4 == 0 /\ -__disjvr_1^post4+__disjvr_1^0 == 0 /\ -result_4^post4+result_4^0 == 0 /\ __disjvr_0^0-__disjvr_0^post4 == 0), cost: 1
   5: l4 -> l5 : __disjvr_0^0'=__disjvr_0^post6, __disjvr_1^0'=__disjvr_1^post6, result_4^0'=result_4^post6, tmp_6^0'=tmp_6^post6, x_5^0'=x_5^post6, (tmp_6^0-tmp_6^post6 == 0 /\ -x_5^post6+x_5^0 == 0 /\ -__disjvr_0^0+__disjvr_0^post6 == 0 /\ -__disjvr_1^post6+__disjvr_1^0 == 0 /\ -result_4^post6+result_4^0 == 0 /\ __disjvr_0^0-__disjvr_0^post6 == 0), cost: 1
   6: l5 -> l2 : __disjvr_0^0'=__disjvr_0^post7, __disjvr_1^0'=__disjvr_1^post7, result_4^0'=result_4^post7, tmp_6^0'=tmp_6^post7, x_5^0'=x_5^post7, (0 == 0 /\ -tmp_6^post7+tmp_6^0 == 0 /\ -__disjvr_1^post7+__disjvr_1^0 == 0 /\ x_5^post7 <= 0 /\ 1-x_5^0+x_5^post7 == 0 /\ __disjvr_0^0-__disjvr_0^post7 == 0), cost: 1
   8: l7 -> l8 : __disjvr_0^0'=__disjvr_0^post9, __disjvr_1^0'=__disjvr_1^post9, result_4^0'=result_4^post9, tmp_6^0'=tmp_6^post9, x_5^0'=x_5^post9, (__disjvr_0^0-__disjvr_0^post9 == 0 /\ x_5^0-x_5^post9 == 0 /\ -__disjvr_1^post9+__disjvr_1^0 == 0 /\ -tmp_6^post9+tmp_6^0 == 0 /\ -result_4^post9+result_4^0 == 0 /\ __disjvr_1^post9-__disjvr_1^0 == 0), cost: 1
   9: l8 -> l6 : __disjvr_0^0'=__disjvr_0^post10, __disjvr_1^0'=__disjvr_1^post10, result_4^0'=result_4^post10, tmp_6^0'=tmp_6^post10, x_5^0'=x_5^post10, (1-x_5^0+x_5^post10 == 0 /\ -tmp_6^post10+tmp_6^0 == 0 /\ -__disjvr_1^post10+__disjvr_1^0 == 0 /\ result_4^0-result_4^post10 == 0 /\ 1-x_5^post10 <= 0 /\ -__disjvr_0^post10+__disjvr_0^0 == 0), cost: 1
  10: l6 -> l1 : __disjvr_0^0'=__disjvr_0^post11, __disjvr_1^0'=__disjvr_1^post11, result_4^0'=result_4^post11, tmp_6^0'=tmp_6^post11, x_5^0'=x_5^post11, (-result_4^post11+result_4^0 == 0 /\ x_5^0-x_5^post11 == 0 /\ __disjvr_0^0-__disjvr_0^post11 == 0 /\ tmp_6^0-tmp_6^post11 == 0 /\ -__disjvr_1^post11+__disjvr_1^0 == 0), cost: 1
  11: l9 -> l0 : __disjvr_0^0'=__disjvr_0^post12, __disjvr_1^0'=__disjvr_1^post12, result_4^0'=result_4^post12, tmp_6^0'=tmp_6^post12, x_5^0'=x_5^post12, (__disjvr_0^0-__disjvr_0^post12 == 0 /\ x_5^0-x_5^post12 == 0 /\ -__disjvr_1^post12+__disjvr_1^0 == 0 /\ -tmp_6^post12+tmp_6^0 == 0 /\ -result_4^post12+result_4^0 == 0), cost: 1

Chained Linear Paths

Start location: l9
Program variables: __disjvr_0^0 __disjvr_1^0 result_4^0 tmp_6^0 x_5^0
   1: l1 -> l2 : __disjvr_0^0'=__disjvr_0^post2, __disjvr_1^0'=__disjvr_1^post2, result_4^0'=result_4^post2, tmp_6^0'=tmp_6^post2, x_5^0'=x_5^post2, (0 == 0 /\ x_5^0-x_5^post2 == 0 /\ x_5^0 <= 0 /\ __disjvr_0^0-__disjvr_0^post2 == 0 /\ -tmp_6^post2 <= 0 /\ tmp_6^post2 <= 0 /\ -__disjvr_1^post2+__disjvr_1^0 == 0), cost: 1
  13: l1 -> l1 : __disjvr_0^0'=__disjvr_0^post4, __disjvr_1^0'=__disjvr_1^post4, result_4^0'=result_4^post4, tmp_6^0'=tmp_6^post4, x_5^0'=x_5^post4, (0 == 0 /\ result_4^0-result_4^post3 == 0 /\ tmp_6^post3 <= 0 /\ 1-x_5^0 <= 0 /\ -result_4^post4+result_4^post3 == 0 /\ -tmp_6^post3 <= 0 /\ x_5^post3-x_5^post4 == 0 /\ -__disjvr_1^post4+__disjvr_1^post3 == 0 /\ -__disjvr_0^post3+__disjvr_0^0 == 0 /\ -__disjvr_1^post3+__disjvr_1^0 == 0 /\ __disjvr_0^post3-__disjvr_0^post4 == 0 /\ tmp_6^post3-tmp_6^post4 == 0 /\ x_5^0-x_5^post3 == 0), cost: 1
  16: l1 -> l2 : __disjvr_0^0'=__disjvr_0^post7, __disjvr_1^0'=__disjvr_1^post7, result_4^0'=result_4^post7, tmp_6^0'=tmp_6^post7, x_5^0'=x_5^post7, (0 == 0 /\ x_5^0-x_5^post5 == 0 /\ -result_4^post6+result_4^post5 == 0 /\ __disjvr_1^post6-__disjvr_1^post7 == 0 /\ -tmp_6^post7+tmp_6^post6 == 0 /\ -__disjvr_1^post6+__disjvr_1^post5 == 0 /\ 1-x_5^post6+x_5^post7 == 0 /\ result_4^0-result_4^post5 == 0 /\ tmp_6^post5-tmp_6^post6 == 0 /\ x_5^post7 <= 0 /\ -__disjvr_0^post5+__disjvr_0^post6 == 0 /\ -__disjvr_0^post5+__disjvr_0^0 == 0 /\ -__disjvr_1^post5+__disjvr_1^0 == 0 /\ -__disjvr_0^post7+__disjvr_0^post6 == 0 /\ __disjvr_0^post5-__disjvr_0^post6 == 0 /\ -x_5^post6+x_5^post5 == 0), cost: 1
  18: l1 -> l1 : __disjvr_0^0'=__disjvr_0^post11, __disjvr_1^0'=__disjvr_1^post11, result_4^0'=result_4^post11, tmp_6^0'=tmp_6^post11, x_5^0'=x_5^post11, (0 == 0 /\ -__disjvr_1^post10+__disjvr_1^post9 == 0 /\ -result_4^post8+result_4^0 == 0 /\ x_5^post8-x_5^post9 == 0 /\ -result_4^post11+result_4^post10 == 0 /\ -tmp_6^post9+tmp_6^post8 == 0 /\ -x_5^post11+x_5^post10 == 0 /\ -__disjvr_0^post10+__disjvr_0^post9 == 0 /\ x_5^0-x_5^post8 == 0 /\ tmp_6^post10-tmp_6^post11 == 0 /\ -__disjvr_1^post8+__disjvr_1^post9 == 0 /\ result_4^post9-result_4^post10 == 0 /\ 1-x_5^post10 <= 0 /\ __disjvr_0^0-__disjvr_0^post8 == 0 /\ 1+x_5^post10-x_5^post9 == 0 /\ -result_4^post9+result_4^post8 == 0 /\ -__disjvr_1^post8+__disjvr_1^0 == 0 /\ __disjvr_0^post10-__disjvr_0^post11 == 0 /\ -tmp_6^post10+tmp_6^post9 == 0 /\ __disjvr_1^post8-__disjvr_1^post9 == 0 /\ -__disjvr_0^post9+__disjvr_0^post8 == 0 /\ -__disjvr_1^post11+__disjvr_1^post10 == 0), cost: 1
  12: l9 -> l1 : __disjvr_0^0'=__disjvr_0^post1, __disjvr_1^0'=__disjvr_1^post1, result_4^0'=result_4^post1, tmp_6^0'=tmp_6^post1, x_5^0'=x_5^post1, (-__disjvr_1^post1+__disjvr_1^post12 == 0 /\ __disjvr_0^0-__disjvr_0^post12 == 0 /\ -__disjvr_0^post1+__disjvr_0^post12 == 0 /\ result_4^post12-result_4^post1 == 0 /\ x_5^0-x_5^post12 == 0 /\ -tmp_6^post1+tmp_6^post12 == 0 /\ -__disjvr_1^post12+__disjvr_1^0 == 0 /\ -tmp_6^post12+tmp_6^0 == 0 /\ -result_4^post12+result_4^0 == 0 /\ -x_5^post1+x_5^post12 == 0), cost: 1

	Eliminating location l0 by chaining:

	Applied chaining

	First rule:
	l9 -> l0 : __disjvr_0^0'=__disjvr_0^post12, __disjvr_1^0'=__disjvr_1^post12, result_4^0'=result_4^post12, tmp_6^0'=tmp_6^post12, x_5^0'=x_5^post12, (__disjvr_0^0-__disjvr_0^post12 == 0 /\ x_5^0-x_5^post12 == 0 /\ -__disjvr_1^post12+__disjvr_1^0 == 0 /\ -tmp_6^post12+tmp_6^0 == 0 /\ -result_4^post12+result_4^0 == 0), cost: 1
	Second rule:
	l0 -> l1 : __disjvr_0^0'=__disjvr_0^post1, __disjvr_1^0'=__disjvr_1^post1, result_4^0'=result_4^post1, tmp_6^0'=tmp_6^post1, x_5^0'=x_5^post1, (x_5^0-x_5^post1 == 0 /\ -tmp_6^post1+tmp_6^0 == 0 /\ result_4^0-result_4^post1 == 0 /\ -__disjvr_1^post1+__disjvr_1^0 == 0 /\ -__disjvr_0^post1+__disjvr_0^0 == 0), cost: 1
	New rule:
	l9 -> l1 : __disjvr_0^0'=__disjvr_0^post1, __disjvr_1^0'=__disjvr_1^post1, result_4^0'=result_4^post1, tmp_6^0'=tmp_6^post1, x_5^0'=x_5^post1, (-__disjvr_1^post1+__disjvr_1^post12 == 0 /\ __disjvr_0^0-__disjvr_0^post12 == 0 /\ -__disjvr_0^post1+__disjvr_0^post12 == 0 /\ result_4^post12-result_4^post1 == 0 /\ x_5^0-x_5^post12 == 0 /\ -tmp_6^post1+tmp_6^post12 == 0 /\ -__disjvr_1^post12+__disjvr_1^0 == 0 /\ -tmp_6^post12+tmp_6^0 == 0 /\ -result_4^post12+result_4^0 == 0 /\ -x_5^post1+x_5^post12 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 11
	
	Eliminating location l3 by chaining:

	Applied chaining

	First rule:
	l1 -> l3 : __disjvr_0^0'=__disjvr_0^post3, __disjvr_1^0'=__disjvr_1^post3, result_4^0'=result_4^post3, tmp_6^0'=tmp_6^post3, x_5^0'=x_5^post3, (0 == 0 /\ result_4^0-result_4^post3 == 0 /\ tmp_6^post3 <= 0 /\ 1-x_5^0 <= 0 /\ -tmp_6^post3 <= 0 /\ -__disjvr_0^post3+__disjvr_0^0 == 0 /\ -__disjvr_1^post3+__disjvr_1^0 == 0 /\ x_5^0-x_5^post3 == 0), cost: 1
	Second rule:
	l3 -> l1 : __disjvr_0^0'=__disjvr_0^post4, __disjvr_1^0'=__disjvr_1^post4, result_4^0'=result_4^post4, tmp_6^0'=tmp_6^post4, x_5^0'=x_5^post4, (x_5^0-x_5^post4 == 0 /\ tmp_6^0-tmp_6^post4 == 0 /\ -__disjvr_1^post4+__disjvr_1^0 == 0 /\ -result_4^post4+result_4^0 == 0 /\ __disjvr_0^0-__disjvr_0^post4 == 0), cost: 1
	New rule:
	l1 -> l1 : __disjvr_0^0'=__disjvr_0^post4, __disjvr_1^0'=__disjvr_1^post4, result_4^0'=result_4^post4, tmp_6^0'=tmp_6^post4, x_5^0'=x_5^post4, (0 == 0 /\ result_4^0-result_4^post3 == 0 /\ tmp_6^post3 <= 0 /\ 1-x_5^0 <= 0 /\ -result_4^post4+result_4^post3 == 0 /\ -tmp_6^post3 <= 0 /\ x_5^post3-x_5^post4 == 0 /\ -__disjvr_1^post4+__disjvr_1^post3 == 0 /\ -__disjvr_0^post3+__disjvr_0^0 == 0 /\ -__disjvr_1^post3+__disjvr_1^0 == 0 /\ __disjvr_0^post3-__disjvr_0^post4 == 0 /\ tmp_6^post3-tmp_6^post4 == 0 /\ x_5^0-x_5^post3 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 2 3
	
	Eliminating location l4 by chaining:

	Applied chaining

	First rule:
	l1 -> l4 : __disjvr_0^0'=__disjvr_0^post5, __disjvr_1^0'=__disjvr_1^post5, result_4^0'=result_4^post5, tmp_6^0'=tmp_6^post5, x_5^0'=x_5^post5, (0 == 0 /\ x_5^0-x_5^post5 == 0 /\ result_4^0-result_4^post5 == 0 /\ -__disjvr_0^post5+__disjvr_0^0 == 0 /\ -__disjvr_1^post5+__disjvr_1^0 == 0), cost: 1
	Second rule:
	l4 -> l5 : __disjvr_0^0'=__disjvr_0^post6, __disjvr_1^0'=__disjvr_1^post6, result_4^0'=result_4^post6, tmp_6^0'=tmp_6^post6, x_5^0'=x_5^post6, (tmp_6^0-tmp_6^post6 == 0 /\ -x_5^post6+x_5^0 == 0 /\ -__disjvr_0^0+__disjvr_0^post6 == 0 /\ -__disjvr_1^post6+__disjvr_1^0 == 0 /\ -result_4^post6+result_4^0 == 0 /\ __disjvr_0^0-__disjvr_0^post6 == 0), cost: 1
	New rule:
	l1 -> l5 : __disjvr_0^0'=__disjvr_0^post6, __disjvr_1^0'=__disjvr_1^post6, result_4^0'=result_4^post6, tmp_6^0'=tmp_6^post6, x_5^0'=x_5^post6, (0 == 0 /\ x_5^0-x_5^post5 == 0 /\ -result_4^post6+result_4^post5 == 0 /\ -__disjvr_1^post6+__disjvr_1^post5 == 0 /\ result_4^0-result_4^post5 == 0 /\ tmp_6^post5-tmp_6^post6 == 0 /\ -__disjvr_0^post5+__disjvr_0^post6 == 0 /\ -__disjvr_0^post5+__disjvr_0^0 == 0 /\ -__disjvr_1^post5+__disjvr_1^0 == 0 /\ __disjvr_0^post5-__disjvr_0^post6 == 0 /\ -x_5^post6+x_5^post5 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 4 5
	
	Eliminating location l7 by chaining:

	Applied chaining

	First rule:
	l1 -> l7 : __disjvr_0^0'=__disjvr_0^post8, __disjvr_1^0'=__disjvr_1^post8, result_4^0'=result_4^post8, tmp_6^0'=tmp_6^post8, x_5^0'=x_5^post8, (0 == 0 /\ -result_4^post8+result_4^0 == 0 /\ x_5^0-x_5^post8 == 0 /\ __disjvr_0^0-__disjvr_0^post8 == 0 /\ -__disjvr_1^post8+__disjvr_1^0 == 0), cost: 1
	Second rule:
	l7 -> l8 : __disjvr_0^0'=__disjvr_0^post9, __disjvr_1^0'=__disjvr_1^post9, result_4^0'=result_4^post9, tmp_6^0'=tmp_6^post9, x_5^0'=x_5^post9, (__disjvr_0^0-__disjvr_0^post9 == 0 /\ x_5^0-x_5^post9 == 0 /\ -__disjvr_1^post9+__disjvr_1^0 == 0 /\ -tmp_6^post9+tmp_6^0 == 0 /\ -result_4^post9+result_4^0 == 0 /\ __disjvr_1^post9-__disjvr_1^0 == 0), cost: 1
	New rule:
	l1 -> l8 : __disjvr_0^0'=__disjvr_0^post9, __disjvr_1^0'=__disjvr_1^post9, result_4^0'=result_4^post9, tmp_6^0'=tmp_6^post9, x_5^0'=x_5^post9, (0 == 0 /\ -result_4^post8+result_4^0 == 0 /\ x_5^post8-x_5^post9 == 0 /\ -tmp_6^post9+tmp_6^post8 == 0 /\ x_5^0-x_5^post8 == 0 /\ -__disjvr_1^post8+__disjvr_1^post9 == 0 /\ __disjvr_0^0-__disjvr_0^post8 == 0 /\ -result_4^post9+result_4^post8 == 0 /\ -__disjvr_1^post8+__disjvr_1^0 == 0 /\ __disjvr_1^post8-__disjvr_1^post9 == 0 /\ -__disjvr_0^post9+__disjvr_0^post8 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 7 8
	
	Eliminating location l5 by chaining:

	Applied chaining

	First rule:
	l1 -> l5 : __disjvr_0^0'=__disjvr_0^post6, __disjvr_1^0'=__disjvr_1^post6, result_4^0'=result_4^post6, tmp_6^0'=tmp_6^post6, x_5^0'=x_5^post6, (0 == 0 /\ x_5^0-x_5^post5 == 0 /\ -result_4^post6+result_4^post5 == 0 /\ -__disjvr_1^post6+__disjvr_1^post5 == 0 /\ result_4^0-result_4^post5 == 0 /\ tmp_6^post5-tmp_6^post6 == 0 /\ -__disjvr_0^post5+__disjvr_0^post6 == 0 /\ -__disjvr_0^post5+__disjvr_0^0 == 0 /\ -__disjvr_1^post5+__disjvr_1^0 == 0 /\ __disjvr_0^post5-__disjvr_0^post6 == 0 /\ -x_5^post6+x_5^post5 == 0), cost: 1
	Second rule:
	l5 -> l2 : __disjvr_0^0'=__disjvr_0^post7, __disjvr_1^0'=__disjvr_1^post7, result_4^0'=result_4^post7, tmp_6^0'=tmp_6^post7, x_5^0'=x_5^post7, (0 == 0 /\ -tmp_6^post7+tmp_6^0 == 0 /\ -__disjvr_1^post7+__disjvr_1^0 == 0 /\ x_5^post7 <= 0 /\ 1-x_5^0+x_5^post7 == 0 /\ __disjvr_0^0-__disjvr_0^post7 == 0), cost: 1
	New rule:
	l1 -> l2 : __disjvr_0^0'=__disjvr_0^post7, __disjvr_1^0'=__disjvr_1^post7, result_4^0'=result_4^post7, tmp_6^0'=tmp_6^post7, x_5^0'=x_5^post7, (0 == 0 /\ x_5^0-x_5^post5 == 0 /\ -result_4^post6+result_4^post5 == 0 /\ __disjvr_1^post6-__disjvr_1^post7 == 0 /\ -tmp_6^post7+tmp_6^post6 == 0 /\ -__disjvr_1^post6+__disjvr_1^post5 == 0 /\ 1-x_5^post6+x_5^post7 == 0 /\ result_4^0-result_4^post5 == 0 /\ tmp_6^post5-tmp_6^post6 == 0 /\ x_5^post7 <= 0 /\ -__disjvr_0^post5+__disjvr_0^post6 == 0 /\ -__disjvr_0^post5+__disjvr_0^0 == 0 /\ -__disjvr_1^post5+__disjvr_1^0 == 0 /\ -__disjvr_0^post7+__disjvr_0^post6 == 0 /\ __disjvr_0^post5-__disjvr_0^post6 == 0 /\ -x_5^post6+x_5^post5 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 6 14
	
	Eliminating location l8 by chaining:

	Applied chaining

	First rule:
	l1 -> l8 : __disjvr_0^0'=__disjvr_0^post9, __disjvr_1^0'=__disjvr_1^post9, result_4^0'=result_4^post9, tmp_6^0'=tmp_6^post9, x_5^0'=x_5^post9, (0 == 0 /\ -result_4^post8+result_4^0 == 0 /\ x_5^post8-x_5^post9 == 0 /\ -tmp_6^post9+tmp_6^post8 == 0 /\ x_5^0-x_5^post8 == 0 /\ -__disjvr_1^post8+__disjvr_1^post9 == 0 /\ __disjvr_0^0-__disjvr_0^post8 == 0 /\ -result_4^post9+result_4^post8 == 0 /\ -__disjvr_1^post8+__disjvr_1^0 == 0 /\ __disjvr_1^post8-__disjvr_1^post9 == 0 /\ -__disjvr_0^post9+__disjvr_0^post8 == 0), cost: 1
	Second rule:
	l8 -> l6 : __disjvr_0^0'=__disjvr_0^post10, __disjvr_1^0'=__disjvr_1^post10, result_4^0'=result_4^post10, tmp_6^0'=tmp_6^post10, x_5^0'=x_5^post10, (1-x_5^0+x_5^post10 == 0 /\ -tmp_6^post10+tmp_6^0 == 0 /\ -__disjvr_1^post10+__disjvr_1^0 == 0 /\ result_4^0-result_4^post10 == 0 /\ 1-x_5^post10 <= 0 /\ -__disjvr_0^post10+__disjvr_0^0 == 0), cost: 1
	New rule:
	l1 -> l6 : __disjvr_0^0'=__disjvr_0^post10, __disjvr_1^0'=__disjvr_1^post10, result_4^0'=result_4^post10, tmp_6^0'=tmp_6^post10, x_5^0'=x_5^post10, (0 == 0 /\ -__disjvr_1^post10+__disjvr_1^post9 == 0 /\ -result_4^post8+result_4^0 == 0 /\ x_5^post8-x_5^post9 == 0 /\ -tmp_6^post9+tmp_6^post8 == 0 /\ -__disjvr_0^post10+__disjvr_0^post9 == 0 /\ x_5^0-x_5^post8 == 0 /\ -__disjvr_1^post8+__disjvr_1^post9 == 0 /\ result_4^post9-result_4^post10 == 0 /\ 1-x_5^post10 <= 0 /\ __disjvr_0^0-__disjvr_0^post8 == 0 /\ 1+x_5^post10-x_5^post9 == 0 /\ -result_4^post9+result_4^post8 == 0 /\ -__disjvr_1^post8+__disjvr_1^0 == 0 /\ -tmp_6^post10+tmp_6^post9 == 0 /\ __disjvr_1^post8-__disjvr_1^post9 == 0 /\ -__disjvr_0^post9+__disjvr_0^post8 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 9 15
	
	Eliminating location l6 by chaining:

	Applied chaining

	First rule:
	l1 -> l6 : __disjvr_0^0'=__disjvr_0^post10, __disjvr_1^0'=__disjvr_1^post10, result_4^0'=result_4^post10, tmp_6^0'=tmp_6^post10, x_5^0'=x_5^post10, (0 == 0 /\ -__disjvr_1^post10+__disjvr_1^post9 == 0 /\ -result_4^post8+result_4^0 == 0 /\ x_5^post8-x_5^post9 == 0 /\ -tmp_6^post9+tmp_6^post8 == 0 /\ -__disjvr_0^post10+__disjvr_0^post9 == 0 /\ x_5^0-x_5^post8 == 0 /\ -__disjvr_1^post8+__disjvr_1^post9 == 0 /\ result_4^post9-result_4^post10 == 0 /\ 1-x_5^post10 <= 0 /\ __disjvr_0^0-__disjvr_0^post8 == 0 /\ 1+x_5^post10-x_5^post9 == 0 /\ -result_4^post9+result_4^post8 == 0 /\ -__disjvr_1^post8+__disjvr_1^0 == 0 /\ -tmp_6^post10+tmp_6^post9 == 0 /\ __disjvr_1^post8-__disjvr_1^post9 == 0 /\ -__disjvr_0^post9+__disjvr_0^post8 == 0), cost: 1
	Second rule:
	l6 -> l1 : __disjvr_0^0'=__disjvr_0^post11, __disjvr_1^0'=__disjvr_1^post11, result_4^0'=result_4^post11, tmp_6^0'=tmp_6^post11, x_5^0'=x_5^post11, (-result_4^post11+result_4^0 == 0 /\ x_5^0-x_5^post11 == 0 /\ __disjvr_0^0-__disjvr_0^post11 == 0 /\ tmp_6^0-tmp_6^post11 == 0 /\ -__disjvr_1^post11+__disjvr_1^0 == 0), cost: 1
	New rule:
	l1 -> l1 : __disjvr_0^0'=__disjvr_0^post11, __disjvr_1^0'=__disjvr_1^post11, result_4^0'=result_4^post11, tmp_6^0'=tmp_6^post11, x_5^0'=x_5^post11, (0 == 0 /\ -__disjvr_1^post10+__disjvr_1^post9 == 0 /\ -result_4^post8+result_4^0 == 0 /\ x_5^post8-x_5^post9 == 0 /\ -result_4^post11+result_4^post10 == 0 /\ -tmp_6^post9+tmp_6^post8 == 0 /\ -x_5^post11+x_5^post10 == 0 /\ -__disjvr_0^post10+__disjvr_0^post9 == 0 /\ x_5^0-x_5^post8 == 0 /\ tmp_6^post10-tmp_6^post11 == 0 /\ -__disjvr_1^post8+__disjvr_1^post9 == 0 /\ result_4^post9-result_4^post10 == 0 /\ 1-x_5^post10 <= 0 /\ __disjvr_0^0-__disjvr_0^post8 == 0 /\ 1+x_5^post10-x_5^post9 == 0 /\ -result_4^post9+result_4^post8 == 0 /\ -__disjvr_1^post8+__disjvr_1^0 == 0 /\ __disjvr_0^post10-__disjvr_0^post11 == 0 /\ -tmp_6^post10+tmp_6^post9 == 0 /\ __disjvr_1^post8-__disjvr_1^post9 == 0 /\ -__disjvr_0^post9+__disjvr_0^post8 == 0 /\ -__disjvr_1^post11+__disjvr_1^post10 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 10 17

Simplified Transitions

Start location: l9
Program variables: result_4^0 tmp_6^0 x_5^0
  19: l1 -> l2 : result_4^0'=result_4^post2, tmp_6^0'=0, x_5^0 <= 0, cost: 1
  21: l1 -> l1 : tmp_6^0'=0, 1-x_5^0 <= 0, cost: 1
  22: l1 -> l2 : result_4^0'=result_4^post7, tmp_6^0'=tmp_6^post6, x_5^0'=-1+x_5^0, -1+x_5^0 <= 0, cost: 1
  23: l1 -> l1 : tmp_6^0'=tmp_6^post9, x_5^0'=-1+x_5^0, 2-x_5^0 <= 0, cost: 1
  20: l9 -> l1 : T, cost: 1

	made implied equalities explicit

	Original rule:
	l1 -> l2 : __disjvr_0^0'=__disjvr_0^post2, __disjvr_1^0'=__disjvr_1^post2, result_4^0'=result_4^post2, tmp_6^0'=tmp_6^post2, x_5^0'=x_5^post2, (0 == 0 /\ x_5^0-x_5^post2 == 0 /\ x_5^0 <= 0 /\ __disjvr_0^0-__disjvr_0^post2 == 0 /\ -tmp_6^post2 <= 0 /\ tmp_6^post2 <= 0 /\ -__disjvr_1^post2+__disjvr_1^0 == 0), cost: 1
	New rule:
	l1 -> l2 : __disjvr_0^0'=__disjvr_0^post2, __disjvr_1^0'=__disjvr_1^post2, result_4^0'=result_4^post2, tmp_6^0'=tmp_6^post2, x_5^0'=x_5^post2, (0 == 0 /\ x_5^0-x_5^post2 == 0 /\ x_5^0 <= 0 /\ __disjvr_0^0-__disjvr_0^post2 == 0 /\ -tmp_6^post2 <= 0 /\ -tmp_6^post2 == 0 /\ tmp_6^post2 <= 0 /\ -__disjvr_1^post2+__disjvr_1^0 == 0), cost: 1
	
	Propagated Equalities

	Original rule:
	l1 -> l2 : __disjvr_0^0'=__disjvr_0^post2, __disjvr_1^0'=__disjvr_1^post2, result_4^0'=result_4^post2, tmp_6^0'=tmp_6^post2, x_5^0'=x_5^post2, (0 == 0 /\ x_5^0-x_5^post2 == 0 /\ x_5^0 <= 0 /\ __disjvr_0^0-__disjvr_0^post2 == 0 /\ -tmp_6^post2 <= 0 /\ -tmp_6^post2 == 0 /\ tmp_6^post2 <= 0 /\ -__disjvr_1^post2+__disjvr_1^0 == 0), cost: 1
	New rule:
	l1 -> l2 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, result_4^0'=result_4^post2, tmp_6^0'=0, x_5^0'=x_5^0, (0 <= 0 /\ 0 == 0 /\ x_5^0 <= 0), cost: 1
	
		propagated equality x_5^post2 = x_5^0
		
		propagated equality __disjvr_0^post2 = __disjvr_0^0
		
		propagated equality tmp_6^post2 = 0
		
		propagated equality __disjvr_1^post2 = __disjvr_1^0
		
	Simplified Guard

	Original rule:
	l1 -> l2 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, result_4^0'=result_4^post2, tmp_6^0'=0, x_5^0'=x_5^0, (0 <= 0 /\ 0 == 0 /\ x_5^0 <= 0), cost: 1
	New rule:
	l1 -> l2 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, result_4^0'=result_4^post2, tmp_6^0'=0, x_5^0'=x_5^0, x_5^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l1 -> l2 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, result_4^0'=result_4^post2, tmp_6^0'=0, x_5^0'=x_5^0, x_5^0 <= 0, cost: 1
	New rule:
	l1 -> l2 : result_4^0'=result_4^post2, tmp_6^0'=0, x_5^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l9 -> l1 : __disjvr_0^0'=__disjvr_0^post1, __disjvr_1^0'=__disjvr_1^post1, result_4^0'=result_4^post1, tmp_6^0'=tmp_6^post1, x_5^0'=x_5^post1, (-__disjvr_1^post1+__disjvr_1^post12 == 0 /\ __disjvr_0^0-__disjvr_0^post12 == 0 /\ -__disjvr_0^post1+__disjvr_0^post12 == 0 /\ result_4^post12-result_4^post1 == 0 /\ x_5^0-x_5^post12 == 0 /\ -tmp_6^post1+tmp_6^post12 == 0 /\ -__disjvr_1^post12+__disjvr_1^0 == 0 /\ -tmp_6^post12+tmp_6^0 == 0 /\ -result_4^post12+result_4^0 == 0 /\ -x_5^post1+x_5^post12 == 0), cost: 1
	New rule:
	l9 -> l1 : __disjvr_0^0'=__disjvr_0^post12, __disjvr_1^0'=__disjvr_1^post12, result_4^0'=result_4^post12, tmp_6^0'=tmp_6^post12, x_5^0'=x_5^post12, (0 == 0 /\ __disjvr_0^0-__disjvr_0^post12 == 0 /\ x_5^0-x_5^post12 == 0 /\ -__disjvr_1^post12+__disjvr_1^0 == 0 /\ -tmp_6^post12+tmp_6^0 == 0 /\ -result_4^post12+result_4^0 == 0), cost: 1
	
		propagated equality __disjvr_1^post1 = __disjvr_1^post12
		
		propagated equality __disjvr_0^post1 = __disjvr_0^post12
		
		propagated equality result_4^post1 = result_4^post12
		
		propagated equality tmp_6^post1 = tmp_6^post12
		
		propagated equality x_5^post1 = x_5^post12
		
	Propagated Equalities

	Original rule:
	l9 -> l1 : __disjvr_0^0'=__disjvr_0^post12, __disjvr_1^0'=__disjvr_1^post12, result_4^0'=result_4^post12, tmp_6^0'=tmp_6^post12, x_5^0'=x_5^post12, (0 == 0 /\ __disjvr_0^0-__disjvr_0^post12 == 0 /\ x_5^0-x_5^post12 == 0 /\ -__disjvr_1^post12+__disjvr_1^0 == 0 /\ -tmp_6^post12+tmp_6^0 == 0 /\ -result_4^post12+result_4^0 == 0), cost: 1
	New rule:
	l9 -> l1 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, result_4^0'=result_4^0, tmp_6^0'=tmp_6^0, x_5^0'=x_5^0, 0 == 0, cost: 1
	
		propagated equality __disjvr_0^post12 = __disjvr_0^0
		
		propagated equality x_5^post12 = x_5^0
		
		propagated equality __disjvr_1^post12 = __disjvr_1^0
		
		propagated equality tmp_6^post12 = tmp_6^0
		
		propagated equality result_4^post12 = result_4^0
		
	Simplified Guard

	Original rule:
	l9 -> l1 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, result_4^0'=result_4^0, tmp_6^0'=tmp_6^0, x_5^0'=x_5^0, 0 == 0, cost: 1
	New rule:
	l9 -> l1 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, result_4^0'=result_4^0, tmp_6^0'=tmp_6^0, x_5^0'=x_5^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l9 -> l1 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, result_4^0'=result_4^0, tmp_6^0'=tmp_6^0, x_5^0'=x_5^0, T, cost: 1
	New rule:
	l9 -> l1 : T, cost: 1
	
	made implied equalities explicit

	Original rule:
	l1 -> l1 : __disjvr_0^0'=__disjvr_0^post4, __disjvr_1^0'=__disjvr_1^post4, result_4^0'=result_4^post4, tmp_6^0'=tmp_6^post4, x_5^0'=x_5^post4, (0 == 0 /\ result_4^0-result_4^post3 == 0 /\ tmp_6^post3 <= 0 /\ 1-x_5^0 <= 0 /\ -result_4^post4+result_4^post3 == 0 /\ -tmp_6^post3 <= 0 /\ x_5^post3-x_5^post4 == 0 /\ -__disjvr_1^post4+__disjvr_1^post3 == 0 /\ -__disjvr_0^post3+__disjvr_0^0 == 0 /\ -__disjvr_1^post3+__disjvr_1^0 == 0 /\ __disjvr_0^post3-__disjvr_0^post4 == 0 /\ tmp_6^post3-tmp_6^post4 == 0 /\ x_5^0-x_5^post3 == 0), cost: 1
	New rule:
	l1 -> l1 : __disjvr_0^0'=__disjvr_0^post4, __disjvr_1^0'=__disjvr_1^post4, result_4^0'=result_4^post4, tmp_6^0'=tmp_6^post4, x_5^0'=x_5^post4, (0 == 0 /\ result_4^0-result_4^post3 == 0 /\ tmp_6^post3 <= 0 /\ tmp_6^post3 == 0 /\ 1-x_5^0 <= 0 /\ -result_4^post4+result_4^post3 == 0 /\ -tmp_6^post3 <= 0 /\ x_5^post3-x_5^post4 == 0 /\ -__disjvr_1^post4+__disjvr_1^post3 == 0 /\ -__disjvr_0^post3+__disjvr_0^0 == 0 /\ -__disjvr_1^post3+__disjvr_1^0 == 0 /\ __disjvr_0^post3-__disjvr_0^post4 == 0 /\ tmp_6^post3-tmp_6^post4 == 0 /\ x_5^0-x_5^post3 == 0), cost: 1
	
	Propagated Equalities

	Original rule:
	l1 -> l1 : __disjvr_0^0'=__disjvr_0^post4, __disjvr_1^0'=__disjvr_1^post4, result_4^0'=result_4^post4, tmp_6^0'=tmp_6^post4, x_5^0'=x_5^post4, (0 == 0 /\ result_4^0-result_4^post3 == 0 /\ tmp_6^post3 <= 0 /\ tmp_6^post3 == 0 /\ 1-x_5^0 <= 0 /\ -result_4^post4+result_4^post3 == 0 /\ -tmp_6^post3 <= 0 /\ x_5^post3-x_5^post4 == 0 /\ -__disjvr_1^post4+__disjvr_1^post3 == 0 /\ -__disjvr_0^post3+__disjvr_0^0 == 0 /\ -__disjvr_1^post3+__disjvr_1^0 == 0 /\ __disjvr_0^post3-__disjvr_0^post4 == 0 /\ tmp_6^post3-tmp_6^post4 == 0 /\ x_5^0-x_5^post3 == 0), cost: 1
	New rule:
	l1 -> l1 : __disjvr_0^0'=__disjvr_0^post3, __disjvr_1^0'=__disjvr_1^post3, result_4^0'=result_4^post3, tmp_6^0'=tmp_6^post3, x_5^0'=x_5^post3, (0 == 0 /\ result_4^0-result_4^post3 == 0 /\ tmp_6^post3 <= 0 /\ tmp_6^post3 == 0 /\ 1-x_5^0 <= 0 /\ -tmp_6^post3 <= 0 /\ -__disjvr_0^post3+__disjvr_0^0 == 0 /\ -__disjvr_1^post3+__disjvr_1^0 == 0 /\ x_5^0-x_5^post3 == 0), cost: 1
	
		propagated equality result_4^post4 = result_4^post3
		
		propagated equality x_5^post4 = x_5^post3
		
		propagated equality __disjvr_1^post4 = __disjvr_1^post3
		
		propagated equality __disjvr_0^post4 = __disjvr_0^post3
		
		propagated equality tmp_6^post4 = tmp_6^post3
		
	Propagated Equalities

	Original rule:
	l1 -> l1 : __disjvr_0^0'=__disjvr_0^post3, __disjvr_1^0'=__disjvr_1^post3, result_4^0'=result_4^post3, tmp_6^0'=tmp_6^post3, x_5^0'=x_5^post3, (0 == 0 /\ result_4^0-result_4^post3 == 0 /\ tmp_6^post3 <= 0 /\ tmp_6^post3 == 0 /\ 1-x_5^0 <= 0 /\ -tmp_6^post3 <= 0 /\ -__disjvr_0^post3+__disjvr_0^0 == 0 /\ -__disjvr_1^post3+__disjvr_1^0 == 0 /\ x_5^0-x_5^post3 == 0), cost: 1
	New rule:
	l1 -> l1 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, result_4^0'=result_4^0, tmp_6^0'=0, x_5^0'=x_5^0, (0 <= 0 /\ 0 == 0 /\ 1-x_5^0 <= 0), cost: 1
	
		propagated equality result_4^post3 = result_4^0
		
		propagated equality tmp_6^post3 = 0
		
		propagated equality __disjvr_0^post3 = __disjvr_0^0
		
		propagated equality __disjvr_1^post3 = __disjvr_1^0
		
		propagated equality x_5^post3 = x_5^0
		
	Simplified Guard

	Original rule:
	l1 -> l1 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, result_4^0'=result_4^0, tmp_6^0'=0, x_5^0'=x_5^0, (0 <= 0 /\ 0 == 0 /\ 1-x_5^0 <= 0), cost: 1
	New rule:
	l1 -> l1 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, result_4^0'=result_4^0, tmp_6^0'=0, x_5^0'=x_5^0, 1-x_5^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l1 -> l1 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, result_4^0'=result_4^0, tmp_6^0'=0, x_5^0'=x_5^0, 1-x_5^0 <= 0, cost: 1
	New rule:
	l1 -> l1 : tmp_6^0'=0, 1-x_5^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l1 -> l2 : __disjvr_0^0'=__disjvr_0^post7, __disjvr_1^0'=__disjvr_1^post7, result_4^0'=result_4^post7, tmp_6^0'=tmp_6^post7, x_5^0'=x_5^post7, (0 == 0 /\ x_5^0-x_5^post5 == 0 /\ -result_4^post6+result_4^post5 == 0 /\ __disjvr_1^post6-__disjvr_1^post7 == 0 /\ -tmp_6^post7+tmp_6^post6 == 0 /\ -__disjvr_1^post6+__disjvr_1^post5 == 0 /\ 1-x_5^post6+x_5^post7 == 0 /\ result_4^0-result_4^post5 == 0 /\ tmp_6^post5-tmp_6^post6 == 0 /\ x_5^post7 <= 0 /\ -__disjvr_0^post5+__disjvr_0^post6 == 0 /\ -__disjvr_0^post5+__disjvr_0^0 == 0 /\ -__disjvr_1^post5+__disjvr_1^0 == 0 /\ -__disjvr_0^post7+__disjvr_0^post6 == 0 /\ __disjvr_0^post5-__disjvr_0^post6 == 0 /\ -x_5^post6+x_5^post5 == 0), cost: 1
	New rule:
	l1 -> l2 : __disjvr_0^0'=__disjvr_0^post6, __disjvr_1^0'=__disjvr_1^post6, result_4^0'=result_4^post7, tmp_6^0'=tmp_6^post6, x_5^0'=-1+x_5^post6, (0 == 0 /\ x_5^0-x_5^post5 == 0 /\ -1+x_5^post6 <= 0 /\ -result_4^post6+result_4^post5 == 0 /\ -__disjvr_1^post6+__disjvr_1^post5 == 0 /\ result_4^0-result_4^post5 == 0 /\ tmp_6^post5-tmp_6^post6 == 0 /\ -__disjvr_0^post5+__disjvr_0^post6 == 0 /\ -__disjvr_0^post5+__disjvr_0^0 == 0 /\ -__disjvr_1^post5+__disjvr_1^0 == 0 /\ __disjvr_0^post5-__disjvr_0^post6 == 0 /\ -x_5^post6+x_5^post5 == 0), cost: 1
	
		propagated equality __disjvr_1^post7 = __disjvr_1^post6
		
		propagated equality tmp_6^post7 = tmp_6^post6
		
		propagated equality x_5^post7 = -1+x_5^post6
		
		propagated equality __disjvr_0^post7 = __disjvr_0^post6
		
	Propagated Equalities

	Original rule:
	l1 -> l2 : __disjvr_0^0'=__disjvr_0^post6, __disjvr_1^0'=__disjvr_1^post6, result_4^0'=result_4^post7, tmp_6^0'=tmp_6^post6, x_5^0'=-1+x_5^post6, (0 == 0 /\ x_5^0-x_5^post5 == 0 /\ -1+x_5^post6 <= 0 /\ -result_4^post6+result_4^post5 == 0 /\ -__disjvr_1^post6+__disjvr_1^post5 == 0 /\ result_4^0-result_4^post5 == 0 /\ tmp_6^post5-tmp_6^post6 == 0 /\ -__disjvr_0^post5+__disjvr_0^post6 == 0 /\ -__disjvr_0^post5+__disjvr_0^0 == 0 /\ -__disjvr_1^post5+__disjvr_1^0 == 0 /\ __disjvr_0^post5-__disjvr_0^post6 == 0 /\ -x_5^post6+x_5^post5 == 0), cost: 1
	New rule:
	l1 -> l2 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, result_4^0'=result_4^post7, tmp_6^0'=tmp_6^post6, x_5^0'=-1+x_5^0, (0 == 0 /\ -1+x_5^0 <= 0), cost: 1
	
		propagated equality x_5^post5 = x_5^0
		
		propagated equality result_4^post5 = result_4^post6
		
		propagated equality __disjvr_1^post5 = __disjvr_1^post6
		
		propagated equality result_4^post6 = result_4^0
		
		propagated equality tmp_6^post5 = tmp_6^post6
		
		propagated equality __disjvr_0^post5 = __disjvr_0^post6
		
		propagated equality __disjvr_0^post6 = __disjvr_0^0
		
		propagated equality __disjvr_1^post6 = __disjvr_1^0
		
		propagated equality x_5^post6 = x_5^0
		
	Simplified Guard

	Original rule:
	l1 -> l2 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, result_4^0'=result_4^post7, tmp_6^0'=tmp_6^post6, x_5^0'=-1+x_5^0, (0 == 0 /\ -1+x_5^0 <= 0), cost: 1
	New rule:
	l1 -> l2 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, result_4^0'=result_4^post7, tmp_6^0'=tmp_6^post6, x_5^0'=-1+x_5^0, -1+x_5^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l1 -> l2 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, result_4^0'=result_4^post7, tmp_6^0'=tmp_6^post6, x_5^0'=-1+x_5^0, -1+x_5^0 <= 0, cost: 1
	New rule:
	l1 -> l2 : result_4^0'=result_4^post7, tmp_6^0'=tmp_6^post6, x_5^0'=-1+x_5^0, -1+x_5^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l1 -> l1 : __disjvr_0^0'=__disjvr_0^post11, __disjvr_1^0'=__disjvr_1^post11, result_4^0'=result_4^post11, tmp_6^0'=tmp_6^post11, x_5^0'=x_5^post11, (0 == 0 /\ -__disjvr_1^post10+__disjvr_1^post9 == 0 /\ -result_4^post8+result_4^0 == 0 /\ x_5^post8-x_5^post9 == 0 /\ -result_4^post11+result_4^post10 == 0 /\ -tmp_6^post9+tmp_6^post8 == 0 /\ -x_5^post11+x_5^post10 == 0 /\ -__disjvr_0^post10+__disjvr_0^post9 == 0 /\ x_5^0-x_5^post8 == 0 /\ tmp_6^post10-tmp_6^post11 == 0 /\ -__disjvr_1^post8+__disjvr_1^post9 == 0 /\ result_4^post9-result_4^post10 == 0 /\ 1-x_5^post10 <= 0 /\ __disjvr_0^0-__disjvr_0^post8 == 0 /\ 1+x_5^post10-x_5^post9 == 0 /\ -result_4^post9+result_4^post8 == 0 /\ -__disjvr_1^post8+__disjvr_1^0 == 0 /\ __disjvr_0^post10-__disjvr_0^post11 == 0 /\ -tmp_6^post10+tmp_6^post9 == 0 /\ __disjvr_1^post8-__disjvr_1^post9 == 0 /\ -__disjvr_0^post9+__disjvr_0^post8 == 0 /\ -__disjvr_1^post11+__disjvr_1^post10 == 0), cost: 1
	New rule:
	l1 -> l1 : __disjvr_0^0'=__disjvr_0^post10, __disjvr_1^0'=__disjvr_1^post10, result_4^0'=result_4^post10, tmp_6^0'=tmp_6^post10, x_5^0'=x_5^post10, (0 == 0 /\ -__disjvr_1^post10+__disjvr_1^post9 == 0 /\ -result_4^post8+result_4^0 == 0 /\ x_5^post8-x_5^post9 == 0 /\ -tmp_6^post9+tmp_6^post8 == 0 /\ -__disjvr_0^post10+__disjvr_0^post9 == 0 /\ x_5^0-x_5^post8 == 0 /\ -__disjvr_1^post8+__disjvr_1^post9 == 0 /\ result_4^post9-result_4^post10 == 0 /\ 1-x_5^post10 <= 0 /\ __disjvr_0^0-__disjvr_0^post8 == 0 /\ 1+x_5^post10-x_5^post9 == 0 /\ -result_4^post9+result_4^post8 == 0 /\ -__disjvr_1^post8+__disjvr_1^0 == 0 /\ -tmp_6^post10+tmp_6^post9 == 0 /\ __disjvr_1^post8-__disjvr_1^post9 == 0 /\ -__disjvr_0^post9+__disjvr_0^post8 == 0), cost: 1
	
		propagated equality result_4^post11 = result_4^post10
		
		propagated equality x_5^post11 = x_5^post10
		
		propagated equality tmp_6^post11 = tmp_6^post10
		
		propagated equality __disjvr_0^post11 = __disjvr_0^post10
		
		propagated equality __disjvr_1^post11 = __disjvr_1^post10
		
	Propagated Equalities

	Original rule:
	l1 -> l1 : __disjvr_0^0'=__disjvr_0^post10, __disjvr_1^0'=__disjvr_1^post10, result_4^0'=result_4^post10, tmp_6^0'=tmp_6^post10, x_5^0'=x_5^post10, (0 == 0 /\ -__disjvr_1^post10+__disjvr_1^post9 == 0 /\ -result_4^post8+result_4^0 == 0 /\ x_5^post8-x_5^post9 == 0 /\ -tmp_6^post9+tmp_6^post8 == 0 /\ -__disjvr_0^post10+__disjvr_0^post9 == 0 /\ x_5^0-x_5^post8 == 0 /\ -__disjvr_1^post8+__disjvr_1^post9 == 0 /\ result_4^post9-result_4^post10 == 0 /\ 1-x_5^post10 <= 0 /\ __disjvr_0^0-__disjvr_0^post8 == 0 /\ 1+x_5^post10-x_5^post9 == 0 /\ -result_4^post9+result_4^post8 == 0 /\ -__disjvr_1^post8+__disjvr_1^0 == 0 /\ -tmp_6^post10+tmp_6^post9 == 0 /\ __disjvr_1^post8-__disjvr_1^post9 == 0 /\ -__disjvr_0^post9+__disjvr_0^post8 == 0), cost: 1
	New rule:
	l1 -> l1 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, result_4^0'=result_4^0, tmp_6^0'=tmp_6^post9, x_5^0'=-1+x_5^0, (0 == 0 /\ 2-x_5^0 <= 0), cost: 1
	
		propagated equality __disjvr_1^post10 = __disjvr_1^post9
		
		propagated equality result_4^post8 = result_4^0
		
		propagated equality x_5^post8 = x_5^post9
		
		propagated equality tmp_6^post8 = tmp_6^post9
		
		propagated equality __disjvr_0^post10 = __disjvr_0^post9
		
		propagated equality x_5^post9 = x_5^0
		
		propagated equality __disjvr_1^post8 = __disjvr_1^post9
		
		propagated equality result_4^post10 = result_4^post9
		
		propagated equality __disjvr_0^post8 = __disjvr_0^0
		
		propagated equality x_5^post10 = -1+x_5^0
		
		propagated equality result_4^post9 = result_4^0
		
		propagated equality __disjvr_1^post9 = __disjvr_1^0
		
		propagated equality tmp_6^post10 = tmp_6^post9
		
		propagated equality __disjvr_0^post9 = __disjvr_0^0
		
	Simplified Guard

	Original rule:
	l1 -> l1 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, result_4^0'=result_4^0, tmp_6^0'=tmp_6^post9, x_5^0'=-1+x_5^0, (0 == 0 /\ 2-x_5^0 <= 0), cost: 1
	New rule:
	l1 -> l1 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, result_4^0'=result_4^0, tmp_6^0'=tmp_6^post9, x_5^0'=-1+x_5^0, 2-x_5^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l1 -> l1 : __disjvr_0^0'=__disjvr_0^0, __disjvr_1^0'=__disjvr_1^0, result_4^0'=result_4^0, tmp_6^0'=tmp_6^post9, x_5^0'=-1+x_5^0, 2-x_5^0 <= 0, cost: 1
	New rule:
	l1 -> l1 : tmp_6^0'=tmp_6^post9, x_5^0'=-1+x_5^0, 2-x_5^0 <= 0, cost: 1

Step with 20

	Trace

	20[T]
	
	Blocked

	[{}, {}]

Step with 19

	Trace

	20[T], 19[(x_5^0 <= 0)]
	
	Blocked

	[{}, {}, {}]

Backtrack

	Trace

	20[T]
	
	Blocked

	[{}, {19[T]}]

Step with 22

	Trace

	20[T], 22[(-1+x_5^0 <= 0)]
	
	Blocked

	[{}, {19[T]}, {}]

Backtrack

	Trace

	20[T]
	
	Blocked

	[{}, {19[T], 22[T]}]

Step with 21

	Trace

	20[T], 21[(1-x_5^0 <= 0)]
	
	Blocked

	[{}, {19[T], 22[T]}, {}]

Nonterm

Start location: l9
Program variables: result_4^0 tmp_6^0 x_5^0
  19: l1 -> l2 : result_4^0'=result_4^post2, tmp_6^0'=0, x_5^0 <= 0, cost: 1
  21: l1 -> l1 : tmp_6^0'=0, 1-x_5^0 <= 0, cost: 1
  22: l1 -> l2 : result_4^0'=result_4^post7, tmp_6^0'=tmp_6^post6, x_5^0'=-1+x_5^0, -1+x_5^0 <= 0, cost: 1
  23: l1 -> l1 : tmp_6^0'=tmp_6^post9, x_5^0'=-1+x_5^0, 2-x_5^0 <= 0, cost: 1
  24: l1 -> LoAT_sink : (-1+x_5^0 >= 0 /\ -1+n >= 0), cost: NONTERM
  20: l9 -> l1 : T, cost: 1

	Certificate of Non-Termination

	Original rule:
	l1 -> l1 : tmp_6^0'=0, (1-x_5^0 <= 0), cost: 1
	New rule:
	l1 -> LoAT_sink : (-1+x_5^0 >= 0 /\ -1+n >= 0), cost: NONTERM

		-1+x_5^0 >= 0 [0]: monotonic increase yields -1+x_5^0 >= 0
		
		Replacement map: {-1+x_5^0 >= 0 -> -1+x_5^0 >= 0}

Step with 24

	Trace

	20[T], 24[(-1+x_5^0 >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {19[T], 22[T]}, {24[T]}]

Refute

	Counterexample

	[ result_4^0=0 tmp_6^0=0 x_5^0=1 ] 20 [ result_4^0=0 tmp_6^0=0 x_5^0=1 ] 24
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
