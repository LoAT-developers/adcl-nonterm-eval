unknown

Initial ITS

Start location: __init
Program variables: arg1 arg2
   0: f1_0_main_Load -> f152_0_createList_LE : arg1'=arg1p1, arg2'=arg2p1, (1+x3 > 0 /\ -1-arg2p1+x3 == 0 /\ 1+arg1p1-arg1 <= 0 /\ arg1 > 0 /\ arg2 > 0 /\ 1+arg1p1 > 0), cost: 1
   1: f152_0_createList_LE -> f196_0_reverse_NULL : arg1'=arg1p2, arg2'=arg2p2, (-1+arg2 < 0 /\ 1+arg1p2 > 0 /\ arg1p2-arg1 <= 0 /\ 1+arg1 > 0), cost: 1
   2: f152_0_createList_LE -> f152_0_createList_LE : arg1'=arg1p3, arg2'=arg2p3, (arg2 > 0 /\ arg1p3 > 0 /\ -2-arg1+arg1p3 <= 0 /\ -1-arg2p3+arg2 == 0 /\ 1+arg1 > 0), cost: 1
   3: f196_0_reverse_NULL -> f196_0_reverse_NULL : arg1'=arg1p4, arg2'=arg2p4, (1+arg1p4 > 0 /\ arg1 > 0 /\ 1+arg1p4-arg1 <= 0), cost: 1
   4: __init -> f1_0_main_Load : arg1'=arg1p5, arg2'=arg2p5, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2
   1: f152_0_createList_LE -> f196_0_reverse_NULL : arg1'=arg1p2, arg2'=arg2p2, (-1+arg2 < 0 /\ 1+arg1p2 > 0 /\ arg1p2-arg1 <= 0 /\ 1+arg1 > 0), cost: 1
   2: f152_0_createList_LE -> f152_0_createList_LE : arg1'=arg1p3, arg2'=arg2p3, (arg2 > 0 /\ arg1p3 > 0 /\ -2-arg1+arg1p3 <= 0 /\ -1-arg2p3+arg2 == 0 /\ 1+arg1 > 0), cost: 1
   3: f196_0_reverse_NULL -> f196_0_reverse_NULL : arg1'=arg1p4, arg2'=arg2p4, (1+arg1p4 > 0 /\ arg1 > 0 /\ 1+arg1p4-arg1 <= 0), cost: 1
   5: __init -> f152_0_createList_LE : arg1'=arg1p1, arg2'=arg2p1, (arg1p5 > 0 /\ 1+x3 > 0 /\ -1-arg2p1+x3 == 0 /\ 1-arg1p5+arg1p1 <= 0 /\ arg2p5 > 0 /\ 1+arg1p1 > 0), cost: 1

	Eliminating location f1_0_main_Load by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_Load : arg1'=arg1p5, arg2'=arg2p5, T, cost: 1
	Second rule:
	f1_0_main_Load -> f152_0_createList_LE : arg1'=arg1p1, arg2'=arg2p1, (1+x3 > 0 /\ -1-arg2p1+x3 == 0 /\ 1+arg1p1-arg1 <= 0 /\ arg1 > 0 /\ arg2 > 0 /\ 1+arg1p1 > 0), cost: 1
	New rule:
	__init -> f152_0_createList_LE : arg1'=arg1p1, arg2'=arg2p1, (arg1p5 > 0 /\ 1+x3 > 0 /\ -1-arg2p1+x3 == 0 /\ 1-arg1p5+arg1p1 <= 0 /\ arg2p5 > 0 /\ 1+arg1p1 > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 4

Simplified Transitions

Start location: __init
Program variables: arg1 arg2
   1: f152_0_createList_LE -> f196_0_reverse_NULL : arg1'=arg1p2, arg2'=arg2p2, (-1+arg2 < 0 /\ 1+arg1p2 > 0 /\ arg1p2-arg1 <= 0 /\ 1+arg1 > 0), cost: 1
   6: f152_0_createList_LE -> f152_0_createList_LE : arg1'=arg1p3, arg2'=-1+arg2, (arg2 > 0 /\ arg1p3 > 0 /\ -2-arg1+arg1p3 <= 0 /\ 1+arg1 > 0), cost: 1
   3: f196_0_reverse_NULL -> f196_0_reverse_NULL : arg1'=arg1p4, arg2'=arg2p4, (1+arg1p4 > 0 /\ arg1 > 0 /\ 1+arg1p4-arg1 <= 0), cost: 1
   7: __init -> f152_0_createList_LE : arg1'=arg1p1, arg2'=-1+x3, (1+x3 > 0 /\ 1+arg1p1 > 0), cost: 1

	Propagated Equalities

	Original rule:
	f152_0_createList_LE -> f152_0_createList_LE : arg1'=arg1p3, arg2'=arg2p3, (arg2 > 0 /\ arg1p3 > 0 /\ -2-arg1+arg1p3 <= 0 /\ -1-arg2p3+arg2 == 0 /\ 1+arg1 > 0), cost: 1
	New rule:
	f152_0_createList_LE -> f152_0_createList_LE : arg1'=arg1p3, arg2'=-1+arg2, (0 == 0 /\ arg2 > 0 /\ arg1p3 > 0 /\ -2-arg1+arg1p3 <= 0 /\ 1+arg1 > 0), cost: 1
	
		propagated equality arg2p3 = -1+arg2
		
	Simplified Guard

	Original rule:
	f152_0_createList_LE -> f152_0_createList_LE : arg1'=arg1p3, arg2'=-1+arg2, (0 == 0 /\ arg2 > 0 /\ arg1p3 > 0 /\ -2-arg1+arg1p3 <= 0 /\ 1+arg1 > 0), cost: 1
	New rule:
	f152_0_createList_LE -> f152_0_createList_LE : arg1'=arg1p3, arg2'=-1+arg2, (arg2 > 0 /\ arg1p3 > 0 /\ -2-arg1+arg1p3 <= 0 /\ 1+arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	__init -> f152_0_createList_LE : arg1'=arg1p1, arg2'=arg2p1, (arg1p5 > 0 /\ 1+x3 > 0 /\ -1-arg2p1+x3 == 0 /\ 1-arg1p5+arg1p1 <= 0 /\ arg2p5 > 0 /\ 1+arg1p1 > 0), cost: 1
	New rule:
	__init -> f152_0_createList_LE : arg1'=arg1p1, arg2'=-1+x3, (0 == 0 /\ arg1p5 > 0 /\ 1+x3 > 0 /\ 1-arg1p5+arg1p1 <= 0 /\ arg2p5 > 0 /\ 1+arg1p1 > 0), cost: 1
	
		propagated equality arg2p1 = -1+x3
		
	Simplified Guard

	Original rule:
	__init -> f152_0_createList_LE : arg1'=arg1p1, arg2'=-1+x3, (0 == 0 /\ arg1p5 > 0 /\ 1+x3 > 0 /\ 1-arg1p5+arg1p1 <= 0 /\ arg2p5 > 0 /\ 1+arg1p1 > 0), cost: 1
	New rule:
	__init -> f152_0_createList_LE : arg1'=arg1p1, arg2'=-1+x3, (arg1p5 > 0 /\ 1+x3 > 0 /\ 1-arg1p5+arg1p1 <= 0 /\ arg2p5 > 0 /\ 1+arg1p1 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	__init -> f152_0_createList_LE : arg1'=arg1p1, arg2'=-1+x3, (arg1p5 > 0 /\ 1+x3 > 0 /\ 1-arg1p5+arg1p1 <= 0 /\ arg2p5 > 0 /\ 1+arg1p1 > 0), cost: 1
	New rule:
	__init -> f152_0_createList_LE : arg1'=arg1p1, arg2'=-1+x3, (1+x3 > 0 /\ 1+arg1p1 > 0), cost: 1

Step with 7

	Trace

	7[(1+x3 > 0 /\ 1+arg1p1 > 0)]
	
	Blocked

	[{}, {}]

Step with 1

	Trace

	7[(1+x3 > 0 /\ 1+arg1p1 > 0)], 1[(-1+arg2 < 0 /\ 1+arg1p2 > 0 /\ arg1p2-arg1 <= 0 /\ 1+arg1 > 0)]
	
	Blocked

	[{}, {}, {}]

Step with 3

	Trace

	7[(1+x3 > 0 /\ 1+arg1p1 > 0)], 1[(-1+arg2 < 0 /\ 1+arg1p2 > 0 /\ arg1p2-arg1 <= 0 /\ 1+arg1 > 0)], 3[(1+arg1p4 > 0 /\ arg1 > 0 /\ 1+arg1p4-arg1 <= 0)]
	
	Blocked

	[{}, {}, {}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 3

	Trace

	7[(1+x3 > 0 /\ 1+arg1p1 > 0)], 1[(-1+arg2 < 0 /\ 1+arg1p2 > 0 /\ arg1p2-arg1 <= 0 /\ 1+arg1 > 0)], 3[(1+arg1p4 > 0 /\ arg1 > 0 /\ 1+arg1p4-arg1 <= 0)], 3[(1+arg1p4 > 0 /\ arg1 > 0 /\ 1+arg1p4-arg1 <= 0)]
	
	Blocked

	[{}, {}, {}, {}, {}]

Covered

	Trace

	7[(1+x3 > 0 /\ 1+arg1p1 > 0)], 1[(-1+arg2 < 0 /\ 1+arg1p2 > 0 /\ arg1p2-arg1 <= 0 /\ 1+arg1 > 0)], 3[(1+arg1p4 > 0 /\ arg1 > 0 /\ 1+arg1p4-arg1 <= 0)]
	
	Blocked

	[{}, {}, {}, {3[T]}]

Backtrack

	Trace

	7[(1+x3 > 0 /\ 1+arg1p1 > 0)], 1[(-1+arg2 < 0 /\ 1+arg1p2 > 0 /\ arg1p2-arg1 <= 0 /\ 1+arg1 > 0)]
	
	Blocked

	[{}, {}, {3[T]}]

Backtrack

	Trace

	7[(1+x3 > 0 /\ 1+arg1p1 > 0)]
	
	Blocked

	[{}, {1[T]}]

Step with 6

	Trace

	7[(1+x3 > 0 /\ 1+arg1p1 > 0)], 6[(arg2 > 0 /\ arg1p3 > 0 /\ -2-arg1+arg1p3 <= 0 /\ 1+arg1 > 0)]
	
	Blocked

	[{}, {1[T]}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2
   1: f152_0_createList_LE -> f196_0_reverse_NULL : arg1'=arg1p2, arg2'=arg2p2, (-1+arg2 < 0 /\ 1+arg1p2 > 0 /\ arg1p2-arg1 <= 0 /\ 1+arg1 > 0), cost: 1
   6: f152_0_createList_LE -> f152_0_createList_LE : arg1'=arg1p3, arg2'=-1+arg2, (arg2 > 0 /\ arg1p3 > 0 /\ -2-arg1+arg1p3 <= 0 /\ 1+arg1 > 0), cost: 1
   8: f152_0_createList_LE -> f152_0_createList_LE : arg1'=arg1p3, arg2'=arg2-n, (-1+n >= 0 /\ 1+arg2-n > 0 /\ arg1p3 > 0 /\ 2+arg1-arg1p3 >= 0 /\ 1+arg1 > 0), cost: 1
   3: f196_0_reverse_NULL -> f196_0_reverse_NULL : arg1'=arg1p4, arg2'=arg2p4, (1+arg1p4 > 0 /\ arg1 > 0 /\ 1+arg1p4-arg1 <= 0), cost: 1
   7: __init -> f152_0_createList_LE : arg1'=arg1p1, arg2'=-1+x3, (1+x3 > 0 /\ 1+arg1p1 > 0), cost: 1

	Loop Acceleration

	Original rule:
	f152_0_createList_LE -> f152_0_createList_LE : arg1'=arg1p3, arg2'=-1+arg2, (arg2 > 0 /\ arg1p3 > 0 /\ -2-arg1+arg1p3 <= 0 /\ 1+arg1 > 0), cost: 1
	New rule:
	f152_0_createList_LE -> f152_0_createList_LE : arg1'=arg1p3, arg2'=arg2-n, (-1+n >= 0 /\ 1+arg2-n > 0 /\ arg1p3 > 0 /\ 2+arg1-arg1p3 >= 0 /\ 1+arg1 > 0), cost: 1

		arg2 > 0 [0]: montonic decrease yields 1+arg2-n > 0
		
		arg2 > 0 [1]: eventual increase yields (1 <= 0 /\ arg2 > 0)
		
		arg1p3 > 0 [0]: monotonic increase yields arg1p3 > 0
		
		2+arg1-arg1p3 >= 0 [0]: monotonic increase yields 2+arg1-arg1p3 >= 0
		
		1+arg1 > 0 [0]: monotonic increase yields 1+arg1 > 0, dependencies: arg1p3 > 0
		
		Replacement map: {arg2 > 0 -> 1+arg2-n > 0, arg1p3 > 0 -> arg1p3 > 0, 2+arg1-arg1p3 >= 0 -> 2+arg1-arg1p3 >= 0, 1+arg1 > 0 -> 1+arg1 > 0}

	Trace

	7[(1+x3 > 0 /\ 1+arg1p1 > 0)], 8[(-1+n >= 0 /\ 1+arg2-n > 0 /\ arg1p3 > 0 /\ 2+arg1-arg1p3 >= 0 /\ 1+arg1 > 0)]
	
	Blocked

	[{}, {1[T]}, {6[T], 8[T]}]

Step with 1

	Trace

	7[(1+x3 > 0 /\ 1+arg1p1 > 0)], 8[(-1+n >= 0 /\ 1+arg2-n > 0 /\ arg1p3 > 0 /\ 2+arg1-arg1p3 >= 0 /\ 1+arg1 > 0)], 1[(-1+arg2 < 0 /\ 1+arg1p2 > 0 /\ arg1p2-arg1 <= 0 /\ 1+arg1 > 0)]
	
	Blocked

	[{}, {1[T]}, {6[T], 8[T]}, {}]

Step with 3

	Trace

	7[(1+x3 > 0 /\ 1+arg1p1 > 0)], 8[(-1+n >= 0 /\ 1+arg2-n > 0 /\ arg1p3 > 0 /\ 2+arg1-arg1p3 >= 0 /\ 1+arg1 > 0)], 1[(-1+arg2 < 0 /\ 1+arg1p2 > 0 /\ arg1p2-arg1 <= 0 /\ 1+arg1 > 0)], 3[(1+arg1p4 > 0 /\ arg1 > 0 /\ 1+arg1p4-arg1 <= 0)]
	
	Blocked

	[{}, {1[T]}, {6[T], 8[T]}, {}, {}]

Step with 3

	Trace

	7[(1+x3 > 0 /\ 1+arg1p1 > 0)], 8[(-1+n >= 0 /\ 1+arg2-n > 0 /\ arg1p3 > 0 /\ 2+arg1-arg1p3 >= 0 /\ 1+arg1 > 0)], 1[(-1+arg2 < 0 /\ 1+arg1p2 > 0 /\ arg1p2-arg1 <= 0 /\ 1+arg1 > 0)], 3[(1+arg1p4 > 0 /\ arg1 > 0 /\ 1+arg1p4-arg1 <= 0)], 3[(1+arg1p4 > 0 /\ arg1 > 0 /\ 1+arg1p4-arg1 <= 0)]
	
	Blocked

	[{}, {1[T]}, {6[T], 8[T]}, {}, {}, {}]

Covered

	Trace

	7[(1+x3 > 0 /\ 1+arg1p1 > 0)], 8[(-1+n >= 0 /\ 1+arg2-n > 0 /\ arg1p3 > 0 /\ 2+arg1-arg1p3 >= 0 /\ 1+arg1 > 0)], 1[(-1+arg2 < 0 /\ 1+arg1p2 > 0 /\ arg1p2-arg1 <= 0 /\ 1+arg1 > 0)], 3[(1+arg1p4 > 0 /\ arg1 > 0 /\ 1+arg1p4-arg1 <= 0)]
	
	Blocked

	[{}, {1[T]}, {6[T], 8[T]}, {}, {3[T]}]

Backtrack

	Trace

	7[(1+x3 > 0 /\ 1+arg1p1 > 0)], 8[(-1+n >= 0 /\ 1+arg2-n > 0 /\ arg1p3 > 0 /\ 2+arg1-arg1p3 >= 0 /\ 1+arg1 > 0)], 1[(-1+arg2 < 0 /\ 1+arg1p2 > 0 /\ arg1p2-arg1 <= 0 /\ 1+arg1 > 0)]
	
	Blocked

	[{}, {1[T]}, {6[T], 8[T]}, {3[T]}]

Backtrack

	Trace

	7[(1+x3 > 0 /\ 1+arg1p1 > 0)], 8[(-1+n >= 0 /\ 1+arg2-n > 0 /\ arg1p3 > 0 /\ 2+arg1-arg1p3 >= 0 /\ 1+arg1 > 0)]
	
	Blocked

	[{}, {1[T]}, {1[T], 6[T], 8[T]}]

Backtrack

	Trace

	7[(1+x3 > 0 /\ 1+arg1p1 > 0)]
	
	Blocked

	[{}, {1[T], 8[T]}]

Step with 6

	Trace

	7[(1+x3 > 0 /\ 1+arg1p1 > 0)], 6[(arg2 > 0 /\ arg1p3 > 0 /\ -2-arg1+arg1p3 <= 0 /\ 1+arg1 > 0)]
	
	Blocked

	[{}, {1[T], 8[T]}, {}]

Covered

	Trace

	7[(1+x3 > 0 /\ 1+arg1p1 > 0)]
	
	Blocked

	[{}, {1[T], 6[T], 8[T]}]

Backtrack

	Trace

	Blocked

	[{7[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
