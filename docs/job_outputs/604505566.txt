WORST_CASE(Omega(0),?)

Initial ITS
Start location: __init
   0: f161_0_createList_Return -> f227_0_isCyclic_NONNULL : arg2'=arg2P0, arg1'=arg1P0, (1+arg1 > 0 /\ 1+arg1P0 > 0 /\ arg1P0-arg1 <= 0), cost: 1
   2: f227_0_isCyclic_NONNULL -> f331_0_isCyclic_NULL : arg2'=arg2P2, arg1'=arg1P2, (1+arg2P2-arg1 <= 0 /\ arg1 > 0 /\ -arg1+arg1P2 <= 0 /\ arg1P2 > 0 /\ 1+arg2P2 > 0), cost: 1
   1: f1_0_main_Load -> f227_0_isCyclic_NONNULL : arg2'=arg2P1, arg1'=arg1P1, (arg1 > 0 /\ 1+arg1P1 > 0), cost: 1
   4: f1_0_main_Load -> f201_0_createList_LE : arg2'=arg2P4, arg1'=arg1P4, (1+arg2 > 0 /\ arg1 > 0 /\ 1+arg1P4 > 0), cost: 1
   3: f331_0_isCyclic_NULL -> f331_0_isCyclic_NULL : arg2'=arg2P3, arg1'=arg1P3, (-1-arg1P3+arg1 >= 0 /\ -2+arg2 > 0 /\ arg1 > 0 /\ 1+arg1P3 > 0 /\ 1+arg2P3 > 0 /\ -3+arg2-arg2P3 >= 0), cost: 1
   5: f201_0_createList_LE -> f201_0_createList_LE : arg2'=arg2P5, arg1'=arg1P5, (-1-arg1P5+arg1 == 0 /\ arg1 > 0), cost: 1
   6: __init -> f1_0_main_Load : arg2'=arg2P6, arg1'=arg1P6, TRUE, cost: 1


Removed unreachable rules and leafs
Start location: __init
   2: f227_0_isCyclic_NONNULL -> f331_0_isCyclic_NULL : arg2'=arg2P2, arg1'=arg1P2, (1+arg2P2-arg1 <= 0 /\ arg1 > 0 /\ -arg1+arg1P2 <= 0 /\ arg1P2 > 0 /\ 1+arg2P2 > 0), cost: 1
   1: f1_0_main_Load -> f227_0_isCyclic_NONNULL : arg2'=arg2P1, arg1'=arg1P1, (arg1 > 0 /\ 1+arg1P1 > 0), cost: 1
   4: f1_0_main_Load -> f201_0_createList_LE : arg2'=arg2P4, arg1'=arg1P4, (1+arg2 > 0 /\ arg1 > 0 /\ 1+arg1P4 > 0), cost: 1
   3: f331_0_isCyclic_NULL -> f331_0_isCyclic_NULL : arg2'=arg2P3, arg1'=arg1P3, (-1-arg1P3+arg1 >= 0 /\ -2+arg2 > 0 /\ arg1 > 0 /\ 1+arg1P3 > 0 /\ 1+arg2P3 > 0 /\ -3+arg2-arg2P3 >= 0), cost: 1
   5: f201_0_createList_LE -> f201_0_createList_LE : arg2'=arg2P5, arg1'=arg1P5, (-1-arg1P5+arg1 == 0 /\ arg1 > 0), cost: 1
   6: __init -> f1_0_main_Load : arg2'=arg2P6, arg1'=arg1P6, TRUE, cost: 1


Applied preprocessing
Original rule:
f227_0_isCyclic_NONNULL -> f331_0_isCyclic_NULL : arg2'=arg2P2, arg1'=arg1P2, (1+arg2P2-arg1 <= 0 /\ arg1 > 0 /\ -arg1+arg1P2 <= 0 /\ arg1P2 > 0 /\ 1+arg2P2 > 0), cost: 1
New rule:
f227_0_isCyclic_NONNULL -> f331_0_isCyclic_NULL : arg2'=arg2P2, arg1'=arg1P2, (1+arg2P2-arg1 <= 0 /\ -arg1+arg1P2 <= 0 /\ arg1P2 > 0 /\ 1+arg2P2 > 0), cost: 1

Applied preprocessing
Original rule:
f331_0_isCyclic_NULL -> f331_0_isCyclic_NULL : arg2'=arg2P3, arg1'=arg1P3, (-1-arg1P3+arg1 >= 0 /\ -2+arg2 > 0 /\ arg1 > 0 /\ 1+arg1P3 > 0 /\ 1+arg2P3 > 0 /\ -3+arg2-arg2P3 >= 0), cost: 1
New rule:
f331_0_isCyclic_NULL -> f331_0_isCyclic_NULL : arg2'=arg2P3, arg1'=arg1P3, (-1-arg1P3+arg1 >= 0 /\ 1+arg1P3 > 0 /\ 1+arg2P3 > 0 /\ -3+arg2-arg2P3 >= 0), cost: 1

Applied preprocessing
Original rule:
f201_0_createList_LE -> f201_0_createList_LE : arg2'=arg2P5, arg1'=arg1P5, (-1-arg1P5+arg1 == 0 /\ arg1 > 0), cost: 1
New rule:
f201_0_createList_LE -> f201_0_createList_LE : arg2'=arg2P5, arg1'=-1+arg1, arg1 > 0, cost: 1

Simplified rules
Start location: __init
   7: f227_0_isCyclic_NONNULL -> f331_0_isCyclic_NULL : arg2'=arg2P2, arg1'=arg1P2, (1+arg2P2-arg1 <= 0 /\ -arg1+arg1P2 <= 0 /\ arg1P2 > 0 /\ 1+arg2P2 > 0), cost: 1
   1: f1_0_main_Load -> f227_0_isCyclic_NONNULL : arg2'=arg2P1, arg1'=arg1P1, (arg1 > 0 /\ 1+arg1P1 > 0), cost: 1
   4: f1_0_main_Load -> f201_0_createList_LE : arg2'=arg2P4, arg1'=arg1P4, (1+arg2 > 0 /\ arg1 > 0 /\ 1+arg1P4 > 0), cost: 1
   8: f331_0_isCyclic_NULL -> f331_0_isCyclic_NULL : arg2'=arg2P3, arg1'=arg1P3, (-1-arg1P3+arg1 >= 0 /\ 1+arg1P3 > 0 /\ 1+arg2P3 > 0 /\ -3+arg2-arg2P3 >= 0), cost: 1
   9: f201_0_createList_LE -> f201_0_createList_LE : arg2'=arg2P5, arg1'=-1+arg1, arg1 > 0, cost: 1
   6: __init -> f1_0_main_Load : arg2'=arg2P6, arg1'=arg1P6, TRUE, cost: 1


Applied acceleration
Original rule:
f201_0_createList_LE -> f201_0_createList_LE : arg2'=arg2P5, arg1'=-1+arg1, arg1 > 0, cost: 1
New rule:
f201_0_createList_LE -> f201_0_createList_LE : arg2'=arg2P5, arg1'=arg1-n0, (-1+n0 >= 0 /\ 1+arg1-n0 > 0), cost: n0
Sub-proof via acceration calculus written to file:///tmp/tmpnam_fKNCkl.txt

Applied instantiation
Original rule:
f201_0_createList_LE -> f201_0_createList_LE : arg2'=arg2P5, arg1'=arg1-n0, (-1+n0 >= 0 /\ 1+arg1-n0 > 0), cost: n0
New rule:
f201_0_createList_LE -> f201_0_createList_LE : arg2'=arg2P5, arg1'=0, (1 > 0 /\ -1+arg1 >= 0), cost: arg1

Applied simplification
Original rule:
f201_0_createList_LE -> f201_0_createList_LE : arg2'=arg2P5, arg1'=0, (1 > 0 /\ -1+arg1 >= 0), cost: arg1
New rule:
f201_0_createList_LE -> f201_0_createList_LE : arg2'=arg2P5, arg1'=0, -1+arg1 >= 0, cost: arg1

Applied deletion
Removed the following rules: 9

Accelerated simple loops
Start location: __init
   7: f227_0_isCyclic_NONNULL -> f331_0_isCyclic_NULL : arg2'=arg2P2, arg1'=arg1P2, (1+arg2P2-arg1 <= 0 /\ -arg1+arg1P2 <= 0 /\ arg1P2 > 0 /\ 1+arg2P2 > 0), cost: 1
   1: f1_0_main_Load -> f227_0_isCyclic_NONNULL : arg2'=arg2P1, arg1'=arg1P1, (arg1 > 0 /\ 1+arg1P1 > 0), cost: 1
   4: f1_0_main_Load -> f201_0_createList_LE : arg2'=arg2P4, arg1'=arg1P4, (1+arg2 > 0 /\ arg1 > 0 /\ 1+arg1P4 > 0), cost: 1
   8: f331_0_isCyclic_NULL -> f331_0_isCyclic_NULL : arg2'=arg2P3, arg1'=arg1P3, (-1-arg1P3+arg1 >= 0 /\ 1+arg1P3 > 0 /\ 1+arg2P3 > 0 /\ -3+arg2-arg2P3 >= 0), cost: 1
  11: f201_0_createList_LE -> f201_0_createList_LE : arg2'=arg2P5, arg1'=0, -1+arg1 >= 0, cost: arg1
   6: __init -> f1_0_main_Load : arg2'=arg2P6, arg1'=arg1P6, TRUE, cost: 1


Applied chaining
First rule:
f227_0_isCyclic_NONNULL -> f331_0_isCyclic_NULL : arg2'=arg2P2, arg1'=arg1P2, (1+arg2P2-arg1 <= 0 /\ -arg1+arg1P2 <= 0 /\ arg1P2 > 0 /\ 1+arg2P2 > 0), cost: 1
Second rule:
f331_0_isCyclic_NULL -> f331_0_isCyclic_NULL : arg2'=arg2P3, arg1'=arg1P3, (-1-arg1P3+arg1 >= 0 /\ 1+arg1P3 > 0 /\ 1+arg2P3 > 0 /\ -3+arg2-arg2P3 >= 0), cost: 1
New rule:
f227_0_isCyclic_NONNULL -> f331_0_isCyclic_NULL : arg2'=arg2P3, arg1'=arg1P3, (1+arg1P3 > 0 /\ 4-arg1+arg2P3 <= 0 /\ 1+arg1P3-arg1 <= 0 /\ 1+arg2P3 > 0), cost: 2

Applied deletion
Removed the following rules: 8

Applied chaining
First rule:
f1_0_main_Load -> f201_0_createList_LE : arg2'=arg2P4, arg1'=arg1P4, (1+arg2 > 0 /\ arg1 > 0 /\ 1+arg1P4 > 0), cost: 1
Second rule:
f201_0_createList_LE -> f201_0_createList_LE : arg2'=arg2P5, arg1'=0, -1+arg1 >= 0, cost: arg1
New rule:
f1_0_main_Load -> f201_0_createList_LE : arg2'=arg2P5, arg1'=0, (-1+arg1P4 >= 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 1+arg1P4

Applied deletion
Removed the following rules: 11

Chained accelerated rules with incoming rules
Start location: __init
   7: f227_0_isCyclic_NONNULL -> f331_0_isCyclic_NULL : arg2'=arg2P2, arg1'=arg1P2, (1+arg2P2-arg1 <= 0 /\ -arg1+arg1P2 <= 0 /\ arg1P2 > 0 /\ 1+arg2P2 > 0), cost: 1
  12: f227_0_isCyclic_NONNULL -> f331_0_isCyclic_NULL : arg2'=arg2P3, arg1'=arg1P3, (1+arg1P3 > 0 /\ 4-arg1+arg2P3 <= 0 /\ 1+arg1P3-arg1 <= 0 /\ 1+arg2P3 > 0), cost: 2
   1: f1_0_main_Load -> f227_0_isCyclic_NONNULL : arg2'=arg2P1, arg1'=arg1P1, (arg1 > 0 /\ 1+arg1P1 > 0), cost: 1
   4: f1_0_main_Load -> f201_0_createList_LE : arg2'=arg2P4, arg1'=arg1P4, (1+arg2 > 0 /\ arg1 > 0 /\ 1+arg1P4 > 0), cost: 1
  13: f1_0_main_Load -> f201_0_createList_LE : arg2'=arg2P5, arg1'=0, (-1+arg1P4 >= 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 1+arg1P4
   6: __init -> f1_0_main_Load : arg2'=arg2P6, arg1'=arg1P6, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
  <empty>


Computing asymptotic complexity

Proved the following lower bound
Complexity:  Unknown
Cpx degree: ?

Solved cost: 0
Rule cost:   0

