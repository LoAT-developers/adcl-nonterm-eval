unknown

Initial ITS

Start location: __init
Program variables: arg1 arg2
   0: f297_0_createIntList_Return -> f508_0_random_ArrayAccess : arg1'=arg1p1, arg2'=arg2p1, (1+arg1 > 0 /\ arg1p1-arg1 <= 0 /\ 1+arg1p1 > 0), cost: 1
   2: f508_0_random_ArrayAccess -> f698_0_nth_LE : arg1'=arg1p3, arg2'=arg2p3, (x7 > 0 /\ arg1p3-arg1 <= 0 /\ arg1p3 > 0 /\ 1+arg2p3 > 0 /\ arg1 > 0), cost: 1
   1: f1_0_main_Load -> f508_0_random_ArrayAccess : arg1'=arg1p2, arg2'=arg2p2, (1+arg1p2 > 0 /\ arg1 > 0), cost: 1
   6: f1_0_main_Load -> f658_0_createIntList_LE : arg1'=arg1p7, arg2'=arg2p7, (1-arg2p7 == 0 /\ 1+arg1p7 > 0 /\ arg1 > 0 /\ 1+arg2 > 0), cost: 1
   3: f698_0_nth_LE -> f746_0_main_LE : arg1'=arg1p4, arg2'=arg2p4, (2+arg1p4-arg1 <= 0 /\ -2+arg2 < 0 /\ arg1 > 0), cost: 1
   4: f698_0_nth_LE -> f698_0_nth_LE : arg1'=arg1p5, arg2'=arg2p5, (-1+arg2 > 0 /\ -1-arg2p5+arg2 == 0 /\ 1+arg1p5-arg1 <= 0 /\ 1+arg1p5 > 0 /\ arg1 > 0), cost: 1
   5: f746_0_main_LE -> f746_0_main_LE : arg1'=arg1p6, arg2'=arg2p6, (-1-arg1p6+arg1 == 0 /\ arg1 > 0), cost: 1
   7: f658_0_createIntList_LE -> f658_0_createIntList_LE : arg1'=arg1p8, arg2'=arg2p8, (1-arg2p8+arg2 == 0 /\ arg2 > 0 /\ -1-arg1p8+arg1 == 0 /\ arg1 > 0), cost: 1
   8: __init -> f1_0_main_Load : arg1'=arg1p9, arg2'=arg2p9, T, cost: 1

Simplified Transitions

Start location: __init
Program variables: arg1 arg2
   0: f297_0_createIntList_Return -> f508_0_random_ArrayAccess : arg1'=arg1p1, arg2'=arg2p1, (1+arg1 > 0 /\ arg1p1-arg1 <= 0 /\ 1+arg1p1 > 0), cost: 1
   9: f508_0_random_ArrayAccess -> f698_0_nth_LE : arg1'=arg1p3, arg2'=arg2p3, (arg1p3-arg1 <= 0 /\ arg1p3 > 0 /\ 1+arg2p3 > 0 /\ arg1 > 0), cost: 1
   1: f1_0_main_Load -> f508_0_random_ArrayAccess : arg1'=arg1p2, arg2'=arg2p2, (1+arg1p2 > 0 /\ arg1 > 0), cost: 1
  12: f1_0_main_Load -> f658_0_createIntList_LE : arg1'=arg1p7, arg2'=1, (1+arg1p7 > 0 /\ arg1 > 0 /\ 1+arg2 > 0), cost: 1
   3: f698_0_nth_LE -> f746_0_main_LE : arg1'=arg1p4, arg2'=arg2p4, (2+arg1p4-arg1 <= 0 /\ -2+arg2 < 0 /\ arg1 > 0), cost: 1
  10: f698_0_nth_LE -> f698_0_nth_LE : arg1'=arg1p5, arg2'=-1+arg2, (-1+arg2 > 0 /\ 1+arg1p5-arg1 <= 0 /\ 1+arg1p5 > 0 /\ arg1 > 0), cost: 1
  11: f746_0_main_LE -> f746_0_main_LE : arg1'=-1+arg1, arg2'=arg2p6, arg1 > 0, cost: 1
  13: f658_0_createIntList_LE -> f658_0_createIntList_LE : arg1'=-1+arg1, arg2'=1+arg2, (arg2 > 0 /\ arg1 > 0), cost: 1
   8: __init -> f1_0_main_Load : arg1'=arg1p9, arg2'=arg2p9, T, cost: 1

	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	f508_0_random_ArrayAccess -> f698_0_nth_LE : arg1'=arg1p3, arg2'=arg2p3, (x7 > 0 /\ arg1p3-arg1 <= 0 /\ arg1p3 > 0 /\ 1+arg2p3 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f508_0_random_ArrayAccess -> f698_0_nth_LE : arg1'=arg1p3, arg2'=arg2p3, (arg1p3-arg1 <= 0 /\ arg1p3 > 0 /\ 1+arg2p3 > 0 /\ arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f698_0_nth_LE -> f698_0_nth_LE : arg1'=arg1p5, arg2'=arg2p5, (-1+arg2 > 0 /\ -1-arg2p5+arg2 == 0 /\ 1+arg1p5-arg1 <= 0 /\ 1+arg1p5 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f698_0_nth_LE -> f698_0_nth_LE : arg1'=arg1p5, arg2'=-1+arg2, (0 == 0 /\ -1+arg2 > 0 /\ 1+arg1p5-arg1 <= 0 /\ 1+arg1p5 > 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg2p5 = -1+arg2
		
	Simplified Guard

	Original rule:
	f698_0_nth_LE -> f698_0_nth_LE : arg1'=arg1p5, arg2'=-1+arg2, (0 == 0 /\ -1+arg2 > 0 /\ 1+arg1p5-arg1 <= 0 /\ 1+arg1p5 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f698_0_nth_LE -> f698_0_nth_LE : arg1'=arg1p5, arg2'=-1+arg2, (-1+arg2 > 0 /\ 1+arg1p5-arg1 <= 0 /\ 1+arg1p5 > 0 /\ arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f746_0_main_LE -> f746_0_main_LE : arg1'=arg1p6, arg2'=arg2p6, (-1-arg1p6+arg1 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f746_0_main_LE -> f746_0_main_LE : arg1'=-1+arg1, arg2'=arg2p6, (0 == 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg1p6 = -1+arg1
		
	Simplified Guard

	Original rule:
	f746_0_main_LE -> f746_0_main_LE : arg1'=-1+arg1, arg2'=arg2p6, (0 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f746_0_main_LE -> f746_0_main_LE : arg1'=-1+arg1, arg2'=arg2p6, arg1 > 0, cost: 1
	
	Propagated Equalities

	Original rule:
	f1_0_main_Load -> f658_0_createIntList_LE : arg1'=arg1p7, arg2'=arg2p7, (1-arg2p7 == 0 /\ 1+arg1p7 > 0 /\ arg1 > 0 /\ 1+arg2 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f658_0_createIntList_LE : arg1'=arg1p7, arg2'=1, (0 == 0 /\ 1+arg1p7 > 0 /\ arg1 > 0 /\ 1+arg2 > 0), cost: 1
	
		propagated equality arg2p7 = 1
		
	Simplified Guard

	Original rule:
	f1_0_main_Load -> f658_0_createIntList_LE : arg1'=arg1p7, arg2'=1, (0 == 0 /\ 1+arg1p7 > 0 /\ arg1 > 0 /\ 1+arg2 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f658_0_createIntList_LE : arg1'=arg1p7, arg2'=1, (1+arg1p7 > 0 /\ arg1 > 0 /\ 1+arg2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f658_0_createIntList_LE -> f658_0_createIntList_LE : arg1'=arg1p8, arg2'=arg2p8, (1-arg2p8+arg2 == 0 /\ arg2 > 0 /\ -1-arg1p8+arg1 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f658_0_createIntList_LE -> f658_0_createIntList_LE : arg1'=-1+arg1, arg2'=1+arg2, (0 == 0 /\ arg2 > 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg2p8 = 1+arg2
		
		propagated equality arg1p8 = -1+arg1
		
	Simplified Guard

	Original rule:
	f658_0_createIntList_LE -> f658_0_createIntList_LE : arg1'=-1+arg1, arg2'=1+arg2, (0 == 0 /\ arg2 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f658_0_createIntList_LE -> f658_0_createIntList_LE : arg1'=-1+arg1, arg2'=1+arg2, (arg2 > 0 /\ arg1 > 0), cost: 1

Step with 8

	Trace

	8[T]
	
	Blocked

	[{}, {}]

Step with 1

	Trace

	8[T], 1[(1+arg1p2 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {}]

Step with 9

	Trace

	8[T], 1[(1+arg1p2 > 0 /\ arg1 > 0)], 9[(arg1p3-arg1 <= 0 /\ arg1p3 > 0 /\ 1+arg2p3 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {}, {}]

Step with 3

	Trace

	8[T], 1[(1+arg1p2 > 0 /\ arg1 > 0)], 9[(arg1p3-arg1 <= 0 /\ arg1p3 > 0 /\ 1+arg2p3 > 0 /\ arg1 > 0)], 3[(2+arg1p4-arg1 <= 0 /\ -2+arg2 < 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {}, {}, {}]

Step with 11

	Trace

	8[T], 1[(1+arg1p2 > 0 /\ arg1 > 0)], 9[(arg1p3-arg1 <= 0 /\ arg1p3 > 0 /\ 1+arg2p3 > 0 /\ arg1 > 0)], 3[(2+arg1p4-arg1 <= 0 /\ -2+arg2 < 0 /\ arg1 > 0)], 11[(arg1 > 0)]
	
	Blocked

	[{}, {}, {}, {}, {}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2
   0: f297_0_createIntList_Return -> f508_0_random_ArrayAccess : arg1'=arg1p1, arg2'=arg2p1, (1+arg1 > 0 /\ arg1p1-arg1 <= 0 /\ 1+arg1p1 > 0), cost: 1
   9: f508_0_random_ArrayAccess -> f698_0_nth_LE : arg1'=arg1p3, arg2'=arg2p3, (arg1p3-arg1 <= 0 /\ arg1p3 > 0 /\ 1+arg2p3 > 0 /\ arg1 > 0), cost: 1
   1: f1_0_main_Load -> f508_0_random_ArrayAccess : arg1'=arg1p2, arg2'=arg2p2, (1+arg1p2 > 0 /\ arg1 > 0), cost: 1
  12: f1_0_main_Load -> f658_0_createIntList_LE : arg1'=arg1p7, arg2'=1, (1+arg1p7 > 0 /\ arg1 > 0 /\ 1+arg2 > 0), cost: 1
   3: f698_0_nth_LE -> f746_0_main_LE : arg1'=arg1p4, arg2'=arg2p4, (2+arg1p4-arg1 <= 0 /\ -2+arg2 < 0 /\ arg1 > 0), cost: 1
  10: f698_0_nth_LE -> f698_0_nth_LE : arg1'=arg1p5, arg2'=-1+arg2, (-1+arg2 > 0 /\ 1+arg1p5-arg1 <= 0 /\ 1+arg1p5 > 0 /\ arg1 > 0), cost: 1
  11: f746_0_main_LE -> f746_0_main_LE : arg1'=-1+arg1, arg2'=arg2p6, arg1 > 0, cost: 1
  14: f746_0_main_LE -> f746_0_main_LE : arg1'=-n+arg1, arg2'=arg2p6, (-1+n >= 0 /\ 1-n+arg1 > 0), cost: 1
  13: f658_0_createIntList_LE -> f658_0_createIntList_LE : arg1'=-1+arg1, arg2'=1+arg2, (arg2 > 0 /\ arg1 > 0), cost: 1
   8: __init -> f1_0_main_Load : arg1'=arg1p9, arg2'=arg2p9, T, cost: 1

	Loop Acceleration

	Original rule:
	f746_0_main_LE -> f746_0_main_LE : arg1'=-1+arg1, arg2'=arg2p6, (arg1 > 0), cost: 1
	New rule:
	f746_0_main_LE -> f746_0_main_LE : arg1'=-n+arg1, arg2'=arg2p6, (-1+n >= 0 /\ 1-n+arg1 > 0), cost: 1

		arg1 > 0 [0]: montonic decrease yields 1-n+arg1 > 0
		
		arg1 > 0 [1]: eventual increase yields (1 <= 0 /\ arg1 > 0)
		
		Replacement map: {arg1 > 0 -> 1-n+arg1 > 0}

	Trace

	8[T], 1[(1+arg1p2 > 0 /\ arg1 > 0)], 9[(arg1p3-arg1 <= 0 /\ arg1p3 > 0 /\ 1+arg2p3 > 0 /\ arg1 > 0)], 3[(2+arg1p4-arg1 <= 0 /\ -2+arg2 < 0 /\ arg1 > 0)], 14[(-1+n >= 0 /\ 1-n+arg1 > 0)]
	
	Blocked

	[{}, {}, {}, {}, {}, {11[T], 14[T]}]

Backtrack

	Trace

	8[T], 1[(1+arg1p2 > 0 /\ arg1 > 0)], 9[(arg1p3-arg1 <= 0 /\ arg1p3 > 0 /\ 1+arg2p3 > 0 /\ arg1 > 0)], 3[(2+arg1p4-arg1 <= 0 /\ -2+arg2 < 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {}, {}, {14[T]}]

Step with 11

	Trace

	8[T], 1[(1+arg1p2 > 0 /\ arg1 > 0)], 9[(arg1p3-arg1 <= 0 /\ arg1p3 > 0 /\ 1+arg2p3 > 0 /\ arg1 > 0)], 3[(2+arg1p4-arg1 <= 0 /\ -2+arg2 < 0 /\ arg1 > 0)], 11[(arg1 > 0)]
	
	Blocked

	[{}, {}, {}, {}, {14[T]}, {}]

Covered

	Trace

	8[T], 1[(1+arg1p2 > 0 /\ arg1 > 0)], 9[(arg1p3-arg1 <= 0 /\ arg1p3 > 0 /\ 1+arg2p3 > 0 /\ arg1 > 0)], 3[(2+arg1p4-arg1 <= 0 /\ -2+arg2 < 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {}, {}, {11[T], 14[T]}]

Backtrack

	Trace

	8[T], 1[(1+arg1p2 > 0 /\ arg1 > 0)], 9[(arg1p3-arg1 <= 0 /\ arg1p3 > 0 /\ 1+arg2p3 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {}, {3[T]}]

Step with 10

	Trace

	8[T], 1[(1+arg1p2 > 0 /\ arg1 > 0)], 9[(arg1p3-arg1 <= 0 /\ arg1p3 > 0 /\ 1+arg2p3 > 0 /\ arg1 > 0)], 10[(-1+arg2 > 0 /\ 1+arg1p5-arg1 <= 0 /\ 1+arg1p5 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {}, {3[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 10

	Trace

	8[T], 1[(1+arg1p2 > 0 /\ arg1 > 0)], 9[(arg1p3-arg1 <= 0 /\ arg1p3 > 0 /\ 1+arg2p3 > 0 /\ arg1 > 0)], 10[(-1+arg2 > 0 /\ 1+arg1p5-arg1 <= 0 /\ 1+arg1p5 > 0 /\ arg1 > 0)], 10[(-1+arg2 > 0 /\ 1+arg1p5-arg1 <= 0 /\ 1+arg1p5 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {}, {3[T]}, {}, {}]

Covered

	Trace

	8[T], 1[(1+arg1p2 > 0 /\ arg1 > 0)], 9[(arg1p3-arg1 <= 0 /\ arg1p3 > 0 /\ 1+arg2p3 > 0 /\ arg1 > 0)], 10[(-1+arg2 > 0 /\ 1+arg1p5-arg1 <= 0 /\ 1+arg1p5 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {}, {3[T]}, {10[T]}]

Step with 3

	Trace

	8[T], 1[(1+arg1p2 > 0 /\ arg1 > 0)], 9[(arg1p3-arg1 <= 0 /\ arg1p3 > 0 /\ 1+arg2p3 > 0 /\ arg1 > 0)], 10[(-1+arg2 > 0 /\ 1+arg1p5-arg1 <= 0 /\ 1+arg1p5 > 0 /\ arg1 > 0)], 3[(2+arg1p4-arg1 <= 0 /\ -2+arg2 < 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {}, {3[T]}, {10[T]}, {}]

Step with 11

	Trace

	8[T], 1[(1+arg1p2 > 0 /\ arg1 > 0)], 9[(arg1p3-arg1 <= 0 /\ arg1p3 > 0 /\ 1+arg2p3 > 0 /\ arg1 > 0)], 10[(-1+arg2 > 0 /\ 1+arg1p5-arg1 <= 0 /\ 1+arg1p5 > 0 /\ arg1 > 0)], 3[(2+arg1p4-arg1 <= 0 /\ -2+arg2 < 0 /\ arg1 > 0)], 11[(arg1 > 0)]
	
	Blocked

	[{}, {}, {}, {3[T]}, {10[T]}, {}, {}]

Covered

	Trace

	8[T], 1[(1+arg1p2 > 0 /\ arg1 > 0)], 9[(arg1p3-arg1 <= 0 /\ arg1p3 > 0 /\ 1+arg2p3 > 0 /\ arg1 > 0)], 10[(-1+arg2 > 0 /\ 1+arg1p5-arg1 <= 0 /\ 1+arg1p5 > 0 /\ arg1 > 0)], 3[(2+arg1p4-arg1 <= 0 /\ -2+arg2 < 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {}, {3[T]}, {10[T]}, {11[T]}]

Step with 14

	Trace

	8[T], 1[(1+arg1p2 > 0 /\ arg1 > 0)], 9[(arg1p3-arg1 <= 0 /\ arg1p3 > 0 /\ 1+arg2p3 > 0 /\ arg1 > 0)], 10[(-1+arg2 > 0 /\ 1+arg1p5-arg1 <= 0 /\ 1+arg1p5 > 0 /\ arg1 > 0)], 3[(2+arg1p4-arg1 <= 0 /\ -2+arg2 < 0 /\ arg1 > 0)], 14[(-1+n >= 0 /\ 1-n+arg1 > 0)]
	
	Blocked

	[{}, {}, {}, {3[T]}, {10[T]}, {11[T]}, {14[T]}]

Step with 11

	Trace

	8[T], 1[(1+arg1p2 > 0 /\ arg1 > 0)], 9[(arg1p3-arg1 <= 0 /\ arg1p3 > 0 /\ 1+arg2p3 > 0 /\ arg1 > 0)], 10[(-1+arg2 > 0 /\ 1+arg1p5-arg1 <= 0 /\ 1+arg1p5 > 0 /\ arg1 > 0)], 3[(2+arg1p4-arg1 <= 0 /\ -2+arg2 < 0 /\ arg1 > 0)], 14[(-1+n >= 0 /\ 1-n+arg1 > 0)], 11[(arg1 > 0)]
	
	Blocked

	[{}, {}, {}, {3[T]}, {10[T]}, {11[T]}, {14[T]}, {}]

Covered

	Trace

	8[T], 1[(1+arg1p2 > 0 /\ arg1 > 0)], 9[(arg1p3-arg1 <= 0 /\ arg1p3 > 0 /\ 1+arg2p3 > 0 /\ arg1 > 0)], 10[(-1+arg2 > 0 /\ 1+arg1p5-arg1 <= 0 /\ 1+arg1p5 > 0 /\ arg1 > 0)], 3[(2+arg1p4-arg1 <= 0 /\ -2+arg2 < 0 /\ arg1 > 0)], 14[(-1+n >= 0 /\ 1-n+arg1 > 0)]
	
	Blocked

	[{}, {}, {}, {3[T]}, {10[T]}, {11[T]}, {11[T], 14[T]}]

Backtrack

	Trace

	8[T], 1[(1+arg1p2 > 0 /\ arg1 > 0)], 9[(arg1p3-arg1 <= 0 /\ arg1p3 > 0 /\ 1+arg2p3 > 0 /\ arg1 > 0)], 10[(-1+arg2 > 0 /\ 1+arg1p5-arg1 <= 0 /\ 1+arg1p5 > 0 /\ arg1 > 0)], 3[(2+arg1p4-arg1 <= 0 /\ -2+arg2 < 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {}, {3[T]}, {10[T]}, {11[T], 14[T]}]

Backtrack

	Trace

	8[T], 1[(1+arg1p2 > 0 /\ arg1 > 0)], 9[(arg1p3-arg1 <= 0 /\ arg1p3 > 0 /\ 1+arg2p3 > 0 /\ arg1 > 0)], 10[(-1+arg2 > 0 /\ 1+arg1p5-arg1 <= 0 /\ 1+arg1p5 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {}, {3[T]}, {3[T], 10[T]}]

Backtrack

	Trace

	8[T], 1[(1+arg1p2 > 0 /\ arg1 > 0)], 9[(arg1p3-arg1 <= 0 /\ arg1p3 > 0 /\ 1+arg2p3 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {}, {3[T], 10[T]}]

Backtrack

	Trace

	8[T], 1[(1+arg1p2 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {9[T]}]

Backtrack

	Trace

	8[T]
	
	Blocked

	[{}, {1[T]}]

Step with 12

	Trace

	8[T], 12[(1+arg1p7 > 0 /\ arg1 > 0 /\ 1+arg2 > 0)]
	
	Blocked

	[{}, {1[T]}, {}]

Step with 13

	Trace

	8[T], 12[(1+arg1p7 > 0 /\ arg1 > 0 /\ 1+arg2 > 0)], 13[(arg2 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {1[T]}, {}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2
   0: f297_0_createIntList_Return -> f508_0_random_ArrayAccess : arg1'=arg1p1, arg2'=arg2p1, (1+arg1 > 0 /\ arg1p1-arg1 <= 0 /\ 1+arg1p1 > 0), cost: 1
   9: f508_0_random_ArrayAccess -> f698_0_nth_LE : arg1'=arg1p3, arg2'=arg2p3, (arg1p3-arg1 <= 0 /\ arg1p3 > 0 /\ 1+arg2p3 > 0 /\ arg1 > 0), cost: 1
   1: f1_0_main_Load -> f508_0_random_ArrayAccess : arg1'=arg1p2, arg2'=arg2p2, (1+arg1p2 > 0 /\ arg1 > 0), cost: 1
  12: f1_0_main_Load -> f658_0_createIntList_LE : arg1'=arg1p7, arg2'=1, (1+arg1p7 > 0 /\ arg1 > 0 /\ 1+arg2 > 0), cost: 1
   3: f698_0_nth_LE -> f746_0_main_LE : arg1'=arg1p4, arg2'=arg2p4, (2+arg1p4-arg1 <= 0 /\ -2+arg2 < 0 /\ arg1 > 0), cost: 1
  10: f698_0_nth_LE -> f698_0_nth_LE : arg1'=arg1p5, arg2'=-1+arg2, (-1+arg2 > 0 /\ 1+arg1p5-arg1 <= 0 /\ 1+arg1p5 > 0 /\ arg1 > 0), cost: 1
  11: f746_0_main_LE -> f746_0_main_LE : arg1'=-1+arg1, arg2'=arg2p6, arg1 > 0, cost: 1
  14: f746_0_main_LE -> f746_0_main_LE : arg1'=-n+arg1, arg2'=arg2p6, (-1+n >= 0 /\ 1-n+arg1 > 0), cost: 1
  13: f658_0_createIntList_LE -> f658_0_createIntList_LE : arg1'=-1+arg1, arg2'=1+arg2, (arg2 > 0 /\ arg1 > 0), cost: 1
  15: f658_0_createIntList_LE -> f658_0_createIntList_LE : arg1'=-n3+arg1, arg2'=n3+arg2, (1-n3+arg1 > 0 /\ arg2 > 0 /\ -1+n3 >= 0), cost: 1
   8: __init -> f1_0_main_Load : arg1'=arg1p9, arg2'=arg2p9, T, cost: 1

	Loop Acceleration

	Original rule:
	f658_0_createIntList_LE -> f658_0_createIntList_LE : arg1'=-1+arg1, arg2'=1+arg2, (arg2 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f658_0_createIntList_LE -> f658_0_createIntList_LE : arg1'=-n3+arg1, arg2'=n3+arg2, (1-n3+arg1 > 0 /\ arg2 > 0 /\ -1+n3 >= 0), cost: 1

		arg2 > 0 [0]: monotonic increase yields arg2 > 0
		
		arg1 > 0 [0]: montonic decrease yields 1-n3+arg1 > 0
		
		arg1 > 0 [1]: eventual increase yields (1 <= 0 /\ arg1 > 0)
		
		Replacement map: {arg2 > 0 -> arg2 > 0, arg1 > 0 -> 1-n3+arg1 > 0}

	Trace

	8[T], 12[(1+arg1p7 > 0 /\ arg1 > 0 /\ 1+arg2 > 0)], 15[(1-n3+arg1 > 0 /\ arg2 > 0 /\ -1+n3 >= 0)]
	
	Blocked

	[{}, {1[T]}, {}, {13[T], 15[T]}]

Backtrack

	Trace

	8[T], 12[(1+arg1p7 > 0 /\ arg1 > 0 /\ 1+arg2 > 0)]
	
	Blocked

	[{}, {1[T]}, {15[T]}]

Step with 13

	Trace

	8[T], 12[(1+arg1p7 > 0 /\ arg1 > 0 /\ 1+arg2 > 0)], 13[(arg2 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {1[T]}, {15[T]}, {}]

Covered

	Trace

	8[T], 12[(1+arg1p7 > 0 /\ arg1 > 0 /\ 1+arg2 > 0)]
	
	Blocked

	[{}, {1[T]}, {13[T], 15[T]}]

Backtrack

	Trace

	8[T]
	
	Blocked

	[{}, {1[T], 12[T]}]

Backtrack

	Trace

	Blocked

	[{8[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
