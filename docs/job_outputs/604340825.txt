YES

Solver Timeout: 4
Global Timeout: 300
Maximum number of concurrent processes: 900
*******************************************************************************************
*********************** UNPROCESSED TRANSITION SYSTEMS PER FUNCTION ***********************
*******************************************************************************************


List of LLVMGraphs + assumeNodes + staticAssertNodes [1] :

+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++
+                                                                  +
Init Location: 0
Transitions:
<l0, l1, true, seq{main__func_return_ -> 0, main_i -> 0, main_c -> 0}>
<l1, l2, true>
<l2, l9, not((main_i < 20))>
<l2, l3, (main_i < 20)>
<l3, l4, true, seq{main_i -> (main_i + 1)}>
<l4, l5, (main_i <= 10)>
<l4, l6, not((main_i <= 10))>
<l5, l8, true>
<l6, l7, true, seq{main_c -> (main_c + 1)}>
<l7, l8, true>
<l8, l2, true>
<l9, l10, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

+ Assume Nodes [0]: ++++++++++++++++++++++++++++++++++++++++++++++++
       
+ Static Assert Nodes [0]: +++++++++++++++++++++++++++++++++++++++++
       
+ After preprocess (paralelization): ++++++++++++++++++++++++++++++

Init Location: 0
Transitions:
<l0, l1, true, seq{main__func_return_ -> 0, main_i -> 0, main_c -> 0}>
<l1, l2, true>
<l2, l3, (main_i < 20)>
<l2, l9, not((main_i < 20))>
<l3, l4, true, seq{main_i -> (main_i + 1)}>
<l4, l5, (main_i <= 10)>
<l4, l6, not((main_i <= 10))>
<l5, l8, true>
<l6, l7, true, seq{main_c -> (main_c + 1)}>
<l7, l8, true>
<l8, l2, true>
<l9, l10, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:
10, 
Accepting locations:

Asserts:

+                                                                  +
+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++


Function Return and Parameters Information [1 functions]:
    function name: main [1 return + 0 parameters]        demangled: main
        main__func_return_      [function result] : int


AST Ident Scanner Information [4 idents]:
__VERIFIER_nondet_int | function | [integer, ()] | <line: 3, col: 1>
main | function | [integer, ()] | <line: 5, col: 1>
i | local variable | integer | <line: 6, col: 2> | <line: 8, col: 2> <line: 10, col: 9> <line: 11, col: 6> <line: 11, col: 10> <line: 12, col: 10>
c | local variable | integer | <line: 7, col: 5> | <line: 9, col: 5> <line: 14, col: 13> <line: 14, col: 17>

Main function: main
Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l2, (main_i = 0) /\ (main_c = 0)>
<l2, l2, (main_i < 20) /\ ((main_i + 1) <= 10), par{main_i -> (main_i + 1)}>
<l2, l2, (main_i < 20) /\ not(((main_i + 1) <= 10)), par{main_i -> (main_i + 1), main_c -> (main_c + 1)}>
<l2, l10, not((main_i < 20))>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:
10, 
Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l2, l2, main_i <= 9, {main_i -> 1 + main_i, rest remain the same}>
<l2, l2, 10 <= main_i /\ main_i <= 19, {main_i -> 1 + main_i, main_c -> 1 + main_c, rest remain the same}>
Variables:
main_i, main_c

Graph 2:
Transitions:
Variables:

Precedence: 
Graph 0

Graph 1
<l0, l2, main_i = 0 /\ main_c = 0, {all remain the same}>

Graph 2
<l2, l10, 20 <= main_i, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 2 , 1 )
( 10 , 2 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.006788

Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000650s
[33mRanking function: [36m180 - 20*main_i[0m
New Graphs: 
Transitions:
<l2, l2, 10 <= main_i /\ main_i <= 19, {main_i -> 1 + main_i, main_c -> 1 + main_c, rest remain the same}>
Variables:
main_i, main_c
Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000303s
[33mRanking function: [36m19 - main_i[0m
New Graphs: 
Proving termination of subgraph 2
Analyzing SCC {l10}...
No cycles found.

[32mProgram Terminates[0m
