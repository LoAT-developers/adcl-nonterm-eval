NO

Initial ITS

Start location: __init
Program variables: arg1 arg2
   0: f1_0_main_Load -> f86_0_sum_NE : arg1'=arg1p1, arg2'=arg2p1, (-arg1p1+arg2 == 0 /\ -4+arg2 > 0 /\ arg1 > 0), cost: 1
   1: f1_0_main_Load -> f86_0_sum_NE : arg1'=arg1p2, arg2'=arg2p2, (1+arg2 > 0 /\ -arg1p2-arg2 == 0 /\ -5+arg2 < 0 /\ arg1 > 0), cost: 1
   2: f86_0_sum_NE -> f86_0_sum_NE : arg1'=arg1p3, arg2'=arg2p3, (-1-arg1p3+arg1 == 0 /\ arg1 < 0 /\ -1 < 0), cost: 1
   3: f86_0_sum_NE -> f86_0_sum_NE : arg1'=arg1p4, arg2'=arg2p4, (arg1 > 0 /\ -1 < 0 /\ -1-arg1p4+arg1 == 0), cost: 1
   4: __init -> f1_0_main_Load : arg1'=arg1p5, arg2'=arg2p5, T, cost: 1

Simplified Transitions

Start location: __init
Program variables: arg1 arg2
   5: f1_0_main_Load -> f86_0_sum_NE : arg1'=arg2, arg2'=arg2p1, (-4+arg2 > 0 /\ arg1 > 0), cost: 1
   6: f1_0_main_Load -> f86_0_sum_NE : arg1'=-arg2, arg2'=arg2p2, (1+arg2 > 0 /\ -5+arg2 < 0 /\ arg1 > 0), cost: 1
   7: f86_0_sum_NE -> f86_0_sum_NE : arg1'=-1+arg1, arg2'=arg2p3, arg1 < 0, cost: 1
   8: f86_0_sum_NE -> f86_0_sum_NE : arg1'=-1+arg1, arg2'=arg2p4, arg1 > 0, cost: 1
   4: __init -> f1_0_main_Load : arg1'=arg1p5, arg2'=arg2p5, T, cost: 1

	Propagated Equalities

	Original rule:
	f1_0_main_Load -> f86_0_sum_NE : arg1'=arg1p1, arg2'=arg2p1, (-arg1p1+arg2 == 0 /\ -4+arg2 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f86_0_sum_NE : arg1'=arg2, arg2'=arg2p1, (0 == 0 /\ -4+arg2 > 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg1p1 = arg2
		
	Simplified Guard

	Original rule:
	f1_0_main_Load -> f86_0_sum_NE : arg1'=arg2, arg2'=arg2p1, (0 == 0 /\ -4+arg2 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f86_0_sum_NE : arg1'=arg2, arg2'=arg2p1, (-4+arg2 > 0 /\ arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f1_0_main_Load -> f86_0_sum_NE : arg1'=arg1p2, arg2'=arg2p2, (1+arg2 > 0 /\ -arg1p2-arg2 == 0 /\ -5+arg2 < 0 /\ arg1 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f86_0_sum_NE : arg1'=-arg2, arg2'=arg2p2, (0 == 0 /\ 1+arg2 > 0 /\ -5+arg2 < 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg1p2 = -arg2
		
	Simplified Guard

	Original rule:
	f1_0_main_Load -> f86_0_sum_NE : arg1'=-arg2, arg2'=arg2p2, (0 == 0 /\ 1+arg2 > 0 /\ -5+arg2 < 0 /\ arg1 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f86_0_sum_NE : arg1'=-arg2, arg2'=arg2p2, (1+arg2 > 0 /\ -5+arg2 < 0 /\ arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f86_0_sum_NE -> f86_0_sum_NE : arg1'=arg1p3, arg2'=arg2p3, (-1-arg1p3+arg1 == 0 /\ arg1 < 0 /\ -1 < 0), cost: 1
	New rule:
	f86_0_sum_NE -> f86_0_sum_NE : arg1'=-1+arg1, arg2'=arg2p3, (0 == 0 /\ arg1 < 0 /\ -1 < 0), cost: 1
	
		propagated equality arg1p3 = -1+arg1
		
	Simplified Guard

	Original rule:
	f86_0_sum_NE -> f86_0_sum_NE : arg1'=-1+arg1, arg2'=arg2p3, (0 == 0 /\ arg1 < 0 /\ -1 < 0), cost: 1
	New rule:
	f86_0_sum_NE -> f86_0_sum_NE : arg1'=-1+arg1, arg2'=arg2p3, arg1 < 0, cost: 1
	
	Propagated Equalities

	Original rule:
	f86_0_sum_NE -> f86_0_sum_NE : arg1'=arg1p4, arg2'=arg2p4, (arg1 > 0 /\ -1 < 0 /\ -1-arg1p4+arg1 == 0), cost: 1
	New rule:
	f86_0_sum_NE -> f86_0_sum_NE : arg1'=-1+arg1, arg2'=arg2p4, (0 == 0 /\ arg1 > 0 /\ -1 < 0), cost: 1
	
		propagated equality arg1p4 = -1+arg1
		
	Simplified Guard

	Original rule:
	f86_0_sum_NE -> f86_0_sum_NE : arg1'=-1+arg1, arg2'=arg2p4, (0 == 0 /\ arg1 > 0 /\ -1 < 0), cost: 1
	New rule:
	f86_0_sum_NE -> f86_0_sum_NE : arg1'=-1+arg1, arg2'=arg2p4, arg1 > 0, cost: 1

Step with 4

	Trace

	4[T]
	
	Blocked

	[{}, {}]

Step with 5

	Trace

	4[T], 5[(-4+arg2 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {}]

Step with 8

	Trace

	4[T], 5[(-4+arg2 > 0 /\ arg1 > 0)], 8[(arg1 > 0)]
	
	Blocked

	[{}, {}, {7[T]}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2
   5: f1_0_main_Load -> f86_0_sum_NE : arg1'=arg2, arg2'=arg2p1, (-4+arg2 > 0 /\ arg1 > 0), cost: 1
   6: f1_0_main_Load -> f86_0_sum_NE : arg1'=-arg2, arg2'=arg2p2, (1+arg2 > 0 /\ -5+arg2 < 0 /\ arg1 > 0), cost: 1
   7: f86_0_sum_NE -> f86_0_sum_NE : arg1'=-1+arg1, arg2'=arg2p3, arg1 < 0, cost: 1
   8: f86_0_sum_NE -> f86_0_sum_NE : arg1'=-1+arg1, arg2'=arg2p4, arg1 > 0, cost: 1
   9: f86_0_sum_NE -> f86_0_sum_NE : arg1'=-n+arg1, arg2'=arg2p4, (1-n+arg1 > 0 /\ -1+n >= 0), cost: 1
   4: __init -> f1_0_main_Load : arg1'=arg1p5, arg2'=arg2p5, T, cost: 1

	Loop Acceleration

	Original rule:
	f86_0_sum_NE -> f86_0_sum_NE : arg1'=-1+arg1, arg2'=arg2p4, (arg1 > 0), cost: 1
	New rule:
	f86_0_sum_NE -> f86_0_sum_NE : arg1'=-n+arg1, arg2'=arg2p4, (1-n+arg1 > 0 /\ -1+n >= 0), cost: 1

		arg1 > 0 [0]: montonic decrease yields 1-n+arg1 > 0
		
		arg1 > 0 [1]: eventual increase yields (1 <= 0 /\ arg1 > 0)
		
		Replacement map: {arg1 > 0 -> 1-n+arg1 > 0}

	Trace

	4[T], 5[(-4+arg2 > 0 /\ arg1 > 0)], 9[(1-n+arg1 > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {}, {7[T]}, {8[T], 9[T]}]

Backtrack

	Trace

	4[T], 5[(-4+arg2 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {7[T], 9[T]}]

Step with 8

	Trace

	4[T], 5[(-4+arg2 > 0 /\ arg1 > 0)], 8[(arg1 > 0)]
	
	Blocked

	[{}, {}, {7[T], 9[T]}, {}]

Covered

	Trace

	4[T], 5[(-4+arg2 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {7[T], 8[T], 9[T]}]

Backtrack

	Trace

	4[T]
	
	Blocked

	[{}, {5[T]}]

Step with 6

	Trace

	4[T], 6[(1+arg2 > 0 /\ -5+arg2 < 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {5[T]}, {}]

Step with 7

	Trace

	4[T], 6[(1+arg2 > 0 /\ -5+arg2 < 0 /\ arg1 > 0)], 7[(arg1 < 0)]
	
	Blocked

	[{}, {5[T]}, {8[T], 9[T]}, {}]

Nonterm

Start location: __init
Program variables: arg1 arg2
   5: f1_0_main_Load -> f86_0_sum_NE : arg1'=arg2, arg2'=arg2p1, (-4+arg2 > 0 /\ arg1 > 0), cost: 1
   6: f1_0_main_Load -> f86_0_sum_NE : arg1'=-arg2, arg2'=arg2p2, (1+arg2 > 0 /\ -5+arg2 < 0 /\ arg1 > 0), cost: 1
   7: f86_0_sum_NE -> f86_0_sum_NE : arg1'=-1+arg1, arg2'=arg2p3, arg1 < 0, cost: 1
   8: f86_0_sum_NE -> f86_0_sum_NE : arg1'=-1+arg1, arg2'=arg2p4, arg1 > 0, cost: 1
   9: f86_0_sum_NE -> f86_0_sum_NE : arg1'=-n+arg1, arg2'=arg2p4, (1-n+arg1 > 0 /\ -1+n >= 0), cost: 1
  10: f86_0_sum_NE -> LoAT_sink : (-1+n2 >= 0 /\ -arg1 > 0), cost: NONTERM
  11: f86_0_sum_NE -> f86_0_sum_NE : arg1'=-n2+arg1, arg2'=arg2p3, (-1+n2 >= 0 /\ -arg1 > 0), cost: 1
   4: __init -> f1_0_main_Load : arg1'=arg1p5, arg2'=arg2p5, T, cost: 1

	Certificate of Non-Termination

	Original rule:
	f86_0_sum_NE -> f86_0_sum_NE : arg1'=-1+arg1, arg2'=arg2p3, (arg1 < 0), cost: 1
	New rule:
	f86_0_sum_NE -> LoAT_sink : (-1+n2 >= 0 /\ -arg1 > 0), cost: NONTERM

		-arg1 > 0 [0]: monotonic increase yields -arg1 > 0
		
		Replacement map: {-arg1 > 0 -> -arg1 > 0}

	Loop Acceleration

	Original rule:
	f86_0_sum_NE -> f86_0_sum_NE : arg1'=-1+arg1, arg2'=arg2p3, (arg1 < 0), cost: 1
	New rule:
	f86_0_sum_NE -> f86_0_sum_NE : arg1'=-n2+arg1, arg2'=arg2p3, (-1+n2 >= 0 /\ -arg1 > 0), cost: 1

		-arg1 > 0 [0]: monotonic increase yields -arg1 > 0
		
		Replacement map: {-arg1 > 0 -> -arg1 > 0}

Step with 10

	Trace

	4[T], 6[(1+arg2 > 0 /\ -5+arg2 < 0 /\ arg1 > 0)], 10[(-1+n2 >= 0 /\ -arg1 > 0)]
	
	Blocked

	[{}, {5[T]}, {8[T], 9[T]}, {10[T]}]

Refute

	Counterexample

	[ arg1=1 arg2=1 ] 4 [ arg1=-1 arg2=0 ] 6 [ arg1=arg1 arg2=arg2 ] 10
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
