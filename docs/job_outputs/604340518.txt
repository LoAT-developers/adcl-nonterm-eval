YES

Solver Timeout: 4
Global Timeout: 300
Maximum number of concurrent processes: 900
*******************************************************************************************
*********************** UNPROCESSED TRANSITION SYSTEMS PER FUNCTION ***********************
*******************************************************************************************


List of LLVMGraphs + assumeNodes + staticAssertNodes [1] :

+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++
+                                                                  +
Init Location: 0
Transitions:
<l0, l1, true, seq{main__func_return_ -> 0, main_q -> Â¿functionCall(__VERIFIER_nondet_int), main_p -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l1, l2, true>
<l2, l13, not((main_q > 0))>
<l2, l3, (main_q > 0)>
<l3, l13, not((main_p > 0))>
<l3, l4, (main_p > 0)>
<l4, l13, (main_p = main_q)>
<l4, l5, not((main_p = main_q))>
<l5, l6, (main_q < main_p)>
<l5, l8, not((main_q < main_p))>
<l6, l7, true, seq{main_q -> (main_q - 1), main_p -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l7, l12, true>
<l8, l9, (main_p < main_q)>
<l8, l11, not((main_p < main_q))>
<l9, l10, true, seq{main_p -> (main_p - 1), main_q -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l10, l11, true>
<l11, l12, true>
<l12, l2, true>
<l13, l14, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

+ Assume Nodes [0]: ++++++++++++++++++++++++++++++++++++++++++++++++
       
+ Static Assert Nodes [0]: +++++++++++++++++++++++++++++++++++++++++
       
+ After preprocess (paralelization): ++++++++++++++++++++++++++++++

Init Location: 0
Transitions:
<l0, l15, true, seq{main__func_return_ -> 0}>
<l15, l16, true, seq{varCall_1 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l16, l17, true, seq{main_q -> varCall_1}>
<l17, l18, true, seq{varCall_2 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l18, l1, true, seq{main_p -> varCall_2}>
<l1, l2, true>
<l2, l3, (main_q > 0)>
<l2, l13, not((main_q > 0))>
<l3, l4, (main_p > 0)>
<l3, l13, not((main_p > 0))>
<l4, l13, (main_p = main_q)>
<l4, l5, not((main_p = main_q))>
<l5, l6, (main_q < main_p)>
<l5, l8, not((main_q < main_p))>
<l6, l19, true, seq{main_q -> (main_q - 1)}>
<l19, l20, true, seq{varCall_3 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l20, l7, true, seq{main_p -> varCall_3}>
<l7, l12, true>
<l8, l9, (main_p < main_q)>
<l8, l11, not((main_p < main_q))>
<l9, l21, true, seq{main_p -> (main_p - 1)}>
<l21, l22, true, seq{varCall_4 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l22, l10, true, seq{main_q -> varCall_4}>
<l10, l11, true>
<l11, l12, true>
<l12, l2, true>
<l13, l14, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:
14, 
Accepting locations:

Asserts:

+                                                                  +
+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++


Function Return and Parameters Information [2 functions]:
    function name: __VERIFIER_nondet_int [1 return + 0 parameters]        demangled: __VERIFIER_nondet_int
        __VERIFIER_nondet_int__func_return_      [function result] : int
    function name: main [1 return + 0 parameters]        demangled: main
        main__func_return_      [function result] : int


AST Ident Scanner Information [4 idents]:
__VERIFIER_nondet_int | function | [integer, ()] | <line: 15, col: 1> | <line: 20, col: 6> <line: 21, col: 6> <line: 25, col: 8> <line: 28, col: 8>
main | function | [integer, ()] | <line: 17, col: 1>
p | local variable | integer | <line: 19, col: 5> | <line: 21, col: 2> <line: 22, col: 18> <line: 22, col: 27> <line: 23, col: 11> <line: 25, col: 4> <line: 26, col: 15> <line: 27, col: 4> <line: 27, col: 8>
q | local variable | integer | <line: 19, col: 5> | <line: 20, col: 2> <line: 22, col: 9> <line: 22, col: 32> <line: 23, col: 7> <line: 24, col: 4> <line: 24, col: 8> <line: 26, col: 19> <line: 28, col: 4>

Main function: main
Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l2, (main_p = undef6) /\ (main_q = undef5)>
<l2, l14, (main_q > 0) /\ (main_p > 0) /\ (main_p = main_q)>
<l2, l2, (main_q > 0) /\ (main_p > 0) /\ (main_p < main_q) /\ not((main_q < main_p)) /\ (main_p < main_q), par{main_p -> (main_p - 1), main_q -> undef8}>
<l2, l2, (main_q > 0) /\ (main_p > 0) /\ (main_p > main_q) /\ (main_q < main_p), par{main_p -> undef7, main_q -> (main_q - 1)}>
<l2, l14, (main_q > 0) /\ not((main_p > 0))>
<l2, l14, not((main_q > 0))>

Fresh variables:
undef5, undef6, undef7, undef8, 

Undef variables:
undef5, undef6, undef7, undef8, 

Abstraction variables:

Exit nodes:
14, 
Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l2, l2, 1 + main_p <= main_q /\ 1 <= main_p /\ 1 <= main_q, {main_p -> -1 + main_p, main_q -> undef8, rest remain the same}>
<l2, l2, 1 <= main_p /\ 1 + main_q <= main_p /\ 1 <= main_q, {main_p -> undef7, main_q -> -1 + main_q, rest remain the same}>
Variables:
main_p, main_q

Graph 2:
Transitions:
Variables:

Precedence: 
Graph 0

Graph 1
<l0, l2, main_p = undef6 /\ main_q = undef5, {all remain the same}>

Graph 2
<l2, l14, 1 <= main_p /\ 1 <= main_q /\ main_p = main_q, {all remain the same}>
<l2, l14, main_p <= 0 /\ 1 <= main_q, {all remain the same}>
<l2, l14, main_q <= 0, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 2 , 1 )
( 14 , 2 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.002414

Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000821s

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.004021s
[33mPiecewise ranking function: [36mmin(-2 + main_q,-1 + main_p)[0m
New Graphs: 
Transitions:
<l2, l2, 1 <= main_p /\ 1 + main_q <= main_p /\ 1 <= main_q, {main_p -> undef7, main_q -> -1 + main_q, rest remain the same}>
Variables:
main_p, main_q
Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000392s
[33mRanking function: [36m-1 + main_q[0m
New Graphs: 
Proving termination of subgraph 2
Analyzing SCC {l14}...
No cycles found.

[32mProgram Terminates[0m
