unknown

Initial ITS

Start location: [1]
Program variables: x y z
   0: [1] -> [2] : x'=nondet, T, cost: 1
   1: [2] -> [3] : y'=nondet1, T, cost: 1
   2: [3] -> [4] : z'=nondet2, T, cost: 1
   3: [4] -> [5] : (-z+x >= 0 /\ y > 0), cost: 1
   6: [4] -> [7] : (-z+x < 0 \/ y <= 0), cost: 1
   4: [5] -> [6] : z'=z+y, T, cost: 1
   5: [6] -> [4] : T, cost: 1

Chained Linear Paths

Start location: [1]
Program variables: x y z
   8: [1] -> [4] : x'=nondet, y'=nondet1, z'=nondet2, T, cost: 1
   6: [4] -> [7] : (-z+x < 0 \/ y <= 0), cost: 1
  10: [4] -> [4] : z'=z+y, (-z+x >= 0 /\ y > 0), cost: 1

	Eliminating location [2] by chaining:

	Applied chaining

	First rule:
	[1] -> [2] : x'=nondet, T, cost: 1
	Second rule:
	[2] -> [3] : y'=nondet1, T, cost: 1
	New rule:
	[1] -> [3] : x'=nondet, y'=nondet1, T, cost: 1
	
	Applied deletion

	Removed the following rules: 0 1
	
	Eliminating location [3] by chaining:

	Applied chaining

	First rule:
	[1] -> [3] : x'=nondet, y'=nondet1, T, cost: 1
	Second rule:
	[3] -> [4] : z'=nondet2, T, cost: 1
	New rule:
	[1] -> [4] : x'=nondet, y'=nondet1, z'=nondet2, T, cost: 1
	
	Applied deletion

	Removed the following rules: 2 7
	
	Eliminating location [5] by chaining:

	Applied chaining

	First rule:
	[4] -> [5] : (-z+x >= 0 /\ y > 0), cost: 1
	Second rule:
	[5] -> [6] : z'=z+y, T, cost: 1
	New rule:
	[4] -> [6] : z'=z+y, (-z+x >= 0 /\ y > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 3 4
	
	Eliminating location [6] by chaining:

	Applied chaining

	First rule:
	[4] -> [6] : z'=z+y, (-z+x >= 0 /\ y > 0), cost: 1
	Second rule:
	[6] -> [4] : T, cost: 1
	New rule:
	[4] -> [4] : z'=z+y, (-z+x >= 0 /\ y > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 5 9

Step with 8

	Trace

	8[T]
	
	Blocked

	[{}, {}]

Step with 6

	Trace

	8[T], 6[(-z+x < 0)]
	
	Blocked

	[{}, {}, {}]

Backtrack

	Trace

	8[T]
	
	Blocked

	[{}, {6[-z+x < 0]}]

Step with 6

	Trace

	8[T], 6[(y <= 0)]
	
	Blocked

	[{}, {6[-z+x < 0]}, {}]

Backtrack

	Trace

	8[T]
	
	Blocked

	[{}, {6[(-z+x < 0 /\ y <= 0)]}]

Step with 10

	Trace

	8[T], 10[(-z+x >= 0 /\ y > 0)]
	
	Blocked

	[{}, {6[T]}, {}]

Accelerate

Start location: [1]
Program variables: x y z
   8: [1] -> [4] : x'=nondet, y'=nondet1, z'=nondet2, T, cost: 1
   6: [4] -> [7] : (-z+x < 0 \/ y <= 0), cost: 1
  10: [4] -> [4] : z'=z+y, (-z+x >= 0 /\ y > 0), cost: 1
  11: [4] -> [4] : z'=n*y+z, (-1+n >= 0 /\ -(-1+n)*y-z+x >= 0 /\ y > 0), cost: 1

	Loop Acceleration

	Original rule:
	[4] -> [4] : z'=z+y, (-z+x >= 0 /\ y > 0), cost: 1
	New rule:
	[4] -> [4] : z'=n*y+z, (-1+n >= 0 /\ -(-1+n)*y-z+x >= 0 /\ y > 0), cost: 1

		-z+x >= 0 [0]: montonic decrease yields -(-1+n)*y-z+x >= 0, dependencies: y > 0
		
		-z+x >= 0 [1]: eventual decrease yields (-(-1+n)*y-z+x >= 0 /\ -z+x >= 0), dependencies: y > 0
		
		-z+x >= 0 [2]: eventual increase yields (-z+x >= 0 /\ y <= 0), dependencies: y > 0
		
		y > 0 [0]: monotonic increase yields y > 0
		
		Replacement map: {-z+x >= 0 -> -(-1+n)*y-z+x >= 0, y > 0 -> y > 0}

	Trace

	8[T], 11[(-1+n >= 0 /\ -(-1+n)*y-z+x >= 0 /\ y > 0)]
	
	Blocked

	[{}, {6[T]}, {10[T], 11[T]}]

Step with 6

	Trace

	8[T], 11[(-1+n >= 0 /\ -(-1+n)*y-z+x >= 0 /\ y > 0)], 6[(-z+x < 0)]
	
	Blocked

	[{}, {6[T]}, {10[T], 11[T]}, {}]

Backtrack

	Trace

	8[T], 11[(-1+n >= 0 /\ -(-1+n)*y-z+x >= 0 /\ y > 0)]
	
	Blocked

	[{}, {6[T]}, {6[-z+x < 0], 10[T], 11[T]}]

Backtrack

	Trace

	8[T]
	
	Blocked

	[{}, {6[T], 11[T]}]

Step with 10

	Trace

	8[T], 10[(-z+x >= 0 /\ y > 0)]
	
	Blocked

	[{}, {6[T], 11[T]}, {}]

Covered

	Trace

	8[T]
	
	Blocked

	[{}, {6[T], 10[T], 11[T]}]

Backtrack

	Trace

	Blocked

	[{8[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
