NO

Initial ITS

Start location: __init
Program variables: arg1 arg2
   0: f1_0_main_Load -> f1_0_main_Load\' : arg1'=arg1p1, arg2'=arg2p1, (-arg2p1+arg2 == 0 /\ -1+x12-2*x13 == 0 /\ 1+x12 > 0 /\ -arg1p1+arg1 == 0 /\ 1+x11 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1
   2: f1_0_main_Load -> f1_0_main_Load\' : arg1'=arg1p3, arg2'=arg2p3, (1+x22 > 0 /\ x22-2*x23 == 0 /\ -arg2p3+arg2 == 0 /\ -arg1p3+arg1 == 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ 1+x21 > 0), cost: 1
   1: f1_0_main_Load\' -> f171_0_sum_EQ : arg1'=arg1p2, arg2'=arg2p2, (1+arg1p2 > 0 /\ -2*x18+x17 >= 0 /\ -2-2*x18+x17 < 0 /\ 1+x17 > 0 /\ -1-2*x18+x17 == 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1
   3: f1_0_main_Load\' -> f171_0_sum_EQ : arg1'=arg1p4, arg2'=arg2p4, (-2-2*x28+x27 < 0 /\ 1+x27 > 0 /\ -2*x28+x27 >= 0 /\ -2*x28+x27 == 0 /\ 1+x26 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ -arg1p4-x26 == 0), cost: 1
   4: f171_0_sum_EQ -> f171_0_sum_EQ : arg1'=arg1p5, arg2'=arg2p5, (arg1 < 0 /\ -1-arg1p5+arg1 == 0), cost: 1
   5: f171_0_sum_EQ -> f171_0_sum_EQ : arg1'=arg1p6, arg2'=arg2p6, (-1-arg1p6+arg1 == 0 /\ arg1 > 0), cost: 1
   6: __init -> f1_0_main_Load : arg1'=arg1p7, arg2'=arg2p7, T, cost: 1

Simplified Transitions

Start location: __init
Program variables: arg1 arg2
   7: f1_0_main_Load -> f1_0_main_Load\' : (arg1 > 0 /\ -1+arg2 > 0 /\ 2+2*x13 > 0), cost: 1
   9: f1_0_main_Load -> f1_0_main_Load\' : (1+2*x23 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1
   8: f1_0_main_Load\' -> f171_0_sum_EQ : arg1'=arg1p2, arg2'=arg2p2, (1+arg1p2 > 0 /\ arg1 > 0 /\ 2+2*x18 > 0 /\ -1+arg2 > 0), cost: 1
  10: f1_0_main_Load\' -> f171_0_sum_EQ : arg1'=-x26, arg2'=arg2p4, (1+2*x28 > 0 /\ 1+x26 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1
  11: f171_0_sum_EQ -> f171_0_sum_EQ : arg1'=-1+arg1, arg2'=arg2p5, arg1 < 0, cost: 1
  12: f171_0_sum_EQ -> f171_0_sum_EQ : arg1'=-1+arg1, arg2'=arg2p6, arg1 > 0, cost: 1
   6: __init -> f1_0_main_Load : arg1'=arg1p7, arg2'=arg2p7, T, cost: 1

	Propagated Equalities

	Original rule:
	f1_0_main_Load -> f1_0_main_Load\' : arg1'=arg1p1, arg2'=arg2p1, (-arg2p1+arg2 == 0 /\ -1+x12-2*x13 == 0 /\ 1+x12 > 0 /\ -arg1p1+arg1 == 0 /\ 1+x11 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f1_0_main_Load\' : arg1'=arg1, arg2'=arg2, (0 == 0 /\ -1+x12-2*x13 == 0 /\ 1+x12 > 0 /\ 1+x11 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1
	
		propagated equality arg2p1 = arg2
		
		propagated equality arg1p1 = arg1
		
	Propagated Equalities

	Original rule:
	f1_0_main_Load -> f1_0_main_Load\' : arg1'=arg1, arg2'=arg2, (0 == 0 /\ -1+x12-2*x13 == 0 /\ 1+x12 > 0 /\ 1+x11 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f1_0_main_Load\' : arg1'=arg1, arg2'=arg2, (0 == 0 /\ 1+x11 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ 2+2*x13 > 0), cost: 1
	
		propagated equality x12 = 1+2*x13
		
	Simplified Guard

	Original rule:
	f1_0_main_Load -> f1_0_main_Load\' : arg1'=arg1, arg2'=arg2, (0 == 0 /\ 1+x11 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ 2+2*x13 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f1_0_main_Load\' : arg1'=arg1, arg2'=arg2, (1+x11 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ 2+2*x13 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	f1_0_main_Load -> f1_0_main_Load\' : arg1'=arg1, arg2'=arg2, (1+x11 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ 2+2*x13 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f1_0_main_Load\' : arg1'=arg1, arg2'=arg2, (arg1 > 0 /\ -1+arg2 > 0 /\ 2+2*x13 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f1_0_main_Load -> f1_0_main_Load\' : arg1'=arg1, arg2'=arg2, (arg1 > 0 /\ -1+arg2 > 0 /\ 2+2*x13 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f1_0_main_Load\' : (arg1 > 0 /\ -1+arg2 > 0 /\ 2+2*x13 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f1_0_main_Load\' -> f171_0_sum_EQ : arg1'=arg1p2, arg2'=arg2p2, (1+arg1p2 > 0 /\ -2*x18+x17 >= 0 /\ -2-2*x18+x17 < 0 /\ 1+x17 > 0 /\ -1-2*x18+x17 == 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1
	New rule:
	f1_0_main_Load\' -> f171_0_sum_EQ : arg1'=arg1p2, arg2'=arg2p2, (0 == 0 /\ 1+arg1p2 > 0 /\ 1 >= 0 /\ -1 < 0 /\ arg1 > 0 /\ 2+2*x18 > 0 /\ -1+arg2 > 0), cost: 1
	
		propagated equality x17 = 1+2*x18
		
	Simplified Guard

	Original rule:
	f1_0_main_Load\' -> f171_0_sum_EQ : arg1'=arg1p2, arg2'=arg2p2, (0 == 0 /\ 1+arg1p2 > 0 /\ 1 >= 0 /\ -1 < 0 /\ arg1 > 0 /\ 2+2*x18 > 0 /\ -1+arg2 > 0), cost: 1
	New rule:
	f1_0_main_Load\' -> f171_0_sum_EQ : arg1'=arg1p2, arg2'=arg2p2, (1+arg1p2 > 0 /\ arg1 > 0 /\ 2+2*x18 > 0 /\ -1+arg2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f1_0_main_Load -> f1_0_main_Load\' : arg1'=arg1p3, arg2'=arg2p3, (1+x22 > 0 /\ x22-2*x23 == 0 /\ -arg2p3+arg2 == 0 /\ -arg1p3+arg1 == 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ 1+x21 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f1_0_main_Load\' : arg1'=arg1, arg2'=arg2, (0 == 0 /\ 1+x22 > 0 /\ x22-2*x23 == 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ 1+x21 > 0), cost: 1
	
		propagated equality arg2p3 = arg2
		
		propagated equality arg1p3 = arg1
		
	Propagated Equalities

	Original rule:
	f1_0_main_Load -> f1_0_main_Load\' : arg1'=arg1, arg2'=arg2, (0 == 0 /\ 1+x22 > 0 /\ x22-2*x23 == 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ 1+x21 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f1_0_main_Load\' : arg1'=arg1, arg2'=arg2, (0 == 0 /\ 1+2*x23 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ 1+x21 > 0), cost: 1
	
		propagated equality x22 = 2*x23
		
	Simplified Guard

	Original rule:
	f1_0_main_Load -> f1_0_main_Load\' : arg1'=arg1, arg2'=arg2, (0 == 0 /\ 1+2*x23 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ 1+x21 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f1_0_main_Load\' : arg1'=arg1, arg2'=arg2, (1+2*x23 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ 1+x21 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	f1_0_main_Load -> f1_0_main_Load\' : arg1'=arg1, arg2'=arg2, (1+2*x23 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ 1+x21 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f1_0_main_Load\' : arg1'=arg1, arg2'=arg2, (1+2*x23 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f1_0_main_Load -> f1_0_main_Load\' : arg1'=arg1, arg2'=arg2, (1+2*x23 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f1_0_main_Load\' : (1+2*x23 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f1_0_main_Load\' -> f171_0_sum_EQ : arg1'=arg1p4, arg2'=arg2p4, (-2-2*x28+x27 < 0 /\ 1+x27 > 0 /\ -2*x28+x27 >= 0 /\ -2*x28+x27 == 0 /\ 1+x26 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ -arg1p4-x26 == 0), cost: 1
	New rule:
	f1_0_main_Load\' -> f171_0_sum_EQ : arg1'=-x26, arg2'=arg2p4, (0 == 0 /\ -2-2*x28+x27 < 0 /\ 1+x27 > 0 /\ -2*x28+x27 >= 0 /\ -2*x28+x27 == 0 /\ 1+x26 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1
	
		propagated equality arg1p4 = -x26
		
	Propagated Equalities

	Original rule:
	f1_0_main_Load\' -> f171_0_sum_EQ : arg1'=-x26, arg2'=arg2p4, (0 == 0 /\ -2-2*x28+x27 < 0 /\ 1+x27 > 0 /\ -2*x28+x27 >= 0 /\ -2*x28+x27 == 0 /\ 1+x26 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1
	New rule:
	f1_0_main_Load\' -> f171_0_sum_EQ : arg1'=-x26, arg2'=arg2p4, (0 >= 0 /\ 0 == 0 /\ -2 < 0 /\ 1+2*x28 > 0 /\ 1+x26 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1
	
		propagated equality x27 = 2*x28
		
	Simplified Guard

	Original rule:
	f1_0_main_Load\' -> f171_0_sum_EQ : arg1'=-x26, arg2'=arg2p4, (0 >= 0 /\ 0 == 0 /\ -2 < 0 /\ 1+2*x28 > 0 /\ 1+x26 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1
	New rule:
	f1_0_main_Load\' -> f171_0_sum_EQ : arg1'=-x26, arg2'=arg2p4, (1+2*x28 > 0 /\ 1+x26 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f171_0_sum_EQ -> f171_0_sum_EQ : arg1'=arg1p5, arg2'=arg2p5, (arg1 < 0 /\ -1-arg1p5+arg1 == 0), cost: 1
	New rule:
	f171_0_sum_EQ -> f171_0_sum_EQ : arg1'=-1+arg1, arg2'=arg2p5, (0 == 0 /\ arg1 < 0), cost: 1
	
		propagated equality arg1p5 = -1+arg1
		
	Simplified Guard

	Original rule:
	f171_0_sum_EQ -> f171_0_sum_EQ : arg1'=-1+arg1, arg2'=arg2p5, (0 == 0 /\ arg1 < 0), cost: 1
	New rule:
	f171_0_sum_EQ -> f171_0_sum_EQ : arg1'=-1+arg1, arg2'=arg2p5, arg1 < 0, cost: 1
	
	Propagated Equalities

	Original rule:
	f171_0_sum_EQ -> f171_0_sum_EQ : arg1'=arg1p6, arg2'=arg2p6, (-1-arg1p6+arg1 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f171_0_sum_EQ -> f171_0_sum_EQ : arg1'=-1+arg1, arg2'=arg2p6, (0 == 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg1p6 = -1+arg1
		
	Simplified Guard

	Original rule:
	f171_0_sum_EQ -> f171_0_sum_EQ : arg1'=-1+arg1, arg2'=arg2p6, (0 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f171_0_sum_EQ -> f171_0_sum_EQ : arg1'=-1+arg1, arg2'=arg2p6, arg1 > 0, cost: 1

Step with 6

	Trace

	6[T]
	
	Blocked

	[{}, {}]

Step with 7

	Trace

	6[T], 7[(arg1 > 0 /\ -1+arg2 > 0 /\ 2+2*x13 > 0)]
	
	Blocked

	[{}, {}, {}]

Step with 8

	Trace

	6[T], 7[(arg1 > 0 /\ -1+arg2 > 0 /\ 2+2*x13 > 0)], 8[(1+arg1p2 > 0 /\ arg1 > 0 /\ 2+2*x18 > 0 /\ -1+arg2 > 0)]
	
	Blocked

	[{}, {}, {}, {}]

Step with 12

	Trace

	6[T], 7[(arg1 > 0 /\ -1+arg2 > 0 /\ 2+2*x13 > 0)], 8[(1+arg1p2 > 0 /\ arg1 > 0 /\ 2+2*x18 > 0 /\ -1+arg2 > 0)], 12[(arg1 > 0)]
	
	Blocked

	[{}, {}, {}, {11[T]}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2
   7: f1_0_main_Load -> f1_0_main_Load\' : (arg1 > 0 /\ -1+arg2 > 0 /\ 2+2*x13 > 0), cost: 1
   9: f1_0_main_Load -> f1_0_main_Load\' : (1+2*x23 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1
   8: f1_0_main_Load\' -> f171_0_sum_EQ : arg1'=arg1p2, arg2'=arg2p2, (1+arg1p2 > 0 /\ arg1 > 0 /\ 2+2*x18 > 0 /\ -1+arg2 > 0), cost: 1
  10: f1_0_main_Load\' -> f171_0_sum_EQ : arg1'=-x26, arg2'=arg2p4, (1+2*x28 > 0 /\ 1+x26 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1
  11: f171_0_sum_EQ -> f171_0_sum_EQ : arg1'=-1+arg1, arg2'=arg2p5, arg1 < 0, cost: 1
  12: f171_0_sum_EQ -> f171_0_sum_EQ : arg1'=-1+arg1, arg2'=arg2p6, arg1 > 0, cost: 1
  13: f171_0_sum_EQ -> f171_0_sum_EQ : arg1'=-n+arg1, arg2'=arg2p6, (-1+n >= 0 /\ 1-n+arg1 > 0), cost: 1
   6: __init -> f1_0_main_Load : arg1'=arg1p7, arg2'=arg2p7, T, cost: 1

	Loop Acceleration

	Original rule:
	f171_0_sum_EQ -> f171_0_sum_EQ : arg1'=-1+arg1, arg2'=arg2p6, (arg1 > 0), cost: 1
	New rule:
	f171_0_sum_EQ -> f171_0_sum_EQ : arg1'=-n+arg1, arg2'=arg2p6, (-1+n >= 0 /\ 1-n+arg1 > 0), cost: 1

		arg1 > 0 [0]: montonic decrease yields 1-n+arg1 > 0
		
		arg1 > 0 [1]: eventual increase yields (1 <= 0 /\ arg1 > 0)
		
		Replacement map: {arg1 > 0 -> 1-n+arg1 > 0}

	Trace

	6[T], 7[(arg1 > 0 /\ -1+arg2 > 0 /\ 2+2*x13 > 0)], 8[(1+arg1p2 > 0 /\ arg1 > 0 /\ 2+2*x18 > 0 /\ -1+arg2 > 0)], 13[(-1+n >= 0 /\ 1-n+arg1 > 0)]
	
	Blocked

	[{}, {}, {}, {11[T]}, {12[T], 13[T]}]

Backtrack

	Trace

	6[T], 7[(arg1 > 0 /\ -1+arg2 > 0 /\ 2+2*x13 > 0)], 8[(1+arg1p2 > 0 /\ arg1 > 0 /\ 2+2*x18 > 0 /\ -1+arg2 > 0)]
	
	Blocked

	[{}, {}, {}, {11[T], 13[T]}]

Step with 12

	Trace

	6[T], 7[(arg1 > 0 /\ -1+arg2 > 0 /\ 2+2*x13 > 0)], 8[(1+arg1p2 > 0 /\ arg1 > 0 /\ 2+2*x18 > 0 /\ -1+arg2 > 0)], 12[(arg1 > 0)]
	
	Blocked

	[{}, {}, {}, {11[T], 13[T]}, {}]

Covered

	Trace

	6[T], 7[(arg1 > 0 /\ -1+arg2 > 0 /\ 2+2*x13 > 0)], 8[(1+arg1p2 > 0 /\ arg1 > 0 /\ 2+2*x18 > 0 /\ -1+arg2 > 0)]
	
	Blocked

	[{}, {}, {}, {11[T], 12[T], 13[T]}]

Backtrack

	Trace

	6[T], 7[(arg1 > 0 /\ -1+arg2 > 0 /\ 2+2*x13 > 0)]
	
	Blocked

	[{}, {}, {8[T]}]

Step with 10

	Trace

	6[T], 7[(arg1 > 0 /\ -1+arg2 > 0 /\ 2+2*x13 > 0)], 10[(1+2*x28 > 0 /\ 1+x26 > 0 /\ arg1 > 0 /\ -1+arg2 > 0)]
	
	Blocked

	[{}, {}, {8[T]}, {}]

Step with 11

	Trace

	6[T], 7[(arg1 > 0 /\ -1+arg2 > 0 /\ 2+2*x13 > 0)], 10[(1+2*x28 > 0 /\ 1+x26 > 0 /\ arg1 > 0 /\ -1+arg2 > 0)], 11[(arg1 < 0)]
	
	Blocked

	[{}, {}, {8[T]}, {12[T], 13[T]}, {}]

Nonterm

Start location: __init
Program variables: arg1 arg2
   7: f1_0_main_Load -> f1_0_main_Load\' : (arg1 > 0 /\ -1+arg2 > 0 /\ 2+2*x13 > 0), cost: 1
   9: f1_0_main_Load -> f1_0_main_Load\' : (1+2*x23 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1
   8: f1_0_main_Load\' -> f171_0_sum_EQ : arg1'=arg1p2, arg2'=arg2p2, (1+arg1p2 > 0 /\ arg1 > 0 /\ 2+2*x18 > 0 /\ -1+arg2 > 0), cost: 1
  10: f1_0_main_Load\' -> f171_0_sum_EQ : arg1'=-x26, arg2'=arg2p4, (1+2*x28 > 0 /\ 1+x26 > 0 /\ arg1 > 0 /\ -1+arg2 > 0), cost: 1
  11: f171_0_sum_EQ -> f171_0_sum_EQ : arg1'=-1+arg1, arg2'=arg2p5, arg1 < 0, cost: 1
  12: f171_0_sum_EQ -> f171_0_sum_EQ : arg1'=-1+arg1, arg2'=arg2p6, arg1 > 0, cost: 1
  13: f171_0_sum_EQ -> f171_0_sum_EQ : arg1'=-n+arg1, arg2'=arg2p6, (-1+n >= 0 /\ 1-n+arg1 > 0), cost: 1
  14: f171_0_sum_EQ -> LoAT_sink : (-1+n2 >= 0 /\ -arg1 > 0), cost: NONTERM
  15: f171_0_sum_EQ -> f171_0_sum_EQ : arg1'=-n2+arg1, arg2'=arg2p5, (-1+n2 >= 0 /\ -arg1 > 0), cost: 1
   6: __init -> f1_0_main_Load : arg1'=arg1p7, arg2'=arg2p7, T, cost: 1

	Certificate of Non-Termination

	Original rule:
	f171_0_sum_EQ -> f171_0_sum_EQ : arg1'=-1+arg1, arg2'=arg2p5, (arg1 < 0), cost: 1
	New rule:
	f171_0_sum_EQ -> LoAT_sink : (-1+n2 >= 0 /\ -arg1 > 0), cost: NONTERM

		-arg1 > 0 [0]: monotonic increase yields -arg1 > 0
		
		Replacement map: {-arg1 > 0 -> -arg1 > 0}

	Loop Acceleration

	Original rule:
	f171_0_sum_EQ -> f171_0_sum_EQ : arg1'=-1+arg1, arg2'=arg2p5, (arg1 < 0), cost: 1
	New rule:
	f171_0_sum_EQ -> f171_0_sum_EQ : arg1'=-n2+arg1, arg2'=arg2p5, (-1+n2 >= 0 /\ -arg1 > 0), cost: 1

		-arg1 > 0 [0]: monotonic increase yields -arg1 > 0
		
		Replacement map: {-arg1 > 0 -> -arg1 > 0}

Step with 14

	Trace

	6[T], 7[(arg1 > 0 /\ -1+arg2 > 0 /\ 2+2*x13 > 0)], 10[(1+2*x28 > 0 /\ 1+x26 > 0 /\ arg1 > 0 /\ -1+arg2 > 0)], 14[(-1+n2 >= 0 /\ -arg1 > 0)]
	
	Blocked

	[{}, {}, {8[T]}, {12[T], 13[T]}, {14[T]}]

Refute

	Counterexample

	[ arg1=1 arg2=2 ] 6 [ arg1=1 arg2=2 ] 7 [ arg1=-1 arg2=0 ] 10 [ arg1=arg1 arg2=arg2 ] 14
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
