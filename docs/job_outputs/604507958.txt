NO

Initial ITS

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5
   0: f1_0_main_New -> f155_0_main_ArrayAccess : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, arg5'=arg5p1, (-2+arg1p1 > 0 /\ arg1 > 0 /\ 1+x4 > 0 /\ -arg3p1+arg2 == 0 /\ arg2p1 > 0 /\ -arg1+arg2p1 <= 0 /\ arg2 > 0), cost: 1
   1: f1_0_main_New -> f155_0_main_ArrayAccess : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, arg4'=arg4p2, arg5'=arg5p2, (-1+arg1p2 > 0 /\ arg2p2-arg1 <= 0 /\ -arg3p2+arg2 == 0 /\ arg2p2 > 0 /\ arg1 > 0 /\ -1+arg1p2-arg1 <= 0 /\ arg2 > 0), cost: 1
   4: f1_0_main_New -> f69_0__init__GT : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, arg4'=arg4p5, arg5'=arg5p5, (1+arg1p5 > 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
   2: f155_0_main_ArrayAccess -> f204_0_main_InvokeMethod : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, arg4'=arg4p3, arg5'=arg5p3, (-1+arg3 > 0 /\ -arg4p3+arg3 == 0 /\ -arg1p3+arg1 >= 0 /\ -1+arg3p3 > 0 /\ -2+arg1-arg5p3 >= 0 /\ -1+arg3p3-arg2 <= 0 /\ arg1p3 > 0 /\ arg1 > 0 /\ arg1p3-arg2 <= 0 /\ arg1-arg2p3 >= 0 /\ 1-arg3p3+arg1 >= 0 /\ arg2p3 > 0 /\ arg2 > 0), cost: 1
   3: f155_0_main_ArrayAccess -> f204_0_main_InvokeMethod : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, arg4'=arg4p4, arg5'=arg5p4, (-1+arg3 > 0 /\ -arg1+arg2p4 <= 0 /\ 2+arg5p4-arg1 <= 0 /\ -2+arg3p4 > 0 /\ -arg4p4+arg3 == 0 /\ arg1p4-arg2 <= 0 /\ arg1p4 > 0 /\ 1+x23 > 0 /\ arg1 > 0 /\ arg2p4 > 0 /\ arg1p4-arg1 <= 0 /\ arg2 > 0), cost: 1
   5: f155_0_main_ArrayAccess -> f69_0__init__GT : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, arg4'=arg4p6, arg5'=arg5p6, (-1+arg3 > 0 /\ 1+arg1p6 > 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
   7: f204_0_main_InvokeMethod -> f292_0_isZero_NONNULL : arg1'=arg1p8, arg2'=arg2p8, arg3'=arg3p8, arg4'=arg4p8, arg5'=arg5p8, (arg3p8 > 0 /\ 1-arg3+arg4p8 <= 0 /\ -1+arg4 > 0 /\ arg3p8-arg3 <= 0 /\ arg3 > 0 /\ arg1 > 0 /\ arg1p8 > 0 /\ 1+arg4p8 > 0 /\ -arg3+arg2p8 <= 0 /\ arg1p8-arg2 <= 0 /\ arg2p8 > 0 /\ arg2 > 0 /\ 2+arg5-arg2 <= 0), cost: 1
   6: f69_0__init__GT -> f69_0__init__GT : arg1'=arg1p7, arg2'=arg2p7, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, (-1+arg1-arg1p7 == 0 /\ arg1 > 0 /\ -1 < 0), cost: 1
   8: f292_0_isZero_NONNULL -> f292_0_isZero_NONNULL : arg1'=arg1p9, arg2'=arg2p9, arg3'=arg3p9, arg4'=arg4p9, arg5'=arg5p9, (-2+arg2p9 > 0 /\ arg4p9 > 0 /\ -2-arg4+arg3p9 <= 0 /\ arg4 > 0 /\ arg1p9 > 0 /\ 2+arg4p9-arg3 <= 0 /\ -2-arg4+arg2p9 <= 0 /\ -2+arg3p9 > 0 /\ arg4p9-arg4 <= 0 /\ arg2p9-arg3 <= 0 /\ arg1 > 0 /\ -arg3+arg3p9 <= 0 /\ -2+arg3 > 0 /\ arg1p9-arg1 <= 0 /\ -1+arg2 > 0), cost: 1
   9: f292_0_isZero_NONNULL -> f292_0_isZero_NONNULL : arg1'=arg1p10, arg2'=arg2p10, arg3'=arg3p10, arg4'=arg4p10, arg5'=arg5p10, (arg2p10 > 0 /\ -2+arg2 > 0 /\ arg3p10-arg3 <= 0 /\ arg4 > 0 /\ -2-arg4+arg3p10 <= 0 /\ 2-arg1+arg1p10 <= 0 /\ -2+arg3p10 > 0 /\ -arg4+arg4p10 <= 0 /\ arg1p10 > 0 /\ 2-arg3+arg4p10 <= 0 /\ -2+arg1 > 0 /\ -2+arg3 > 0 /\ arg4p10 > 0 /\ 2+arg2p10-arg2 <= 0), cost: 1
  10: __init -> f1_0_main_New : arg1'=arg1p11, arg2'=arg2p11, arg3'=arg3p11, arg4'=arg4p11, arg5'=arg5p11, T, cost: 1

Simplified Transitions

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5
   4: f1_0_main_New -> f69_0__init__GT : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, arg4'=arg4p5, arg5'=arg5p5, (1+arg1p5 > 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
  11: f1_0_main_New -> f155_0_main_ArrayAccess : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg2, arg4'=arg4p1, arg5'=arg5p1, (-2+arg1p1 > 0 /\ arg1 > 0 /\ arg2p1 > 0 /\ -arg1+arg2p1 <= 0 /\ arg2 > 0), cost: 1
  12: f1_0_main_New -> f155_0_main_ArrayAccess : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg2, arg4'=arg4p2, arg5'=arg5p2, (-1+arg1p2 > 0 /\ arg2p2-arg1 <= 0 /\ arg2p2 > 0 /\ arg1 > 0 /\ -1+arg1p2-arg1 <= 0 /\ arg2 > 0), cost: 1
   5: f155_0_main_ArrayAccess -> f69_0__init__GT : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, arg4'=arg4p6, arg5'=arg5p6, (-1+arg3 > 0 /\ 1+arg1p6 > 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
  13: f155_0_main_ArrayAccess -> f204_0_main_InvokeMethod : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, arg4'=arg3, arg5'=arg5p3, (-1+arg3 > 0 /\ -arg1p3+arg1 >= 0 /\ -1+arg3p3 > 0 /\ -2+arg1-arg5p3 >= 0 /\ -1+arg3p3-arg2 <= 0 /\ arg1p3 > 0 /\ arg1 > 0 /\ arg1p3-arg2 <= 0 /\ arg1-arg2p3 >= 0 /\ 1-arg3p3+arg1 >= 0 /\ arg2p3 > 0 /\ arg2 > 0), cost: 1
  14: f155_0_main_ArrayAccess -> f204_0_main_InvokeMethod : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, arg4'=arg3, arg5'=arg5p4, (-1+arg3 > 0 /\ -arg1+arg2p4 <= 0 /\ 2+arg5p4-arg1 <= 0 /\ -2+arg3p4 > 0 /\ arg1p4-arg2 <= 0 /\ arg1p4 > 0 /\ arg1 > 0 /\ arg2p4 > 0 /\ arg1p4-arg1 <= 0 /\ arg2 > 0), cost: 1
   7: f204_0_main_InvokeMethod -> f292_0_isZero_NONNULL : arg1'=arg1p8, arg2'=arg2p8, arg3'=arg3p8, arg4'=arg4p8, arg5'=arg5p8, (arg3p8 > 0 /\ 1-arg3+arg4p8 <= 0 /\ -1+arg4 > 0 /\ arg3p8-arg3 <= 0 /\ arg3 > 0 /\ arg1 > 0 /\ arg1p8 > 0 /\ 1+arg4p8 > 0 /\ -arg3+arg2p8 <= 0 /\ arg1p8-arg2 <= 0 /\ arg2p8 > 0 /\ arg2 > 0 /\ 2+arg5-arg2 <= 0), cost: 1
  15: f69_0__init__GT -> f69_0__init__GT : arg1'=-1+arg1, arg2'=arg2p7, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, arg1 > 0, cost: 1
   8: f292_0_isZero_NONNULL -> f292_0_isZero_NONNULL : arg1'=arg1p9, arg2'=arg2p9, arg3'=arg3p9, arg4'=arg4p9, arg5'=arg5p9, (-2+arg2p9 > 0 /\ arg4p9 > 0 /\ -2-arg4+arg3p9 <= 0 /\ arg4 > 0 /\ arg1p9 > 0 /\ 2+arg4p9-arg3 <= 0 /\ -2-arg4+arg2p9 <= 0 /\ -2+arg3p9 > 0 /\ arg4p9-arg4 <= 0 /\ arg2p9-arg3 <= 0 /\ arg1 > 0 /\ -arg3+arg3p9 <= 0 /\ -2+arg3 > 0 /\ arg1p9-arg1 <= 0 /\ -1+arg2 > 0), cost: 1
   9: f292_0_isZero_NONNULL -> f292_0_isZero_NONNULL : arg1'=arg1p10, arg2'=arg2p10, arg3'=arg3p10, arg4'=arg4p10, arg5'=arg5p10, (arg2p10 > 0 /\ -2+arg2 > 0 /\ arg3p10-arg3 <= 0 /\ arg4 > 0 /\ -2-arg4+arg3p10 <= 0 /\ 2-arg1+arg1p10 <= 0 /\ -2+arg3p10 > 0 /\ -arg4+arg4p10 <= 0 /\ arg1p10 > 0 /\ 2-arg3+arg4p10 <= 0 /\ -2+arg1 > 0 /\ -2+arg3 > 0 /\ arg4p10 > 0 /\ 2+arg2p10-arg2 <= 0), cost: 1
  10: __init -> f1_0_main_New : arg1'=arg1p11, arg2'=arg2p11, arg3'=arg3p11, arg4'=arg4p11, arg5'=arg5p11, T, cost: 1

	Propagated Equalities

	Original rule:
	f1_0_main_New -> f155_0_main_ArrayAccess : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, arg5'=arg5p1, (-2+arg1p1 > 0 /\ arg1 > 0 /\ 1+x4 > 0 /\ -arg3p1+arg2 == 0 /\ arg2p1 > 0 /\ -arg1+arg2p1 <= 0 /\ arg2 > 0), cost: 1
	New rule:
	f1_0_main_New -> f155_0_main_ArrayAccess : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg2, arg4'=arg4p1, arg5'=arg5p1, (0 == 0 /\ -2+arg1p1 > 0 /\ arg1 > 0 /\ 1+x4 > 0 /\ arg2p1 > 0 /\ -arg1+arg2p1 <= 0 /\ arg2 > 0), cost: 1
	
		propagated equality arg3p1 = arg2
		
	Simplified Guard

	Original rule:
	f1_0_main_New -> f155_0_main_ArrayAccess : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg2, arg4'=arg4p1, arg5'=arg5p1, (0 == 0 /\ -2+arg1p1 > 0 /\ arg1 > 0 /\ 1+x4 > 0 /\ arg2p1 > 0 /\ -arg1+arg2p1 <= 0 /\ arg2 > 0), cost: 1
	New rule:
	f1_0_main_New -> f155_0_main_ArrayAccess : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg2, arg4'=arg4p1, arg5'=arg5p1, (-2+arg1p1 > 0 /\ arg1 > 0 /\ 1+x4 > 0 /\ arg2p1 > 0 /\ -arg1+arg2p1 <= 0 /\ arg2 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	f1_0_main_New -> f155_0_main_ArrayAccess : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg2, arg4'=arg4p1, arg5'=arg5p1, (-2+arg1p1 > 0 /\ arg1 > 0 /\ 1+x4 > 0 /\ arg2p1 > 0 /\ -arg1+arg2p1 <= 0 /\ arg2 > 0), cost: 1
	New rule:
	f1_0_main_New -> f155_0_main_ArrayAccess : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg2, arg4'=arg4p1, arg5'=arg5p1, (-2+arg1p1 > 0 /\ arg1 > 0 /\ arg2p1 > 0 /\ -arg1+arg2p1 <= 0 /\ arg2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f1_0_main_New -> f155_0_main_ArrayAccess : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, arg4'=arg4p2, arg5'=arg5p2, (-1+arg1p2 > 0 /\ arg2p2-arg1 <= 0 /\ -arg3p2+arg2 == 0 /\ arg2p2 > 0 /\ arg1 > 0 /\ -1+arg1p2-arg1 <= 0 /\ arg2 > 0), cost: 1
	New rule:
	f1_0_main_New -> f155_0_main_ArrayAccess : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg2, arg4'=arg4p2, arg5'=arg5p2, (0 == 0 /\ -1+arg1p2 > 0 /\ arg2p2-arg1 <= 0 /\ arg2p2 > 0 /\ arg1 > 0 /\ -1+arg1p2-arg1 <= 0 /\ arg2 > 0), cost: 1
	
		propagated equality arg3p2 = arg2
		
	Simplified Guard

	Original rule:
	f1_0_main_New -> f155_0_main_ArrayAccess : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg2, arg4'=arg4p2, arg5'=arg5p2, (0 == 0 /\ -1+arg1p2 > 0 /\ arg2p2-arg1 <= 0 /\ arg2p2 > 0 /\ arg1 > 0 /\ -1+arg1p2-arg1 <= 0 /\ arg2 > 0), cost: 1
	New rule:
	f1_0_main_New -> f155_0_main_ArrayAccess : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg2, arg4'=arg4p2, arg5'=arg5p2, (-1+arg1p2 > 0 /\ arg2p2-arg1 <= 0 /\ arg2p2 > 0 /\ arg1 > 0 /\ -1+arg1p2-arg1 <= 0 /\ arg2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f155_0_main_ArrayAccess -> f204_0_main_InvokeMethod : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, arg4'=arg4p3, arg5'=arg5p3, (-1+arg3 > 0 /\ -arg4p3+arg3 == 0 /\ -arg1p3+arg1 >= 0 /\ -1+arg3p3 > 0 /\ -2+arg1-arg5p3 >= 0 /\ -1+arg3p3-arg2 <= 0 /\ arg1p3 > 0 /\ arg1 > 0 /\ arg1p3-arg2 <= 0 /\ arg1-arg2p3 >= 0 /\ 1-arg3p3+arg1 >= 0 /\ arg2p3 > 0 /\ arg2 > 0), cost: 1
	New rule:
	f155_0_main_ArrayAccess -> f204_0_main_InvokeMethod : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, arg4'=arg3, arg5'=arg5p3, (0 == 0 /\ -1+arg3 > 0 /\ -arg1p3+arg1 >= 0 /\ -1+arg3p3 > 0 /\ -2+arg1-arg5p3 >= 0 /\ -1+arg3p3-arg2 <= 0 /\ arg1p3 > 0 /\ arg1 > 0 /\ arg1p3-arg2 <= 0 /\ arg1-arg2p3 >= 0 /\ 1-arg3p3+arg1 >= 0 /\ arg2p3 > 0 /\ arg2 > 0), cost: 1
	
		propagated equality arg4p3 = arg3
		
	Simplified Guard

	Original rule:
	f155_0_main_ArrayAccess -> f204_0_main_InvokeMethod : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, arg4'=arg3, arg5'=arg5p3, (0 == 0 /\ -1+arg3 > 0 /\ -arg1p3+arg1 >= 0 /\ -1+arg3p3 > 0 /\ -2+arg1-arg5p3 >= 0 /\ -1+arg3p3-arg2 <= 0 /\ arg1p3 > 0 /\ arg1 > 0 /\ arg1p3-arg2 <= 0 /\ arg1-arg2p3 >= 0 /\ 1-arg3p3+arg1 >= 0 /\ arg2p3 > 0 /\ arg2 > 0), cost: 1
	New rule:
	f155_0_main_ArrayAccess -> f204_0_main_InvokeMethod : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, arg4'=arg3, arg5'=arg5p3, (-1+arg3 > 0 /\ -arg1p3+arg1 >= 0 /\ -1+arg3p3 > 0 /\ -2+arg1-arg5p3 >= 0 /\ -1+arg3p3-arg2 <= 0 /\ arg1p3 > 0 /\ arg1 > 0 /\ arg1p3-arg2 <= 0 /\ arg1-arg2p3 >= 0 /\ 1-arg3p3+arg1 >= 0 /\ arg2p3 > 0 /\ arg2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f155_0_main_ArrayAccess -> f204_0_main_InvokeMethod : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, arg4'=arg4p4, arg5'=arg5p4, (-1+arg3 > 0 /\ -arg1+arg2p4 <= 0 /\ 2+arg5p4-arg1 <= 0 /\ -2+arg3p4 > 0 /\ -arg4p4+arg3 == 0 /\ arg1p4-arg2 <= 0 /\ arg1p4 > 0 /\ 1+x23 > 0 /\ arg1 > 0 /\ arg2p4 > 0 /\ arg1p4-arg1 <= 0 /\ arg2 > 0), cost: 1
	New rule:
	f155_0_main_ArrayAccess -> f204_0_main_InvokeMethod : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, arg4'=arg3, arg5'=arg5p4, (0 == 0 /\ -1+arg3 > 0 /\ -arg1+arg2p4 <= 0 /\ 2+arg5p4-arg1 <= 0 /\ -2+arg3p4 > 0 /\ arg1p4-arg2 <= 0 /\ arg1p4 > 0 /\ 1+x23 > 0 /\ arg1 > 0 /\ arg2p4 > 0 /\ arg1p4-arg1 <= 0 /\ arg2 > 0), cost: 1
	
		propagated equality arg4p4 = arg3
		
	Simplified Guard

	Original rule:
	f155_0_main_ArrayAccess -> f204_0_main_InvokeMethod : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, arg4'=arg3, arg5'=arg5p4, (0 == 0 /\ -1+arg3 > 0 /\ -arg1+arg2p4 <= 0 /\ 2+arg5p4-arg1 <= 0 /\ -2+arg3p4 > 0 /\ arg1p4-arg2 <= 0 /\ arg1p4 > 0 /\ 1+x23 > 0 /\ arg1 > 0 /\ arg2p4 > 0 /\ arg1p4-arg1 <= 0 /\ arg2 > 0), cost: 1
	New rule:
	f155_0_main_ArrayAccess -> f204_0_main_InvokeMethod : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, arg4'=arg3, arg5'=arg5p4, (-1+arg3 > 0 /\ -arg1+arg2p4 <= 0 /\ 2+arg5p4-arg1 <= 0 /\ -2+arg3p4 > 0 /\ arg1p4-arg2 <= 0 /\ arg1p4 > 0 /\ 1+x23 > 0 /\ arg1 > 0 /\ arg2p4 > 0 /\ arg1p4-arg1 <= 0 /\ arg2 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	f155_0_main_ArrayAccess -> f204_0_main_InvokeMethod : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, arg4'=arg3, arg5'=arg5p4, (-1+arg3 > 0 /\ -arg1+arg2p4 <= 0 /\ 2+arg5p4-arg1 <= 0 /\ -2+arg3p4 > 0 /\ arg1p4-arg2 <= 0 /\ arg1p4 > 0 /\ 1+x23 > 0 /\ arg1 > 0 /\ arg2p4 > 0 /\ arg1p4-arg1 <= 0 /\ arg2 > 0), cost: 1
	New rule:
	f155_0_main_ArrayAccess -> f204_0_main_InvokeMethod : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, arg4'=arg3, arg5'=arg5p4, (-1+arg3 > 0 /\ -arg1+arg2p4 <= 0 /\ 2+arg5p4-arg1 <= 0 /\ -2+arg3p4 > 0 /\ arg1p4-arg2 <= 0 /\ arg1p4 > 0 /\ arg1 > 0 /\ arg2p4 > 0 /\ arg1p4-arg1 <= 0 /\ arg2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f69_0__init__GT -> f69_0__init__GT : arg1'=arg1p7, arg2'=arg2p7, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, (-1+arg1-arg1p7 == 0 /\ arg1 > 0 /\ -1 < 0), cost: 1
	New rule:
	f69_0__init__GT -> f69_0__init__GT : arg1'=-1+arg1, arg2'=arg2p7, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, (0 == 0 /\ arg1 > 0 /\ -1 < 0), cost: 1
	
		propagated equality arg1p7 = -1+arg1
		
	Simplified Guard

	Original rule:
	f69_0__init__GT -> f69_0__init__GT : arg1'=-1+arg1, arg2'=arg2p7, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, (0 == 0 /\ arg1 > 0 /\ -1 < 0), cost: 1
	New rule:
	f69_0__init__GT -> f69_0__init__GT : arg1'=-1+arg1, arg2'=arg2p7, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, arg1 > 0, cost: 1

Step with 10

	Trace

	10[T]
	
	Blocked

	[{}, {}]

Step with 4

	Trace

	10[T], 4[(1+arg1p5 > 0 /\ arg1 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {}]

Step with 15

	Trace

	10[T], 4[(1+arg1p5 > 0 /\ arg1 > 0 /\ arg2 > 0)], 15[(arg1 > 0)]
	
	Blocked

	[{}, {}, {}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5
   4: f1_0_main_New -> f69_0__init__GT : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, arg4'=arg4p5, arg5'=arg5p5, (1+arg1p5 > 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
  11: f1_0_main_New -> f155_0_main_ArrayAccess : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg2, arg4'=arg4p1, arg5'=arg5p1, (-2+arg1p1 > 0 /\ arg1 > 0 /\ arg2p1 > 0 /\ -arg1+arg2p1 <= 0 /\ arg2 > 0), cost: 1
  12: f1_0_main_New -> f155_0_main_ArrayAccess : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg2, arg4'=arg4p2, arg5'=arg5p2, (-1+arg1p2 > 0 /\ arg2p2-arg1 <= 0 /\ arg2p2 > 0 /\ arg1 > 0 /\ -1+arg1p2-arg1 <= 0 /\ arg2 > 0), cost: 1
   5: f155_0_main_ArrayAccess -> f69_0__init__GT : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, arg4'=arg4p6, arg5'=arg5p6, (-1+arg3 > 0 /\ 1+arg1p6 > 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
  13: f155_0_main_ArrayAccess -> f204_0_main_InvokeMethod : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, arg4'=arg3, arg5'=arg5p3, (-1+arg3 > 0 /\ -arg1p3+arg1 >= 0 /\ -1+arg3p3 > 0 /\ -2+arg1-arg5p3 >= 0 /\ -1+arg3p3-arg2 <= 0 /\ arg1p3 > 0 /\ arg1 > 0 /\ arg1p3-arg2 <= 0 /\ arg1-arg2p3 >= 0 /\ 1-arg3p3+arg1 >= 0 /\ arg2p3 > 0 /\ arg2 > 0), cost: 1
  14: f155_0_main_ArrayAccess -> f204_0_main_InvokeMethod : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, arg4'=arg3, arg5'=arg5p4, (-1+arg3 > 0 /\ -arg1+arg2p4 <= 0 /\ 2+arg5p4-arg1 <= 0 /\ -2+arg3p4 > 0 /\ arg1p4-arg2 <= 0 /\ arg1p4 > 0 /\ arg1 > 0 /\ arg2p4 > 0 /\ arg1p4-arg1 <= 0 /\ arg2 > 0), cost: 1
   7: f204_0_main_InvokeMethod -> f292_0_isZero_NONNULL : arg1'=arg1p8, arg2'=arg2p8, arg3'=arg3p8, arg4'=arg4p8, arg5'=arg5p8, (arg3p8 > 0 /\ 1-arg3+arg4p8 <= 0 /\ -1+arg4 > 0 /\ arg3p8-arg3 <= 0 /\ arg3 > 0 /\ arg1 > 0 /\ arg1p8 > 0 /\ 1+arg4p8 > 0 /\ -arg3+arg2p8 <= 0 /\ arg1p8-arg2 <= 0 /\ arg2p8 > 0 /\ arg2 > 0 /\ 2+arg5-arg2 <= 0), cost: 1
  15: f69_0__init__GT -> f69_0__init__GT : arg1'=-1+arg1, arg2'=arg2p7, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, arg1 > 0, cost: 1
  16: f69_0__init__GT -> f69_0__init__GT : arg1'=-n+arg1, arg2'=arg2p7, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, (-1+n >= 0 /\ 1-n+arg1 > 0), cost: 1
   8: f292_0_isZero_NONNULL -> f292_0_isZero_NONNULL : arg1'=arg1p9, arg2'=arg2p9, arg3'=arg3p9, arg4'=arg4p9, arg5'=arg5p9, (-2+arg2p9 > 0 /\ arg4p9 > 0 /\ -2-arg4+arg3p9 <= 0 /\ arg4 > 0 /\ arg1p9 > 0 /\ 2+arg4p9-arg3 <= 0 /\ -2-arg4+arg2p9 <= 0 /\ -2+arg3p9 > 0 /\ arg4p9-arg4 <= 0 /\ arg2p9-arg3 <= 0 /\ arg1 > 0 /\ -arg3+arg3p9 <= 0 /\ -2+arg3 > 0 /\ arg1p9-arg1 <= 0 /\ -1+arg2 > 0), cost: 1
   9: f292_0_isZero_NONNULL -> f292_0_isZero_NONNULL : arg1'=arg1p10, arg2'=arg2p10, arg3'=arg3p10, arg4'=arg4p10, arg5'=arg5p10, (arg2p10 > 0 /\ -2+arg2 > 0 /\ arg3p10-arg3 <= 0 /\ arg4 > 0 /\ -2-arg4+arg3p10 <= 0 /\ 2-arg1+arg1p10 <= 0 /\ -2+arg3p10 > 0 /\ -arg4+arg4p10 <= 0 /\ arg1p10 > 0 /\ 2-arg3+arg4p10 <= 0 /\ -2+arg1 > 0 /\ -2+arg3 > 0 /\ arg4p10 > 0 /\ 2+arg2p10-arg2 <= 0), cost: 1
  10: __init -> f1_0_main_New : arg1'=arg1p11, arg2'=arg2p11, arg3'=arg3p11, arg4'=arg4p11, arg5'=arg5p11, T, cost: 1

	Loop Acceleration

	Original rule:
	f69_0__init__GT -> f69_0__init__GT : arg1'=-1+arg1, arg2'=arg2p7, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, (arg1 > 0), cost: 1
	New rule:
	f69_0__init__GT -> f69_0__init__GT : arg1'=-n+arg1, arg2'=arg2p7, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, (-1+n >= 0 /\ 1-n+arg1 > 0), cost: 1

		arg1 > 0 [0]: montonic decrease yields 1-n+arg1 > 0
		
		arg1 > 0 [1]: eventual increase yields (1 <= 0 /\ arg1 > 0)
		
		Replacement map: {arg1 > 0 -> 1-n+arg1 > 0}

	Trace

	10[T], 4[(1+arg1p5 > 0 /\ arg1 > 0 /\ arg2 > 0)], 16[(-1+n >= 0 /\ 1-n+arg1 > 0)]
	
	Blocked

	[{}, {}, {}, {15[T], 16[T]}]

Backtrack

	Trace

	10[T], 4[(1+arg1p5 > 0 /\ arg1 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {16[T]}]

Step with 15

	Trace

	10[T], 4[(1+arg1p5 > 0 /\ arg1 > 0 /\ arg2 > 0)], 15[(arg1 > 0)]
	
	Blocked

	[{}, {}, {16[T]}, {}]

Covered

	Trace

	10[T], 4[(1+arg1p5 > 0 /\ arg1 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {15[T], 16[T]}]

Backtrack

	Trace

	10[T]
	
	Blocked

	[{}, {4[T]}]

Step with 11

	Trace

	10[T], 11[(-2+arg1p1 > 0 /\ arg1 > 0 /\ arg2p1 > 0 /\ -arg1+arg2p1 <= 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {4[T]}, {}]

Step with 5

	Trace

	10[T], 11[(-2+arg1p1 > 0 /\ arg1 > 0 /\ arg2p1 > 0 /\ -arg1+arg2p1 <= 0 /\ arg2 > 0)], 5[(-1+arg3 > 0 /\ 1+arg1p6 > 0 /\ arg1 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {4[T]}, {}, {}]

Step with 15

	Trace

	10[T], 11[(-2+arg1p1 > 0 /\ arg1 > 0 /\ arg2p1 > 0 /\ -arg1+arg2p1 <= 0 /\ arg2 > 0)], 5[(-1+arg3 > 0 /\ 1+arg1p6 > 0 /\ arg1 > 0 /\ arg2 > 0)], 15[(arg1 > 0)]
	
	Blocked

	[{}, {4[T]}, {}, {}, {}]

Covered

	Trace

	10[T], 11[(-2+arg1p1 > 0 /\ arg1 > 0 /\ arg2p1 > 0 /\ -arg1+arg2p1 <= 0 /\ arg2 > 0)], 5[(-1+arg3 > 0 /\ 1+arg1p6 > 0 /\ arg1 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {4[T]}, {}, {15[T]}]

Step with 16

	Trace

	10[T], 11[(-2+arg1p1 > 0 /\ arg1 > 0 /\ arg2p1 > 0 /\ -arg1+arg2p1 <= 0 /\ arg2 > 0)], 5[(-1+arg3 > 0 /\ 1+arg1p6 > 0 /\ arg1 > 0 /\ arg2 > 0)], 16[(-1+n >= 0 /\ 1-n+arg1 > 0)]
	
	Blocked

	[{}, {4[T]}, {}, {15[T]}, {16[T]}]

Step with 15

	Trace

	10[T], 11[(-2+arg1p1 > 0 /\ arg1 > 0 /\ arg2p1 > 0 /\ -arg1+arg2p1 <= 0 /\ arg2 > 0)], 5[(-1+arg3 > 0 /\ 1+arg1p6 > 0 /\ arg1 > 0 /\ arg2 > 0)], 16[(-1+n >= 0 /\ 1-n+arg1 > 0)], 15[(arg1 > 0)]
	
	Blocked

	[{}, {4[T]}, {}, {15[T]}, {16[T]}, {}]

Covered

	Trace

	10[T], 11[(-2+arg1p1 > 0 /\ arg1 > 0 /\ arg2p1 > 0 /\ -arg1+arg2p1 <= 0 /\ arg2 > 0)], 5[(-1+arg3 > 0 /\ 1+arg1p6 > 0 /\ arg1 > 0 /\ arg2 > 0)], 16[(-1+n >= 0 /\ 1-n+arg1 > 0)]
	
	Blocked

	[{}, {4[T]}, {}, {15[T]}, {15[T], 16[T]}]

Backtrack

	Trace

	10[T], 11[(-2+arg1p1 > 0 /\ arg1 > 0 /\ arg2p1 > 0 /\ -arg1+arg2p1 <= 0 /\ arg2 > 0)], 5[(-1+arg3 > 0 /\ 1+arg1p6 > 0 /\ arg1 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {4[T]}, {}, {15[T], 16[T]}]

Backtrack

	Trace

	10[T], 11[(-2+arg1p1 > 0 /\ arg1 > 0 /\ arg2p1 > 0 /\ -arg1+arg2p1 <= 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {4[T]}, {5[T]}]

Step with 13

	Trace

	10[T], 11[(-2+arg1p1 > 0 /\ arg1 > 0 /\ arg2p1 > 0 /\ -arg1+arg2p1 <= 0 /\ arg2 > 0)], 13[(-1+arg3 > 0 /\ -arg1p3+arg1 >= 0 /\ -1+arg3p3 > 0 /\ -2+arg1-arg5p3 >= 0 /\ -1+arg3p3-arg2 <= 0 /\ arg1p3 > 0 /\ arg1 > 0 /\ arg1p3-arg2 <= 0 /\ arg1-arg2p3 >= 0 /\ 1-arg3p3+arg1 >= 0 /\ arg2p3 > 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {4[T]}, {5[T]}, {}]

Step with 7

	Trace

	10[T], 11[(-2+arg1p1 > 0 /\ arg1 > 0 /\ arg2p1 > 0 /\ -arg1+arg2p1 <= 0 /\ arg2 > 0)], 13[(-1+arg3 > 0 /\ -arg1p3+arg1 >= 0 /\ -1+arg3p3 > 0 /\ -2+arg1-arg5p3 >= 0 /\ -1+arg3p3-arg2 <= 0 /\ arg1p3 > 0 /\ arg1 > 0 /\ arg1p3-arg2 <= 0 /\ arg1-arg2p3 >= 0 /\ 1-arg3p3+arg1 >= 0 /\ arg2p3 > 0 /\ arg2 > 0)], 7[(arg3p8 > 0 /\ 1-arg3+arg4p8 <= 0 /\ -1+arg4 > 0 /\ arg3p8-arg3 <= 0 /\ arg3 > 0 /\ arg1 > 0 /\ arg1p8 > 0 /\ 1+arg4p8 > 0 /\ -arg3+arg2p8 <= 0 /\ arg1p8-arg2 <= 0 /\ arg2p8 > 0 /\ arg2 > 0 /\ 2+arg5-arg2 <= 0)]
	
	Blocked

	[{}, {4[T]}, {5[T]}, {}, {}]

Step with 8

	Trace

	10[T], 11[(-2+arg1p1 > 0 /\ arg1 > 0 /\ arg2p1 > 0 /\ -arg1+arg2p1 <= 0 /\ arg2 > 0)], 13[(-1+arg3 > 0 /\ -arg1p3+arg1 >= 0 /\ -1+arg3p3 > 0 /\ -2+arg1-arg5p3 >= 0 /\ -1+arg3p3-arg2 <= 0 /\ arg1p3 > 0 /\ arg1 > 0 /\ arg1p3-arg2 <= 0 /\ arg1-arg2p3 >= 0 /\ 1-arg3p3+arg1 >= 0 /\ arg2p3 > 0 /\ arg2 > 0)], 7[(arg3p8 > 0 /\ 1-arg3+arg4p8 <= 0 /\ -1+arg4 > 0 /\ arg3p8-arg3 <= 0 /\ arg3 > 0 /\ arg1 > 0 /\ arg1p8 > 0 /\ 1+arg4p8 > 0 /\ -arg3+arg2p8 <= 0 /\ arg1p8-arg2 <= 0 /\ arg2p8 > 0 /\ arg2 > 0 /\ 2+arg5-arg2 <= 0)], 8[(-2+arg2p9 > 0 /\ arg4p9 > 0 /\ -2-arg4+arg3p9 <= 0 /\ arg4 > 0 /\ arg1p9 > 0 /\ 2+arg4p9-arg3 <= 0 /\ -2-arg4+arg2p9 <= 0 /\ -2+arg3p9 > 0 /\ arg4p9-arg4 <= 0 /\ arg2p9-arg3 <= 0 /\ arg1 > 0 /\ -arg3+arg3p9 <= 0 /\ -2+arg3 > 0 /\ arg1p9-arg1 <= 0 /\ -1+arg2 > 0)]
	
	Blocked

	[{}, {4[T]}, {5[T]}, {}, {}, {}]

Nonterm

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5
   4: f1_0_main_New -> f69_0__init__GT : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, arg4'=arg4p5, arg5'=arg5p5, (1+arg1p5 > 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
  11: f1_0_main_New -> f155_0_main_ArrayAccess : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg2, arg4'=arg4p1, arg5'=arg5p1, (-2+arg1p1 > 0 /\ arg1 > 0 /\ arg2p1 > 0 /\ -arg1+arg2p1 <= 0 /\ arg2 > 0), cost: 1
  12: f1_0_main_New -> f155_0_main_ArrayAccess : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg2, arg4'=arg4p2, arg5'=arg5p2, (-1+arg1p2 > 0 /\ arg2p2-arg1 <= 0 /\ arg2p2 > 0 /\ arg1 > 0 /\ -1+arg1p2-arg1 <= 0 /\ arg2 > 0), cost: 1
   5: f155_0_main_ArrayAccess -> f69_0__init__GT : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, arg4'=arg4p6, arg5'=arg5p6, (-1+arg3 > 0 /\ 1+arg1p6 > 0 /\ arg1 > 0 /\ arg2 > 0), cost: 1
  13: f155_0_main_ArrayAccess -> f204_0_main_InvokeMethod : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, arg4'=arg3, arg5'=arg5p3, (-1+arg3 > 0 /\ -arg1p3+arg1 >= 0 /\ -1+arg3p3 > 0 /\ -2+arg1-arg5p3 >= 0 /\ -1+arg3p3-arg2 <= 0 /\ arg1p3 > 0 /\ arg1 > 0 /\ arg1p3-arg2 <= 0 /\ arg1-arg2p3 >= 0 /\ 1-arg3p3+arg1 >= 0 /\ arg2p3 > 0 /\ arg2 > 0), cost: 1
  14: f155_0_main_ArrayAccess -> f204_0_main_InvokeMethod : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, arg4'=arg3, arg5'=arg5p4, (-1+arg3 > 0 /\ -arg1+arg2p4 <= 0 /\ 2+arg5p4-arg1 <= 0 /\ -2+arg3p4 > 0 /\ arg1p4-arg2 <= 0 /\ arg1p4 > 0 /\ arg1 > 0 /\ arg2p4 > 0 /\ arg1p4-arg1 <= 0 /\ arg2 > 0), cost: 1
   7: f204_0_main_InvokeMethod -> f292_0_isZero_NONNULL : arg1'=arg1p8, arg2'=arg2p8, arg3'=arg3p8, arg4'=arg4p8, arg5'=arg5p8, (arg3p8 > 0 /\ 1-arg3+arg4p8 <= 0 /\ -1+arg4 > 0 /\ arg3p8-arg3 <= 0 /\ arg3 > 0 /\ arg1 > 0 /\ arg1p8 > 0 /\ 1+arg4p8 > 0 /\ -arg3+arg2p8 <= 0 /\ arg1p8-arg2 <= 0 /\ arg2p8 > 0 /\ arg2 > 0 /\ 2+arg5-arg2 <= 0), cost: 1
  15: f69_0__init__GT -> f69_0__init__GT : arg1'=-1+arg1, arg2'=arg2p7, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, arg1 > 0, cost: 1
  16: f69_0__init__GT -> f69_0__init__GT : arg1'=-n+arg1, arg2'=arg2p7, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, (-1+n >= 0 /\ 1-n+arg1 > 0), cost: 1
   8: f292_0_isZero_NONNULL -> f292_0_isZero_NONNULL : arg1'=arg1p9, arg2'=arg2p9, arg3'=arg3p9, arg4'=arg4p9, arg5'=arg5p9, (-2+arg2p9 > 0 /\ arg4p9 > 0 /\ -2-arg4+arg3p9 <= 0 /\ arg4 > 0 /\ arg1p9 > 0 /\ 2+arg4p9-arg3 <= 0 /\ -2-arg4+arg2p9 <= 0 /\ -2+arg3p9 > 0 /\ arg4p9-arg4 <= 0 /\ arg2p9-arg3 <= 0 /\ arg1 > 0 /\ -arg3+arg3p9 <= 0 /\ -2+arg3 > 0 /\ arg1p9-arg1 <= 0 /\ -1+arg2 > 0), cost: 1
   9: f292_0_isZero_NONNULL -> f292_0_isZero_NONNULL : arg1'=arg1p10, arg2'=arg2p10, arg3'=arg3p10, arg4'=arg4p10, arg5'=arg5p10, (arg2p10 > 0 /\ -2+arg2 > 0 /\ arg3p10-arg3 <= 0 /\ arg4 > 0 /\ -2-arg4+arg3p10 <= 0 /\ 2-arg1+arg1p10 <= 0 /\ -2+arg3p10 > 0 /\ -arg4+arg4p10 <= 0 /\ arg1p10 > 0 /\ 2-arg3+arg4p10 <= 0 /\ -2+arg1 > 0 /\ -2+arg3 > 0 /\ arg4p10 > 0 /\ 2+arg2p10-arg2 <= 0), cost: 1
  17: f292_0_isZero_NONNULL -> LoAT_sink : (-2+arg2p9 > 0 /\ arg4p9 > 0 /\ 2+arg4-arg3p9 >= 0 /\ arg4 > 0 /\ arg1p9 > 0 /\ -arg4p9+arg4 <= 0 /\ -arg4p9+arg4 >= 0 /\ -2-arg4p9+arg3 >= 0 /\ 2+arg4-arg2p9 >= 0 /\ -2+arg3p9 > 0 /\ arg1 > 0 /\ -arg1p9+arg1 <= 0 /\ -arg1p9+arg1 >= 0 /\ -arg2p9+arg3 >= 0 /\ -2+arg3 > 0 /\ arg3-arg3p9 <= 0 /\ arg3-arg3p9 >= 0 /\ -1+arg2 > 0), cost: NONTERM
  18: f292_0_isZero_NONNULL -> f292_0_isZero_NONNULL : arg1'=arg1p9, arg2'=arg2p9, arg3'=2+arg4p9, arg4'=arg4p9, arg5'=arg5p9, (-2+arg2p9 > 0 /\ arg4p9 > 0 /\ arg1p9 > 0 /\ -arg4p9+arg4 >= 0 /\ -2-arg4p9+arg3 >= 0 /\ 2+arg4p9-arg2p9 >= 0 /\ -arg1p9+arg1 >= 0 /\ -1+arg2 > 0), cost: 1
  10: __init -> f1_0_main_New : arg1'=arg1p11, arg2'=arg2p11, arg3'=arg3p11, arg4'=arg4p11, arg5'=arg5p11, T, cost: 1

	Certificate of Non-Termination

	Original rule:
	f292_0_isZero_NONNULL -> f292_0_isZero_NONNULL : arg1'=arg1p9, arg2'=arg2p9, arg3'=arg3p9, arg4'=arg4p9, arg5'=arg5p9, (-2+arg2p9 > 0 /\ arg4p9 > 0 /\ -2-arg4+arg3p9 <= 0 /\ arg4 > 0 /\ arg1p9 > 0 /\ 2+arg4p9-arg3 <= 0 /\ -2-arg4+arg2p9 <= 0 /\ -2+arg3p9 > 0 /\ arg4p9-arg4 <= 0 /\ arg2p9-arg3 <= 0 /\ arg1 > 0 /\ -arg3+arg3p9 <= 0 /\ -2+arg3 > 0 /\ arg1p9-arg1 <= 0 /\ -1+arg2 > 0), cost: 1
	New rule:
	f292_0_isZero_NONNULL -> LoAT_sink : (-2+arg2p9 > 0 /\ arg4p9 > 0 /\ 2+arg4-arg3p9 >= 0 /\ arg4 > 0 /\ arg1p9 > 0 /\ -arg4p9+arg4 <= 0 /\ -arg4p9+arg4 >= 0 /\ -2-arg4p9+arg3 >= 0 /\ 2+arg4-arg2p9 >= 0 /\ -2+arg3p9 > 0 /\ arg1 > 0 /\ -arg1p9+arg1 <= 0 /\ -arg1p9+arg1 >= 0 /\ -arg2p9+arg3 >= 0 /\ -2+arg3 > 0 /\ arg3-arg3p9 <= 0 /\ arg3-arg3p9 >= 0 /\ -1+arg2 > 0), cost: NONTERM

		-2+arg2p9 > 0 [0]: monotonic increase yields -2+arg2p9 > 0
		
		arg4p9 > 0 [0]: monotonic increase yields arg4p9 > 0
		
		2+arg4-arg3p9 >= 0 [0]: montonic decrease yields 2+arg4p9-arg3p9 >= 0, dependencies: -arg4p9+arg4 >= 0
		
		2+arg4-arg3p9 >= 0 [1]: eventual decrease yields (2+arg4-arg3p9 >= 0 /\ 2+arg4p9-arg3p9 >= 0)
		
		2+arg4-arg3p9 >= 0 [2]: eventual increase yields (2+arg4-arg3p9 >= 0 /\ -arg4p9+arg4 <= 0)
		
		arg4 > 0 [0]: montonic decrease yields arg4p9 > 0, dependencies: -arg4p9+arg4 >= 0
		
		arg4 > 0 [1]: eventual decrease yields (arg4p9 > 0 /\ arg4 > 0)
		
		arg4 > 0 [2]: eventual increase yields (arg4 > 0 /\ -arg4p9+arg4 <= 0)
		
		arg1p9 > 0 [0]: monotonic increase yields arg1p9 > 0
		
		-arg4p9+arg4 >= 0 [0]: monotonic increase yields -arg4p9+arg4 >= 0
		
		-2-arg4p9+arg3 >= 0 [0]: montonic decrease yields -2-arg4p9+arg3p9 >= 0, dependencies: arg3-arg3p9 >= 0
		
		-2-arg4p9+arg3 >= 0 [1]: eventual decrease yields (-2-arg4p9+arg3 >= 0 /\ -2-arg4p9+arg3p9 >= 0)
		
		-2-arg4p9+arg3 >= 0 [2]: eventual increase yields (-2-arg4p9+arg3 >= 0 /\ arg3-arg3p9 <= 0)
		
		2+arg4-arg2p9 >= 0 [0]: montonic decrease yields 2+arg4p9-arg2p9 >= 0, dependencies: -arg4p9+arg4 >= 0
		
		2+arg4-arg2p9 >= 0 [1]: eventual increase yields (-arg4p9+arg4 <= 0 /\ 2+arg4-arg2p9 >= 0)
		
		-2+arg3p9 > 0 [0]: monotonic increase yields -2+arg3p9 > 0
		
		arg1 > 0 [0]: montonic decrease yields arg1p9 > 0, dependencies: -arg1p9+arg1 >= 0
		
		arg1 > 0 [1]: eventual decrease yields (arg1p9 > 0 /\ arg1 > 0)
		
		arg1 > 0 [2]: eventual increase yields (arg1 > 0 /\ -arg1p9+arg1 <= 0)
		
		-arg1p9+arg1 >= 0 [0]: monotonic increase yields -arg1p9+arg1 >= 0
		
		-arg2p9+arg3 >= 0 [0]: montonic decrease yields -arg2p9+arg3p9 >= 0, dependencies: arg3-arg3p9 >= 0
		
		-arg2p9+arg3 >= 0 [1]: eventual decrease yields (-arg2p9+arg3p9 >= 0 /\ -arg2p9+arg3 >= 0)
		
		-arg2p9+arg3 >= 0 [2]: eventual increase yields (-arg2p9+arg3 >= 0 /\ arg3-arg3p9 <= 0)
		
		-2+arg3 > 0 [0]: montonic decrease yields -2+arg3p9 > 0, dependencies: arg4p9 > 0 -2-arg4p9+arg3 >= 0
		
		-2+arg3 > 0 [1]: eventual increase yields (-2+arg3 > 0 /\ arg3-arg3p9 <= 0)
		
		arg3-arg3p9 >= 0 [0]: monotonic increase yields arg3-arg3p9 >= 0
		
		-1+arg2 > 0 [0]: monotonic increase yields -1+arg2 > 0, dependencies: -2+arg2p9 > 0
		
		Replacement map: {-2+arg2p9 > 0 -> -2+arg2p9 > 0, arg4p9 > 0 -> arg4p9 > 0, 2+arg4-arg3p9 >= 0 -> (2+arg4-arg3p9 >= 0 /\ -arg4p9+arg4 <= 0), arg4 > 0 -> (arg4 > 0 /\ -arg4p9+arg4 <= 0), arg1p9 > 0 -> arg1p9 > 0, -arg4p9+arg4 >= 0 -> -arg4p9+arg4 >= 0, -2-arg4p9+arg3 >= 0 -> (-2-arg4p9+arg3 >= 0 /\ arg3-arg3p9 <= 0), 2+arg4-arg2p9 >= 0 -> (-arg4p9+arg4 <= 0 /\ 2+arg4-arg2p9 >= 0), -2+arg3p9 > 0 -> -2+arg3p9 > 0, arg1 > 0 -> (arg1 > 0 /\ -arg1p9+arg1 <= 0), -arg1p9+arg1 >= 0 -> -arg1p9+arg1 >= 0, -arg2p9+arg3 >= 0 -> (-arg2p9+arg3 >= 0 /\ arg3-arg3p9 <= 0), -2+arg3 > 0 -> (-2+arg3 > 0 /\ arg3-arg3p9 <= 0), arg3-arg3p9 >= 0 -> arg3-arg3p9 >= 0, -1+arg2 > 0 -> -1+arg2 > 0}

	Loop Acceleration

	Original rule:
	f292_0_isZero_NONNULL -> f292_0_isZero_NONNULL : arg1'=arg1p9, arg2'=arg2p9, arg3'=arg3p9, arg4'=arg4p9, arg5'=arg5p9, (-2+arg2p9 > 0 /\ arg4p9 > 0 /\ -2-arg4+arg3p9 <= 0 /\ arg4 > 0 /\ arg1p9 > 0 /\ 2+arg4p9-arg3 <= 0 /\ -2-arg4+arg2p9 <= 0 /\ -2+arg3p9 > 0 /\ arg4p9-arg4 <= 0 /\ arg2p9-arg3 <= 0 /\ arg1 > 0 /\ -arg3+arg3p9 <= 0 /\ -2+arg3 > 0 /\ arg1p9-arg1 <= 0 /\ -1+arg2 > 0), cost: 1
	New rule:
	f292_0_isZero_NONNULL -> f292_0_isZero_NONNULL : arg1'=arg1p9, arg2'=arg2p9, arg3'=arg3p9, arg4'=arg4p9, arg5'=arg5p9, (-2+arg2p9 > 0 /\ arg4p9 > 0 /\ arg1p9 > 0 /\ -arg4p9+arg4 >= 0 /\ -arg2p9+arg3p9 >= 0 /\ -2+arg3p9 > 0 /\ -1+n3 >= 0 /\ 2+arg4p9-arg2p9 >= 0 /\ -arg1p9+arg1 >= 0 /\ -2-arg4p9+arg3p9 >= 0 /\ 2+arg4p9-arg3p9 >= 0 /\ arg3-arg3p9 >= 0 /\ -1+arg2 > 0), cost: 1

		-2+arg2p9 > 0 [0]: monotonic increase yields -2+arg2p9 > 0
		
		arg4p9 > 0 [0]: monotonic increase yields arg4p9 > 0
		
		2+arg4-arg3p9 >= 0 [0]: montonic decrease yields 2+arg4p9-arg3p9 >= 0, dependencies: -arg4p9+arg4 >= 0
		
		2+arg4-arg3p9 >= 0 [1]: eventual decrease yields (2+arg4-arg3p9 >= 0 /\ 2+arg4p9-arg3p9 >= 0)
		
		2+arg4-arg3p9 >= 0 [2]: eventual increase yields (2+arg4-arg3p9 >= 0 /\ -arg4p9+arg4 <= 0)
		
		arg4 > 0 [0]: montonic decrease yields arg4p9 > 0, dependencies: -arg4p9+arg4 >= 0
		
		arg4 > 0 [1]: eventual decrease yields (arg4p9 > 0 /\ arg4 > 0)
		
		arg4 > 0 [2]: eventual increase yields (arg4 > 0 /\ -arg4p9+arg4 <= 0)
		
		arg1p9 > 0 [0]: monotonic increase yields arg1p9 > 0
		
		-arg4p9+arg4 >= 0 [0]: monotonic increase yields -arg4p9+arg4 >= 0
		
		-2-arg4p9+arg3 >= 0 [0]: montonic decrease yields -2-arg4p9+arg3p9 >= 0, dependencies: arg3-arg3p9 >= 0
		
		-2-arg4p9+arg3 >= 0 [1]: eventual decrease yields (-2-arg4p9+arg3 >= 0 /\ -2-arg4p9+arg3p9 >= 0)
		
		-2-arg4p9+arg3 >= 0 [2]: eventual increase yields (-2-arg4p9+arg3 >= 0 /\ arg3-arg3p9 <= 0)
		
		2+arg4-arg2p9 >= 0 [0]: montonic decrease yields 2+arg4p9-arg2p9 >= 0, dependencies: -arg4p9+arg4 >= 0
		
		2+arg4-arg2p9 >= 0 [1]: eventual increase yields (-arg4p9+arg4 <= 0 /\ 2+arg4-arg2p9 >= 0)
		
		-2+arg3p9 > 0 [0]: monotonic increase yields -2+arg3p9 > 0
		
		arg1 > 0 [0]: montonic decrease yields arg1p9 > 0, dependencies: -arg1p9+arg1 >= 0
		
		arg1 > 0 [1]: eventual decrease yields (arg1p9 > 0 /\ arg1 > 0)
		
		arg1 > 0 [2]: eventual increase yields (arg1 > 0 /\ -arg1p9+arg1 <= 0)
		
		-arg1p9+arg1 >= 0 [0]: monotonic increase yields -arg1p9+arg1 >= 0
		
		-arg2p9+arg3 >= 0 [0]: montonic decrease yields -arg2p9+arg3p9 >= 0, dependencies: arg3-arg3p9 >= 0
		
		-arg2p9+arg3 >= 0 [1]: eventual decrease yields (-arg2p9+arg3p9 >= 0 /\ -arg2p9+arg3 >= 0)
		
		-arg2p9+arg3 >= 0 [2]: eventual increase yields (-arg2p9+arg3 >= 0 /\ arg3-arg3p9 <= 0)
		
		-2+arg3 > 0 [0]: montonic decrease yields -2+arg3p9 > 0, dependencies: arg4p9 > 0 -2-arg4p9+arg3 >= 0
		
		-2+arg3 > 0 [1]: eventual increase yields (-2+arg3 > 0 /\ arg3-arg3p9 <= 0)
		
		arg3-arg3p9 >= 0 [0]: monotonic increase yields arg3-arg3p9 >= 0
		
		-1+arg2 > 0 [0]: monotonic increase yields -1+arg2 > 0, dependencies: -2+arg2p9 > 0
		
		Replacement map: {-2+arg2p9 > 0 -> -2+arg2p9 > 0, arg4p9 > 0 -> arg4p9 > 0, 2+arg4-arg3p9 >= 0 -> 2+arg4p9-arg3p9 >= 0, arg4 > 0 -> arg4p9 > 0, arg1p9 > 0 -> arg1p9 > 0, -arg4p9+arg4 >= 0 -> -arg4p9+arg4 >= 0, -2-arg4p9+arg3 >= 0 -> -2-arg4p9+arg3p9 >= 0, 2+arg4-arg2p9 >= 0 -> 2+arg4p9-arg2p9 >= 0, -2+arg3p9 > 0 -> -2+arg3p9 > 0, arg1 > 0 -> arg1p9 > 0, -arg1p9+arg1 >= 0 -> -arg1p9+arg1 >= 0, -arg2p9+arg3 >= 0 -> -arg2p9+arg3p9 >= 0, -2+arg3 > 0 -> -2+arg3p9 > 0, arg3-arg3p9 >= 0 -> arg3-arg3p9 >= 0, -1+arg2 > 0 -> -1+arg2 > 0}

	made implied equalities explicit

	Original rule:
	f292_0_isZero_NONNULL -> f292_0_isZero_NONNULL : arg1'=arg1p9, arg2'=arg2p9, arg3'=arg3p9, arg4'=arg4p9, arg5'=arg5p9, (-2+arg2p9 > 0 /\ arg4p9 > 0 /\ arg1p9 > 0 /\ -arg4p9+arg4 >= 0 /\ -arg2p9+arg3p9 >= 0 /\ -2+arg3p9 > 0 /\ -1+n3 >= 0 /\ 2+arg4p9-arg2p9 >= 0 /\ -arg1p9+arg1 >= 0 /\ -2-arg4p9+arg3p9 >= 0 /\ 2+arg4p9-arg3p9 >= 0 /\ arg3-arg3p9 >= 0 /\ -1+arg2 > 0), cost: 1
	New rule:
	f292_0_isZero_NONNULL -> f292_0_isZero_NONNULL : arg1'=arg1p9, arg2'=arg2p9, arg3'=arg3p9, arg4'=arg4p9, arg5'=arg5p9, (-2+arg2p9 > 0 /\ arg4p9 > 0 /\ arg1p9 > 0 /\ -arg4p9+arg4 >= 0 /\ -arg2p9+arg3p9 >= 0 /\ -2+arg3p9 > 0 /\ -1+n3 >= 0 /\ 2+arg4p9-arg2p9 >= 0 /\ -arg1p9+arg1 >= 0 /\ -2-arg4p9+arg3p9 >= 0 /\ 2+arg4p9-arg3p9 >= 0 /\ 2+arg4p9-arg3p9 == 0 /\ arg3-arg3p9 >= 0 /\ -1+arg2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f292_0_isZero_NONNULL -> f292_0_isZero_NONNULL : arg1'=arg1p9, arg2'=arg2p9, arg3'=arg3p9, arg4'=arg4p9, arg5'=arg5p9, (-2+arg2p9 > 0 /\ arg4p9 > 0 /\ arg1p9 > 0 /\ -arg4p9+arg4 >= 0 /\ -arg2p9+arg3p9 >= 0 /\ -2+arg3p9 > 0 /\ -1+n3 >= 0 /\ 2+arg4p9-arg2p9 >= 0 /\ -arg1p9+arg1 >= 0 /\ -2-arg4p9+arg3p9 >= 0 /\ 2+arg4p9-arg3p9 >= 0 /\ 2+arg4p9-arg3p9 == 0 /\ arg3-arg3p9 >= 0 /\ -1+arg2 > 0), cost: 1
	New rule:
	f292_0_isZero_NONNULL -> f292_0_isZero_NONNULL : arg1'=arg1p9, arg2'=arg2p9, arg3'=2+arg4p9, arg4'=arg4p9, arg5'=arg5p9, (0 >= 0 /\ 0 == 0 /\ -2+arg2p9 > 0 /\ arg4p9 > 0 /\ arg1p9 > 0 /\ -arg4p9+arg4 >= 0 /\ -2-arg4p9+arg3 >= 0 /\ -1+n3 >= 0 /\ 2+arg4p9-arg2p9 >= 0 /\ -arg1p9+arg1 >= 0 /\ -1+arg2 > 0), cost: 1
	
		propagated equality arg3p9 = 2+arg4p9
		
	Simplified Guard

	Original rule:
	f292_0_isZero_NONNULL -> f292_0_isZero_NONNULL : arg1'=arg1p9, arg2'=arg2p9, arg3'=2+arg4p9, arg4'=arg4p9, arg5'=arg5p9, (0 >= 0 /\ 0 == 0 /\ -2+arg2p9 > 0 /\ arg4p9 > 0 /\ arg1p9 > 0 /\ -arg4p9+arg4 >= 0 /\ -2-arg4p9+arg3 >= 0 /\ -1+n3 >= 0 /\ 2+arg4p9-arg2p9 >= 0 /\ -arg1p9+arg1 >= 0 /\ -1+arg2 > 0), cost: 1
	New rule:
	f292_0_isZero_NONNULL -> f292_0_isZero_NONNULL : arg1'=arg1p9, arg2'=arg2p9, arg3'=2+arg4p9, arg4'=arg4p9, arg5'=arg5p9, (-2+arg2p9 > 0 /\ arg4p9 > 0 /\ arg1p9 > 0 /\ -arg4p9+arg4 >= 0 /\ -2-arg4p9+arg3 >= 0 /\ -1+n3 >= 0 /\ 2+arg4p9-arg2p9 >= 0 /\ -arg1p9+arg1 >= 0 /\ -1+arg2 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	f292_0_isZero_NONNULL -> f292_0_isZero_NONNULL : arg1'=arg1p9, arg2'=arg2p9, arg3'=2+arg4p9, arg4'=arg4p9, arg5'=arg5p9, (-2+arg2p9 > 0 /\ arg4p9 > 0 /\ arg1p9 > 0 /\ -arg4p9+arg4 >= 0 /\ -2-arg4p9+arg3 >= 0 /\ -1+n3 >= 0 /\ 2+arg4p9-arg2p9 >= 0 /\ -arg1p9+arg1 >= 0 /\ -1+arg2 > 0), cost: 1
	New rule:
	f292_0_isZero_NONNULL -> f292_0_isZero_NONNULL : arg1'=arg1p9, arg2'=arg2p9, arg3'=2+arg4p9, arg4'=arg4p9, arg5'=arg5p9, (-2+arg2p9 > 0 /\ arg4p9 > 0 /\ arg1p9 > 0 /\ -arg4p9+arg4 >= 0 /\ -2-arg4p9+arg3 >= 0 /\ 2+arg4p9-arg2p9 >= 0 /\ -arg1p9+arg1 >= 0 /\ -1+arg2 > 0), cost: 1

Step with 17

	Trace

	10[T], 11[(-2+arg1p1 > 0 /\ arg1 > 0 /\ arg2p1 > 0 /\ -arg1+arg2p1 <= 0 /\ arg2 > 0)], 13[(-1+arg3 > 0 /\ -arg1p3+arg1 >= 0 /\ -1+arg3p3 > 0 /\ -2+arg1-arg5p3 >= 0 /\ -1+arg3p3-arg2 <= 0 /\ arg1p3 > 0 /\ arg1 > 0 /\ arg1p3-arg2 <= 0 /\ arg1-arg2p3 >= 0 /\ 1-arg3p3+arg1 >= 0 /\ arg2p3 > 0 /\ arg2 > 0)], 7[(arg3p8 > 0 /\ 1-arg3+arg4p8 <= 0 /\ -1+arg4 > 0 /\ arg3p8-arg3 <= 0 /\ arg3 > 0 /\ arg1 > 0 /\ arg1p8 > 0 /\ 1+arg4p8 > 0 /\ -arg3+arg2p8 <= 0 /\ arg1p8-arg2 <= 0 /\ arg2p8 > 0 /\ arg2 > 0 /\ 2+arg5-arg2 <= 0)], 17[(-2+arg2p9 > 0 /\ arg4p9 > 0 /\ 2+arg4-arg3p9 >= 0 /\ arg4 > 0 /\ arg1p9 > 0 /\ -arg4p9+arg4 <= 0 /\ -arg4p9+arg4 >= 0 /\ -2-arg4p9+arg3 >= 0 /\ 2+arg4-arg2p9 >= 0 /\ -2+arg3p9 > 0 /\ arg1 > 0 /\ -arg1p9+arg1 <= 0 /\ -arg1p9+arg1 >= 0 /\ -arg2p9+arg3 >= 0 /\ -2+arg3 > 0 /\ arg3-arg3p9 <= 0 /\ arg3-arg3p9 >= 0 /\ -1+arg2 > 0)]
	
	Blocked

	[{}, {4[T]}, {5[T]}, {}, {}, {17[T]}]

Refute

	Counterexample

	[ arg1=2 arg2=2 arg3=0 arg4=0 arg5=0 ] 10 [ arg1=3 arg2=2 arg3=2 arg4=0 arg5=0 ] 11 [ arg1=1 arg2=1 arg3=3 arg4=2 arg5=-1 ] 13 [ arg1=1 arg2=2 arg3=3 arg4=1 arg5=0 ] 7 [ arg1=arg1 arg2=arg2 arg3=arg3 arg4=arg4 arg5=arg5 ] 17
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
