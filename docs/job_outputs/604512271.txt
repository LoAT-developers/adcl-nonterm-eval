unknown

Initial ITS

Start location: [1]
Program variables: c x y
   0: [1] -> [2] : x'=nondet, T, cost: 1
   1: [2] -> [3] : y'=nondet1, T, cost: 1
   2: [3] -> [4] : c'=0, T, cost: 1
   3: [4] -> [5] : (-y+x < 0 \/ -y+x > 0), cost: 1
  12: [4] -> [12] : (-y+x <= 0 /\ -y+x >= 0), cost: 1
   4: [5] -> [7] : -y+x > 0, cost: 1
   7: [5] -> [9] : -y+x <= 0, cost: 1
  10: [6] -> [11] : c'=1+c, T, cost: 1
   5: [7] -> [8] : y'=1+y, T, cost: 1
   6: [8] -> [6] : T, cost: 1
   8: [9] -> [10] : x'=1+x, T, cost: 1
   9: [10] -> [6] : T, cost: 1
  11: [11] -> [4] : T, cost: 1

Chained Linear Paths

Start location: [1]
Program variables: c x y
  14: [1] -> [4] : c'=0, x'=nondet, y'=nondet1, T, cost: 1
   3: [4] -> [5] : (-y+x < 0 \/ -y+x > 0), cost: 1
  12: [4] -> [12] : (-y+x <= 0 /\ -y+x >= 0), cost: 1
  17: [5] -> [6] : y'=1+y, -y+x > 0, cost: 1
  18: [5] -> [6] : x'=1+x, -y+x <= 0, cost: 1
  19: [6] -> [4] : c'=1+c, T, cost: 1

	Eliminating location [2] by chaining:

	Applied chaining

	First rule:
	[1] -> [2] : x'=nondet, T, cost: 1
	Second rule:
	[2] -> [3] : y'=nondet1, T, cost: 1
	New rule:
	[1] -> [3] : x'=nondet, y'=nondet1, T, cost: 1
	
	Applied deletion

	Removed the following rules: 0 1
	
	Eliminating location [3] by chaining:

	Applied chaining

	First rule:
	[1] -> [3] : x'=nondet, y'=nondet1, T, cost: 1
	Second rule:
	[3] -> [4] : c'=0, T, cost: 1
	New rule:
	[1] -> [4] : c'=0, x'=nondet, y'=nondet1, T, cost: 1
	
	Applied deletion

	Removed the following rules: 2 13
	
	Eliminating location [7] by chaining:

	Applied chaining

	First rule:
	[5] -> [7] : -y+x > 0, cost: 1
	Second rule:
	[7] -> [8] : y'=1+y, T, cost: 1
	New rule:
	[5] -> [8] : y'=1+y, -y+x > 0, cost: 1
	
	Applied deletion

	Removed the following rules: 4 5
	
	Eliminating location [9] by chaining:

	Applied chaining

	First rule:
	[5] -> [9] : -y+x <= 0, cost: 1
	Second rule:
	[9] -> [10] : x'=1+x, T, cost: 1
	New rule:
	[5] -> [10] : x'=1+x, -y+x <= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 7 8
	
	Eliminating location [8] by chaining:

	Applied chaining

	First rule:
	[5] -> [8] : y'=1+y, -y+x > 0, cost: 1
	Second rule:
	[8] -> [6] : T, cost: 1
	New rule:
	[5] -> [6] : y'=1+y, -y+x > 0, cost: 1
	
	Applied deletion

	Removed the following rules: 6 15
	
	Eliminating location [10] by chaining:

	Applied chaining

	First rule:
	[5] -> [10] : x'=1+x, -y+x <= 0, cost: 1
	Second rule:
	[10] -> [6] : T, cost: 1
	New rule:
	[5] -> [6] : x'=1+x, -y+x <= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 9 16
	
	Eliminating location [11] by chaining:

	Applied chaining

	First rule:
	[6] -> [11] : c'=1+c, T, cost: 1
	Second rule:
	[11] -> [4] : T, cost: 1
	New rule:
	[6] -> [4] : c'=1+c, T, cost: 1
	
	Applied deletion

	Removed the following rules: 10 11

Step with 14

	Trace

	14[T]
	
	Blocked

	[{}, {}]

Step with 12

	Trace

	14[T], 12[(-y+x <= 0 /\ -y+x >= 0)]
	
	Blocked

	[{}, {}, {}]

Backtrack

	Trace

	14[T]
	
	Blocked

	[{}, {12[T]}]

Step with 3

	Trace

	14[T], 3[(-y+x > 0)]
	
	Blocked

	[{}, {12[T]}, {}]

Step with 17

	Trace

	14[T], 3[(-y+x > 0)], 17[(-y+x > 0)]
	
	Blocked

	[{}, {12[T]}, {}, {}]

Step with 19

	Trace

	14[T], 3[(-y+x > 0)], 17[(-y+x > 0)], 19[T]
	
	Blocked

	[{}, {12[T]}, {}, {}, {}]

Accelerate

Start location: [1]
Program variables: c x y
  14: [1] -> [4] : c'=0, x'=nondet, y'=nondet1, T, cost: 1
   3: [4] -> [5] : (-y+x < 0 \/ -y+x > 0), cost: 1
  12: [4] -> [12] : (-y+x <= 0 /\ -y+x >= 0), cost: 1
  20: [4] -> [4] : c'=c+n, y'=n+y, (-1+n >= 0 /\ 1-n-y+x > 0), cost: 1
  17: [5] -> [6] : y'=1+y, -y+x > 0, cost: 1
  18: [5] -> [6] : x'=1+x, -y+x <= 0, cost: 1
  19: [6] -> [4] : c'=1+c, T, cost: 1

	Loop Acceleration

	Original rule:
	[4] -> [4] : c'=1+c, y'=1+y, -y+x > 0, cost: 1
	New rule:
	[4] -> [4] : c'=c+n, y'=n+y, (-1+n >= 0 /\ 1-n-y+x > 0), cost: 1

		-y+x > 0 [0]: montonic decrease yields 1-n-y+x > 0
		
		-y+x > 0 [1]: eventual increase yields (1 <= 0 /\ -y+x > 0)
		
		Replacement map: {-y+x > 0 -> 1-n-y+x > 0}

	Trace

	14[T], 20[(-1+n >= 0 /\ 1-n-y+x > 0)]
	
	Blocked

	[{}, {12[T]}, {20[T]}]

Step with 12

	Trace

	14[T], 20[(-1+n >= 0 /\ 1-n-y+x > 0)], 12[(-y+x <= 0 /\ -y+x >= 0)]
	
	Blocked

	[{}, {12[T]}, {20[T]}, {}]

Backtrack

	Trace

	14[T], 20[(-1+n >= 0 /\ 1-n-y+x > 0)]
	
	Blocked

	[{}, {12[T]}, {12[T], 20[T]}]

Step with 3

	Trace

	14[T], 20[(-1+n >= 0 /\ 1-n-y+x > 0)], 3[(-y+x > 0)]
	
	Blocked

	[{}, {12[T]}, {12[T], 20[T]}, {}]

Step with 17

	Trace

	14[T], 20[(-1+n >= 0 /\ 1-n-y+x > 0)], 3[(-y+x > 0)], 17[(-y+x > 0)]
	
	Blocked

	[{}, {12[T]}, {12[T], 20[T]}, {}, {}]

Step with 19

	Trace

	14[T], 20[(-1+n >= 0 /\ 1-n-y+x > 0)], 3[(-y+x > 0)], 17[(-y+x > 0)], 19[T]
	
	Blocked

	[{}, {12[T]}, {12[T], 20[T]}, {}, {}, {}]

Covered

	Trace

	14[T], 20[(-1+n >= 0 /\ 1-n-y+x > 0)], 3[(-y+x > 0)], 17[(-y+x > 0)]
	
	Blocked

	[{}, {12[T]}, {12[T], 20[T]}, {}, {19[T]}]

Backtrack

	Trace

	14[T], 20[(-1+n >= 0 /\ 1-n-y+x > 0)], 3[(-y+x > 0)]
	
	Blocked

	[{}, {12[T]}, {12[T], 20[T]}, {17[T]}]

Backtrack

	Trace

	14[T], 20[(-1+n >= 0 /\ 1-n-y+x > 0)]
	
	Blocked

	[{}, {12[T]}, {3[-y+x > 0], 12[T], 20[T]}]

Backtrack

	Trace

	14[T]
	
	Blocked

	[{}, {12[T], 20[T]}]

Step with 3

	Trace

	14[T], 3[(-y+x > 0)]
	
	Blocked

	[{}, {12[T], 20[T]}, {}]

Step with 17

	Trace

	14[T], 3[(-y+x > 0)], 17[(-y+x > 0)]
	
	Blocked

	[{}, {12[T], 20[T]}, {}, {}]

Step with 19

	Trace

	14[T], 3[(-y+x > 0)], 17[(-y+x > 0)], 19[T]
	
	Blocked

	[{}, {12[T], 20[T]}, {}, {}, {}]

Covered

	Trace

	14[T], 3[(-y+x > 0)], 17[(-y+x > 0)]
	
	Blocked

	[{}, {12[T], 20[T]}, {}, {19[T]}]

Backtrack

	Trace

	14[T], 3[(-y+x > 0)]
	
	Blocked

	[{}, {12[T], 20[T]}, {17[T]}]

Backtrack

	Trace

	14[T]
	
	Blocked

	[{}, {3[-y+x > 0], 12[T], 20[T]}]

Step with 3

	Trace

	14[T], 3[(-y+x < 0)]
	
	Blocked

	[{}, {3[-y+x > 0], 12[T], 20[T]}, {}]

Step with 18

	Trace

	14[T], 3[(-y+x < 0)], 18[(-y+x <= 0)]
	
	Blocked

	[{}, {3[-y+x > 0], 12[T], 20[T]}, {17[T]}, {}]

Step with 19

	Trace

	14[T], 3[(-y+x < 0)], 18[(-y+x <= 0)], 19[T]
	
	Blocked

	[{}, {3[-y+x > 0], 12[T], 20[T]}, {17[T]}, {}, {}]

Accelerate

Start location: [1]
Program variables: c x y
  14: [1] -> [4] : c'=0, x'=nondet, y'=nondet1, T, cost: 1
   3: [4] -> [5] : (-y+x < 0 \/ -y+x > 0), cost: 1
  12: [4] -> [12] : (-y+x <= 0 /\ -y+x >= 0), cost: 1
  20: [4] -> [4] : c'=c+n, y'=n+y, (-1+n >= 0 /\ 1-n-y+x > 0), cost: 1
  21: [4] -> [4] : c'=n2+c, x'=n2+x, (y-x >= 0 /\ -1+n2 >= 0 /\ 1-n2+y-x > 0), cost: 1
  17: [5] -> [6] : y'=1+y, -y+x > 0, cost: 1
  18: [5] -> [6] : x'=1+x, -y+x <= 0, cost: 1
  19: [6] -> [4] : c'=1+c, T, cost: 1

	Loop Acceleration

	Original rule:
	[4] -> [4] : c'=1+c, x'=1+x, (-y+x < 0 /\ -y+x <= 0), cost: 1
	New rule:
	[4] -> [4] : c'=n2+c, x'=n2+x, (y-x >= 0 /\ -1+n2 >= 0 /\ 1-n2+y-x > 0), cost: 1

		y-x > 0 [0]: montonic decrease yields 1-n2+y-x > 0
		
		y-x > 0 [1]: eventual increase yields (1 <= 0 /\ y-x > 0)
		
		y-x >= 0 [0]: monotonic increase yields y-x >= 0, dependencies: y-x > 0
		
		Replacement map: {y-x > 0 -> 1-n2+y-x > 0, y-x >= 0 -> y-x >= 0}

	Trace

	14[T], 21[(y-x >= 0 /\ -1+n2 >= 0 /\ 1-n2+y-x > 0)]
	
	Blocked

	[{}, {3[-y+x > 0], 12[T], 20[T]}, {21[T]}]

Step with 12

	Trace

	14[T], 21[(y-x >= 0 /\ -1+n2 >= 0 /\ 1-n2+y-x > 0)], 12[(-y+x <= 0 /\ -y+x >= 0)]
	
	Blocked

	[{}, {3[-y+x > 0], 12[T], 20[T]}, {21[T]}, {}]

Backtrack

	Trace

	14[T], 21[(y-x >= 0 /\ -1+n2 >= 0 /\ 1-n2+y-x > 0)]
	
	Blocked

	[{}, {3[-y+x > 0], 12[T], 20[T]}, {12[T], 21[T]}]

Step with 3

	Trace

	14[T], 21[(y-x >= 0 /\ -1+n2 >= 0 /\ 1-n2+y-x > 0)], 3[(-y+x < 0)]
	
	Blocked

	[{}, {3[-y+x > 0], 12[T], 20[T]}, {12[T], 21[T]}, {}]

Step with 18

	Trace

	14[T], 21[(y-x >= 0 /\ -1+n2 >= 0 /\ 1-n2+y-x > 0)], 3[(-y+x < 0)], 18[(-y+x <= 0)]
	
	Blocked

	[{}, {3[-y+x > 0], 12[T], 20[T]}, {12[T], 21[T]}, {}, {}]

Step with 19

	Trace

	14[T], 21[(y-x >= 0 /\ -1+n2 >= 0 /\ 1-n2+y-x > 0)], 3[(-y+x < 0)], 18[(-y+x <= 0)], 19[T]
	
	Blocked

	[{}, {3[-y+x > 0], 12[T], 20[T]}, {12[T], 21[T]}, {}, {}, {}]

Covered

	Trace

	14[T], 21[(y-x >= 0 /\ -1+n2 >= 0 /\ 1-n2+y-x > 0)], 3[(-y+x < 0)], 18[(-y+x <= 0)]
	
	Blocked

	[{}, {3[-y+x > 0], 12[T], 20[T]}, {12[T], 21[T]}, {}, {19[T]}]

Backtrack

	Trace

	14[T], 21[(y-x >= 0 /\ -1+n2 >= 0 /\ 1-n2+y-x > 0)], 3[(-y+x < 0)]
	
	Blocked

	[{}, {3[-y+x > 0], 12[T], 20[T]}, {12[T], 21[T]}, {18[T]}]

Backtrack

	Trace

	14[T], 21[(y-x >= 0 /\ -1+n2 >= 0 /\ 1-n2+y-x > 0)]
	
	Blocked

	[{}, {3[-y+x > 0], 12[T], 20[T]}, {3[-y+x < 0], 12[T], 21[T]}]

Backtrack

	Trace

	14[T]
	
	Blocked

	[{}, {3[-y+x > 0], 12[T], 20[T], 21[T]}]

Step with 3

	Trace

	14[T], 3[(-y+x < 0)]
	
	Blocked

	[{}, {3[-y+x > 0], 12[T], 20[T], 21[T]}, {}]

Step with 18

	Trace

	14[T], 3[(-y+x < 0)], 18[(-y+x <= 0)]
	
	Blocked

	[{}, {3[-y+x > 0], 12[T], 20[T], 21[T]}, {}, {}]

Step with 19

	Trace

	14[T], 3[(-y+x < 0)], 18[(-y+x <= 0)], 19[T]
	
	Blocked

	[{}, {3[-y+x > 0], 12[T], 20[T], 21[T]}, {}, {}, {}]

Covered

	Trace

	14[T], 3[(-y+x < 0)], 18[(-y+x <= 0)]
	
	Blocked

	[{}, {3[-y+x > 0], 12[T], 20[T], 21[T]}, {}, {19[T]}]

Backtrack

	Trace

	14[T], 3[(-y+x < 0)]
	
	Blocked

	[{}, {3[-y+x > 0], 12[T], 20[T], 21[T]}, {18[T]}]

Backtrack

	Trace

	14[T]
	
	Blocked

	[{}, {3[(-y+x < 0 /\ -y+x > 0)], 12[T], 20[T], 21[T]}]

Backtrack

	Trace

	Blocked

	[{14[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
