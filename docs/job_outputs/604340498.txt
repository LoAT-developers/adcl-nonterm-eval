YES

Solver Timeout: 4
Global Timeout: 300
Maximum number of concurrent processes: 900
*******************************************************************************************
*********************** UNPROCESSED TRANSITION SYSTEMS PER FUNCTION ***********************
*******************************************************************************************


List of LLVMGraphs + assumeNodes + staticAssertNodes [1] :

+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++
+                                                                  +
Init Location: 0
Transitions:
<l0, l1, true, seq{main__func_return_ -> 0, main_a -> Â¿functionCall(__VERIFIER_nondet_int), main_b -> Â¿functionCall(__VERIFIER_nondet_int), main_x -> Â¿functionCall(__VERIFIER_nondet_int), main_y -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l1, l9, not((main_a = (main_b + 1)))>
<l1, l2, (main_a = (main_b + 1))>
<l2, l3, (main_x < 0)>
<l2, l9, not((main_x < 0))>
<l3, l4, true>
<l4, l5, not((main_x >= 0))>
<l4, l6, (main_x >= 0)>
<l5, l8, not((main_y >= 0))>
<l5, l6, (main_y >= 0)>
<l6, l7, true, seq{main_x -> (((main_x + main_a) - main_b) - 1), main_y -> (((main_y + main_b) - main_a) - 1)}>
<l7, l4, true>
<l8, l9, true>
<l9, l10, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

+ Assume Nodes [0]: ++++++++++++++++++++++++++++++++++++++++++++++++
       
+ Static Assert Nodes [0]: +++++++++++++++++++++++++++++++++++++++++
       
+ After preprocess (paralelization): ++++++++++++++++++++++++++++++

Init Location: 0
Transitions:
<l0, l11, true, seq{main__func_return_ -> 0}>
<l11, l12, true, seq{varCall_1 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l12, l13, true, seq{main_a -> varCall_1}>
<l13, l14, true, seq{varCall_2 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l14, l15, true, seq{main_b -> varCall_2}>
<l15, l16, true, seq{varCall_3 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l16, l17, true, seq{main_x -> varCall_3}>
<l17, l18, true, seq{varCall_4 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l18, l1, true, seq{main_y -> varCall_4}>
<l1, l2, (main_a = (main_b + 1))>
<l1, l9, not((main_a = (main_b + 1)))>
<l2, l3, (main_x < 0)>
<l2, l9, not((main_x < 0))>
<l3, l4, true>
<l4, l6, (main_x >= 0)>
<l4, l5, not((main_x >= 0))>
<l5, l6, (main_y >= 0)>
<l5, l8, not((main_y >= 0))>
<l6, l7, true, seq{main_x -> (((main_x + main_a) - main_b) - 1), main_y -> (((main_y + main_b) - main_a) - 1)}>
<l7, l4, true>
<l8, l9, true>
<l9, l10, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:
10, 
Accepting locations:

Asserts:

+                                                                  +
+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++


Function Return and Parameters Information [2 functions]:
    function name: __VERIFIER_nondet_int [1 return + 0 parameters]        demangled: __VERIFIER_nondet_int
        __VERIFIER_nondet_int__func_return_      [function result] : int
    function name: main [1 return + 0 parameters]        demangled: main
        main__func_return_      [function result] : int


AST Ident Scanner Information [6 idents]:
__VERIFIER_nondet_int | function | [integer, ()] | <line: 9, col: 1> | <line: 14, col: 9> <line: 15, col: 9> <line: 16, col: 9> <line: 17, col: 9>
main | function | [integer, ()] | <line: 11, col: 1>
x | local variable | integer | <line: 13, col: 5> | <line: 16, col: 5> <line: 18, col: 20> <line: 19, col: 13> <line: 20, col: 7> <line: 20, col: 11>
y | local variable | integer | <line: 13, col: 5> | <line: 17, col: 5> <line: 19, col: 23> <line: 21, col: 7> <line: 21, col: 11>
a | local variable | integer | <line: 13, col: 5> | <line: 14, col: 5> <line: 18, col: 6> <line: 20, col: 15> <line: 21, col: 19>
b | local variable | integer | <line: 13, col: 5> | <line: 15, col: 5> <line: 18, col: 11> <line: 20, col: 19> <line: 21, col: 15>

Main function: main
Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l4, (main_x = undef7) /\ (main_y = undef8) /\ (main_a = undef5) /\ (main_b = undef6) /\ (undef5 = (undef6 + 1)) /\ (undef7 < 0)>
<l0, l10, (main_x = undef7) /\ (main_y = undef8) /\ (main_a = undef5) /\ (main_b = undef6) /\ (undef5 = (undef6 + 1)) /\ not((undef7 < 0))>
<l0, l10, (main_x = undef7) /\ (main_y = undef8) /\ (main_a = undef5) /\ (main_b = undef6) /\ (undef5 < (undef6 + 1))>
<l0, l10, (main_x = undef7) /\ (main_y = undef8) /\ (main_a = undef5) /\ (main_b = undef6) /\ (undef5 > (undef6 + 1))>
<l4, l4, (main_x >= 0), par{main_x -> (((main_x + main_a) - main_b) - 1), main_y -> (((main_y + main_b) - main_a) - 1)}>
<l4, l4, not((main_x >= 0)) /\ (main_y >= 0), par{main_x -> (((main_x + main_a) - main_b) - 1), main_y -> (((main_y + main_b) - main_a) - 1)}>
<l4, l10, not((main_x >= 0)) /\ not((main_y >= 0))>

Fresh variables:
undef5, undef6, undef7, undef8, 

Undef variables:
undef5, undef6, undef7, undef8, 

Abstraction variables:

Exit nodes:
10, 
Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l4, l4, 0 <= main_x, {main_x -> -1 + main_x + main_a - main_b, main_y -> -1 + main_y - main_a + main_b, rest remain the same}>
<l4, l4, 0 <= main_y /\ 1 + main_x <= 0, {main_x -> -1 + main_x + main_a - main_b, main_y -> -1 + main_y - main_a + main_b, rest remain the same}>
Variables:
main_x, main_y, main_a, main_b

Graph 2:
Transitions:
Variables:

Precedence: 
Graph 0

Graph 1
<l0, l4, 1 + undef7 <= 0 /\ main_x = undef7 /\ main_y = undef8 /\ main_a = undef5 /\ main_b = undef6 /\ undef5 = 1 + undef6, {all remain the same}>

Graph 2
<l0, l10, 0 <= undef7 /\ main_x = undef7 /\ main_y = undef8 /\ main_a = undef5 /\ main_b = undef6 /\ undef5 = 1 + undef6, {all remain the same}>
<l0, l10, undef5 <= undef6 /\ main_x = undef7 /\ main_y = undef8 /\ main_a = undef5 /\ main_b = undef6, {all remain the same}>
<l0, l10, 2 + undef6 <= undef5 /\ main_x = undef7 /\ main_y = undef8 /\ main_a = undef5 /\ main_b = undef6, {all remain the same}>
<l4, l10, 1 + main_x <= 0 /\ 1 + main_y <= 0, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 4 , 1 )
( 10 , 2 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.004407

Checking conditional termination of SCC {l4}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000709s

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.002468s
[9224 : 9226]
[9224 : 9227]
Successful child: 9226
[ Invariant Graph ]
[33mStrengthening and disabling transitions...[0m

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l4, l4, main_x + main_a <= main_b /\ 0 <= main_x /\ main_a <= 1 + main_b, {main_x -> -1 + main_x + main_a - main_b, main_y -> -1 + main_y - main_a + main_b, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l4, l4, main_x + main_a <= main_b /\ 0 <= main_y /\ 1 + main_x <= 0 /\ main_a <= 1 + main_b, {main_x -> -1 + main_x + main_a - main_b, main_y -> -1 + main_y - main_a + main_b, rest remain the same}>
[ Termination Graph ]
[33mStrengthening and disabling transitions...[0m

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l4, l4, main_x + main_a <= main_b /\ 0 <= main_x /\ main_a <= 1 + main_b, {main_x -> -1 + main_x + main_a - main_b, main_y -> -1 + main_y - main_a + main_b, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l4, l4, main_x + main_a <= main_b /\ 0 <= main_y /\ 1 + main_x <= 0 /\ main_a <= 1 + main_b, {main_x -> -1 + main_x + main_a - main_b, main_y -> -1 + main_y - main_a + main_b, rest remain the same}>
[33mRanking function: [36m1 + main_x[0m
New Graphs: 
Transitions:
<l4, l4, main_x + main_a <= main_b /\ 0 <= main_y /\ 1 + main_x <= 0 /\ main_a <= 1 + main_b, {main_x -> -1 + main_x + main_a - main_b, main_y -> -1 + main_y - main_a + main_b, rest remain the same}>
Variables:
main_x, main_y, main_a, main_b
Checking conditional termination of SCC {l4}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000461s

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.002005s
[9224 : 9231]
[9224 : 9232]
Successful child: 9231
[ Invariant Graph ]
[33mStrengthening and disabling transitions...[0m

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
It's unfeasible. Removing transition: 
<l4, l4, main_x + main_a <= main_b /\ 0 <= main_x /\ main_a <= 1 + main_b, {main_x -> -1 + main_x + main_a - main_b, main_y -> -1 + main_y - main_a + main_b, rest remain the same}>

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l4, l4, main_x + main_a <= main_b /\ 0 <= main_y /\ 1 + main_x <= 0 /\ main_a = 1 + main_b, {main_x -> -1 + main_x + main_a - main_b, main_y -> -1 + main_y - main_a + main_b, rest remain the same}>
[ Termination Graph ]
[33mStrengthening and disabling transitions...[0m

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
Strengthening transition (result): 
<l4, l4, main_x + main_a <= main_b /\ 0 <= main_y /\ 1 + main_x <= 0 /\ main_a = 1 + main_b, {main_x -> -1 + main_x + main_a - main_b, main_y -> -1 + main_y - main_a + main_b, rest remain the same}>
[33mRanking function: [36mmain_y[0m
New Graphs: 
INVARIANTS: 
4: main_x + main_a <= main_b , main_a <= 1 + main_b , 
Quasi-INVARIANTS to narrow Graph: 
4: 
INVARIANTS: 
4: 1 + main_b <= main_a , 
Quasi-INVARIANTS to narrow Graph: 
4: 
Proving termination of subgraph 2
Analyzing SCC {l10}...
No cycles found.

[32mProgram Terminates[0m
