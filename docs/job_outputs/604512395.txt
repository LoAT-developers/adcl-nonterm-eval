unknown

Initial ITS

Start location: [1]
Program variables: c x y z
   0: [1] -> [2] : x'=nondet, T, cost: 1
   1: [2] -> [3] : y'=nondet1, T, cost: 1
   2: [3] -> [4] : z'=nondet2, T, cost: 1
   3: [4] -> [5] : c'=0, T, cost: 1
   4: [5] -> [6] : (-y+x > 0 /\ -z+x > 0), cost: 1
   9: [5] -> [10] : (-y+x <= 0 \/ -z+x <= 0), cost: 1
   5: [6] -> [7] : y'=1+y, T, cost: 1
   6: [7] -> [8] : z'=1+z, T, cost: 1
   7: [8] -> [9] : c'=1+c, T, cost: 1
   8: [9] -> [5] : T, cost: 1

Chained Linear Paths

Start location: [1]
Program variables: c x y z
  12: [1] -> [5] : c'=0, x'=nondet, y'=nondet1, z'=nondet2, T, cost: 1
   9: [5] -> [10] : (-y+x <= 0 \/ -z+x <= 0), cost: 1
  16: [5] -> [5] : c'=1+c, y'=1+y, z'=1+z, (-y+x > 0 /\ -z+x > 0), cost: 1

	Eliminating location [2] by chaining:

	Applied chaining

	First rule:
	[1] -> [2] : x'=nondet, T, cost: 1
	Second rule:
	[2] -> [3] : y'=nondet1, T, cost: 1
	New rule:
	[1] -> [3] : x'=nondet, y'=nondet1, T, cost: 1
	
	Applied deletion

	Removed the following rules: 0 1
	
	Eliminating location [3] by chaining:

	Applied chaining

	First rule:
	[1] -> [3] : x'=nondet, y'=nondet1, T, cost: 1
	Second rule:
	[3] -> [4] : z'=nondet2, T, cost: 1
	New rule:
	[1] -> [4] : x'=nondet, y'=nondet1, z'=nondet2, T, cost: 1
	
	Applied deletion

	Removed the following rules: 2 10
	
	Eliminating location [4] by chaining:

	Applied chaining

	First rule:
	[1] -> [4] : x'=nondet, y'=nondet1, z'=nondet2, T, cost: 1
	Second rule:
	[4] -> [5] : c'=0, T, cost: 1
	New rule:
	[1] -> [5] : c'=0, x'=nondet, y'=nondet1, z'=nondet2, T, cost: 1
	
	Applied deletion

	Removed the following rules: 3 11
	
	Eliminating location [6] by chaining:

	Applied chaining

	First rule:
	[5] -> [6] : (-y+x > 0 /\ -z+x > 0), cost: 1
	Second rule:
	[6] -> [7] : y'=1+y, T, cost: 1
	New rule:
	[5] -> [7] : y'=1+y, (-y+x > 0 /\ -z+x > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 4 5
	
	Eliminating location [7] by chaining:

	Applied chaining

	First rule:
	[5] -> [7] : y'=1+y, (-y+x > 0 /\ -z+x > 0), cost: 1
	Second rule:
	[7] -> [8] : z'=1+z, T, cost: 1
	New rule:
	[5] -> [8] : y'=1+y, z'=1+z, (-y+x > 0 /\ -z+x > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 6 13
	
	Eliminating location [8] by chaining:

	Applied chaining

	First rule:
	[5] -> [8] : y'=1+y, z'=1+z, (-y+x > 0 /\ -z+x > 0), cost: 1
	Second rule:
	[8] -> [9] : c'=1+c, T, cost: 1
	New rule:
	[5] -> [9] : c'=1+c, y'=1+y, z'=1+z, (-y+x > 0 /\ -z+x > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 7 14
	
	Eliminating location [9] by chaining:

	Applied chaining

	First rule:
	[5] -> [9] : c'=1+c, y'=1+y, z'=1+z, (-y+x > 0 /\ -z+x > 0), cost: 1
	Second rule:
	[9] -> [5] : T, cost: 1
	New rule:
	[5] -> [5] : c'=1+c, y'=1+y, z'=1+z, (-y+x > 0 /\ -z+x > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 8 15

Step with 12

	Trace

	12[T]
	
	Blocked

	[{}, {}]

Step with 9

	Trace

	12[T], 9[(-y+x <= 0)]
	
	Blocked

	[{}, {}, {}]

Backtrack

	Trace

	12[T]
	
	Blocked

	[{}, {9[-y+x <= 0]}]

Step with 9

	Trace

	12[T], 9[(-z+x <= 0)]
	
	Blocked

	[{}, {9[-y+x <= 0]}, {}]

Backtrack

	Trace

	12[T]
	
	Blocked

	[{}, {9[(-y+x <= 0 /\ -z+x <= 0)]}]

Step with 16

	Trace

	12[T], 16[(-y+x > 0 /\ -z+x > 0)]
	
	Blocked

	[{}, {9[T]}, {}]

Accelerate

Start location: [1]
Program variables: c x y z
  12: [1] -> [5] : c'=0, x'=nondet, y'=nondet1, z'=nondet2, T, cost: 1
   9: [5] -> [10] : (-y+x <= 0 \/ -z+x <= 0), cost: 1
  16: [5] -> [5] : c'=1+c, y'=1+y, z'=1+z, (-y+x > 0 /\ -z+x > 0), cost: 1
  17: [5] -> [5] : c'=n+c, y'=n+y, z'=z+n, (1-n-y+x > 0 /\ -1+n >= 0 /\ 1-z-n+x > 0), cost: 1

	Loop Acceleration

	Original rule:
	[5] -> [5] : c'=1+c, y'=1+y, z'=1+z, (-y+x > 0 /\ -z+x > 0), cost: 1
	New rule:
	[5] -> [5] : c'=n+c, y'=n+y, z'=z+n, (1-n-y+x > 0 /\ -1+n >= 0 /\ 1-z-n+x > 0), cost: 1

		-y+x > 0 [0]: montonic decrease yields 1-n-y+x > 0
		
		-y+x > 0 [1]: eventual increase yields (1 <= 0 /\ -y+x > 0)
		
		-z+x > 0 [0]: montonic decrease yields 1-z-n+x > 0
		
		-z+x > 0 [1]: eventual increase yields (1 <= 0 /\ -z+x > 0)
		
		Replacement map: {-y+x > 0 -> 1-n-y+x > 0, -z+x > 0 -> 1-z-n+x > 0}

	Trace

	12[T], 17[(1-n-y+x > 0 /\ -1+n >= 0 /\ 1-z-n+x > 0)]
	
	Blocked

	[{}, {9[T]}, {16[T], 17[T]}]

Step with 9

	Trace

	12[T], 17[(1-n-y+x > 0 /\ -1+n >= 0 /\ 1-z-n+x > 0)], 9[(-y+x <= 0)]
	
	Blocked

	[{}, {9[T]}, {16[T], 17[T]}, {}]

Backtrack

	Trace

	12[T], 17[(1-n-y+x > 0 /\ -1+n >= 0 /\ 1-z-n+x > 0)]
	
	Blocked

	[{}, {9[T]}, {9[-y+x <= 0], 16[T], 17[T]}]

Step with 9

	Trace

	12[T], 17[(1-n-y+x > 0 /\ -1+n >= 0 /\ 1-z-n+x > 0)], 9[(-z+x <= 0)]
	
	Blocked

	[{}, {9[T]}, {9[-y+x <= 0], 16[T], 17[T]}, {}]

Backtrack

	Trace

	12[T], 17[(1-n-y+x > 0 /\ -1+n >= 0 /\ 1-z-n+x > 0)]
	
	Blocked

	[{}, {9[T]}, {9[(-y+x <= 0 /\ -z+x <= 0)], 16[T], 17[T]}]

Backtrack

	Trace

	12[T]
	
	Blocked

	[{}, {9[T], 17[T]}]

Step with 16

	Trace

	12[T], 16[(-y+x > 0 /\ -z+x > 0)]
	
	Blocked

	[{}, {9[T], 17[T]}, {}]

Covered

	Trace

	12[T]
	
	Blocked

	[{}, {9[T], 16[T], 17[T]}]

Backtrack

	Trace

	Blocked

	[{12[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
