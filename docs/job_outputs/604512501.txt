unknown

Initial ITS

Start location: [1]
Program variables: res x y
   0: [1] -> [2] : x'=nondet, T, cost: 1
   1: [2] -> [3] : y'=2, T, cost: 1
   2: [3] -> [4] : res'=1, T, cost: 1
   3: [4] -> [6] : (-1+y < 0 \/ x < 0), cost: 1
   5: [4] -> [7] : (-1+y >= 0 /\ x >= 0), cost: 1
   4: [6] -> [5] : T, cost: 1
   6: [7] -> [8] : -y+x > 0, cost: 1
  10: [7] -> [11] : -y+x <= 0, cost: 1
   7: [8] -> [9] : y'=y^2, T, cost: 1
   8: [9] -> [10] : res'=2*res, T, cost: 1
   9: [10] -> [7] : T, cost: 1
  11: [11] -> [5] : T, cost: 1

Chained Linear Paths

Start location: [1]
Program variables: res x y
  13: [1] -> [4] : res'=1, x'=nondet, y'=2, T, cost: 1
   5: [4] -> [7] : (-1+y >= 0 /\ x >= 0), cost: 1
  14: [4] -> [5] : (-1+y < 0 \/ x < 0), cost: 1
  16: [7] -> [5] : -y+x <= 0, cost: 1
  18: [7] -> [7] : res'=2*res, y'=y^2, -y+x > 0, cost: 1

	Eliminating location [2] by chaining:

	Applied chaining

	First rule:
	[1] -> [2] : x'=nondet, T, cost: 1
	Second rule:
	[2] -> [3] : y'=2, T, cost: 1
	New rule:
	[1] -> [3] : x'=nondet, y'=2, T, cost: 1
	
	Applied deletion

	Removed the following rules: 0 1
	
	Eliminating location [3] by chaining:

	Applied chaining

	First rule:
	[1] -> [3] : x'=nondet, y'=2, T, cost: 1
	Second rule:
	[3] -> [4] : res'=1, T, cost: 1
	New rule:
	[1] -> [4] : res'=1, x'=nondet, y'=2, T, cost: 1
	
	Applied deletion

	Removed the following rules: 2 12
	
	Eliminating location [6] by chaining:

	Applied chaining

	First rule:
	[4] -> [6] : (-1+y < 0 \/ x < 0), cost: 1
	Second rule:
	[6] -> [5] : T, cost: 1
	New rule:
	[4] -> [5] : (-1+y < 0 \/ x < 0), cost: 1
	
	Applied deletion

	Removed the following rules: 3 4
	
	Eliminating location [8] by chaining:

	Applied chaining

	First rule:
	[7] -> [8] : -y+x > 0, cost: 1
	Second rule:
	[8] -> [9] : y'=y^2, T, cost: 1
	New rule:
	[7] -> [9] : y'=y^2, -y+x > 0, cost: 1
	
	Applied deletion

	Removed the following rules: 6 7
	
	Eliminating location [11] by chaining:

	Applied chaining

	First rule:
	[7] -> [11] : -y+x <= 0, cost: 1
	Second rule:
	[11] -> [5] : T, cost: 1
	New rule:
	[7] -> [5] : -y+x <= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 10 11
	
	Eliminating location [9] by chaining:

	Applied chaining

	First rule:
	[7] -> [9] : y'=y^2, -y+x > 0, cost: 1
	Second rule:
	[9] -> [10] : res'=2*res, T, cost: 1
	New rule:
	[7] -> [10] : res'=2*res, y'=y^2, -y+x > 0, cost: 1
	
	Applied deletion

	Removed the following rules: 8 15
	
	Eliminating location [10] by chaining:

	Applied chaining

	First rule:
	[7] -> [10] : res'=2*res, y'=y^2, -y+x > 0, cost: 1
	Second rule:
	[10] -> [7] : T, cost: 1
	New rule:
	[7] -> [7] : res'=2*res, y'=y^2, -y+x > 0, cost: 1
	
	Applied deletion

	Removed the following rules: 9 17

Step with 13

	Trace

	13[T]
	
	Blocked

	[{}, {}]

Step with 5

	Trace

	13[T], 5[(-1+y >= 0 /\ x >= 0)]
	
	Blocked

	[{}, {}, {}]

Step with 16

	Trace

	13[T], 5[(-1+y >= 0 /\ x >= 0)], 16[(-y+x <= 0)]
	
	Blocked

	[{}, {}, {}, {}]

Backtrack

	Trace

	13[T], 5[(-1+y >= 0 /\ x >= 0)]
	
	Blocked

	[{}, {}, {16[T]}]

Step with 18

	Trace

	13[T], 5[(-1+y >= 0 /\ x >= 0)], 18[(-y+x > 0)]
	
	Blocked

	[{}, {}, {16[T]}, {}]

Accelerate and Drop

Start location: [1]
Program variables: res x y
  13: [1] -> [4] : res'=1, x'=nondet, y'=2, T, cost: 1
   5: [4] -> [7] : (-1+y >= 0 /\ x >= 0), cost: 1
  14: [4] -> [5] : (-1+y < 0 \/ x < 0), cost: 1
  16: [7] -> [5] : -y+x <= 0, cost: 1
  18: [7] -> [7] : res'=2*res, y'=y^2, -y+x > 0, cost: 1
  19: [7] -> LoAT_sink : (-y+y^2 <= 0 /\ -y+x > 0), cost: NONTERM

	Certificate of Non-Termination

	Original rule:
	[7] -> [7] : res'=2*res, y'=y^2, (-y+x > 0), cost: 1
	New rule:
	[7] -> LoAT_sink : (-y+y^2 <= 0 /\ -y+x > 0), cost: NONTERM

		-y+x > 0 [0]: montonic decrease yields -y^(2^(-1+n))+x > 0
		
		-y+x > 0 [1]: eventual increase yields (-y+y^2 <= 0 /\ -y+x > 0)
		
		Replacement map: {-y+x > 0 -> (-y+y^2 <= 0 /\ -y+x > 0)}

	Trace

	13[T], 5[(-1+y >= 0 /\ x >= 0)]
	
	Blocked

	[{}, {}, {16[T], 18[T]}]

Backtrack

	Trace

	13[T]
	
	Blocked

	[{}, {5[T]}]

Step with 14

	Trace

	13[T], 14[(x < 0)]
	
	Blocked

	[{}, {5[T]}, {}]

Backtrack

	Trace

	13[T]
	
	Blocked

	[{}, {5[T], 14[x < 0]}]

Backtrack

	Trace

	Blocked

	[{13[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
