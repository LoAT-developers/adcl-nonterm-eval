NO

Initial ITS

Start location: __init
Program variables: arg1 arg2
   0: f1_0_main_ConstantStackPush -> f162_0_main_GE : arg1'=arg1p1, arg2'=arg2p1, (100-arg2p1 == 0 /\ -arg1p1 == 0), cost: 1
   1: f162_0_main_GE -> f162_0_main_GE : arg1'=arg1p2, arg2'=arg2p2, (-2-arg1+arg2 > 0 /\ -arg1+arg2 > 0 /\ -arg2p2+arg2 == 0 /\ 1+arg1-arg1p2 == 0), cost: 1
   2: f162_0_main_GE -> f162_0_main_GE : arg1'=arg1p3, arg2'=arg2p3, (-1-arg1p3+arg2 == 0 /\ 2+arg1-arg2 == 0 /\ -2 < 0 /\ 1+arg2-arg2p3 == 0), cost: 1
   3: __init -> f1_0_main_ConstantStackPush : arg1'=arg1p4, arg2'=arg2p4, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2
   1: f162_0_main_GE -> f162_0_main_GE : arg1'=arg1p2, arg2'=arg2p2, (-2-arg1+arg2 > 0 /\ -arg1+arg2 > 0 /\ -arg2p2+arg2 == 0 /\ 1+arg1-arg1p2 == 0), cost: 1
   2: f162_0_main_GE -> f162_0_main_GE : arg1'=arg1p3, arg2'=arg2p3, (-1-arg1p3+arg2 == 0 /\ 2+arg1-arg2 == 0 /\ -2 < 0 /\ 1+arg2-arg2p3 == 0), cost: 1
   4: __init -> f162_0_main_GE : arg1'=arg1p1, arg2'=arg2p1, (100-arg2p1 == 0 /\ -arg1p1 == 0), cost: 1

	Eliminating location f1_0_main_ConstantStackPush by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_ConstantStackPush : arg1'=arg1p4, arg2'=arg2p4, T, cost: 1
	Second rule:
	f1_0_main_ConstantStackPush -> f162_0_main_GE : arg1'=arg1p1, arg2'=arg2p1, (100-arg2p1 == 0 /\ -arg1p1 == 0), cost: 1
	New rule:
	__init -> f162_0_main_GE : arg1'=arg1p1, arg2'=arg2p1, (100-arg2p1 == 0 /\ -arg1p1 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 3

Simplified Transitions

Start location: __init
Program variables: arg1 arg2
   5: f162_0_main_GE -> f162_0_main_GE : arg1'=1+arg1, (-2-arg1+arg2 > 0 /\ -arg1+arg2 > 0), cost: 1
   6: f162_0_main_GE -> f162_0_main_GE : arg1'=-1+arg2, arg2'=1+arg2, 2+arg1-arg2 == 0, cost: 1
   7: __init -> f162_0_main_GE : arg1'=0, arg2'=100, T, cost: 1

	Propagated Equalities

	Original rule:
	f162_0_main_GE -> f162_0_main_GE : arg1'=arg1p2, arg2'=arg2p2, (-2-arg1+arg2 > 0 /\ -arg1+arg2 > 0 /\ -arg2p2+arg2 == 0 /\ 1+arg1-arg1p2 == 0), cost: 1
	New rule:
	f162_0_main_GE -> f162_0_main_GE : arg1'=1+arg1, arg2'=arg2, (0 == 0 /\ -2-arg1+arg2 > 0 /\ -arg1+arg2 > 0), cost: 1
	
		propagated equality arg2p2 = arg2
		
		propagated equality arg1p2 = 1+arg1
		
	Simplified Guard

	Original rule:
	f162_0_main_GE -> f162_0_main_GE : arg1'=1+arg1, arg2'=arg2, (0 == 0 /\ -2-arg1+arg2 > 0 /\ -arg1+arg2 > 0), cost: 1
	New rule:
	f162_0_main_GE -> f162_0_main_GE : arg1'=1+arg1, arg2'=arg2, (-2-arg1+arg2 > 0 /\ -arg1+arg2 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f162_0_main_GE -> f162_0_main_GE : arg1'=1+arg1, arg2'=arg2, (-2-arg1+arg2 > 0 /\ -arg1+arg2 > 0), cost: 1
	New rule:
	f162_0_main_GE -> f162_0_main_GE : arg1'=1+arg1, (-2-arg1+arg2 > 0 /\ -arg1+arg2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f162_0_main_GE -> f162_0_main_GE : arg1'=arg1p3, arg2'=arg2p3, (-1-arg1p3+arg2 == 0 /\ 2+arg1-arg2 == 0 /\ -2 < 0 /\ 1+arg2-arg2p3 == 0), cost: 1
	New rule:
	f162_0_main_GE -> f162_0_main_GE : arg1'=-1+arg2, arg2'=1+arg2, (0 == 0 /\ 2+arg1-arg2 == 0 /\ -2 < 0), cost: 1
	
		propagated equality arg1p3 = -1+arg2
		
		propagated equality arg2p3 = 1+arg2
		
	Simplified Guard

	Original rule:
	f162_0_main_GE -> f162_0_main_GE : arg1'=-1+arg2, arg2'=1+arg2, (0 == 0 /\ 2+arg1-arg2 == 0 /\ -2 < 0), cost: 1
	New rule:
	f162_0_main_GE -> f162_0_main_GE : arg1'=-1+arg2, arg2'=1+arg2, 2+arg1-arg2 == 0, cost: 1
	
	Propagated Equalities

	Original rule:
	__init -> f162_0_main_GE : arg1'=arg1p1, arg2'=arg2p1, (100-arg2p1 == 0 /\ -arg1p1 == 0), cost: 1
	New rule:
	__init -> f162_0_main_GE : arg1'=0, arg2'=100, 0 == 0, cost: 1
	
		propagated equality arg2p1 = 100
		
		propagated equality arg1p1 = 0
		
	Simplified Guard

	Original rule:
	__init -> f162_0_main_GE : arg1'=0, arg2'=100, 0 == 0, cost: 1
	New rule:
	__init -> f162_0_main_GE : arg1'=0, arg2'=100, T, cost: 1

Step with 7

	Trace

	7[T]
	
	Blocked

	[{}, {}]

Step with 5

	Trace

	7[T], 5[(-2-arg1+arg2 > 0 /\ -arg1+arg2 > 0)]
	
	Blocked

	[{}, {}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2
   5: f162_0_main_GE -> f162_0_main_GE : arg1'=1+arg1, (-2-arg1+arg2 > 0 /\ -arg1+arg2 > 0), cost: 1
   6: f162_0_main_GE -> f162_0_main_GE : arg1'=-1+arg2, arg2'=1+arg2, 2+arg1-arg2 == 0, cost: 1
   8: f162_0_main_GE -> f162_0_main_GE : arg1'=arg1+n, (-1+n >= 0 /\ -arg1+arg2 > 0 /\ -1-arg1-n+arg2 > 0), cost: 1
   7: __init -> f162_0_main_GE : arg1'=0, arg2'=100, T, cost: 1

	Loop Acceleration

	Original rule:
	f162_0_main_GE -> f162_0_main_GE : arg1'=1+arg1, (-2-arg1+arg2 > 0 /\ -arg1+arg2 > 0), cost: 1
	New rule:
	f162_0_main_GE -> f162_0_main_GE : arg1'=arg1+n, (-1+n >= 0 /\ -arg1+arg2 > 0 /\ -1-arg1-n+arg2 > 0), cost: 1

		-2-arg1+arg2 > 0 [0]: montonic decrease yields -1-arg1-n+arg2 > 0
		
		-2-arg1+arg2 > 0 [1]: eventual increase yields (1 <= 0 /\ -2-arg1+arg2 > 0)
		
		-arg1+arg2 > 0 [0]: monotonic increase yields -arg1+arg2 > 0, dependencies: -2-arg1+arg2 > 0
		
		Replacement map: {-2-arg1+arg2 > 0 -> -1-arg1-n+arg2 > 0, -arg1+arg2 > 0 -> -arg1+arg2 > 0}

	Trace

	7[T], 8[(-1+n >= 0 /\ -arg1+arg2 > 0 /\ -1-arg1-n+arg2 > 0)]
	
	Blocked

	[{}, {}, {5[T], 8[T]}]

Step with 6

	Trace

	7[T], 8[(-1+n >= 0 /\ -arg1+arg2 > 0 /\ -1-arg1-n+arg2 > 0)], 6[(2+arg1-arg2 == 0)]
	
	Blocked

	[{}, {}, {5[T], 8[T]}, {}]

Nonterm

Start location: __init
Program variables: arg1 arg2
   5: f162_0_main_GE -> f162_0_main_GE : arg1'=1+arg1, (-2-arg1+arg2 > 0 /\ -arg1+arg2 > 0), cost: 1
   6: f162_0_main_GE -> f162_0_main_GE : arg1'=-1+arg2, arg2'=1+arg2, 2+arg1-arg2 == 0, cost: 1
   8: f162_0_main_GE -> f162_0_main_GE : arg1'=arg1+n, (-1+n >= 0 /\ -arg1+arg2 > 0 /\ -1-arg1-n+arg2 > 0), cost: 1
   9: f162_0_main_GE -> LoAT_sink : (2+arg1-arg2 >= 0 /\ -2-arg1+arg2 >= 0 /\ -1+n2 >= 0), cost: NONTERM
  10: f162_0_main_GE -> f162_0_main_GE : arg1'=-2+arg2+n2, arg2'=arg2+n2, (2+arg1-arg2 >= 0 /\ -2-arg1+arg2 >= 0 /\ -1+n2 >= 0), cost: 1
   7: __init -> f162_0_main_GE : arg1'=0, arg2'=100, T, cost: 1

	Certificate of Non-Termination

	Original rule:
	f162_0_main_GE -> f162_0_main_GE : arg1'=-1+arg2, arg2'=1+arg2, (2+arg1-arg2 == 0), cost: 1
	New rule:
	f162_0_main_GE -> LoAT_sink : (2+arg1-arg2 >= 0 /\ -2-arg1+arg2 >= 0 /\ -1+n2 >= 0), cost: NONTERM

		2+arg1-arg2 >= 0 [0]: monotonic increase yields 2+arg1-arg2 >= 0
		
		-2-arg1+arg2 >= 0 [0]: monotonic increase yields -2-arg1+arg2 >= 0
		
		Replacement map: {2+arg1-arg2 >= 0 -> 2+arg1-arg2 >= 0, -2-arg1+arg2 >= 0 -> -2-arg1+arg2 >= 0}

	Loop Acceleration

	Original rule:
	f162_0_main_GE -> f162_0_main_GE : arg1'=-1+arg2, arg2'=1+arg2, (2+arg1-arg2 == 0), cost: 1
	New rule:
	f162_0_main_GE -> f162_0_main_GE : arg1'=-2+arg2+n2, arg2'=arg2+n2, (2+arg1-arg2 >= 0 /\ -2-arg1+arg2 >= 0 /\ -1+n2 >= 0), cost: 1

		2+arg1-arg2 >= 0 [0]: monotonic increase yields 2+arg1-arg2 >= 0
		
		-2-arg1+arg2 >= 0 [0]: monotonic increase yields -2-arg1+arg2 >= 0
		
		Replacement map: {2+arg1-arg2 >= 0 -> 2+arg1-arg2 >= 0, -2-arg1+arg2 >= 0 -> -2-arg1+arg2 >= 0}

Step with 9

	Trace

	7[T], 8[(-1+n >= 0 /\ -arg1+arg2 > 0 /\ -1-arg1-n+arg2 > 0)], 9[(2+arg1-arg2 >= 0 /\ -2-arg1+arg2 >= 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {}, {5[T], 8[T]}, {9[T]}]

Refute

	Counterexample

	[ arg1=0 arg2=100 ] 7 [ arg1=98 arg2=100 ] 8 [ arg1=arg1 arg2=arg2 ] 9
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
