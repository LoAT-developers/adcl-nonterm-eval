NO

Initial ITS

Start location: l8
Program variables: tmp2^0 x^0
   0: l0 -> l1 : tmp2^0'=tmp2^post1, x^0'=x^post1, (x^0-x^post1 == 0 /\ -tmp2^post1+tmp2^0 == 0), cost: 1
   4: l1 -> l2 : tmp2^0'=tmp2^post5, x^0'=x^post5, (0 == 0 /\ x^0-x^post5 == 0), cost: 1
   1: l2 -> l3 : tmp2^0'=tmp2^post2, x^0'=x^post2, (-tmp2^0 <= 0 /\ tmp2^0 <= 0 /\ x^1 == 0 /\ -tmp2^post2+tmp2^0 == 0 /\ -1+x^post2 == 0), cost: 1
   2: l2 -> l0 : tmp2^0'=tmp2^post3, x^0'=x^post3, (tmp2^0-tmp2^post3 == 0 /\ 1-tmp2^0 <= 0 /\ -x^post3+x^0 == 0), cost: 1
   3: l2 -> l0 : tmp2^0'=tmp2^post4, x^0'=x^post4, (1+tmp2^0 <= 0 /\ x^0-x^post4 == 0 /\ -tmp2^post4+tmp2^0 == 0), cost: 1
   5: l3 -> l4 : tmp2^0'=tmp2^post6, x^0'=x^post6, (-x^post6+x^0 == 0 /\ tmp2^0-tmp2^post6 == 0), cost: 1
   6: l4 -> l3 : tmp2^0'=tmp2^post7, x^0'=x^post7, (x^0-x^post7 == 0 /\ -tmp2^post7+tmp2^0 == 0), cost: 1
   7: l5 -> l6 : tmp2^0'=tmp2^post8, x^0'=x^post8, (tmp2^0-tmp2^post8 == 0 /\ -x^post8+x^0 == 0), cost: 1
   8: l7 -> l1 : tmp2^0'=tmp2^post9, x^0'=x^post9, (-tmp2^post9+tmp2^0 == 0 /\ -1+x^post9 == 0), cost: 1
   9: l8 -> l7 : tmp2^0'=tmp2^post10, x^0'=x^post10, (x^0-x^post10 == 0 /\ -tmp2^post10+tmp2^0 == 0), cost: 1

Chained Linear Paths

Start location: l8
Program variables: tmp2^0 x^0
   0: l0 -> l1 : tmp2^0'=tmp2^post1, x^0'=x^post1, (x^0-x^post1 == 0 /\ -tmp2^post1+tmp2^0 == 0), cost: 1
   4: l1 -> l2 : tmp2^0'=tmp2^post5, x^0'=x^post5, (0 == 0 /\ x^0-x^post5 == 0), cost: 1
   1: l2 -> l3 : tmp2^0'=tmp2^post2, x^0'=x^post2, (-tmp2^0 <= 0 /\ tmp2^0 <= 0 /\ x^1 == 0 /\ -tmp2^post2+tmp2^0 == 0 /\ -1+x^post2 == 0), cost: 1
   2: l2 -> l0 : tmp2^0'=tmp2^post3, x^0'=x^post3, (tmp2^0-tmp2^post3 == 0 /\ 1-tmp2^0 <= 0 /\ -x^post3+x^0 == 0), cost: 1
   3: l2 -> l0 : tmp2^0'=tmp2^post4, x^0'=x^post4, (1+tmp2^0 <= 0 /\ x^0-x^post4 == 0 /\ -tmp2^post4+tmp2^0 == 0), cost: 1
  11: l3 -> l3 : tmp2^0'=tmp2^post7, x^0'=x^post7, (x^post6-x^post7 == 0 /\ -tmp2^post7+tmp2^post6 == 0 /\ -x^post6+x^0 == 0 /\ tmp2^0-tmp2^post6 == 0), cost: 1
   7: l5 -> l6 : tmp2^0'=tmp2^post8, x^0'=x^post8, (tmp2^0-tmp2^post8 == 0 /\ -x^post8+x^0 == 0), cost: 1
  10: l8 -> l1 : tmp2^0'=tmp2^post9, x^0'=x^post9, (x^0-x^post10 == 0 /\ tmp2^post10-tmp2^post9 == 0 /\ -tmp2^post10+tmp2^0 == 0 /\ -1+x^post9 == 0), cost: 1

	Eliminating location l7 by chaining:

	Applied chaining

	First rule:
	l8 -> l7 : tmp2^0'=tmp2^post10, x^0'=x^post10, (x^0-x^post10 == 0 /\ -tmp2^post10+tmp2^0 == 0), cost: 1
	Second rule:
	l7 -> l1 : tmp2^0'=tmp2^post9, x^0'=x^post9, (-tmp2^post9+tmp2^0 == 0 /\ -1+x^post9 == 0), cost: 1
	New rule:
	l8 -> l1 : tmp2^0'=tmp2^post9, x^0'=x^post9, (x^0-x^post10 == 0 /\ tmp2^post10-tmp2^post9 == 0 /\ -tmp2^post10+tmp2^0 == 0 /\ -1+x^post9 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 8 9
	
	Eliminating location l4 by chaining:

	Applied chaining

	First rule:
	l3 -> l4 : tmp2^0'=tmp2^post6, x^0'=x^post6, (-x^post6+x^0 == 0 /\ tmp2^0-tmp2^post6 == 0), cost: 1
	Second rule:
	l4 -> l3 : tmp2^0'=tmp2^post7, x^0'=x^post7, (x^0-x^post7 == 0 /\ -tmp2^post7+tmp2^0 == 0), cost: 1
	New rule:
	l3 -> l3 : tmp2^0'=tmp2^post7, x^0'=x^post7, (x^post6-x^post7 == 0 /\ -tmp2^post7+tmp2^post6 == 0 /\ -x^post6+x^0 == 0 /\ tmp2^0-tmp2^post6 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 5 6

Simplified Transitions

Start location: l8
Program variables: tmp2^0 x^0
  12: l0 -> l1 : T, cost: 1
  16: l1 -> l2 : tmp2^0'=tmp2^post5, T, cost: 1
  13: l2 -> l3 : x^0'=1, (-tmp2^0 <= 0 /\ -tmp2^0 == 0 /\ tmp2^0 <= 0), cost: 1
  14: l2 -> l0 : 1-tmp2^0 <= 0, cost: 1
  15: l2 -> l0 : 1+tmp2^0 <= 0, cost: 1
  19: l3 -> l3 : T, cost: 1
  17: l5 -> l6 : T, cost: 1
  18: l8 -> l1 : x^0'=1, T, cost: 1

	Propagated Equalities

	Original rule:
	l0 -> l1 : tmp2^0'=tmp2^post1, x^0'=x^post1, (x^0-x^post1 == 0 /\ -tmp2^post1+tmp2^0 == 0), cost: 1
	New rule:
	l0 -> l1 : tmp2^0'=tmp2^0, x^0'=x^0, 0 == 0, cost: 1
	
		propagated equality x^post1 = x^0
		
		propagated equality tmp2^post1 = tmp2^0
		
	Simplified Guard

	Original rule:
	l0 -> l1 : tmp2^0'=tmp2^0, x^0'=x^0, 0 == 0, cost: 1
	New rule:
	l0 -> l1 : tmp2^0'=tmp2^0, x^0'=x^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l1 : tmp2^0'=tmp2^0, x^0'=x^0, T, cost: 1
	New rule:
	l0 -> l1 : T, cost: 1
	
	made implied equalities explicit

	Original rule:
	l2 -> l3 : tmp2^0'=tmp2^post2, x^0'=x^post2, (-tmp2^0 <= 0 /\ tmp2^0 <= 0 /\ x^1 == 0 /\ -tmp2^post2+tmp2^0 == 0 /\ -1+x^post2 == 0), cost: 1
	New rule:
	l2 -> l3 : tmp2^0'=tmp2^post2, x^0'=x^post2, (-tmp2^0 <= 0 /\ -tmp2^0 == 0 /\ tmp2^0 <= 0 /\ x^1 == 0 /\ -tmp2^post2+tmp2^0 == 0 /\ -1+x^post2 == 0), cost: 1
	
	Propagated Equalities

	Original rule:
	l2 -> l3 : tmp2^0'=tmp2^post2, x^0'=x^post2, (-tmp2^0 <= 0 /\ -tmp2^0 == 0 /\ tmp2^0 <= 0 /\ x^1 == 0 /\ -tmp2^post2+tmp2^0 == 0 /\ -1+x^post2 == 0), cost: 1
	New rule:
	l2 -> l3 : tmp2^0'=tmp2^0, x^0'=1, (0 == 0 /\ -tmp2^0 <= 0 /\ -tmp2^0 == 0 /\ tmp2^0 <= 0 /\ x^1 == 0), cost: 1
	
		propagated equality tmp2^post2 = tmp2^0
		
		propagated equality x^post2 = 1
		
	Propagated Equalities

	Original rule:
	l2 -> l3 : tmp2^0'=tmp2^0, x^0'=1, (0 == 0 /\ -tmp2^0 <= 0 /\ -tmp2^0 == 0 /\ tmp2^0 <= 0 /\ x^1 == 0), cost: 1
	New rule:
	l2 -> l3 : tmp2^0'=tmp2^0, x^0'=1, (0 == 0 /\ -tmp2^0 <= 0 /\ -tmp2^0 == 0 /\ tmp2^0 <= 0), cost: 1
	
		propagated equality x^1 = 0
		
	Simplified Guard

	Original rule:
	l2 -> l3 : tmp2^0'=tmp2^0, x^0'=1, (0 == 0 /\ -tmp2^0 <= 0 /\ -tmp2^0 == 0 /\ tmp2^0 <= 0), cost: 1
	New rule:
	l2 -> l3 : tmp2^0'=tmp2^0, x^0'=1, (-tmp2^0 <= 0 /\ -tmp2^0 == 0 /\ tmp2^0 <= 0), cost: 1
	
	made implied equalities explicit

	Original rule:
	l2 -> l3 : tmp2^0'=tmp2^0, x^0'=1, (-tmp2^0 <= 0 /\ -tmp2^0 == 0 /\ tmp2^0 <= 0), cost: 1
	New rule:
	l2 -> l3 : tmp2^0'=tmp2^0, x^0'=1, (-tmp2^0 <= 0 /\ -tmp2^0 == 0 /\ tmp2^0 <= 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	l2 -> l3 : tmp2^0'=tmp2^0, x^0'=1, (-tmp2^0 <= 0 /\ -tmp2^0 == 0 /\ tmp2^0 <= 0), cost: 1
	New rule:
	l2 -> l3 : x^0'=1, (-tmp2^0 <= 0 /\ -tmp2^0 == 0 /\ tmp2^0 <= 0), cost: 1
	
	Propagated Equalities

	Original rule:
	l2 -> l0 : tmp2^0'=tmp2^post3, x^0'=x^post3, (tmp2^0-tmp2^post3 == 0 /\ 1-tmp2^0 <= 0 /\ -x^post3+x^0 == 0), cost: 1
	New rule:
	l2 -> l0 : tmp2^0'=tmp2^0, x^0'=x^0, (0 == 0 /\ 1-tmp2^0 <= 0), cost: 1
	
		propagated equality tmp2^post3 = tmp2^0
		
		propagated equality x^post3 = x^0
		
	Simplified Guard

	Original rule:
	l2 -> l0 : tmp2^0'=tmp2^0, x^0'=x^0, (0 == 0 /\ 1-tmp2^0 <= 0), cost: 1
	New rule:
	l2 -> l0 : tmp2^0'=tmp2^0, x^0'=x^0, 1-tmp2^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l2 -> l0 : tmp2^0'=tmp2^0, x^0'=x^0, 1-tmp2^0 <= 0, cost: 1
	New rule:
	l2 -> l0 : 1-tmp2^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l2 -> l0 : tmp2^0'=tmp2^post4, x^0'=x^post4, (1+tmp2^0 <= 0 /\ x^0-x^post4 == 0 /\ -tmp2^post4+tmp2^0 == 0), cost: 1
	New rule:
	l2 -> l0 : tmp2^0'=tmp2^0, x^0'=x^0, (0 == 0 /\ 1+tmp2^0 <= 0), cost: 1
	
		propagated equality x^post4 = x^0
		
		propagated equality tmp2^post4 = tmp2^0
		
	Simplified Guard

	Original rule:
	l2 -> l0 : tmp2^0'=tmp2^0, x^0'=x^0, (0 == 0 /\ 1+tmp2^0 <= 0), cost: 1
	New rule:
	l2 -> l0 : tmp2^0'=tmp2^0, x^0'=x^0, 1+tmp2^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l2 -> l0 : tmp2^0'=tmp2^0, x^0'=x^0, 1+tmp2^0 <= 0, cost: 1
	New rule:
	l2 -> l0 : 1+tmp2^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l1 -> l2 : tmp2^0'=tmp2^post5, x^0'=x^post5, (0 == 0 /\ x^0-x^post5 == 0), cost: 1
	New rule:
	l1 -> l2 : tmp2^0'=tmp2^post5, x^0'=x^0, 0 == 0, cost: 1
	
		propagated equality x^post5 = x^0
		
	Simplified Guard

	Original rule:
	l1 -> l2 : tmp2^0'=tmp2^post5, x^0'=x^0, 0 == 0, cost: 1
	New rule:
	l1 -> l2 : tmp2^0'=tmp2^post5, x^0'=x^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l1 -> l2 : tmp2^0'=tmp2^post5, x^0'=x^0, T, cost: 1
	New rule:
	l1 -> l2 : tmp2^0'=tmp2^post5, T, cost: 1
	
	Propagated Equalities

	Original rule:
	l5 -> l6 : tmp2^0'=tmp2^post8, x^0'=x^post8, (tmp2^0-tmp2^post8 == 0 /\ -x^post8+x^0 == 0), cost: 1
	New rule:
	l5 -> l6 : tmp2^0'=tmp2^0, x^0'=x^0, 0 == 0, cost: 1
	
		propagated equality tmp2^post8 = tmp2^0
		
		propagated equality x^post8 = x^0
		
	Simplified Guard

	Original rule:
	l5 -> l6 : tmp2^0'=tmp2^0, x^0'=x^0, 0 == 0, cost: 1
	New rule:
	l5 -> l6 : tmp2^0'=tmp2^0, x^0'=x^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l5 -> l6 : tmp2^0'=tmp2^0, x^0'=x^0, T, cost: 1
	New rule:
	l5 -> l6 : T, cost: 1
	
	Propagated Equalities

	Original rule:
	l8 -> l1 : tmp2^0'=tmp2^post9, x^0'=x^post9, (x^0-x^post10 == 0 /\ tmp2^post10-tmp2^post9 == 0 /\ -tmp2^post10+tmp2^0 == 0 /\ -1+x^post9 == 0), cost: 1
	New rule:
	l8 -> l1 : tmp2^0'=tmp2^post10, x^0'=1, (0 == 0 /\ x^0-x^post10 == 0 /\ -tmp2^post10+tmp2^0 == 0), cost: 1
	
		propagated equality tmp2^post9 = tmp2^post10
		
		propagated equality x^post9 = 1
		
	Propagated Equalities

	Original rule:
	l8 -> l1 : tmp2^0'=tmp2^post10, x^0'=1, (0 == 0 /\ x^0-x^post10 == 0 /\ -tmp2^post10+tmp2^0 == 0), cost: 1
	New rule:
	l8 -> l1 : tmp2^0'=tmp2^0, x^0'=1, 0 == 0, cost: 1
	
		propagated equality x^post10 = x^0
		
		propagated equality tmp2^post10 = tmp2^0
		
	Simplified Guard

	Original rule:
	l8 -> l1 : tmp2^0'=tmp2^0, x^0'=1, 0 == 0, cost: 1
	New rule:
	l8 -> l1 : tmp2^0'=tmp2^0, x^0'=1, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l8 -> l1 : tmp2^0'=tmp2^0, x^0'=1, T, cost: 1
	New rule:
	l8 -> l1 : x^0'=1, T, cost: 1
	
	Propagated Equalities

	Original rule:
	l3 -> l3 : tmp2^0'=tmp2^post7, x^0'=x^post7, (x^post6-x^post7 == 0 /\ -tmp2^post7+tmp2^post6 == 0 /\ -x^post6+x^0 == 0 /\ tmp2^0-tmp2^post6 == 0), cost: 1
	New rule:
	l3 -> l3 : tmp2^0'=tmp2^post6, x^0'=x^post6, (0 == 0 /\ -x^post6+x^0 == 0 /\ tmp2^0-tmp2^post6 == 0), cost: 1
	
		propagated equality x^post7 = x^post6
		
		propagated equality tmp2^post7 = tmp2^post6
		
	Propagated Equalities

	Original rule:
	l3 -> l3 : tmp2^0'=tmp2^post6, x^0'=x^post6, (0 == 0 /\ -x^post6+x^0 == 0 /\ tmp2^0-tmp2^post6 == 0), cost: 1
	New rule:
	l3 -> l3 : tmp2^0'=tmp2^0, x^0'=x^0, 0 == 0, cost: 1
	
		propagated equality x^post6 = x^0
		
		propagated equality tmp2^post6 = tmp2^0
		
	Simplified Guard

	Original rule:
	l3 -> l3 : tmp2^0'=tmp2^0, x^0'=x^0, 0 == 0, cost: 1
	New rule:
	l3 -> l3 : tmp2^0'=tmp2^0, x^0'=x^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l3 -> l3 : tmp2^0'=tmp2^0, x^0'=x^0, T, cost: 1
	New rule:
	l3 -> l3 : T, cost: 1

Step with 18

	Trace

	18[T]
	
	Blocked

	[{}, {}]

Step with 16

	Trace

	18[T], 16[T]
	
	Blocked

	[{}, {}, {}]

Step with 13

	Trace

	18[T], 16[T], 13[(-tmp2^0 <= 0 /\ -tmp2^0 == 0 /\ tmp2^0 <= 0)]
	
	Blocked

	[{}, {}, {}, {}]

Step with 19

	Trace

	18[T], 16[T], 13[(-tmp2^0 <= 0 /\ -tmp2^0 == 0 /\ tmp2^0 <= 0)], 19[T]
	
	Blocked

	[{}, {}, {}, {}, {}]

Nonterm

Start location: l8
Program variables: tmp2^0 x^0
  12: l0 -> l1 : T, cost: 1
  16: l1 -> l2 : tmp2^0'=tmp2^post5, T, cost: 1
  13: l2 -> l3 : x^0'=1, (-tmp2^0 <= 0 /\ -tmp2^0 == 0 /\ tmp2^0 <= 0), cost: 1
  14: l2 -> l0 : 1-tmp2^0 <= 0, cost: 1
  15: l2 -> l0 : 1+tmp2^0 <= 0, cost: 1
  19: l3 -> l3 : T, cost: 1
  20: l3 -> LoAT_sink : -1+n >= 0, cost: NONTERM
  17: l5 -> l6 : T, cost: 1
  18: l8 -> l1 : x^0'=1, T, cost: 1

	Certificate of Non-Termination

	Original rule:
	l3 -> l3 : T, cost: 1
	New rule:
	l3 -> LoAT_sink : -1+n >= 0, cost: NONTERM

		Replacement map: {}

Step with 20

	Trace

	18[T], 16[T], 13[(-tmp2^0 <= 0 /\ -tmp2^0 == 0 /\ tmp2^0 <= 0)], 20[-1+n >= 0]
	
	Blocked

	[{}, {}, {}, {}, {20[T]}]

Refute

	Counterexample

	[ tmp2^0=0 x^0=1 ] 18 [ tmp2^0=0 x^0=1 ] 16 [ tmp2^0=0 x^0=1 ] 13 [ tmp2^0=0 x^0=x^0 ] 20
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
