WORST_CASE(Omega(0),?)

Initial ITS
Start location: __init
   0: f1_0_main_Load -> f168_0_main_LE : arg2'=arg2P0, arg4'=arg4P0, arg1'=arg1P0, arg3'=arg3P0, (-arg3P0 == 0 /\ arg2-arg2P0 == 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ -1+arg2-arg1P0 == 0), cost: 1
   1: f168_0_main_LE -> f168_0_main_LE : arg2'=arg2P1, arg4'=arg4P1, arg1'=arg1P1, arg3'=arg3P1, (arg2 > 0 /\ -arg2P1+arg1 == 0 /\ arg3P1-arg3 > 0 /\ arg3 > 0 /\ -1+arg1-arg1P1 == 0), cost: 1
   2: f168_0_main_LE -> f168_0_main_LE : arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg3'=arg3P2, (arg2 > 0 /\ 1-arg3P2 == 0 /\ -1-arg1P2+arg1 == 0 /\ arg1-arg2P2 == 0), cost: 1
   3: f168_0_main_LE -> f223_0_iterate_EQ : arg2'=arg2P3, arg4'=arg4P3, arg1'=arg1P3, arg3'=arg3P3, (arg3-arg2P3 == 0 /\ -arg3P3+arg3 == 0 /\ -arg4P3 == 0 /\ -1+arg2 < 0 /\ -arg1P3 == 0 /\ arg3 > 0), cost: 1
   4: f223_0_iterate_EQ -> f223_0_iterate_EQ : arg2'=arg2P4, arg4'=arg4P4, arg1'=arg1P4, arg3'=arg3P4, (arg2-arg1 > 0 /\ arg4P4-arg4 < 0 /\ arg4 > 0 /\ arg3P4-arg3 < 0 /\ arg1 > 0 /\ -arg1+x190 > 0 /\ arg3 > 0 /\ arg2-arg2P4 == 0 /\ arg1P4-arg1 > 0), cost: 1
   5: f223_0_iterate_EQ -> f223_0_iterate_EQ : arg2'=arg2P5, arg4'=arg4P5, arg1'=arg1P5, arg3'=arg3P5, (arg2 > 0 /\ -arg4P5+x260 > 0 /\ -arg2+arg3P5 < 0 /\ 1-arg1P5 == 0 /\ 1+x260 > 0 /\ arg2-arg3 == 0), cost: 1
   6: __init -> f1_0_main_Load : arg2'=arg2P6, arg4'=arg4P6, arg1'=arg1P6, arg3'=arg3P6, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_Load -> f168_0_main_LE : arg2'=arg2P0, arg4'=arg4P0, arg1'=arg1P0, arg3'=arg3P0, (-arg3P0 == 0 /\ arg2-arg2P0 == 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ -1+arg2-arg1P0 == 0), cost: 1
New rule:
f1_0_main_Load -> f168_0_main_LE : arg4'=arg4P0, arg1'=-1+arg2, arg3'=0, (1+arg2 > 0 /\ arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f168_0_main_LE -> f168_0_main_LE : arg2'=arg2P1, arg4'=arg4P1, arg1'=arg1P1, arg3'=arg3P1, (arg2 > 0 /\ -arg2P1+arg1 == 0 /\ arg3P1-arg3 > 0 /\ arg3 > 0 /\ -1+arg1-arg1P1 == 0), cost: 1
New rule:
f168_0_main_LE -> f168_0_main_LE : arg2'=arg1, arg4'=arg4P1, arg1'=-1+arg1, arg3'=arg3P1, (arg2 > 0 /\ arg3P1-arg3 > 0 /\ arg3 > 0), cost: 1

Applied preprocessing
Original rule:
f168_0_main_LE -> f168_0_main_LE : arg2'=arg2P2, arg4'=arg4P2, arg1'=arg1P2, arg3'=arg3P2, (arg2 > 0 /\ 1-arg3P2 == 0 /\ -1-arg1P2+arg1 == 0 /\ arg1-arg2P2 == 0), cost: 1
New rule:
f168_0_main_LE -> f168_0_main_LE : arg2'=arg1, arg4'=arg4P2, arg1'=-1+arg1, arg3'=1, arg2 > 0, cost: 1

Applied preprocessing
Original rule:
f168_0_main_LE -> f223_0_iterate_EQ : arg2'=arg2P3, arg4'=arg4P3, arg1'=arg1P3, arg3'=arg3P3, (arg3-arg2P3 == 0 /\ -arg3P3+arg3 == 0 /\ -arg4P3 == 0 /\ -1+arg2 < 0 /\ -arg1P3 == 0 /\ arg3 > 0), cost: 1
New rule:
f168_0_main_LE -> f223_0_iterate_EQ : arg2'=arg3, arg4'=0, arg1'=0, (1-arg2 > 0 /\ arg3 > 0), cost: 1

Applied preprocessing
Original rule:
f223_0_iterate_EQ -> f223_0_iterate_EQ : arg2'=arg2P4, arg4'=arg4P4, arg1'=arg1P4, arg3'=arg3P4, (arg2-arg1 > 0 /\ arg4P4-arg4 < 0 /\ arg4 > 0 /\ arg3P4-arg3 < 0 /\ arg1 > 0 /\ -arg1+x190 > 0 /\ arg3 > 0 /\ arg2-arg2P4 == 0 /\ arg1P4-arg1 > 0), cost: 1
New rule:
f223_0_iterate_EQ -> f223_0_iterate_EQ : arg4'=arg4P4, arg1'=arg1P4, arg3'=arg3P4, (-arg4P4+arg4 > 0 /\ -arg3P4+arg3 > 0 /\ arg2-arg1 > 0 /\ arg4 > 0 /\ arg1 > 0 /\ arg3 > 0 /\ arg1P4-arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f223_0_iterate_EQ -> f223_0_iterate_EQ : arg2'=arg2P5, arg4'=arg4P5, arg1'=arg1P5, arg3'=arg3P5, (arg2 > 0 /\ -arg4P5+x260 > 0 /\ -arg2+arg3P5 < 0 /\ 1-arg1P5 == 0 /\ 1+x260 > 0 /\ arg2-arg3 == 0), cost: 1
New rule:
f223_0_iterate_EQ -> f223_0_iterate_EQ : arg2'=arg2P5, arg4'=arg4P5, arg1'=1, arg3'=arg3P5, (arg2-arg3P5 > 0 /\ arg2 > 0 /\ arg2-arg3 == 0), cost: 1

Simplified rules
Start location: __init
   7: f1_0_main_Load -> f168_0_main_LE : arg4'=arg4P0, arg1'=-1+arg2, arg3'=0, (1+arg2 > 0 /\ arg1 > 0), cost: 1
   8: f168_0_main_LE -> f168_0_main_LE : arg2'=arg1, arg4'=arg4P1, arg1'=-1+arg1, arg3'=arg3P1, (arg2 > 0 /\ arg3P1-arg3 > 0 /\ arg3 > 0), cost: 1
   9: f168_0_main_LE -> f168_0_main_LE : arg2'=arg1, arg4'=arg4P2, arg1'=-1+arg1, arg3'=1, arg2 > 0, cost: 1
  10: f168_0_main_LE -> f223_0_iterate_EQ : arg2'=arg3, arg4'=0, arg1'=0, (1-arg2 > 0 /\ arg3 > 0), cost: 1
  11: f223_0_iterate_EQ -> f223_0_iterate_EQ : arg4'=arg4P4, arg1'=arg1P4, arg3'=arg3P4, (-arg4P4+arg4 > 0 /\ -arg3P4+arg3 > 0 /\ arg2-arg1 > 0 /\ arg4 > 0 /\ arg1 > 0 /\ arg3 > 0 /\ arg1P4-arg1 > 0), cost: 1
  12: f223_0_iterate_EQ -> f223_0_iterate_EQ : arg2'=arg2P5, arg4'=arg4P5, arg1'=1, arg3'=arg3P5, (arg2-arg3P5 > 0 /\ arg2 > 0 /\ arg2-arg3 == 0), cost: 1
   6: __init -> f1_0_main_Load : arg2'=arg2P6, arg4'=arg4P6, arg1'=arg1P6, arg3'=arg3P6, TRUE, cost: 1


Applied acceleration
Original rule:
f168_0_main_LE -> f168_0_main_LE : arg2'=arg1, arg4'=arg4P2, arg1'=-1+arg1, arg3'=1, arg2 > 0, cost: 1
New rule:
f168_0_main_LE -> f168_0_main_LE : arg2'=1-n0+arg1, arg4'=arg4P2, arg1'=-n0+arg1, arg3'=1, (2-n0+arg1 > 0 /\ arg2 > 0 /\ -1+n0 >= 0), cost: n0
Sub-proof via acceration calculus written to file:///tmp/tmpnam_HlmoPo.txt

Applied instantiation
Original rule:
f168_0_main_LE -> f168_0_main_LE : arg2'=1-n0+arg1, arg4'=arg4P2, arg1'=-n0+arg1, arg3'=1, (2-n0+arg1 > 0 /\ arg2 > 0 /\ -1+n0 >= 0), cost: n0
New rule:
f168_0_main_LE -> f168_0_main_LE : arg2'=0, arg4'=arg4P2, arg1'=-1, arg3'=1, (1 > 0 /\ arg2 > 0 /\ arg1 >= 0), cost: 1+arg1

Applied simplification
Original rule:
f168_0_main_LE -> f168_0_main_LE : arg2'=0, arg4'=arg4P2, arg1'=-1, arg3'=1, (1 > 0 /\ arg2 > 0 /\ arg1 >= 0), cost: 1+arg1
New rule:
f168_0_main_LE -> f168_0_main_LE : arg2'=0, arg4'=arg4P2, arg1'=-1, arg3'=1, (arg2 > 0 /\ arg1 >= 0), cost: 1+arg1

Applied deletion
Removed the following rules: 9

Accelerated simple loops
Start location: __init
   7: f1_0_main_Load -> f168_0_main_LE : arg4'=arg4P0, arg1'=-1+arg2, arg3'=0, (1+arg2 > 0 /\ arg1 > 0), cost: 1
   8: f168_0_main_LE -> f168_0_main_LE : arg2'=arg1, arg4'=arg4P1, arg1'=-1+arg1, arg3'=arg3P1, (arg2 > 0 /\ arg3P1-arg3 > 0 /\ arg3 > 0), cost: 1
  10: f168_0_main_LE -> f223_0_iterate_EQ : arg2'=arg3, arg4'=0, arg1'=0, (1-arg2 > 0 /\ arg3 > 0), cost: 1
  14: f168_0_main_LE -> f168_0_main_LE : arg2'=0, arg4'=arg4P2, arg1'=-1, arg3'=1, (arg2 > 0 /\ arg1 >= 0), cost: 1+arg1
  11: f223_0_iterate_EQ -> f223_0_iterate_EQ : arg4'=arg4P4, arg1'=arg1P4, arg3'=arg3P4, (-arg4P4+arg4 > 0 /\ -arg3P4+arg3 > 0 /\ arg2-arg1 > 0 /\ arg4 > 0 /\ arg1 > 0 /\ arg3 > 0 /\ arg1P4-arg1 > 0), cost: 1
  12: f223_0_iterate_EQ -> f223_0_iterate_EQ : arg2'=arg2P5, arg4'=arg4P5, arg1'=1, arg3'=arg3P5, (arg2-arg3P5 > 0 /\ arg2 > 0 /\ arg2-arg3 == 0), cost: 1
   6: __init -> f1_0_main_Load : arg2'=arg2P6, arg4'=arg4P6, arg1'=arg1P6, arg3'=arg3P6, TRUE, cost: 1


Applied chaining
First rule:
f1_0_main_Load -> f168_0_main_LE : arg4'=arg4P0, arg1'=-1+arg2, arg3'=0, (1+arg2 > 0 /\ arg1 > 0), cost: 1
Second rule:
f168_0_main_LE -> f168_0_main_LE : arg2'=0, arg4'=arg4P2, arg1'=-1, arg3'=1, (arg2 > 0 /\ arg1 >= 0), cost: 1+arg1
New rule:
f1_0_main_Load -> f168_0_main_LE : arg2'=0, arg4'=arg4P2, arg1'=-1, arg3'=1, (arg1 > 0 /\ -1+arg2 >= 0), cost: 1+arg2

Applied deletion
Removed the following rules: 8 14

Applied chaining
First rule:
f168_0_main_LE -> f223_0_iterate_EQ : arg2'=arg3, arg4'=0, arg1'=0, (1-arg2 > 0 /\ arg3 > 0), cost: 1
Second rule:
f223_0_iterate_EQ -> f223_0_iterate_EQ : arg2'=arg2P5, arg4'=arg4P5, arg1'=1, arg3'=arg3P5, (arg2-arg3P5 > 0 /\ arg2 > 0 /\ arg2-arg3 == 0), cost: 1
New rule:
f168_0_main_LE -> f223_0_iterate_EQ : arg2'=arg2P5, arg4'=arg4P5, arg1'=1, arg3'=arg3P5, (-arg3P5+arg3 > 0 /\ 1-arg2 > 0 /\ arg3 > 0), cost: 2

Applied deletion
Removed the following rules: 11 12

Chained accelerated rules with incoming rules
Start location: __init
   7: f1_0_main_Load -> f168_0_main_LE : arg4'=arg4P0, arg1'=-1+arg2, arg3'=0, (1+arg2 > 0 /\ arg1 > 0), cost: 1
  15: f1_0_main_Load -> f168_0_main_LE : arg2'=0, arg4'=arg4P2, arg1'=-1, arg3'=1, (arg1 > 0 /\ -1+arg2 >= 0), cost: 1+arg2
  10: f168_0_main_LE -> f223_0_iterate_EQ : arg2'=arg3, arg4'=0, arg1'=0, (1-arg2 > 0 /\ arg3 > 0), cost: 1
  16: f168_0_main_LE -> f223_0_iterate_EQ : arg2'=arg2P5, arg4'=arg4P5, arg1'=1, arg3'=arg3P5, (-arg3P5+arg3 > 0 /\ 1-arg2 > 0 /\ arg3 > 0), cost: 2
   6: __init -> f1_0_main_Load : arg2'=arg2P6, arg4'=arg4P6, arg1'=arg1P6, arg3'=arg3P6, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
  <empty>


Computing asymptotic complexity

Proved the following lower bound
Complexity:  Unknown
Cpx degree: ?

Solved cost: 0
Rule cost:   0

