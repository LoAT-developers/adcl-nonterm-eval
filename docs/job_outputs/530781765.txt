NO

Solver Timeout: 4
Global Timeout: 300
No parsing errors!
Init Location: 0
Transitions:
<l0, l4, true>
<l1, l2, (arg1 > 0) /\ (arg2 > ~(1)), par{arg1 -> arg2, arg2 -> undef2}>
<l2, l3, (arg1 < 15), par{arg2 -> undef4}>
<l3, l2, (arg1 < 15) /\ (((arg1 + 1) - (10 * undef7)) < 10) /\ (((arg1 + 1) - (10 * undef7)) >= 0), par{arg1 -> ((arg1 + 1) - (10 * undef7)), arg2 -> undef6}>
<l4, l1, true, par{arg1 -> undef8, arg2 -> undef9}>

Fresh variables:
undef2, undef4, undef6, undef7, undef8, undef9, 

Undef variables:
undef2, undef4, undef6, undef7, undef8, undef9, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l2, (arg1 = undef9) /\ (undef8 > 0) /\ (undef9 > ~(1))>
<l2, l2, (arg1 < 15) /\ (arg1 < 15) /\ (((arg1 + 1) - (10 * undef7)) < 10) /\ (((arg1 + 1) - (10 * undef7)) >= 0), par{arg1 -> ((arg1 + 1) - (10 * undef7))}>

Fresh variables:
undef2, undef4, undef6, undef7, undef8, undef9, 

Undef variables:
undef2, undef4, undef6, undef7, undef8, undef9, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l2, l2, 10*undef7 <= 1 + arg1 /\ arg1 <= 14 /\ arg1 <= 8 + 10*undef7, {arg1 -> 1 + arg1 - 10*undef7, rest remain the same}>
Variables:
arg1

Precedence: 
Graph 0

Graph 1
<l0, l2, 0 <= undef9 /\ 1 <= undef8 /\ arg1 = undef9, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 2 , 1 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.001992

Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000674s

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.002549s
Trying to remove transition: <l2, l2, 10*undef7 <= 1 + arg1 /\ arg1 <= 14 /\ arg1 <= 8 + 10*undef7, {arg1 -> 1 + arg1 - 10*undef7, rest remain the same}>
Solving with 1 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 0.003875s
Time used: 0.003726
Solving with 1 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 0.126901s
Time used: 0.126551
Improving Solution with cost 1 ...

LOG: CALL solveNonLinearGetNextSolution

LOG: RETURN solveNonLinearGetNextSolution - Elapsed time: 0.032658s
Time used: 0.032644

LOG: SAT solveNonLinear - Elapsed time: 0.159559s
Cost: 1; Total time: 0.159195
[31mFailed at location 2: 15 <= arg1[0m
Before Improving: 
[36mQuasi-invariant at l2: 15 <= arg1[0m
Optimizing invariants...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.004293s
Remaining time after improvement: 0.998632
[33mTermination implied by a set of quasi-invariant(s):[0m
[36mQuasi-invariant at l2: 15 <= arg1[0m
[ Invariant Graph ]
[33mStrengthening and disabling transitions...[0m

LOG: CALL solverLinear in Graph for feasibility

LOG: RETURN solveLinear in Graph for feasibility
It's unfeasible. Removing transition: 
<l2, l2, 10*undef7 <= 1 + arg1 /\ arg1 <= 14 /\ arg1 <= 8 + 10*undef7, {arg1 -> 1 + arg1 - 10*undef7, rest remain the same}>
[ Termination Graph ]
[33mStrengthening and disabling transitions...[0m
> It's unfeasible. Removing transition: 
<l2, l2, 10*undef7 <= 1 + arg1 /\ arg1 <= 14 /\ arg1 <= 8 + 10*undef7, {arg1 -> 1 + arg1 - 10*undef7, rest remain the same}>
New Graphs: 
Calling Safety with literal 15 <= arg1 and entry <l0, l2, 0 <= undef9 /\ 1 <= undef8 /\ arg1 = undef9, {all remain the same}>

LOG: CALL check - Post:15 <= arg1 - Process 1
* Exit transition: <l0, l2, 0 <= undef9 /\ 1 <= undef8 /\ arg1 = undef9, {all remain the same}>
* Postcondition  : 15 <= arg1

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000548s
[31m> Postcondition is not implied![0m

LOG: RETURN check - Elapsed time: 0.000644s
INVARIANTS: 
2: 
Quasi-INVARIANTS to narrow Graph: 
2: 15 <= arg1 , 
Narrowing transition: 
<l2, l2, 10*undef7 <= 1 + arg1 /\ arg1 <= 14 /\ arg1 <= 8 + 10*undef7, {arg1 -> 1 + arg1 - 10*undef7, rest remain the same}>

LOG: Narrow transition size 1
invGraph after Narrowing: 
Transitions:
<l2, l2, 10*undef7 <= 1 + arg1 /\ arg1 <= 14 /\ arg1 <= 8 + 10*undef7, {arg1 -> 1 + arg1 - 10*undef7, rest remain the same}>
Variables:
arg1
Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000618s

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.002451s
Trying to remove transition: <l2, l2, 10*undef7 <= 1 + arg1 /\ arg1 <= 14 /\ arg1 <= 8 + 10*undef7, {arg1 -> 1 + arg1 - 10*undef7, rest remain the same}>
Solving with 1 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 0.003437s
Time used: 0.003285
Solving with 1 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 1.443767s
Time used: 1.44332
Solving with 2 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 4.032394s
Time used: 4.00209
Solving with 3 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 1.020857s
Time used: 1.0005
Solving with 1 template(s).

LOG: CALL solveNonLinearGetFirstSolution

LOG: RETURN solveNonLinearGetFirstSolution - Elapsed time: 0.009105s
Time used: 0.005845

Proving non-termination of subgraph 1
Transitions:
<l2, l2, 10*undef7 <= 1 + arg1 /\ arg1 <= 14 /\ arg1 <= 8 + 10*undef7, {arg1 -> 1 + arg1 - 10*undef7, rest remain the same}>
Variables:
arg1

Checking that every undef value has an assignment...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000654s
Checking conditional non-termination of SCC {l2}...
> No assignment for some undef value.
> Checking if the negation of the conditions of every pending exit is quasi-invariant... YES
Calling reachability with...
Transition: <l2, end, true, {all remain the same}>
Conditions: arg1 <= 14, 
OPEN EXITS: 
<l2, end, arg1 <= 14, {all remain the same}>

--- Reachability graph ---
> Graph without transitions.

Calling reachability with...
Transition: <l0, l2, 0 <= undef9 /\ 1 <= undef8 /\ arg1 = undef9, {all remain the same}>
Conditions: arg1 <= 14, 
OPEN EXITS: 
<l0, l2, 0 <= undef9 /\ 1 <= undef8 /\ arg1 <= 14 /\ arg1 = undef9, {all remain the same}>

[32m> Conditions are reachable![0m

[32mProgram does NOT terminate[0m
