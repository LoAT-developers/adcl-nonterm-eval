unknown

Initial ITS

Start location: __init
Program variables: arg1 arg2
   0: f1_0_main_Load -> f1_0_main_Load\' : arg1'=arg1p1, arg2'=arg2p1, (1+x2 > 0 /\ arg1-arg1p1 == 0 /\ arg1 > 0 /\ arg2-arg2p1 == 0 /\ 1+arg2 > 0), cost: 1
   1: f1_0_main_Load\' -> f80_0_main_EQ : arg1'=arg1p2, arg2'=arg2p2, (1+arg1p2 > 0 /\ arg1 > 0 /\ -3*x8+arg1p2-arg2p2 == 0 /\ 1+arg2 > 0 /\ -3-3*x8+arg1p2 < 0 /\ -3*x8+arg1p2 >= 0), cost: 1
   2: f80_0_main_EQ -> f80_0_main_EQ\' : arg1'=arg1p3, arg2'=arg2p3, (arg2 > 0 /\ -arg2p3+arg2 == 0 /\ -arg1p3+arg1 == 0), cost: 1
   3: f80_0_main_EQ\' -> f80_0_main_EQ : arg1'=arg1p4, arg2'=arg2p4, (1+arg1-3*x11 >= 0 /\ -2+arg1-3*x11 < 0 /\ arg2 > 0 /\ 1+arg1-arg2p4-3*x11 == 0 /\ 1-arg1p4+arg1 == 0), cost: 1
   4: __init -> f1_0_main_Load : arg1'=arg1p5, arg2'=arg2p5, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2
   7: f80_0_main_EQ -> f80_0_main_EQ : arg1'=arg1p4, arg2'=arg2p4, (1+arg1p3-arg1p4 == 0 /\ -2+arg1p3-3*x11 < 0 /\ arg2p3 > 0 /\ 1+arg1p3-arg2p4-3*x11 == 0 /\ 1+arg1p3-3*x11 >= 0 /\ arg2 > 0 /\ -arg2p3+arg2 == 0 /\ -arg1p3+arg1 == 0), cost: 1
   6: __init -> f80_0_main_EQ : arg1'=arg1p2, arg2'=arg2p2, (1+arg1p2 > 0 /\ 1+x2 > 0 /\ -arg1p1+arg1p5 == 0 /\ 1+arg2p1 > 0 /\ arg1p1 > 0 /\ -3*x8+arg1p2-arg2p2 == 0 /\ arg1p5 > 0 /\ 1+arg2p5 > 0 /\ -3-3*x8+arg1p2 < 0 /\ arg2p5-arg2p1 == 0 /\ -3*x8+arg1p2 >= 0), cost: 1

	Eliminating location f1_0_main_Load by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_Load : arg1'=arg1p5, arg2'=arg2p5, T, cost: 1
	Second rule:
	f1_0_main_Load -> f1_0_main_Load\' : arg1'=arg1p1, arg2'=arg2p1, (1+x2 > 0 /\ arg1-arg1p1 == 0 /\ arg1 > 0 /\ arg2-arg2p1 == 0 /\ 1+arg2 > 0), cost: 1
	New rule:
	__init -> f1_0_main_Load\' : arg1'=arg1p1, arg2'=arg2p1, (1+x2 > 0 /\ -arg1p1+arg1p5 == 0 /\ arg1p5 > 0 /\ 1+arg2p5 > 0 /\ arg2p5-arg2p1 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 4
	
	Eliminating location f1_0_main_Load\' by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_Load\' : arg1'=arg1p1, arg2'=arg2p1, (1+x2 > 0 /\ -arg1p1+arg1p5 == 0 /\ arg1p5 > 0 /\ 1+arg2p5 > 0 /\ arg2p5-arg2p1 == 0), cost: 1
	Second rule:
	f1_0_main_Load\' -> f80_0_main_EQ : arg1'=arg1p2, arg2'=arg2p2, (1+arg1p2 > 0 /\ arg1 > 0 /\ -3*x8+arg1p2-arg2p2 == 0 /\ 1+arg2 > 0 /\ -3-3*x8+arg1p2 < 0 /\ -3*x8+arg1p2 >= 0), cost: 1
	New rule:
	__init -> f80_0_main_EQ : arg1'=arg1p2, arg2'=arg2p2, (1+arg1p2 > 0 /\ 1+x2 > 0 /\ -arg1p1+arg1p5 == 0 /\ 1+arg2p1 > 0 /\ arg1p1 > 0 /\ -3*x8+arg1p2-arg2p2 == 0 /\ arg1p5 > 0 /\ 1+arg2p5 > 0 /\ -3-3*x8+arg1p2 < 0 /\ arg2p5-arg2p1 == 0 /\ -3*x8+arg1p2 >= 0), cost: 1
	
	Applied deletion

	Removed the following rules: 1 5
	
	Eliminating location f80_0_main_EQ\' by chaining:

	Applied chaining

	First rule:
	f80_0_main_EQ -> f80_0_main_EQ\' : arg1'=arg1p3, arg2'=arg2p3, (arg2 > 0 /\ -arg2p3+arg2 == 0 /\ -arg1p3+arg1 == 0), cost: 1
	Second rule:
	f80_0_main_EQ\' -> f80_0_main_EQ : arg1'=arg1p4, arg2'=arg2p4, (1+arg1-3*x11 >= 0 /\ -2+arg1-3*x11 < 0 /\ arg2 > 0 /\ 1+arg1-arg2p4-3*x11 == 0 /\ 1-arg1p4+arg1 == 0), cost: 1
	New rule:
	f80_0_main_EQ -> f80_0_main_EQ : arg1'=arg1p4, arg2'=arg2p4, (1+arg1p3-arg1p4 == 0 /\ -2+arg1p3-3*x11 < 0 /\ arg2p3 > 0 /\ 1+arg1p3-arg2p4-3*x11 == 0 /\ 1+arg1p3-3*x11 >= 0 /\ arg2 > 0 /\ -arg2p3+arg2 == 0 /\ -arg1p3+arg1 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 2 3

Simplified Transitions

Start location: __init
Program variables: arg1 arg2
   9: f80_0_main_EQ -> f80_0_main_EQ : arg1'=1+arg1, arg2'=1+arg1-3*x11, (1+arg1-3*x11 >= 0 /\ -2+arg1-3*x11 < 0 /\ arg2 > 0), cost: 1
   8: __init -> f80_0_main_EQ : arg1'=3*x8+arg2p2, arg2'=arg2p2, (1+3*x8+arg2p2 > 0 /\ -3+arg2p2 < 0 /\ arg2p2 >= 0), cost: 1

	Propagated Equalities

	Original rule:
	__init -> f80_0_main_EQ : arg1'=arg1p2, arg2'=arg2p2, (1+arg1p2 > 0 /\ 1+x2 > 0 /\ -arg1p1+arg1p5 == 0 /\ 1+arg2p1 > 0 /\ arg1p1 > 0 /\ -3*x8+arg1p2-arg2p2 == 0 /\ arg1p5 > 0 /\ 1+arg2p5 > 0 /\ -3-3*x8+arg1p2 < 0 /\ arg2p5-arg2p1 == 0 /\ -3*x8+arg1p2 >= 0), cost: 1
	New rule:
	__init -> f80_0_main_EQ : arg1'=3*x8+arg2p2, arg2'=arg2p2, (0 == 0 /\ 1+3*x8+arg2p2 > 0 /\ 1+x2 > 0 /\ -arg1p1+arg1p5 == 0 /\ -3+arg2p2 < 0 /\ 1+arg2p1 > 0 /\ arg1p1 > 0 /\ arg1p5 > 0 /\ arg2p2 >= 0 /\ 1+arg2p5 > 0 /\ arg2p5-arg2p1 == 0), cost: 1
	
		propagated equality arg1p2 = 3*x8+arg2p2
		
	Propagated Equalities

	Original rule:
	__init -> f80_0_main_EQ : arg1'=3*x8+arg2p2, arg2'=arg2p2, (0 == 0 /\ 1+3*x8+arg2p2 > 0 /\ 1+x2 > 0 /\ -arg1p1+arg1p5 == 0 /\ -3+arg2p2 < 0 /\ 1+arg2p1 > 0 /\ arg1p1 > 0 /\ arg1p5 > 0 /\ arg2p2 >= 0 /\ 1+arg2p5 > 0 /\ arg2p5-arg2p1 == 0), cost: 1
	New rule:
	__init -> f80_0_main_EQ : arg1'=3*x8+arg2p2, arg2'=arg2p2, (0 == 0 /\ 1+3*x8+arg2p2 > 0 /\ 1+x2 > 0 /\ -3+arg2p2 < 0 /\ arg1p5 > 0 /\ arg2p2 >= 0 /\ 1+arg2p5 > 0), cost: 1
	
		propagated equality arg1p1 = arg1p5
		
		propagated equality arg2p1 = arg2p5
		
	Simplified Guard

	Original rule:
	__init -> f80_0_main_EQ : arg1'=3*x8+arg2p2, arg2'=arg2p2, (0 == 0 /\ 1+3*x8+arg2p2 > 0 /\ 1+x2 > 0 /\ -3+arg2p2 < 0 /\ arg1p5 > 0 /\ arg2p2 >= 0 /\ 1+arg2p5 > 0), cost: 1
	New rule:
	__init -> f80_0_main_EQ : arg1'=3*x8+arg2p2, arg2'=arg2p2, (1+3*x8+arg2p2 > 0 /\ 1+x2 > 0 /\ -3+arg2p2 < 0 /\ arg1p5 > 0 /\ arg2p2 >= 0 /\ 1+arg2p5 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	__init -> f80_0_main_EQ : arg1'=3*x8+arg2p2, arg2'=arg2p2, (1+3*x8+arg2p2 > 0 /\ 1+x2 > 0 /\ -3+arg2p2 < 0 /\ arg1p5 > 0 /\ arg2p2 >= 0 /\ 1+arg2p5 > 0), cost: 1
	New rule:
	__init -> f80_0_main_EQ : arg1'=3*x8+arg2p2, arg2'=arg2p2, (1+3*x8+arg2p2 > 0 /\ -3+arg2p2 < 0 /\ arg2p2 >= 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f80_0_main_EQ -> f80_0_main_EQ : arg1'=arg1p4, arg2'=arg2p4, (1+arg1p3-arg1p4 == 0 /\ -2+arg1p3-3*x11 < 0 /\ arg2p3 > 0 /\ 1+arg1p3-arg2p4-3*x11 == 0 /\ 1+arg1p3-3*x11 >= 0 /\ arg2 > 0 /\ -arg2p3+arg2 == 0 /\ -arg1p3+arg1 == 0), cost: 1
	New rule:
	f80_0_main_EQ -> f80_0_main_EQ : arg1'=1+arg1p3, arg2'=1+arg1p3-3*x11, (0 == 0 /\ -2+arg1p3-3*x11 < 0 /\ arg2p3 > 0 /\ 1+arg1p3-3*x11 >= 0 /\ arg2 > 0 /\ -arg2p3+arg2 == 0 /\ -arg1p3+arg1 == 0), cost: 1
	
		propagated equality arg1p4 = 1+arg1p3
		
		propagated equality arg2p4 = 1+arg1p3-3*x11
		
	Propagated Equalities

	Original rule:
	f80_0_main_EQ -> f80_0_main_EQ : arg1'=1+arg1p3, arg2'=1+arg1p3-3*x11, (0 == 0 /\ -2+arg1p3-3*x11 < 0 /\ arg2p3 > 0 /\ 1+arg1p3-3*x11 >= 0 /\ arg2 > 0 /\ -arg2p3+arg2 == 0 /\ -arg1p3+arg1 == 0), cost: 1
	New rule:
	f80_0_main_EQ -> f80_0_main_EQ : arg1'=1+arg1, arg2'=1+arg1-3*x11, (0 == 0 /\ 1+arg1-3*x11 >= 0 /\ -2+arg1-3*x11 < 0 /\ arg2 > 0), cost: 1
	
		propagated equality arg2p3 = arg2
		
		propagated equality arg1p3 = arg1
		
	Simplified Guard

	Original rule:
	f80_0_main_EQ -> f80_0_main_EQ : arg1'=1+arg1, arg2'=1+arg1-3*x11, (0 == 0 /\ 1+arg1-3*x11 >= 0 /\ -2+arg1-3*x11 < 0 /\ arg2 > 0), cost: 1
	New rule:
	f80_0_main_EQ -> f80_0_main_EQ : arg1'=1+arg1, arg2'=1+arg1-3*x11, (1+arg1-3*x11 >= 0 /\ -2+arg1-3*x11 < 0 /\ arg2 > 0), cost: 1

Step with 8

	Trace

	8[(1+3*x8+arg2p2 > 0 /\ -3+arg2p2 < 0 /\ arg2p2 >= 0)]
	
	Blocked

	[{}, {}]

Step with 9

	Trace

	8[(1+3*x8+arg2p2 > 0 /\ -3+arg2p2 < 0 /\ arg2p2 >= 0)], 9[(1+arg1-3*x11 >= 0 /\ -2+arg1-3*x11 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2
   9: f80_0_main_EQ -> f80_0_main_EQ : arg1'=1+arg1, arg2'=1+arg1-3*x11, (1+arg1-3*x11 >= 0 /\ -2+arg1-3*x11 < 0 /\ arg2 > 0), cost: 1
  10: f80_0_main_EQ -> f80_0_main_EQ : arg1'=arg1+n, arg2'=arg1-3*x11+n, (1+arg1-3*x11 >= 0 /\ arg2 > 0 /\ 3-arg1+3*x11-n > 0 /\ -1+n >= 0 /\ -1-arg1+arg2+3*x11 <= 0), cost: 1
   8: __init -> f80_0_main_EQ : arg1'=3*x8+arg2p2, arg2'=arg2p2, (1+3*x8+arg2p2 > 0 /\ -3+arg2p2 < 0 /\ arg2p2 >= 0), cost: 1

	Loop Acceleration

	Original rule:
	f80_0_main_EQ -> f80_0_main_EQ : arg1'=1+arg1, arg2'=1+arg1-3*x11, (1+arg1-3*x11 >= 0 /\ -2+arg1-3*x11 < 0 /\ arg2 > 0), cost: 1
	New rule:
	f80_0_main_EQ -> f80_0_main_EQ : arg1'=arg1+n, arg2'=arg1-3*x11+n, (1+arg1-3*x11 >= 0 /\ arg2 > 0 /\ 3-arg1+3*x11-n > 0 /\ -1+n >= 0 /\ -1-arg1+arg2+3*x11 <= 0), cost: 1

		1+arg1-3*x11 >= 0 [0]: monotonic increase yields 1+arg1-3*x11 >= 0
		
		arg2 > 0 [0]: eventual increase yields (arg2 > 0 /\ -1-arg1+arg2+3*x11 <= 0)
		
		2-arg1+3*x11 > 0 [0]: montonic decrease yields 3-arg1+3*x11-n > 0
		
		2-arg1+3*x11 > 0 [1]: eventual increase yields (1 <= 0 /\ 2-arg1+3*x11 > 0)
		
		Replacement map: {1+arg1-3*x11 >= 0 -> 1+arg1-3*x11 >= 0, arg2 > 0 -> (arg2 > 0 /\ -1-arg1+arg2+3*x11 <= 0), 2-arg1+3*x11 > 0 -> 3-arg1+3*x11-n > 0}

	Trace

	8[(1+3*x8+arg2p2 > 0 /\ -3+arg2p2 < 0 /\ arg2p2 >= 0)], 10[(1+arg1-3*x11 >= 0 /\ arg2 > 0 /\ 3-arg1+3*x11-n > 0 /\ -1+n >= 0 /\ -1-arg1+arg2+3*x11 <= 0)]
	
	Blocked

	[{}, {}, {9[T], 10[T]}]

Backtrack

	Trace

	8[(1+3*x8+arg2p2 > 0 /\ -3+arg2p2 < 0 /\ arg2p2 >= 0)]
	
	Blocked

	[{}, {10[T]}]

Step with 9

	Trace

	8[(1+3*x8+arg2p2 > 0 /\ -3+arg2p2 < 0 /\ arg2p2 >= 0)], 9[(1+arg1-3*x11 >= 0 /\ -2+arg1-3*x11 < 0 /\ arg2 > 0)]
	
	Blocked

	[{}, {10[T]}, {}]

Covered

	Trace

	8[(1+3*x8+arg2p2 > 0 /\ -3+arg2p2 < 0 /\ arg2p2 >= 0)]
	
	Blocked

	[{}, {9[T], 10[T]}]

Backtrack

	Trace

	Blocked

	[{8[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
