NO

Initial ITS

Start location: [1]
Program variables: i
   0: [1] -> [2] : i'=nondet, T, cost: 1
   1: [2] -> [3] : ((i < 0 \/ i > 0) /\ (-1+i < 0 \/ -1+i > 0)), cost: 1
   4: [2] -> [5] : ((i <= 0 /\ i >= 0) \/ (-1+i <= 0 /\ -1+i >= 0)), cost: 1
   2: [3] -> [4] : i'=-2+i, T, cost: 1
   3: [4] -> [2] : T, cost: 1

Chained Linear Paths

Start location: [1]
Program variables: i
   0: [1] -> [2] : i'=nondet, T, cost: 1
   4: [2] -> [5] : ((i <= 0 /\ i >= 0) \/ (-1+i <= 0 /\ -1+i >= 0)), cost: 1
   6: [2] -> [2] : i'=-2+i, ((i < 0 \/ i > 0) /\ (-1+i < 0 \/ -1+i > 0)), cost: 1

	Eliminating location [3] by chaining:

	Applied chaining

	First rule:
	[2] -> [3] : ((i < 0 \/ i > 0) /\ (-1+i < 0 \/ -1+i > 0)), cost: 1
	Second rule:
	[3] -> [4] : i'=-2+i, T, cost: 1
	New rule:
	[2] -> [4] : i'=-2+i, ((i < 0 \/ i > 0) /\ (-1+i < 0 \/ -1+i > 0)), cost: 1
	
	Applied deletion

	Removed the following rules: 1 2
	
	Eliminating location [4] by chaining:

	Applied chaining

	First rule:
	[2] -> [4] : i'=-2+i, ((i < 0 \/ i > 0) /\ (-1+i < 0 \/ -1+i > 0)), cost: 1
	Second rule:
	[4] -> [2] : T, cost: 1
	New rule:
	[2] -> [2] : i'=-2+i, ((i < 0 \/ i > 0) /\ (-1+i < 0 \/ -1+i > 0)), cost: 1
	
	Applied deletion

	Removed the following rules: 3 5

Step with 0

	Trace

	0[T]
	
	Blocked

	[{}, {}]

Step with 4

	Trace

	0[T], 4[(i <= 0 /\ i >= 0)]
	
	Blocked

	[{}, {}, {}]

Backtrack

	Trace

	0[T]
	
	Blocked

	[{}, {4[(i <= 0 /\ i >= 0)]}]

Step with 4

	Trace

	0[T], 4[(-1+i <= 0 /\ -1+i >= 0)]
	
	Blocked

	[{}, {4[(i <= 0 /\ i >= 0)]}, {}]

Backtrack

	Trace

	0[T]
	
	Blocked

	[{}, {4[(-1+i <= 0 /\ -1+i >= 0 /\ i <= 0 /\ i >= 0)]}]

Step with 6

	Trace

	0[T], 6[(-1+i < 0 /\ i < 0)]
	
	Blocked

	[{}, {4[T]}, {}]

Nonterm

Start location: [1]
Program variables: i
   0: [1] -> [2] : i'=nondet, T, cost: 1
   4: [2] -> [5] : ((i <= 0 /\ i >= 0) \/ (-1+i <= 0 /\ -1+i >= 0)), cost: 1
   6: [2] -> [2] : i'=-2+i, ((i < 0 \/ i > 0) /\ (-1+i < 0 \/ -1+i > 0)), cost: 1
   7: [2] -> LoAT_sink : (-1+n >= 0 /\ 1-i > 0 /\ -i > 0), cost: NONTERM
   8: [2] -> [2] : i'=-2*n+i, (-1+n >= 0 /\ 1-i > 0 /\ -i > 0), cost: 1

	Certificate of Non-Termination

	Original rule:
	[2] -> [2] : i'=-2+i, (-1+i < 0 /\ i < 0), cost: 1
	New rule:
	[2] -> LoAT_sink : (-1+n >= 0 /\ 1-i > 0 /\ -i > 0), cost: NONTERM

		1-i > 0 [0]: monotonic increase yields 1-i > 0
		
		-i > 0 [0]: monotonic increase yields -i > 0, dependencies: 1-i > 0
		
		Replacement map: {1-i > 0 -> 1-i > 0, -i > 0 -> -i > 0}

	Loop Acceleration

	Original rule:
	[2] -> [2] : i'=-2+i, (-1+i < 0 /\ i < 0), cost: 1
	New rule:
	[2] -> [2] : i'=-2*n+i, (-1+n >= 0 /\ 1-i > 0 /\ -i > 0), cost: 1

		1-i > 0 [0]: monotonic increase yields 1-i > 0
		
		-i > 0 [0]: monotonic increase yields -i > 0, dependencies: 1-i > 0
		
		Replacement map: {1-i > 0 -> 1-i > 0, -i > 0 -> -i > 0}

Step with 7

	Trace

	0[T], 7[(-1+n >= 0 /\ 1-i > 0 /\ -i > 0)]
	
	Blocked

	[{}, {4[T]}, {7[T]}]

Refute

	Counterexample

	[ i=-1 ] 0 [ i=i ] 7
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
