NO

Initial ITS

Start location: l9
Program variables: result_4^0 tmp_6^0 x_5^0
   0: l0 -> l1 : result_4^0'=result_4^post1, tmp_6^0'=tmp_6^post1, x_5^0'=x_5^post1, (-tmp_6^post1+tmp_6^0 == 0 /\ -x_5^post1+x_5^0 == 0 /\ result_4^0-result_4^post1 == 0), cost: 1
   1: l1 -> l2 : result_4^0'=result_4^post2, tmp_6^0'=tmp_6^post2, x_5^0'=x_5^post2, (0 == 0 /\ tmp_6^post2 <= 0 /\ -tmp_6^post2 <= 0 /\ -x_5^post2+x_5^0 == 0 /\ x_5^0 <= 0), cost: 1
   2: l1 -> l3 : result_4^0'=result_4^post3, tmp_6^0'=tmp_6^post3, x_5^0'=x_5^post3, (0 == 0 /\ tmp_6^post3 <= 0 /\ -tmp_6^post3 <= 0 /\ result_4^0-result_4^post3 == 0 /\ -x_5^post3+x_5^0 == 0 /\ 1-x_5^0 <= 0), cost: 1
   4: l1 -> l4 : result_4^0'=result_4^post5, tmp_6^0'=tmp_6^post5, x_5^0'=x_5^post5, (0 == 0 /\ -x_5^post5+x_5^0 == 0 /\ -result_4^post5+result_4^0 == 0), cost: 1
   8: l1 -> l7 : result_4^0'=result_4^post9, tmp_6^0'=tmp_6^post9, x_5^0'=x_5^post9, (0 == 0 /\ -result_4^post9+result_4^0 == 0 /\ -x_5^post9+x_5^0 == 0), cost: 1
   3: l3 -> l1 : result_4^0'=result_4^post4, tmp_6^0'=tmp_6^post4, x_5^0'=x_5^post4, (-tmp_6^post4+tmp_6^0 == 0 /\ -x_5^post4+x_5^0 == 0 /\ result_4^0-result_4^post4 == 0), cost: 1
   5: l4 -> l5 : result_4^0'=result_4^post6, tmp_6^0'=tmp_6^post6, x_5^0'=x_5^post6, (-result_4^post6+result_4^0 == 0 /\ -x_5^post6+x_5^0 == 0 /\ 1+tmp_6^0 <= 0 /\ tmp_6^0-tmp_6^post6 == 0), cost: 1
   6: l4 -> l5 : result_4^0'=result_4^post7, tmp_6^0'=tmp_6^post7, x_5^0'=x_5^post7, (-x_5^post7+x_5^0 == 0 /\ -result_4^post7+result_4^0 == 0 /\ 1-tmp_6^0 <= 0 /\ tmp_6^0-tmp_6^post7 == 0), cost: 1
   7: l5 -> l2 : result_4^0'=result_4^post8, tmp_6^0'=tmp_6^post8, x_5^0'=x_5^post8, (0 == 0 /\ tmp_6^0-tmp_6^post8 == 0 /\ 1-x_5^0+x_5^post8 == 0 /\ x_5^post8 <= 0), cost: 1
   9: l7 -> l8 : result_4^0'=result_4^post10, tmp_6^0'=tmp_6^post10, x_5^0'=x_5^post10, (1+tmp_6^0 <= 0 /\ tmp_6^0-tmp_6^post10 == 0 /\ -result_4^post10+result_4^0 == 0 /\ -x_5^post10+x_5^0 == 0), cost: 1
  10: l7 -> l8 : result_4^0'=result_4^post11, tmp_6^0'=tmp_6^post11, x_5^0'=x_5^post11, (-x_5^post11+x_5^0 == 0 /\ -result_4^post11+result_4^0 == 0 /\ 1-tmp_6^0 <= 0 /\ tmp_6^0-tmp_6^post11 == 0), cost: 1
  11: l8 -> l6 : result_4^0'=result_4^post12, tmp_6^0'=tmp_6^post12, x_5^0'=x_5^post12, (1+x_5^post12-x_5^0 == 0 /\ 1-x_5^post12 <= 0 /\ -result_4^post12+result_4^0 == 0 /\ tmp_6^0-tmp_6^post12 == 0), cost: 1
  12: l6 -> l1 : result_4^0'=result_4^post13, tmp_6^0'=tmp_6^post13, x_5^0'=x_5^post13, (result_4^0-result_4^post13 == 0 /\ -x_5^post13+x_5^0 == 0 /\ -tmp_6^post13+tmp_6^0 == 0), cost: 1
  13: l9 -> l0 : result_4^0'=result_4^post14, tmp_6^0'=tmp_6^post14, x_5^0'=x_5^post14, (result_4^0-result_4^post14 == 0 /\ -x_5^post14+x_5^0 == 0 /\ tmp_6^0-tmp_6^post14 == 0), cost: 1

Chained Linear Paths

Start location: l9
Program variables: result_4^0 tmp_6^0 x_5^0
   1: l1 -> l2 : result_4^0'=result_4^post2, tmp_6^0'=tmp_6^post2, x_5^0'=x_5^post2, (0 == 0 /\ tmp_6^post2 <= 0 /\ -tmp_6^post2 <= 0 /\ -x_5^post2+x_5^0 == 0 /\ x_5^0 <= 0), cost: 1
   4: l1 -> l4 : result_4^0'=result_4^post5, tmp_6^0'=tmp_6^post5, x_5^0'=x_5^post5, (0 == 0 /\ -x_5^post5+x_5^0 == 0 /\ -result_4^post5+result_4^0 == 0), cost: 1
   8: l1 -> l7 : result_4^0'=result_4^post9, tmp_6^0'=tmp_6^post9, x_5^0'=x_5^post9, (0 == 0 /\ -result_4^post9+result_4^0 == 0 /\ -x_5^post9+x_5^0 == 0), cost: 1
  15: l1 -> l1 : result_4^0'=result_4^post4, tmp_6^0'=tmp_6^post4, x_5^0'=x_5^post4, (0 == 0 /\ tmp_6^post3 <= 0 /\ -tmp_6^post4+tmp_6^post3 == 0 /\ -tmp_6^post3 <= 0 /\ result_4^0-result_4^post3 == 0 /\ -result_4^post4+result_4^post3 == 0 /\ -x_5^post3+x_5^0 == 0 /\ -x_5^post4+x_5^post3 == 0 /\ 1-x_5^0 <= 0), cost: 1
   5: l4 -> l5 : result_4^0'=result_4^post6, tmp_6^0'=tmp_6^post6, x_5^0'=x_5^post6, (-result_4^post6+result_4^0 == 0 /\ -x_5^post6+x_5^0 == 0 /\ 1+tmp_6^0 <= 0 /\ tmp_6^0-tmp_6^post6 == 0), cost: 1
   6: l4 -> l5 : result_4^0'=result_4^post7, tmp_6^0'=tmp_6^post7, x_5^0'=x_5^post7, (-x_5^post7+x_5^0 == 0 /\ -result_4^post7+result_4^0 == 0 /\ 1-tmp_6^0 <= 0 /\ tmp_6^0-tmp_6^post7 == 0), cost: 1
   7: l5 -> l2 : result_4^0'=result_4^post8, tmp_6^0'=tmp_6^post8, x_5^0'=x_5^post8, (0 == 0 /\ tmp_6^0-tmp_6^post8 == 0 /\ 1-x_5^0+x_5^post8 == 0 /\ x_5^post8 <= 0), cost: 1
   9: l7 -> l8 : result_4^0'=result_4^post10, tmp_6^0'=tmp_6^post10, x_5^0'=x_5^post10, (1+tmp_6^0 <= 0 /\ tmp_6^0-tmp_6^post10 == 0 /\ -result_4^post10+result_4^0 == 0 /\ -x_5^post10+x_5^0 == 0), cost: 1
  10: l7 -> l8 : result_4^0'=result_4^post11, tmp_6^0'=tmp_6^post11, x_5^0'=x_5^post11, (-x_5^post11+x_5^0 == 0 /\ -result_4^post11+result_4^0 == 0 /\ 1-tmp_6^0 <= 0 /\ tmp_6^0-tmp_6^post11 == 0), cost: 1
  16: l8 -> l1 : result_4^0'=result_4^post13, tmp_6^0'=tmp_6^post13, x_5^0'=x_5^post13, (1+x_5^post12-x_5^0 == 0 /\ 1-x_5^post12 <= 0 /\ -result_4^post12+result_4^0 == 0 /\ -tmp_6^post13+tmp_6^post12 == 0 /\ x_5^post12-x_5^post13 == 0 /\ result_4^post12-result_4^post13 == 0 /\ tmp_6^0-tmp_6^post12 == 0), cost: 1
  14: l9 -> l1 : result_4^0'=result_4^post1, tmp_6^0'=tmp_6^post1, x_5^0'=x_5^post1, (-tmp_6^post1+tmp_6^post14 == 0 /\ result_4^0-result_4^post14 == 0 /\ -x_5^post14+x_5^0 == 0 /\ -result_4^post1+result_4^post14 == 0 /\ -x_5^post1+x_5^post14 == 0 /\ tmp_6^0-tmp_6^post14 == 0), cost: 1

	Eliminating location l0 by chaining:

	Applied chaining

	First rule:
	l9 -> l0 : result_4^0'=result_4^post14, tmp_6^0'=tmp_6^post14, x_5^0'=x_5^post14, (result_4^0-result_4^post14 == 0 /\ -x_5^post14+x_5^0 == 0 /\ tmp_6^0-tmp_6^post14 == 0), cost: 1
	Second rule:
	l0 -> l1 : result_4^0'=result_4^post1, tmp_6^0'=tmp_6^post1, x_5^0'=x_5^post1, (-tmp_6^post1+tmp_6^0 == 0 /\ -x_5^post1+x_5^0 == 0 /\ result_4^0-result_4^post1 == 0), cost: 1
	New rule:
	l9 -> l1 : result_4^0'=result_4^post1, tmp_6^0'=tmp_6^post1, x_5^0'=x_5^post1, (-tmp_6^post1+tmp_6^post14 == 0 /\ result_4^0-result_4^post14 == 0 /\ -x_5^post14+x_5^0 == 0 /\ -result_4^post1+result_4^post14 == 0 /\ -x_5^post1+x_5^post14 == 0 /\ tmp_6^0-tmp_6^post14 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 13
	
	Eliminating location l3 by chaining:

	Applied chaining

	First rule:
	l1 -> l3 : result_4^0'=result_4^post3, tmp_6^0'=tmp_6^post3, x_5^0'=x_5^post3, (0 == 0 /\ tmp_6^post3 <= 0 /\ -tmp_6^post3 <= 0 /\ result_4^0-result_4^post3 == 0 /\ -x_5^post3+x_5^0 == 0 /\ 1-x_5^0 <= 0), cost: 1
	Second rule:
	l3 -> l1 : result_4^0'=result_4^post4, tmp_6^0'=tmp_6^post4, x_5^0'=x_5^post4, (-tmp_6^post4+tmp_6^0 == 0 /\ -x_5^post4+x_5^0 == 0 /\ result_4^0-result_4^post4 == 0), cost: 1
	New rule:
	l1 -> l1 : result_4^0'=result_4^post4, tmp_6^0'=tmp_6^post4, x_5^0'=x_5^post4, (0 == 0 /\ tmp_6^post3 <= 0 /\ -tmp_6^post4+tmp_6^post3 == 0 /\ -tmp_6^post3 <= 0 /\ result_4^0-result_4^post3 == 0 /\ -result_4^post4+result_4^post3 == 0 /\ -x_5^post3+x_5^0 == 0 /\ -x_5^post4+x_5^post3 == 0 /\ 1-x_5^0 <= 0), cost: 1
	
	Applied deletion

	Removed the following rules: 2 3
	
	Eliminating location l6 by chaining:

	Applied chaining

	First rule:
	l8 -> l6 : result_4^0'=result_4^post12, tmp_6^0'=tmp_6^post12, x_5^0'=x_5^post12, (1+x_5^post12-x_5^0 == 0 /\ 1-x_5^post12 <= 0 /\ -result_4^post12+result_4^0 == 0 /\ tmp_6^0-tmp_6^post12 == 0), cost: 1
	Second rule:
	l6 -> l1 : result_4^0'=result_4^post13, tmp_6^0'=tmp_6^post13, x_5^0'=x_5^post13, (result_4^0-result_4^post13 == 0 /\ -x_5^post13+x_5^0 == 0 /\ -tmp_6^post13+tmp_6^0 == 0), cost: 1
	New rule:
	l8 -> l1 : result_4^0'=result_4^post13, tmp_6^0'=tmp_6^post13, x_5^0'=x_5^post13, (1+x_5^post12-x_5^0 == 0 /\ 1-x_5^post12 <= 0 /\ -result_4^post12+result_4^0 == 0 /\ -tmp_6^post13+tmp_6^post12 == 0 /\ x_5^post12-x_5^post13 == 0 /\ result_4^post12-result_4^post13 == 0 /\ tmp_6^0-tmp_6^post12 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 11 12

Simplified Transitions

Start location: l9
Program variables: result_4^0 tmp_6^0 x_5^0
  17: l1 -> l2 : result_4^0'=result_4^post2, tmp_6^0'=0, x_5^0 <= 0, cost: 1
  18: l1 -> l4 : tmp_6^0'=tmp_6^post5, T, cost: 1
  22: l1 -> l7 : tmp_6^0'=tmp_6^post9, T, cost: 1
  26: l1 -> l1 : tmp_6^0'=0, 1-x_5^0 <= 0, cost: 1
  19: l4 -> l5 : 1+tmp_6^0 <= 0, cost: 1
  20: l4 -> l5 : 1-tmp_6^0 <= 0, cost: 1
  21: l5 -> l2 : result_4^0'=result_4^post8, x_5^0'=-1+x_5^0, -1+x_5^0 <= 0, cost: 1
  23: l7 -> l8 : 1+tmp_6^0 <= 0, cost: 1
  24: l7 -> l8 : 1-tmp_6^0 <= 0, cost: 1
  27: l8 -> l1 : x_5^0'=-1+x_5^0, 2-x_5^0 <= 0, cost: 1
  25: l9 -> l1 : T, cost: 1

	made implied equalities explicit

	Original rule:
	l1 -> l2 : result_4^0'=result_4^post2, tmp_6^0'=tmp_6^post2, x_5^0'=x_5^post2, (0 == 0 /\ tmp_6^post2 <= 0 /\ -tmp_6^post2 <= 0 /\ -x_5^post2+x_5^0 == 0 /\ x_5^0 <= 0), cost: 1
	New rule:
	l1 -> l2 : result_4^0'=result_4^post2, tmp_6^0'=tmp_6^post2, x_5^0'=x_5^post2, (0 == 0 /\ tmp_6^post2 <= 0 /\ tmp_6^post2 == 0 /\ -tmp_6^post2 <= 0 /\ -x_5^post2+x_5^0 == 0 /\ x_5^0 <= 0), cost: 1
	
	Propagated Equalities

	Original rule:
	l1 -> l2 : result_4^0'=result_4^post2, tmp_6^0'=tmp_6^post2, x_5^0'=x_5^post2, (0 == 0 /\ tmp_6^post2 <= 0 /\ tmp_6^post2 == 0 /\ -tmp_6^post2 <= 0 /\ -x_5^post2+x_5^0 == 0 /\ x_5^0 <= 0), cost: 1
	New rule:
	l1 -> l2 : result_4^0'=result_4^post2, tmp_6^0'=0, x_5^0'=x_5^0, (0 <= 0 /\ 0 == 0 /\ x_5^0 <= 0), cost: 1
	
		propagated equality tmp_6^post2 = 0
		
		propagated equality x_5^post2 = x_5^0
		
	Simplified Guard

	Original rule:
	l1 -> l2 : result_4^0'=result_4^post2, tmp_6^0'=0, x_5^0'=x_5^0, (0 <= 0 /\ 0 == 0 /\ x_5^0 <= 0), cost: 1
	New rule:
	l1 -> l2 : result_4^0'=result_4^post2, tmp_6^0'=0, x_5^0'=x_5^0, x_5^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l1 -> l2 : result_4^0'=result_4^post2, tmp_6^0'=0, x_5^0'=x_5^0, x_5^0 <= 0, cost: 1
	New rule:
	l1 -> l2 : result_4^0'=result_4^post2, tmp_6^0'=0, x_5^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l1 -> l4 : result_4^0'=result_4^post5, tmp_6^0'=tmp_6^post5, x_5^0'=x_5^post5, (0 == 0 /\ -x_5^post5+x_5^0 == 0 /\ -result_4^post5+result_4^0 == 0), cost: 1
	New rule:
	l1 -> l4 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^post5, x_5^0'=x_5^0, 0 == 0, cost: 1
	
		propagated equality x_5^post5 = x_5^0
		
		propagated equality result_4^post5 = result_4^0
		
	Simplified Guard

	Original rule:
	l1 -> l4 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^post5, x_5^0'=x_5^0, 0 == 0, cost: 1
	New rule:
	l1 -> l4 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^post5, x_5^0'=x_5^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l1 -> l4 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^post5, x_5^0'=x_5^0, T, cost: 1
	New rule:
	l1 -> l4 : tmp_6^0'=tmp_6^post5, T, cost: 1
	
	Propagated Equalities

	Original rule:
	l4 -> l5 : result_4^0'=result_4^post6, tmp_6^0'=tmp_6^post6, x_5^0'=x_5^post6, (-result_4^post6+result_4^0 == 0 /\ -x_5^post6+x_5^0 == 0 /\ 1+tmp_6^0 <= 0 /\ tmp_6^0-tmp_6^post6 == 0), cost: 1
	New rule:
	l4 -> l5 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^0, x_5^0'=x_5^0, (0 == 0 /\ 1+tmp_6^0 <= 0), cost: 1
	
		propagated equality result_4^post6 = result_4^0
		
		propagated equality x_5^post6 = x_5^0
		
		propagated equality tmp_6^post6 = tmp_6^0
		
	Simplified Guard

	Original rule:
	l4 -> l5 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^0, x_5^0'=x_5^0, (0 == 0 /\ 1+tmp_6^0 <= 0), cost: 1
	New rule:
	l4 -> l5 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^0, x_5^0'=x_5^0, 1+tmp_6^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l4 -> l5 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^0, x_5^0'=x_5^0, 1+tmp_6^0 <= 0, cost: 1
	New rule:
	l4 -> l5 : 1+tmp_6^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l4 -> l5 : result_4^0'=result_4^post7, tmp_6^0'=tmp_6^post7, x_5^0'=x_5^post7, (-x_5^post7+x_5^0 == 0 /\ -result_4^post7+result_4^0 == 0 /\ 1-tmp_6^0 <= 0 /\ tmp_6^0-tmp_6^post7 == 0), cost: 1
	New rule:
	l4 -> l5 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^0, x_5^0'=x_5^0, (0 == 0 /\ 1-tmp_6^0 <= 0), cost: 1
	
		propagated equality x_5^post7 = x_5^0
		
		propagated equality result_4^post7 = result_4^0
		
		propagated equality tmp_6^post7 = tmp_6^0
		
	Simplified Guard

	Original rule:
	l4 -> l5 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^0, x_5^0'=x_5^0, (0 == 0 /\ 1-tmp_6^0 <= 0), cost: 1
	New rule:
	l4 -> l5 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^0, x_5^0'=x_5^0, 1-tmp_6^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l4 -> l5 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^0, x_5^0'=x_5^0, 1-tmp_6^0 <= 0, cost: 1
	New rule:
	l4 -> l5 : 1-tmp_6^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l5 -> l2 : result_4^0'=result_4^post8, tmp_6^0'=tmp_6^post8, x_5^0'=x_5^post8, (0 == 0 /\ tmp_6^0-tmp_6^post8 == 0 /\ 1-x_5^0+x_5^post8 == 0 /\ x_5^post8 <= 0), cost: 1
	New rule:
	l5 -> l2 : result_4^0'=result_4^post8, tmp_6^0'=tmp_6^0, x_5^0'=-1+x_5^0, (0 == 0 /\ -1+x_5^0 <= 0), cost: 1
	
		propagated equality tmp_6^post8 = tmp_6^0
		
		propagated equality x_5^post8 = -1+x_5^0
		
	Simplified Guard

	Original rule:
	l5 -> l2 : result_4^0'=result_4^post8, tmp_6^0'=tmp_6^0, x_5^0'=-1+x_5^0, (0 == 0 /\ -1+x_5^0 <= 0), cost: 1
	New rule:
	l5 -> l2 : result_4^0'=result_4^post8, tmp_6^0'=tmp_6^0, x_5^0'=-1+x_5^0, -1+x_5^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l5 -> l2 : result_4^0'=result_4^post8, tmp_6^0'=tmp_6^0, x_5^0'=-1+x_5^0, -1+x_5^0 <= 0, cost: 1
	New rule:
	l5 -> l2 : result_4^0'=result_4^post8, x_5^0'=-1+x_5^0, -1+x_5^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l1 -> l7 : result_4^0'=result_4^post9, tmp_6^0'=tmp_6^post9, x_5^0'=x_5^post9, (0 == 0 /\ -result_4^post9+result_4^0 == 0 /\ -x_5^post9+x_5^0 == 0), cost: 1
	New rule:
	l1 -> l7 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^post9, x_5^0'=x_5^0, 0 == 0, cost: 1
	
		propagated equality result_4^post9 = result_4^0
		
		propagated equality x_5^post9 = x_5^0
		
	Simplified Guard

	Original rule:
	l1 -> l7 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^post9, x_5^0'=x_5^0, 0 == 0, cost: 1
	New rule:
	l1 -> l7 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^post9, x_5^0'=x_5^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l1 -> l7 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^post9, x_5^0'=x_5^0, T, cost: 1
	New rule:
	l1 -> l7 : tmp_6^0'=tmp_6^post9, T, cost: 1
	
	Propagated Equalities

	Original rule:
	l7 -> l8 : result_4^0'=result_4^post10, tmp_6^0'=tmp_6^post10, x_5^0'=x_5^post10, (1+tmp_6^0 <= 0 /\ tmp_6^0-tmp_6^post10 == 0 /\ -result_4^post10+result_4^0 == 0 /\ -x_5^post10+x_5^0 == 0), cost: 1
	New rule:
	l7 -> l8 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^0, x_5^0'=x_5^0, (0 == 0 /\ 1+tmp_6^0 <= 0), cost: 1
	
		propagated equality tmp_6^post10 = tmp_6^0
		
		propagated equality result_4^post10 = result_4^0
		
		propagated equality x_5^post10 = x_5^0
		
	Simplified Guard

	Original rule:
	l7 -> l8 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^0, x_5^0'=x_5^0, (0 == 0 /\ 1+tmp_6^0 <= 0), cost: 1
	New rule:
	l7 -> l8 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^0, x_5^0'=x_5^0, 1+tmp_6^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l7 -> l8 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^0, x_5^0'=x_5^0, 1+tmp_6^0 <= 0, cost: 1
	New rule:
	l7 -> l8 : 1+tmp_6^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l7 -> l8 : result_4^0'=result_4^post11, tmp_6^0'=tmp_6^post11, x_5^0'=x_5^post11, (-x_5^post11+x_5^0 == 0 /\ -result_4^post11+result_4^0 == 0 /\ 1-tmp_6^0 <= 0 /\ tmp_6^0-tmp_6^post11 == 0), cost: 1
	New rule:
	l7 -> l8 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^0, x_5^0'=x_5^0, (0 == 0 /\ 1-tmp_6^0 <= 0), cost: 1
	
		propagated equality x_5^post11 = x_5^0
		
		propagated equality result_4^post11 = result_4^0
		
		propagated equality tmp_6^post11 = tmp_6^0
		
	Simplified Guard

	Original rule:
	l7 -> l8 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^0, x_5^0'=x_5^0, (0 == 0 /\ 1-tmp_6^0 <= 0), cost: 1
	New rule:
	l7 -> l8 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^0, x_5^0'=x_5^0, 1-tmp_6^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l7 -> l8 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^0, x_5^0'=x_5^0, 1-tmp_6^0 <= 0, cost: 1
	New rule:
	l7 -> l8 : 1-tmp_6^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l9 -> l1 : result_4^0'=result_4^post1, tmp_6^0'=tmp_6^post1, x_5^0'=x_5^post1, (-tmp_6^post1+tmp_6^post14 == 0 /\ result_4^0-result_4^post14 == 0 /\ -x_5^post14+x_5^0 == 0 /\ -result_4^post1+result_4^post14 == 0 /\ -x_5^post1+x_5^post14 == 0 /\ tmp_6^0-tmp_6^post14 == 0), cost: 1
	New rule:
	l9 -> l1 : result_4^0'=result_4^post14, tmp_6^0'=tmp_6^post14, x_5^0'=x_5^post14, (0 == 0 /\ result_4^0-result_4^post14 == 0 /\ -x_5^post14+x_5^0 == 0 /\ tmp_6^0-tmp_6^post14 == 0), cost: 1
	
		propagated equality tmp_6^post1 = tmp_6^post14
		
		propagated equality result_4^post1 = result_4^post14
		
		propagated equality x_5^post1 = x_5^post14
		
	Propagated Equalities

	Original rule:
	l9 -> l1 : result_4^0'=result_4^post14, tmp_6^0'=tmp_6^post14, x_5^0'=x_5^post14, (0 == 0 /\ result_4^0-result_4^post14 == 0 /\ -x_5^post14+x_5^0 == 0 /\ tmp_6^0-tmp_6^post14 == 0), cost: 1
	New rule:
	l9 -> l1 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^0, x_5^0'=x_5^0, 0 == 0, cost: 1
	
		propagated equality result_4^post14 = result_4^0
		
		propagated equality x_5^post14 = x_5^0
		
		propagated equality tmp_6^post14 = tmp_6^0
		
	Simplified Guard

	Original rule:
	l9 -> l1 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^0, x_5^0'=x_5^0, 0 == 0, cost: 1
	New rule:
	l9 -> l1 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^0, x_5^0'=x_5^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l9 -> l1 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^0, x_5^0'=x_5^0, T, cost: 1
	New rule:
	l9 -> l1 : T, cost: 1
	
	made implied equalities explicit

	Original rule:
	l1 -> l1 : result_4^0'=result_4^post4, tmp_6^0'=tmp_6^post4, x_5^0'=x_5^post4, (0 == 0 /\ tmp_6^post3 <= 0 /\ -tmp_6^post4+tmp_6^post3 == 0 /\ -tmp_6^post3 <= 0 /\ result_4^0-result_4^post3 == 0 /\ -result_4^post4+result_4^post3 == 0 /\ -x_5^post3+x_5^0 == 0 /\ -x_5^post4+x_5^post3 == 0 /\ 1-x_5^0 <= 0), cost: 1
	New rule:
	l1 -> l1 : result_4^0'=result_4^post4, tmp_6^0'=tmp_6^post4, x_5^0'=x_5^post4, (0 == 0 /\ tmp_6^post3 <= 0 /\ tmp_6^post3 == 0 /\ -tmp_6^post4+tmp_6^post3 == 0 /\ -tmp_6^post3 <= 0 /\ result_4^0-result_4^post3 == 0 /\ -result_4^post4+result_4^post3 == 0 /\ -x_5^post3+x_5^0 == 0 /\ -x_5^post4+x_5^post3 == 0 /\ 1-x_5^0 <= 0), cost: 1
	
	Propagated Equalities

	Original rule:
	l1 -> l1 : result_4^0'=result_4^post4, tmp_6^0'=tmp_6^post4, x_5^0'=x_5^post4, (0 == 0 /\ tmp_6^post3 <= 0 /\ tmp_6^post3 == 0 /\ -tmp_6^post4+tmp_6^post3 == 0 /\ -tmp_6^post3 <= 0 /\ result_4^0-result_4^post3 == 0 /\ -result_4^post4+result_4^post3 == 0 /\ -x_5^post3+x_5^0 == 0 /\ -x_5^post4+x_5^post3 == 0 /\ 1-x_5^0 <= 0), cost: 1
	New rule:
	l1 -> l1 : result_4^0'=result_4^post3, tmp_6^0'=tmp_6^post3, x_5^0'=x_5^post3, (0 == 0 /\ tmp_6^post3 <= 0 /\ tmp_6^post3 == 0 /\ -tmp_6^post3 <= 0 /\ result_4^0-result_4^post3 == 0 /\ -x_5^post3+x_5^0 == 0 /\ 1-x_5^0 <= 0), cost: 1
	
		propagated equality tmp_6^post4 = tmp_6^post3
		
		propagated equality result_4^post4 = result_4^post3
		
		propagated equality x_5^post4 = x_5^post3
		
	Propagated Equalities

	Original rule:
	l1 -> l1 : result_4^0'=result_4^post3, tmp_6^0'=tmp_6^post3, x_5^0'=x_5^post3, (0 == 0 /\ tmp_6^post3 <= 0 /\ tmp_6^post3 == 0 /\ -tmp_6^post3 <= 0 /\ result_4^0-result_4^post3 == 0 /\ -x_5^post3+x_5^0 == 0 /\ 1-x_5^0 <= 0), cost: 1
	New rule:
	l1 -> l1 : result_4^0'=result_4^0, tmp_6^0'=0, x_5^0'=x_5^0, (0 <= 0 /\ 0 == 0 /\ 1-x_5^0 <= 0), cost: 1
	
		propagated equality tmp_6^post3 = 0
		
		propagated equality result_4^post3 = result_4^0
		
		propagated equality x_5^post3 = x_5^0
		
	Simplified Guard

	Original rule:
	l1 -> l1 : result_4^0'=result_4^0, tmp_6^0'=0, x_5^0'=x_5^0, (0 <= 0 /\ 0 == 0 /\ 1-x_5^0 <= 0), cost: 1
	New rule:
	l1 -> l1 : result_4^0'=result_4^0, tmp_6^0'=0, x_5^0'=x_5^0, 1-x_5^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l1 -> l1 : result_4^0'=result_4^0, tmp_6^0'=0, x_5^0'=x_5^0, 1-x_5^0 <= 0, cost: 1
	New rule:
	l1 -> l1 : tmp_6^0'=0, 1-x_5^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l8 -> l1 : result_4^0'=result_4^post13, tmp_6^0'=tmp_6^post13, x_5^0'=x_5^post13, (1+x_5^post12-x_5^0 == 0 /\ 1-x_5^post12 <= 0 /\ -result_4^post12+result_4^0 == 0 /\ -tmp_6^post13+tmp_6^post12 == 0 /\ x_5^post12-x_5^post13 == 0 /\ result_4^post12-result_4^post13 == 0 /\ tmp_6^0-tmp_6^post12 == 0), cost: 1
	New rule:
	l8 -> l1 : result_4^0'=result_4^post12, tmp_6^0'=tmp_6^post12, x_5^0'=x_5^post12, (0 == 0 /\ 1+x_5^post12-x_5^0 == 0 /\ 1-x_5^post12 <= 0 /\ -result_4^post12+result_4^0 == 0 /\ tmp_6^0-tmp_6^post12 == 0), cost: 1
	
		propagated equality tmp_6^post13 = tmp_6^post12
		
		propagated equality x_5^post13 = x_5^post12
		
		propagated equality result_4^post13 = result_4^post12
		
	Propagated Equalities

	Original rule:
	l8 -> l1 : result_4^0'=result_4^post12, tmp_6^0'=tmp_6^post12, x_5^0'=x_5^post12, (0 == 0 /\ 1+x_5^post12-x_5^0 == 0 /\ 1-x_5^post12 <= 0 /\ -result_4^post12+result_4^0 == 0 /\ tmp_6^0-tmp_6^post12 == 0), cost: 1
	New rule:
	l8 -> l1 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^0, x_5^0'=-1+x_5^0, (0 == 0 /\ 2-x_5^0 <= 0), cost: 1
	
		propagated equality x_5^post12 = -1+x_5^0
		
		propagated equality result_4^post12 = result_4^0
		
		propagated equality tmp_6^post12 = tmp_6^0
		
	Simplified Guard

	Original rule:
	l8 -> l1 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^0, x_5^0'=-1+x_5^0, (0 == 0 /\ 2-x_5^0 <= 0), cost: 1
	New rule:
	l8 -> l1 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^0, x_5^0'=-1+x_5^0, 2-x_5^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l8 -> l1 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^0, x_5^0'=-1+x_5^0, 2-x_5^0 <= 0, cost: 1
	New rule:
	l8 -> l1 : x_5^0'=-1+x_5^0, 2-x_5^0 <= 0, cost: 1

Step with 25

	Trace

	25[T]
	
	Blocked

	[{}, {}]

Step with 17

	Trace

	25[T], 17[(x_5^0 <= 0)]
	
	Blocked

	[{}, {}, {}]

Backtrack

	Trace

	25[T]
	
	Blocked

	[{}, {17[T]}]

Step with 18

	Trace

	25[T], 18[T]
	
	Blocked

	[{}, {17[T]}, {}]

Step with 19

	Trace

	25[T], 18[T], 19[(1+tmp_6^0 <= 0)]
	
	Blocked

	[{}, {17[T]}, {}, {}]

Step with 21

	Trace

	25[T], 18[T], 19[(1+tmp_6^0 <= 0)], 21[(-1+x_5^0 <= 0)]
	
	Blocked

	[{}, {17[T]}, {}, {}, {}]

Backtrack

	Trace

	25[T], 18[T], 19[(1+tmp_6^0 <= 0)]
	
	Blocked

	[{}, {17[T]}, {}, {21[T]}]

Backtrack

	Trace

	25[T], 18[T]
	
	Blocked

	[{}, {17[T]}, {19[T]}]

Step with 20

	Trace

	25[T], 18[T], 20[(1-tmp_6^0 <= 0)]
	
	Blocked

	[{}, {17[T]}, {19[T]}, {}]

Step with 21

	Trace

	25[T], 18[T], 20[(1-tmp_6^0 <= 0)], 21[(-1+x_5^0 <= 0)]
	
	Blocked

	[{}, {17[T]}, {19[T]}, {}, {}]

Backtrack

	Trace

	25[T], 18[T], 20[(1-tmp_6^0 <= 0)]
	
	Blocked

	[{}, {17[T]}, {19[T]}, {21[T]}]

Backtrack

	Trace

	25[T], 18[T]
	
	Blocked

	[{}, {17[T]}, {19[T], 20[T]}]

Backtrack

	Trace

	25[T]
	
	Blocked

	[{}, {17[T], 18[T]}]

Step with 22

	Trace

	25[T], 22[T]
	
	Blocked

	[{}, {17[T], 18[T]}, {}]

Step with 23

	Trace

	25[T], 22[T], 23[(1+tmp_6^0 <= 0)]
	
	Blocked

	[{}, {17[T], 18[T]}, {}, {}]

Step with 27

	Trace

	25[T], 22[T], 23[(1+tmp_6^0 <= 0)], 27[(2-x_5^0 <= 0)]
	
	Blocked

	[{}, {17[T], 18[T]}, {}, {}, {}]

Accelerate

Start location: l9
Program variables: result_4^0 tmp_6^0 x_5^0
  17: l1 -> l2 : result_4^0'=result_4^post2, tmp_6^0'=0, x_5^0 <= 0, cost: 1
  18: l1 -> l4 : tmp_6^0'=tmp_6^post5, T, cost: 1
  22: l1 -> l7 : tmp_6^0'=tmp_6^post9, T, cost: 1
  26: l1 -> l1 : tmp_6^0'=0, 1-x_5^0 <= 0, cost: 1
  28: l1 -> l1 : tmp_6^0'=tmp_6^post91, x_5^0'=-n+x_5^0, (-1+n >= 0 /\ -1-n+x_5^0 >= 0 /\ -1-tmp_6^post91 >= 0), cost: 1
  19: l4 -> l5 : 1+tmp_6^0 <= 0, cost: 1
  20: l4 -> l5 : 1-tmp_6^0 <= 0, cost: 1
  21: l5 -> l2 : result_4^0'=result_4^post8, x_5^0'=-1+x_5^0, -1+x_5^0 <= 0, cost: 1
  23: l7 -> l8 : 1+tmp_6^0 <= 0, cost: 1
  24: l7 -> l8 : 1-tmp_6^0 <= 0, cost: 1
  27: l8 -> l1 : x_5^0'=-1+x_5^0, 2-x_5^0 <= 0, cost: 1
  25: l9 -> l1 : T, cost: 1

	Loop Acceleration

	Original rule:
	l1 -> l1 : tmp_6^0'=tmp_6^post91, x_5^0'=-1+x_5^0, (2-x_5^0 <= 0 /\ 1+tmp_6^post91 <= 0), cost: 1
	New rule:
	l1 -> l1 : tmp_6^0'=tmp_6^post91, x_5^0'=-n+x_5^0, (-1+n >= 0 /\ -1-n+x_5^0 >= 0 /\ -1-tmp_6^post91 >= 0), cost: 1

		-2+x_5^0 >= 0 [0]: montonic decrease yields -1-n+x_5^0 >= 0
		
		-2+x_5^0 >= 0 [1]: eventual increase yields (1 <= 0 /\ -2+x_5^0 >= 0)
		
		-1-tmp_6^post91 >= 0 [0]: monotonic increase yields -1-tmp_6^post91 >= 0
		
		Replacement map: {-2+x_5^0 >= 0 -> -1-n+x_5^0 >= 0, -1-tmp_6^post91 >= 0 -> -1-tmp_6^post91 >= 0}

	Trace

	25[T], 28[(-1+n >= 0 /\ -1-n+x_5^0 >= 0 /\ -1-tmp_6^post91 >= 0)]
	
	Blocked

	[{}, {17[T], 18[T]}, {28[T]}]

Step with 18

	Trace

	25[T], 28[(-1+n >= 0 /\ -1-n+x_5^0 >= 0 /\ -1-tmp_6^post91 >= 0)], 18[T]
	
	Blocked

	[{}, {17[T], 18[T]}, {17[T], 28[T]}, {}]

Step with 20

	Trace

	25[T], 28[(-1+n >= 0 /\ -1-n+x_5^0 >= 0 /\ -1-tmp_6^post91 >= 0)], 18[T], 20[(1-tmp_6^0 <= 0)]
	
	Blocked

	[{}, {17[T], 18[T]}, {17[T], 28[T]}, {}, {}]

Step with 21

	Trace

	25[T], 28[(-1+n >= 0 /\ -1-n+x_5^0 >= 0 /\ -1-tmp_6^post91 >= 0)], 18[T], 20[(1-tmp_6^0 <= 0)], 21[(-1+x_5^0 <= 0)]
	
	Blocked

	[{}, {17[T], 18[T]}, {17[T], 28[T]}, {}, {}, {}]

Backtrack

	Trace

	25[T], 28[(-1+n >= 0 /\ -1-n+x_5^0 >= 0 /\ -1-tmp_6^post91 >= 0)], 18[T], 20[(1-tmp_6^0 <= 0)]
	
	Blocked

	[{}, {17[T], 18[T]}, {17[T], 28[T]}, {}, {21[T]}]

Backtrack

	Trace

	25[T], 28[(-1+n >= 0 /\ -1-n+x_5^0 >= 0 /\ -1-tmp_6^post91 >= 0)], 18[T]
	
	Blocked

	[{}, {17[T], 18[T]}, {17[T], 28[T]}, {20[T]}]

Step with 19

	Trace

	25[T], 28[(-1+n >= 0 /\ -1-n+x_5^0 >= 0 /\ -1-tmp_6^post91 >= 0)], 18[T], 19[(1+tmp_6^0 <= 0)]
	
	Blocked

	[{}, {17[T], 18[T]}, {17[T], 28[T]}, {20[T]}, {}]

Step with 21

	Trace

	25[T], 28[(-1+n >= 0 /\ -1-n+x_5^0 >= 0 /\ -1-tmp_6^post91 >= 0)], 18[T], 19[(1+tmp_6^0 <= 0)], 21[(-1+x_5^0 <= 0)]
	
	Blocked

	[{}, {17[T], 18[T]}, {17[T], 28[T]}, {20[T]}, {}, {}]

Backtrack

	Trace

	25[T], 28[(-1+n >= 0 /\ -1-n+x_5^0 >= 0 /\ -1-tmp_6^post91 >= 0)], 18[T], 19[(1+tmp_6^0 <= 0)]
	
	Blocked

	[{}, {17[T], 18[T]}, {17[T], 28[T]}, {20[T]}, {21[T]}]

Backtrack

	Trace

	25[T], 28[(-1+n >= 0 /\ -1-n+x_5^0 >= 0 /\ -1-tmp_6^post91 >= 0)], 18[T]
	
	Blocked

	[{}, {17[T], 18[T]}, {17[T], 28[T]}, {19[T], 20[T]}]

Backtrack

	Trace

	25[T], 28[(-1+n >= 0 /\ -1-n+x_5^0 >= 0 /\ -1-tmp_6^post91 >= 0)]
	
	Blocked

	[{}, {17[T], 18[T]}, {17[T], 18[T], 28[T]}]

Step with 22

	Trace

	25[T], 28[(-1+n >= 0 /\ -1-n+x_5^0 >= 0 /\ -1-tmp_6^post91 >= 0)], 22[T]
	
	Blocked

	[{}, {17[T], 18[T]}, {17[T], 18[T], 28[T]}, {}]

Step with 23

	Trace

	25[T], 28[(-1+n >= 0 /\ -1-n+x_5^0 >= 0 /\ -1-tmp_6^post91 >= 0)], 22[T], 23[(1+tmp_6^0 <= 0)]
	
	Blocked

	[{}, {17[T], 18[T]}, {17[T], 18[T], 28[T]}, {}, {}]

Step with 27

	Trace

	25[T], 28[(-1+n >= 0 /\ -1-n+x_5^0 >= 0 /\ -1-tmp_6^post91 >= 0)], 22[T], 23[(1+tmp_6^0 <= 0)], 27[(2-x_5^0 <= 0)]
	
	Blocked

	[{}, {17[T], 18[T]}, {17[T], 18[T], 28[T]}, {}, {}, {}]

Covered

	Trace

	25[T], 28[(-1+n >= 0 /\ -1-n+x_5^0 >= 0 /\ -1-tmp_6^post91 >= 0)], 22[T], 23[(1+tmp_6^0 <= 0)]
	
	Blocked

	[{}, {17[T], 18[T]}, {17[T], 18[T], 28[T]}, {}, {27[T]}]

Backtrack

	Trace

	25[T], 28[(-1+n >= 0 /\ -1-n+x_5^0 >= 0 /\ -1-tmp_6^post91 >= 0)], 22[T]
	
	Blocked

	[{}, {17[T], 18[T]}, {17[T], 18[T], 28[T]}, {23[T]}]

Step with 24

	Trace

	25[T], 28[(-1+n >= 0 /\ -1-n+x_5^0 >= 0 /\ -1-tmp_6^post91 >= 0)], 22[T], 24[(1-tmp_6^0 <= 0)]
	
	Blocked

	[{}, {17[T], 18[T]}, {17[T], 18[T], 28[T]}, {23[T]}, {}]

Step with 27

	Trace

	25[T], 28[(-1+n >= 0 /\ -1-n+x_5^0 >= 0 /\ -1-tmp_6^post91 >= 0)], 22[T], 24[(1-tmp_6^0 <= 0)], 27[(2-x_5^0 <= 0)]
	
	Blocked

	[{}, {17[T], 18[T]}, {17[T], 18[T], 28[T]}, {23[T]}, {}, {}]

Accelerate

Start location: l9
Program variables: result_4^0 tmp_6^0 x_5^0
  17: l1 -> l2 : result_4^0'=result_4^post2, tmp_6^0'=0, x_5^0 <= 0, cost: 1
  18: l1 -> l4 : tmp_6^0'=tmp_6^post5, T, cost: 1
  22: l1 -> l7 : tmp_6^0'=tmp_6^post9, T, cost: 1
  26: l1 -> l1 : tmp_6^0'=0, 1-x_5^0 <= 0, cost: 1
  28: l1 -> l1 : tmp_6^0'=tmp_6^post91, x_5^0'=-n+x_5^0, (-1+n >= 0 /\ -1-n+x_5^0 >= 0 /\ -1-tmp_6^post91 >= 0), cost: 1
  29: l1 -> l1 : tmp_6^0'=tmp_6^post92, x_5^0'=-n2+x_5^0, (-1+tmp_6^post92 >= 0 /\ -1+n2 >= 0 /\ -1-n2+x_5^0 >= 0), cost: 1
  19: l4 -> l5 : 1+tmp_6^0 <= 0, cost: 1
  20: l4 -> l5 : 1-tmp_6^0 <= 0, cost: 1
  21: l5 -> l2 : result_4^0'=result_4^post8, x_5^0'=-1+x_5^0, -1+x_5^0 <= 0, cost: 1
  23: l7 -> l8 : 1+tmp_6^0 <= 0, cost: 1
  24: l7 -> l8 : 1-tmp_6^0 <= 0, cost: 1
  27: l8 -> l1 : x_5^0'=-1+x_5^0, 2-x_5^0 <= 0, cost: 1
  25: l9 -> l1 : T, cost: 1

	Loop Acceleration

	Original rule:
	l1 -> l1 : tmp_6^0'=tmp_6^post92, x_5^0'=-1+x_5^0, (1-tmp_6^post92 <= 0 /\ 2-x_5^0 <= 0), cost: 1
	New rule:
	l1 -> l1 : tmp_6^0'=tmp_6^post92, x_5^0'=-n2+x_5^0, (-1+tmp_6^post92 >= 0 /\ -1+n2 >= 0 /\ -1-n2+x_5^0 >= 0), cost: 1

		-2+x_5^0 >= 0 [0]: montonic decrease yields -1-n2+x_5^0 >= 0
		
		-2+x_5^0 >= 0 [1]: eventual increase yields (1 <= 0 /\ -2+x_5^0 >= 0)
		
		-1+tmp_6^post92 >= 0 [0]: monotonic increase yields -1+tmp_6^post92 >= 0
		
		Replacement map: {-2+x_5^0 >= 0 -> -1-n2+x_5^0 >= 0, -1+tmp_6^post92 >= 0 -> -1+tmp_6^post92 >= 0}

	Trace

	25[T], 28[(-1+n >= 0 /\ -1-n+x_5^0 >= 0 /\ -1-tmp_6^post91 >= 0)], 29[(-1+tmp_6^post92 >= 0 /\ -1+n2 >= 0 /\ -1-n2+x_5^0 >= 0)]
	
	Blocked

	[{}, {17[T], 18[T]}, {17[T], 18[T], 28[T]}, {29[T]}]

Accelerate

Start location: l9
Program variables: result_4^0 tmp_6^0 x_5^0
  17: l1 -> l2 : result_4^0'=result_4^post2, tmp_6^0'=0, x_5^0 <= 0, cost: 1
  18: l1 -> l4 : tmp_6^0'=tmp_6^post5, T, cost: 1
  22: l1 -> l7 : tmp_6^0'=tmp_6^post9, T, cost: 1
  26: l1 -> l1 : tmp_6^0'=0, 1-x_5^0 <= 0, cost: 1
  28: l1 -> l1 : tmp_6^0'=tmp_6^post91, x_5^0'=-n+x_5^0, (-1+n >= 0 /\ -1-n+x_5^0 >= 0 /\ -1-tmp_6^post91 >= 0), cost: 1
  29: l1 -> l1 : tmp_6^0'=tmp_6^post92, x_5^0'=-n2+x_5^0, (-1+tmp_6^post92 >= 0 /\ -1+n2 >= 0 /\ -1-n2+x_5^0 >= 0), cost: 1
  30: l1 -> l1 : tmp_6^0'=tmp_6^post92, x_5^0'=-n2*n3-n1*n3+x_5^0, (-1+n3 >= 0 /\ -1+tmp_6^post92 >= 0 /\ -1+n2 >= 0 /\ -1-(-1+n3)*n1-n2-n1-(-1+n3)*n2+x_5^0 >= 0 /\ -1+n1 >= 0 /\ -1-(-1+n3)*n1-n1-(-1+n3)*n2+x_5^0 >= 0), cost: 1
  19: l4 -> l5 : 1+tmp_6^0 <= 0, cost: 1
  20: l4 -> l5 : 1-tmp_6^0 <= 0, cost: 1
  21: l5 -> l2 : result_4^0'=result_4^post8, x_5^0'=-1+x_5^0, -1+x_5^0 <= 0, cost: 1
  23: l7 -> l8 : 1+tmp_6^0 <= 0, cost: 1
  24: l7 -> l8 : 1-tmp_6^0 <= 0, cost: 1
  27: l8 -> l1 : x_5^0'=-1+x_5^0, 2-x_5^0 <= 0, cost: 1
  25: l9 -> l1 : T, cost: 1

	Loop Acceleration

	Original rule:
	l1 -> l1 : tmp_6^0'=tmp_6^post92, x_5^0'=-n2-n1+x_5^0, (-1-n2-n1+x_5^0 >= 0 /\ -1+tmp_6^post92 >= 0 /\ -1+n2 >= 0 /\ -1-n1+x_5^0 >= 0 /\ -1+n1 >= 0), cost: 1
	New rule:
	l1 -> l1 : tmp_6^0'=tmp_6^post92, x_5^0'=-n2*n3-n1*n3+x_5^0, (-1+n3 >= 0 /\ -1+tmp_6^post92 >= 0 /\ -1+n2 >= 0 /\ -1-(-1+n3)*n1-n2-n1-(-1+n3)*n2+x_5^0 >= 0 /\ -1+n1 >= 0 /\ -1-(-1+n3)*n1-n1-(-1+n3)*n2+x_5^0 >= 0), cost: 1

		-1-n2-n1+x_5^0 >= 0 [0]: montonic decrease yields -1-(-1+n3)*n1-n2-n1-(-1+n3)*n2+x_5^0 >= 0, dependencies: -1+n2 >= 0 -1+n1 >= 0
		
		-1-n2-n1+x_5^0 >= 0 [1]: eventual decrease yields (-1-n2-n1+x_5^0 >= 0 /\ -1-(-1+n3)*n1-n2-n1-(-1+n3)*n2+x_5^0 >= 0), dependencies: -1+n2 >= 0 -1+n1 >= 0
		
		-1-n2-n1+x_5^0 >= 0 [2]: eventual increase yields (-1-n2-n1+x_5^0 >= 0 /\ n2+n1 <= 0), dependencies: -1+n2 >= 0 -1+n1 >= 0
		
		-1+tmp_6^post92 >= 0 [0]: monotonic increase yields -1+tmp_6^post92 >= 0
		
		-1+n2 >= 0 [0]: monotonic increase yields -1+n2 >= 0
		
		-1-n1+x_5^0 >= 0 [0]: montonic decrease yields -1-(-1+n3)*n1-n1-(-1+n3)*n2+x_5^0 >= 0, dependencies: -1-n2-n1+x_5^0 >= 0 -1+n2 >= 0
		
		-1-n1+x_5^0 >= 0 [1]: eventual decrease yields (-1-n1+x_5^0 >= 0 /\ -1-(-1+n3)*n1-n1-(-1+n3)*n2+x_5^0 >= 0), dependencies: -1+n2 >= 0 -1+n1 >= 0
		
		-1-n1+x_5^0 >= 0 [2]: eventual increase yields (-1-n1+x_5^0 >= 0 /\ n2+n1 <= 0), dependencies: -1+n2 >= 0 -1+n1 >= 0
		
		-1+n1 >= 0 [0]: monotonic increase yields -1+n1 >= 0
		
		Replacement map: {-1-n2-n1+x_5^0 >= 0 -> -1-(-1+n3)*n1-n2-n1-(-1+n3)*n2+x_5^0 >= 0, -1+tmp_6^post92 >= 0 -> -1+tmp_6^post92 >= 0, -1+n2 >= 0 -> -1+n2 >= 0, -1-n1+x_5^0 >= 0 -> -1-(-1+n3)*n1-n1-(-1+n3)*n2+x_5^0 >= 0, -1+n1 >= 0 -> -1+n1 >= 0}

	Trace

	25[T], 30[(-1+n3 >= 0 /\ -1+tmp_6^post92 >= 0 /\ -1+n2 >= 0 /\ -1-(-1+n3)*n1-n2-n1-(-1+n3)*n2+x_5^0 >= 0 /\ -1+n1 >= 0 /\ -1-(-1+n3)*n1-n1-(-1+n3)*n2+x_5^0 >= 0)]
	
	Blocked

	[{}, {17[T], 18[T]}, {30[T]}]

Step with 18

	Trace

	25[T], 30[(-1+n3 >= 0 /\ -1+tmp_6^post92 >= 0 /\ -1+n2 >= 0 /\ -1-(-1+n3)*n1-n2-n1-(-1+n3)*n2+x_5^0 >= 0 /\ -1+n1 >= 0 /\ -1-(-1+n3)*n1-n1-(-1+n3)*n2+x_5^0 >= 0)], 18[T]
	
	Blocked

	[{}, {17[T], 18[T]}, {17[T], 30[T]}, {}]

Step with 19

	Trace

	25[T], 30[(-1+n3 >= 0 /\ -1+tmp_6^post92 >= 0 /\ -1+n2 >= 0 /\ -1-(-1+n3)*n1-n2-n1-(-1+n3)*n2+x_5^0 >= 0 /\ -1+n1 >= 0 /\ -1-(-1+n3)*n1-n1-(-1+n3)*n2+x_5^0 >= 0)], 18[T], 19[(1+tmp_6^0 <= 0)]
	
	Blocked

	[{}, {17[T], 18[T]}, {17[T], 30[T]}, {}, {}]

Step with 21

	Trace

	25[T], 30[(-1+n3 >= 0 /\ -1+tmp_6^post92 >= 0 /\ -1+n2 >= 0 /\ -1-(-1+n3)*n1-n2-n1-(-1+n3)*n2+x_5^0 >= 0 /\ -1+n1 >= 0 /\ -1-(-1+n3)*n1-n1-(-1+n3)*n2+x_5^0 >= 0)], 18[T], 19[(1+tmp_6^0 <= 0)], 21[(-1+x_5^0 <= 0)]
	
	Blocked

	[{}, {17[T], 18[T]}, {17[T], 30[T]}, {}, {}, {}]

Backtrack

	Trace

	25[T], 30[(-1+n3 >= 0 /\ -1+tmp_6^post92 >= 0 /\ -1+n2 >= 0 /\ -1-(-1+n3)*n1-n2-n1-(-1+n3)*n2+x_5^0 >= 0 /\ -1+n1 >= 0 /\ -1-(-1+n3)*n1-n1-(-1+n3)*n2+x_5^0 >= 0)], 18[T], 19[(1+tmp_6^0 <= 0)]
	
	Blocked

	[{}, {17[T], 18[T]}, {17[T], 30[T]}, {}, {21[T]}]

Backtrack

	Trace

	25[T], 30[(-1+n3 >= 0 /\ -1+tmp_6^post92 >= 0 /\ -1+n2 >= 0 /\ -1-(-1+n3)*n1-n2-n1-(-1+n3)*n2+x_5^0 >= 0 /\ -1+n1 >= 0 /\ -1-(-1+n3)*n1-n1-(-1+n3)*n2+x_5^0 >= 0)], 18[T]
	
	Blocked

	[{}, {17[T], 18[T]}, {17[T], 30[T]}, {19[T]}]

Step with 20

	Trace

	25[T], 30[(-1+n3 >= 0 /\ -1+tmp_6^post92 >= 0 /\ -1+n2 >= 0 /\ -1-(-1+n3)*n1-n2-n1-(-1+n3)*n2+x_5^0 >= 0 /\ -1+n1 >= 0 /\ -1-(-1+n3)*n1-n1-(-1+n3)*n2+x_5^0 >= 0)], 18[T], 20[(1-tmp_6^0 <= 0)]
	
	Blocked

	[{}, {17[T], 18[T]}, {17[T], 30[T]}, {19[T]}, {}]

Step with 21

	Trace

	25[T], 30[(-1+n3 >= 0 /\ -1+tmp_6^post92 >= 0 /\ -1+n2 >= 0 /\ -1-(-1+n3)*n1-n2-n1-(-1+n3)*n2+x_5^0 >= 0 /\ -1+n1 >= 0 /\ -1-(-1+n3)*n1-n1-(-1+n3)*n2+x_5^0 >= 0)], 18[T], 20[(1-tmp_6^0 <= 0)], 21[(-1+x_5^0 <= 0)]
	
	Blocked

	[{}, {17[T], 18[T]}, {17[T], 30[T]}, {19[T]}, {}, {}]

Backtrack

	Trace

	25[T], 30[(-1+n3 >= 0 /\ -1+tmp_6^post92 >= 0 /\ -1+n2 >= 0 /\ -1-(-1+n3)*n1-n2-n1-(-1+n3)*n2+x_5^0 >= 0 /\ -1+n1 >= 0 /\ -1-(-1+n3)*n1-n1-(-1+n3)*n2+x_5^0 >= 0)], 18[T], 20[(1-tmp_6^0 <= 0)]
	
	Blocked

	[{}, {17[T], 18[T]}, {17[T], 30[T]}, {19[T]}, {21[T]}]

Backtrack

	Trace

	25[T], 30[(-1+n3 >= 0 /\ -1+tmp_6^post92 >= 0 /\ -1+n2 >= 0 /\ -1-(-1+n3)*n1-n2-n1-(-1+n3)*n2+x_5^0 >= 0 /\ -1+n1 >= 0 /\ -1-(-1+n3)*n1-n1-(-1+n3)*n2+x_5^0 >= 0)], 18[T]
	
	Blocked

	[{}, {17[T], 18[T]}, {17[T], 30[T]}, {19[T], 20[T]}]

Backtrack

	Trace

	25[T], 30[(-1+n3 >= 0 /\ -1+tmp_6^post92 >= 0 /\ -1+n2 >= 0 /\ -1-(-1+n3)*n1-n2-n1-(-1+n3)*n2+x_5^0 >= 0 /\ -1+n1 >= 0 /\ -1-(-1+n3)*n1-n1-(-1+n3)*n2+x_5^0 >= 0)]
	
	Blocked

	[{}, {17[T], 18[T]}, {17[T], 18[T], 30[T]}]

Step with 22

	Trace

	25[T], 30[(-1+n3 >= 0 /\ -1+tmp_6^post92 >= 0 /\ -1+n2 >= 0 /\ -1-(-1+n3)*n1-n2-n1-(-1+n3)*n2+x_5^0 >= 0 /\ -1+n1 >= 0 /\ -1-(-1+n3)*n1-n1-(-1+n3)*n2+x_5^0 >= 0)], 22[T]
	
	Blocked

	[{}, {17[T], 18[T]}, {17[T], 18[T], 30[T]}, {}]

Step with 24

	Trace

	25[T], 30[(-1+n3 >= 0 /\ -1+tmp_6^post92 >= 0 /\ -1+n2 >= 0 /\ -1-(-1+n3)*n1-n2-n1-(-1+n3)*n2+x_5^0 >= 0 /\ -1+n1 >= 0 /\ -1-(-1+n3)*n1-n1-(-1+n3)*n2+x_5^0 >= 0)], 22[T], 24[(1-tmp_6^0 <= 0)]
	
	Blocked

	[{}, {17[T], 18[T]}, {17[T], 18[T], 30[T]}, {}, {}]

Step with 27

	Trace

	25[T], 30[(-1+n3 >= 0 /\ -1+tmp_6^post92 >= 0 /\ -1+n2 >= 0 /\ -1-(-1+n3)*n1-n2-n1-(-1+n3)*n2+x_5^0 >= 0 /\ -1+n1 >= 0 /\ -1-(-1+n3)*n1-n1-(-1+n3)*n2+x_5^0 >= 0)], 22[T], 24[(1-tmp_6^0 <= 0)], 27[(2-x_5^0 <= 0)]
	
	Blocked

	[{}, {17[T], 18[T]}, {17[T], 18[T], 30[T]}, {}, {}, {}]

Covered

	Trace

	25[T], 30[(-1+n3 >= 0 /\ -1+tmp_6^post92 >= 0 /\ -1+n2 >= 0 /\ -1-(-1+n3)*n1-n2-n1-(-1+n3)*n2+x_5^0 >= 0 /\ -1+n1 >= 0 /\ -1-(-1+n3)*n1-n1-(-1+n3)*n2+x_5^0 >= 0)], 22[T], 24[(1-tmp_6^0 <= 0)]
	
	Blocked

	[{}, {17[T], 18[T]}, {17[T], 18[T], 30[T]}, {}, {27[T]}]

Backtrack

	Trace

	25[T], 30[(-1+n3 >= 0 /\ -1+tmp_6^post92 >= 0 /\ -1+n2 >= 0 /\ -1-(-1+n3)*n1-n2-n1-(-1+n3)*n2+x_5^0 >= 0 /\ -1+n1 >= 0 /\ -1-(-1+n3)*n1-n1-(-1+n3)*n2+x_5^0 >= 0)], 22[T]
	
	Blocked

	[{}, {17[T], 18[T]}, {17[T], 18[T], 30[T]}, {24[T]}]

Step with 23

	Trace

	25[T], 30[(-1+n3 >= 0 /\ -1+tmp_6^post92 >= 0 /\ -1+n2 >= 0 /\ -1-(-1+n3)*n1-n2-n1-(-1+n3)*n2+x_5^0 >= 0 /\ -1+n1 >= 0 /\ -1-(-1+n3)*n1-n1-(-1+n3)*n2+x_5^0 >= 0)], 22[T], 23[(1+tmp_6^0 <= 0)]
	
	Blocked

	[{}, {17[T], 18[T]}, {17[T], 18[T], 30[T]}, {24[T]}, {}]

Step with 27

	Trace

	25[T], 30[(-1+n3 >= 0 /\ -1+tmp_6^post92 >= 0 /\ -1+n2 >= 0 /\ -1-(-1+n3)*n1-n2-n1-(-1+n3)*n2+x_5^0 >= 0 /\ -1+n1 >= 0 /\ -1-(-1+n3)*n1-n1-(-1+n3)*n2+x_5^0 >= 0)], 22[T], 23[(1+tmp_6^0 <= 0)], 27[(2-x_5^0 <= 0)]
	
	Blocked

	[{}, {17[T], 18[T]}, {17[T], 18[T], 30[T]}, {24[T]}, {}, {}]

Covered

	Trace

	25[T], 30[(-1+n3 >= 0 /\ -1+tmp_6^post92 >= 0 /\ -1+n2 >= 0 /\ -1-(-1+n3)*n1-n2-n1-(-1+n3)*n2+x_5^0 >= 0 /\ -1+n1 >= 0 /\ -1-(-1+n3)*n1-n1-(-1+n3)*n2+x_5^0 >= 0)], 22[T], 23[(1+tmp_6^0 <= 0)]
	
	Blocked

	[{}, {17[T], 18[T]}, {17[T], 18[T], 30[T]}, {24[T]}, {27[T]}]

Backtrack

	Trace

	25[T], 30[(-1+n3 >= 0 /\ -1+tmp_6^post92 >= 0 /\ -1+n2 >= 0 /\ -1-(-1+n3)*n1-n2-n1-(-1+n3)*n2+x_5^0 >= 0 /\ -1+n1 >= 0 /\ -1-(-1+n3)*n1-n1-(-1+n3)*n2+x_5^0 >= 0)], 22[T]
	
	Blocked

	[{}, {17[T], 18[T]}, {17[T], 18[T], 30[T]}, {23[T], 24[T]}]

Backtrack

	Trace

	25[T], 30[(-1+n3 >= 0 /\ -1+tmp_6^post92 >= 0 /\ -1+n2 >= 0 /\ -1-(-1+n3)*n1-n2-n1-(-1+n3)*n2+x_5^0 >= 0 /\ -1+n1 >= 0 /\ -1-(-1+n3)*n1-n1-(-1+n3)*n2+x_5^0 >= 0)]
	
	Blocked

	[{}, {17[T], 18[T]}, {17[T], 18[T], 22[T], 30[T]}]

Step with 26

	Trace

	25[T], 30[(-1+n3 >= 0 /\ -1+tmp_6^post92 >= 0 /\ -1+n2 >= 0 /\ -1-(-1+n3)*n1-n2-n1-(-1+n3)*n2+x_5^0 >= 0 /\ -1+n1 >= 0 /\ -1-(-1+n3)*n1-n1-(-1+n3)*n2+x_5^0 >= 0)], 26[(1-x_5^0 <= 0)]
	
	Blocked

	[{}, {17[T], 18[T]}, {17[T], 18[T], 22[T], 30[T]}, {}]

Nonterm

Start location: l9
Program variables: result_4^0 tmp_6^0 x_5^0
  17: l1 -> l2 : result_4^0'=result_4^post2, tmp_6^0'=0, x_5^0 <= 0, cost: 1
  18: l1 -> l4 : tmp_6^0'=tmp_6^post5, T, cost: 1
  22: l1 -> l7 : tmp_6^0'=tmp_6^post9, T, cost: 1
  26: l1 -> l1 : tmp_6^0'=0, 1-x_5^0 <= 0, cost: 1
  28: l1 -> l1 : tmp_6^0'=tmp_6^post91, x_5^0'=-n+x_5^0, (-1+n >= 0 /\ -1-n+x_5^0 >= 0 /\ -1-tmp_6^post91 >= 0), cost: 1
  29: l1 -> l1 : tmp_6^0'=tmp_6^post92, x_5^0'=-n2+x_5^0, (-1+tmp_6^post92 >= 0 /\ -1+n2 >= 0 /\ -1-n2+x_5^0 >= 0), cost: 1
  30: l1 -> l1 : tmp_6^0'=tmp_6^post92, x_5^0'=-n2*n3-n1*n3+x_5^0, (-1+n3 >= 0 /\ -1+tmp_6^post92 >= 0 /\ -1+n2 >= 0 /\ -1-(-1+n3)*n1-n2-n1-(-1+n3)*n2+x_5^0 >= 0 /\ -1+n1 >= 0 /\ -1-(-1+n3)*n1-n1-(-1+n3)*n2+x_5^0 >= 0), cost: 1
  31: l1 -> LoAT_sink : (-1+x_5^0 >= 0 /\ -1+n4 >= 0), cost: NONTERM
  19: l4 -> l5 : 1+tmp_6^0 <= 0, cost: 1
  20: l4 -> l5 : 1-tmp_6^0 <= 0, cost: 1
  21: l5 -> l2 : result_4^0'=result_4^post8, x_5^0'=-1+x_5^0, -1+x_5^0 <= 0, cost: 1
  23: l7 -> l8 : 1+tmp_6^0 <= 0, cost: 1
  24: l7 -> l8 : 1-tmp_6^0 <= 0, cost: 1
  27: l8 -> l1 : x_5^0'=-1+x_5^0, 2-x_5^0 <= 0, cost: 1
  25: l9 -> l1 : T, cost: 1

	Certificate of Non-Termination

	Original rule:
	l1 -> l1 : tmp_6^0'=0, (1-x_5^0 <= 0), cost: 1
	New rule:
	l1 -> LoAT_sink : (-1+x_5^0 >= 0 /\ -1+n4 >= 0), cost: NONTERM

		-1+x_5^0 >= 0 [0]: monotonic increase yields -1+x_5^0 >= 0
		
		Replacement map: {-1+x_5^0 >= 0 -> -1+x_5^0 >= 0}

Step with 31

	Trace

	25[T], 30[(-1+n3 >= 0 /\ -1+tmp_6^post92 >= 0 /\ -1+n2 >= 0 /\ -1-(-1+n3)*n1-n2-n1-(-1+n3)*n2+x_5^0 >= 0 /\ -1+n1 >= 0 /\ -1-(-1+n3)*n1-n1-(-1+n3)*n2+x_5^0 >= 0)], 31[(-1+x_5^0 >= 0 /\ -1+n4 >= 0)]
	
	Blocked

	[{}, {17[T], 18[T]}, {17[T], 18[T], 22[T], 30[T]}, {31[T]}]

Refute

	Counterexample

	[ result_4^0=0 tmp_6^0=0 x_5^0=4 ] 25 [ result_4^0=0 tmp_6^0=1 x_5^0=2 ] 30 [ result_4^0=0 tmp_6^0=0 x_5^0=4 ] 31
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
