WORST_CASE(Omega(0),?)

Initial ITS
Start location: __init
   0: f1_0_main_Load -> f172_0_appendNewList_LE : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (-arg2P0 == 0 /\ arg2 > 0 /\ 1+arg1P0 > 0 /\ arg1 > 0), cost: 1
   1: f172_0_appendNewList_LE -> f172_0_appendNewList_LE : arg2'=arg2P1, arg1'=arg1P1, arg3'=arg3P1, (arg2 > 0 /\ -1+arg1-arg1P1 == 0 /\ -1+arg1 > 0 /\ -arg2+arg2P1 > 0), cost: 1
   2: f172_0_appendNewList_LE -> f172_0_appendNewList_LE : arg2'=arg2P2, arg1'=arg1P2, arg3'=arg3P2, (-1-arg1P2+arg1 == 0 /\ 1-arg2P2 == 0 /\ -1+arg1 > 0), cost: 1
   3: f172_0_appendNewList_LE -> f282_0_copy_NULL : arg2'=arg2P3, arg1'=arg1P3, arg3'=arg3P3, (-1+arg1P3 > 0 /\ -2+arg1 < 0 /\ -arg3P3 == 0 /\ -3+arg2P3 > 0), cost: 1
   4: f282_0_copy_NULL -> f282_0_copy_NULL : arg2'=arg2P4, arg1'=arg1P4, arg3'=arg3P4, (2-arg1+arg3 <= 0 /\ 1+arg2P4 > 0 /\ arg2 > 0 /\ -1+arg1P4 > 0 /\ -1-arg2+arg1P4 <= 0 /\ 2-arg2+arg3P4 <= 0 /\ 1+arg2P4-arg2 <= 0 /\ -1+arg1 > 0), cost: 1
   5: __init -> f1_0_main_Load : arg2'=arg2P5, arg1'=arg1P5, arg3'=arg3P5, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_Load -> f172_0_appendNewList_LE : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (-arg2P0 == 0 /\ arg2 > 0 /\ 1+arg1P0 > 0 /\ arg1 > 0), cost: 1
New rule:
f1_0_main_Load -> f172_0_appendNewList_LE : arg2'=0, arg1'=arg1P0, arg3'=arg3P0, (arg2 > 0 /\ 1+arg1P0 > 0 /\ arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f172_0_appendNewList_LE -> f172_0_appendNewList_LE : arg2'=arg2P1, arg1'=arg1P1, arg3'=arg3P1, (arg2 > 0 /\ -1+arg1-arg1P1 == 0 /\ -1+arg1 > 0 /\ -arg2+arg2P1 > 0), cost: 1
New rule:
f172_0_appendNewList_LE -> f172_0_appendNewList_LE : arg2'=arg2P1, arg1'=-1+arg1, arg3'=arg3P1, (arg2 > 0 /\ -1+arg1 > 0 /\ -arg2+arg2P1 > 0), cost: 1

Applied preprocessing
Original rule:
f172_0_appendNewList_LE -> f172_0_appendNewList_LE : arg2'=arg2P2, arg1'=arg1P2, arg3'=arg3P2, (-1-arg1P2+arg1 == 0 /\ 1-arg2P2 == 0 /\ -1+arg1 > 0), cost: 1
New rule:
f172_0_appendNewList_LE -> f172_0_appendNewList_LE : arg2'=1, arg1'=-1+arg1, arg3'=arg3P2, -1+arg1 > 0, cost: 1

Applied preprocessing
Original rule:
f172_0_appendNewList_LE -> f282_0_copy_NULL : arg2'=arg2P3, arg1'=arg1P3, arg3'=arg3P3, (-1+arg1P3 > 0 /\ -2+arg1 < 0 /\ -arg3P3 == 0 /\ -3+arg2P3 > 0), cost: 1
New rule:
f172_0_appendNewList_LE -> f282_0_copy_NULL : arg2'=arg2P3, arg1'=arg1P3, arg3'=0, (-1+arg1P3 > 0 /\ -3+arg2P3 > 0 /\ 2-arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f282_0_copy_NULL -> f282_0_copy_NULL : arg2'=arg2P4, arg1'=arg1P4, arg3'=arg3P4, (2-arg1+arg3 <= 0 /\ 1+arg2P4 > 0 /\ arg2 > 0 /\ -1+arg1P4 > 0 /\ -1-arg2+arg1P4 <= 0 /\ 2-arg2+arg3P4 <= 0 /\ 1+arg2P4-arg2 <= 0 /\ -1+arg1 > 0), cost: 1
New rule:
f282_0_copy_NULL -> f282_0_copy_NULL : arg2'=arg2P4, arg1'=arg1P4, arg3'=arg3P4, (2-arg1+arg3 <= 0 /\ 1+arg2P4 > 0 /\ -1+arg1P4 > 0 /\ -1-arg2+arg1P4 <= 0 /\ 2-arg2+arg3P4 <= 0 /\ 1+arg2P4-arg2 <= 0 /\ -1+arg1 > 0), cost: 1

Simplified rules
Start location: __init
   6: f1_0_main_Load -> f172_0_appendNewList_LE : arg2'=0, arg1'=arg1P0, arg3'=arg3P0, (arg2 > 0 /\ 1+arg1P0 > 0 /\ arg1 > 0), cost: 1
   7: f172_0_appendNewList_LE -> f172_0_appendNewList_LE : arg2'=arg2P1, arg1'=-1+arg1, arg3'=arg3P1, (arg2 > 0 /\ -1+arg1 > 0 /\ -arg2+arg2P1 > 0), cost: 1
   8: f172_0_appendNewList_LE -> f172_0_appendNewList_LE : arg2'=1, arg1'=-1+arg1, arg3'=arg3P2, -1+arg1 > 0, cost: 1
   9: f172_0_appendNewList_LE -> f282_0_copy_NULL : arg2'=arg2P3, arg1'=arg1P3, arg3'=0, (-1+arg1P3 > 0 /\ -3+arg2P3 > 0 /\ 2-arg1 > 0), cost: 1
  10: f282_0_copy_NULL -> f282_0_copy_NULL : arg2'=arg2P4, arg1'=arg1P4, arg3'=arg3P4, (2-arg1+arg3 <= 0 /\ 1+arg2P4 > 0 /\ -1+arg1P4 > 0 /\ -1-arg2+arg1P4 <= 0 /\ 2-arg2+arg3P4 <= 0 /\ 1+arg2P4-arg2 <= 0 /\ -1+arg1 > 0), cost: 1
   5: __init -> f1_0_main_Load : arg2'=arg2P5, arg1'=arg1P5, arg3'=arg3P5, TRUE, cost: 1


Applied acceleration
Original rule:
f172_0_appendNewList_LE -> f172_0_appendNewList_LE : arg2'=1, arg1'=-1+arg1, arg3'=arg3P2, -1+arg1 > 0, cost: 1
New rule:
f172_0_appendNewList_LE -> f172_0_appendNewList_LE : arg2'=1, arg1'=-n0+arg1, arg3'=arg3P2, (-n0+arg1 > 0 /\ -1+n0 >= 0), cost: n0
Sub-proof via acceration calculus written to file:///tmp/tmpnam_ApdOel.txt

Applied instantiation
Original rule:
f172_0_appendNewList_LE -> f172_0_appendNewList_LE : arg2'=1, arg1'=-n0+arg1, arg3'=arg3P2, (-n0+arg1 > 0 /\ -1+n0 >= 0), cost: n0
New rule:
f172_0_appendNewList_LE -> f172_0_appendNewList_LE : arg2'=1, arg1'=1, arg3'=arg3P2, (-2+arg1 >= 0 /\ 1 > 0), cost: -1+arg1

Applied simplification
Original rule:
f172_0_appendNewList_LE -> f172_0_appendNewList_LE : arg2'=1, arg1'=1, arg3'=arg3P2, (-2+arg1 >= 0 /\ 1 > 0), cost: -1+arg1
New rule:
f172_0_appendNewList_LE -> f172_0_appendNewList_LE : arg2'=1, arg1'=1, arg3'=arg3P2, -2+arg1 >= 0, cost: -1+arg1

Applied deletion
Removed the following rules: 8

Accelerated simple loops
Start location: __init
   6: f1_0_main_Load -> f172_0_appendNewList_LE : arg2'=0, arg1'=arg1P0, arg3'=arg3P0, (arg2 > 0 /\ 1+arg1P0 > 0 /\ arg1 > 0), cost: 1
   7: f172_0_appendNewList_LE -> f172_0_appendNewList_LE : arg2'=arg2P1, arg1'=-1+arg1, arg3'=arg3P1, (arg2 > 0 /\ -1+arg1 > 0 /\ -arg2+arg2P1 > 0), cost: 1
   9: f172_0_appendNewList_LE -> f282_0_copy_NULL : arg2'=arg2P3, arg1'=arg1P3, arg3'=0, (-1+arg1P3 > 0 /\ -3+arg2P3 > 0 /\ 2-arg1 > 0), cost: 1
  12: f172_0_appendNewList_LE -> f172_0_appendNewList_LE : arg2'=1, arg1'=1, arg3'=arg3P2, -2+arg1 >= 0, cost: -1+arg1
  10: f282_0_copy_NULL -> f282_0_copy_NULL : arg2'=arg2P4, arg1'=arg1P4, arg3'=arg3P4, (2-arg1+arg3 <= 0 /\ 1+arg2P4 > 0 /\ -1+arg1P4 > 0 /\ -1-arg2+arg1P4 <= 0 /\ 2-arg2+arg3P4 <= 0 /\ 1+arg2P4-arg2 <= 0 /\ -1+arg1 > 0), cost: 1
   5: __init -> f1_0_main_Load : arg2'=arg2P5, arg1'=arg1P5, arg3'=arg3P5, TRUE, cost: 1


Applied chaining
First rule:
f1_0_main_Load -> f172_0_appendNewList_LE : arg2'=0, arg1'=arg1P0, arg3'=arg3P0, (arg2 > 0 /\ 1+arg1P0 > 0 /\ arg1 > 0), cost: 1
Second rule:
f172_0_appendNewList_LE -> f172_0_appendNewList_LE : arg2'=1, arg1'=1, arg3'=arg3P2, -2+arg1 >= 0, cost: -1+arg1
New rule:
f1_0_main_Load -> f172_0_appendNewList_LE : arg2'=1, arg1'=1, arg3'=arg3P2, (arg2 > 0 /\ -2+arg1P0 >= 0 /\ arg1 > 0), cost: arg1P0

Applied deletion
Removed the following rules: 7 12

Applied chaining
First rule:
f172_0_appendNewList_LE -> f282_0_copy_NULL : arg2'=arg2P3, arg1'=arg1P3, arg3'=0, (-1+arg1P3 > 0 /\ -3+arg2P3 > 0 /\ 2-arg1 > 0), cost: 1
Second rule:
f282_0_copy_NULL -> f282_0_copy_NULL : arg2'=arg2P4, arg1'=arg1P4, arg3'=arg3P4, (2-arg1+arg3 <= 0 /\ 1+arg2P4 > 0 /\ -1+arg1P4 > 0 /\ -1-arg2+arg1P4 <= 0 /\ 2-arg2+arg3P4 <= 0 /\ 1+arg2P4-arg2 <= 0 /\ -1+arg1 > 0), cost: 1
New rule:
f172_0_appendNewList_LE -> f282_0_copy_NULL : arg2'=arg2P4, arg1'=arg1P4, arg3'=arg3P4, (1+arg2P4 > 0 /\ -1+arg1P4 > 0 /\ 2-arg1 > 0), cost: 2

Applied deletion
Removed the following rules: 10

Chained accelerated rules with incoming rules
Start location: __init
   6: f1_0_main_Load -> f172_0_appendNewList_LE : arg2'=0, arg1'=arg1P0, arg3'=arg3P0, (arg2 > 0 /\ 1+arg1P0 > 0 /\ arg1 > 0), cost: 1
  13: f1_0_main_Load -> f172_0_appendNewList_LE : arg2'=1, arg1'=1, arg3'=arg3P2, (arg2 > 0 /\ -2+arg1P0 >= 0 /\ arg1 > 0), cost: arg1P0
   9: f172_0_appendNewList_LE -> f282_0_copy_NULL : arg2'=arg2P3, arg1'=arg1P3, arg3'=0, (-1+arg1P3 > 0 /\ -3+arg2P3 > 0 /\ 2-arg1 > 0), cost: 1
  14: f172_0_appendNewList_LE -> f282_0_copy_NULL : arg2'=arg2P4, arg1'=arg1P4, arg3'=arg3P4, (1+arg2P4 > 0 /\ -1+arg1P4 > 0 /\ 2-arg1 > 0), cost: 2
   5: __init -> f1_0_main_Load : arg2'=arg2P5, arg1'=arg1P5, arg3'=arg3P5, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
  <empty>


Computing asymptotic complexity

Proved the following lower bound
Complexity:  Unknown
Cpx degree: ?

Solved cost: 0
Rule cost:   0

