WORST_CASE(Omega(0),?)

Initial ITS
Start location: l4
   0: l0 -> l2 : deltaext^0'=deltaext^post0, wnt^0'=wnt^post0, c0^0'=c0^post0, deltaext_new^0'=deltaext_new^post0, (wnt^0-wnt^post0 == 0 /\ deltaext^0-deltaext^post0 == 0 /\ deltaext_new^0-deltaext_new^post0 == 0 /\ c0^0-c0^post0 == 0 /\ 1+deltaext^0-deltaext_new^0 <= 0), cost: 1
   1: l0 -> l2 : deltaext^0'=deltaext^post1, wnt^0'=wnt^post1, c0^0'=c0^post1, deltaext_new^0'=deltaext_new^post1, (c0^0-c0^post1 == 0 /\ wnt^0-wnt^post1 == 0 /\ deltaext^0-deltaext^post1 == 0 /\ -deltaext_new^post1+deltaext_new^0 == 0 /\ 1-deltaext^0+deltaext_new^0 <= 0), cost: 1
   2: l2 -> l1 : deltaext^0'=deltaext^post2, wnt^0'=wnt^post2, c0^0'=c0^post2, deltaext_new^0'=deltaext_new^post2, (-wnt^post2+wnt^0 == 0 /\ -c0^post2+c0^0 == 0 /\ deltaext^post2-deltaext_new^0 == 0 /\ -deltaext_new^post2+deltaext_new^0 == 0), cost: 1
   3: l1 -> l0 : deltaext^0'=deltaext^post3, wnt^0'=wnt^post3, c0^0'=c0^post3, deltaext_new^0'=deltaext_new^post3, (-c0^post3+c0^0 == 0 /\ -1+2*deltaext^0-wnt^0-c0^0 <= 0 /\ -deltaext^0+deltaext_new^post3 == 0 /\ -2*deltaext^0+wnt^0+c0^0 <= 0 /\ -wnt^post3+wnt^0 == 0 /\ deltaext^0-deltaext^post3 == 0), cost: 1
   4: l1 -> l0 : deltaext^0'=deltaext^post4, wnt^0'=wnt^post4, c0^0'=c0^post4, deltaext_new^0'=deltaext_new^post4, (-c0^post4+c0^0 == 0 /\ -wnt^post4+wnt^0 == 0 /\ -deltaext^post4+deltaext^0 == 0 /\ 1-deltaext^0+deltaext_new^post4 == 0 /\ 2-2*deltaext^0+wnt^0+c0^0 <= 0), cost: 1
   5: l1 -> l0 : deltaext^0'=deltaext^post5, wnt^0'=wnt^post5, c0^0'=c0^post5, deltaext_new^0'=deltaext_new^post5, (wnt^0-wnt^post5 == 0 /\ -1-deltaext^0+deltaext_new^post5 == 0 /\ deltaext^0-deltaext^post5 == 0 /\ 1+2*deltaext^0-wnt^0-c0^0 <= 0 /\ c0^0-c0^post5 == 0), cost: 1
   6: l3 -> l1 : deltaext^0'=deltaext^post6, wnt^0'=wnt^post6, c0^0'=c0^post6, deltaext_new^0'=deltaext_new^post6, (-wnt^0 <= 0 /\ deltaext^0-deltaext^post6 == 0 /\ -3+deltaext^0 <= 0 /\ -deltaext^0 <= 0 /\ wnt^0-wnt^post6 == 0 /\ -deltaext_new^post6+deltaext_new^0 == 0 /\ -2+c0^post6 == 0 /\ -3+wnt^0 <= 0), cost: 1
   7: l4 -> l3 : deltaext^0'=deltaext^post7, wnt^0'=wnt^post7, c0^0'=c0^post7, deltaext_new^0'=deltaext_new^post7, (-deltaext_new^post7+deltaext_new^0 == 0 /\ -c0^post7+c0^0 == 0 /\ -wnt^post7+wnt^0 == 0 /\ deltaext^0-deltaext^post7 == 0), cost: 1


Applied preprocessing
Original rule:
l0 -> l2 : deltaext^0'=deltaext^post0, wnt^0'=wnt^post0, c0^0'=c0^post0, deltaext_new^0'=deltaext_new^post0, (wnt^0-wnt^post0 == 0 /\ deltaext^0-deltaext^post0 == 0 /\ deltaext_new^0-deltaext_new^post0 == 0 /\ c0^0-c0^post0 == 0 /\ 1+deltaext^0-deltaext_new^0 <= 0), cost: 1
New rule:
l0 -> l2 : 1+deltaext^0-deltaext_new^0 <= 0, cost: 1

Applied preprocessing
Original rule:
l0 -> l2 : deltaext^0'=deltaext^post1, wnt^0'=wnt^post1, c0^0'=c0^post1, deltaext_new^0'=deltaext_new^post1, (c0^0-c0^post1 == 0 /\ wnt^0-wnt^post1 == 0 /\ deltaext^0-deltaext^post1 == 0 /\ -deltaext_new^post1+deltaext_new^0 == 0 /\ 1-deltaext^0+deltaext_new^0 <= 0), cost: 1
New rule:
l0 -> l2 : 1-deltaext^0+deltaext_new^0 <= 0, cost: 1

Applied preprocessing
Original rule:
l2 -> l1 : deltaext^0'=deltaext^post2, wnt^0'=wnt^post2, c0^0'=c0^post2, deltaext_new^0'=deltaext_new^post2, (-wnt^post2+wnt^0 == 0 /\ -c0^post2+c0^0 == 0 /\ deltaext^post2-deltaext_new^0 == 0 /\ -deltaext_new^post2+deltaext_new^0 == 0), cost: 1
New rule:
l2 -> l1 : deltaext^0'=deltaext_new^0, TRUE, cost: 1

Applied preprocessing
Original rule:
l1 -> l0 : deltaext^0'=deltaext^post3, wnt^0'=wnt^post3, c0^0'=c0^post3, deltaext_new^0'=deltaext_new^post3, (-c0^post3+c0^0 == 0 /\ -1+2*deltaext^0-wnt^0-c0^0 <= 0 /\ -deltaext^0+deltaext_new^post3 == 0 /\ -2*deltaext^0+wnt^0+c0^0 <= 0 /\ -wnt^post3+wnt^0 == 0 /\ deltaext^0-deltaext^post3 == 0), cost: 1
New rule:
l1 -> l0 : deltaext_new^0'=deltaext^0, (-1+2*deltaext^0-wnt^0-c0^0 <= 0 /\ -2*deltaext^0+wnt^0+c0^0 <= 0), cost: 1

Applied preprocessing
Original rule:
l1 -> l0 : deltaext^0'=deltaext^post4, wnt^0'=wnt^post4, c0^0'=c0^post4, deltaext_new^0'=deltaext_new^post4, (-c0^post4+c0^0 == 0 /\ -wnt^post4+wnt^0 == 0 /\ -deltaext^post4+deltaext^0 == 0 /\ 1-deltaext^0+deltaext_new^post4 == 0 /\ 2-2*deltaext^0+wnt^0+c0^0 <= 0), cost: 1
New rule:
l1 -> l0 : deltaext_new^0'=-1+deltaext^0, 2-2*deltaext^0+wnt^0+c0^0 <= 0, cost: 1

Applied preprocessing
Original rule:
l1 -> l0 : deltaext^0'=deltaext^post5, wnt^0'=wnt^post5, c0^0'=c0^post5, deltaext_new^0'=deltaext_new^post5, (wnt^0-wnt^post5 == 0 /\ -1-deltaext^0+deltaext_new^post5 == 0 /\ deltaext^0-deltaext^post5 == 0 /\ 1+2*deltaext^0-wnt^0-c0^0 <= 0 /\ c0^0-c0^post5 == 0), cost: 1
New rule:
l1 -> l0 : deltaext_new^0'=1+deltaext^0, 1+2*deltaext^0-wnt^0-c0^0 <= 0, cost: 1

Applied preprocessing
Original rule:
l3 -> l1 : deltaext^0'=deltaext^post6, wnt^0'=wnt^post6, c0^0'=c0^post6, deltaext_new^0'=deltaext_new^post6, (-wnt^0 <= 0 /\ deltaext^0-deltaext^post6 == 0 /\ -3+deltaext^0 <= 0 /\ -deltaext^0 <= 0 /\ wnt^0-wnt^post6 == 0 /\ -deltaext_new^post6+deltaext_new^0 == 0 /\ -2+c0^post6 == 0 /\ -3+wnt^0 <= 0), cost: 1
New rule:
l3 -> l1 : c0^0'=2, (deltaext^0 >= 0 /\ wnt^0 >= 0 /\ -3+deltaext^0 <= 0 /\ -3+wnt^0 <= 0), cost: 1

Applied preprocessing
Original rule:
l4 -> l3 : deltaext^0'=deltaext^post7, wnt^0'=wnt^post7, c0^0'=c0^post7, deltaext_new^0'=deltaext_new^post7, (-deltaext_new^post7+deltaext_new^0 == 0 /\ -c0^post7+c0^0 == 0 /\ -wnt^post7+wnt^0 == 0 /\ deltaext^0-deltaext^post7 == 0), cost: 1
New rule:
l4 -> l3 : TRUE, cost: 1

Simplified rules
Start location: l4
   8: l0 -> l2 : 1+deltaext^0-deltaext_new^0 <= 0, cost: 1
   9: l0 -> l2 : 1-deltaext^0+deltaext_new^0 <= 0, cost: 1
  10: l2 -> l1 : deltaext^0'=deltaext_new^0, TRUE, cost: 1
  11: l1 -> l0 : deltaext_new^0'=deltaext^0, (-1+2*deltaext^0-wnt^0-c0^0 <= 0 /\ -2*deltaext^0+wnt^0+c0^0 <= 0), cost: 1
  12: l1 -> l0 : deltaext_new^0'=-1+deltaext^0, 2-2*deltaext^0+wnt^0+c0^0 <= 0, cost: 1
  13: l1 -> l0 : deltaext_new^0'=1+deltaext^0, 1+2*deltaext^0-wnt^0-c0^0 <= 0, cost: 1
  14: l3 -> l1 : c0^0'=2, (deltaext^0 >= 0 /\ wnt^0 >= 0 /\ -3+deltaext^0 <= 0 /\ -3+wnt^0 <= 0), cost: 1
  15: l4 -> l3 : TRUE, cost: 1


Eliminating location l3 by chaining:

Applied chaining
First rule:
l4 -> l3 : TRUE, cost: 1
Second rule:
l3 -> l1 : c0^0'=2, (deltaext^0 >= 0 /\ wnt^0 >= 0 /\ -3+deltaext^0 <= 0 /\ -3+wnt^0 <= 0), cost: 1
New rule:
l4 -> l1 : c0^0'=2, (deltaext^0 >= 0 /\ wnt^0 >= 0 /\ -3+deltaext^0 <= 0 /\ -3+wnt^0 <= 0), cost: 2

Applied deletion
Removed the following rules: 14 15

Eliminated locations on linear paths
Start location: l4
   8: l0 -> l2 : 1+deltaext^0-deltaext_new^0 <= 0, cost: 1
   9: l0 -> l2 : 1-deltaext^0+deltaext_new^0 <= 0, cost: 1
  10: l2 -> l1 : deltaext^0'=deltaext_new^0, TRUE, cost: 1
  11: l1 -> l0 : deltaext_new^0'=deltaext^0, (-1+2*deltaext^0-wnt^0-c0^0 <= 0 /\ -2*deltaext^0+wnt^0+c0^0 <= 0), cost: 1
  12: l1 -> l0 : deltaext_new^0'=-1+deltaext^0, 2-2*deltaext^0+wnt^0+c0^0 <= 0, cost: 1
  13: l1 -> l0 : deltaext_new^0'=1+deltaext^0, 1+2*deltaext^0-wnt^0-c0^0 <= 0, cost: 1
  16: l4 -> l1 : c0^0'=2, (deltaext^0 >= 0 /\ wnt^0 >= 0 /\ -3+deltaext^0 <= 0 /\ -3+wnt^0 <= 0), cost: 2


Eliminating location l0 by chaining:

Applied chaining
First rule:
l1 -> l0 : deltaext_new^0'=-1+deltaext^0, 2-2*deltaext^0+wnt^0+c0^0 <= 0, cost: 1
Second rule:
l0 -> l2 : 1-deltaext^0+deltaext_new^0 <= 0, cost: 1
New rule:
l1 -> l2 : deltaext_new^0'=-1+deltaext^0, (0 <= 0 /\ 2-2*deltaext^0+wnt^0+c0^0 <= 0), cost: 2

Applied simplification
Original rule:
l1 -> l2 : deltaext_new^0'=-1+deltaext^0, (0 <= 0 /\ 2-2*deltaext^0+wnt^0+c0^0 <= 0), cost: 2
New rule:
l1 -> l2 : deltaext_new^0'=-1+deltaext^0, 2-2*deltaext^0+wnt^0+c0^0 <= 0, cost: 2

Applied chaining
First rule:
l1 -> l0 : deltaext_new^0'=1+deltaext^0, 1+2*deltaext^0-wnt^0-c0^0 <= 0, cost: 1
Second rule:
l0 -> l2 : 1+deltaext^0-deltaext_new^0 <= 0, cost: 1
New rule:
l1 -> l2 : deltaext_new^0'=1+deltaext^0, (0 <= 0 /\ 1+2*deltaext^0-wnt^0-c0^0 <= 0), cost: 2

Applied simplification
Original rule:
l1 -> l2 : deltaext_new^0'=1+deltaext^0, (0 <= 0 /\ 1+2*deltaext^0-wnt^0-c0^0 <= 0), cost: 2
New rule:
l1 -> l2 : deltaext_new^0'=1+deltaext^0, 1+2*deltaext^0-wnt^0-c0^0 <= 0, cost: 2

Applied deletion
Removed the following rules: 8 9 11 12 13

Eliminated locations on tree-shaped paths
Start location: l4
  10: l2 -> l1 : deltaext^0'=deltaext_new^0, TRUE, cost: 1
  17: l1 -> l2 : deltaext_new^0'=-1+deltaext^0, 2-2*deltaext^0+wnt^0+c0^0 <= 0, cost: 2
  18: l1 -> l2 : deltaext_new^0'=1+deltaext^0, 1+2*deltaext^0-wnt^0-c0^0 <= 0, cost: 2
  16: l4 -> l1 : c0^0'=2, (deltaext^0 >= 0 /\ wnt^0 >= 0 /\ -3+deltaext^0 <= 0 /\ -3+wnt^0 <= 0), cost: 2


Eliminating location l2 by chaining:

Applied chaining
First rule:
l1 -> l2 : deltaext_new^0'=-1+deltaext^0, 2-2*deltaext^0+wnt^0+c0^0 <= 0, cost: 2
Second rule:
l2 -> l1 : deltaext^0'=deltaext_new^0, TRUE, cost: 1
New rule:
l1 -> l1 : deltaext^0'=-1+deltaext^0, deltaext_new^0'=-1+deltaext^0, 2-2*deltaext^0+wnt^0+c0^0 <= 0, cost: 3

Applied chaining
First rule:
l1 -> l2 : deltaext_new^0'=1+deltaext^0, 1+2*deltaext^0-wnt^0-c0^0 <= 0, cost: 2
Second rule:
l2 -> l1 : deltaext^0'=deltaext_new^0, TRUE, cost: 1
New rule:
l1 -> l1 : deltaext^0'=1+deltaext^0, deltaext_new^0'=1+deltaext^0, 1+2*deltaext^0-wnt^0-c0^0 <= 0, cost: 3

Applied deletion
Removed the following rules: 10 17 18

Eliminated locations on tree-shaped paths
Start location: l4
  19: l1 -> l1 : deltaext^0'=-1+deltaext^0, deltaext_new^0'=-1+deltaext^0, 2-2*deltaext^0+wnt^0+c0^0 <= 0, cost: 3
  20: l1 -> l1 : deltaext^0'=1+deltaext^0, deltaext_new^0'=1+deltaext^0, 1+2*deltaext^0-wnt^0-c0^0 <= 0, cost: 3
  16: l4 -> l1 : c0^0'=2, (deltaext^0 >= 0 /\ wnt^0 >= 0 /\ -3+deltaext^0 <= 0 /\ -3+wnt^0 <= 0), cost: 2


Applied acceleration
Original rule:
l1 -> l1 : deltaext^0'=-1+deltaext^0, deltaext_new^0'=-1+deltaext^0, 2-2*deltaext^0+wnt^0+c0^0 <= 0, cost: 3
New rule:
l1 -> l1 : deltaext^0'=deltaext^0-n, deltaext_new^0'=deltaext^0-n, (2*deltaext^0-wnt^0-2*n-c0^0 >= 0 /\ -1+n >= 0), cost: 3*n
Sub-proof via acceration calculus written to file:///tmp/tmpnam_LNpAin.txt

Applied acceleration
Original rule:
l1 -> l1 : deltaext^0'=1+deltaext^0, deltaext_new^0'=1+deltaext^0, 1+2*deltaext^0-wnt^0-c0^0 <= 0, cost: 3
New rule:
l1 -> l1 : deltaext^0'=deltaext^0+n0, deltaext_new^0'=deltaext^0+n0, (-1+n0 >= 0 /\ 1-2*deltaext^0-2*n0+wnt^0+c0^0 >= 0), cost: 3*n0
Sub-proof via acceration calculus written to file:///tmp/tmpnam_cMFlfJ.txt

Applied deletion
Removed the following rules: 19 20

Accelerated simple loops
Start location: l4
  21: l1 -> l1 : deltaext^0'=deltaext^0-n, deltaext_new^0'=deltaext^0-n, (2*deltaext^0-wnt^0-2*n-c0^0 >= 0 /\ -1+n >= 0), cost: 3*n
  22: l1 -> l1 : deltaext^0'=deltaext^0+n0, deltaext_new^0'=deltaext^0+n0, (-1+n0 >= 0 /\ 1-2*deltaext^0-2*n0+wnt^0+c0^0 >= 0), cost: 3*n0
  16: l4 -> l1 : c0^0'=2, (deltaext^0 >= 0 /\ wnt^0 >= 0 /\ -3+deltaext^0 <= 0 /\ -3+wnt^0 <= 0), cost: 2


Applied chaining
First rule:
l4 -> l1 : c0^0'=2, (deltaext^0 >= 0 /\ wnt^0 >= 0 /\ -3+deltaext^0 <= 0 /\ -3+wnt^0 <= 0), cost: 2
Second rule:
l1 -> l1 : deltaext^0'=deltaext^0-n, deltaext_new^0'=deltaext^0-n, (2*deltaext^0-wnt^0-2*n-c0^0 >= 0 /\ -1+n >= 0), cost: 3*n
New rule:
l4 -> l1 : deltaext^0'=deltaext^0-n, c0^0'=2, deltaext_new^0'=deltaext^0-n, (-2+2*deltaext^0-wnt^0-2*n >= 0 /\ wnt^0 >= 0 /\ -3+deltaext^0 <= 0 /\ -1+n >= 0), cost: 2+3*n

Applied chaining
First rule:
l4 -> l1 : c0^0'=2, (deltaext^0 >= 0 /\ wnt^0 >= 0 /\ -3+deltaext^0 <= 0 /\ -3+wnt^0 <= 0), cost: 2
Second rule:
l1 -> l1 : deltaext^0'=deltaext^0+n0, deltaext_new^0'=deltaext^0+n0, (-1+n0 >= 0 /\ 1-2*deltaext^0-2*n0+wnt^0+c0^0 >= 0), cost: 3*n0
New rule:
l4 -> l1 : deltaext^0'=deltaext^0+n0, c0^0'=2, deltaext_new^0'=deltaext^0+n0, (deltaext^0 >= 0 /\ -1+n0 >= 0 /\ 3-2*deltaext^0-2*n0+wnt^0 >= 0 /\ wnt^0 >= 0 /\ -3+wnt^0 <= 0), cost: 2+3*n0

Applied deletion
Removed the following rules: 21 22

Chained accelerated rules with incoming rules
Start location: l4
  16: l4 -> l1 : c0^0'=2, (deltaext^0 >= 0 /\ wnt^0 >= 0 /\ -3+deltaext^0 <= 0 /\ -3+wnt^0 <= 0), cost: 2
  23: l4 -> l1 : deltaext^0'=deltaext^0-n, c0^0'=2, deltaext_new^0'=deltaext^0-n, (-2+2*deltaext^0-wnt^0-2*n >= 0 /\ wnt^0 >= 0 /\ -3+deltaext^0 <= 0 /\ -1+n >= 0), cost: 2+3*n
  24: l4 -> l1 : deltaext^0'=deltaext^0+n0, c0^0'=2, deltaext_new^0'=deltaext^0+n0, (deltaext^0 >= 0 /\ -1+n0 >= 0 /\ 3-2*deltaext^0-2*n0+wnt^0 >= 0 /\ wnt^0 >= 0 /\ -3+wnt^0 <= 0), cost: 2+3*n0


Removed unreachable locations and irrelevant leafs
Start location: l4
  <empty>


Computing asymptotic complexity

Proved the following lower bound
Complexity:  Unknown
Cpx degree: ?

Solved cost: 0
Rule cost:   0

