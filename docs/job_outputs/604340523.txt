YES

Solver Timeout: 4
Global Timeout: 300
Maximum number of concurrent processes: 900
*******************************************************************************************
*********************** UNPROCESSED TRANSITION SYSTEMS PER FUNCTION ***********************
*******************************************************************************************


List of LLVMGraphs + assumeNodes + staticAssertNodes [1] :

+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++
+                                                                  +
Init Location: 0
Transitions:
<l0, l1, true, seq{main__func_return_ -> 0, main_n -> Â¿functionCall(__VERIFIER_nondet_int), main_m -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l1, l13, not((main_m > 0))>
<l1, l2, (main_m > 0)>
<l2, l3, (main_n > main_m)>
<l2, l13, not((main_n > main_m))>
<l3, l4, true, seq{main_i -> 0, main_j -> 0}>
<l4, l5, true>
<l5, l12, not((main_i < main_n))>
<l5, l6, (main_i < main_n)>
<l6, l7, (main_j < main_m)>
<l6, l9, not((main_j < main_m))>
<l7, l8, true, seq{main_j -> (main_j + 1)}>
<l8, l11, true>
<l9, l10, true, seq{main_j -> 0, main_i -> (main_i + 1)}>
<l10, l11, true>
<l11, l5, true>
<l12, l13, true>
<l13, l14, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

+ Assume Nodes [0]: ++++++++++++++++++++++++++++++++++++++++++++++++
       
+ Static Assert Nodes [0]: +++++++++++++++++++++++++++++++++++++++++
       
+ After preprocess (paralelization): ++++++++++++++++++++++++++++++

Init Location: 0
Transitions:
<l0, l15, true, seq{main__func_return_ -> 0}>
<l15, l16, true, seq{varCall_1 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l16, l17, true, seq{main_n -> varCall_1}>
<l17, l18, true, seq{varCall_2 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l18, l1, true, seq{main_m -> varCall_2}>
<l1, l2, (main_m > 0)>
<l1, l13, not((main_m > 0))>
<l2, l3, (main_n > main_m)>
<l2, l13, not((main_n > main_m))>
<l3, l4, true, seq{main_i -> 0, main_j -> 0}>
<l4, l5, true>
<l5, l6, (main_i < main_n)>
<l5, l12, not((main_i < main_n))>
<l6, l7, (main_j < main_m)>
<l6, l9, not((main_j < main_m))>
<l7, l8, true, seq{main_j -> (main_j + 1)}>
<l8, l11, true>
<l9, l10, true, seq{main_j -> 0, main_i -> (main_i + 1)}>
<l10, l11, true>
<l11, l5, true>
<l12, l13, true>
<l13, l14, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:
14, 
Accepting locations:

Asserts:

+                                                                  +
+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++


Function Return and Parameters Information [2 functions]:
    function name: __VERIFIER_nondet_int [1 return + 0 parameters]        demangled: __VERIFIER_nondet_int
        __VERIFIER_nondet_int__func_return_      [function result] : int
    function name: main [1 return + 0 parameters]        demangled: main
        main__func_return_      [function result] : int


AST Ident Scanner Information [6 idents]:
__VERIFIER_nondet_int | function | [integer, ()] | <line: 11, col: 1> | <line: 15, col: 6> <line: 16, col: 6>
main | function | [integer, ()] | <line: 13, col: 1>
i | local variable | integer | <line: 14, col: 5> | <line: 18, col: 3> <line: 20, col: 10> <line: 25, col: 5> <line: 25, col: 9>
j | local variable | integer | <line: 14, col: 5> | <line: 19, col: 3> <line: 21, col: 8> <line: 22, col: 5> <line: 22, col: 9> <line: 24, col: 5>
m | local variable | integer | <line: 14, col: 5> | <line: 16, col: 2> <line: 17, col: 6> <line: 17, col: 19> <line: 21, col: 12>
n | local variable | integer | <line: 14, col: 5> | <line: 15, col: 2> <line: 17, col: 15> <line: 20, col: 14>

Main function: main
Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l5, (main_m = undef4) /\ (main_n = undef3) /\ (undef4 > 0) /\ (undef3 > undef4), par{main_i -> 0, main_j -> 0}>
<l0, l14, (main_m = undef4) /\ (main_n = undef3) /\ (undef4 > 0) /\ not((undef3 > undef4))>
<l0, l14, (main_m = undef4) /\ (main_n = undef3) /\ not((undef4 > 0))>
<l5, l5, (main_i < main_n) /\ (main_j < main_m), par{main_j -> (main_j + 1)}>
<l5, l5, (main_i < main_n) /\ not((main_j < main_m)), par{main_i -> (main_i + 1), main_j -> 0}>
<l5, l14, not((main_i < main_n))>

Fresh variables:
undef3, undef4, 

Undef variables:
undef3, undef4, 

Abstraction variables:

Exit nodes:
14, 
Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l5, l5, 1 + main_i <= main_n /\ 1 + main_j <= main_m, {main_j -> 1 + main_j, rest remain the same}>
<l5, l5, main_m <= main_j /\ 1 + main_i <= main_n, {main_i -> 1 + main_i, main_j -> 0, rest remain the same}>
Variables:
main_i, main_j, main_m, main_n

Graph 2:
Transitions:
Variables:

Precedence: 
Graph 0

Graph 1
<l0, l5, 1 + undef4 <= undef3 /\ 1 <= undef4 /\ main_m = undef4 /\ main_n = undef3, {main_i -> 0, main_j -> 0, rest remain the same}>

Graph 2
<l0, l14, undef3 <= undef4 /\ 1 <= undef4 /\ main_m = undef4 /\ main_n = undef3, {all remain the same}>
<l0, l14, undef4 <= 0 /\ main_m = undef4 /\ main_n = undef3, {all remain the same}>
<l5, l14, main_n <= main_i, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 5 , 1 )
( 14 , 2 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.004941

Checking conditional termination of SCC {l5}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000974s
[33mRanking function: [36m-1 - main_i + main_n[0m
New Graphs: 
Transitions:
<l5, l5, 1 + main_i <= main_n /\ 1 + main_j <= main_m, {main_j -> 1 + main_j, rest remain the same}>
Variables:
main_i, main_j, main_m, main_n
Checking conditional termination of SCC {l5}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000471s
[33mRanking function: [36m-1 - main_j + main_m[0m
New Graphs: 
Proving termination of subgraph 2
Analyzing SCC {l14}...
No cycles found.

[32mProgram Terminates[0m
