NO

Initial ITS

Start location: __init
Program variables: arg1 arg2
   0: f1_0_main_Load -> f53_0_loop_LE : arg1'=arg1p1, arg2'=arg2p1, (-arg1p1+arg2 == 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 1
   1: f53_0_loop_LE -> f74_0_loop_NE : arg1'=arg1p2, arg2'=arg2p2, (-10+arg1 > 0 /\ -1+arg1-arg1p2 == 0 /\ -21+arg1 < 0), cost: 1
   2: f53_0_loop_LE -> f74_0_loop_NE : arg1'=arg1p3, arg2'=arg2p3, (-20+arg1 > 0 /\ 1-arg1p3+arg1 == 0), cost: 1
   3: f74_0_loop_NE -> f53_0_loop_LE : arg1'=arg1p4, arg2'=arg2p4, (-arg1p4+arg1 == 0 /\ -30+arg1 < 0), cost: 1
   4: f74_0_loop_NE -> f53_0_loop_LE : arg1'=arg1p5, arg2'=arg2p5, (arg1-arg1p5 == 0 /\ -30+arg1 > 0), cost: 1
   5: __init -> f1_0_main_Load : arg1'=arg1p6, arg2'=arg2p6, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2
   1: f53_0_loop_LE -> f74_0_loop_NE : arg1'=arg1p2, arg2'=arg2p2, (-10+arg1 > 0 /\ -1+arg1-arg1p2 == 0 /\ -21+arg1 < 0), cost: 1
   2: f53_0_loop_LE -> f74_0_loop_NE : arg1'=arg1p3, arg2'=arg2p3, (-20+arg1 > 0 /\ 1-arg1p3+arg1 == 0), cost: 1
   3: f74_0_loop_NE -> f53_0_loop_LE : arg1'=arg1p4, arg2'=arg2p4, (-arg1p4+arg1 == 0 /\ -30+arg1 < 0), cost: 1
   4: f74_0_loop_NE -> f53_0_loop_LE : arg1'=arg1p5, arg2'=arg2p5, (arg1-arg1p5 == 0 /\ -30+arg1 > 0), cost: 1
   6: __init -> f53_0_loop_LE : arg1'=arg1p1, arg2'=arg2p1, (arg1p6 > 0 /\ -arg1p1+arg2p6 == 0 /\ 1+arg2p6 > 0), cost: 1

	Eliminating location f1_0_main_Load by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_Load : arg1'=arg1p6, arg2'=arg2p6, T, cost: 1
	Second rule:
	f1_0_main_Load -> f53_0_loop_LE : arg1'=arg1p1, arg2'=arg2p1, (-arg1p1+arg2 == 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 1
	New rule:
	__init -> f53_0_loop_LE : arg1'=arg1p1, arg2'=arg2p1, (arg1p6 > 0 /\ -arg1p1+arg2p6 == 0 /\ 1+arg2p6 > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 5

Simplified Transitions

Start location: __init
Program variables: arg1 arg2
   7: f53_0_loop_LE -> f74_0_loop_NE : arg1'=-1+arg1, arg2'=arg2p2, (-10+arg1 > 0 /\ -21+arg1 < 0), cost: 1
   8: f53_0_loop_LE -> f74_0_loop_NE : arg1'=1+arg1, arg2'=arg2p3, -20+arg1 > 0, cost: 1
   9: f74_0_loop_NE -> f53_0_loop_LE : arg2'=arg2p4, -30+arg1 < 0, cost: 1
  10: f74_0_loop_NE -> f53_0_loop_LE : arg2'=arg2p5, -30+arg1 > 0, cost: 1
  11: __init -> f53_0_loop_LE : arg1'=arg2p6, arg2'=arg2p1, (1+arg2p6 > 0), cost: 1

	Propagated Equalities

	Original rule:
	f53_0_loop_LE -> f74_0_loop_NE : arg1'=arg1p2, arg2'=arg2p2, (-10+arg1 > 0 /\ -1+arg1-arg1p2 == 0 /\ -21+arg1 < 0), cost: 1
	New rule:
	f53_0_loop_LE -> f74_0_loop_NE : arg1'=-1+arg1, arg2'=arg2p2, (0 == 0 /\ -10+arg1 > 0 /\ -21+arg1 < 0), cost: 1
	
		propagated equality arg1p2 = -1+arg1
		
	Simplified Guard

	Original rule:
	f53_0_loop_LE -> f74_0_loop_NE : arg1'=-1+arg1, arg2'=arg2p2, (0 == 0 /\ -10+arg1 > 0 /\ -21+arg1 < 0), cost: 1
	New rule:
	f53_0_loop_LE -> f74_0_loop_NE : arg1'=-1+arg1, arg2'=arg2p2, (-10+arg1 > 0 /\ -21+arg1 < 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f53_0_loop_LE -> f74_0_loop_NE : arg1'=arg1p3, arg2'=arg2p3, (-20+arg1 > 0 /\ 1-arg1p3+arg1 == 0), cost: 1
	New rule:
	f53_0_loop_LE -> f74_0_loop_NE : arg1'=1+arg1, arg2'=arg2p3, (0 == 0 /\ -20+arg1 > 0), cost: 1
	
		propagated equality arg1p3 = 1+arg1
		
	Simplified Guard

	Original rule:
	f53_0_loop_LE -> f74_0_loop_NE : arg1'=1+arg1, arg2'=arg2p3, (0 == 0 /\ -20+arg1 > 0), cost: 1
	New rule:
	f53_0_loop_LE -> f74_0_loop_NE : arg1'=1+arg1, arg2'=arg2p3, -20+arg1 > 0, cost: 1
	
	Propagated Equalities

	Original rule:
	f74_0_loop_NE -> f53_0_loop_LE : arg1'=arg1p4, arg2'=arg2p4, (-arg1p4+arg1 == 0 /\ -30+arg1 < 0), cost: 1
	New rule:
	f74_0_loop_NE -> f53_0_loop_LE : arg1'=arg1, arg2'=arg2p4, (0 == 0 /\ -30+arg1 < 0), cost: 1
	
		propagated equality arg1p4 = arg1
		
	Simplified Guard

	Original rule:
	f74_0_loop_NE -> f53_0_loop_LE : arg1'=arg1, arg2'=arg2p4, (0 == 0 /\ -30+arg1 < 0), cost: 1
	New rule:
	f74_0_loop_NE -> f53_0_loop_LE : arg1'=arg1, arg2'=arg2p4, -30+arg1 < 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	f74_0_loop_NE -> f53_0_loop_LE : arg1'=arg1, arg2'=arg2p4, -30+arg1 < 0, cost: 1
	New rule:
	f74_0_loop_NE -> f53_0_loop_LE : arg2'=arg2p4, -30+arg1 < 0, cost: 1
	
	Propagated Equalities

	Original rule:
	f74_0_loop_NE -> f53_0_loop_LE : arg1'=arg1p5, arg2'=arg2p5, (arg1-arg1p5 == 0 /\ -30+arg1 > 0), cost: 1
	New rule:
	f74_0_loop_NE -> f53_0_loop_LE : arg1'=arg1, arg2'=arg2p5, (0 == 0 /\ -30+arg1 > 0), cost: 1
	
		propagated equality arg1p5 = arg1
		
	Simplified Guard

	Original rule:
	f74_0_loop_NE -> f53_0_loop_LE : arg1'=arg1, arg2'=arg2p5, (0 == 0 /\ -30+arg1 > 0), cost: 1
	New rule:
	f74_0_loop_NE -> f53_0_loop_LE : arg1'=arg1, arg2'=arg2p5, -30+arg1 > 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	f74_0_loop_NE -> f53_0_loop_LE : arg1'=arg1, arg2'=arg2p5, -30+arg1 > 0, cost: 1
	New rule:
	f74_0_loop_NE -> f53_0_loop_LE : arg2'=arg2p5, -30+arg1 > 0, cost: 1
	
	Propagated Equalities

	Original rule:
	__init -> f53_0_loop_LE : arg1'=arg1p1, arg2'=arg2p1, (arg1p6 > 0 /\ -arg1p1+arg2p6 == 0 /\ 1+arg2p6 > 0), cost: 1
	New rule:
	__init -> f53_0_loop_LE : arg1'=arg2p6, arg2'=arg2p1, (0 == 0 /\ arg1p6 > 0 /\ 1+arg2p6 > 0), cost: 1
	
		propagated equality arg1p1 = arg2p6
		
	Simplified Guard

	Original rule:
	__init -> f53_0_loop_LE : arg1'=arg2p6, arg2'=arg2p1, (0 == 0 /\ arg1p6 > 0 /\ 1+arg2p6 > 0), cost: 1
	New rule:
	__init -> f53_0_loop_LE : arg1'=arg2p6, arg2'=arg2p1, (arg1p6 > 0 /\ 1+arg2p6 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	__init -> f53_0_loop_LE : arg1'=arg2p6, arg2'=arg2p1, (arg1p6 > 0 /\ 1+arg2p6 > 0), cost: 1
	New rule:
	__init -> f53_0_loop_LE : arg1'=arg2p6, arg2'=arg2p1, (1+arg2p6 > 0), cost: 1

Step with 11

	Trace

	11[(1+arg2p6 > 0)]
	
	Blocked

	[{}, {}]

Step with 7

	Trace

	11[(1+arg2p6 > 0)], 7[(-10+arg1 > 0 /\ -21+arg1 < 0)]
	
	Blocked

	[{}, {}, {}]

Step with 9

	Trace

	11[(1+arg2p6 > 0)], 7[(-10+arg1 > 0 /\ -21+arg1 < 0)], 9[(-30+arg1 < 0)]
	
	Blocked

	[{}, {}, {}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2
   7: f53_0_loop_LE -> f74_0_loop_NE : arg1'=-1+arg1, arg2'=arg2p2, (-10+arg1 > 0 /\ -21+arg1 < 0), cost: 1
   8: f53_0_loop_LE -> f74_0_loop_NE : arg1'=1+arg1, arg2'=arg2p3, -20+arg1 > 0, cost: 1
  12: f53_0_loop_LE -> f53_0_loop_LE : arg1'=-n+arg1, arg2'=arg2p4, (-9-n+arg1 > 0 /\ -1+n >= 0 /\ 31-arg1 > 0 /\ 21-arg1 > 0), cost: 1
   9: f74_0_loop_NE -> f53_0_loop_LE : arg2'=arg2p4, -30+arg1 < 0, cost: 1
  10: f74_0_loop_NE -> f53_0_loop_LE : arg2'=arg2p5, -30+arg1 > 0, cost: 1
  11: __init -> f53_0_loop_LE : arg1'=arg2p6, arg2'=arg2p1, (1+arg2p6 > 0), cost: 1

	Loop Acceleration

	Original rule:
	f53_0_loop_LE -> f53_0_loop_LE : arg1'=-1+arg1, arg2'=arg2p4, (-31+arg1 < 0 /\ -10+arg1 > 0 /\ -21+arg1 < 0), cost: 1
	New rule:
	f53_0_loop_LE -> f53_0_loop_LE : arg1'=-n+arg1, arg2'=arg2p4, (-9-n+arg1 > 0 /\ -1+n >= 0 /\ 31-arg1 > 0 /\ 21-arg1 > 0), cost: 1

		-10+arg1 > 0 [0]: montonic decrease yields -9-n+arg1 > 0
		
		-10+arg1 > 0 [1]: eventual increase yields (1 <= 0 /\ -10+arg1 > 0)
		
		31-arg1 > 0 [0]: monotonic increase yields 31-arg1 > 0
		
		21-arg1 > 0 [0]: monotonic increase yields 21-arg1 > 0
		
		Replacement map: {-10+arg1 > 0 -> -9-n+arg1 > 0, 31-arg1 > 0 -> 31-arg1 > 0, 21-arg1 > 0 -> 21-arg1 > 0}

	Trace

	11[(1+arg2p6 > 0)], 12[(-9-n+arg1 > 0 /\ -1+n >= 0 /\ 31-arg1 > 0 /\ 21-arg1 > 0)]
	
	Blocked

	[{}, {}, {12[T]}]

Step with 7

	Trace

	11[(1+arg2p6 > 0)], 12[(-9-n+arg1 > 0 /\ -1+n >= 0 /\ 31-arg1 > 0 /\ 21-arg1 > 0)], 7[(-10+arg1 > 0 /\ -21+arg1 < 0)]
	
	Blocked

	[{}, {}, {12[T]}, {}]

Step with 9

	Trace

	11[(1+arg2p6 > 0)], 12[(-9-n+arg1 > 0 /\ -1+n >= 0 /\ 31-arg1 > 0 /\ 21-arg1 > 0)], 7[(-10+arg1 > 0 /\ -21+arg1 < 0)], 9[(-30+arg1 < 0)]
	
	Blocked

	[{}, {}, {12[T]}, {}, {}]

Covered

	Trace

	11[(1+arg2p6 > 0)], 12[(-9-n+arg1 > 0 /\ -1+n >= 0 /\ 31-arg1 > 0 /\ 21-arg1 > 0)], 7[(-10+arg1 > 0 /\ -21+arg1 < 0)]
	
	Blocked

	[{}, {}, {12[T]}, {9[T]}]

Backtrack

	Trace

	11[(1+arg2p6 > 0)], 12[(-9-n+arg1 > 0 /\ -1+n >= 0 /\ 31-arg1 > 0 /\ 21-arg1 > 0)]
	
	Blocked

	[{}, {}, {7[T], 12[T]}]

Backtrack

	Trace

	11[(1+arg2p6 > 0)]
	
	Blocked

	[{}, {12[T]}]

Step with 7

	Trace

	11[(1+arg2p6 > 0)], 7[(-10+arg1 > 0 /\ -21+arg1 < 0)]
	
	Blocked

	[{}, {12[T]}, {}]

Step with 9

	Trace

	11[(1+arg2p6 > 0)], 7[(-10+arg1 > 0 /\ -21+arg1 < 0)], 9[(-30+arg1 < 0)]
	
	Blocked

	[{}, {12[T]}, {}, {}]

Covered

	Trace

	11[(1+arg2p6 > 0)], 7[(-10+arg1 > 0 /\ -21+arg1 < 0)]
	
	Blocked

	[{}, {12[T]}, {9[T]}]

Backtrack

	Trace

	11[(1+arg2p6 > 0)]
	
	Blocked

	[{}, {7[T], 12[T]}]

Step with 8

	Trace

	11[(1+arg2p6 > 0)], 8[(-20+arg1 > 0)]
	
	Blocked

	[{}, {7[T], 12[T]}, {}]

Step with 9

	Trace

	11[(1+arg2p6 > 0)], 8[(-20+arg1 > 0)], 9[(-30+arg1 < 0)]
	
	Blocked

	[{}, {7[T], 12[T]}, {}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2
   7: f53_0_loop_LE -> f74_0_loop_NE : arg1'=-1+arg1, arg2'=arg2p2, (-10+arg1 > 0 /\ -21+arg1 < 0), cost: 1
   8: f53_0_loop_LE -> f74_0_loop_NE : arg1'=1+arg1, arg2'=arg2p3, -20+arg1 > 0, cost: 1
  12: f53_0_loop_LE -> f53_0_loop_LE : arg1'=-n+arg1, arg2'=arg2p4, (-9-n+arg1 > 0 /\ -1+n >= 0 /\ 31-arg1 > 0 /\ 21-arg1 > 0), cost: 1
  13: f53_0_loop_LE -> f53_0_loop_LE : arg1'=n2+arg1, arg2'=arg2p4, (-1+n2 >= 0 /\ -20+arg1 > 0 /\ 30-n2-arg1 > 0), cost: 1
   9: f74_0_loop_NE -> f53_0_loop_LE : arg2'=arg2p4, -30+arg1 < 0, cost: 1
  10: f74_0_loop_NE -> f53_0_loop_LE : arg2'=arg2p5, -30+arg1 > 0, cost: 1
  11: __init -> f53_0_loop_LE : arg1'=arg2p6, arg2'=arg2p1, (1+arg2p6 > 0), cost: 1

	Loop Acceleration

	Original rule:
	f53_0_loop_LE -> f53_0_loop_LE : arg1'=1+arg1, arg2'=arg2p4, (-20+arg1 > 0 /\ -29+arg1 < 0), cost: 1
	New rule:
	f53_0_loop_LE -> f53_0_loop_LE : arg1'=n2+arg1, arg2'=arg2p4, (-1+n2 >= 0 /\ -20+arg1 > 0 /\ 30-n2-arg1 > 0), cost: 1

		29-arg1 > 0 [0]: montonic decrease yields 30-n2-arg1 > 0
		
		29-arg1 > 0 [1]: eventual increase yields (1 <= 0 /\ 29-arg1 > 0)
		
		-20+arg1 > 0 [0]: monotonic increase yields -20+arg1 > 0
		
		Replacement map: {29-arg1 > 0 -> 30-n2-arg1 > 0, -20+arg1 > 0 -> -20+arg1 > 0}

	Trace

	11[(1+arg2p6 > 0)], 13[(-1+n2 >= 0 /\ -20+arg1 > 0 /\ 30-n2-arg1 > 0)]
	
	Blocked

	[{}, {7[T], 12[T]}, {13[T]}]

Step with 8

	Trace

	11[(1+arg2p6 > 0)], 13[(-1+n2 >= 0 /\ -20+arg1 > 0 /\ 30-n2-arg1 > 0)], 8[(-20+arg1 > 0)]
	
	Blocked

	[{}, {7[T], 12[T]}, {7[T], 13[T]}, {}]

Step with 9

	Trace

	11[(1+arg2p6 > 0)], 13[(-1+n2 >= 0 /\ -20+arg1 > 0 /\ 30-n2-arg1 > 0)], 8[(-20+arg1 > 0)], 9[(-30+arg1 < 0)]
	
	Blocked

	[{}, {7[T], 12[T]}, {7[T], 13[T]}, {}, {}]

Covered

	Trace

	11[(1+arg2p6 > 0)], 13[(-1+n2 >= 0 /\ -20+arg1 > 0 /\ 30-n2-arg1 > 0)], 8[(-20+arg1 > 0)]
	
	Blocked

	[{}, {7[T], 12[T]}, {7[T], 13[T]}, {9[T]}]

Backtrack

	Trace

	11[(1+arg2p6 > 0)], 13[(-1+n2 >= 0 /\ -20+arg1 > 0 /\ 30-n2-arg1 > 0)]
	
	Blocked

	[{}, {7[T], 12[T]}, {7[T], 8[T], 13[T]}]

Backtrack

	Trace

	11[(1+arg2p6 > 0)]
	
	Blocked

	[{}, {7[T], 12[T], 13[T]}]

Step with 8

	Trace

	11[(1+arg2p6 > 0)], 8[(-20+arg1 > 0)]
	
	Blocked

	[{}, {7[T], 12[T], 13[T]}, {}]

Step with 9

	Trace

	11[(1+arg2p6 > 0)], 8[(-20+arg1 > 0)], 9[(-30+arg1 < 0)]
	
	Blocked

	[{}, {7[T], 12[T], 13[T]}, {}, {}]

Covered

	Trace

	11[(1+arg2p6 > 0)], 8[(-20+arg1 > 0)]
	
	Blocked

	[{}, {7[T], 12[T], 13[T]}, {9[T]}]

Step with 10

	Trace

	11[(1+arg2p6 > 0)], 8[(-20+arg1 > 0)], 10[(-30+arg1 > 0)]
	
	Blocked

	[{}, {7[T], 12[T], 13[T]}, {9[T]}, {}]

Nonterm

Start location: __init
Program variables: arg1 arg2
   7: f53_0_loop_LE -> f74_0_loop_NE : arg1'=-1+arg1, arg2'=arg2p2, (-10+arg1 > 0 /\ -21+arg1 < 0), cost: 1
   8: f53_0_loop_LE -> f74_0_loop_NE : arg1'=1+arg1, arg2'=arg2p3, -20+arg1 > 0, cost: 1
  12: f53_0_loop_LE -> f53_0_loop_LE : arg1'=-n+arg1, arg2'=arg2p4, (-9-n+arg1 > 0 /\ -1+n >= 0 /\ 31-arg1 > 0 /\ 21-arg1 > 0), cost: 1
  13: f53_0_loop_LE -> f53_0_loop_LE : arg1'=n2+arg1, arg2'=arg2p4, (-1+n2 >= 0 /\ -20+arg1 > 0 /\ 30-n2-arg1 > 0), cost: 1
  14: f53_0_loop_LE -> LoAT_sink : (-20+arg1 > 0 /\ -1+n3 >= 0 /\ -29+arg1 > 0), cost: NONTERM
  15: f53_0_loop_LE -> f53_0_loop_LE : arg1'=arg1+n3, arg2'=arg2p5, (-20+arg1 > 0 /\ -1+n3 >= 0 /\ -29+arg1 > 0), cost: 1
   9: f74_0_loop_NE -> f53_0_loop_LE : arg2'=arg2p4, -30+arg1 < 0, cost: 1
  10: f74_0_loop_NE -> f53_0_loop_LE : arg2'=arg2p5, -30+arg1 > 0, cost: 1
  11: __init -> f53_0_loop_LE : arg1'=arg2p6, arg2'=arg2p1, (1+arg2p6 > 0), cost: 1

	Certificate of Non-Termination

	Original rule:
	f53_0_loop_LE -> f53_0_loop_LE : arg1'=1+arg1, arg2'=arg2p5, (-20+arg1 > 0 /\ -29+arg1 > 0), cost: 1
	New rule:
	f53_0_loop_LE -> LoAT_sink : (-20+arg1 > 0 /\ -1+n3 >= 0 /\ -29+arg1 > 0), cost: NONTERM

		-20+arg1 > 0 [0]: monotonic increase yields -20+arg1 > 0
		
		-29+arg1 > 0 [0]: monotonic increase yields -29+arg1 > 0
		
		Replacement map: {-20+arg1 > 0 -> -20+arg1 > 0, -29+arg1 > 0 -> -29+arg1 > 0}

	Loop Acceleration

	Original rule:
	f53_0_loop_LE -> f53_0_loop_LE : arg1'=1+arg1, arg2'=arg2p5, (-20+arg1 > 0 /\ -29+arg1 > 0), cost: 1
	New rule:
	f53_0_loop_LE -> f53_0_loop_LE : arg1'=arg1+n3, arg2'=arg2p5, (-20+arg1 > 0 /\ -1+n3 >= 0 /\ -29+arg1 > 0), cost: 1

		-20+arg1 > 0 [0]: monotonic increase yields -20+arg1 > 0
		
		-29+arg1 > 0 [0]: monotonic increase yields -29+arg1 > 0
		
		Replacement map: {-20+arg1 > 0 -> -20+arg1 > 0, -29+arg1 > 0 -> -29+arg1 > 0}

Step with 14

	Trace

	11[(1+arg2p6 > 0)], 14[(-20+arg1 > 0 /\ -1+n3 >= 0 /\ -29+arg1 > 0)]
	
	Blocked

	[{}, {7[T], 12[T], 13[T]}, {14[T]}]

Refute

	Counterexample

	[ arg1=30 arg2=0 ] 11 [ arg1=arg1 arg2=arg2 ] 14
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
