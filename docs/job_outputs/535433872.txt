WORST_CASE(Omega(0),?)

Initial ITS
Start location: __init
   0: f1_0_main_Load -> f135_0_f_LE : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (arg2-arg1P0 == 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ arg2-arg2P0 == 0), cost: 1
   1: f135_0_f_LE -> f182_0_f_LE : arg2'=arg2P1, arg1'=arg1P1, arg3'=arg3P1, (2-arg2P1 == 0 /\ arg1-arg1P1 == 0 /\ arg1 > 0 /\ arg2-arg3P1 == 0), cost: 1
   2: f182_0_f_LE -> f135_0_f_LE : arg2'=arg2P2, arg1'=arg1P2, arg3'=arg3P2, (arg2 > 0 /\ -arg2-arg1P2+arg1 == 0 /\ -1-arg2P2+arg3 == 0 /\ arg1 > 0), cost: 1
   3: f182_0_f_LE -> f182_0_f_LE : arg2'=arg2P3, arg1'=arg1P3, arg3'=arg3P3, (arg2 > 0 /\ -arg1P3+arg1 == 0 /\ arg1 > 0 /\ -1-arg3P3+arg3 == 0 /\ -1-arg2P3+arg2 == 0), cost: 1
   4: f182_0_f_LE -> f182_0_f_LE : arg2'=arg2P4, arg1'=arg1P4, arg3'=arg3P4, (-1-arg2P4+arg2 == 0 /\ arg2 > 0 /\ -arg1P4+arg1 == 0 /\ arg1 > 0), cost: 1
   5: __init -> f1_0_main_Load : arg2'=arg2P5, arg1'=arg1P5, arg3'=arg3P5, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_Load -> f135_0_f_LE : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (arg2-arg1P0 == 0 /\ 1+arg2 > 0 /\ arg1 > 0 /\ arg2-arg2P0 == 0), cost: 1
New rule:
f1_0_main_Load -> f135_0_f_LE : arg1'=arg2, arg3'=arg3P0, (1+arg2 > 0 /\ arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f135_0_f_LE -> f182_0_f_LE : arg2'=arg2P1, arg1'=arg1P1, arg3'=arg3P1, (2-arg2P1 == 0 /\ arg1-arg1P1 == 0 /\ arg1 > 0 /\ arg2-arg3P1 == 0), cost: 1
New rule:
f135_0_f_LE -> f182_0_f_LE : arg2'=2, arg3'=arg2, arg1 > 0, cost: 1

Applied preprocessing
Original rule:
f182_0_f_LE -> f135_0_f_LE : arg2'=arg2P2, arg1'=arg1P2, arg3'=arg3P2, (arg2 > 0 /\ -arg2-arg1P2+arg1 == 0 /\ -1-arg2P2+arg3 == 0 /\ arg1 > 0), cost: 1
New rule:
f182_0_f_LE -> f135_0_f_LE : arg2'=-1+arg3, arg1'=-arg2+arg1, arg3'=arg3P2, (arg2 > 0 /\ arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f182_0_f_LE -> f182_0_f_LE : arg2'=arg2P3, arg1'=arg1P3, arg3'=arg3P3, (arg2 > 0 /\ -arg1P3+arg1 == 0 /\ arg1 > 0 /\ -1-arg3P3+arg3 == 0 /\ -1-arg2P3+arg2 == 0), cost: 1
New rule:
f182_0_f_LE -> f182_0_f_LE : arg2'=-1+arg2, arg3'=-1+arg3, (arg2 > 0 /\ arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f182_0_f_LE -> f182_0_f_LE : arg2'=arg2P4, arg1'=arg1P4, arg3'=arg3P4, (-1-arg2P4+arg2 == 0 /\ arg2 > 0 /\ -arg1P4+arg1 == 0 /\ arg1 > 0), cost: 1
New rule:
f182_0_f_LE -> f182_0_f_LE : arg2'=-1+arg2, arg3'=arg3P4, (arg2 > 0 /\ arg1 > 0), cost: 1

Simplified rules
Start location: __init
   6: f1_0_main_Load -> f135_0_f_LE : arg1'=arg2, arg3'=arg3P0, (1+arg2 > 0 /\ arg1 > 0), cost: 1
   7: f135_0_f_LE -> f182_0_f_LE : arg2'=2, arg3'=arg2, arg1 > 0, cost: 1
   8: f182_0_f_LE -> f135_0_f_LE : arg2'=-1+arg3, arg1'=-arg2+arg1, arg3'=arg3P2, (arg2 > 0 /\ arg1 > 0), cost: 1
   9: f182_0_f_LE -> f182_0_f_LE : arg2'=-1+arg2, arg3'=-1+arg3, (arg2 > 0 /\ arg1 > 0), cost: 1
  10: f182_0_f_LE -> f182_0_f_LE : arg2'=-1+arg2, arg3'=arg3P4, (arg2 > 0 /\ arg1 > 0), cost: 1
   5: __init -> f1_0_main_Load : arg2'=arg2P5, arg1'=arg1P5, arg3'=arg3P5, TRUE, cost: 1


Applied acceleration
Original rule:
f182_0_f_LE -> f182_0_f_LE : arg2'=-1+arg2, arg3'=-1+arg3, (arg2 > 0 /\ arg1 > 0), cost: 1
New rule:
f182_0_f_LE -> f182_0_f_LE : arg2'=arg2-n, arg3'=arg3-n, (arg1 > 0 /\ 1+arg2-n > 0 /\ n >= 0), cost: n
Sub-proof via acceration calculus written to file:///tmp/tmpnam_MaaIdA.txt

Applied instantiation
Original rule:
f182_0_f_LE -> f182_0_f_LE : arg2'=arg2-n, arg3'=arg3-n, (arg1 > 0 /\ 1+arg2-n > 0 /\ n >= 0), cost: n
New rule:
f182_0_f_LE -> f182_0_f_LE : arg2'=0, arg3'=-arg2+arg3, (1 > 0 /\ arg2 >= 0 /\ arg1 > 0), cost: arg2

Applied acceleration
Original rule:
f182_0_f_LE -> f182_0_f_LE : arg2'=-1+arg2, arg3'=arg3P4, (arg2 > 0 /\ arg1 > 0), cost: 1
New rule:
f182_0_f_LE -> f182_0_f_LE : arg2'=arg2-n0, arg3'=arg3P4, (1+arg2-n0 > 0 /\ arg1 > 0 /\ -1+n0 >= 0), cost: n0
Sub-proof via acceration calculus written to file:///tmp/tmpnam_mpjDmd.txt

Applied instantiation
Original rule:
f182_0_f_LE -> f182_0_f_LE : arg2'=arg2-n0, arg3'=arg3P4, (1+arg2-n0 > 0 /\ arg1 > 0 /\ -1+n0 >= 0), cost: n0
New rule:
f182_0_f_LE -> f182_0_f_LE : arg2'=0, arg3'=arg3P4, (1 > 0 /\ arg1 > 0 /\ -1+arg2 >= 0), cost: arg2

Applied simplification
Original rule:
f182_0_f_LE -> f182_0_f_LE : arg2'=0, arg3'=-arg2+arg3, (1 > 0 /\ arg2 >= 0 /\ arg1 > 0), cost: arg2
New rule:
f182_0_f_LE -> f182_0_f_LE : arg2'=0, arg3'=-arg2+arg3, (arg2 >= 0 /\ arg1 > 0), cost: arg2

Applied simplification
Original rule:
f182_0_f_LE -> f182_0_f_LE : arg2'=0, arg3'=arg3P4, (1 > 0 /\ arg1 > 0 /\ -1+arg2 >= 0), cost: arg2
New rule:
f182_0_f_LE -> f182_0_f_LE : arg2'=0, arg3'=arg3P4, (arg1 > 0 /\ -1+arg2 >= 0), cost: arg2

Applied deletion
Removed the following rules: 9 10

Accelerated simple loops
Start location: __init
   6: f1_0_main_Load -> f135_0_f_LE : arg1'=arg2, arg3'=arg3P0, (1+arg2 > 0 /\ arg1 > 0), cost: 1
   7: f135_0_f_LE -> f182_0_f_LE : arg2'=2, arg3'=arg2, arg1 > 0, cost: 1
   8: f182_0_f_LE -> f135_0_f_LE : arg2'=-1+arg3, arg1'=-arg2+arg1, arg3'=arg3P2, (arg2 > 0 /\ arg1 > 0), cost: 1
  13: f182_0_f_LE -> f182_0_f_LE : arg2'=0, arg3'=-arg2+arg3, (arg2 >= 0 /\ arg1 > 0), cost: arg2
  14: f182_0_f_LE -> f182_0_f_LE : arg2'=0, arg3'=arg3P4, (arg1 > 0 /\ -1+arg2 >= 0), cost: arg2
   5: __init -> f1_0_main_Load : arg2'=arg2P5, arg1'=arg1P5, arg3'=arg3P5, TRUE, cost: 1


Applied chaining
First rule:
f135_0_f_LE -> f182_0_f_LE : arg2'=2, arg3'=arg2, arg1 > 0, cost: 1
Second rule:
f182_0_f_LE -> f182_0_f_LE : arg2'=0, arg3'=-arg2+arg3, (arg2 >= 0 /\ arg1 > 0), cost: arg2
New rule:
f135_0_f_LE -> f182_0_f_LE : arg2'=0, arg3'=-2+arg2, arg1 > 0, cost: 3

Applied chaining
First rule:
f135_0_f_LE -> f182_0_f_LE : arg2'=2, arg3'=arg2, arg1 > 0, cost: 1
Second rule:
f182_0_f_LE -> f182_0_f_LE : arg2'=0, arg3'=arg3P4, (arg1 > 0 /\ -1+arg2 >= 0), cost: arg2
New rule:
f135_0_f_LE -> f182_0_f_LE : arg2'=0, arg3'=arg3P4, arg1 > 0, cost: 3

Applied deletion
Removed the following rules: 13 14

Chained accelerated rules with incoming rules
Start location: __init
   6: f1_0_main_Load -> f135_0_f_LE : arg1'=arg2, arg3'=arg3P0, (1+arg2 > 0 /\ arg1 > 0), cost: 1
   7: f135_0_f_LE -> f182_0_f_LE : arg2'=2, arg3'=arg2, arg1 > 0, cost: 1
  15: f135_0_f_LE -> f182_0_f_LE : arg2'=0, arg3'=-2+arg2, arg1 > 0, cost: 3
  16: f135_0_f_LE -> f182_0_f_LE : arg2'=0, arg3'=arg3P4, arg1 > 0, cost: 3
   8: f182_0_f_LE -> f135_0_f_LE : arg2'=-1+arg3, arg1'=-arg2+arg1, arg3'=arg3P2, (arg2 > 0 /\ arg1 > 0), cost: 1
   5: __init -> f1_0_main_Load : arg2'=arg2P5, arg1'=arg1P5, arg3'=arg3P5, TRUE, cost: 1


Eliminating location f1_0_main_Load by chaining:

Applied chaining
First rule:
__init -> f1_0_main_Load : arg2'=arg2P5, arg1'=arg1P5, arg3'=arg3P5, TRUE, cost: 1
Second rule:
f1_0_main_Load -> f135_0_f_LE : arg1'=arg2, arg3'=arg3P0, (1+arg2 > 0 /\ arg1 > 0), cost: 1
New rule:
__init -> f135_0_f_LE : arg2'=arg2P5, arg1'=arg2P5, arg3'=arg3P0, (arg1P5 > 0 /\ 1+arg2P5 > 0), cost: 2

Applied deletion
Removed the following rules: 5 6

Eliminated locations on linear paths
Start location: __init
   7: f135_0_f_LE -> f182_0_f_LE : arg2'=2, arg3'=arg2, arg1 > 0, cost: 1
  15: f135_0_f_LE -> f182_0_f_LE : arg2'=0, arg3'=-2+arg2, arg1 > 0, cost: 3
  16: f135_0_f_LE -> f182_0_f_LE : arg2'=0, arg3'=arg3P4, arg1 > 0, cost: 3
   8: f182_0_f_LE -> f135_0_f_LE : arg2'=-1+arg3, arg1'=-arg2+arg1, arg3'=arg3P2, (arg2 > 0 /\ arg1 > 0), cost: 1
  17: __init -> f135_0_f_LE : arg2'=arg2P5, arg1'=arg2P5, arg3'=arg3P0, (arg1P5 > 0 /\ 1+arg2P5 > 0), cost: 2


Eliminating location f182_0_f_LE by chaining:

Applied chaining
First rule:
f135_0_f_LE -> f182_0_f_LE : arg2'=2, arg3'=arg2, arg1 > 0, cost: 1
Second rule:
f182_0_f_LE -> f135_0_f_LE : arg2'=-1+arg3, arg1'=-arg2+arg1, arg3'=arg3P2, (arg2 > 0 /\ arg1 > 0), cost: 1
New rule:
f135_0_f_LE -> f135_0_f_LE : arg2'=-1+arg2, arg1'=-2+arg1, arg3'=arg3P2, (2 > 0 /\ arg1 > 0), cost: 2

Applied simplification
Original rule:
f135_0_f_LE -> f135_0_f_LE : arg2'=-1+arg2, arg1'=-2+arg1, arg3'=arg3P2, (2 > 0 /\ arg1 > 0), cost: 2
New rule:
f135_0_f_LE -> f135_0_f_LE : arg2'=-1+arg2, arg1'=-2+arg1, arg3'=arg3P2, arg1 > 0, cost: 2

Applied deletion
Removed the following rules: 7 8 15 16

Eliminated locations on tree-shaped paths
Start location: __init
  18: f135_0_f_LE -> f135_0_f_LE : arg2'=-1+arg2, arg1'=-2+arg1, arg3'=arg3P2, arg1 > 0, cost: 2
  17: __init -> f135_0_f_LE : arg2'=arg2P5, arg1'=arg2P5, arg3'=arg3P0, (arg1P5 > 0 /\ 1+arg2P5 > 0), cost: 2


Applied acceleration
Original rule:
f135_0_f_LE -> f135_0_f_LE : arg2'=-1+arg2, arg1'=-2+arg1, arg3'=arg3P2, arg1 > 0, cost: 2
New rule:
f135_0_f_LE -> f135_0_f_LE : arg2'=arg2-n5, arg1'=-2*n5+arg1, arg3'=arg3P2, (-1+n5 >= 0 /\ 2-2*n5+arg1 > 0), cost: 2*n5
Sub-proof via acceration calculus written to file:///tmp/tmpnam_LfjJln.txt

Applied deletion
Removed the following rules: 18

Accelerated simple loops
Start location: __init
  19: f135_0_f_LE -> f135_0_f_LE : arg2'=arg2-n5, arg1'=-2*n5+arg1, arg3'=arg3P2, (-1+n5 >= 0 /\ 2-2*n5+arg1 > 0), cost: 2*n5
  17: __init -> f135_0_f_LE : arg2'=arg2P5, arg1'=arg2P5, arg3'=arg3P0, (arg1P5 > 0 /\ 1+arg2P5 > 0), cost: 2


Applied chaining
First rule:
__init -> f135_0_f_LE : arg2'=arg2P5, arg1'=arg2P5, arg3'=arg3P0, (arg1P5 > 0 /\ 1+arg2P5 > 0), cost: 2
Second rule:
f135_0_f_LE -> f135_0_f_LE : arg2'=arg2-n5, arg1'=-2*n5+arg1, arg3'=arg3P2, (-1+n5 >= 0 /\ 2-2*n5+arg1 > 0), cost: 2*n5
New rule:
__init -> f135_0_f_LE : arg2'=arg2P5-n5, arg1'=arg2P5-2*n5, arg3'=arg3P2, (-1+n5 >= 0 /\ 2+arg2P5-2*n5 > 0), cost: 2+2*n5

Applied deletion
Removed the following rules: 19

Chained accelerated rules with incoming rules
Start location: __init
  17: __init -> f135_0_f_LE : arg2'=arg2P5, arg1'=arg2P5, arg3'=arg3P0, (arg1P5 > 0 /\ 1+arg2P5 > 0), cost: 2
  20: __init -> f135_0_f_LE : arg2'=arg2P5-n5, arg1'=arg2P5-2*n5, arg3'=arg3P2, (-1+n5 >= 0 /\ 2+arg2P5-2*n5 > 0), cost: 2+2*n5


Removed unreachable locations and irrelevant leafs
Start location: __init
  <empty>


Computing asymptotic complexity

Proved the following lower bound
Complexity:  Unknown
Cpx degree: ?

Solved cost: 0
Rule cost:   0

