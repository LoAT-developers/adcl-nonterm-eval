WORST_CASE(Omega(0),?)

Initial ITS
Start location: __init
   0: f1_0_main_New -> f262_0_main_InvokeMethod : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, -2+arg1P0 > 0, cost: 1
   1: f1_0_main_New -> f262_0_main_InvokeMethod : arg2'=arg2P1, arg1'=arg1P1, arg3'=arg3P1, -1+arg1P1 > 0, cost: 1
   2: f1_0_main_New -> f76_0__init__LE : arg2'=arg2P2, arg1'=arg1P2, arg3'=arg3P2, (5-arg2P2 == 0 /\ 5-arg1P2 == 0 /\ 5-arg3P2 == 0), cost: 1
   7: f262_0_main_InvokeMethod -> f194_0_height_NONNULL : arg2'=arg2P7, arg1'=arg1P7, arg3'=arg3P7, (arg1P7 > 0 /\ 1-arg1+arg2P7 <= 0 /\ arg1 > 0 /\ 1+arg2P7 > 0 /\ arg1P7-arg1 <= 0), cost: 1
   3: f76_0__init__LE -> f76_0__init__LE : arg2'=arg2P3, arg1'=arg1P3, arg3'=arg3P3, (-1+arg2-arg1P3 == 0 /\ -1+arg2-arg3P3 == 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ arg2-arg3 == 0 /\ -1 < 0 /\ -1-arg2P3+arg2 == 0), cost: 1
   4: f76_0__init__LE -> f288_0__init__InvokeMethod : arg2'=arg2P4, arg1'=arg1P4, arg3'=arg3P4, (-arg1P4+arg1 == 0 /\ -4+arg2P4 > 0 /\ -1+arg2-arg3P4 == 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ arg2-arg3 == 0 /\ -1 < 0), cost: 1
   5: f76_0__init__LE -> f288_0__init__InvokeMethod : arg2'=arg2P5, arg1'=arg1P5, arg3'=arg3P5, (-arg1P5+arg1 == 0 /\ -3+arg2P5 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ arg2-arg3 == 0 /\ -1 < 0 /\ -1+arg2-arg3P5 == 0), cost: 1
   6: f288_0__init__InvokeMethod -> f76_0__init__LE : arg2'=arg2P6, arg1'=arg1P6, arg3'=arg3P6, (arg3-arg2P6 == 0 /\ -2+arg2 > 0 /\ arg1 > 0 /\ -arg3P6+arg3 == 0 /\ arg3 > 0 /\ -arg1P6+arg3 == 0), cost: 1
   8: f194_0_height_NONNULL -> f194_0_height_NONNULL : arg2'=arg2P8, arg1'=arg1P8, arg3'=arg3P8, (-2+arg1 > 0 /\ arg2 > 0 /\ 1-arg2+arg2P8 <= 0 /\ 1+arg2P8 > 0 /\ 2-arg1+arg1P8 <= 0 /\ -arg2+arg1P8 <= 0 /\ 3-arg1+arg2P8 <= 0 /\ arg1P8 > 0), cost: 1
   9: f194_0_height_NONNULL -> f194_0_height_NONNULL : arg2'=arg2P9, arg1'=arg1P9, arg3'=arg3P9, (1+arg2P9 > 0 /\ -2+arg1 > 0 /\ 2-arg1+arg1P9 <= 0 /\ 1+arg2 > 0 /\ 3-arg1+arg2P9 <= 0 /\ arg1P9 > 0), cost: 1
  10: __init -> f1_0_main_New : arg2'=arg2P10, arg1'=arg1P10, arg3'=arg3P10, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_New -> f76_0__init__LE : arg2'=arg2P2, arg1'=arg1P2, arg3'=arg3P2, (5-arg2P2 == 0 /\ 5-arg1P2 == 0 /\ 5-arg3P2 == 0), cost: 1
New rule:
f1_0_main_New -> f76_0__init__LE : arg2'=5, arg1'=5, arg3'=5, TRUE, cost: 1

Applied preprocessing
Original rule:
f76_0__init__LE -> f76_0__init__LE : arg2'=arg2P3, arg1'=arg1P3, arg3'=arg3P3, (-1+arg2-arg1P3 == 0 /\ -1+arg2-arg3P3 == 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ arg2-arg3 == 0 /\ -1 < 0 /\ -1-arg2P3+arg2 == 0), cost: 1
New rule:
f76_0__init__LE -> f76_0__init__LE : arg2'=-1+arg2, arg1'=-1+arg2, arg3'=-1+arg2, (arg1 > 0 /\ -1+arg2 > 0 /\ arg2-arg3 == 0), cost: 1

Applied preprocessing
Original rule:
f76_0__init__LE -> f288_0__init__InvokeMethod : arg2'=arg2P4, arg1'=arg1P4, arg3'=arg3P4, (-arg1P4+arg1 == 0 /\ -4+arg2P4 > 0 /\ -1+arg2-arg3P4 == 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ arg2-arg3 == 0 /\ -1 < 0), cost: 1
New rule:
f76_0__init__LE -> f288_0__init__InvokeMethod : arg2'=arg2P4, arg3'=-1+arg2, (-4+arg2P4 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ arg2-arg3 == 0), cost: 1

Applied preprocessing
Original rule:
f76_0__init__LE -> f288_0__init__InvokeMethod : arg2'=arg2P5, arg1'=arg1P5, arg3'=arg3P5, (-arg1P5+arg1 == 0 /\ -3+arg2P5 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ arg2-arg3 == 0 /\ -1 < 0 /\ -1+arg2-arg3P5 == 0), cost: 1
New rule:
f76_0__init__LE -> f288_0__init__InvokeMethod : arg2'=arg2P5, arg3'=-1+arg2, (-3+arg2P5 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ arg2-arg3 == 0), cost: 1

Applied preprocessing
Original rule:
f288_0__init__InvokeMethod -> f76_0__init__LE : arg2'=arg2P6, arg1'=arg1P6, arg3'=arg3P6, (arg3-arg2P6 == 0 /\ -2+arg2 > 0 /\ arg1 > 0 /\ -arg3P6+arg3 == 0 /\ arg3 > 0 /\ -arg1P6+arg3 == 0), cost: 1
New rule:
f288_0__init__InvokeMethod -> f76_0__init__LE : arg2'=arg3, arg1'=arg3, (-2+arg2 > 0 /\ arg1 > 0 /\ arg3 > 0), cost: 1

Applied preprocessing
Original rule:
f262_0_main_InvokeMethod -> f194_0_height_NONNULL : arg2'=arg2P7, arg1'=arg1P7, arg3'=arg3P7, (arg1P7 > 0 /\ 1-arg1+arg2P7 <= 0 /\ arg1 > 0 /\ 1+arg2P7 > 0 /\ arg1P7-arg1 <= 0), cost: 1
New rule:
f262_0_main_InvokeMethod -> f194_0_height_NONNULL : arg2'=arg2P7, arg1'=arg1P7, arg3'=arg3P7, (arg1P7 > 0 /\ 1-arg1+arg2P7 <= 0 /\ 1+arg2P7 > 0 /\ arg1P7-arg1 <= 0), cost: 1

Applied preprocessing
Original rule:
f194_0_height_NONNULL -> f194_0_height_NONNULL : arg2'=arg2P8, arg1'=arg1P8, arg3'=arg3P8, (-2+arg1 > 0 /\ arg2 > 0 /\ 1-arg2+arg2P8 <= 0 /\ 1+arg2P8 > 0 /\ 2-arg1+arg1P8 <= 0 /\ -arg2+arg1P8 <= 0 /\ 3-arg1+arg2P8 <= 0 /\ arg1P8 > 0), cost: 1
New rule:
f194_0_height_NONNULL -> f194_0_height_NONNULL : arg2'=arg2P8, arg1'=arg1P8, arg3'=arg3P8, (1-arg2+arg2P8 <= 0 /\ 1+arg2P8 > 0 /\ 2-arg1+arg1P8 <= 0 /\ -arg2+arg1P8 <= 0 /\ 3-arg1+arg2P8 <= 0 /\ arg1P8 > 0), cost: 1

Applied preprocessing
Original rule:
f194_0_height_NONNULL -> f194_0_height_NONNULL : arg2'=arg2P9, arg1'=arg1P9, arg3'=arg3P9, (1+arg2P9 > 0 /\ -2+arg1 > 0 /\ 2-arg1+arg1P9 <= 0 /\ 1+arg2 > 0 /\ 3-arg1+arg2P9 <= 0 /\ arg1P9 > 0), cost: 1
New rule:
f194_0_height_NONNULL -> f194_0_height_NONNULL : arg2'=arg2P9, arg1'=arg1P9, arg3'=arg3P9, (1+arg2P9 > 0 /\ 2-arg1+arg1P9 <= 0 /\ 1+arg2 > 0 /\ 3-arg1+arg2P9 <= 0 /\ arg1P9 > 0), cost: 1

Simplified rules
Start location: __init
   0: f1_0_main_New -> f262_0_main_InvokeMethod : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, -2+arg1P0 > 0, cost: 1
   1: f1_0_main_New -> f262_0_main_InvokeMethod : arg2'=arg2P1, arg1'=arg1P1, arg3'=arg3P1, -1+arg1P1 > 0, cost: 1
  11: f1_0_main_New -> f76_0__init__LE : arg2'=5, arg1'=5, arg3'=5, TRUE, cost: 1
  16: f262_0_main_InvokeMethod -> f194_0_height_NONNULL : arg2'=arg2P7, arg1'=arg1P7, arg3'=arg3P7, (arg1P7 > 0 /\ 1-arg1+arg2P7 <= 0 /\ 1+arg2P7 > 0 /\ arg1P7-arg1 <= 0), cost: 1
  12: f76_0__init__LE -> f76_0__init__LE : arg2'=-1+arg2, arg1'=-1+arg2, arg3'=-1+arg2, (arg1 > 0 /\ -1+arg2 > 0 /\ arg2-arg3 == 0), cost: 1
  13: f76_0__init__LE -> f288_0__init__InvokeMethod : arg2'=arg2P4, arg3'=-1+arg2, (-4+arg2P4 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ arg2-arg3 == 0), cost: 1
  14: f76_0__init__LE -> f288_0__init__InvokeMethod : arg2'=arg2P5, arg3'=-1+arg2, (-3+arg2P5 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ arg2-arg3 == 0), cost: 1
  15: f288_0__init__InvokeMethod -> f76_0__init__LE : arg2'=arg3, arg1'=arg3, (-2+arg2 > 0 /\ arg1 > 0 /\ arg3 > 0), cost: 1
  17: f194_0_height_NONNULL -> f194_0_height_NONNULL : arg2'=arg2P8, arg1'=arg1P8, arg3'=arg3P8, (1-arg2+arg2P8 <= 0 /\ 1+arg2P8 > 0 /\ 2-arg1+arg1P8 <= 0 /\ -arg2+arg1P8 <= 0 /\ 3-arg1+arg2P8 <= 0 /\ arg1P8 > 0), cost: 1
  18: f194_0_height_NONNULL -> f194_0_height_NONNULL : arg2'=arg2P9, arg1'=arg1P9, arg3'=arg3P9, (1+arg2P9 > 0 /\ 2-arg1+arg1P9 <= 0 /\ 1+arg2 > 0 /\ 3-arg1+arg2P9 <= 0 /\ arg1P9 > 0), cost: 1
  10: __init -> f1_0_main_New : arg2'=arg2P10, arg1'=arg1P10, arg3'=arg3P10, TRUE, cost: 1


Applied acceleration
Original rule:
f76_0__init__LE -> f76_0__init__LE : arg2'=-1+arg2, arg1'=-1+arg2, arg3'=-1+arg2, (arg1 > 0 /\ -1+arg2 > 0 /\ arg2-arg3 == 0), cost: 1
New rule:
f76_0__init__LE -> f76_0__init__LE : arg2'=arg2-n, arg1'=arg2-n, arg3'=arg2-n, (1+arg2-n > 0 /\ arg2-n > 0 /\ arg1 > 0 /\ arg2-arg3 >= 0 /\ -1+n >= 0 /\ -arg2+arg3 >= 0), cost: n
Sub-proof via acceration calculus written to file:///tmp/tmpnam_feAbIi.txt

Applied instantiation
Original rule:
f76_0__init__LE -> f76_0__init__LE : arg2'=arg2-n, arg1'=arg2-n, arg3'=arg2-n, (1+arg2-n > 0 /\ arg2-n > 0 /\ arg1 > 0 /\ arg2-arg3 >= 0 /\ -1+n >= 0 /\ -arg2+arg3 >= 0), cost: n
New rule:
f76_0__init__LE -> f76_0__init__LE : arg2'=0, arg1'=0, arg3'=0, (0 > 0 /\ 1 > 0 /\ arg1 > 0 /\ -1+arg2 >= 0 /\ arg2-arg3 >= 0 /\ -arg2+arg3 >= 0), cost: arg2

Applied instantiation
Original rule:
f76_0__init__LE -> f76_0__init__LE : arg2'=arg2-n, arg1'=arg2-n, arg3'=arg2-n, (1+arg2-n > 0 /\ arg2-n > 0 /\ arg1 > 0 /\ arg2-arg3 >= 0 /\ -1+n >= 0 /\ -arg2+arg3 >= 0), cost: n
New rule:
f76_0__init__LE -> f76_0__init__LE : arg2'=1, arg1'=1, arg3'=1, (1 > 0 /\ -2+arg2 >= 0 /\ 2 > 0 /\ arg1 > 0 /\ arg2-arg3 >= 0 /\ -arg2+arg3 >= 0), cost: -1+arg2

Applied simplification
Original rule:
f76_0__init__LE -> f76_0__init__LE : arg2'=1, arg1'=1, arg3'=1, (1 > 0 /\ -2+arg2 >= 0 /\ 2 > 0 /\ arg1 > 0 /\ arg2-arg3 >= 0 /\ -arg2+arg3 >= 0), cost: -1+arg2
New rule:
f76_0__init__LE -> f76_0__init__LE : arg2'=1, arg1'=1, arg3'=1, (-2+arg2 >= 0 /\ arg1 > 0 /\ arg2-arg3 >= 0 /\ -arg2+arg3 >= 0), cost: -1+arg2

Applied deletion
Removed the following rules: 12

Accelerated simple loops
Start location: __init
   0: f1_0_main_New -> f262_0_main_InvokeMethod : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, -2+arg1P0 > 0, cost: 1
   1: f1_0_main_New -> f262_0_main_InvokeMethod : arg2'=arg2P1, arg1'=arg1P1, arg3'=arg3P1, -1+arg1P1 > 0, cost: 1
  11: f1_0_main_New -> f76_0__init__LE : arg2'=5, arg1'=5, arg3'=5, TRUE, cost: 1
  16: f262_0_main_InvokeMethod -> f194_0_height_NONNULL : arg2'=arg2P7, arg1'=arg1P7, arg3'=arg3P7, (arg1P7 > 0 /\ 1-arg1+arg2P7 <= 0 /\ 1+arg2P7 > 0 /\ arg1P7-arg1 <= 0), cost: 1
  13: f76_0__init__LE -> f288_0__init__InvokeMethod : arg2'=arg2P4, arg3'=-1+arg2, (-4+arg2P4 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ arg2-arg3 == 0), cost: 1
  14: f76_0__init__LE -> f288_0__init__InvokeMethod : arg2'=arg2P5, arg3'=-1+arg2, (-3+arg2P5 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ arg2-arg3 == 0), cost: 1
  19: f76_0__init__LE -> f76_0__init__LE : arg2'=0, arg1'=0, arg3'=0, (0 > 0 /\ 1 > 0 /\ arg1 > 0 /\ -1+arg2 >= 0 /\ arg2-arg3 >= 0 /\ -arg2+arg3 >= 0), cost: arg2
  21: f76_0__init__LE -> f76_0__init__LE : arg2'=1, arg1'=1, arg3'=1, (-2+arg2 >= 0 /\ arg1 > 0 /\ arg2-arg3 >= 0 /\ -arg2+arg3 >= 0), cost: -1+arg2
  15: f288_0__init__InvokeMethod -> f76_0__init__LE : arg2'=arg3, arg1'=arg3, (-2+arg2 > 0 /\ arg1 > 0 /\ arg3 > 0), cost: 1
  17: f194_0_height_NONNULL -> f194_0_height_NONNULL : arg2'=arg2P8, arg1'=arg1P8, arg3'=arg3P8, (1-arg2+arg2P8 <= 0 /\ 1+arg2P8 > 0 /\ 2-arg1+arg1P8 <= 0 /\ -arg2+arg1P8 <= 0 /\ 3-arg1+arg2P8 <= 0 /\ arg1P8 > 0), cost: 1
  18: f194_0_height_NONNULL -> f194_0_height_NONNULL : arg2'=arg2P9, arg1'=arg1P9, arg3'=arg3P9, (1+arg2P9 > 0 /\ 2-arg1+arg1P9 <= 0 /\ 1+arg2 > 0 /\ 3-arg1+arg2P9 <= 0 /\ arg1P9 > 0), cost: 1
  10: __init -> f1_0_main_New : arg2'=arg2P10, arg1'=arg1P10, arg3'=arg3P10, TRUE, cost: 1


Applied chaining
First rule:
f1_0_main_New -> f76_0__init__LE : arg2'=5, arg1'=5, arg3'=5, TRUE, cost: 1
Second rule:
f76_0__init__LE -> f76_0__init__LE : arg2'=1, arg1'=1, arg3'=1, (-2+arg2 >= 0 /\ arg1 > 0 /\ arg2-arg3 >= 0 /\ -arg2+arg3 >= 0), cost: -1+arg2
New rule:
f1_0_main_New -> f76_0__init__LE : arg2'=1, arg1'=1, arg3'=1, (0 >= 0 /\ 3 >= 0 /\ 5 > 0), cost: 5

Applied chaining
First rule:
f288_0__init__InvokeMethod -> f76_0__init__LE : arg2'=arg3, arg1'=arg3, (-2+arg2 > 0 /\ arg1 > 0 /\ arg3 > 0), cost: 1
Second rule:
f76_0__init__LE -> f76_0__init__LE : arg2'=1, arg1'=1, arg3'=1, (-2+arg2 >= 0 /\ arg1 > 0 /\ arg2-arg3 >= 0 /\ -arg2+arg3 >= 0), cost: -1+arg2
New rule:
f288_0__init__InvokeMethod -> f76_0__init__LE : arg2'=1, arg1'=1, arg3'=1, (-2+arg2 > 0 /\ arg1 > 0 /\ -2+arg3 >= 0), cost: arg3

Applied deletion
Removed the following rules: 19 21

Applied chaining
First rule:
f262_0_main_InvokeMethod -> f194_0_height_NONNULL : arg2'=arg2P7, arg1'=arg1P7, arg3'=arg3P7, (arg1P7 > 0 /\ 1-arg1+arg2P7 <= 0 /\ 1+arg2P7 > 0 /\ arg1P7-arg1 <= 0), cost: 1
Second rule:
f194_0_height_NONNULL -> f194_0_height_NONNULL : arg2'=arg2P8, arg1'=arg1P8, arg3'=arg3P8, (1-arg2+arg2P8 <= 0 /\ 1+arg2P8 > 0 /\ 2-arg1+arg1P8 <= 0 /\ -arg2+arg1P8 <= 0 /\ 3-arg1+arg2P8 <= 0 /\ arg1P8 > 0), cost: 1
New rule:
f262_0_main_InvokeMethod -> f194_0_height_NONNULL : arg2'=arg2P8, arg1'=arg1P8, arg3'=arg3P8, (1+arg2P8 > 0 /\ 2-arg1+arg1P8 <= 0 /\ 3-arg1+arg2P8 <= 0 /\ arg1P8 > 0), cost: 2

Applied chaining
First rule:
f262_0_main_InvokeMethod -> f194_0_height_NONNULL : arg2'=arg2P7, arg1'=arg1P7, arg3'=arg3P7, (arg1P7 > 0 /\ 1-arg1+arg2P7 <= 0 /\ 1+arg2P7 > 0 /\ arg1P7-arg1 <= 0), cost: 1
Second rule:
f194_0_height_NONNULL -> f194_0_height_NONNULL : arg2'=arg2P9, arg1'=arg1P9, arg3'=arg3P9, (1+arg2P9 > 0 /\ 2-arg1+arg1P9 <= 0 /\ 1+arg2 > 0 /\ 3-arg1+arg2P9 <= 0 /\ arg1P9 > 0), cost: 1
New rule:
f262_0_main_InvokeMethod -> f194_0_height_NONNULL : arg2'=arg2P9, arg1'=arg1P9, arg3'=arg3P9, (1+arg2P9 > 0 /\ 2-arg1+arg1P9 <= 0 /\ 3-arg1+arg2P9 <= 0 /\ arg1P9 > 0), cost: 2

Applied deletion
Removed the following rules: 17 18

Chained accelerated rules with incoming rules
Start location: __init
   0: f1_0_main_New -> f262_0_main_InvokeMethod : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, -2+arg1P0 > 0, cost: 1
   1: f1_0_main_New -> f262_0_main_InvokeMethod : arg2'=arg2P1, arg1'=arg1P1, arg3'=arg3P1, -1+arg1P1 > 0, cost: 1
  11: f1_0_main_New -> f76_0__init__LE : arg2'=5, arg1'=5, arg3'=5, TRUE, cost: 1
  22: f1_0_main_New -> f76_0__init__LE : arg2'=1, arg1'=1, arg3'=1, (0 >= 0 /\ 3 >= 0 /\ 5 > 0), cost: 5
  16: f262_0_main_InvokeMethod -> f194_0_height_NONNULL : arg2'=arg2P7, arg1'=arg1P7, arg3'=arg3P7, (arg1P7 > 0 /\ 1-arg1+arg2P7 <= 0 /\ 1+arg2P7 > 0 /\ arg1P7-arg1 <= 0), cost: 1
  24: f262_0_main_InvokeMethod -> f194_0_height_NONNULL : arg2'=arg2P8, arg1'=arg1P8, arg3'=arg3P8, (1+arg2P8 > 0 /\ 2-arg1+arg1P8 <= 0 /\ 3-arg1+arg2P8 <= 0 /\ arg1P8 > 0), cost: 2
  25: f262_0_main_InvokeMethod -> f194_0_height_NONNULL : arg2'=arg2P9, arg1'=arg1P9, arg3'=arg3P9, (1+arg2P9 > 0 /\ 2-arg1+arg1P9 <= 0 /\ 3-arg1+arg2P9 <= 0 /\ arg1P9 > 0), cost: 2
  13: f76_0__init__LE -> f288_0__init__InvokeMethod : arg2'=arg2P4, arg3'=-1+arg2, (-4+arg2P4 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ arg2-arg3 == 0), cost: 1
  14: f76_0__init__LE -> f288_0__init__InvokeMethod : arg2'=arg2P5, arg3'=-1+arg2, (-3+arg2P5 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ arg2-arg3 == 0), cost: 1
  15: f288_0__init__InvokeMethod -> f76_0__init__LE : arg2'=arg3, arg1'=arg3, (-2+arg2 > 0 /\ arg1 > 0 /\ arg3 > 0), cost: 1
  23: f288_0__init__InvokeMethod -> f76_0__init__LE : arg2'=1, arg1'=1, arg3'=1, (-2+arg2 > 0 /\ arg1 > 0 /\ -2+arg3 >= 0), cost: arg3
  10: __init -> f1_0_main_New : arg2'=arg2P10, arg1'=arg1P10, arg3'=arg3P10, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
  11: f1_0_main_New -> f76_0__init__LE : arg2'=5, arg1'=5, arg3'=5, TRUE, cost: 1
  22: f1_0_main_New -> f76_0__init__LE : arg2'=1, arg1'=1, arg3'=1, (0 >= 0 /\ 3 >= 0 /\ 5 > 0), cost: 5
  13: f76_0__init__LE -> f288_0__init__InvokeMethod : arg2'=arg2P4, arg3'=-1+arg2, (-4+arg2P4 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ arg2-arg3 == 0), cost: 1
  14: f76_0__init__LE -> f288_0__init__InvokeMethod : arg2'=arg2P5, arg3'=-1+arg2, (-3+arg2P5 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ arg2-arg3 == 0), cost: 1
  15: f288_0__init__InvokeMethod -> f76_0__init__LE : arg2'=arg3, arg1'=arg3, (-2+arg2 > 0 /\ arg1 > 0 /\ arg3 > 0), cost: 1
  23: f288_0__init__InvokeMethod -> f76_0__init__LE : arg2'=1, arg1'=1, arg3'=1, (-2+arg2 > 0 /\ arg1 > 0 /\ -2+arg3 >= 0), cost: arg3
  10: __init -> f1_0_main_New : arg2'=arg2P10, arg1'=arg1P10, arg3'=arg3P10, TRUE, cost: 1


Eliminating location f1_0_main_New by chaining:

Applied chaining
First rule:
__init -> f1_0_main_New : arg2'=arg2P10, arg1'=arg1P10, arg3'=arg3P10, TRUE, cost: 1
Second rule:
f1_0_main_New -> f76_0__init__LE : arg2'=5, arg1'=5, arg3'=5, TRUE, cost: 1
New rule:
__init -> f76_0__init__LE : arg2'=5, arg1'=5, arg3'=5, TRUE, cost: 2

Applied chaining
First rule:
__init -> f1_0_main_New : arg2'=arg2P10, arg1'=arg1P10, arg3'=arg3P10, TRUE, cost: 1
Second rule:
f1_0_main_New -> f76_0__init__LE : arg2'=1, arg1'=1, arg3'=1, (0 >= 0 /\ 3 >= 0 /\ 5 > 0), cost: 5
New rule:
__init -> f76_0__init__LE : arg2'=1, arg1'=1, arg3'=1, (0 >= 0 /\ 3 >= 0 /\ 5 > 0), cost: 6

Applied deletion
Removed the following rules: 10 11 22

Eliminating location f288_0__init__InvokeMethod by chaining:

Applied chaining
First rule:
f76_0__init__LE -> f288_0__init__InvokeMethod : arg2'=arg2P4, arg3'=-1+arg2, (-4+arg2P4 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ arg2-arg3 == 0), cost: 1
Second rule:
f288_0__init__InvokeMethod -> f76_0__init__LE : arg2'=arg3, arg1'=arg3, (-2+arg2 > 0 /\ arg1 > 0 /\ arg3 > 0), cost: 1
New rule:
f76_0__init__LE -> f76_0__init__LE : arg2'=-1+arg2, arg1'=-1+arg2, arg3'=-1+arg2, (-2+arg2P4 > 0 /\ -4+arg2P4 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ arg2-arg3 == 0), cost: 2

Applied simplification
Original rule:
f76_0__init__LE -> f76_0__init__LE : arg2'=-1+arg2, arg1'=-1+arg2, arg3'=-1+arg2, (-2+arg2P4 > 0 /\ -4+arg2P4 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ arg2-arg3 == 0), cost: 2
New rule:
f76_0__init__LE -> f76_0__init__LE : arg2'=-1+arg2, arg1'=-1+arg2, arg3'=-1+arg2, (-4+arg2P4 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ arg2-arg3 == 0), cost: 2

Applied chaining
First rule:
f76_0__init__LE -> f288_0__init__InvokeMethod : arg2'=arg2P4, arg3'=-1+arg2, (-4+arg2P4 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ arg2-arg3 == 0), cost: 1
Second rule:
f288_0__init__InvokeMethod -> f76_0__init__LE : arg2'=1, arg1'=1, arg3'=1, (-2+arg2 > 0 /\ arg1 > 0 /\ -2+arg3 >= 0), cost: arg3
New rule:
f76_0__init__LE -> f76_0__init__LE : arg2'=1, arg1'=1, arg3'=1, (-2+arg2P4 > 0 /\ -4+arg2P4 > 0 /\ -3+arg2 >= 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ arg2-arg3 == 0), cost: arg2

Applied simplification
Original rule:
f76_0__init__LE -> f76_0__init__LE : arg2'=1, arg1'=1, arg3'=1, (-2+arg2P4 > 0 /\ -4+arg2P4 > 0 /\ -3+arg2 >= 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ arg2-arg3 == 0), cost: arg2
New rule:
f76_0__init__LE -> f76_0__init__LE : arg2'=1, arg1'=1, arg3'=1, (-4+arg2P4 > 0 /\ -3+arg2 >= 0 /\ arg1 > 0 /\ arg2-arg3 == 0), cost: arg2

Applied chaining
First rule:
f76_0__init__LE -> f288_0__init__InvokeMethod : arg2'=arg2P5, arg3'=-1+arg2, (-3+arg2P5 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ arg2-arg3 == 0), cost: 1
Second rule:
f288_0__init__InvokeMethod -> f76_0__init__LE : arg2'=arg3, arg1'=arg3, (-2+arg2 > 0 /\ arg1 > 0 /\ arg3 > 0), cost: 1
New rule:
f76_0__init__LE -> f76_0__init__LE : arg2'=-1+arg2, arg1'=-1+arg2, arg3'=-1+arg2, (-2+arg2P5 > 0 /\ -3+arg2P5 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ arg2-arg3 == 0), cost: 2

Applied simplification
Original rule:
f76_0__init__LE -> f76_0__init__LE : arg2'=-1+arg2, arg1'=-1+arg2, arg3'=-1+arg2, (-2+arg2P5 > 0 /\ -3+arg2P5 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ arg2-arg3 == 0), cost: 2
New rule:
f76_0__init__LE -> f76_0__init__LE : arg2'=-1+arg2, arg1'=-1+arg2, arg3'=-1+arg2, (-3+arg2P5 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ arg2-arg3 == 0), cost: 2

Applied chaining
First rule:
f76_0__init__LE -> f288_0__init__InvokeMethod : arg2'=arg2P5, arg3'=-1+arg2, (-3+arg2P5 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ arg2-arg3 == 0), cost: 1
Second rule:
f288_0__init__InvokeMethod -> f76_0__init__LE : arg2'=1, arg1'=1, arg3'=1, (-2+arg2 > 0 /\ arg1 > 0 /\ -2+arg3 >= 0), cost: arg3
New rule:
f76_0__init__LE -> f76_0__init__LE : arg2'=1, arg1'=1, arg3'=1, (-2+arg2P5 > 0 /\ -3+arg2P5 > 0 /\ -3+arg2 >= 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ arg2-arg3 == 0), cost: arg2

Applied simplification
Original rule:
f76_0__init__LE -> f76_0__init__LE : arg2'=1, arg1'=1, arg3'=1, (-2+arg2P5 > 0 /\ -3+arg2P5 > 0 /\ -3+arg2 >= 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ arg2-arg3 == 0), cost: arg2
New rule:
f76_0__init__LE -> f76_0__init__LE : arg2'=1, arg1'=1, arg3'=1, (-3+arg2P5 > 0 /\ -3+arg2 >= 0 /\ arg1 > 0 /\ arg2-arg3 == 0), cost: arg2

Applied deletion
Removed the following rules: 13 14 15 23

Eliminated locations on tree-shaped paths
Start location: __init
  28: f76_0__init__LE -> f76_0__init__LE : arg2'=-1+arg2, arg1'=-1+arg2, arg3'=-1+arg2, (-4+arg2P4 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ arg2-arg3 == 0), cost: 2
  29: f76_0__init__LE -> f76_0__init__LE : arg2'=1, arg1'=1, arg3'=1, (-4+arg2P4 > 0 /\ -3+arg2 >= 0 /\ arg1 > 0 /\ arg2-arg3 == 0), cost: arg2
  30: f76_0__init__LE -> f76_0__init__LE : arg2'=-1+arg2, arg1'=-1+arg2, arg3'=-1+arg2, (-3+arg2P5 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ arg2-arg3 == 0), cost: 2
  31: f76_0__init__LE -> f76_0__init__LE : arg2'=1, arg1'=1, arg3'=1, (-3+arg2P5 > 0 /\ -3+arg2 >= 0 /\ arg1 > 0 /\ arg2-arg3 == 0), cost: arg2
  26: __init -> f76_0__init__LE : arg2'=5, arg1'=5, arg3'=5, TRUE, cost: 2
  27: __init -> f76_0__init__LE : arg2'=1, arg1'=1, arg3'=1, (0 >= 0 /\ 3 >= 0 /\ 5 > 0), cost: 6


Applied simplification
Original rule:
f76_0__init__LE -> f76_0__init__LE : arg2'=-1+arg2, arg1'=-1+arg2, arg3'=-1+arg2, (-4+arg2P4 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ arg2-arg3 == 0), cost: 2
New rule:
f76_0__init__LE -> f76_0__init__LE : arg2'=-1+arg2, arg1'=-1+arg2, arg3'=-1+arg2, (arg1 > 0 /\ -1+arg2 > 0 /\ arg2-arg3 == 0), cost: 2

Applied simplification
Original rule:
f76_0__init__LE -> f76_0__init__LE : arg2'=1, arg1'=1, arg3'=1, (-4+arg2P4 > 0 /\ -3+arg2 >= 0 /\ arg1 > 0 /\ arg2-arg3 == 0), cost: arg2
New rule:
f76_0__init__LE -> f76_0__init__LE : arg2'=1, arg1'=1, arg3'=1, (-3+arg2 >= 0 /\ arg1 > 0 /\ arg2-arg3 == 0), cost: arg2

Applied simplification
Original rule:
f76_0__init__LE -> f76_0__init__LE : arg2'=-1+arg2, arg1'=-1+arg2, arg3'=-1+arg2, (-3+arg2P5 > 0 /\ arg1 > 0 /\ -1+arg2 > 0 /\ arg2-arg3 == 0), cost: 2
New rule:
f76_0__init__LE -> f76_0__init__LE : arg2'=-1+arg2, arg1'=-1+arg2, arg3'=-1+arg2, (arg1 > 0 /\ -1+arg2 > 0 /\ arg2-arg3 == 0), cost: 2

Applied simplification
Original rule:
f76_0__init__LE -> f76_0__init__LE : arg2'=1, arg1'=1, arg3'=1, (-3+arg2P5 > 0 /\ -3+arg2 >= 0 /\ arg1 > 0 /\ arg2-arg3 == 0), cost: arg2
New rule:
f76_0__init__LE -> f76_0__init__LE : arg2'=1, arg1'=1, arg3'=1, (-3+arg2 >= 0 /\ arg1 > 0 /\ arg2-arg3 == 0), cost: arg2

Simplified simple loops
Start location: __init
  32: f76_0__init__LE -> f76_0__init__LE : arg2'=-1+arg2, arg1'=-1+arg2, arg3'=-1+arg2, (arg1 > 0 /\ -1+arg2 > 0 /\ arg2-arg3 == 0), cost: 2
  33: f76_0__init__LE -> f76_0__init__LE : arg2'=1, arg1'=1, arg3'=1, (-3+arg2 >= 0 /\ arg1 > 0 /\ arg2-arg3 == 0), cost: arg2
  26: __init -> f76_0__init__LE : arg2'=5, arg1'=5, arg3'=5, TRUE, cost: 2
  27: __init -> f76_0__init__LE : arg2'=1, arg1'=1, arg3'=1, (0 >= 0 /\ 3 >= 0 /\ 5 > 0), cost: 6


Applied acceleration
Original rule:
f76_0__init__LE -> f76_0__init__LE : arg2'=-1+arg2, arg1'=-1+arg2, arg3'=-1+arg2, (arg1 > 0 /\ -1+arg2 > 0 /\ arg2-arg3 == 0), cost: 2
New rule:
f76_0__init__LE -> f76_0__init__LE : arg2'=-n4+arg2, arg1'=-n4+arg2, arg3'=-n4+arg2, (-n4+arg2 > 0 /\ 1-n4+arg2 > 0 /\ arg1 > 0 /\ arg2-arg3 >= 0 /\ -1+n4 >= 0 /\ -arg2+arg3 >= 0), cost: 2*n4
Sub-proof via acceration calculus written to file:///tmp/tmpnam_cBfmNN.txt

Applied instantiation
Original rule:
f76_0__init__LE -> f76_0__init__LE : arg2'=-n4+arg2, arg1'=-n4+arg2, arg3'=-n4+arg2, (-n4+arg2 > 0 /\ 1-n4+arg2 > 0 /\ arg1 > 0 /\ arg2-arg3 >= 0 /\ -1+n4 >= 0 /\ -arg2+arg3 >= 0), cost: 2*n4
New rule:
f76_0__init__LE -> f76_0__init__LE : arg2'=0, arg1'=0, arg3'=0, (0 > 0 /\ 1 > 0 /\ arg1 > 0 /\ -1+arg2 >= 0 /\ arg2-arg3 >= 0 /\ -arg2+arg3 >= 0), cost: 2*arg2

Applied instantiation
Original rule:
f76_0__init__LE -> f76_0__init__LE : arg2'=-n4+arg2, arg1'=-n4+arg2, arg3'=-n4+arg2, (-n4+arg2 > 0 /\ 1-n4+arg2 > 0 /\ arg1 > 0 /\ arg2-arg3 >= 0 /\ -1+n4 >= 0 /\ -arg2+arg3 >= 0), cost: 2*n4
New rule:
f76_0__init__LE -> f76_0__init__LE : arg2'=1, arg1'=1, arg3'=1, (1 > 0 /\ -2+arg2 >= 0 /\ 2 > 0 /\ arg1 > 0 /\ arg2-arg3 >= 0 /\ -arg2+arg3 >= 0), cost: -2+2*arg2

Applied simplification
Original rule:
f76_0__init__LE -> f76_0__init__LE : arg2'=1, arg1'=1, arg3'=1, (1 > 0 /\ -2+arg2 >= 0 /\ 2 > 0 /\ arg1 > 0 /\ arg2-arg3 >= 0 /\ -arg2+arg3 >= 0), cost: -2+2*arg2
New rule:
f76_0__init__LE -> f76_0__init__LE : arg2'=1, arg1'=1, arg3'=1, (-2+arg2 >= 0 /\ arg1 > 0 /\ arg2-arg3 >= 0 /\ -arg2+arg3 >= 0), cost: -2+2*arg2

Applied deletion
Removed the following rules: 32

Accelerated simple loops
Start location: __init
  33: f76_0__init__LE -> f76_0__init__LE : arg2'=1, arg1'=1, arg3'=1, (-3+arg2 >= 0 /\ arg1 > 0 /\ arg2-arg3 == 0), cost: arg2
  34: f76_0__init__LE -> f76_0__init__LE : arg2'=0, arg1'=0, arg3'=0, (0 > 0 /\ 1 > 0 /\ arg1 > 0 /\ -1+arg2 >= 0 /\ arg2-arg3 >= 0 /\ -arg2+arg3 >= 0), cost: 2*arg2
  36: f76_0__init__LE -> f76_0__init__LE : arg2'=1, arg1'=1, arg3'=1, (-2+arg2 >= 0 /\ arg1 > 0 /\ arg2-arg3 >= 0 /\ -arg2+arg3 >= 0), cost: -2+2*arg2
  26: __init -> f76_0__init__LE : arg2'=5, arg1'=5, arg3'=5, TRUE, cost: 2
  27: __init -> f76_0__init__LE : arg2'=1, arg1'=1, arg3'=1, (0 >= 0 /\ 3 >= 0 /\ 5 > 0), cost: 6


Applied chaining
First rule:
__init -> f76_0__init__LE : arg2'=5, arg1'=5, arg3'=5, TRUE, cost: 2
Second rule:
f76_0__init__LE -> f76_0__init__LE : arg2'=1, arg1'=1, arg3'=1, (-3+arg2 >= 0 /\ arg1 > 0 /\ arg2-arg3 == 0), cost: arg2
New rule:
__init -> f76_0__init__LE : arg2'=1, arg1'=1, arg3'=1, (0 == 0 /\ 2 >= 0 /\ 5 > 0), cost: 7

Applied chaining
First rule:
__init -> f76_0__init__LE : arg2'=5, arg1'=5, arg3'=5, TRUE, cost: 2
Second rule:
f76_0__init__LE -> f76_0__init__LE : arg2'=1, arg1'=1, arg3'=1, (-2+arg2 >= 0 /\ arg1 > 0 /\ arg2-arg3 >= 0 /\ -arg2+arg3 >= 0), cost: -2+2*arg2
New rule:
__init -> f76_0__init__LE : arg2'=1, arg1'=1, arg3'=1, (0 >= 0 /\ 3 >= 0 /\ 5 > 0), cost: 10

Applied deletion
Removed the following rules: 33 34 36

Chained accelerated rules with incoming rules
Start location: __init
  26: __init -> f76_0__init__LE : arg2'=5, arg1'=5, arg3'=5, TRUE, cost: 2
  27: __init -> f76_0__init__LE : arg2'=1, arg1'=1, arg3'=1, (0 >= 0 /\ 3 >= 0 /\ 5 > 0), cost: 6
  37: __init -> f76_0__init__LE : arg2'=1, arg1'=1, arg3'=1, (0 == 0 /\ 2 >= 0 /\ 5 > 0), cost: 7
  38: __init -> f76_0__init__LE : arg2'=1, arg1'=1, arg3'=1, (0 >= 0 /\ 3 >= 0 /\ 5 > 0), cost: 10


Removed unreachable locations and irrelevant leafs
Start location: __init
  <empty>


Computing asymptotic complexity

Proved the following lower bound
Complexity:  Unknown
Cpx degree: ?

Solved cost: 0
Rule cost:   0

