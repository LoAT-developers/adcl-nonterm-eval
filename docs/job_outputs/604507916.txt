NO

Initial ITS

Start location: __init
Program variables: arg1 arg2
   0: f1_0_main_Load -> f62_0_loop_EQ : arg1'=arg1p1, arg2'=arg2p1, (28 > 0 /\ 28-arg1p1+arg2 == 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 1
   1: f62_0_loop_EQ -> f62_0_loop_EQ : arg1'=arg1p2, arg2'=arg2p2, (-35+arg1 > 0 /\ -arg1p2 == 0), cost: 1
   2: f62_0_loop_EQ -> f62_0_loop_EQ : arg1'=arg1p3, arg2'=arg2p3, (-31+arg1 < 0 /\ -1-arg1p3+arg1 == 0 /\ -36+arg1 < 0 /\ arg1 > 0), cost: 1
   3: f62_0_loop_EQ -> f62_0_loop_EQ : arg1'=arg1p4, arg2'=arg2p4, (35-arg1p4 == 0 /\ -30+arg1 > 0 /\ -36+arg1 < 0), cost: 1
   4: __init -> f1_0_main_Load : arg1'=arg1p5, arg2'=arg2p5, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2
   1: f62_0_loop_EQ -> f62_0_loop_EQ : arg1'=arg1p2, arg2'=arg2p2, (-35+arg1 > 0 /\ -arg1p2 == 0), cost: 1
   2: f62_0_loop_EQ -> f62_0_loop_EQ : arg1'=arg1p3, arg2'=arg2p3, (-31+arg1 < 0 /\ -1-arg1p3+arg1 == 0 /\ -36+arg1 < 0 /\ arg1 > 0), cost: 1
   3: f62_0_loop_EQ -> f62_0_loop_EQ : arg1'=arg1p4, arg2'=arg2p4, (35-arg1p4 == 0 /\ -30+arg1 > 0 /\ -36+arg1 < 0), cost: 1
   5: __init -> f62_0_loop_EQ : arg1'=arg1p1, arg2'=arg2p1, (28 > 0 /\ 28+arg2p5-arg1p1 == 0 /\ arg1p5 > 0 /\ 1+arg2p5 > 0), cost: 1

	Eliminating location f1_0_main_Load by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_Load : arg1'=arg1p5, arg2'=arg2p5, T, cost: 1
	Second rule:
	f1_0_main_Load -> f62_0_loop_EQ : arg1'=arg1p1, arg2'=arg2p1, (28 > 0 /\ 28-arg1p1+arg2 == 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 1
	New rule:
	__init -> f62_0_loop_EQ : arg1'=arg1p1, arg2'=arg2p1, (28 > 0 /\ 28+arg2p5-arg1p1 == 0 /\ arg1p5 > 0 /\ 1+arg2p5 > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 4

Simplified Transitions

Start location: __init
Program variables: arg1 arg2
   6: f62_0_loop_EQ -> f62_0_loop_EQ : arg1'=0, arg2'=arg2p2, -35+arg1 > 0, cost: 1
   7: f62_0_loop_EQ -> f62_0_loop_EQ : arg1'=-1+arg1, arg2'=arg2p3, (-31+arg1 < 0 /\ -36+arg1 < 0 /\ arg1 > 0), cost: 1
   8: f62_0_loop_EQ -> f62_0_loop_EQ : arg1'=35, arg2'=arg2p4, (-30+arg1 > 0 /\ -36+arg1 < 0), cost: 1
   9: __init -> f62_0_loop_EQ : arg1'=28+arg2p5, arg2'=arg2p1, (1+arg2p5 > 0), cost: 1

	Propagated Equalities

	Original rule:
	f62_0_loop_EQ -> f62_0_loop_EQ : arg1'=arg1p2, arg2'=arg2p2, (-35+arg1 > 0 /\ -arg1p2 == 0), cost: 1
	New rule:
	f62_0_loop_EQ -> f62_0_loop_EQ : arg1'=0, arg2'=arg2p2, (0 == 0 /\ -35+arg1 > 0), cost: 1
	
		propagated equality arg1p2 = 0
		
	Simplified Guard

	Original rule:
	f62_0_loop_EQ -> f62_0_loop_EQ : arg1'=0, arg2'=arg2p2, (0 == 0 /\ -35+arg1 > 0), cost: 1
	New rule:
	f62_0_loop_EQ -> f62_0_loop_EQ : arg1'=0, arg2'=arg2p2, -35+arg1 > 0, cost: 1
	
	Propagated Equalities

	Original rule:
	f62_0_loop_EQ -> f62_0_loop_EQ : arg1'=arg1p3, arg2'=arg2p3, (-31+arg1 < 0 /\ -1-arg1p3+arg1 == 0 /\ -36+arg1 < 0 /\ arg1 > 0), cost: 1
	New rule:
	f62_0_loop_EQ -> f62_0_loop_EQ : arg1'=-1+arg1, arg2'=arg2p3, (0 == 0 /\ -31+arg1 < 0 /\ -36+arg1 < 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg1p3 = -1+arg1
		
	Simplified Guard

	Original rule:
	f62_0_loop_EQ -> f62_0_loop_EQ : arg1'=-1+arg1, arg2'=arg2p3, (0 == 0 /\ -31+arg1 < 0 /\ -36+arg1 < 0 /\ arg1 > 0), cost: 1
	New rule:
	f62_0_loop_EQ -> f62_0_loop_EQ : arg1'=-1+arg1, arg2'=arg2p3, (-31+arg1 < 0 /\ -36+arg1 < 0 /\ arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f62_0_loop_EQ -> f62_0_loop_EQ : arg1'=arg1p4, arg2'=arg2p4, (35-arg1p4 == 0 /\ -30+arg1 > 0 /\ -36+arg1 < 0), cost: 1
	New rule:
	f62_0_loop_EQ -> f62_0_loop_EQ : arg1'=35, arg2'=arg2p4, (0 == 0 /\ -30+arg1 > 0 /\ -36+arg1 < 0), cost: 1
	
		propagated equality arg1p4 = 35
		
	Simplified Guard

	Original rule:
	f62_0_loop_EQ -> f62_0_loop_EQ : arg1'=35, arg2'=arg2p4, (0 == 0 /\ -30+arg1 > 0 /\ -36+arg1 < 0), cost: 1
	New rule:
	f62_0_loop_EQ -> f62_0_loop_EQ : arg1'=35, arg2'=arg2p4, (-30+arg1 > 0 /\ -36+arg1 < 0), cost: 1
	
	Propagated Equalities

	Original rule:
	__init -> f62_0_loop_EQ : arg1'=arg1p1, arg2'=arg2p1, (28 > 0 /\ 28+arg2p5-arg1p1 == 0 /\ arg1p5 > 0 /\ 1+arg2p5 > 0), cost: 1
	New rule:
	__init -> f62_0_loop_EQ : arg1'=28+arg2p5, arg2'=arg2p1, (0 == 0 /\ 28 > 0 /\ arg1p5 > 0 /\ 1+arg2p5 > 0), cost: 1
	
		propagated equality arg1p1 = 28+arg2p5
		
	Simplified Guard

	Original rule:
	__init -> f62_0_loop_EQ : arg1'=28+arg2p5, arg2'=arg2p1, (0 == 0 /\ 28 > 0 /\ arg1p5 > 0 /\ 1+arg2p5 > 0), cost: 1
	New rule:
	__init -> f62_0_loop_EQ : arg1'=28+arg2p5, arg2'=arg2p1, (arg1p5 > 0 /\ 1+arg2p5 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	__init -> f62_0_loop_EQ : arg1'=28+arg2p5, arg2'=arg2p1, (arg1p5 > 0 /\ 1+arg2p5 > 0), cost: 1
	New rule:
	__init -> f62_0_loop_EQ : arg1'=28+arg2p5, arg2'=arg2p1, (1+arg2p5 > 0), cost: 1

Step with 9

	Trace

	9[(1+arg2p5 > 0)]
	
	Blocked

	[{}, {}]

Step with 6

	Trace

	9[(1+arg2p5 > 0)], 6[(-35+arg1 > 0)]
	
	Blocked

	[{}, {}, {}]

Acceleration Failed

marked recursive suffix as redundant

Backtrack

	Trace

	9[(1+arg2p5 > 0)]
	
	Blocked

	[{}, {6[T]}]

Step with 7

	Trace

	9[(1+arg2p5 > 0)], 7[(-31+arg1 < 0 /\ -36+arg1 < 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {6[T]}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2
   6: f62_0_loop_EQ -> f62_0_loop_EQ : arg1'=0, arg2'=arg2p2, -35+arg1 > 0, cost: 1
   7: f62_0_loop_EQ -> f62_0_loop_EQ : arg1'=-1+arg1, arg2'=arg2p3, (-31+arg1 < 0 /\ -36+arg1 < 0 /\ arg1 > 0), cost: 1
   8: f62_0_loop_EQ -> f62_0_loop_EQ : arg1'=35, arg2'=arg2p4, (-30+arg1 > 0 /\ -36+arg1 < 0), cost: 1
  10: f62_0_loop_EQ -> f62_0_loop_EQ : arg1'=-n+arg1, arg2'=arg2p3, (31-arg1 > 0 /\ 1-n+arg1 > 0 /\ 36-arg1 > 0 /\ -1+n >= 0), cost: 1
   9: __init -> f62_0_loop_EQ : arg1'=28+arg2p5, arg2'=arg2p1, (1+arg2p5 > 0), cost: 1

	Loop Acceleration

	Original rule:
	f62_0_loop_EQ -> f62_0_loop_EQ : arg1'=-1+arg1, arg2'=arg2p3, (-31+arg1 < 0 /\ -36+arg1 < 0 /\ arg1 > 0), cost: 1
	New rule:
	f62_0_loop_EQ -> f62_0_loop_EQ : arg1'=-n+arg1, arg2'=arg2p3, (31-arg1 > 0 /\ 1-n+arg1 > 0 /\ 36-arg1 > 0 /\ -1+n >= 0), cost: 1

		31-arg1 > 0 [0]: monotonic increase yields 31-arg1 > 0
		
		36-arg1 > 0 [0]: monotonic increase yields 36-arg1 > 0, dependencies: 31-arg1 > 0
		
		arg1 > 0 [0]: montonic decrease yields 1-n+arg1 > 0
		
		arg1 > 0 [1]: eventual increase yields (1 <= 0 /\ arg1 > 0)
		
		Replacement map: {31-arg1 > 0 -> 31-arg1 > 0, 36-arg1 > 0 -> 36-arg1 > 0, arg1 > 0 -> 1-n+arg1 > 0}

	Trace

	9[(1+arg2p5 > 0)], 10[(31-arg1 > 0 /\ 1-n+arg1 > 0 /\ 36-arg1 > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {6[T]}, {7[T], 10[T]}]

Backtrack

	Trace

	9[(1+arg2p5 > 0)]
	
	Blocked

	[{}, {6[T], 10[T]}]

Step with 7

	Trace

	9[(1+arg2p5 > 0)], 7[(-31+arg1 < 0 /\ -36+arg1 < 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {6[T], 10[T]}, {}]

Covered

	Trace

	9[(1+arg2p5 > 0)]
	
	Blocked

	[{}, {6[T], 7[T], 10[T]}]

Step with 8

	Trace

	9[(1+arg2p5 > 0)], 8[(-30+arg1 > 0 /\ -36+arg1 < 0)]
	
	Blocked

	[{}, {6[T], 7[T], 10[T]}, {}]

Nonterm

Start location: __init
Program variables: arg1 arg2
   6: f62_0_loop_EQ -> f62_0_loop_EQ : arg1'=0, arg2'=arg2p2, -35+arg1 > 0, cost: 1
   7: f62_0_loop_EQ -> f62_0_loop_EQ : arg1'=-1+arg1, arg2'=arg2p3, (-31+arg1 < 0 /\ -36+arg1 < 0 /\ arg1 > 0), cost: 1
   8: f62_0_loop_EQ -> f62_0_loop_EQ : arg1'=35, arg2'=arg2p4, (-30+arg1 > 0 /\ -36+arg1 < 0), cost: 1
  10: f62_0_loop_EQ -> f62_0_loop_EQ : arg1'=-n+arg1, arg2'=arg2p3, (31-arg1 > 0 /\ 1-n+arg1 > 0 /\ 36-arg1 > 0 /\ -1+n >= 0), cost: 1
  11: f62_0_loop_EQ -> LoAT_sink : (-30+arg1 > 0 /\ -1+n2 >= 0 /\ 36-arg1 > 0), cost: NONTERM
   9: __init -> f62_0_loop_EQ : arg1'=28+arg2p5, arg2'=arg2p1, (1+arg2p5 > 0), cost: 1

	Certificate of Non-Termination

	Original rule:
	f62_0_loop_EQ -> f62_0_loop_EQ : arg1'=35, arg2'=arg2p4, (-30+arg1 > 0 /\ -36+arg1 < 0), cost: 1
	New rule:
	f62_0_loop_EQ -> LoAT_sink : (-30+arg1 > 0 /\ -1+n2 >= 0 /\ 36-arg1 > 0), cost: NONTERM

		-30+arg1 > 0 [0]: monotonic increase yields -30+arg1 > 0
		
		36-arg1 > 0 [0]: monotonic increase yields 36-arg1 > 0
		
		Replacement map: {-30+arg1 > 0 -> -30+arg1 > 0, 36-arg1 > 0 -> 36-arg1 > 0}

Step with 11

	Trace

	9[(1+arg2p5 > 0)], 11[(-30+arg1 > 0 /\ -1+n2 >= 0 /\ 36-arg1 > 0)]
	
	Blocked

	[{}, {6[T], 7[T], 10[T]}, {11[T]}]

Refute

	Counterexample

	[ arg1=31 arg2=0 ] 9 [ arg1=arg1 arg2=arg2 ] 11
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
