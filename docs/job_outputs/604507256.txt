unknown

Initial ITS

Start location: l4
Program variables: x^0 y^0
   0: l0 -> l1 : x^0'=x^post1, y^0'=y^post1, (1+x^post1-x^0 == 0 /\ y^0 <= 0 /\ -1+y^post1-y^0 == 0), cost: 1
   1: l0 -> l2 : x^0'=x^post2, y^0'=y^post2, (1-y^0 <= 0 /\ 1+y^post2-y^0 == 0 /\ x^0-x^post2 == 0), cost: 1
   4: l1 -> l0 : x^0'=x^post5, y^0'=y^post5, (1-x^0 <= 0 /\ y^post5-x^0 == 0 /\ x^0-x^post5 == 0), cost: 1
   2: l2 -> l0 : x^0'=x^post3, y^0'=y^post3, (y^0-y^post3 == 0 /\ x^0-x^post3 == 0), cost: 1
   3: l3 -> l1 : x^0'=x^post4, y^0'=y^post4, (-y^post4+y^0 == 0 /\ -x^post4+x^0 == 0), cost: 1
   5: l4 -> l3 : x^0'=x^post6, y^0'=y^post6, (x^0-x^post6 == 0 /\ y^0-y^post6 == 0), cost: 1

Chained Linear Paths

Start location: l4
Program variables: x^0 y^0
   0: l0 -> l1 : x^0'=x^post1, y^0'=y^post1, (1+x^post1-x^0 == 0 /\ y^0 <= 0 /\ -1+y^post1-y^0 == 0), cost: 1
   7: l0 -> l0 : x^0'=x^post3, y^0'=y^post3, (-x^post3+x^post2 == 0 /\ 1-y^0 <= 0 /\ y^post2-y^post3 == 0 /\ 1+y^post2-y^0 == 0 /\ x^0-x^post2 == 0), cost: 1
   4: l1 -> l0 : x^0'=x^post5, y^0'=y^post5, (1-x^0 <= 0 /\ y^post5-x^0 == 0 /\ x^0-x^post5 == 0), cost: 1
   6: l4 -> l1 : x^0'=x^post4, y^0'=y^post4, (x^0-x^post6 == 0 /\ -x^post4+x^post6 == 0 /\ y^0-y^post6 == 0 /\ -y^post4+y^post6 == 0), cost: 1

	Eliminating location l3 by chaining:

	Applied chaining

	First rule:
	l4 -> l3 : x^0'=x^post6, y^0'=y^post6, (x^0-x^post6 == 0 /\ y^0-y^post6 == 0), cost: 1
	Second rule:
	l3 -> l1 : x^0'=x^post4, y^0'=y^post4, (-y^post4+y^0 == 0 /\ -x^post4+x^0 == 0), cost: 1
	New rule:
	l4 -> l1 : x^0'=x^post4, y^0'=y^post4, (x^0-x^post6 == 0 /\ -x^post4+x^post6 == 0 /\ y^0-y^post6 == 0 /\ -y^post4+y^post6 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 3 5
	
	Eliminating location l2 by chaining:

	Applied chaining

	First rule:
	l0 -> l2 : x^0'=x^post2, y^0'=y^post2, (1-y^0 <= 0 /\ 1+y^post2-y^0 == 0 /\ x^0-x^post2 == 0), cost: 1
	Second rule:
	l2 -> l0 : x^0'=x^post3, y^0'=y^post3, (y^0-y^post3 == 0 /\ x^0-x^post3 == 0), cost: 1
	New rule:
	l0 -> l0 : x^0'=x^post3, y^0'=y^post3, (-x^post3+x^post2 == 0 /\ 1-y^0 <= 0 /\ y^post2-y^post3 == 0 /\ 1+y^post2-y^0 == 0 /\ x^0-x^post2 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 1 2

Simplified Transitions

Start location: l4
Program variables: x^0 y^0
   8: l0 -> l1 : x^0'=-1+x^0, y^0'=1+y^0, y^0 <= 0, cost: 1
  11: l0 -> l0 : y^0'=-1+y^0, 1-y^0 <= 0, cost: 1
   9: l1 -> l0 : y^0'=x^0, 1-x^0 <= 0, cost: 1
  10: l4 -> l1 : T, cost: 1

	Propagated Equalities

	Original rule:
	l0 -> l1 : x^0'=x^post1, y^0'=y^post1, (1+x^post1-x^0 == 0 /\ y^0 <= 0 /\ -1+y^post1-y^0 == 0), cost: 1
	New rule:
	l0 -> l1 : x^0'=-1+x^0, y^0'=1+y^0, (0 == 0 /\ y^0 <= 0), cost: 1
	
		propagated equality x^post1 = -1+x^0
		
		propagated equality y^post1 = 1+y^0
		
	Simplified Guard

	Original rule:
	l0 -> l1 : x^0'=-1+x^0, y^0'=1+y^0, (0 == 0 /\ y^0 <= 0), cost: 1
	New rule:
	l0 -> l1 : x^0'=-1+x^0, y^0'=1+y^0, y^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l1 -> l0 : x^0'=x^post5, y^0'=y^post5, (1-x^0 <= 0 /\ y^post5-x^0 == 0 /\ x^0-x^post5 == 0), cost: 1
	New rule:
	l1 -> l0 : x^0'=x^0, y^0'=x^0, (0 == 0 /\ 1-x^0 <= 0), cost: 1
	
		propagated equality y^post5 = x^0
		
		propagated equality x^post5 = x^0
		
	Simplified Guard

	Original rule:
	l1 -> l0 : x^0'=x^0, y^0'=x^0, (0 == 0 /\ 1-x^0 <= 0), cost: 1
	New rule:
	l1 -> l0 : x^0'=x^0, y^0'=x^0, 1-x^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l1 -> l0 : x^0'=x^0, y^0'=x^0, 1-x^0 <= 0, cost: 1
	New rule:
	l1 -> l0 : y^0'=x^0, 1-x^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l4 -> l1 : x^0'=x^post4, y^0'=y^post4, (x^0-x^post6 == 0 /\ -x^post4+x^post6 == 0 /\ y^0-y^post6 == 0 /\ -y^post4+y^post6 == 0), cost: 1
	New rule:
	l4 -> l1 : x^0'=x^post6, y^0'=y^post6, (0 == 0 /\ x^0-x^post6 == 0 /\ y^0-y^post6 == 0), cost: 1
	
		propagated equality x^post4 = x^post6
		
		propagated equality y^post4 = y^post6
		
	Propagated Equalities

	Original rule:
	l4 -> l1 : x^0'=x^post6, y^0'=y^post6, (0 == 0 /\ x^0-x^post6 == 0 /\ y^0-y^post6 == 0), cost: 1
	New rule:
	l4 -> l1 : x^0'=x^0, y^0'=y^0, 0 == 0, cost: 1
	
		propagated equality x^post6 = x^0
		
		propagated equality y^post6 = y^0
		
	Simplified Guard

	Original rule:
	l4 -> l1 : x^0'=x^0, y^0'=y^0, 0 == 0, cost: 1
	New rule:
	l4 -> l1 : x^0'=x^0, y^0'=y^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l4 -> l1 : x^0'=x^0, y^0'=y^0, T, cost: 1
	New rule:
	l4 -> l1 : T, cost: 1
	
	Propagated Equalities

	Original rule:
	l0 -> l0 : x^0'=x^post3, y^0'=y^post3, (-x^post3+x^post2 == 0 /\ 1-y^0 <= 0 /\ y^post2-y^post3 == 0 /\ 1+y^post2-y^0 == 0 /\ x^0-x^post2 == 0), cost: 1
	New rule:
	l0 -> l0 : x^0'=x^post2, y^0'=y^post2, (0 == 0 /\ 1-y^0 <= 0 /\ 1+y^post2-y^0 == 0 /\ x^0-x^post2 == 0), cost: 1
	
		propagated equality x^post3 = x^post2
		
		propagated equality y^post3 = y^post2
		
	Propagated Equalities

	Original rule:
	l0 -> l0 : x^0'=x^post2, y^0'=y^post2, (0 == 0 /\ 1-y^0 <= 0 /\ 1+y^post2-y^0 == 0 /\ x^0-x^post2 == 0), cost: 1
	New rule:
	l0 -> l0 : x^0'=x^0, y^0'=-1+y^0, (0 == 0 /\ 1-y^0 <= 0), cost: 1
	
		propagated equality y^post2 = -1+y^0
		
		propagated equality x^post2 = x^0
		
	Simplified Guard

	Original rule:
	l0 -> l0 : x^0'=x^0, y^0'=-1+y^0, (0 == 0 /\ 1-y^0 <= 0), cost: 1
	New rule:
	l0 -> l0 : x^0'=x^0, y^0'=-1+y^0, 1-y^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l0 : x^0'=x^0, y^0'=-1+y^0, 1-y^0 <= 0, cost: 1
	New rule:
	l0 -> l0 : y^0'=-1+y^0, 1-y^0 <= 0, cost: 1

Step with 10

	Trace

	10[T]
	
	Blocked

	[{}, {}]

Step with 9

	Trace

	10[T], 9[(1-x^0 <= 0)]
	
	Blocked

	[{}, {}, {}]

Step with 11

	Trace

	10[T], 9[(1-x^0 <= 0)], 11[(1-y^0 <= 0)]
	
	Blocked

	[{}, {}, {8[T]}, {}]

Accelerate

Start location: l4
Program variables: x^0 y^0
   8: l0 -> l1 : x^0'=-1+x^0, y^0'=1+y^0, y^0 <= 0, cost: 1
  11: l0 -> l0 : y^0'=-1+y^0, 1-y^0 <= 0, cost: 1
  12: l0 -> l0 : y^0'=y^0-n, (y^0-n >= 0 /\ -1+n >= 0), cost: 1
   9: l1 -> l0 : y^0'=x^0, 1-x^0 <= 0, cost: 1
  10: l4 -> l1 : T, cost: 1

	Loop Acceleration

	Original rule:
	l0 -> l0 : y^0'=-1+y^0, (1-y^0 <= 0), cost: 1
	New rule:
	l0 -> l0 : y^0'=y^0-n, (y^0-n >= 0 /\ -1+n >= 0), cost: 1

		-1+y^0 >= 0 [0]: montonic decrease yields y^0-n >= 0
		
		-1+y^0 >= 0 [1]: eventual increase yields (1 <= 0 /\ -1+y^0 >= 0)
		
		Replacement map: {-1+y^0 >= 0 -> y^0-n >= 0}

	Trace

	10[T], 9[(1-x^0 <= 0)], 12[(y^0-n >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {}, {8[T]}, {11[T], 12[T]}]

Step with 8

	Trace

	10[T], 9[(1-x^0 <= 0)], 12[(y^0-n >= 0 /\ -1+n >= 0)], 8[(y^0 <= 0)]
	
	Blocked

	[{}, {}, {8[T]}, {11[T], 12[T]}, {}]

Accelerate

Start location: l4
Program variables: x^0 y^0
   8: l0 -> l1 : x^0'=-1+x^0, y^0'=1+y^0, y^0 <= 0, cost: 1
  11: l0 -> l0 : y^0'=-1+y^0, 1-y^0 <= 0, cost: 1
  12: l0 -> l0 : y^0'=y^0-n, (y^0-n >= 0 /\ -1+n >= 0), cost: 1
   9: l1 -> l0 : y^0'=x^0, 1-x^0 <= 0, cost: 1
  13: l1 -> l1 : x^0'=x^0-n2, y^0'=1, (x^0-n2 >= 0 /\ -1+n2 >= 0), cost: 1
  10: l4 -> l1 : T, cost: 1

	Loop Acceleration

	Original rule:
	l1 -> l1 : x^0'=-1+x^0, y^0'=1, (1-x^0 <= 0 /\ -1+x^0 >= 0), cost: 1
	New rule:
	l1 -> l1 : x^0'=x^0-n2, y^0'=1, (x^0-n2 >= 0 /\ -1+n2 >= 0), cost: 1

		-1+x^0 >= 0 [0]: montonic decrease yields x^0-n2 >= 0
		
		-1+x^0 >= 0 [1]: eventual increase yields (1 <= 0 /\ -1+x^0 >= 0)
		
		Replacement map: {-1+x^0 >= 0 -> x^0-n2 >= 0}

	Trace

	10[T], 13[(x^0-n2 >= 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {}, {13[T]}]

Step with 9

	Trace

	10[T], 13[(x^0-n2 >= 0 /\ -1+n2 >= 0)], 9[(1-x^0 <= 0)]
	
	Blocked

	[{}, {}, {13[T]}, {}]

Step with 11

	Trace

	10[T], 13[(x^0-n2 >= 0 /\ -1+n2 >= 0)], 9[(1-x^0 <= 0)], 11[(1-y^0 <= 0)]
	
	Blocked

	[{}, {}, {13[T]}, {8[T]}, {}]

Covered

	Trace

	10[T], 13[(x^0-n2 >= 0 /\ -1+n2 >= 0)], 9[(1-x^0 <= 0)]
	
	Blocked

	[{}, {}, {13[T]}, {8[T], 11[T]}]

Step with 12

	Trace

	10[T], 13[(x^0-n2 >= 0 /\ -1+n2 >= 0)], 9[(1-x^0 <= 0)], 12[(y^0-n >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {}, {13[T]}, {8[T], 11[T]}, {12[T]}]

Step with 8

	Trace

	10[T], 13[(x^0-n2 >= 0 /\ -1+n2 >= 0)], 9[(1-x^0 <= 0)], 12[(y^0-n >= 0 /\ -1+n >= 0)], 8[(y^0 <= 0)]
	
	Blocked

	[{}, {}, {13[T]}, {8[T], 11[T]}, {12[T]}, {}]

Covered

	Trace

	10[T], 13[(x^0-n2 >= 0 /\ -1+n2 >= 0)], 9[(1-x^0 <= 0)], 12[(y^0-n >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {}, {13[T]}, {8[T], 11[T]}, {8[T], 12[T]}]

Step with 11

	Trace

	10[T], 13[(x^0-n2 >= 0 /\ -1+n2 >= 0)], 9[(1-x^0 <= 0)], 12[(y^0-n >= 0 /\ -1+n >= 0)], 11[(1-y^0 <= 0)]
	
	Blocked

	[{}, {}, {13[T]}, {8[T], 11[T]}, {8[T], 12[T]}, {}]

Covered

	Trace

	10[T], 13[(x^0-n2 >= 0 /\ -1+n2 >= 0)], 9[(1-x^0 <= 0)], 12[(y^0-n >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {}, {13[T]}, {8[T], 11[T]}, {8[T], 11[T], 12[T]}]

Backtrack

	Trace

	10[T], 13[(x^0-n2 >= 0 /\ -1+n2 >= 0)], 9[(1-x^0 <= 0)]
	
	Blocked

	[{}, {}, {13[T]}, {8[T], 11[T], 12[T]}]

Backtrack

	Trace

	10[T], 13[(x^0-n2 >= 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {}, {9[T], 13[T]}]

Backtrack

	Trace

	10[T]
	
	Blocked

	[{}, {13[T]}]

Step with 9

	Trace

	10[T], 9[(1-x^0 <= 0)]
	
	Blocked

	[{}, {13[T]}, {}]

Step with 11

	Trace

	10[T], 9[(1-x^0 <= 0)], 11[(1-y^0 <= 0)]
	
	Blocked

	[{}, {13[T]}, {}, {}]

Covered

	Trace

	10[T], 9[(1-x^0 <= 0)]
	
	Blocked

	[{}, {13[T]}, {11[T]}]

Step with 12

	Trace

	10[T], 9[(1-x^0 <= 0)], 12[(y^0-n >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {13[T]}, {11[T]}, {12[T]}]

Step with 8

	Trace

	10[T], 9[(1-x^0 <= 0)], 12[(y^0-n >= 0 /\ -1+n >= 0)], 8[(y^0 <= 0)]
	
	Blocked

	[{}, {13[T]}, {11[T]}, {12[T]}, {}]

Covered

	Trace

	10[T], 9[(1-x^0 <= 0)], 12[(y^0-n >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {13[T]}, {11[T]}, {8[T], 12[T]}]

Step with 11

	Trace

	10[T], 9[(1-x^0 <= 0)], 12[(y^0-n >= 0 /\ -1+n >= 0)], 11[(1-y^0 <= 0)]
	
	Blocked

	[{}, {13[T]}, {11[T]}, {8[T], 12[T]}, {}]

Covered

	Trace

	10[T], 9[(1-x^0 <= 0)], 12[(y^0-n >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {13[T]}, {11[T]}, {8[T], 11[T], 12[T]}]

Backtrack

	Trace

	10[T], 9[(1-x^0 <= 0)]
	
	Blocked

	[{}, {13[T]}, {11[T], 12[T]}]

Backtrack

	Trace

	10[T]
	
	Blocked

	[{}, {9[T], 13[T]}]

Backtrack

	Trace

	Blocked

	[{10[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
