unknown

Initial ITS

Start location: [1]
Program variables: x y
   0: [1] -> [2] : x'=nondet, T, cost: 1
   1: [2] -> [3] : x >= 0, cost: 1
  10: [2] -> [10] : x < 0, cost: 1
   2: [3] -> [4] : x'=1+x, T, cost: 1
   3: [4] -> [5] : y'=1, T, cost: 1
   4: [5] -> [6] : -y+x >= 0, cost: 1
   7: [5] -> [8] : -y+x < 0, cost: 1
   5: [6] -> [7] : y'=1+y, T, cost: 1
   6: [7] -> [5] : T, cost: 1
   8: [8] -> [9] : x'=-2+x, T, cost: 1
   9: [9] -> [2] : T, cost: 1

Chained Linear Paths

Start location: [1]
Program variables: x y
   0: [1] -> [2] : x'=nondet, T, cost: 1
  10: [2] -> [10] : x < 0, cost: 1
  12: [2] -> [5] : x'=1+x, y'=1, x >= 0, cost: 1
  15: [5] -> [5] : y'=1+y, -y+x >= 0, cost: 1
  16: [5] -> [2] : x'=-2+x, -y+x < 0, cost: 1

	Eliminating location [3] by chaining:

	Applied chaining

	First rule:
	[2] -> [3] : x >= 0, cost: 1
	Second rule:
	[3] -> [4] : x'=1+x, T, cost: 1
	New rule:
	[2] -> [4] : x'=1+x, x >= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 1 2
	
	Eliminating location [4] by chaining:

	Applied chaining

	First rule:
	[2] -> [4] : x'=1+x, x >= 0, cost: 1
	Second rule:
	[4] -> [5] : y'=1, T, cost: 1
	New rule:
	[2] -> [5] : x'=1+x, y'=1, x >= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 3 11
	
	Eliminating location [6] by chaining:

	Applied chaining

	First rule:
	[5] -> [6] : -y+x >= 0, cost: 1
	Second rule:
	[6] -> [7] : y'=1+y, T, cost: 1
	New rule:
	[5] -> [7] : y'=1+y, -y+x >= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 4 5
	
	Eliminating location [8] by chaining:

	Applied chaining

	First rule:
	[5] -> [8] : -y+x < 0, cost: 1
	Second rule:
	[8] -> [9] : x'=-2+x, T, cost: 1
	New rule:
	[5] -> [9] : x'=-2+x, -y+x < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 7 8
	
	Eliminating location [7] by chaining:

	Applied chaining

	First rule:
	[5] -> [7] : y'=1+y, -y+x >= 0, cost: 1
	Second rule:
	[7] -> [5] : T, cost: 1
	New rule:
	[5] -> [5] : y'=1+y, -y+x >= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 6 13
	
	Eliminating location [9] by chaining:

	Applied chaining

	First rule:
	[5] -> [9] : x'=-2+x, -y+x < 0, cost: 1
	Second rule:
	[9] -> [2] : T, cost: 1
	New rule:
	[5] -> [2] : x'=-2+x, -y+x < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 9 14

Step with 0

	Trace

	0[T]
	
	Blocked

	[{}, {}]

Step with 10

	Trace

	0[T], 10[(x < 0)]
	
	Blocked

	[{}, {}, {}]

Backtrack

	Trace

	0[T]
	
	Blocked

	[{}, {10[T]}]

Step with 12

	Trace

	0[T], 12[(x >= 0)]
	
	Blocked

	[{}, {10[T]}, {}]

Step with 15

	Trace

	0[T], 12[(x >= 0)], 15[(-y+x >= 0)]
	
	Blocked

	[{}, {10[T]}, {}, {}]

Accelerate

Start location: [1]
Program variables: x y
   0: [1] -> [2] : x'=nondet, T, cost: 1
  10: [2] -> [10] : x < 0, cost: 1
  12: [2] -> [5] : x'=1+x, y'=1, x >= 0, cost: 1
  15: [5] -> [5] : y'=1+y, -y+x >= 0, cost: 1
  16: [5] -> [2] : x'=-2+x, -y+x < 0, cost: 1
  17: [5] -> [5] : y'=n+y, (1-n-y+x >= 0 /\ -1+n >= 0), cost: 1

	Loop Acceleration

	Original rule:
	[5] -> [5] : y'=1+y, (-y+x >= 0), cost: 1
	New rule:
	[5] -> [5] : y'=n+y, (1-n-y+x >= 0 /\ -1+n >= 0), cost: 1

		-y+x >= 0 [0]: montonic decrease yields 1-n-y+x >= 0
		
		-y+x >= 0 [1]: eventual increase yields (1 <= 0 /\ -y+x >= 0)
		
		Replacement map: {-y+x >= 0 -> 1-n-y+x >= 0}

	Trace

	0[T], 12[(x >= 0)], 17[(1-n-y+x >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {10[T]}, {}, {15[T], 17[T]}]

Step with 16

	Trace

	0[T], 12[(x >= 0)], 17[(1-n-y+x >= 0 /\ -1+n >= 0)], 16[(-y+x < 0)]
	
	Blocked

	[{}, {10[T]}, {}, {15[T], 17[T]}, {}]

Accelerate

Start location: [1]
Program variables: x y
   0: [1] -> [2] : x'=nondet, T, cost: 1
  10: [2] -> [10] : x < 0, cost: 1
  12: [2] -> [5] : x'=1+x, y'=1, x >= 0, cost: 1
  18: [2] -> [2] : x'=-n2+x, y'=3-n2+x, (-1+n2 >= 0 /\ 1-n2+x >= 0), cost: 1
  15: [5] -> [5] : y'=1+y, -y+x >= 0, cost: 1
  16: [5] -> [2] : x'=-2+x, -y+x < 0, cost: 1
  17: [5] -> [5] : y'=n+y, (1-n-y+x >= 0 /\ -1+n >= 0), cost: 1

	Loop Acceleration

	Original rule:
	[2] -> [2] : x'=-1+x, y'=2+x, x >= 0, cost: 1
	New rule:
	[2] -> [2] : x'=-n2+x, y'=3-n2+x, (-1+n2 >= 0 /\ 1-n2+x >= 0), cost: 1

		x >= 0 [0]: montonic decrease yields 1-n2+x >= 0
		
		x >= 0 [1]: eventual increase yields (1 <= 0 /\ x >= 0)
		
		Replacement map: {x >= 0 -> 1-n2+x >= 0}

	Trace

	0[T], 18[(-1+n2 >= 0 /\ 1-n2+x >= 0)]
	
	Blocked

	[{}, {10[T]}, {18[T]}]

Step with 10

	Trace

	0[T], 18[(-1+n2 >= 0 /\ 1-n2+x >= 0)], 10[(x < 0)]
	
	Blocked

	[{}, {10[T]}, {18[T]}, {}]

Backtrack

	Trace

	0[T], 18[(-1+n2 >= 0 /\ 1-n2+x >= 0)]
	
	Blocked

	[{}, {10[T]}, {10[T], 18[T]}]

Step with 12

	Trace

	0[T], 18[(-1+n2 >= 0 /\ 1-n2+x >= 0)], 12[(x >= 0)]
	
	Blocked

	[{}, {10[T]}, {10[T], 18[T]}, {}]

Step with 17

	Trace

	0[T], 18[(-1+n2 >= 0 /\ 1-n2+x >= 0)], 12[(x >= 0)], 17[(1-n-y+x >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {10[T]}, {10[T], 18[T]}, {16[T]}, {17[T]}]

Step with 15

	Trace

	0[T], 18[(-1+n2 >= 0 /\ 1-n2+x >= 0)], 12[(x >= 0)], 17[(1-n-y+x >= 0 /\ -1+n >= 0)], 15[(-y+x >= 0)]
	
	Blocked

	[{}, {10[T]}, {10[T], 18[T]}, {16[T]}, {17[T]}, {}]

Covered

	Trace

	0[T], 18[(-1+n2 >= 0 /\ 1-n2+x >= 0)], 12[(x >= 0)], 17[(1-n-y+x >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {10[T]}, {10[T], 18[T]}, {16[T]}, {15[T], 17[T]}]

Step with 16

	Trace

	0[T], 18[(-1+n2 >= 0 /\ 1-n2+x >= 0)], 12[(x >= 0)], 17[(1-n-y+x >= 0 /\ -1+n >= 0)], 16[(-y+x < 0)]
	
	Blocked

	[{}, {10[T]}, {10[T], 18[T]}, {16[T]}, {15[T], 17[T]}, {}]

Covered

	Trace

	0[T], 18[(-1+n2 >= 0 /\ 1-n2+x >= 0)], 12[(x >= 0)], 17[(1-n-y+x >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {10[T]}, {10[T], 18[T]}, {16[T]}, {15[T], 16[T], 17[T]}]

Backtrack

	Trace

	0[T], 18[(-1+n2 >= 0 /\ 1-n2+x >= 0)], 12[(x >= 0)]
	
	Blocked

	[{}, {10[T]}, {10[T], 18[T]}, {16[T], 17[T]}]

Step with 15

	Trace

	0[T], 18[(-1+n2 >= 0 /\ 1-n2+x >= 0)], 12[(x >= 0)], 15[(-y+x >= 0)]
	
	Blocked

	[{}, {10[T]}, {10[T], 18[T]}, {16[T], 17[T]}, {}]

Covered

	Trace

	0[T], 18[(-1+n2 >= 0 /\ 1-n2+x >= 0)], 12[(x >= 0)]
	
	Blocked

	[{}, {10[T]}, {10[T], 18[T]}, {15[T], 16[T], 17[T]}]

Backtrack

	Trace

	0[T], 18[(-1+n2 >= 0 /\ 1-n2+x >= 0)]
	
	Blocked

	[{}, {10[T]}, {10[T], 12[T], 18[T]}]

Backtrack

	Trace

	0[T]
	
	Blocked

	[{}, {10[T], 18[T]}]

Step with 12

	Trace

	0[T], 12[(x >= 0)]
	
	Blocked

	[{}, {10[T], 18[T]}, {}]

Step with 15

	Trace

	0[T], 12[(x >= 0)], 15[(-y+x >= 0)]
	
	Blocked

	[{}, {10[T], 18[T]}, {}, {}]

Covered

	Trace

	0[T], 12[(x >= 0)]
	
	Blocked

	[{}, {10[T], 18[T]}, {15[T]}]

Step with 17

	Trace

	0[T], 12[(x >= 0)], 17[(1-n-y+x >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {10[T], 18[T]}, {15[T], 16[T]}, {17[T]}]

Step with 15

	Trace

	0[T], 12[(x >= 0)], 17[(1-n-y+x >= 0 /\ -1+n >= 0)], 15[(-y+x >= 0)]
	
	Blocked

	[{}, {10[T], 18[T]}, {15[T], 16[T]}, {17[T]}, {}]

Covered

	Trace

	0[T], 12[(x >= 0)], 17[(1-n-y+x >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {10[T], 18[T]}, {15[T], 16[T]}, {15[T], 17[T]}]

Step with 16

	Trace

	0[T], 12[(x >= 0)], 17[(1-n-y+x >= 0 /\ -1+n >= 0)], 16[(-y+x < 0)]
	
	Blocked

	[{}, {10[T], 18[T]}, {15[T], 16[T]}, {15[T], 17[T]}, {}]

Covered

	Trace

	0[T], 12[(x >= 0)], 17[(1-n-y+x >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {10[T], 18[T]}, {15[T], 16[T]}, {15[T], 16[T], 17[T]}]

Backtrack

	Trace

	0[T], 12[(x >= 0)]
	
	Blocked

	[{}, {10[T], 18[T]}, {15[T], 16[T], 17[T]}]

Backtrack

	Trace

	0[T]
	
	Blocked

	[{}, {10[T], 12[T], 18[T]}]

Backtrack

	Trace

	Blocked

	[{0[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
