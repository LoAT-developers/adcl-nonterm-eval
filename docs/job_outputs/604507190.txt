unknown

Initial ITS

Start location: l7
Program variables: __disjvr_0^0 result_4^0 x_5^0 y_6^0
   0: l0 -> l1 : __disjvr_0^0'=__disjvr_0^post1, result_4^0'=result_4^post1, x_5^0'=x_5^post1, y_6^0'=y_6^post1, (result_4^0-result_4^post1 == 0 /\ __disjvr_0^0-__disjvr_0^post1 == 0 /\ -y_6^post1+y_6^0 == 0 /\ -x_5^post1+x_5^0 == 0), cost: 1
   1: l1 -> l3 : __disjvr_0^0'=__disjvr_0^post2, result_4^0'=result_4^post2, x_5^0'=x_5^post2, y_6^0'=y_6^post2, (y_6^0-y_6^post2 == 0 /\ -result_4^post2+result_4^0 == 0 /\ -x_5^post2+x_5^0 == 0 /\ y_6^0-x_5^0 <= 0 /\ __disjvr_0^0-__disjvr_0^post2 == 0), cost: 1
   4: l1 -> l5 : __disjvr_0^0'=__disjvr_0^post5, result_4^0'=result_4^post5, x_5^0'=x_5^post5, y_6^0'=y_6^post5, (__disjvr_0^0-__disjvr_0^post5 == 0 /\ result_4^0-result_4^post5 == 0 /\ -y_6^post5+y_6^0 == 0 /\ y_6^0-x_5^0 <= 0 /\ -1+x_5^post5-x_5^0 == 0 /\ -y_6^0+x_5^0 <= 0), cost: 1
   6: l1 -> l6 : __disjvr_0^0'=__disjvr_0^post7, result_4^0'=result_4^post7, x_5^0'=x_5^post7, y_6^0'=y_6^post7, (-1+x_5^post7-x_5^0 == 0 /\ -result_4^post7+result_4^0 == 0 /\ y_6^0-y_6^post7 == 0 /\ __disjvr_0^0-__disjvr_0^post7 == 0 /\ 1-y_6^0+x_5^0 <= 0), cost: 1
   2: l3 -> l4 : __disjvr_0^0'=__disjvr_0^post3, result_4^0'=result_4^post3, x_5^0'=x_5^post3, y_6^0'=y_6^post3, (-result_4^post3+result_4^0 == 0 /\ -x_5^post3+x_5^0 == 0 /\ y_6^0-y_6^post3 == 0 /\ -__disjvr_0^post3+__disjvr_0^0 == 0 /\ __disjvr_0^post3-__disjvr_0^0 == 0), cost: 1
   3: l4 -> l2 : __disjvr_0^0'=__disjvr_0^post4, result_4^0'=result_4^post4, x_5^0'=x_5^post4, y_6^0'=y_6^post4, (0 == 0 /\ -x_5^post4+x_5^0 == 0 /\ -__disjvr_0^post4+__disjvr_0^0 == 0 /\ -y_6^post4+y_6^0 == 0), cost: 1
   5: l5 -> l1 : __disjvr_0^0'=__disjvr_0^post6, result_4^0'=result_4^post6, x_5^0'=x_5^post6, y_6^0'=y_6^post6, (__disjvr_0^0-__disjvr_0^post6 == 0 /\ result_4^0-result_4^post6 == 0 /\ y_6^0-y_6^post6 == 0 /\ -x_5^post6+x_5^0 == 0), cost: 1
   7: l6 -> l1 : __disjvr_0^0'=__disjvr_0^post8, result_4^0'=result_4^post8, x_5^0'=x_5^post8, y_6^0'=y_6^post8, (-y_6^post8+y_6^0 == 0 /\ -x_5^post8+x_5^0 == 0 /\ -result_4^post8+result_4^0 == 0 /\ -__disjvr_0^post8+__disjvr_0^0 == 0), cost: 1
   8: l7 -> l0 : __disjvr_0^0'=__disjvr_0^post9, result_4^0'=result_4^post9, x_5^0'=x_5^post9, y_6^0'=y_6^post9, (x_5^0-x_5^post9 == 0 /\ -y_6^post9+y_6^0 == 0 /\ __disjvr_0^0-__disjvr_0^post9 == 0 /\ -result_4^post9+result_4^0 == 0), cost: 1

Chained Linear Paths

Start location: l7
Program variables: __disjvr_0^0 result_4^0 x_5^0 y_6^0
  11: l1 -> l1 : __disjvr_0^0'=__disjvr_0^post6, result_4^0'=result_4^post6, x_5^0'=x_5^post6, y_6^0'=y_6^post6, (__disjvr_0^post5-__disjvr_0^post6 == 0 /\ __disjvr_0^0-__disjvr_0^post5 == 0 /\ x_5^post5-x_5^post6 == 0 /\ result_4^0-result_4^post5 == 0 /\ -y_6^post5+y_6^0 == 0 /\ y_6^0-x_5^0 <= 0 /\ result_4^post5-result_4^post6 == 0 /\ y_6^post5-y_6^post6 == 0 /\ -1+x_5^post5-x_5^0 == 0 /\ -y_6^0+x_5^0 <= 0), cost: 1
  12: l1 -> l1 : __disjvr_0^0'=__disjvr_0^post8, result_4^0'=result_4^post8, x_5^0'=x_5^post8, y_6^0'=y_6^post8, (result_4^post7-result_4^post8 == 0 /\ -y_6^post8+y_6^post7 == 0 /\ -1+x_5^post7-x_5^0 == 0 /\ -result_4^post7+result_4^0 == 0 /\ x_5^post7-x_5^post8 == 0 /\ y_6^0-y_6^post7 == 0 /\ -__disjvr_0^post8+__disjvr_0^post7 == 0 /\ __disjvr_0^0-__disjvr_0^post7 == 0 /\ 1-y_6^0+x_5^0 <= 0), cost: 1
  13: l1 -> l2 : __disjvr_0^0'=__disjvr_0^post4, result_4^0'=result_4^post4, x_5^0'=x_5^post4, y_6^0'=y_6^post4, (0 == 0 /\ -y_6^post4+y_6^post3 == 0 /\ y_6^0-y_6^post2 == 0 /\ -result_4^post2+result_4^0 == 0 /\ x_5^post3-x_5^post4 == 0 /\ -x_5^post2+x_5^0 == 0 /\ y_6^post2-y_6^post3 == 0 /\ x_5^post2-x_5^post3 == 0 /\ -__disjvr_0^post3+__disjvr_0^post2 == 0 /\ y_6^0-x_5^0 <= 0 /\ result_4^post2-result_4^post3 == 0 /\ __disjvr_0^post3-__disjvr_0^post4 == 0 /\ __disjvr_0^0-__disjvr_0^post2 == 0 /\ __disjvr_0^post3-__disjvr_0^post2 == 0), cost: 1
   9: l7 -> l1 : __disjvr_0^0'=__disjvr_0^post1, result_4^0'=result_4^post1, x_5^0'=x_5^post1, y_6^0'=y_6^post1, (x_5^0-x_5^post9 == 0 /\ -y_6^post9+y_6^0 == 0 /\ result_4^post9-result_4^post1 == 0 /\ -x_5^post1+x_5^post9 == 0 /\ y_6^post9-y_6^post1 == 0 /\ __disjvr_0^post9-__disjvr_0^post1 == 0 /\ __disjvr_0^0-__disjvr_0^post9 == 0 /\ -result_4^post9+result_4^0 == 0), cost: 1

	Eliminating location l0 by chaining:

	Applied chaining

	First rule:
	l7 -> l0 : __disjvr_0^0'=__disjvr_0^post9, result_4^0'=result_4^post9, x_5^0'=x_5^post9, y_6^0'=y_6^post9, (x_5^0-x_5^post9 == 0 /\ -y_6^post9+y_6^0 == 0 /\ __disjvr_0^0-__disjvr_0^post9 == 0 /\ -result_4^post9+result_4^0 == 0), cost: 1
	Second rule:
	l0 -> l1 : __disjvr_0^0'=__disjvr_0^post1, result_4^0'=result_4^post1, x_5^0'=x_5^post1, y_6^0'=y_6^post1, (result_4^0-result_4^post1 == 0 /\ __disjvr_0^0-__disjvr_0^post1 == 0 /\ -y_6^post1+y_6^0 == 0 /\ -x_5^post1+x_5^0 == 0), cost: 1
	New rule:
	l7 -> l1 : __disjvr_0^0'=__disjvr_0^post1, result_4^0'=result_4^post1, x_5^0'=x_5^post1, y_6^0'=y_6^post1, (x_5^0-x_5^post9 == 0 /\ -y_6^post9+y_6^0 == 0 /\ result_4^post9-result_4^post1 == 0 /\ -x_5^post1+x_5^post9 == 0 /\ y_6^post9-y_6^post1 == 0 /\ __disjvr_0^post9-__disjvr_0^post1 == 0 /\ __disjvr_0^0-__disjvr_0^post9 == 0 /\ -result_4^post9+result_4^0 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 8
	
	Eliminating location l3 by chaining:

	Applied chaining

	First rule:
	l1 -> l3 : __disjvr_0^0'=__disjvr_0^post2, result_4^0'=result_4^post2, x_5^0'=x_5^post2, y_6^0'=y_6^post2, (y_6^0-y_6^post2 == 0 /\ -result_4^post2+result_4^0 == 0 /\ -x_5^post2+x_5^0 == 0 /\ y_6^0-x_5^0 <= 0 /\ __disjvr_0^0-__disjvr_0^post2 == 0), cost: 1
	Second rule:
	l3 -> l4 : __disjvr_0^0'=__disjvr_0^post3, result_4^0'=result_4^post3, x_5^0'=x_5^post3, y_6^0'=y_6^post3, (-result_4^post3+result_4^0 == 0 /\ -x_5^post3+x_5^0 == 0 /\ y_6^0-y_6^post3 == 0 /\ -__disjvr_0^post3+__disjvr_0^0 == 0 /\ __disjvr_0^post3-__disjvr_0^0 == 0), cost: 1
	New rule:
	l1 -> l4 : __disjvr_0^0'=__disjvr_0^post3, result_4^0'=result_4^post3, x_5^0'=x_5^post3, y_6^0'=y_6^post3, (y_6^0-y_6^post2 == 0 /\ -result_4^post2+result_4^0 == 0 /\ -x_5^post2+x_5^0 == 0 /\ y_6^post2-y_6^post3 == 0 /\ x_5^post2-x_5^post3 == 0 /\ -__disjvr_0^post3+__disjvr_0^post2 == 0 /\ y_6^0-x_5^0 <= 0 /\ result_4^post2-result_4^post3 == 0 /\ __disjvr_0^0-__disjvr_0^post2 == 0 /\ __disjvr_0^post3-__disjvr_0^post2 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 1 2
	
	Eliminating location l5 by chaining:

	Applied chaining

	First rule:
	l1 -> l5 : __disjvr_0^0'=__disjvr_0^post5, result_4^0'=result_4^post5, x_5^0'=x_5^post5, y_6^0'=y_6^post5, (__disjvr_0^0-__disjvr_0^post5 == 0 /\ result_4^0-result_4^post5 == 0 /\ -y_6^post5+y_6^0 == 0 /\ y_6^0-x_5^0 <= 0 /\ -1+x_5^post5-x_5^0 == 0 /\ -y_6^0+x_5^0 <= 0), cost: 1
	Second rule:
	l5 -> l1 : __disjvr_0^0'=__disjvr_0^post6, result_4^0'=result_4^post6, x_5^0'=x_5^post6, y_6^0'=y_6^post6, (__disjvr_0^0-__disjvr_0^post6 == 0 /\ result_4^0-result_4^post6 == 0 /\ y_6^0-y_6^post6 == 0 /\ -x_5^post6+x_5^0 == 0), cost: 1
	New rule:
	l1 -> l1 : __disjvr_0^0'=__disjvr_0^post6, result_4^0'=result_4^post6, x_5^0'=x_5^post6, y_6^0'=y_6^post6, (__disjvr_0^post5-__disjvr_0^post6 == 0 /\ __disjvr_0^0-__disjvr_0^post5 == 0 /\ x_5^post5-x_5^post6 == 0 /\ result_4^0-result_4^post5 == 0 /\ -y_6^post5+y_6^0 == 0 /\ y_6^0-x_5^0 <= 0 /\ result_4^post5-result_4^post6 == 0 /\ y_6^post5-y_6^post6 == 0 /\ -1+x_5^post5-x_5^0 == 0 /\ -y_6^0+x_5^0 <= 0), cost: 1
	
	Applied deletion

	Removed the following rules: 4 5
	
	Eliminating location l6 by chaining:

	Applied chaining

	First rule:
	l1 -> l6 : __disjvr_0^0'=__disjvr_0^post7, result_4^0'=result_4^post7, x_5^0'=x_5^post7, y_6^0'=y_6^post7, (-1+x_5^post7-x_5^0 == 0 /\ -result_4^post7+result_4^0 == 0 /\ y_6^0-y_6^post7 == 0 /\ __disjvr_0^0-__disjvr_0^post7 == 0 /\ 1-y_6^0+x_5^0 <= 0), cost: 1
	Second rule:
	l6 -> l1 : __disjvr_0^0'=__disjvr_0^post8, result_4^0'=result_4^post8, x_5^0'=x_5^post8, y_6^0'=y_6^post8, (-y_6^post8+y_6^0 == 0 /\ -x_5^post8+x_5^0 == 0 /\ -result_4^post8+result_4^0 == 0 /\ -__disjvr_0^post8+__disjvr_0^0 == 0), cost: 1
	New rule:
	l1 -> l1 : __disjvr_0^0'=__disjvr_0^post8, result_4^0'=result_4^post8, x_5^0'=x_5^post8, y_6^0'=y_6^post8, (result_4^post7-result_4^post8 == 0 /\ -y_6^post8+y_6^post7 == 0 /\ -1+x_5^post7-x_5^0 == 0 /\ -result_4^post7+result_4^0 == 0 /\ x_5^post7-x_5^post8 == 0 /\ y_6^0-y_6^post7 == 0 /\ -__disjvr_0^post8+__disjvr_0^post7 == 0 /\ __disjvr_0^0-__disjvr_0^post7 == 0 /\ 1-y_6^0+x_5^0 <= 0), cost: 1
	
	Applied deletion

	Removed the following rules: 6 7
	
	Eliminating location l4 by chaining:

	Applied chaining

	First rule:
	l1 -> l4 : __disjvr_0^0'=__disjvr_0^post3, result_4^0'=result_4^post3, x_5^0'=x_5^post3, y_6^0'=y_6^post3, (y_6^0-y_6^post2 == 0 /\ -result_4^post2+result_4^0 == 0 /\ -x_5^post2+x_5^0 == 0 /\ y_6^post2-y_6^post3 == 0 /\ x_5^post2-x_5^post3 == 0 /\ -__disjvr_0^post3+__disjvr_0^post2 == 0 /\ y_6^0-x_5^0 <= 0 /\ result_4^post2-result_4^post3 == 0 /\ __disjvr_0^0-__disjvr_0^post2 == 0 /\ __disjvr_0^post3-__disjvr_0^post2 == 0), cost: 1
	Second rule:
	l4 -> l2 : __disjvr_0^0'=__disjvr_0^post4, result_4^0'=result_4^post4, x_5^0'=x_5^post4, y_6^0'=y_6^post4, (0 == 0 /\ -x_5^post4+x_5^0 == 0 /\ -__disjvr_0^post4+__disjvr_0^0 == 0 /\ -y_6^post4+y_6^0 == 0), cost: 1
	New rule:
	l1 -> l2 : __disjvr_0^0'=__disjvr_0^post4, result_4^0'=result_4^post4, x_5^0'=x_5^post4, y_6^0'=y_6^post4, (0 == 0 /\ -y_6^post4+y_6^post3 == 0 /\ y_6^0-y_6^post2 == 0 /\ -result_4^post2+result_4^0 == 0 /\ x_5^post3-x_5^post4 == 0 /\ -x_5^post2+x_5^0 == 0 /\ y_6^post2-y_6^post3 == 0 /\ x_5^post2-x_5^post3 == 0 /\ -__disjvr_0^post3+__disjvr_0^post2 == 0 /\ y_6^0-x_5^0 <= 0 /\ result_4^post2-result_4^post3 == 0 /\ __disjvr_0^post3-__disjvr_0^post4 == 0 /\ __disjvr_0^0-__disjvr_0^post2 == 0 /\ __disjvr_0^post3-__disjvr_0^post2 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 3 10

Simplified Transitions

Start location: l7
Program variables: result_4^0 x_5^0 y_6^0
  15: l1 -> l1 : x_5^0'=1+x_5^0, (y_6^0-x_5^0 <= 0 /\ y_6^0-x_5^0 == 0 /\ -y_6^0+x_5^0 <= 0), cost: 1
  16: l1 -> l1 : x_5^0'=1+x_5^0, 1-y_6^0+x_5^0 <= 0, cost: 1
  17: l1 -> l2 : result_4^0'=result_4^post4, y_6^0-x_5^0 <= 0, cost: 1
  14: l7 -> l1 : T, cost: 1

	Propagated Equalities

	Original rule:
	l7 -> l1 : __disjvr_0^0'=__disjvr_0^post1, result_4^0'=result_4^post1, x_5^0'=x_5^post1, y_6^0'=y_6^post1, (x_5^0-x_5^post9 == 0 /\ -y_6^post9+y_6^0 == 0 /\ result_4^post9-result_4^post1 == 0 /\ -x_5^post1+x_5^post9 == 0 /\ y_6^post9-y_6^post1 == 0 /\ __disjvr_0^post9-__disjvr_0^post1 == 0 /\ __disjvr_0^0-__disjvr_0^post9 == 0 /\ -result_4^post9+result_4^0 == 0), cost: 1
	New rule:
	l7 -> l1 : __disjvr_0^0'=__disjvr_0^post9, result_4^0'=result_4^post9, x_5^0'=x_5^post9, y_6^0'=y_6^post9, (0 == 0 /\ x_5^0-x_5^post9 == 0 /\ -y_6^post9+y_6^0 == 0 /\ __disjvr_0^0-__disjvr_0^post9 == 0 /\ -result_4^post9+result_4^0 == 0), cost: 1
	
		propagated equality result_4^post1 = result_4^post9
		
		propagated equality x_5^post1 = x_5^post9
		
		propagated equality y_6^post1 = y_6^post9
		
		propagated equality __disjvr_0^post1 = __disjvr_0^post9
		
	Propagated Equalities

	Original rule:
	l7 -> l1 : __disjvr_0^0'=__disjvr_0^post9, result_4^0'=result_4^post9, x_5^0'=x_5^post9, y_6^0'=y_6^post9, (0 == 0 /\ x_5^0-x_5^post9 == 0 /\ -y_6^post9+y_6^0 == 0 /\ __disjvr_0^0-__disjvr_0^post9 == 0 /\ -result_4^post9+result_4^0 == 0), cost: 1
	New rule:
	l7 -> l1 : __disjvr_0^0'=__disjvr_0^0, result_4^0'=result_4^0, x_5^0'=x_5^0, y_6^0'=y_6^0, 0 == 0, cost: 1
	
		propagated equality x_5^post9 = x_5^0
		
		propagated equality y_6^post9 = y_6^0
		
		propagated equality __disjvr_0^post9 = __disjvr_0^0
		
		propagated equality result_4^post9 = result_4^0
		
	Simplified Guard

	Original rule:
	l7 -> l1 : __disjvr_0^0'=__disjvr_0^0, result_4^0'=result_4^0, x_5^0'=x_5^0, y_6^0'=y_6^0, 0 == 0, cost: 1
	New rule:
	l7 -> l1 : __disjvr_0^0'=__disjvr_0^0, result_4^0'=result_4^0, x_5^0'=x_5^0, y_6^0'=y_6^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l7 -> l1 : __disjvr_0^0'=__disjvr_0^0, result_4^0'=result_4^0, x_5^0'=x_5^0, y_6^0'=y_6^0, T, cost: 1
	New rule:
	l7 -> l1 : T, cost: 1
	
	made implied equalities explicit

	Original rule:
	l1 -> l1 : __disjvr_0^0'=__disjvr_0^post6, result_4^0'=result_4^post6, x_5^0'=x_5^post6, y_6^0'=y_6^post6, (__disjvr_0^post5-__disjvr_0^post6 == 0 /\ __disjvr_0^0-__disjvr_0^post5 == 0 /\ x_5^post5-x_5^post6 == 0 /\ result_4^0-result_4^post5 == 0 /\ -y_6^post5+y_6^0 == 0 /\ y_6^0-x_5^0 <= 0 /\ result_4^post5-result_4^post6 == 0 /\ y_6^post5-y_6^post6 == 0 /\ -1+x_5^post5-x_5^0 == 0 /\ -y_6^0+x_5^0 <= 0), cost: 1
	New rule:
	l1 -> l1 : __disjvr_0^0'=__disjvr_0^post6, result_4^0'=result_4^post6, x_5^0'=x_5^post6, y_6^0'=y_6^post6, (__disjvr_0^post5-__disjvr_0^post6 == 0 /\ __disjvr_0^0-__disjvr_0^post5 == 0 /\ x_5^post5-x_5^post6 == 0 /\ result_4^0-result_4^post5 == 0 /\ -y_6^post5+y_6^0 == 0 /\ y_6^0-x_5^0 <= 0 /\ y_6^0-x_5^0 == 0 /\ result_4^post5-result_4^post6 == 0 /\ y_6^post5-y_6^post6 == 0 /\ -1+x_5^post5-x_5^0 == 0 /\ -y_6^0+x_5^0 <= 0), cost: 1
	
	Propagated Equalities

	Original rule:
	l1 -> l1 : __disjvr_0^0'=__disjvr_0^post6, result_4^0'=result_4^post6, x_5^0'=x_5^post6, y_6^0'=y_6^post6, (__disjvr_0^post5-__disjvr_0^post6 == 0 /\ __disjvr_0^0-__disjvr_0^post5 == 0 /\ x_5^post5-x_5^post6 == 0 /\ result_4^0-result_4^post5 == 0 /\ -y_6^post5+y_6^0 == 0 /\ y_6^0-x_5^0 <= 0 /\ y_6^0-x_5^0 == 0 /\ result_4^post5-result_4^post6 == 0 /\ y_6^post5-y_6^post6 == 0 /\ -1+x_5^post5-x_5^0 == 0 /\ -y_6^0+x_5^0 <= 0), cost: 1
	New rule:
	l1 -> l1 : __disjvr_0^0'=__disjvr_0^post5, result_4^0'=result_4^post5, x_5^0'=x_5^post5, y_6^0'=y_6^post5, (0 == 0 /\ __disjvr_0^0-__disjvr_0^post5 == 0 /\ result_4^0-result_4^post5 == 0 /\ -y_6^post5+y_6^0 == 0 /\ y_6^0-x_5^0 <= 0 /\ y_6^0-x_5^0 == 0 /\ -1+x_5^post5-x_5^0 == 0 /\ -y_6^0+x_5^0 <= 0), cost: 1
	
		propagated equality __disjvr_0^post6 = __disjvr_0^post5
		
		propagated equality x_5^post6 = x_5^post5
		
		propagated equality result_4^post6 = result_4^post5
		
		propagated equality y_6^post6 = y_6^post5
		
	Propagated Equalities

	Original rule:
	l1 -> l1 : __disjvr_0^0'=__disjvr_0^post5, result_4^0'=result_4^post5, x_5^0'=x_5^post5, y_6^0'=y_6^post5, (0 == 0 /\ __disjvr_0^0-__disjvr_0^post5 == 0 /\ result_4^0-result_4^post5 == 0 /\ -y_6^post5+y_6^0 == 0 /\ y_6^0-x_5^0 <= 0 /\ y_6^0-x_5^0 == 0 /\ -1+x_5^post5-x_5^0 == 0 /\ -y_6^0+x_5^0 <= 0), cost: 1
	New rule:
	l1 -> l1 : __disjvr_0^0'=__disjvr_0^0, result_4^0'=result_4^0, x_5^0'=1+x_5^0, y_6^0'=y_6^0, (0 == 0 /\ y_6^0-x_5^0 <= 0 /\ y_6^0-x_5^0 == 0 /\ -y_6^0+x_5^0 <= 0), cost: 1
	
		propagated equality __disjvr_0^post5 = __disjvr_0^0
		
		propagated equality result_4^post5 = result_4^0
		
		propagated equality y_6^post5 = y_6^0
		
		propagated equality x_5^post5 = 1+x_5^0
		
	Simplified Guard

	Original rule:
	l1 -> l1 : __disjvr_0^0'=__disjvr_0^0, result_4^0'=result_4^0, x_5^0'=1+x_5^0, y_6^0'=y_6^0, (0 == 0 /\ y_6^0-x_5^0 <= 0 /\ y_6^0-x_5^0 == 0 /\ -y_6^0+x_5^0 <= 0), cost: 1
	New rule:
	l1 -> l1 : __disjvr_0^0'=__disjvr_0^0, result_4^0'=result_4^0, x_5^0'=1+x_5^0, y_6^0'=y_6^0, (y_6^0-x_5^0 <= 0 /\ y_6^0-x_5^0 == 0 /\ -y_6^0+x_5^0 <= 0), cost: 1
	
	made implied equalities explicit

	Original rule:
	l1 -> l1 : __disjvr_0^0'=__disjvr_0^0, result_4^0'=result_4^0, x_5^0'=1+x_5^0, y_6^0'=y_6^0, (y_6^0-x_5^0 <= 0 /\ y_6^0-x_5^0 == 0 /\ -y_6^0+x_5^0 <= 0), cost: 1
	New rule:
	l1 -> l1 : __disjvr_0^0'=__disjvr_0^0, result_4^0'=result_4^0, x_5^0'=1+x_5^0, y_6^0'=y_6^0, (y_6^0-x_5^0 <= 0 /\ y_6^0-x_5^0 == 0 /\ -y_6^0+x_5^0 <= 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	l1 -> l1 : __disjvr_0^0'=__disjvr_0^0, result_4^0'=result_4^0, x_5^0'=1+x_5^0, y_6^0'=y_6^0, (y_6^0-x_5^0 <= 0 /\ y_6^0-x_5^0 == 0 /\ -y_6^0+x_5^0 <= 0), cost: 1
	New rule:
	l1 -> l1 : x_5^0'=1+x_5^0, (y_6^0-x_5^0 <= 0 /\ y_6^0-x_5^0 == 0 /\ -y_6^0+x_5^0 <= 0), cost: 1
	
	Propagated Equalities

	Original rule:
	l1 -> l1 : __disjvr_0^0'=__disjvr_0^post8, result_4^0'=result_4^post8, x_5^0'=x_5^post8, y_6^0'=y_6^post8, (result_4^post7-result_4^post8 == 0 /\ -y_6^post8+y_6^post7 == 0 /\ -1+x_5^post7-x_5^0 == 0 /\ -result_4^post7+result_4^0 == 0 /\ x_5^post7-x_5^post8 == 0 /\ y_6^0-y_6^post7 == 0 /\ -__disjvr_0^post8+__disjvr_0^post7 == 0 /\ __disjvr_0^0-__disjvr_0^post7 == 0 /\ 1-y_6^0+x_5^0 <= 0), cost: 1
	New rule:
	l1 -> l1 : __disjvr_0^0'=__disjvr_0^post7, result_4^0'=result_4^post7, x_5^0'=x_5^post7, y_6^0'=y_6^post7, (0 == 0 /\ -1+x_5^post7-x_5^0 == 0 /\ -result_4^post7+result_4^0 == 0 /\ y_6^0-y_6^post7 == 0 /\ __disjvr_0^0-__disjvr_0^post7 == 0 /\ 1-y_6^0+x_5^0 <= 0), cost: 1
	
		propagated equality result_4^post8 = result_4^post7
		
		propagated equality y_6^post8 = y_6^post7
		
		propagated equality x_5^post8 = x_5^post7
		
		propagated equality __disjvr_0^post8 = __disjvr_0^post7
		
	Propagated Equalities

	Original rule:
	l1 -> l1 : __disjvr_0^0'=__disjvr_0^post7, result_4^0'=result_4^post7, x_5^0'=x_5^post7, y_6^0'=y_6^post7, (0 == 0 /\ -1+x_5^post7-x_5^0 == 0 /\ -result_4^post7+result_4^0 == 0 /\ y_6^0-y_6^post7 == 0 /\ __disjvr_0^0-__disjvr_0^post7 == 0 /\ 1-y_6^0+x_5^0 <= 0), cost: 1
	New rule:
	l1 -> l1 : __disjvr_0^0'=__disjvr_0^0, result_4^0'=result_4^0, x_5^0'=1+x_5^0, y_6^0'=y_6^0, (0 == 0 /\ 1-y_6^0+x_5^0 <= 0), cost: 1
	
		propagated equality x_5^post7 = 1+x_5^0
		
		propagated equality result_4^post7 = result_4^0
		
		propagated equality y_6^post7 = y_6^0
		
		propagated equality __disjvr_0^post7 = __disjvr_0^0
		
	Simplified Guard

	Original rule:
	l1 -> l1 : __disjvr_0^0'=__disjvr_0^0, result_4^0'=result_4^0, x_5^0'=1+x_5^0, y_6^0'=y_6^0, (0 == 0 /\ 1-y_6^0+x_5^0 <= 0), cost: 1
	New rule:
	l1 -> l1 : __disjvr_0^0'=__disjvr_0^0, result_4^0'=result_4^0, x_5^0'=1+x_5^0, y_6^0'=y_6^0, 1-y_6^0+x_5^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l1 -> l1 : __disjvr_0^0'=__disjvr_0^0, result_4^0'=result_4^0, x_5^0'=1+x_5^0, y_6^0'=y_6^0, 1-y_6^0+x_5^0 <= 0, cost: 1
	New rule:
	l1 -> l1 : x_5^0'=1+x_5^0, 1-y_6^0+x_5^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l1 -> l2 : __disjvr_0^0'=__disjvr_0^post4, result_4^0'=result_4^post4, x_5^0'=x_5^post4, y_6^0'=y_6^post4, (0 == 0 /\ -y_6^post4+y_6^post3 == 0 /\ y_6^0-y_6^post2 == 0 /\ -result_4^post2+result_4^0 == 0 /\ x_5^post3-x_5^post4 == 0 /\ -x_5^post2+x_5^0 == 0 /\ y_6^post2-y_6^post3 == 0 /\ x_5^post2-x_5^post3 == 0 /\ -__disjvr_0^post3+__disjvr_0^post2 == 0 /\ y_6^0-x_5^0 <= 0 /\ result_4^post2-result_4^post3 == 0 /\ __disjvr_0^post3-__disjvr_0^post4 == 0 /\ __disjvr_0^0-__disjvr_0^post2 == 0 /\ __disjvr_0^post3-__disjvr_0^post2 == 0), cost: 1
	New rule:
	l1 -> l2 : __disjvr_0^0'=__disjvr_0^post3, result_4^0'=result_4^post4, x_5^0'=x_5^post3, y_6^0'=y_6^post3, (0 == 0 /\ y_6^0-y_6^post2 == 0 /\ -result_4^post2+result_4^0 == 0 /\ -x_5^post2+x_5^0 == 0 /\ y_6^post2-y_6^post3 == 0 /\ x_5^post2-x_5^post3 == 0 /\ -__disjvr_0^post3+__disjvr_0^post2 == 0 /\ y_6^0-x_5^0 <= 0 /\ result_4^post2-result_4^post3 == 0 /\ __disjvr_0^0-__disjvr_0^post2 == 0 /\ __disjvr_0^post3-__disjvr_0^post2 == 0), cost: 1
	
		propagated equality y_6^post4 = y_6^post3
		
		propagated equality x_5^post4 = x_5^post3
		
		propagated equality __disjvr_0^post4 = __disjvr_0^post3
		
	Propagated Equalities

	Original rule:
	l1 -> l2 : __disjvr_0^0'=__disjvr_0^post3, result_4^0'=result_4^post4, x_5^0'=x_5^post3, y_6^0'=y_6^post3, (0 == 0 /\ y_6^0-y_6^post2 == 0 /\ -result_4^post2+result_4^0 == 0 /\ -x_5^post2+x_5^0 == 0 /\ y_6^post2-y_6^post3 == 0 /\ x_5^post2-x_5^post3 == 0 /\ -__disjvr_0^post3+__disjvr_0^post2 == 0 /\ y_6^0-x_5^0 <= 0 /\ result_4^post2-result_4^post3 == 0 /\ __disjvr_0^0-__disjvr_0^post2 == 0 /\ __disjvr_0^post3-__disjvr_0^post2 == 0), cost: 1
	New rule:
	l1 -> l2 : __disjvr_0^0'=__disjvr_0^0, result_4^0'=result_4^post4, x_5^0'=x_5^0, y_6^0'=y_6^0, (0 == 0 /\ y_6^0-x_5^0 <= 0), cost: 1
	
		propagated equality y_6^post2 = y_6^0
		
		propagated equality result_4^post2 = result_4^0
		
		propagated equality x_5^post2 = x_5^0
		
		propagated equality y_6^post3 = y_6^0
		
		propagated equality x_5^post3 = x_5^0
		
		propagated equality __disjvr_0^post2 = __disjvr_0^post3
		
		propagated equality result_4^post3 = result_4^0
		
		propagated equality __disjvr_0^post3 = __disjvr_0^0
		
	Simplified Guard

	Original rule:
	l1 -> l2 : __disjvr_0^0'=__disjvr_0^0, result_4^0'=result_4^post4, x_5^0'=x_5^0, y_6^0'=y_6^0, (0 == 0 /\ y_6^0-x_5^0 <= 0), cost: 1
	New rule:
	l1 -> l2 : __disjvr_0^0'=__disjvr_0^0, result_4^0'=result_4^post4, x_5^0'=x_5^0, y_6^0'=y_6^0, y_6^0-x_5^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l1 -> l2 : __disjvr_0^0'=__disjvr_0^0, result_4^0'=result_4^post4, x_5^0'=x_5^0, y_6^0'=y_6^0, y_6^0-x_5^0 <= 0, cost: 1
	New rule:
	l1 -> l2 : result_4^0'=result_4^post4, y_6^0-x_5^0 <= 0, cost: 1

Step with 14

	Trace

	14[T]
	
	Blocked

	[{}, {}]

Step with 17

	Trace

	14[T], 17[(y_6^0-x_5^0 <= 0)]
	
	Blocked

	[{}, {}, {}]

Backtrack

	Trace

	14[T]
	
	Blocked

	[{}, {17[T]}]

Step with 15

	Trace

	14[T], 15[(y_6^0-x_5^0 <= 0 /\ y_6^0-x_5^0 == 0 /\ -y_6^0+x_5^0 <= 0)]
	
	Blocked

	[{}, {17[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 17

	Trace

	14[T], 15[(y_6^0-x_5^0 <= 0 /\ y_6^0-x_5^0 == 0 /\ -y_6^0+x_5^0 <= 0)], 17[(y_6^0-x_5^0 <= 0)]
	
	Blocked

	[{}, {17[T]}, {15[T], 16[T]}, {}]

Backtrack

	Trace

	14[T], 15[(y_6^0-x_5^0 <= 0 /\ y_6^0-x_5^0 == 0 /\ -y_6^0+x_5^0 <= 0)]
	
	Blocked

	[{}, {17[T]}, {15[T], 16[T], 17[T]}]

Backtrack

	Trace

	14[T]
	
	Blocked

	[{}, {15[T], 17[T]}]

Step with 16

	Trace

	14[T], 16[(1-y_6^0+x_5^0 <= 0)]
	
	Blocked

	[{}, {15[T], 17[T]}, {}]

Accelerate

Start location: l7
Program variables: result_4^0 x_5^0 y_6^0
  15: l1 -> l1 : x_5^0'=1+x_5^0, (y_6^0-x_5^0 <= 0 /\ y_6^0-x_5^0 == 0 /\ -y_6^0+x_5^0 <= 0), cost: 1
  16: l1 -> l1 : x_5^0'=1+x_5^0, 1-y_6^0+x_5^0 <= 0, cost: 1
  17: l1 -> l2 : result_4^0'=result_4^post4, y_6^0-x_5^0 <= 0, cost: 1
  18: l1 -> l1 : x_5^0'=n+x_5^0, (y_6^0-n-x_5^0 >= 0 /\ -1+n >= 0), cost: 1
  14: l7 -> l1 : T, cost: 1

	Loop Acceleration

	Original rule:
	l1 -> l1 : x_5^0'=1+x_5^0, (1-y_6^0+x_5^0 <= 0), cost: 1
	New rule:
	l1 -> l1 : x_5^0'=n+x_5^0, (y_6^0-n-x_5^0 >= 0 /\ -1+n >= 0), cost: 1

		-1+y_6^0-x_5^0 >= 0 [0]: montonic decrease yields y_6^0-n-x_5^0 >= 0
		
		-1+y_6^0-x_5^0 >= 0 [1]: eventual increase yields (1 <= 0 /\ -1+y_6^0-x_5^0 >= 0)
		
		Replacement map: {-1+y_6^0-x_5^0 >= 0 -> y_6^0-n-x_5^0 >= 0}

	Trace

	14[T], 18[(y_6^0-n-x_5^0 >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {15[T], 17[T]}, {16[T], 18[T]}]

Step with 17

	Trace

	14[T], 18[(y_6^0-n-x_5^0 >= 0 /\ -1+n >= 0)], 17[(y_6^0-x_5^0 <= 0)]
	
	Blocked

	[{}, {15[T], 17[T]}, {16[T], 18[T]}, {}]

Backtrack

	Trace

	14[T], 18[(y_6^0-n-x_5^0 >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {15[T], 17[T]}, {16[T], 17[T], 18[T]}]

Step with 15

	Trace

	14[T], 18[(y_6^0-n-x_5^0 >= 0 /\ -1+n >= 0)], 15[(y_6^0-x_5^0 <= 0 /\ y_6^0-x_5^0 == 0 /\ -y_6^0+x_5^0 <= 0)]
	
	Blocked

	[{}, {15[T], 17[T]}, {16[T], 17[T], 18[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 17

	Trace

	14[T], 18[(y_6^0-n-x_5^0 >= 0 /\ -1+n >= 0)], 15[(y_6^0-x_5^0 <= 0 /\ y_6^0-x_5^0 == 0 /\ -y_6^0+x_5^0 <= 0)], 17[(y_6^0-x_5^0 <= 0)]
	
	Blocked

	[{}, {15[T], 17[T]}, {16[T], 17[T], 18[T]}, {15[T], 16[T], 18[T]}, {}]

Backtrack

	Trace

	14[T], 18[(y_6^0-n-x_5^0 >= 0 /\ -1+n >= 0)], 15[(y_6^0-x_5^0 <= 0 /\ y_6^0-x_5^0 == 0 /\ -y_6^0+x_5^0 <= 0)]
	
	Blocked

	[{}, {15[T], 17[T]}, {16[T], 17[T], 18[T]}, {15[T], 16[T], 17[T], 18[T]}]

Backtrack

	Trace

	14[T], 18[(y_6^0-n-x_5^0 >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {15[T], 17[T]}, {15[T], 16[T], 17[T], 18[T]}]

Backtrack

	Trace

	14[T]
	
	Blocked

	[{}, {15[T], 17[T], 18[T]}]

Step with 16

	Trace

	14[T], 16[(1-y_6^0+x_5^0 <= 0)]
	
	Blocked

	[{}, {15[T], 17[T], 18[T]}, {}]

Covered

	Trace

	14[T]
	
	Blocked

	[{}, {15[T], 16[T], 17[T], 18[T]}]

Backtrack

	Trace

	Blocked

	[{14[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
