unknown

Initial ITS

Start location: l4
Program variables: i^0 j^0 tmp^0
   0: l0 -> l1 : i^0'=i^post1, j^0'=j^post1, tmp^0'=tmp^post1, (-j^post1+j^0 == 0 /\ -tmp^post1+tmp^0 == 0 /\ i^0-i^post1 == 0), cost: 1
   1: l0 -> l1 : i^0'=i^post2, j^0'=j^post2, tmp^0'=tmp^post2, (i^0-i^post2 == 0 /\ -tmp^post2+tmp^0 == 0 /\ -j^post2+j^0 == 0), cost: 1
   2: l1 -> l2 : i^0'=i^post3, j^0'=j^post3, tmp^0'=tmp^post3, (i^0-i^post3 == 0 /\ -tmp^post3+tmp^0 == 0 /\ -j^post3+j^0 == 0), cost: 1
   3: l3 -> l0 : i^0'=i^post4, j^0'=j^post4, tmp^0'=tmp^post4, (0 == 0 /\ -1+j^post4 == 0 /\ i^post4 == 0), cost: 1
   4: l4 -> l3 : i^0'=i^post5, j^0'=j^post5, tmp^0'=tmp^post5, (j^0-j^post5 == 0 /\ -tmp^post5+tmp^0 == 0 /\ -i^post5+i^0 == 0), cost: 1

Chained Linear Paths

Start location: l4
Program variables: i^0 j^0 tmp^0
   0: l0 -> l1 : i^0'=i^post1, j^0'=j^post1, tmp^0'=tmp^post1, (-j^post1+j^0 == 0 /\ -tmp^post1+tmp^0 == 0 /\ i^0-i^post1 == 0), cost: 1
   1: l0 -> l1 : i^0'=i^post2, j^0'=j^post2, tmp^0'=tmp^post2, (i^0-i^post2 == 0 /\ -tmp^post2+tmp^0 == 0 /\ -j^post2+j^0 == 0), cost: 1
   2: l1 -> l2 : i^0'=i^post3, j^0'=j^post3, tmp^0'=tmp^post3, (i^0-i^post3 == 0 /\ -tmp^post3+tmp^0 == 0 /\ -j^post3+j^0 == 0), cost: 1
   5: l4 -> l0 : i^0'=i^post4, j^0'=j^post4, tmp^0'=tmp^post4, (0 == 0 /\ -1+j^post4 == 0 /\ j^0-j^post5 == 0 /\ i^post4 == 0 /\ -tmp^post5+tmp^0 == 0 /\ -i^post5+i^0 == 0), cost: 1

	Eliminating location l3 by chaining:

	Applied chaining

	First rule:
	l4 -> l3 : i^0'=i^post5, j^0'=j^post5, tmp^0'=tmp^post5, (j^0-j^post5 == 0 /\ -tmp^post5+tmp^0 == 0 /\ -i^post5+i^0 == 0), cost: 1
	Second rule:
	l3 -> l0 : i^0'=i^post4, j^0'=j^post4, tmp^0'=tmp^post4, (0 == 0 /\ -1+j^post4 == 0 /\ i^post4 == 0), cost: 1
	New rule:
	l4 -> l0 : i^0'=i^post4, j^0'=j^post4, tmp^0'=tmp^post4, (0 == 0 /\ -1+j^post4 == 0 /\ j^0-j^post5 == 0 /\ i^post4 == 0 /\ -tmp^post5+tmp^0 == 0 /\ -i^post5+i^0 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 3 4

Simplified Transitions

Start location: l4
Program variables: i^0 j^0 tmp^0
   6: l0 -> l1 : T, cost: 1
   7: l0 -> l1 : T, cost: 1
   8: l1 -> l2 : T, cost: 1
   9: l4 -> l0 : i^0'=0, j^0'=1, tmp^0'=tmp^post4, T, cost: 1

	Propagated Equalities

	Original rule:
	l0 -> l1 : i^0'=i^post1, j^0'=j^post1, tmp^0'=tmp^post1, (-j^post1+j^0 == 0 /\ -tmp^post1+tmp^0 == 0 /\ i^0-i^post1 == 0), cost: 1
	New rule:
	l0 -> l1 : i^0'=i^0, j^0'=j^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	
		propagated equality j^post1 = j^0
		
		propagated equality tmp^post1 = tmp^0
		
		propagated equality i^post1 = i^0
		
	Simplified Guard

	Original rule:
	l0 -> l1 : i^0'=i^0, j^0'=j^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	New rule:
	l0 -> l1 : i^0'=i^0, j^0'=j^0, tmp^0'=tmp^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l1 : i^0'=i^0, j^0'=j^0, tmp^0'=tmp^0, T, cost: 1
	New rule:
	l0 -> l1 : T, cost: 1
	
	Propagated Equalities

	Original rule:
	l0 -> l1 : i^0'=i^post2, j^0'=j^post2, tmp^0'=tmp^post2, (i^0-i^post2 == 0 /\ -tmp^post2+tmp^0 == 0 /\ -j^post2+j^0 == 0), cost: 1
	New rule:
	l0 -> l1 : i^0'=i^0, j^0'=j^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	
		propagated equality i^post2 = i^0
		
		propagated equality tmp^post2 = tmp^0
		
		propagated equality j^post2 = j^0
		
	Simplified Guard

	Original rule:
	l0 -> l1 : i^0'=i^0, j^0'=j^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	New rule:
	l0 -> l1 : i^0'=i^0, j^0'=j^0, tmp^0'=tmp^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l0 -> l1 : i^0'=i^0, j^0'=j^0, tmp^0'=tmp^0, T, cost: 1
	New rule:
	l0 -> l1 : T, cost: 1
	
	Propagated Equalities

	Original rule:
	l1 -> l2 : i^0'=i^post3, j^0'=j^post3, tmp^0'=tmp^post3, (i^0-i^post3 == 0 /\ -tmp^post3+tmp^0 == 0 /\ -j^post3+j^0 == 0), cost: 1
	New rule:
	l1 -> l2 : i^0'=i^0, j^0'=j^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	
		propagated equality i^post3 = i^0
		
		propagated equality tmp^post3 = tmp^0
		
		propagated equality j^post3 = j^0
		
	Simplified Guard

	Original rule:
	l1 -> l2 : i^0'=i^0, j^0'=j^0, tmp^0'=tmp^0, 0 == 0, cost: 1
	New rule:
	l1 -> l2 : i^0'=i^0, j^0'=j^0, tmp^0'=tmp^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l1 -> l2 : i^0'=i^0, j^0'=j^0, tmp^0'=tmp^0, T, cost: 1
	New rule:
	l1 -> l2 : T, cost: 1
	
	Propagated Equalities

	Original rule:
	l4 -> l0 : i^0'=i^post4, j^0'=j^post4, tmp^0'=tmp^post4, (0 == 0 /\ -1+j^post4 == 0 /\ j^0-j^post5 == 0 /\ i^post4 == 0 /\ -tmp^post5+tmp^0 == 0 /\ -i^post5+i^0 == 0), cost: 1
	New rule:
	l4 -> l0 : i^0'=0, j^0'=1, tmp^0'=tmp^post4, (0 == 0 /\ j^0-j^post5 == 0 /\ -tmp^post5+tmp^0 == 0 /\ -i^post5+i^0 == 0), cost: 1
	
		propagated equality j^post4 = 1
		
		propagated equality i^post4 = 0
		
	Propagated Equalities

	Original rule:
	l4 -> l0 : i^0'=0, j^0'=1, tmp^0'=tmp^post4, (0 == 0 /\ j^0-j^post5 == 0 /\ -tmp^post5+tmp^0 == 0 /\ -i^post5+i^0 == 0), cost: 1
	New rule:
	l4 -> l0 : i^0'=0, j^0'=1, tmp^0'=tmp^post4, 0 == 0, cost: 1
	
		propagated equality j^post5 = j^0
		
		propagated equality tmp^post5 = tmp^0
		
		propagated equality i^post5 = i^0
		
	Simplified Guard

	Original rule:
	l4 -> l0 : i^0'=0, j^0'=1, tmp^0'=tmp^post4, 0 == 0, cost: 1
	New rule:
	l4 -> l0 : i^0'=0, j^0'=1, tmp^0'=tmp^post4, T, cost: 1

Step with 9

	Trace

	9[T]
	
	Blocked

	[{}, {}]

Step with 6

	Trace

	9[T], 6[T]
	
	Blocked

	[{}, {}, {}]

Step with 8

	Trace

	9[T], 6[T], 8[T]
	
	Blocked

	[{}, {}, {}, {}]

Backtrack

	Trace

	9[T], 6[T]
	
	Blocked

	[{}, {}, {8[T]}]

Backtrack

	Trace

	9[T]
	
	Blocked

	[{}, {6[T]}]

Step with 7

	Trace

	9[T], 7[T]
	
	Blocked

	[{}, {6[T]}, {}]

Step with 8

	Trace

	9[T], 7[T], 8[T]
	
	Blocked

	[{}, {6[T]}, {}, {}]

Backtrack

	Trace

	9[T], 7[T]
	
	Blocked

	[{}, {6[T]}, {8[T]}]

Backtrack

	Trace

	9[T]
	
	Blocked

	[{}, {6[T], 7[T]}]

Backtrack

	Trace

	Blocked

	[{9[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
