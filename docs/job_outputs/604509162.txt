YES

Solver Timeout: 4
Global Timeout: 300
No parsing errors!
Init Location: 0
Transitions:
<l0, l6, true>
<l1, l2, (arg1 > 0), par{arg1 -> undef1, arg2 -> undef2}>
<l3, l2, (arg1 > 0), par{arg1 -> arg2, arg2 -> undef4}>
<l3, l4, (arg2 > ~(1)) /\ (undef5 > ~(1)) /\ (arg1 > 0), par{arg1 -> undef5, arg2 -> undef6}>
<l4, l4, (arg1 > 0), par{arg1 -> (arg1 - 1), arg2 -> undef8}>
<l2, l5, (undef9 > 0) /\ (arg1 > 1), par{arg1 -> undef9, arg2 -> undef10}>
<l5, l5, (arg1 > 0), par{arg1 -> (arg1 - 1), arg2 -> undef12}>
<l6, l3, true, par{arg1 -> undef13, arg2 -> undef14}>

Fresh variables:
undef1, undef2, undef4, undef5, undef6, undef8, undef9, undef10, undef12, undef13, undef14, 

Undef variables:
undef1, undef2, undef4, undef5, undef6, undef8, undef9, undef10, undef12, undef13, undef14, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l5, (undef13 > 0) /\ (undef9 > 0) /\ (undef14 > 1), par{arg1 -> undef9}>
<l0, l4, (undef14 > ~(1)) /\ (undef5 > ~(1)) /\ (undef13 > 0), par{arg1 -> undef5}>
<l4, l4, (arg1 > 0), par{arg1 -> (arg1 - 1)}>
<l5, l5, (arg1 > 0), par{arg1 -> (arg1 - 1)}>

Fresh variables:
undef1, undef2, undef4, undef5, undef6, undef8, undef9, undef10, undef12, undef13, undef14, 

Undef variables:
undef1, undef2, undef4, undef5, undef6, undef8, undef9, undef10, undef12, undef13, undef14, 

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l4, l4, 1 <= arg1, {arg1 -> -1 + arg1, rest remain the same}>
Variables:
arg1

Graph 2:
Transitions:
<l5, l5, 1 <= arg1, {arg1 -> -1 + arg1, rest remain the same}>
Variables:
arg1

Precedence: 
Graph 0

Graph 1
<l0, l4, 0 <= undef5 /\ 0 <= undef14 /\ 1 <= undef13, {arg1 -> undef5, rest remain the same}>

Graph 2
<l0, l5, 1 <= undef9 /\ 1 <= undef13 /\ 2 <= undef14, {arg1 -> undef9, rest remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 4 , 1 )
( 5 , 2 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.001556

Checking conditional termination of SCC {l4}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000545s
[33mRanking function: [36m-1 + arg1[0m
New Graphs: 
Proving termination of subgraph 2
Checking unfeasibility...
Time used: 0.001178

Checking conditional termination of SCC {l5}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000343s
[33mRanking function: [36m-1 + arg1[0m
New Graphs: 
[32mProgram Terminates[0m
