unknown

Initial ITS

Start location: __init
Program variables: arg1 arg2
   0: f1_0_main_Load -> f66_0_nest_NE : arg1'=arg1p1, arg2'=arg2p1, (arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0), cost: 1
   1: f66_0_nest_NE -> f66_0_nest_NE : arg1'=arg1p2, arg2'=arg2p2, (-1+arg1-arg1p2 == 0 /\ arg1 > 0 /\ -1 < 0), cost: 1
   2: f66_0_nest_NE -> f115_0_nest_InvokeMethod : arg1'=arg1p3, arg2'=arg2p3, (1-arg1 == 0 /\ 1-arg1p3 == 0), cost: 1
   4: f66_0_nest_NE -> f115_0_nest_InvokeMethod : arg1'=arg1p5, arg2'=arg2p5, (arg1 > 0 /\ -1 < 0 /\ arg1-arg1p5 == 0), cost: 1
   3: f115_0_nest_InvokeMethod -> f66_0_nest_NE : arg1'=arg1p4, arg2'=arg2p4, (-arg1p4 == 0 /\ arg1 > 0), cost: 1
   5: __init -> f1_0_main_Load : arg1'=arg1p6, arg2'=arg2p6, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2
   1: f66_0_nest_NE -> f66_0_nest_NE : arg1'=arg1p2, arg2'=arg2p2, (-1+arg1-arg1p2 == 0 /\ arg1 > 0 /\ -1 < 0), cost: 1
   2: f66_0_nest_NE -> f115_0_nest_InvokeMethod : arg1'=arg1p3, arg2'=arg2p3, (1-arg1 == 0 /\ 1-arg1p3 == 0), cost: 1
   4: f66_0_nest_NE -> f115_0_nest_InvokeMethod : arg1'=arg1p5, arg2'=arg2p5, (arg1 > 0 /\ -1 < 0 /\ arg1-arg1p5 == 0), cost: 1
   3: f115_0_nest_InvokeMethod -> f66_0_nest_NE : arg1'=arg1p4, arg2'=arg2p4, (-arg1p4 == 0 /\ arg1 > 0), cost: 1
   6: __init -> f66_0_nest_NE : arg1'=arg1p1, arg2'=arg2p1, (arg1p6 > 0 /\ 1+arg1p1 > 0 /\ arg2p6 > 0), cost: 1

	Eliminating location f1_0_main_Load by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_Load : arg1'=arg1p6, arg2'=arg2p6, T, cost: 1
	Second rule:
	f1_0_main_Load -> f66_0_nest_NE : arg1'=arg1p1, arg2'=arg2p1, (arg1 > 0 /\ 1+arg1p1 > 0 /\ arg2 > 0), cost: 1
	New rule:
	__init -> f66_0_nest_NE : arg1'=arg1p1, arg2'=arg2p1, (arg1p6 > 0 /\ 1+arg1p1 > 0 /\ arg2p6 > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 5

Simplified Transitions

Start location: __init
Program variables: arg1 arg2
   7: f66_0_nest_NE -> f66_0_nest_NE : arg1'=-1+arg1, arg2'=arg2p2, arg1 > 0, cost: 1
   8: f66_0_nest_NE -> f115_0_nest_InvokeMethod : arg1'=1, arg2'=arg2p3, 1-arg1 == 0, cost: 1
  10: f66_0_nest_NE -> f115_0_nest_InvokeMethod : arg2'=arg2p5, arg1 > 0, cost: 1
   9: f115_0_nest_InvokeMethod -> f66_0_nest_NE : arg1'=0, arg2'=arg2p4, arg1 > 0, cost: 1
  11: __init -> f66_0_nest_NE : arg1'=arg1p1, arg2'=arg2p1, (1+arg1p1 > 0), cost: 1

	Propagated Equalities

	Original rule:
	f66_0_nest_NE -> f66_0_nest_NE : arg1'=arg1p2, arg2'=arg2p2, (-1+arg1-arg1p2 == 0 /\ arg1 > 0 /\ -1 < 0), cost: 1
	New rule:
	f66_0_nest_NE -> f66_0_nest_NE : arg1'=-1+arg1, arg2'=arg2p2, (0 == 0 /\ arg1 > 0 /\ -1 < 0), cost: 1
	
		propagated equality arg1p2 = -1+arg1
		
	Simplified Guard

	Original rule:
	f66_0_nest_NE -> f66_0_nest_NE : arg1'=-1+arg1, arg2'=arg2p2, (0 == 0 /\ arg1 > 0 /\ -1 < 0), cost: 1
	New rule:
	f66_0_nest_NE -> f66_0_nest_NE : arg1'=-1+arg1, arg2'=arg2p2, arg1 > 0, cost: 1
	
	Propagated Equalities

	Original rule:
	f66_0_nest_NE -> f115_0_nest_InvokeMethod : arg1'=arg1p3, arg2'=arg2p3, (1-arg1 == 0 /\ 1-arg1p3 == 0), cost: 1
	New rule:
	f66_0_nest_NE -> f115_0_nest_InvokeMethod : arg1'=1, arg2'=arg2p3, (0 == 0 /\ 1-arg1 == 0), cost: 1
	
		propagated equality arg1p3 = 1
		
	Simplified Guard

	Original rule:
	f66_0_nest_NE -> f115_0_nest_InvokeMethod : arg1'=1, arg2'=arg2p3, (0 == 0 /\ 1-arg1 == 0), cost: 1
	New rule:
	f66_0_nest_NE -> f115_0_nest_InvokeMethod : arg1'=1, arg2'=arg2p3, 1-arg1 == 0, cost: 1
	
	Propagated Equalities

	Original rule:
	f115_0_nest_InvokeMethod -> f66_0_nest_NE : arg1'=arg1p4, arg2'=arg2p4, (-arg1p4 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f115_0_nest_InvokeMethod -> f66_0_nest_NE : arg1'=0, arg2'=arg2p4, (0 == 0 /\ arg1 > 0), cost: 1
	
		propagated equality arg1p4 = 0
		
	Simplified Guard

	Original rule:
	f115_0_nest_InvokeMethod -> f66_0_nest_NE : arg1'=0, arg2'=arg2p4, (0 == 0 /\ arg1 > 0), cost: 1
	New rule:
	f115_0_nest_InvokeMethod -> f66_0_nest_NE : arg1'=0, arg2'=arg2p4, arg1 > 0, cost: 1
	
	Propagated Equalities

	Original rule:
	f66_0_nest_NE -> f115_0_nest_InvokeMethod : arg1'=arg1p5, arg2'=arg2p5, (arg1 > 0 /\ -1 < 0 /\ arg1-arg1p5 == 0), cost: 1
	New rule:
	f66_0_nest_NE -> f115_0_nest_InvokeMethod : arg1'=arg1, arg2'=arg2p5, (0 == 0 /\ arg1 > 0 /\ -1 < 0), cost: 1
	
		propagated equality arg1p5 = arg1
		
	Simplified Guard

	Original rule:
	f66_0_nest_NE -> f115_0_nest_InvokeMethod : arg1'=arg1, arg2'=arg2p5, (0 == 0 /\ arg1 > 0 /\ -1 < 0), cost: 1
	New rule:
	f66_0_nest_NE -> f115_0_nest_InvokeMethod : arg1'=arg1, arg2'=arg2p5, arg1 > 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	f66_0_nest_NE -> f115_0_nest_InvokeMethod : arg1'=arg1, arg2'=arg2p5, arg1 > 0, cost: 1
	New rule:
	f66_0_nest_NE -> f115_0_nest_InvokeMethod : arg2'=arg2p5, arg1 > 0, cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	__init -> f66_0_nest_NE : arg1'=arg1p1, arg2'=arg2p1, (arg1p6 > 0 /\ 1+arg1p1 > 0 /\ arg2p6 > 0), cost: 1
	New rule:
	__init -> f66_0_nest_NE : arg1'=arg1p1, arg2'=arg2p1, (1+arg1p1 > 0), cost: 1

Step with 11

	Trace

	11[(1+arg1p1 > 0)]
	
	Blocked

	[{}, {}]

Step with 7

	Trace

	11[(1+arg1p1 > 0)], 7[(arg1 > 0)]
	
	Blocked

	[{}, {}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2
   7: f66_0_nest_NE -> f66_0_nest_NE : arg1'=-1+arg1, arg2'=arg2p2, arg1 > 0, cost: 1
   8: f66_0_nest_NE -> f115_0_nest_InvokeMethod : arg1'=1, arg2'=arg2p3, 1-arg1 == 0, cost: 1
  10: f66_0_nest_NE -> f115_0_nest_InvokeMethod : arg2'=arg2p5, arg1 > 0, cost: 1
  12: f66_0_nest_NE -> f66_0_nest_NE : arg1'=-n+arg1, arg2'=arg2p2, (1-n+arg1 > 0 /\ -1+n >= 0), cost: 1
   9: f115_0_nest_InvokeMethod -> f66_0_nest_NE : arg1'=0, arg2'=arg2p4, arg1 > 0, cost: 1
  11: __init -> f66_0_nest_NE : arg1'=arg1p1, arg2'=arg2p1, (1+arg1p1 > 0), cost: 1

	Loop Acceleration

	Original rule:
	f66_0_nest_NE -> f66_0_nest_NE : arg1'=-1+arg1, arg2'=arg2p2, (arg1 > 0), cost: 1
	New rule:
	f66_0_nest_NE -> f66_0_nest_NE : arg1'=-n+arg1, arg2'=arg2p2, (1-n+arg1 > 0 /\ -1+n >= 0), cost: 1

		arg1 > 0 [0]: montonic decrease yields 1-n+arg1 > 0
		
		arg1 > 0 [1]: eventual increase yields (1 <= 0 /\ arg1 > 0)
		
		Replacement map: {arg1 > 0 -> 1-n+arg1 > 0}

	Trace

	11[(1+arg1p1 > 0)], 12[(1-n+arg1 > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {}, {7[T], 12[T]}]

Step with 8

	Trace

	11[(1+arg1p1 > 0)], 12[(1-n+arg1 > 0 /\ -1+n >= 0)], 8[(1-arg1 == 0)]
	
	Blocked

	[{}, {}, {7[T], 12[T]}, {}]

Step with 9

	Trace

	11[(1+arg1p1 > 0)], 12[(1-n+arg1 > 0 /\ -1+n >= 0)], 8[(1-arg1 == 0)], 9[(arg1 > 0)]
	
	Blocked

	[{}, {}, {7[T], 12[T]}, {}, {}]

Acceleration Failed

marked recursive suffix as redundant

Acceleration Failed

marked recursive suffix as redundant

Backtrack

	Trace

	11[(1+arg1p1 > 0)], 12[(1-n+arg1 > 0 /\ -1+n >= 0)], 8[(1-arg1 == 0)]
	
	Blocked

	[{}, {}, {7[T], 12[T]}, {9[T]}]

Backtrack

	Trace

	11[(1+arg1p1 > 0)], 12[(1-n+arg1 > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {}, {7[T], 8[T], 12[T]}]

Step with 10

	Trace

	11[(1+arg1p1 > 0)], 12[(1-n+arg1 > 0 /\ -1+n >= 0)], 10[(arg1 > 0)]
	
	Blocked

	[{}, {}, {7[T], 8[T], 12[T]}, {}]

Step with 9

	Trace

	11[(1+arg1p1 > 0)], 12[(1-n+arg1 > 0 /\ -1+n >= 0)], 10[(arg1 > 0)], 9[(arg1 > 0)]
	
	Blocked

	[{}, {}, {7[T], 8[T], 12[T]}, {}, {}]

Acceleration Failed

marked recursive suffix as redundant

Acceleration Failed

marked recursive suffix as redundant

Backtrack

	Trace

	11[(1+arg1p1 > 0)], 12[(1-n+arg1 > 0 /\ -1+n >= 0)], 10[(arg1 > 0)]
	
	Blocked

	[{}, {}, {7[T], 8[T], 12[T]}, {9[T]}]

Backtrack

	Trace

	11[(1+arg1p1 > 0)], 12[(1-n+arg1 > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {}, {7[T], 8[T], 10[T], 12[T]}]

Backtrack

	Trace

	11[(1+arg1p1 > 0)]
	
	Blocked

	[{}, {12[T]}]

Step with 10

	Trace

	11[(1+arg1p1 > 0)], 10[(arg1 > 0)]
	
	Blocked

	[{}, {12[T]}, {}]

Step with 9

	Trace

	11[(1+arg1p1 > 0)], 10[(arg1 > 0)], 9[(arg1 > 0)]
	
	Blocked

	[{}, {12[T]}, {}, {}]

Backtrack

	Trace

	11[(1+arg1p1 > 0)], 10[(arg1 > 0)]
	
	Blocked

	[{}, {12[T]}, {9[T]}]

Backtrack

	Trace

	11[(1+arg1p1 > 0)]
	
	Blocked

	[{}, {10[T], 12[T]}]

Step with 7

	Trace

	11[(1+arg1p1 > 0)], 7[(arg1 > 0)]
	
	Blocked

	[{}, {10[T], 12[T]}, {}]

Covered

	Trace

	11[(1+arg1p1 > 0)]
	
	Blocked

	[{}, {7[T], 10[T], 12[T]}]

Step with 8

	Trace

	11[(1+arg1p1 > 0)], 8[(1-arg1 == 0)]
	
	Blocked

	[{}, {7[T], 10[T], 12[T]}, {}]

Step with 9

	Trace

	11[(1+arg1p1 > 0)], 8[(1-arg1 == 0)], 9[(arg1 > 0)]
	
	Blocked

	[{}, {7[T], 10[T], 12[T]}, {}, {}]

Backtrack

	Trace

	11[(1+arg1p1 > 0)], 8[(1-arg1 == 0)]
	
	Blocked

	[{}, {7[T], 10[T], 12[T]}, {9[T]}]

Backtrack

	Trace

	11[(1+arg1p1 > 0)]
	
	Blocked

	[{}, {7[T], 8[T], 10[T], 12[T]}]

Backtrack

	Trace

	Blocked

	[{11[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
