YES

Solver Timeout: 4
Global Timeout: 300
Maximum number of concurrent processes: 900
*******************************************************************************************
*********************** UNPROCESSED TRANSITION SYSTEMS PER FUNCTION ***********************
*******************************************************************************************


List of LLVMGraphs + assumeNodes + staticAssertNodes [1] :

+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++
+                                                                  +
Init Location: 0
Transitions:
<l0, l1, true, seq{main__func_return_ -> 0, main_x -> Â¿functionCall(__VERIFIER_nondet_int), main_y -> Â¿functionCall(__VERIFIER_nondet_int), main_z -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l1, l2, true>
<l2, l11, not((main_x > 0))>
<l2, l3, (main_x > 0)>
<l3, l11, not((main_y > 0))>
<l3, l4, (main_y > 0)>
<l4, l11, not((main_z > 0))>
<l4, l5, (main_z > 0)>
<l5, l6, (main_y > main_x)>
<l5, l8, not((main_y > main_x))>
<l6, l7, true, seq{main_y -> main_z, main_x -> Â¿functionCall(__VERIFIER_nondet_int), main_z -> (main_x - 1)}>
<l7, l10, true>
<l8, l9, true, seq{main_z -> (main_z - 1), main_x -> Â¿functionCall(__VERIFIER_nondet_int), main_y -> (main_x - 1)}>
<l9, l10, true>
<l10, l2, true>
<l11, l12, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

+ Assume Nodes [0]: ++++++++++++++++++++++++++++++++++++++++++++++++
       
+ Static Assert Nodes [0]: +++++++++++++++++++++++++++++++++++++++++
       
+ After preprocess (paralelization): ++++++++++++++++++++++++++++++

Init Location: 0
Transitions:
<l0, l13, true, seq{main__func_return_ -> 0}>
<l13, l14, true, seq{varCall_1 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l14, l15, true, seq{main_x -> varCall_1}>
<l15, l16, true, seq{varCall_2 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l16, l17, true, seq{main_y -> varCall_2}>
<l17, l18, true, seq{varCall_3 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l18, l1, true, seq{main_z -> varCall_3}>
<l1, l2, true>
<l2, l3, (main_x > 0)>
<l2, l11, not((main_x > 0))>
<l3, l4, (main_y > 0)>
<l3, l11, not((main_y > 0))>
<l4, l5, (main_z > 0)>
<l4, l11, not((main_z > 0))>
<l5, l6, (main_y > main_x)>
<l5, l8, not((main_y > main_x))>
<l6, l19, true, seq{main_y -> main_z}>
<l19, l20, true, seq{varCall_4 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l20, l7, true, seq{main_x -> varCall_4, main_z -> (main_x - 1)}>
<l7, l10, true>
<l8, l21, true, seq{main_z -> (main_z - 1)}>
<l21, l22, true, seq{varCall_5 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l22, l9, true, seq{main_x -> varCall_5, main_y -> (main_x - 1)}>
<l9, l10, true>
<l10, l2, true>
<l11, l12, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:
12, 
Accepting locations:

Asserts:

+                                                                  +
+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++


Function Return and Parameters Information [2 functions]:
    function name: __VERIFIER_nondet_int [1 return + 0 parameters]        demangled: __VERIFIER_nondet_int
        __VERIFIER_nondet_int__func_return_      [function result] : int
    function name: main [1 return + 0 parameters]        demangled: main
        main__func_return_      [function result] : int


AST Ident Scanner Information [5 idents]:
__VERIFIER_nondet_int | function | [integer, ()] | <line: 12, col: 1> | <line: 16, col: 6> <line: 17, col: 6> <line: 18, col: 6> <line: 23, col: 8> <line: 27, col: 8>
main | function | [integer, ()] | <line: 14, col: 1>
x | local variable | integer | <line: 15, col: 5> | <line: 16, col: 2> <line: 20, col: 9> <line: 21, col: 11> <line: 23, col: 4> <line: 24, col: 8> <line: 27, col: 4> <line: 28, col: 8>
y | local variable | integer | <line: 15, col: 5> | <line: 17, col: 2> <line: 20, col: 18> <line: 21, col: 7> <line: 22, col: 4> <line: 28, col: 4>
z | local variable | integer | <line: 15, col: 5> | <line: 18, col: 2> <line: 20, col: 27> <line: 22, col: 8> <line: 24, col: 4> <line: 26, col: 4> <line: 26, col: 8>

Main function: main
Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l2, (main_x = undef6) /\ (main_y = undef7) /\ (main_z = undef8)>
<l2, l2, (main_x > 0) /\ (main_y > 0) /\ (main_z > 0) /\ (main_y > main_x), par{main_x -> undef9, main_y -> main_z, main_z -> (undef9 - 1)}>
<l2, l2, (main_x > 0) /\ (main_y > 0) /\ (main_z > 0) /\ not((main_y > main_x)), par{main_x -> undef10, main_y -> (undef10 - 1), main_z -> (main_z - 1)}>
<l2, l12, (main_x > 0) /\ (main_y > 0) /\ not((main_z > 0))>
<l2, l12, (main_x > 0) /\ not((main_y > 0))>
<l2, l12, not((main_x > 0))>

Fresh variables:
undef6, undef7, undef8, undef9, undef10, 

Undef variables:
undef6, undef7, undef8, undef9, undef10, 

Abstraction variables:

Exit nodes:
12, 
Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l2, l2, 1 + main_x <= main_y /\ 1 <= main_x /\ 1 <= main_y /\ 1 <= main_z, {main_x -> undef9, main_y -> main_z, main_z -> -1 + undef9, rest remain the same}>
<l2, l2, main_y <= main_x /\ 1 <= main_x /\ 1 <= main_y /\ 1 <= main_z, {main_x -> undef10, main_y -> -1 + undef10, main_z -> -1 + main_z, rest remain the same}>
Variables:
main_x, main_y, main_z

Graph 2:
Transitions:
Variables:

Precedence: 
Graph 0

Graph 1
<l0, l2, main_x = undef6 /\ main_y = undef7 /\ main_z = undef8, {all remain the same}>

Graph 2
<l2, l12, main_z <= 0 /\ 1 <= main_x /\ 1 <= main_y, {all remain the same}>
<l2, l12, main_y <= 0 /\ 1 <= main_x, {all remain the same}>
<l2, l12, main_x <= 0, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 2 , 1 )
( 12 , 2 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.004031

Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000866s

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.007464s
[11674 : 11676]
[11674 : 11677]
Successful child: 11677
[33mRanking function: [36mmain_z
[33mRanking function and negation of Quasi-Invariant applied[0m
New Graphs: 
Transitions:
<l2, l2, 1 + main_x <= main_y /\ 1 <= main_x /\ 1 <= main_y /\ 1 <= main_z, {main_x -> undef9, main_y -> main_z, main_z -> -1 + undef9, rest remain the same}>
Variables:
main_x, main_y, main_z
Checking conditional termination of SCC {l2}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000799s
[33mRanking function: [36m-1 + (~(1) / 2)*main_x + (1 / 2)*main_y + (1 / 2)*main_z[0m
New Graphs: 
Proving termination of subgraph 2
Analyzing SCC {l12}...
No cycles found.

[32mProgram Terminates[0m
