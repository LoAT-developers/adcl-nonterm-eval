unknown

Initial ITS

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5
   0: f1_0_main_Load -> f370_0_div_LT : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, arg5'=arg5p1, (1+arg2p1 > 0 /\ -arg1p1 == 0 /\ 1+arg2 > 0 /\ 1+arg3p1 > 0 /\ arg1 > 0), cost: 1
   1: f370_0_div_LT -> f398_0_minus_EQ : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, arg4'=arg4p2, arg5'=arg5p2, (-arg2p2+arg1 == 0 /\ arg3 > 0 /\ arg3-arg2 <= 0 /\ arg3-arg5p2 == 0 /\ -arg3p2+arg2 == 0 /\ arg3-arg1p2 == 0 /\ arg3-arg4p2 == 0), cost: 1
   2: f398_0_minus_EQ -> f398_0_minus_EQ : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, arg4'=arg4p3, arg5'=arg5p3, (-arg1p3+arg1 == 0 /\ -arg5+arg4 == 0 /\ 1-arg4p3+arg4 == 0 /\ 1+arg3-arg3p3 == 0 /\ -arg2p3+arg2 == 0 /\ 1-arg5p3+arg4 == 0 /\ -1+arg4 < 0 /\ arg4 < 0), cost: 1
   3: f398_0_minus_EQ -> f398_0_minus_EQ : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, arg4'=arg4p4, arg5'=arg5p4, (1-arg4p4+arg4 == 0 /\ -arg5+arg4 == 0 /\ -arg2p4+arg2 == 0 /\ 1+arg3-arg3p4 == 0 /\ arg1-arg1p4 == 0 /\ -1+arg4 < 0 /\ 1+arg4-arg5p4 == 0 /\ arg4 > 0), cost: 1
   4: f398_0_minus_EQ -> f398_0_minus_EQ : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, arg4'=arg4p5, arg5'=arg5p5, (-arg1p5+arg1 == 0 /\ -arg5+arg4 == 0 /\ -1-arg5p5+arg4 == 0 /\ -1+arg3-arg3p5 == 0 /\ arg4 > 0 /\ -arg2p5+arg2 == 0 /\ -1-arg4p5+arg4 == 0), cost: 1
   5: f398_0_minus_EQ -> f370_0_div_LT : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, arg4'=arg4p6, arg5'=arg5p6, (-arg2p6+arg3 == 0 /\ 1+arg2 > 0 /\ -arg4 == 0 /\ -arg3p6+arg1 == 0 /\ 1-arg1p6+arg2 == 0 /\ -arg5 == 0), cost: 1
   6: __init -> f1_0_main_Load : arg1'=arg1p7, arg2'=arg2p7, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5
   1: f370_0_div_LT -> f398_0_minus_EQ : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, arg4'=arg4p2, arg5'=arg5p2, (-arg2p2+arg1 == 0 /\ arg3 > 0 /\ arg3-arg2 <= 0 /\ arg3-arg5p2 == 0 /\ -arg3p2+arg2 == 0 /\ arg3-arg1p2 == 0 /\ arg3-arg4p2 == 0), cost: 1
   2: f398_0_minus_EQ -> f398_0_minus_EQ : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, arg4'=arg4p3, arg5'=arg5p3, (-arg1p3+arg1 == 0 /\ -arg5+arg4 == 0 /\ 1-arg4p3+arg4 == 0 /\ 1+arg3-arg3p3 == 0 /\ -arg2p3+arg2 == 0 /\ 1-arg5p3+arg4 == 0 /\ -1+arg4 < 0 /\ arg4 < 0), cost: 1
   3: f398_0_minus_EQ -> f398_0_minus_EQ : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, arg4'=arg4p4, arg5'=arg5p4, (1-arg4p4+arg4 == 0 /\ -arg5+arg4 == 0 /\ -arg2p4+arg2 == 0 /\ 1+arg3-arg3p4 == 0 /\ arg1-arg1p4 == 0 /\ -1+arg4 < 0 /\ 1+arg4-arg5p4 == 0 /\ arg4 > 0), cost: 1
   4: f398_0_minus_EQ -> f398_0_minus_EQ : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, arg4'=arg4p5, arg5'=arg5p5, (-arg1p5+arg1 == 0 /\ -arg5+arg4 == 0 /\ -1-arg5p5+arg4 == 0 /\ -1+arg3-arg3p5 == 0 /\ arg4 > 0 /\ -arg2p5+arg2 == 0 /\ -1-arg4p5+arg4 == 0), cost: 1
   5: f398_0_minus_EQ -> f370_0_div_LT : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, arg4'=arg4p6, arg5'=arg5p6, (-arg2p6+arg3 == 0 /\ 1+arg2 > 0 /\ -arg4 == 0 /\ -arg3p6+arg1 == 0 /\ 1-arg1p6+arg2 == 0 /\ -arg5 == 0), cost: 1
   7: __init -> f370_0_div_LT : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, arg5'=arg5p1, (1+arg2p1 > 0 /\ -arg1p1 == 0 /\ arg1p7 > 0 /\ 1+arg3p1 > 0 /\ 1+arg2p7 > 0), cost: 1

	Eliminating location f1_0_main_Load by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_Load : arg1'=arg1p7, arg2'=arg2p7, arg3'=arg3p7, arg4'=arg4p7, arg5'=arg5p7, T, cost: 1
	Second rule:
	f1_0_main_Load -> f370_0_div_LT : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, arg5'=arg5p1, (1+arg2p1 > 0 /\ -arg1p1 == 0 /\ 1+arg2 > 0 /\ 1+arg3p1 > 0 /\ arg1 > 0), cost: 1
	New rule:
	__init -> f370_0_div_LT : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, arg5'=arg5p1, (1+arg2p1 > 0 /\ -arg1p1 == 0 /\ arg1p7 > 0 /\ 1+arg3p1 > 0 /\ 1+arg2p7 > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 6

Simplified Transitions

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5
   8: f370_0_div_LT -> f398_0_minus_EQ : arg1'=arg3, arg2'=arg1, arg3'=arg2, arg4'=arg3, arg5'=arg3, (arg3 > 0 /\ arg3-arg2 <= 0), cost: 1
   9: f398_0_minus_EQ -> f398_0_minus_EQ : arg3'=1+arg3, arg4'=1+arg4, arg5'=1+arg4, (-arg5+arg4 == 0 /\ -1+arg4 < 0 /\ arg4 < 0), cost: 1
  10: f398_0_minus_EQ -> f398_0_minus_EQ : arg3'=1+arg3, arg4'=1+arg4, arg5'=1+arg4, (-arg5+arg4 == 0 /\ -1+arg4 < 0 /\ arg4 > 0), cost: 1
  11: f398_0_minus_EQ -> f398_0_minus_EQ : arg3'=-1+arg3, arg4'=-1+arg4, arg5'=-1+arg4, (-arg5+arg4 == 0 /\ arg4 > 0), cost: 1
  12: f398_0_minus_EQ -> f370_0_div_LT : arg1'=1+arg2, arg2'=arg3, arg3'=arg1, arg4'=arg4p6, arg5'=arg5p6, (1+arg2 > 0 /\ -arg4 == 0 /\ -arg5 == 0), cost: 1
  13: __init -> f370_0_div_LT : arg1'=0, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, arg5'=arg5p1, (1+arg2p1 > 0 /\ 1+arg3p1 > 0), cost: 1

	Propagated Equalities

	Original rule:
	f370_0_div_LT -> f398_0_minus_EQ : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, arg4'=arg4p2, arg5'=arg5p2, (-arg2p2+arg1 == 0 /\ arg3 > 0 /\ arg3-arg2 <= 0 /\ arg3-arg5p2 == 0 /\ -arg3p2+arg2 == 0 /\ arg3-arg1p2 == 0 /\ arg3-arg4p2 == 0), cost: 1
	New rule:
	f370_0_div_LT -> f398_0_minus_EQ : arg1'=arg3, arg2'=arg1, arg3'=arg2, arg4'=arg3, arg5'=arg3, (0 == 0 /\ arg3 > 0 /\ arg3-arg2 <= 0), cost: 1
	
		propagated equality arg2p2 = arg1
		
		propagated equality arg5p2 = arg3
		
		propagated equality arg3p2 = arg2
		
		propagated equality arg1p2 = arg3
		
		propagated equality arg4p2 = arg3
		
	Simplified Guard

	Original rule:
	f370_0_div_LT -> f398_0_minus_EQ : arg1'=arg3, arg2'=arg1, arg3'=arg2, arg4'=arg3, arg5'=arg3, (0 == 0 /\ arg3 > 0 /\ arg3-arg2 <= 0), cost: 1
	New rule:
	f370_0_div_LT -> f398_0_minus_EQ : arg1'=arg3, arg2'=arg1, arg3'=arg2, arg4'=arg3, arg5'=arg3, (arg3 > 0 /\ arg3-arg2 <= 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f398_0_minus_EQ -> f398_0_minus_EQ : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, arg4'=arg4p3, arg5'=arg5p3, (-arg1p3+arg1 == 0 /\ -arg5+arg4 == 0 /\ 1-arg4p3+arg4 == 0 /\ 1+arg3-arg3p3 == 0 /\ -arg2p3+arg2 == 0 /\ 1-arg5p3+arg4 == 0 /\ -1+arg4 < 0 /\ arg4 < 0), cost: 1
	New rule:
	f398_0_minus_EQ -> f398_0_minus_EQ : arg1'=arg1, arg2'=arg2, arg3'=1+arg3, arg4'=1+arg4, arg5'=1+arg4, (0 == 0 /\ -arg5+arg4 == 0 /\ -1+arg4 < 0 /\ arg4 < 0), cost: 1
	
		propagated equality arg1p3 = arg1
		
		propagated equality arg4p3 = 1+arg4
		
		propagated equality arg3p3 = 1+arg3
		
		propagated equality arg2p3 = arg2
		
		propagated equality arg5p3 = 1+arg4
		
	Simplified Guard

	Original rule:
	f398_0_minus_EQ -> f398_0_minus_EQ : arg1'=arg1, arg2'=arg2, arg3'=1+arg3, arg4'=1+arg4, arg5'=1+arg4, (0 == 0 /\ -arg5+arg4 == 0 /\ -1+arg4 < 0 /\ arg4 < 0), cost: 1
	New rule:
	f398_0_minus_EQ -> f398_0_minus_EQ : arg1'=arg1, arg2'=arg2, arg3'=1+arg3, arg4'=1+arg4, arg5'=1+arg4, (-arg5+arg4 == 0 /\ -1+arg4 < 0 /\ arg4 < 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f398_0_minus_EQ -> f398_0_minus_EQ : arg1'=arg1, arg2'=arg2, arg3'=1+arg3, arg4'=1+arg4, arg5'=1+arg4, (-arg5+arg4 == 0 /\ -1+arg4 < 0 /\ arg4 < 0), cost: 1
	New rule:
	f398_0_minus_EQ -> f398_0_minus_EQ : arg3'=1+arg3, arg4'=1+arg4, arg5'=1+arg4, (-arg5+arg4 == 0 /\ -1+arg4 < 0 /\ arg4 < 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f398_0_minus_EQ -> f398_0_minus_EQ : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, arg4'=arg4p4, arg5'=arg5p4, (1-arg4p4+arg4 == 0 /\ -arg5+arg4 == 0 /\ -arg2p4+arg2 == 0 /\ 1+arg3-arg3p4 == 0 /\ arg1-arg1p4 == 0 /\ -1+arg4 < 0 /\ 1+arg4-arg5p4 == 0 /\ arg4 > 0), cost: 1
	New rule:
	f398_0_minus_EQ -> f398_0_minus_EQ : arg1'=arg1, arg2'=arg2, arg3'=1+arg3, arg4'=1+arg4, arg5'=1+arg4, (0 == 0 /\ -arg5+arg4 == 0 /\ -1+arg4 < 0 /\ arg4 > 0), cost: 1
	
		propagated equality arg4p4 = 1+arg4
		
		propagated equality arg2p4 = arg2
		
		propagated equality arg3p4 = 1+arg3
		
		propagated equality arg1p4 = arg1
		
		propagated equality arg5p4 = 1+arg4
		
	Simplified Guard

	Original rule:
	f398_0_minus_EQ -> f398_0_minus_EQ : arg1'=arg1, arg2'=arg2, arg3'=1+arg3, arg4'=1+arg4, arg5'=1+arg4, (0 == 0 /\ -arg5+arg4 == 0 /\ -1+arg4 < 0 /\ arg4 > 0), cost: 1
	New rule:
	f398_0_minus_EQ -> f398_0_minus_EQ : arg1'=arg1, arg2'=arg2, arg3'=1+arg3, arg4'=1+arg4, arg5'=1+arg4, (-arg5+arg4 == 0 /\ -1+arg4 < 0 /\ arg4 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f398_0_minus_EQ -> f398_0_minus_EQ : arg1'=arg1, arg2'=arg2, arg3'=1+arg3, arg4'=1+arg4, arg5'=1+arg4, (-arg5+arg4 == 0 /\ -1+arg4 < 0 /\ arg4 > 0), cost: 1
	New rule:
	f398_0_minus_EQ -> f398_0_minus_EQ : arg3'=1+arg3, arg4'=1+arg4, arg5'=1+arg4, (-arg5+arg4 == 0 /\ -1+arg4 < 0 /\ arg4 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f398_0_minus_EQ -> f398_0_minus_EQ : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, arg4'=arg4p5, arg5'=arg5p5, (-arg1p5+arg1 == 0 /\ -arg5+arg4 == 0 /\ -1-arg5p5+arg4 == 0 /\ -1+arg3-arg3p5 == 0 /\ arg4 > 0 /\ -arg2p5+arg2 == 0 /\ -1-arg4p5+arg4 == 0), cost: 1
	New rule:
	f398_0_minus_EQ -> f398_0_minus_EQ : arg1'=arg1, arg2'=arg2, arg3'=-1+arg3, arg4'=-1+arg4, arg5'=-1+arg4, (0 == 0 /\ -arg5+arg4 == 0 /\ arg4 > 0), cost: 1
	
		propagated equality arg1p5 = arg1
		
		propagated equality arg5p5 = -1+arg4
		
		propagated equality arg3p5 = -1+arg3
		
		propagated equality arg2p5 = arg2
		
		propagated equality arg4p5 = -1+arg4
		
	Simplified Guard

	Original rule:
	f398_0_minus_EQ -> f398_0_minus_EQ : arg1'=arg1, arg2'=arg2, arg3'=-1+arg3, arg4'=-1+arg4, arg5'=-1+arg4, (0 == 0 /\ -arg5+arg4 == 0 /\ arg4 > 0), cost: 1
	New rule:
	f398_0_minus_EQ -> f398_0_minus_EQ : arg1'=arg1, arg2'=arg2, arg3'=-1+arg3, arg4'=-1+arg4, arg5'=-1+arg4, (-arg5+arg4 == 0 /\ arg4 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f398_0_minus_EQ -> f398_0_minus_EQ : arg1'=arg1, arg2'=arg2, arg3'=-1+arg3, arg4'=-1+arg4, arg5'=-1+arg4, (-arg5+arg4 == 0 /\ arg4 > 0), cost: 1
	New rule:
	f398_0_minus_EQ -> f398_0_minus_EQ : arg3'=-1+arg3, arg4'=-1+arg4, arg5'=-1+arg4, (-arg5+arg4 == 0 /\ arg4 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f398_0_minus_EQ -> f370_0_div_LT : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, arg4'=arg4p6, arg5'=arg5p6, (-arg2p6+arg3 == 0 /\ 1+arg2 > 0 /\ -arg4 == 0 /\ -arg3p6+arg1 == 0 /\ 1-arg1p6+arg2 == 0 /\ -arg5 == 0), cost: 1
	New rule:
	f398_0_minus_EQ -> f370_0_div_LT : arg1'=1+arg2, arg2'=arg3, arg3'=arg1, arg4'=arg4p6, arg5'=arg5p6, (0 == 0 /\ 1+arg2 > 0 /\ -arg4 == 0 /\ -arg5 == 0), cost: 1
	
		propagated equality arg2p6 = arg3
		
		propagated equality arg3p6 = arg1
		
		propagated equality arg1p6 = 1+arg2
		
	Simplified Guard

	Original rule:
	f398_0_minus_EQ -> f370_0_div_LT : arg1'=1+arg2, arg2'=arg3, arg3'=arg1, arg4'=arg4p6, arg5'=arg5p6, (0 == 0 /\ 1+arg2 > 0 /\ -arg4 == 0 /\ -arg5 == 0), cost: 1
	New rule:
	f398_0_minus_EQ -> f370_0_div_LT : arg1'=1+arg2, arg2'=arg3, arg3'=arg1, arg4'=arg4p6, arg5'=arg5p6, (1+arg2 > 0 /\ -arg4 == 0 /\ -arg5 == 0), cost: 1
	
	Propagated Equalities

	Original rule:
	__init -> f370_0_div_LT : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, arg5'=arg5p1, (1+arg2p1 > 0 /\ -arg1p1 == 0 /\ arg1p7 > 0 /\ 1+arg3p1 > 0 /\ 1+arg2p7 > 0), cost: 1
	New rule:
	__init -> f370_0_div_LT : arg1'=0, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, arg5'=arg5p1, (0 == 0 /\ 1+arg2p1 > 0 /\ arg1p7 > 0 /\ 1+arg3p1 > 0 /\ 1+arg2p7 > 0), cost: 1
	
		propagated equality arg1p1 = 0
		
	Simplified Guard

	Original rule:
	__init -> f370_0_div_LT : arg1'=0, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, arg5'=arg5p1, (0 == 0 /\ 1+arg2p1 > 0 /\ arg1p7 > 0 /\ 1+arg3p1 > 0 /\ 1+arg2p7 > 0), cost: 1
	New rule:
	__init -> f370_0_div_LT : arg1'=0, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, arg5'=arg5p1, (1+arg2p1 > 0 /\ arg1p7 > 0 /\ 1+arg3p1 > 0 /\ 1+arg2p7 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	__init -> f370_0_div_LT : arg1'=0, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, arg5'=arg5p1, (1+arg2p1 > 0 /\ arg1p7 > 0 /\ 1+arg3p1 > 0 /\ 1+arg2p7 > 0), cost: 1
	New rule:
	__init -> f370_0_div_LT : arg1'=0, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, arg5'=arg5p1, (1+arg2p1 > 0 /\ 1+arg3p1 > 0), cost: 1

Step with 13

	Trace

	13[(1+arg2p1 > 0 /\ 1+arg3p1 > 0)]
	
	Blocked

	[{}, {}]

Step with 8

	Trace

	13[(1+arg2p1 > 0 /\ 1+arg3p1 > 0)], 8[(arg3 > 0 /\ arg3-arg2 <= 0)]
	
	Blocked

	[{}, {}, {}]

Step with 11

	Trace

	13[(1+arg2p1 > 0 /\ 1+arg3p1 > 0)], 8[(arg3 > 0 /\ arg3-arg2 <= 0)], 11[(-arg5+arg4 == 0 /\ arg4 > 0)]
	
	Blocked

	[{}, {}, {9[T], 10[T]}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5
   8: f370_0_div_LT -> f398_0_minus_EQ : arg1'=arg3, arg2'=arg1, arg3'=arg2, arg4'=arg3, arg5'=arg3, (arg3 > 0 /\ arg3-arg2 <= 0), cost: 1
   9: f398_0_minus_EQ -> f398_0_minus_EQ : arg3'=1+arg3, arg4'=1+arg4, arg5'=1+arg4, (-arg5+arg4 == 0 /\ -1+arg4 < 0 /\ arg4 < 0), cost: 1
  10: f398_0_minus_EQ -> f398_0_minus_EQ : arg3'=1+arg3, arg4'=1+arg4, arg5'=1+arg4, (-arg5+arg4 == 0 /\ -1+arg4 < 0 /\ arg4 > 0), cost: 1
  11: f398_0_minus_EQ -> f398_0_minus_EQ : arg3'=-1+arg3, arg4'=-1+arg4, arg5'=-1+arg4, (-arg5+arg4 == 0 /\ arg4 > 0), cost: 1
  12: f398_0_minus_EQ -> f370_0_div_LT : arg1'=1+arg2, arg2'=arg3, arg3'=arg1, arg4'=arg4p6, arg5'=arg5p6, (1+arg2 > 0 /\ -arg4 == 0 /\ -arg5 == 0), cost: 1
  14: f398_0_minus_EQ -> f398_0_minus_EQ : arg3'=arg3-n, arg4'=-n+arg4, arg5'=-n+arg4, (arg5-arg4 >= 0 /\ -1+n >= 0 /\ -arg5+arg4 >= 0 /\ 1-n+arg4 > 0), cost: 1
  13: __init -> f370_0_div_LT : arg1'=0, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, arg5'=arg5p1, (1+arg2p1 > 0 /\ 1+arg3p1 > 0), cost: 1

	Loop Acceleration

	Original rule:
	f398_0_minus_EQ -> f398_0_minus_EQ : arg3'=-1+arg3, arg4'=-1+arg4, arg5'=-1+arg4, (-arg5+arg4 == 0 /\ arg4 > 0), cost: 1
	New rule:
	f398_0_minus_EQ -> f398_0_minus_EQ : arg3'=arg3-n, arg4'=-n+arg4, arg5'=-n+arg4, (arg5-arg4 >= 0 /\ -1+n >= 0 /\ -arg5+arg4 >= 0 /\ 1-n+arg4 > 0), cost: 1

		arg5-arg4 >= 0 [0]: monotonic increase yields arg5-arg4 >= 0
		
		-arg5+arg4 >= 0 [0]: monotonic increase yields -arg5+arg4 >= 0
		
		arg4 > 0 [0]: montonic decrease yields 1-n+arg4 > 0
		
		arg4 > 0 [1]: eventual increase yields (1 <= 0 /\ arg4 > 0)
		
		Replacement map: {arg5-arg4 >= 0 -> arg5-arg4 >= 0, -arg5+arg4 >= 0 -> -arg5+arg4 >= 0, arg4 > 0 -> 1-n+arg4 > 0}

	Trace

	13[(1+arg2p1 > 0 /\ 1+arg3p1 > 0)], 8[(arg3 > 0 /\ arg3-arg2 <= 0)], 14[(arg5-arg4 >= 0 /\ -1+n >= 0 /\ -arg5+arg4 >= 0 /\ 1-n+arg4 > 0)]
	
	Blocked

	[{}, {}, {9[T], 10[T]}, {11[T], 14[T]}]

Step with 12

	Trace

	13[(1+arg2p1 > 0 /\ 1+arg3p1 > 0)], 8[(arg3 > 0 /\ arg3-arg2 <= 0)], 14[(arg5-arg4 >= 0 /\ -1+n >= 0 /\ -arg5+arg4 >= 0 /\ 1-n+arg4 > 0)], 12[(1+arg2 > 0 /\ -arg4 == 0 /\ -arg5 == 0)]
	
	Blocked

	[{}, {}, {9[T], 10[T]}, {9[T], 10[T], 11[T], 14[T]}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2 arg3 arg4 arg5
   8: f370_0_div_LT -> f398_0_minus_EQ : arg1'=arg3, arg2'=arg1, arg3'=arg2, arg4'=arg3, arg5'=arg3, (arg3 > 0 /\ arg3-arg2 <= 0), cost: 1
  15: f370_0_div_LT -> f370_0_div_LT : arg1'=arg1+n2, arg2'=-arg3*n2+arg2, arg4'=arg4p6, arg5'=arg5p6, (arg3 > 0 /\ -1+arg3 >= 0 /\ -1+n2 >= 0 /\ -arg3*(-1+n2)-arg3+arg2 >= 0 /\ 1+arg1 > 0), cost: 1
   9: f398_0_minus_EQ -> f398_0_minus_EQ : arg3'=1+arg3, arg4'=1+arg4, arg5'=1+arg4, (-arg5+arg4 == 0 /\ -1+arg4 < 0 /\ arg4 < 0), cost: 1
  10: f398_0_minus_EQ -> f398_0_minus_EQ : arg3'=1+arg3, arg4'=1+arg4, arg5'=1+arg4, (-arg5+arg4 == 0 /\ -1+arg4 < 0 /\ arg4 > 0), cost: 1
  11: f398_0_minus_EQ -> f398_0_minus_EQ : arg3'=-1+arg3, arg4'=-1+arg4, arg5'=-1+arg4, (-arg5+arg4 == 0 /\ arg4 > 0), cost: 1
  12: f398_0_minus_EQ -> f370_0_div_LT : arg1'=1+arg2, arg2'=arg3, arg3'=arg1, arg4'=arg4p6, arg5'=arg5p6, (1+arg2 > 0 /\ -arg4 == 0 /\ -arg5 == 0), cost: 1
  14: f398_0_minus_EQ -> f398_0_minus_EQ : arg3'=arg3-n, arg4'=-n+arg4, arg5'=-n+arg4, (arg5-arg4 >= 0 /\ -1+n >= 0 /\ -arg5+arg4 >= 0 /\ 1-n+arg4 > 0), cost: 1
  13: __init -> f370_0_div_LT : arg1'=0, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, arg5'=arg5p1, (1+arg2p1 > 0 /\ 1+arg3p1 > 0), cost: 1

	Loop Acceleration

	Original rule:
	f370_0_div_LT -> f370_0_div_LT : arg1'=1+arg1, arg2'=-arg3+arg2, arg4'=arg4p6, arg5'=arg5p6, (arg3 > 0 /\ arg3-arg2 <= 0 /\ -1+arg3 >= 0 /\ 1+arg1 > 0), cost: 1
	New rule:
	f370_0_div_LT -> f370_0_div_LT : arg1'=arg1+n2, arg2'=-arg3*n2+arg2, arg4'=arg4p6, arg5'=arg5p6, (arg3 > 0 /\ -1+arg3 >= 0 /\ -1+n2 >= 0 /\ -arg3*(-1+n2)-arg3+arg2 >= 0 /\ 1+arg1 > 0), cost: 1

		-arg3+arg2 >= 0 [0]: montonic decrease yields -arg3*(-1+n2)-arg3+arg2 >= 0, dependencies: arg3 > 0
		
		-arg3+arg2 >= 0 [1]: eventual decrease yields (-arg3+arg2 >= 0 /\ -arg3*(-1+n2)-arg3+arg2 >= 0), dependencies: arg3 > 0
		
		-arg3+arg2 >= 0 [2]: eventual increase yields (-arg3+arg2 >= 0 /\ arg3 <= 0), dependencies: arg3 > 0
		
		arg3 > 0 [0]: monotonic increase yields arg3 > 0
		
		-1+arg3 >= 0 [0]: monotonic increase yields -1+arg3 >= 0, dependencies: arg3 > 0
		
		1+arg1 > 0 [0]: monotonic increase yields 1+arg1 > 0
		
		Replacement map: {-arg3+arg2 >= 0 -> -arg3*(-1+n2)-arg3+arg2 >= 0, arg3 > 0 -> arg3 > 0, -1+arg3 >= 0 -> -1+arg3 >= 0, 1+arg1 > 0 -> 1+arg1 > 0}

	Trace

	13[(1+arg2p1 > 0 /\ 1+arg3p1 > 0)], 15[(arg3 > 0 /\ -1+arg3 >= 0 /\ -1+n2 >= 0 /\ -arg3*(-1+n2)-arg3+arg2 >= 0 /\ 1+arg1 > 0)]
	
	Blocked

	[{}, {}, {15[T]}]

Step with 8

	Trace

	13[(1+arg2p1 > 0 /\ 1+arg3p1 > 0)], 15[(arg3 > 0 /\ -1+arg3 >= 0 /\ -1+n2 >= 0 /\ -arg3*(-1+n2)-arg3+arg2 >= 0 /\ 1+arg1 > 0)], 8[(arg3 > 0 /\ arg3-arg2 <= 0)]
	
	Blocked

	[{}, {}, {15[T]}, {}]

Step with 14

	Trace

	13[(1+arg2p1 > 0 /\ 1+arg3p1 > 0)], 15[(arg3 > 0 /\ -1+arg3 >= 0 /\ -1+n2 >= 0 /\ -arg3*(-1+n2)-arg3+arg2 >= 0 /\ 1+arg1 > 0)], 8[(arg3 > 0 /\ arg3-arg2 <= 0)], 14[(arg5-arg4 >= 0 /\ -1+n >= 0 /\ -arg5+arg4 >= 0 /\ 1-n+arg4 > 0)]
	
	Blocked

	[{}, {}, {15[T]}, {12[T]}, {14[T]}]

Step with 11

	Trace

	13[(1+arg2p1 > 0 /\ 1+arg3p1 > 0)], 15[(arg3 > 0 /\ -1+arg3 >= 0 /\ -1+n2 >= 0 /\ -arg3*(-1+n2)-arg3+arg2 >= 0 /\ 1+arg1 > 0)], 8[(arg3 > 0 /\ arg3-arg2 <= 0)], 14[(arg5-arg4 >= 0 /\ -1+n >= 0 /\ -arg5+arg4 >= 0 /\ 1-n+arg4 > 0)], 11[(-arg5+arg4 == 0 /\ arg4 > 0)]
	
	Blocked

	[{}, {}, {15[T]}, {12[T]}, {9[T], 10[T], 14[T]}, {}]

Covered

	Trace

	13[(1+arg2p1 > 0 /\ 1+arg3p1 > 0)], 15[(arg3 > 0 /\ -1+arg3 >= 0 /\ -1+n2 >= 0 /\ -arg3*(-1+n2)-arg3+arg2 >= 0 /\ 1+arg1 > 0)], 8[(arg3 > 0 /\ arg3-arg2 <= 0)], 14[(arg5-arg4 >= 0 /\ -1+n >= 0 /\ -arg5+arg4 >= 0 /\ 1-n+arg4 > 0)]
	
	Blocked

	[{}, {}, {15[T]}, {12[T]}, {9[T], 10[T], 11[T], 14[T]}]

Step with 12

	Trace

	13[(1+arg2p1 > 0 /\ 1+arg3p1 > 0)], 15[(arg3 > 0 /\ -1+arg3 >= 0 /\ -1+n2 >= 0 /\ -arg3*(-1+n2)-arg3+arg2 >= 0 /\ 1+arg1 > 0)], 8[(arg3 > 0 /\ arg3-arg2 <= 0)], 14[(arg5-arg4 >= 0 /\ -1+n >= 0 /\ -arg5+arg4 >= 0 /\ 1-n+arg4 > 0)], 12[(1+arg2 > 0 /\ -arg4 == 0 /\ -arg5 == 0)]
	
	Blocked

	[{}, {}, {15[T]}, {12[T]}, {9[T], 10[T], 11[T], 14[T]}, {}]

Covered

	Trace

	13[(1+arg2p1 > 0 /\ 1+arg3p1 > 0)], 15[(arg3 > 0 /\ -1+arg3 >= 0 /\ -1+n2 >= 0 /\ -arg3*(-1+n2)-arg3+arg2 >= 0 /\ 1+arg1 > 0)], 8[(arg3 > 0 /\ arg3-arg2 <= 0)], 14[(arg5-arg4 >= 0 /\ -1+n >= 0 /\ -arg5+arg4 >= 0 /\ 1-n+arg4 > 0)]
	
	Blocked

	[{}, {}, {15[T]}, {12[T]}, {9[T], 10[T], 11[T], 12[T], 14[T]}]

Backtrack

	Trace

	13[(1+arg2p1 > 0 /\ 1+arg3p1 > 0)], 15[(arg3 > 0 /\ -1+arg3 >= 0 /\ -1+n2 >= 0 /\ -arg3*(-1+n2)-arg3+arg2 >= 0 /\ 1+arg1 > 0)], 8[(arg3 > 0 /\ arg3-arg2 <= 0)]
	
	Blocked

	[{}, {}, {15[T]}, {12[T], 14[T]}]

Step with 11

	Trace

	13[(1+arg2p1 > 0 /\ 1+arg3p1 > 0)], 15[(arg3 > 0 /\ -1+arg3 >= 0 /\ -1+n2 >= 0 /\ -arg3*(-1+n2)-arg3+arg2 >= 0 /\ 1+arg1 > 0)], 8[(arg3 > 0 /\ arg3-arg2 <= 0)], 11[(-arg5+arg4 == 0 /\ arg4 > 0)]
	
	Blocked

	[{}, {}, {15[T]}, {9[T], 10[T], 12[T], 14[T]}, {}]

Covered

	Trace

	13[(1+arg2p1 > 0 /\ 1+arg3p1 > 0)], 15[(arg3 > 0 /\ -1+arg3 >= 0 /\ -1+n2 >= 0 /\ -arg3*(-1+n2)-arg3+arg2 >= 0 /\ 1+arg1 > 0)], 8[(arg3 > 0 /\ arg3-arg2 <= 0)]
	
	Blocked

	[{}, {}, {15[T]}, {9[T], 10[T], 11[T], 12[T], 14[T]}]

Backtrack

	Trace

	13[(1+arg2p1 > 0 /\ 1+arg3p1 > 0)], 15[(arg3 > 0 /\ -1+arg3 >= 0 /\ -1+n2 >= 0 /\ -arg3*(-1+n2)-arg3+arg2 >= 0 /\ 1+arg1 > 0)]
	
	Blocked

	[{}, {}, {8[T], 15[T]}]

Backtrack

	Trace

	13[(1+arg2p1 > 0 /\ 1+arg3p1 > 0)]
	
	Blocked

	[{}, {15[T]}]

Step with 8

	Trace

	13[(1+arg2p1 > 0 /\ 1+arg3p1 > 0)], 8[(arg3 > 0 /\ arg3-arg2 <= 0)]
	
	Blocked

	[{}, {15[T]}, {}]

Step with 11

	Trace

	13[(1+arg2p1 > 0 /\ 1+arg3p1 > 0)], 8[(arg3 > 0 /\ arg3-arg2 <= 0)], 11[(-arg5+arg4 == 0 /\ arg4 > 0)]
	
	Blocked

	[{}, {15[T]}, {}, {}]

Covered

	Trace

	13[(1+arg2p1 > 0 /\ 1+arg3p1 > 0)], 8[(arg3 > 0 /\ arg3-arg2 <= 0)]
	
	Blocked

	[{}, {15[T]}, {11[T]}]

Step with 14

	Trace

	13[(1+arg2p1 > 0 /\ 1+arg3p1 > 0)], 8[(arg3 > 0 /\ arg3-arg2 <= 0)], 14[(arg5-arg4 >= 0 /\ -1+n >= 0 /\ -arg5+arg4 >= 0 /\ 1-n+arg4 > 0)]
	
	Blocked

	[{}, {15[T]}, {11[T], 12[T]}, {14[T]}]

Step with 11

	Trace

	13[(1+arg2p1 > 0 /\ 1+arg3p1 > 0)], 8[(arg3 > 0 /\ arg3-arg2 <= 0)], 14[(arg5-arg4 >= 0 /\ -1+n >= 0 /\ -arg5+arg4 >= 0 /\ 1-n+arg4 > 0)], 11[(-arg5+arg4 == 0 /\ arg4 > 0)]
	
	Blocked

	[{}, {15[T]}, {11[T], 12[T]}, {9[T], 10[T], 14[T]}, {}]

Covered

	Trace

	13[(1+arg2p1 > 0 /\ 1+arg3p1 > 0)], 8[(arg3 > 0 /\ arg3-arg2 <= 0)], 14[(arg5-arg4 >= 0 /\ -1+n >= 0 /\ -arg5+arg4 >= 0 /\ 1-n+arg4 > 0)]
	
	Blocked

	[{}, {15[T]}, {11[T], 12[T]}, {9[T], 10[T], 11[T], 14[T]}]

Step with 12

	Trace

	13[(1+arg2p1 > 0 /\ 1+arg3p1 > 0)], 8[(arg3 > 0 /\ arg3-arg2 <= 0)], 14[(arg5-arg4 >= 0 /\ -1+n >= 0 /\ -arg5+arg4 >= 0 /\ 1-n+arg4 > 0)], 12[(1+arg2 > 0 /\ -arg4 == 0 /\ -arg5 == 0)]
	
	Blocked

	[{}, {15[T]}, {11[T], 12[T]}, {9[T], 10[T], 11[T], 14[T]}, {}]

Covered

	Trace

	13[(1+arg2p1 > 0 /\ 1+arg3p1 > 0)], 8[(arg3 > 0 /\ arg3-arg2 <= 0)], 14[(arg5-arg4 >= 0 /\ -1+n >= 0 /\ -arg5+arg4 >= 0 /\ 1-n+arg4 > 0)]
	
	Blocked

	[{}, {15[T]}, {11[T], 12[T]}, {9[T], 10[T], 11[T], 12[T], 14[T]}]

Backtrack

	Trace

	13[(1+arg2p1 > 0 /\ 1+arg3p1 > 0)], 8[(arg3 > 0 /\ arg3-arg2 <= 0)]
	
	Blocked

	[{}, {15[T]}, {11[T], 12[T], 14[T]}]

Backtrack

	Trace

	13[(1+arg2p1 > 0 /\ 1+arg3p1 > 0)]
	
	Blocked

	[{}, {8[T], 15[T]}]

Backtrack

	Trace

	Blocked

	[{13[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
