WORST_CASE(Omega(0),?)

Initial ITS
Start location: __init
   0: f1_0_main_ConstantStackPush -> f74_0_factorial_GE : arg1'=arg1P0, 10-arg1P0 == 0, cost: 1
   1: f74_0_factorial_GE -> f74_0_factorial_GE : arg1'=arg1P1, (1+arg1 > 0 /\ -1-arg1P1+arg1 == 0 /\ -1 < 0), cost: 1
   2: __init -> f1_0_main_ConstantStackPush : arg1'=arg1P2, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_ConstantStackPush -> f74_0_factorial_GE : arg1'=arg1P0, 10-arg1P0 == 0, cost: 1
New rule:
f1_0_main_ConstantStackPush -> f74_0_factorial_GE : arg1'=10, TRUE, cost: 1

Applied preprocessing
Original rule:
f74_0_factorial_GE -> f74_0_factorial_GE : arg1'=arg1P1, (1+arg1 > 0 /\ -1-arg1P1+arg1 == 0 /\ -1 < 0), cost: 1
New rule:
f74_0_factorial_GE -> f74_0_factorial_GE : arg1'=-1+arg1, 1+arg1 > 0, cost: 1

Simplified rules
Start location: __init
   3: f1_0_main_ConstantStackPush -> f74_0_factorial_GE : arg1'=10, TRUE, cost: 1
   4: f74_0_factorial_GE -> f74_0_factorial_GE : arg1'=-1+arg1, 1+arg1 > 0, cost: 1
   2: __init -> f1_0_main_ConstantStackPush : arg1'=arg1P2, TRUE, cost: 1


Applied acceleration
Original rule:
f74_0_factorial_GE -> f74_0_factorial_GE : arg1'=-1+arg1, 1+arg1 > 0, cost: 1
New rule:
f74_0_factorial_GE -> f74_0_factorial_GE : arg1'=arg1-n, (2+arg1-n > 0 /\ n >= 0), cost: n
Sub-proof via acceration calculus written to file:///tmp/tmpnam_LlCbMn.txt

Applied instantiation
Original rule:
f74_0_factorial_GE -> f74_0_factorial_GE : arg1'=arg1-n, (2+arg1-n > 0 /\ n >= 0), cost: n
New rule:
f74_0_factorial_GE -> f74_0_factorial_GE : arg1'=-1, (1 > 0 /\ 1+arg1 >= 0), cost: 1+arg1

Applied simplification
Original rule:
f74_0_factorial_GE -> f74_0_factorial_GE : arg1'=-1, (1 > 0 /\ 1+arg1 >= 0), cost: 1+arg1
New rule:
f74_0_factorial_GE -> f74_0_factorial_GE : arg1'=-1, 1+arg1 >= 0, cost: 1+arg1

Applied deletion
Removed the following rules: 4

Accelerated simple loops
Start location: __init
   3: f1_0_main_ConstantStackPush -> f74_0_factorial_GE : arg1'=10, TRUE, cost: 1
   6: f74_0_factorial_GE -> f74_0_factorial_GE : arg1'=-1, 1+arg1 >= 0, cost: 1+arg1
   2: __init -> f1_0_main_ConstantStackPush : arg1'=arg1P2, TRUE, cost: 1


Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f74_0_factorial_GE : arg1'=10, TRUE, cost: 1
Second rule:
f74_0_factorial_GE -> f74_0_factorial_GE : arg1'=-1, 1+arg1 >= 0, cost: 1+arg1
New rule:
f1_0_main_ConstantStackPush -> f74_0_factorial_GE : arg1'=-1, 11 >= 0, cost: 12

Applied deletion
Removed the following rules: 6

Chained accelerated rules with incoming rules
Start location: __init
   3: f1_0_main_ConstantStackPush -> f74_0_factorial_GE : arg1'=10, TRUE, cost: 1
   7: f1_0_main_ConstantStackPush -> f74_0_factorial_GE : arg1'=-1, 11 >= 0, cost: 12
   2: __init -> f1_0_main_ConstantStackPush : arg1'=arg1P2, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
  <empty>


Computing asymptotic complexity

Proved the following lower bound
Complexity:  Unknown
Cpx degree: ?

Solved cost: 0
Rule cost:   0

