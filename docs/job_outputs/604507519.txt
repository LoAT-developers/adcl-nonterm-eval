NO

Initial ITS

Start location: l7
Program variables: result_4^0 tmp_6^0 x_5^0
   0: l0 -> l1 : result_4^0'=result_4^post1, tmp_6^0'=tmp_6^post1, x_5^0'=x_5^post1, (-tmp_6^post1+tmp_6^0 == 0 /\ -x_5^post1+x_5^0 == 0 /\ result_4^0-result_4^post1 == 0), cost: 1
   1: l1 -> l2 : result_4^0'=result_4^post2, tmp_6^0'=tmp_6^post2, x_5^0'=x_5^post2, (0 == 0 /\ 1+x_5^0 <= 0 /\ -x_5^post2+x_5^0 == 0 /\ -tmp_6^post2+tmp_6^0 == 0), cost: 1
   2: l1 -> l3 : result_4^0'=result_4^post3, tmp_6^0'=tmp_6^post3, x_5^0'=x_5^post3, (0 == 0 /\ tmp_6^post3 <= 0 /\ -tmp_6^post3 <= 0 /\ result_4^0-result_4^post3 == 0 /\ -x_5^post3+x_5^0 == 0 /\ -x_5^0 <= 0), cost: 1
   4: l1 -> l5 : result_4^0'=result_4^post5, tmp_6^0'=tmp_6^post5, x_5^0'=x_5^post5, (0 == 0 /\ -x_5^0 <= 0 /\ -x_5^post5+x_5^0 == 0 /\ -result_4^post5+result_4^0 == 0), cost: 1
   3: l3 -> l1 : result_4^0'=result_4^post4, tmp_6^0'=tmp_6^post4, x_5^0'=x_5^post4, (-tmp_6^post4+tmp_6^0 == 0 /\ -x_5^post4+x_5^0 == 0 /\ result_4^0-result_4^post4 == 0), cost: 1
   5: l5 -> l6 : result_4^0'=result_4^post6, tmp_6^0'=tmp_6^post6, x_5^0'=x_5^post6, (-result_4^post6+result_4^0 == 0 /\ -x_5^post6+x_5^0 == 0 /\ 1+tmp_6^0 <= 0 /\ tmp_6^0-tmp_6^post6 == 0), cost: 1
   6: l5 -> l6 : result_4^0'=result_4^post7, tmp_6^0'=tmp_6^post7, x_5^0'=x_5^post7, (-x_5^post7+x_5^0 == 0 /\ -result_4^post7+result_4^0 == 0 /\ 1-tmp_6^0 <= 0 /\ tmp_6^0-tmp_6^post7 == 0), cost: 1
   7: l6 -> l4 : result_4^0'=result_4^post8, tmp_6^0'=tmp_6^post8, x_5^0'=x_5^post8, (tmp_6^0-tmp_6^post8 == 0 /\ 1-x_5^0+x_5^post8 == 0 /\ -result_4^post8+result_4^0 == 0), cost: 1
   8: l4 -> l1 : result_4^0'=result_4^post9, tmp_6^0'=tmp_6^post9, x_5^0'=x_5^post9, (tmp_6^0-tmp_6^post9 == 0 /\ -result_4^post9+result_4^0 == 0 /\ -x_5^post9+x_5^0 == 0), cost: 1
   9: l7 -> l0 : result_4^0'=result_4^post10, tmp_6^0'=tmp_6^post10, x_5^0'=x_5^post10, (tmp_6^0-tmp_6^post10 == 0 /\ -result_4^post10+result_4^0 == 0 /\ -x_5^post10+x_5^0 == 0), cost: 1

Chained Linear Paths

Start location: l7
Program variables: result_4^0 tmp_6^0 x_5^0
   1: l1 -> l2 : result_4^0'=result_4^post2, tmp_6^0'=tmp_6^post2, x_5^0'=x_5^post2, (0 == 0 /\ 1+x_5^0 <= 0 /\ -x_5^post2+x_5^0 == 0 /\ -tmp_6^post2+tmp_6^0 == 0), cost: 1
   4: l1 -> l5 : result_4^0'=result_4^post5, tmp_6^0'=tmp_6^post5, x_5^0'=x_5^post5, (0 == 0 /\ -x_5^0 <= 0 /\ -x_5^post5+x_5^0 == 0 /\ -result_4^post5+result_4^0 == 0), cost: 1
  11: l1 -> l1 : result_4^0'=result_4^post4, tmp_6^0'=tmp_6^post4, x_5^0'=x_5^post4, (0 == 0 /\ tmp_6^post3 <= 0 /\ -tmp_6^post4+tmp_6^post3 == 0 /\ -tmp_6^post3 <= 0 /\ result_4^0-result_4^post3 == 0 /\ -result_4^post4+result_4^post3 == 0 /\ -x_5^post3+x_5^0 == 0 /\ -x_5^post4+x_5^post3 == 0 /\ -x_5^0 <= 0), cost: 1
   5: l5 -> l6 : result_4^0'=result_4^post6, tmp_6^0'=tmp_6^post6, x_5^0'=x_5^post6, (-result_4^post6+result_4^0 == 0 /\ -x_5^post6+x_5^0 == 0 /\ 1+tmp_6^0 <= 0 /\ tmp_6^0-tmp_6^post6 == 0), cost: 1
   6: l5 -> l6 : result_4^0'=result_4^post7, tmp_6^0'=tmp_6^post7, x_5^0'=x_5^post7, (-x_5^post7+x_5^0 == 0 /\ -result_4^post7+result_4^0 == 0 /\ 1-tmp_6^0 <= 0 /\ tmp_6^0-tmp_6^post7 == 0), cost: 1
  12: l6 -> l1 : result_4^0'=result_4^post9, tmp_6^0'=tmp_6^post9, x_5^0'=x_5^post9, (tmp_6^0-tmp_6^post8 == 0 /\ -tmp_6^post9+tmp_6^post8 == 0 /\ 1-x_5^0+x_5^post8 == 0 /\ -x_5^post9+x_5^post8 == 0 /\ -result_4^post8+result_4^0 == 0 /\ -result_4^post9+result_4^post8 == 0), cost: 1
  10: l7 -> l1 : result_4^0'=result_4^post1, tmp_6^0'=tmp_6^post1, x_5^0'=x_5^post1, (-tmp_6^post1+tmp_6^post10 == 0 /\ result_4^post10-result_4^post1 == 0 /\ -x_5^post1+x_5^post10 == 0 /\ tmp_6^0-tmp_6^post10 == 0 /\ -result_4^post10+result_4^0 == 0 /\ -x_5^post10+x_5^0 == 0), cost: 1

	Eliminating location l0 by chaining:

	Applied chaining

	First rule:
	l7 -> l0 : result_4^0'=result_4^post10, tmp_6^0'=tmp_6^post10, x_5^0'=x_5^post10, (tmp_6^0-tmp_6^post10 == 0 /\ -result_4^post10+result_4^0 == 0 /\ -x_5^post10+x_5^0 == 0), cost: 1
	Second rule:
	l0 -> l1 : result_4^0'=result_4^post1, tmp_6^0'=tmp_6^post1, x_5^0'=x_5^post1, (-tmp_6^post1+tmp_6^0 == 0 /\ -x_5^post1+x_5^0 == 0 /\ result_4^0-result_4^post1 == 0), cost: 1
	New rule:
	l7 -> l1 : result_4^0'=result_4^post1, tmp_6^0'=tmp_6^post1, x_5^0'=x_5^post1, (-tmp_6^post1+tmp_6^post10 == 0 /\ result_4^post10-result_4^post1 == 0 /\ -x_5^post1+x_5^post10 == 0 /\ tmp_6^0-tmp_6^post10 == 0 /\ -result_4^post10+result_4^0 == 0 /\ -x_5^post10+x_5^0 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 9
	
	Eliminating location l3 by chaining:

	Applied chaining

	First rule:
	l1 -> l3 : result_4^0'=result_4^post3, tmp_6^0'=tmp_6^post3, x_5^0'=x_5^post3, (0 == 0 /\ tmp_6^post3 <= 0 /\ -tmp_6^post3 <= 0 /\ result_4^0-result_4^post3 == 0 /\ -x_5^post3+x_5^0 == 0 /\ -x_5^0 <= 0), cost: 1
	Second rule:
	l3 -> l1 : result_4^0'=result_4^post4, tmp_6^0'=tmp_6^post4, x_5^0'=x_5^post4, (-tmp_6^post4+tmp_6^0 == 0 /\ -x_5^post4+x_5^0 == 0 /\ result_4^0-result_4^post4 == 0), cost: 1
	New rule:
	l1 -> l1 : result_4^0'=result_4^post4, tmp_6^0'=tmp_6^post4, x_5^0'=x_5^post4, (0 == 0 /\ tmp_6^post3 <= 0 /\ -tmp_6^post4+tmp_6^post3 == 0 /\ -tmp_6^post3 <= 0 /\ result_4^0-result_4^post3 == 0 /\ -result_4^post4+result_4^post3 == 0 /\ -x_5^post3+x_5^0 == 0 /\ -x_5^post4+x_5^post3 == 0 /\ -x_5^0 <= 0), cost: 1
	
	Applied deletion

	Removed the following rules: 2 3
	
	Eliminating location l4 by chaining:

	Applied chaining

	First rule:
	l6 -> l4 : result_4^0'=result_4^post8, tmp_6^0'=tmp_6^post8, x_5^0'=x_5^post8, (tmp_6^0-tmp_6^post8 == 0 /\ 1-x_5^0+x_5^post8 == 0 /\ -result_4^post8+result_4^0 == 0), cost: 1
	Second rule:
	l4 -> l1 : result_4^0'=result_4^post9, tmp_6^0'=tmp_6^post9, x_5^0'=x_5^post9, (tmp_6^0-tmp_6^post9 == 0 /\ -result_4^post9+result_4^0 == 0 /\ -x_5^post9+x_5^0 == 0), cost: 1
	New rule:
	l6 -> l1 : result_4^0'=result_4^post9, tmp_6^0'=tmp_6^post9, x_5^0'=x_5^post9, (tmp_6^0-tmp_6^post8 == 0 /\ -tmp_6^post9+tmp_6^post8 == 0 /\ 1-x_5^0+x_5^post8 == 0 /\ -x_5^post9+x_5^post8 == 0 /\ -result_4^post8+result_4^0 == 0 /\ -result_4^post9+result_4^post8 == 0), cost: 1
	
	Applied deletion

	Removed the following rules: 7 8

Simplified Transitions

Start location: l7
Program variables: result_4^0 tmp_6^0 x_5^0
  13: l1 -> l2 : result_4^0'=result_4^post2, 1+x_5^0 <= 0, cost: 1
  14: l1 -> l5 : tmp_6^0'=tmp_6^post5, -x_5^0 <= 0, cost: 1
  18: l1 -> l1 : tmp_6^0'=0, -x_5^0 <= 0, cost: 1
  15: l5 -> l6 : 1+tmp_6^0 <= 0, cost: 1
  16: l5 -> l6 : 1-tmp_6^0 <= 0, cost: 1
  19: l6 -> l1 : x_5^0'=-1+x_5^0, T, cost: 1
  17: l7 -> l1 : T, cost: 1

	Propagated Equalities

	Original rule:
	l1 -> l2 : result_4^0'=result_4^post2, tmp_6^0'=tmp_6^post2, x_5^0'=x_5^post2, (0 == 0 /\ 1+x_5^0 <= 0 /\ -x_5^post2+x_5^0 == 0 /\ -tmp_6^post2+tmp_6^0 == 0), cost: 1
	New rule:
	l1 -> l2 : result_4^0'=result_4^post2, tmp_6^0'=tmp_6^0, x_5^0'=x_5^0, (0 == 0 /\ 1+x_5^0 <= 0), cost: 1
	
		propagated equality x_5^post2 = x_5^0
		
		propagated equality tmp_6^post2 = tmp_6^0
		
	Simplified Guard

	Original rule:
	l1 -> l2 : result_4^0'=result_4^post2, tmp_6^0'=tmp_6^0, x_5^0'=x_5^0, (0 == 0 /\ 1+x_5^0 <= 0), cost: 1
	New rule:
	l1 -> l2 : result_4^0'=result_4^post2, tmp_6^0'=tmp_6^0, x_5^0'=x_5^0, 1+x_5^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l1 -> l2 : result_4^0'=result_4^post2, tmp_6^0'=tmp_6^0, x_5^0'=x_5^0, 1+x_5^0 <= 0, cost: 1
	New rule:
	l1 -> l2 : result_4^0'=result_4^post2, 1+x_5^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l1 -> l5 : result_4^0'=result_4^post5, tmp_6^0'=tmp_6^post5, x_5^0'=x_5^post5, (0 == 0 /\ -x_5^0 <= 0 /\ -x_5^post5+x_5^0 == 0 /\ -result_4^post5+result_4^0 == 0), cost: 1
	New rule:
	l1 -> l5 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^post5, x_5^0'=x_5^0, (0 == 0 /\ -x_5^0 <= 0), cost: 1
	
		propagated equality x_5^post5 = x_5^0
		
		propagated equality result_4^post5 = result_4^0
		
	Simplified Guard

	Original rule:
	l1 -> l5 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^post5, x_5^0'=x_5^0, (0 == 0 /\ -x_5^0 <= 0), cost: 1
	New rule:
	l1 -> l5 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^post5, x_5^0'=x_5^0, -x_5^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l1 -> l5 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^post5, x_5^0'=x_5^0, -x_5^0 <= 0, cost: 1
	New rule:
	l1 -> l5 : tmp_6^0'=tmp_6^post5, -x_5^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l5 -> l6 : result_4^0'=result_4^post6, tmp_6^0'=tmp_6^post6, x_5^0'=x_5^post6, (-result_4^post6+result_4^0 == 0 /\ -x_5^post6+x_5^0 == 0 /\ 1+tmp_6^0 <= 0 /\ tmp_6^0-tmp_6^post6 == 0), cost: 1
	New rule:
	l5 -> l6 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^0, x_5^0'=x_5^0, (0 == 0 /\ 1+tmp_6^0 <= 0), cost: 1
	
		propagated equality result_4^post6 = result_4^0
		
		propagated equality x_5^post6 = x_5^0
		
		propagated equality tmp_6^post6 = tmp_6^0
		
	Simplified Guard

	Original rule:
	l5 -> l6 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^0, x_5^0'=x_5^0, (0 == 0 /\ 1+tmp_6^0 <= 0), cost: 1
	New rule:
	l5 -> l6 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^0, x_5^0'=x_5^0, 1+tmp_6^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l5 -> l6 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^0, x_5^0'=x_5^0, 1+tmp_6^0 <= 0, cost: 1
	New rule:
	l5 -> l6 : 1+tmp_6^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l5 -> l6 : result_4^0'=result_4^post7, tmp_6^0'=tmp_6^post7, x_5^0'=x_5^post7, (-x_5^post7+x_5^0 == 0 /\ -result_4^post7+result_4^0 == 0 /\ 1-tmp_6^0 <= 0 /\ tmp_6^0-tmp_6^post7 == 0), cost: 1
	New rule:
	l5 -> l6 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^0, x_5^0'=x_5^0, (0 == 0 /\ 1-tmp_6^0 <= 0), cost: 1
	
		propagated equality x_5^post7 = x_5^0
		
		propagated equality result_4^post7 = result_4^0
		
		propagated equality tmp_6^post7 = tmp_6^0
		
	Simplified Guard

	Original rule:
	l5 -> l6 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^0, x_5^0'=x_5^0, (0 == 0 /\ 1-tmp_6^0 <= 0), cost: 1
	New rule:
	l5 -> l6 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^0, x_5^0'=x_5^0, 1-tmp_6^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l5 -> l6 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^0, x_5^0'=x_5^0, 1-tmp_6^0 <= 0, cost: 1
	New rule:
	l5 -> l6 : 1-tmp_6^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l7 -> l1 : result_4^0'=result_4^post1, tmp_6^0'=tmp_6^post1, x_5^0'=x_5^post1, (-tmp_6^post1+tmp_6^post10 == 0 /\ result_4^post10-result_4^post1 == 0 /\ -x_5^post1+x_5^post10 == 0 /\ tmp_6^0-tmp_6^post10 == 0 /\ -result_4^post10+result_4^0 == 0 /\ -x_5^post10+x_5^0 == 0), cost: 1
	New rule:
	l7 -> l1 : result_4^0'=result_4^post10, tmp_6^0'=tmp_6^post10, x_5^0'=x_5^post10, (0 == 0 /\ tmp_6^0-tmp_6^post10 == 0 /\ -result_4^post10+result_4^0 == 0 /\ -x_5^post10+x_5^0 == 0), cost: 1
	
		propagated equality tmp_6^post1 = tmp_6^post10
		
		propagated equality result_4^post1 = result_4^post10
		
		propagated equality x_5^post1 = x_5^post10
		
	Propagated Equalities

	Original rule:
	l7 -> l1 : result_4^0'=result_4^post10, tmp_6^0'=tmp_6^post10, x_5^0'=x_5^post10, (0 == 0 /\ tmp_6^0-tmp_6^post10 == 0 /\ -result_4^post10+result_4^0 == 0 /\ -x_5^post10+x_5^0 == 0), cost: 1
	New rule:
	l7 -> l1 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^0, x_5^0'=x_5^0, 0 == 0, cost: 1
	
		propagated equality tmp_6^post10 = tmp_6^0
		
		propagated equality result_4^post10 = result_4^0
		
		propagated equality x_5^post10 = x_5^0
		
	Simplified Guard

	Original rule:
	l7 -> l1 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^0, x_5^0'=x_5^0, 0 == 0, cost: 1
	New rule:
	l7 -> l1 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^0, x_5^0'=x_5^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l7 -> l1 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^0, x_5^0'=x_5^0, T, cost: 1
	New rule:
	l7 -> l1 : T, cost: 1
	
	made implied equalities explicit

	Original rule:
	l1 -> l1 : result_4^0'=result_4^post4, tmp_6^0'=tmp_6^post4, x_5^0'=x_5^post4, (0 == 0 /\ tmp_6^post3 <= 0 /\ -tmp_6^post4+tmp_6^post3 == 0 /\ -tmp_6^post3 <= 0 /\ result_4^0-result_4^post3 == 0 /\ -result_4^post4+result_4^post3 == 0 /\ -x_5^post3+x_5^0 == 0 /\ -x_5^post4+x_5^post3 == 0 /\ -x_5^0 <= 0), cost: 1
	New rule:
	l1 -> l1 : result_4^0'=result_4^post4, tmp_6^0'=tmp_6^post4, x_5^0'=x_5^post4, (0 == 0 /\ tmp_6^post3 <= 0 /\ tmp_6^post3 == 0 /\ -tmp_6^post4+tmp_6^post3 == 0 /\ -tmp_6^post3 <= 0 /\ result_4^0-result_4^post3 == 0 /\ -result_4^post4+result_4^post3 == 0 /\ -x_5^post3+x_5^0 == 0 /\ -x_5^post4+x_5^post3 == 0 /\ -x_5^0 <= 0), cost: 1
	
	Propagated Equalities

	Original rule:
	l1 -> l1 : result_4^0'=result_4^post4, tmp_6^0'=tmp_6^post4, x_5^0'=x_5^post4, (0 == 0 /\ tmp_6^post3 <= 0 /\ tmp_6^post3 == 0 /\ -tmp_6^post4+tmp_6^post3 == 0 /\ -tmp_6^post3 <= 0 /\ result_4^0-result_4^post3 == 0 /\ -result_4^post4+result_4^post3 == 0 /\ -x_5^post3+x_5^0 == 0 /\ -x_5^post4+x_5^post3 == 0 /\ -x_5^0 <= 0), cost: 1
	New rule:
	l1 -> l1 : result_4^0'=result_4^post3, tmp_6^0'=tmp_6^post3, x_5^0'=x_5^post3, (0 == 0 /\ tmp_6^post3 <= 0 /\ tmp_6^post3 == 0 /\ -tmp_6^post3 <= 0 /\ result_4^0-result_4^post3 == 0 /\ -x_5^post3+x_5^0 == 0 /\ -x_5^0 <= 0), cost: 1
	
		propagated equality tmp_6^post4 = tmp_6^post3
		
		propagated equality result_4^post4 = result_4^post3
		
		propagated equality x_5^post4 = x_5^post3
		
	Propagated Equalities

	Original rule:
	l1 -> l1 : result_4^0'=result_4^post3, tmp_6^0'=tmp_6^post3, x_5^0'=x_5^post3, (0 == 0 /\ tmp_6^post3 <= 0 /\ tmp_6^post3 == 0 /\ -tmp_6^post3 <= 0 /\ result_4^0-result_4^post3 == 0 /\ -x_5^post3+x_5^0 == 0 /\ -x_5^0 <= 0), cost: 1
	New rule:
	l1 -> l1 : result_4^0'=result_4^0, tmp_6^0'=0, x_5^0'=x_5^0, (0 <= 0 /\ 0 == 0 /\ -x_5^0 <= 0), cost: 1
	
		propagated equality tmp_6^post3 = 0
		
		propagated equality result_4^post3 = result_4^0
		
		propagated equality x_5^post3 = x_5^0
		
	Simplified Guard

	Original rule:
	l1 -> l1 : result_4^0'=result_4^0, tmp_6^0'=0, x_5^0'=x_5^0, (0 <= 0 /\ 0 == 0 /\ -x_5^0 <= 0), cost: 1
	New rule:
	l1 -> l1 : result_4^0'=result_4^0, tmp_6^0'=0, x_5^0'=x_5^0, -x_5^0 <= 0, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l1 -> l1 : result_4^0'=result_4^0, tmp_6^0'=0, x_5^0'=x_5^0, -x_5^0 <= 0, cost: 1
	New rule:
	l1 -> l1 : tmp_6^0'=0, -x_5^0 <= 0, cost: 1
	
	Propagated Equalities

	Original rule:
	l6 -> l1 : result_4^0'=result_4^post9, tmp_6^0'=tmp_6^post9, x_5^0'=x_5^post9, (tmp_6^0-tmp_6^post8 == 0 /\ -tmp_6^post9+tmp_6^post8 == 0 /\ 1-x_5^0+x_5^post8 == 0 /\ -x_5^post9+x_5^post8 == 0 /\ -result_4^post8+result_4^0 == 0 /\ -result_4^post9+result_4^post8 == 0), cost: 1
	New rule:
	l6 -> l1 : result_4^0'=result_4^post8, tmp_6^0'=tmp_6^post8, x_5^0'=x_5^post8, (0 == 0 /\ tmp_6^0-tmp_6^post8 == 0 /\ 1-x_5^0+x_5^post8 == 0 /\ -result_4^post8+result_4^0 == 0), cost: 1
	
		propagated equality tmp_6^post9 = tmp_6^post8
		
		propagated equality x_5^post9 = x_5^post8
		
		propagated equality result_4^post9 = result_4^post8
		
	Propagated Equalities

	Original rule:
	l6 -> l1 : result_4^0'=result_4^post8, tmp_6^0'=tmp_6^post8, x_5^0'=x_5^post8, (0 == 0 /\ tmp_6^0-tmp_6^post8 == 0 /\ 1-x_5^0+x_5^post8 == 0 /\ -result_4^post8+result_4^0 == 0), cost: 1
	New rule:
	l6 -> l1 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^0, x_5^0'=-1+x_5^0, 0 == 0, cost: 1
	
		propagated equality tmp_6^post8 = tmp_6^0
		
		propagated equality x_5^post8 = -1+x_5^0
		
		propagated equality result_4^post8 = result_4^0
		
	Simplified Guard

	Original rule:
	l6 -> l1 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^0, x_5^0'=-1+x_5^0, 0 == 0, cost: 1
	New rule:
	l6 -> l1 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^0, x_5^0'=-1+x_5^0, T, cost: 1
	
	Removed Trivial Updates

	Original rule:
	l6 -> l1 : result_4^0'=result_4^0, tmp_6^0'=tmp_6^0, x_5^0'=-1+x_5^0, T, cost: 1
	New rule:
	l6 -> l1 : x_5^0'=-1+x_5^0, T, cost: 1

Step with 17

	Trace

	17[T]
	
	Blocked

	[{}, {}]

Step with 13

	Trace

	17[T], 13[(1+x_5^0 <= 0)]
	
	Blocked

	[{}, {}, {}]

Backtrack

	Trace

	17[T]
	
	Blocked

	[{}, {13[T]}]

Step with 14

	Trace

	17[T], 14[(-x_5^0 <= 0)]
	
	Blocked

	[{}, {13[T]}, {}]

Step with 15

	Trace

	17[T], 14[(-x_5^0 <= 0)], 15[(1+tmp_6^0 <= 0)]
	
	Blocked

	[{}, {13[T]}, {}, {}]

Step with 19

	Trace

	17[T], 14[(-x_5^0 <= 0)], 15[(1+tmp_6^0 <= 0)], 19[T]
	
	Blocked

	[{}, {13[T]}, {}, {}, {}]

Accelerate

Start location: l7
Program variables: result_4^0 tmp_6^0 x_5^0
  13: l1 -> l2 : result_4^0'=result_4^post2, 1+x_5^0 <= 0, cost: 1
  14: l1 -> l5 : tmp_6^0'=tmp_6^post5, -x_5^0 <= 0, cost: 1
  18: l1 -> l1 : tmp_6^0'=0, -x_5^0 <= 0, cost: 1
  20: l1 -> l1 : tmp_6^0'=tmp_6^post51, x_5^0'=-n+x_5^0, (-1-tmp_6^post51 >= 0 /\ 1-n+x_5^0 >= 0 /\ -1+n >= 0), cost: 1
  15: l5 -> l6 : 1+tmp_6^0 <= 0, cost: 1
  16: l5 -> l6 : 1-tmp_6^0 <= 0, cost: 1
  19: l6 -> l1 : x_5^0'=-1+x_5^0, T, cost: 1
  17: l7 -> l1 : T, cost: 1

	Loop Acceleration

	Original rule:
	l1 -> l1 : tmp_6^0'=tmp_6^post51, x_5^0'=-1+x_5^0, (1+tmp_6^post51 <= 0 /\ -x_5^0 <= 0), cost: 1
	New rule:
	l1 -> l1 : tmp_6^0'=tmp_6^post51, x_5^0'=-n+x_5^0, (-1-tmp_6^post51 >= 0 /\ 1-n+x_5^0 >= 0 /\ -1+n >= 0), cost: 1

		-1-tmp_6^post51 >= 0 [0]: monotonic increase yields -1-tmp_6^post51 >= 0
		
		x_5^0 >= 0 [0]: montonic decrease yields 1-n+x_5^0 >= 0
		
		x_5^0 >= 0 [1]: eventual increase yields (1 <= 0 /\ x_5^0 >= 0)
		
		Replacement map: {-1-tmp_6^post51 >= 0 -> -1-tmp_6^post51 >= 0, x_5^0 >= 0 -> 1-n+x_5^0 >= 0}

	Trace

	17[T], 20[(-1-tmp_6^post51 >= 0 /\ 1-n+x_5^0 >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {13[T]}, {20[T]}]

Step with 13

	Trace

	17[T], 20[(-1-tmp_6^post51 >= 0 /\ 1-n+x_5^0 >= 0 /\ -1+n >= 0)], 13[(1+x_5^0 <= 0)]
	
	Blocked

	[{}, {13[T]}, {20[T]}, {}]

Backtrack

	Trace

	17[T], 20[(-1-tmp_6^post51 >= 0 /\ 1-n+x_5^0 >= 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {13[T]}, {13[T], 20[T]}]

Step with 14

	Trace

	17[T], 20[(-1-tmp_6^post51 >= 0 /\ 1-n+x_5^0 >= 0 /\ -1+n >= 0)], 14[(-x_5^0 <= 0)]
	
	Blocked

	[{}, {13[T]}, {13[T], 20[T]}, {}]

Step with 15

	Trace

	17[T], 20[(-1-tmp_6^post51 >= 0 /\ 1-n+x_5^0 >= 0 /\ -1+n >= 0)], 14[(-x_5^0 <= 0)], 15[(1+tmp_6^0 <= 0)]
	
	Blocked

	[{}, {13[T]}, {13[T], 20[T]}, {}, {}]

Step with 19

	Trace

	17[T], 20[(-1-tmp_6^post51 >= 0 /\ 1-n+x_5^0 >= 0 /\ -1+n >= 0)], 14[(-x_5^0 <= 0)], 15[(1+tmp_6^0 <= 0)], 19[T]
	
	Blocked

	[{}, {13[T]}, {13[T], 20[T]}, {}, {}, {}]

Covered

	Trace

	17[T], 20[(-1-tmp_6^post51 >= 0 /\ 1-n+x_5^0 >= 0 /\ -1+n >= 0)], 14[(-x_5^0 <= 0)], 15[(1+tmp_6^0 <= 0)]
	
	Blocked

	[{}, {13[T]}, {13[T], 20[T]}, {}, {19[T]}]

Backtrack

	Trace

	17[T], 20[(-1-tmp_6^post51 >= 0 /\ 1-n+x_5^0 >= 0 /\ -1+n >= 0)], 14[(-x_5^0 <= 0)]
	
	Blocked

	[{}, {13[T]}, {13[T], 20[T]}, {15[T]}]

Step with 16

	Trace

	17[T], 20[(-1-tmp_6^post51 >= 0 /\ 1-n+x_5^0 >= 0 /\ -1+n >= 0)], 14[(-x_5^0 <= 0)], 16[(1-tmp_6^0 <= 0)]
	
	Blocked

	[{}, {13[T]}, {13[T], 20[T]}, {15[T]}, {}]

Step with 19

	Trace

	17[T], 20[(-1-tmp_6^post51 >= 0 /\ 1-n+x_5^0 >= 0 /\ -1+n >= 0)], 14[(-x_5^0 <= 0)], 16[(1-tmp_6^0 <= 0)], 19[T]
	
	Blocked

	[{}, {13[T]}, {13[T], 20[T]}, {15[T]}, {}, {}]

Accelerate

Start location: l7
Program variables: result_4^0 tmp_6^0 x_5^0
  13: l1 -> l2 : result_4^0'=result_4^post2, 1+x_5^0 <= 0, cost: 1
  14: l1 -> l5 : tmp_6^0'=tmp_6^post5, -x_5^0 <= 0, cost: 1
  18: l1 -> l1 : tmp_6^0'=0, -x_5^0 <= 0, cost: 1
  20: l1 -> l1 : tmp_6^0'=tmp_6^post51, x_5^0'=-n+x_5^0, (-1-tmp_6^post51 >= 0 /\ 1-n+x_5^0 >= 0 /\ -1+n >= 0), cost: 1
  21: l1 -> l1 : tmp_6^0'=tmp_6^post52, x_5^0'=-n2+x_5^0, (-1+tmp_6^post52 >= 0 /\ -1+n2 >= 0 /\ 1-n2+x_5^0 >= 0), cost: 1
  15: l5 -> l6 : 1+tmp_6^0 <= 0, cost: 1
  16: l5 -> l6 : 1-tmp_6^0 <= 0, cost: 1
  19: l6 -> l1 : x_5^0'=-1+x_5^0, T, cost: 1
  17: l7 -> l1 : T, cost: 1

	Loop Acceleration

	Original rule:
	l1 -> l1 : tmp_6^0'=tmp_6^post52, x_5^0'=-1+x_5^0, (1-tmp_6^post52 <= 0 /\ -x_5^0 <= 0), cost: 1
	New rule:
	l1 -> l1 : tmp_6^0'=tmp_6^post52, x_5^0'=-n2+x_5^0, (-1+tmp_6^post52 >= 0 /\ -1+n2 >= 0 /\ 1-n2+x_5^0 >= 0), cost: 1

		-1+tmp_6^post52 >= 0 [0]: monotonic increase yields -1+tmp_6^post52 >= 0
		
		x_5^0 >= 0 [0]: montonic decrease yields 1-n2+x_5^0 >= 0
		
		x_5^0 >= 0 [1]: eventual increase yields (1 <= 0 /\ x_5^0 >= 0)
		
		Replacement map: {-1+tmp_6^post52 >= 0 -> -1+tmp_6^post52 >= 0, x_5^0 >= 0 -> 1-n2+x_5^0 >= 0}

	Trace

	17[T], 20[(-1-tmp_6^post51 >= 0 /\ 1-n+x_5^0 >= 0 /\ -1+n >= 0)], 21[(-1+tmp_6^post52 >= 0 /\ -1+n2 >= 0 /\ 1-n2+x_5^0 >= 0)]
	
	Blocked

	[{}, {13[T]}, {13[T], 20[T]}, {21[T]}]

Accelerate

Start location: l7
Program variables: result_4^0 tmp_6^0 x_5^0
  13: l1 -> l2 : result_4^0'=result_4^post2, 1+x_5^0 <= 0, cost: 1
  14: l1 -> l5 : tmp_6^0'=tmp_6^post5, -x_5^0 <= 0, cost: 1
  18: l1 -> l1 : tmp_6^0'=0, -x_5^0 <= 0, cost: 1
  20: l1 -> l1 : tmp_6^0'=tmp_6^post51, x_5^0'=-n+x_5^0, (-1-tmp_6^post51 >= 0 /\ 1-n+x_5^0 >= 0 /\ -1+n >= 0), cost: 1
  21: l1 -> l1 : tmp_6^0'=tmp_6^post52, x_5^0'=-n2+x_5^0, (-1+tmp_6^post52 >= 0 /\ -1+n2 >= 0 /\ 1-n2+x_5^0 >= 0), cost: 1
  22: l1 -> l1 : tmp_6^0'=tmp_6^post52, x_5^0'=-n1*n3-n2*n3+x_5^0, (-1+tmp_6^post52 >= 0 /\ -1+n2 >= 0 /\ -1+n3 >= 0 /\ 1-n1-n1*(-1+n3)-n2*(-1+n3)+x_5^0 >= 0 /\ -1+n1 >= 0 /\ 1-n2-n1-n1*(-1+n3)-n2*(-1+n3)+x_5^0 >= 0), cost: 1
  15: l5 -> l6 : 1+tmp_6^0 <= 0, cost: 1
  16: l5 -> l6 : 1-tmp_6^0 <= 0, cost: 1
  19: l6 -> l1 : x_5^0'=-1+x_5^0, T, cost: 1
  17: l7 -> l1 : T, cost: 1

	Loop Acceleration

	Original rule:
	l1 -> l1 : tmp_6^0'=tmp_6^post52, x_5^0'=-n2-n1+x_5^0, (-1+tmp_6^post52 >= 0 /\ -1+n2 >= 0 /\ -1+n1 >= 0 /\ 1-n1+x_5^0 >= 0 /\ 1-n2-n1+x_5^0 >= 0), cost: 1
	New rule:
	l1 -> l1 : tmp_6^0'=tmp_6^post52, x_5^0'=-n1*n3-n2*n3+x_5^0, (-1+tmp_6^post52 >= 0 /\ -1+n2 >= 0 /\ -1+n3 >= 0 /\ 1-n1-n1*(-1+n3)-n2*(-1+n3)+x_5^0 >= 0 /\ -1+n1 >= 0 /\ 1-n2-n1-n1*(-1+n3)-n2*(-1+n3)+x_5^0 >= 0), cost: 1

		-1+tmp_6^post52 >= 0 [0]: monotonic increase yields -1+tmp_6^post52 >= 0
		
		-1+n2 >= 0 [0]: monotonic increase yields -1+n2 >= 0
		
		-1+n1 >= 0 [0]: monotonic increase yields -1+n1 >= 0
		
		1-n1+x_5^0 >= 0 [0]: montonic decrease yields 1-n1-n1*(-1+n3)-n2*(-1+n3)+x_5^0 >= 0, dependencies: -1+n2 >= 0 -1+n1 >= 0
		
		1-n1+x_5^0 >= 0 [1]: eventual increase yields (1-n1+x_5^0 >= 0 /\ n2+n1 <= 0), dependencies: -1+n2 >= 0 -1+n1 >= 0
		
		1-n2-n1+x_5^0 >= 0 [0]: montonic decrease yields 1-n2-n1-n1*(-1+n3)-n2*(-1+n3)+x_5^0 >= 0, dependencies: -1+n2 >= 0 -1+n1 >= 0
		
		1-n2-n1+x_5^0 >= 0 [1]: eventual increase yields (1-n2-n1+x_5^0 >= 0 /\ n2+n1 <= 0), dependencies: -1+n2 >= 0 -1+n1 >= 0
		
		Replacement map: {-1+tmp_6^post52 >= 0 -> -1+tmp_6^post52 >= 0, -1+n2 >= 0 -> -1+n2 >= 0, -1+n1 >= 0 -> -1+n1 >= 0, 1-n1+x_5^0 >= 0 -> 1-n1-n1*(-1+n3)-n2*(-1+n3)+x_5^0 >= 0, 1-n2-n1+x_5^0 >= 0 -> 1-n2-n1-n1*(-1+n3)-n2*(-1+n3)+x_5^0 >= 0}

	Trace

	17[T], 22[(-1+tmp_6^post52 >= 0 /\ -1+n2 >= 0 /\ -1+n3 >= 0 /\ 1-n1-n1*(-1+n3)-n2*(-1+n3)+x_5^0 >= 0 /\ -1+n1 >= 0 /\ 1-n2-n1-n1*(-1+n3)-n2*(-1+n3)+x_5^0 >= 0)]
	
	Blocked

	[{}, {13[T]}, {22[T]}]

Step with 13

	Trace

	17[T], 22[(-1+tmp_6^post52 >= 0 /\ -1+n2 >= 0 /\ -1+n3 >= 0 /\ 1-n1-n1*(-1+n3)-n2*(-1+n3)+x_5^0 >= 0 /\ -1+n1 >= 0 /\ 1-n2-n1-n1*(-1+n3)-n2*(-1+n3)+x_5^0 >= 0)], 13[(1+x_5^0 <= 0)]
	
	Blocked

	[{}, {13[T]}, {22[T]}, {}]

Backtrack

	Trace

	17[T], 22[(-1+tmp_6^post52 >= 0 /\ -1+n2 >= 0 /\ -1+n3 >= 0 /\ 1-n1-n1*(-1+n3)-n2*(-1+n3)+x_5^0 >= 0 /\ -1+n1 >= 0 /\ 1-n2-n1-n1*(-1+n3)-n2*(-1+n3)+x_5^0 >= 0)]
	
	Blocked

	[{}, {13[T]}, {13[T], 22[T]}]

Step with 14

	Trace

	17[T], 22[(-1+tmp_6^post52 >= 0 /\ -1+n2 >= 0 /\ -1+n3 >= 0 /\ 1-n1-n1*(-1+n3)-n2*(-1+n3)+x_5^0 >= 0 /\ -1+n1 >= 0 /\ 1-n2-n1-n1*(-1+n3)-n2*(-1+n3)+x_5^0 >= 0)], 14[(-x_5^0 <= 0)]
	
	Blocked

	[{}, {13[T]}, {13[T], 22[T]}, {}]

Step with 16

	Trace

	17[T], 22[(-1+tmp_6^post52 >= 0 /\ -1+n2 >= 0 /\ -1+n3 >= 0 /\ 1-n1-n1*(-1+n3)-n2*(-1+n3)+x_5^0 >= 0 /\ -1+n1 >= 0 /\ 1-n2-n1-n1*(-1+n3)-n2*(-1+n3)+x_5^0 >= 0)], 14[(-x_5^0 <= 0)], 16[(1-tmp_6^0 <= 0)]
	
	Blocked

	[{}, {13[T]}, {13[T], 22[T]}, {}, {}]

Step with 19

	Trace

	17[T], 22[(-1+tmp_6^post52 >= 0 /\ -1+n2 >= 0 /\ -1+n3 >= 0 /\ 1-n1-n1*(-1+n3)-n2*(-1+n3)+x_5^0 >= 0 /\ -1+n1 >= 0 /\ 1-n2-n1-n1*(-1+n3)-n2*(-1+n3)+x_5^0 >= 0)], 14[(-x_5^0 <= 0)], 16[(1-tmp_6^0 <= 0)], 19[T]
	
	Blocked

	[{}, {13[T]}, {13[T], 22[T]}, {}, {}, {}]

Covered

	Trace

	17[T], 22[(-1+tmp_6^post52 >= 0 /\ -1+n2 >= 0 /\ -1+n3 >= 0 /\ 1-n1-n1*(-1+n3)-n2*(-1+n3)+x_5^0 >= 0 /\ -1+n1 >= 0 /\ 1-n2-n1-n1*(-1+n3)-n2*(-1+n3)+x_5^0 >= 0)], 14[(-x_5^0 <= 0)], 16[(1-tmp_6^0 <= 0)]
	
	Blocked

	[{}, {13[T]}, {13[T], 22[T]}, {}, {19[T]}]

Backtrack

	Trace

	17[T], 22[(-1+tmp_6^post52 >= 0 /\ -1+n2 >= 0 /\ -1+n3 >= 0 /\ 1-n1-n1*(-1+n3)-n2*(-1+n3)+x_5^0 >= 0 /\ -1+n1 >= 0 /\ 1-n2-n1-n1*(-1+n3)-n2*(-1+n3)+x_5^0 >= 0)], 14[(-x_5^0 <= 0)]
	
	Blocked

	[{}, {13[T]}, {13[T], 22[T]}, {16[T]}]

Step with 15

	Trace

	17[T], 22[(-1+tmp_6^post52 >= 0 /\ -1+n2 >= 0 /\ -1+n3 >= 0 /\ 1-n1-n1*(-1+n3)-n2*(-1+n3)+x_5^0 >= 0 /\ -1+n1 >= 0 /\ 1-n2-n1-n1*(-1+n3)-n2*(-1+n3)+x_5^0 >= 0)], 14[(-x_5^0 <= 0)], 15[(1+tmp_6^0 <= 0)]
	
	Blocked

	[{}, {13[T]}, {13[T], 22[T]}, {16[T]}, {}]

Step with 19

	Trace

	17[T], 22[(-1+tmp_6^post52 >= 0 /\ -1+n2 >= 0 /\ -1+n3 >= 0 /\ 1-n1-n1*(-1+n3)-n2*(-1+n3)+x_5^0 >= 0 /\ -1+n1 >= 0 /\ 1-n2-n1-n1*(-1+n3)-n2*(-1+n3)+x_5^0 >= 0)], 14[(-x_5^0 <= 0)], 15[(1+tmp_6^0 <= 0)], 19[T]
	
	Blocked

	[{}, {13[T]}, {13[T], 22[T]}, {16[T]}, {}, {}]

Covered

	Trace

	17[T], 22[(-1+tmp_6^post52 >= 0 /\ -1+n2 >= 0 /\ -1+n3 >= 0 /\ 1-n1-n1*(-1+n3)-n2*(-1+n3)+x_5^0 >= 0 /\ -1+n1 >= 0 /\ 1-n2-n1-n1*(-1+n3)-n2*(-1+n3)+x_5^0 >= 0)], 14[(-x_5^0 <= 0)], 15[(1+tmp_6^0 <= 0)]
	
	Blocked

	[{}, {13[T]}, {13[T], 22[T]}, {16[T]}, {19[T]}]

Backtrack

	Trace

	17[T], 22[(-1+tmp_6^post52 >= 0 /\ -1+n2 >= 0 /\ -1+n3 >= 0 /\ 1-n1-n1*(-1+n3)-n2*(-1+n3)+x_5^0 >= 0 /\ -1+n1 >= 0 /\ 1-n2-n1-n1*(-1+n3)-n2*(-1+n3)+x_5^0 >= 0)], 14[(-x_5^0 <= 0)]
	
	Blocked

	[{}, {13[T]}, {13[T], 22[T]}, {15[T], 16[T]}]

Backtrack

	Trace

	17[T], 22[(-1+tmp_6^post52 >= 0 /\ -1+n2 >= 0 /\ -1+n3 >= 0 /\ 1-n1-n1*(-1+n3)-n2*(-1+n3)+x_5^0 >= 0 /\ -1+n1 >= 0 /\ 1-n2-n1-n1*(-1+n3)-n2*(-1+n3)+x_5^0 >= 0)]
	
	Blocked

	[{}, {13[T]}, {13[T], 14[T], 22[T]}]

Step with 18

	Trace

	17[T], 22[(-1+tmp_6^post52 >= 0 /\ -1+n2 >= 0 /\ -1+n3 >= 0 /\ 1-n1-n1*(-1+n3)-n2*(-1+n3)+x_5^0 >= 0 /\ -1+n1 >= 0 /\ 1-n2-n1-n1*(-1+n3)-n2*(-1+n3)+x_5^0 >= 0)], 18[(-x_5^0 <= 0)]
	
	Blocked

	[{}, {13[T]}, {13[T], 14[T], 22[T]}, {}]

Nonterm

Start location: l7
Program variables: result_4^0 tmp_6^0 x_5^0
  13: l1 -> l2 : result_4^0'=result_4^post2, 1+x_5^0 <= 0, cost: 1
  14: l1 -> l5 : tmp_6^0'=tmp_6^post5, -x_5^0 <= 0, cost: 1
  18: l1 -> l1 : tmp_6^0'=0, -x_5^0 <= 0, cost: 1
  20: l1 -> l1 : tmp_6^0'=tmp_6^post51, x_5^0'=-n+x_5^0, (-1-tmp_6^post51 >= 0 /\ 1-n+x_5^0 >= 0 /\ -1+n >= 0), cost: 1
  21: l1 -> l1 : tmp_6^0'=tmp_6^post52, x_5^0'=-n2+x_5^0, (-1+tmp_6^post52 >= 0 /\ -1+n2 >= 0 /\ 1-n2+x_5^0 >= 0), cost: 1
  22: l1 -> l1 : tmp_6^0'=tmp_6^post52, x_5^0'=-n1*n3-n2*n3+x_5^0, (-1+tmp_6^post52 >= 0 /\ -1+n2 >= 0 /\ -1+n3 >= 0 /\ 1-n1-n1*(-1+n3)-n2*(-1+n3)+x_5^0 >= 0 /\ -1+n1 >= 0 /\ 1-n2-n1-n1*(-1+n3)-n2*(-1+n3)+x_5^0 >= 0), cost: 1
  23: l1 -> LoAT_sink : (-1+n4 >= 0 /\ x_5^0 >= 0), cost: NONTERM
  15: l5 -> l6 : 1+tmp_6^0 <= 0, cost: 1
  16: l5 -> l6 : 1-tmp_6^0 <= 0, cost: 1
  19: l6 -> l1 : x_5^0'=-1+x_5^0, T, cost: 1
  17: l7 -> l1 : T, cost: 1

	Certificate of Non-Termination

	Original rule:
	l1 -> l1 : tmp_6^0'=0, (-x_5^0 <= 0), cost: 1
	New rule:
	l1 -> LoAT_sink : (-1+n4 >= 0 /\ x_5^0 >= 0), cost: NONTERM

		x_5^0 >= 0 [0]: monotonic increase yields x_5^0 >= 0
		
		Replacement map: {x_5^0 >= 0 -> x_5^0 >= 0}

Step with 23

	Trace

	17[T], 22[(-1+tmp_6^post52 >= 0 /\ -1+n2 >= 0 /\ -1+n3 >= 0 /\ 1-n1-n1*(-1+n3)-n2*(-1+n3)+x_5^0 >= 0 /\ -1+n1 >= 0 /\ 1-n2-n1-n1*(-1+n3)-n2*(-1+n3)+x_5^0 >= 0)], 23[(-1+n4 >= 0 /\ x_5^0 >= 0)]
	
	Blocked

	[{}, {13[T]}, {13[T], 14[T], 22[T]}, {23[T]}]

Refute

	Counterexample

	[ result_4^0=0 tmp_6^0=0 x_5^0=2 ] 17 [ result_4^0=0 tmp_6^0=1 x_5^0=0 ] 22 [ result_4^0=0 tmp_6^0=0 x_5^0=2 ] 23
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
