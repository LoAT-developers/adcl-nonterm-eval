unknown

Initial ITS

Start location: [1]
Program variables: i j
   0: [1] -> [2] : i'=0, T, cost: 1
   1: [2] -> [3] : j'=5, T, cost: 1
   2: [3] -> [4] : -100+i < 0, cost: 1
   5: [3] -> [6] : -100+i >= 0, cost: 1
   3: [4] -> [5] : i'=1+i, T, cost: 1
   4: [5] -> [3] : T, cost: 1
   6: [6] -> [7] : -21+j < 0, cost: 1
   9: [6] -> [9] : -21+j >= 0, cost: 1
   7: [7] -> [8] : j'=3+j, T, cost: 1
   8: [8] -> [6] : T, cost: 1

Chained Linear Paths

Start location: [1]
Program variables: i j
  10: [1] -> [3] : i'=0, j'=5, T, cost: 1
   5: [3] -> [6] : -100+i >= 0, cost: 1
  12: [3] -> [3] : i'=1+i, -100+i < 0, cost: 1
   9: [6] -> [9] : -21+j >= 0, cost: 1
  14: [6] -> [6] : j'=3+j, -21+j < 0, cost: 1

	Eliminating location [2] by chaining:

	Applied chaining

	First rule:
	[1] -> [2] : i'=0, T, cost: 1
	Second rule:
	[2] -> [3] : j'=5, T, cost: 1
	New rule:
	[1] -> [3] : i'=0, j'=5, T, cost: 1
	
	Applied deletion

	Removed the following rules: 0 1
	
	Eliminating location [4] by chaining:

	Applied chaining

	First rule:
	[3] -> [4] : -100+i < 0, cost: 1
	Second rule:
	[4] -> [5] : i'=1+i, T, cost: 1
	New rule:
	[3] -> [5] : i'=1+i, -100+i < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 2 3
	
	Eliminating location [5] by chaining:

	Applied chaining

	First rule:
	[3] -> [5] : i'=1+i, -100+i < 0, cost: 1
	Second rule:
	[5] -> [3] : T, cost: 1
	New rule:
	[3] -> [3] : i'=1+i, -100+i < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 4 11
	
	Eliminating location [7] by chaining:

	Applied chaining

	First rule:
	[6] -> [7] : -21+j < 0, cost: 1
	Second rule:
	[7] -> [8] : j'=3+j, T, cost: 1
	New rule:
	[6] -> [8] : j'=3+j, -21+j < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 6 7
	
	Eliminating location [8] by chaining:

	Applied chaining

	First rule:
	[6] -> [8] : j'=3+j, -21+j < 0, cost: 1
	Second rule:
	[8] -> [6] : T, cost: 1
	New rule:
	[6] -> [6] : j'=3+j, -21+j < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 8 13

Step with 10

	Trace

	10[T]
	
	Blocked

	[{}, {}]

Step with 12

	Trace

	10[T], 12[(-100+i < 0)]
	
	Blocked

	[{}, {5[T]}, {}]

Accelerate

Start location: [1]
Program variables: i j
  10: [1] -> [3] : i'=0, j'=5, T, cost: 1
   5: [3] -> [6] : -100+i >= 0, cost: 1
  12: [3] -> [3] : i'=1+i, -100+i < 0, cost: 1
  15: [3] -> [3] : i'=n+i, (101-n-i > 0 /\ -1+n >= 0), cost: 1
   9: [6] -> [9] : -21+j >= 0, cost: 1
  14: [6] -> [6] : j'=3+j, -21+j < 0, cost: 1

	Loop Acceleration

	Original rule:
	[3] -> [3] : i'=1+i, (-100+i < 0), cost: 1
	New rule:
	[3] -> [3] : i'=n+i, (101-n-i > 0 /\ -1+n >= 0), cost: 1

		100-i > 0 [0]: montonic decrease yields 101-n-i > 0
		
		100-i > 0 [1]: eventual increase yields (1 <= 0 /\ 100-i > 0)
		
		Replacement map: {100-i > 0 -> 101-n-i > 0}

	Trace

	10[T], 15[(101-n-i > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {5[T]}, {12[T], 15[T]}]

Step with 5

	Trace

	10[T], 15[(101-n-i > 0 /\ -1+n >= 0)], 5[(-100+i >= 0)]
	
	Blocked

	[{}, {5[T]}, {12[T], 15[T]}, {}]

Step with 14

	Trace

	10[T], 15[(101-n-i > 0 /\ -1+n >= 0)], 5[(-100+i >= 0)], 14[(-21+j < 0)]
	
	Blocked

	[{}, {5[T]}, {12[T], 15[T]}, {9[T]}, {}]

Accelerate

Start location: [1]
Program variables: i j
  10: [1] -> [3] : i'=0, j'=5, T, cost: 1
   5: [3] -> [6] : -100+i >= 0, cost: 1
  12: [3] -> [3] : i'=1+i, -100+i < 0, cost: 1
  15: [3] -> [3] : i'=n+i, (101-n-i > 0 /\ -1+n >= 0), cost: 1
   9: [6] -> [9] : -21+j >= 0, cost: 1
  14: [6] -> [6] : j'=3+j, -21+j < 0, cost: 1
  16: [6] -> [6] : j'=j+3*n2, (24-j-3*n2 > 0 /\ -1+n2 >= 0), cost: 1

	Loop Acceleration

	Original rule:
	[6] -> [6] : j'=3+j, (-21+j < 0), cost: 1
	New rule:
	[6] -> [6] : j'=j+3*n2, (24-j-3*n2 > 0 /\ -1+n2 >= 0), cost: 1

		21-j > 0 [0]: montonic decrease yields 24-j-3*n2 > 0
		
		21-j > 0 [1]: eventual increase yields (21-j > 0 /\ 3 <= 0)
		
		Replacement map: {21-j > 0 -> 24-j-3*n2 > 0}

	Trace

	10[T], 15[(101-n-i > 0 /\ -1+n >= 0)], 5[(-100+i >= 0)], 16[(24-j-3*n2 > 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {5[T]}, {12[T], 15[T]}, {9[T]}, {14[T], 16[T]}]

Step with 9

	Trace

	10[T], 15[(101-n-i > 0 /\ -1+n >= 0)], 5[(-100+i >= 0)], 16[(24-j-3*n2 > 0 /\ -1+n2 >= 0)], 9[(-21+j >= 0)]
	
	Blocked

	[{}, {5[T]}, {12[T], 15[T]}, {9[T]}, {14[T], 16[T]}, {}]

Backtrack

	Trace

	10[T], 15[(101-n-i > 0 /\ -1+n >= 0)], 5[(-100+i >= 0)], 16[(24-j-3*n2 > 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {5[T]}, {12[T], 15[T]}, {9[T]}, {9[T], 14[T], 16[T]}]

Backtrack

	Trace

	10[T], 15[(101-n-i > 0 /\ -1+n >= 0)], 5[(-100+i >= 0)]
	
	Blocked

	[{}, {5[T]}, {12[T], 15[T]}, {9[T], 16[T]}]

Step with 14

	Trace

	10[T], 15[(101-n-i > 0 /\ -1+n >= 0)], 5[(-100+i >= 0)], 14[(-21+j < 0)]
	
	Blocked

	[{}, {5[T]}, {12[T], 15[T]}, {9[T], 16[T]}, {}]

Covered

	Trace

	10[T], 15[(101-n-i > 0 /\ -1+n >= 0)], 5[(-100+i >= 0)]
	
	Blocked

	[{}, {5[T]}, {12[T], 15[T]}, {9[T], 14[T], 16[T]}]

Backtrack

	Trace

	10[T], 15[(101-n-i > 0 /\ -1+n >= 0)]
	
	Blocked

	[{}, {5[T]}, {5[T], 12[T], 15[T]}]

Backtrack

	Trace

	10[T]
	
	Blocked

	[{}, {5[T], 15[T]}]

Step with 12

	Trace

	10[T], 12[(-100+i < 0)]
	
	Blocked

	[{}, {5[T], 15[T]}, {}]

Covered

	Trace

	10[T]
	
	Blocked

	[{}, {5[T], 12[T], 15[T]}]

Backtrack

	Trace

	Blocked

	[{10[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
