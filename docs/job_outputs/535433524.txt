WORST_CASE(Omega(0),?)

Initial ITS
Start location: __init
   0: f1_0_main_Load -> f74_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0), cost: 1
   1: f74_0_main_LE -> f138_0_main_GE : arg2'=arg2P1, arg1'=arg1P1, (-arg1P1 == 0 /\ arg1 > 0 /\ arg1-arg2P1 == 0), cost: 1
   2: f138_0_main_GE -> f74_0_main_LE : arg2'=arg2P2, arg1'=arg1P2, (arg2-arg1 <= 0 /\ -1+arg2-arg1P2 == 0), cost: 1
   3: f138_0_main_GE -> f138_0_main_GE : arg2'=arg2P3, arg1'=arg1P3, (arg2-arg1 > 0 /\ arg2-arg2P3 == 0 /\ 1-arg1P3+arg1 == 0), cost: 1
   4: __init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, TRUE, cost: 1


Applied preprocessing
Original rule:
f74_0_main_LE -> f138_0_main_GE : arg2'=arg2P1, arg1'=arg1P1, (-arg1P1 == 0 /\ arg1 > 0 /\ arg1-arg2P1 == 0), cost: 1
New rule:
f74_0_main_LE -> f138_0_main_GE : arg2'=arg1, arg1'=0, arg1 > 0, cost: 1

Applied preprocessing
Original rule:
f138_0_main_GE -> f74_0_main_LE : arg2'=arg2P2, arg1'=arg1P2, (arg2-arg1 <= 0 /\ -1+arg2-arg1P2 == 0), cost: 1
New rule:
f138_0_main_GE -> f74_0_main_LE : arg2'=arg2P2, arg1'=-1+arg2, arg2-arg1 <= 0, cost: 1

Applied preprocessing
Original rule:
f138_0_main_GE -> f138_0_main_GE : arg2'=arg2P3, arg1'=arg1P3, (arg2-arg1 > 0 /\ arg2-arg2P3 == 0 /\ 1-arg1P3+arg1 == 0), cost: 1
New rule:
f138_0_main_GE -> f138_0_main_GE : arg1'=1+arg1, arg2-arg1 > 0, cost: 1

Simplified rules
Start location: __init
   0: f1_0_main_Load -> f74_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0), cost: 1
   5: f74_0_main_LE -> f138_0_main_GE : arg2'=arg1, arg1'=0, arg1 > 0, cost: 1
   6: f138_0_main_GE -> f74_0_main_LE : arg2'=arg2P2, arg1'=-1+arg2, arg2-arg1 <= 0, cost: 1
   7: f138_0_main_GE -> f138_0_main_GE : arg1'=1+arg1, arg2-arg1 > 0, cost: 1
   4: __init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, TRUE, cost: 1


Applied acceleration
Original rule:
f138_0_main_GE -> f138_0_main_GE : arg1'=1+arg1, arg2-arg1 > 0, cost: 1
New rule:
f138_0_main_GE -> f138_0_main_GE : arg1'=n+arg1, (n >= 0 /\ 1+arg2-n-arg1 > 0), cost: n
Sub-proof via acceration calculus written to file:///tmp/tmpnam_lLGflc.txt

Applied instantiation
Original rule:
f138_0_main_GE -> f138_0_main_GE : arg1'=n+arg1, (n >= 0 /\ 1+arg2-n-arg1 > 0), cost: n
New rule:
f138_0_main_GE -> f138_0_main_GE : arg1'=arg2, (1 > 0 /\ arg2-arg1 >= 0), cost: arg2-arg1

Applied simplification
Original rule:
f138_0_main_GE -> f138_0_main_GE : arg1'=arg2, (1 > 0 /\ arg2-arg1 >= 0), cost: arg2-arg1
New rule:
f138_0_main_GE -> f138_0_main_GE : arg1'=arg2, arg2-arg1 >= 0, cost: arg2-arg1

Applied deletion
Removed the following rules: 7

Accelerated simple loops
Start location: __init
   0: f1_0_main_Load -> f74_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0), cost: 1
   5: f74_0_main_LE -> f138_0_main_GE : arg2'=arg1, arg1'=0, arg1 > 0, cost: 1
   6: f138_0_main_GE -> f74_0_main_LE : arg2'=arg2P2, arg1'=-1+arg2, arg2-arg1 <= 0, cost: 1
   9: f138_0_main_GE -> f138_0_main_GE : arg1'=arg2, arg2-arg1 >= 0, cost: arg2-arg1
   4: __init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, TRUE, cost: 1


Applied chaining
First rule:
f74_0_main_LE -> f138_0_main_GE : arg2'=arg1, arg1'=0, arg1 > 0, cost: 1
Second rule:
f138_0_main_GE -> f138_0_main_GE : arg1'=arg2, arg2-arg1 >= 0, cost: arg2-arg1
New rule:
f74_0_main_LE -> f138_0_main_GE : arg2'=arg1, arg1 > 0, cost: 1+arg1

Applied deletion
Removed the following rules: 9

Chained accelerated rules with incoming rules
Start location: __init
   0: f1_0_main_Load -> f74_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0), cost: 1
   5: f74_0_main_LE -> f138_0_main_GE : arg2'=arg1, arg1'=0, arg1 > 0, cost: 1
  10: f74_0_main_LE -> f138_0_main_GE : arg2'=arg1, arg1 > 0, cost: 1+arg1
   6: f138_0_main_GE -> f74_0_main_LE : arg2'=arg2P2, arg1'=-1+arg2, arg2-arg1 <= 0, cost: 1
   4: __init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, TRUE, cost: 1


Eliminating location f1_0_main_Load by chaining:

Applied chaining
First rule:
__init -> f1_0_main_Load : arg2'=arg2P4, arg1'=arg1P4, TRUE, cost: 1
Second rule:
f1_0_main_Load -> f74_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0), cost: 1
New rule:
__init -> f74_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P4 > 0 /\ 1+arg1P0 > 0 /\ arg1P4 > 0), cost: 2

Applied deletion
Removed the following rules: 0 4

Eliminated locations on linear paths
Start location: __init
   5: f74_0_main_LE -> f138_0_main_GE : arg2'=arg1, arg1'=0, arg1 > 0, cost: 1
  10: f74_0_main_LE -> f138_0_main_GE : arg2'=arg1, arg1 > 0, cost: 1+arg1
   6: f138_0_main_GE -> f74_0_main_LE : arg2'=arg2P2, arg1'=-1+arg2, arg2-arg1 <= 0, cost: 1
  11: __init -> f74_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P4 > 0 /\ 1+arg1P0 > 0 /\ arg1P4 > 0), cost: 2


Eliminating location f138_0_main_GE by chaining:

Applied chaining
First rule:
f74_0_main_LE -> f138_0_main_GE : arg2'=arg1, arg1 > 0, cost: 1+arg1
Second rule:
f138_0_main_GE -> f74_0_main_LE : arg2'=arg2P2, arg1'=-1+arg2, arg2-arg1 <= 0, cost: 1
New rule:
f74_0_main_LE -> f74_0_main_LE : arg2'=arg2P2, arg1'=-1+arg1, (0 <= 0 /\ arg1 > 0), cost: 2+arg1

Applied simplification
Original rule:
f74_0_main_LE -> f74_0_main_LE : arg2'=arg2P2, arg1'=-1+arg1, (0 <= 0 /\ arg1 > 0), cost: 2+arg1
New rule:
f74_0_main_LE -> f74_0_main_LE : arg2'=arg2P2, arg1'=-1+arg1, arg1 > 0, cost: 2+arg1

Applied deletion
Removed the following rules: 5 6 10

Eliminated locations on tree-shaped paths
Start location: __init
  12: f74_0_main_LE -> f74_0_main_LE : arg2'=arg2P2, arg1'=-1+arg1, arg1 > 0, cost: 2+arg1
  11: __init -> f74_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P4 > 0 /\ 1+arg1P0 > 0 /\ arg1P4 > 0), cost: 2


Applied acceleration
Original rule:
f74_0_main_LE -> f74_0_main_LE : arg2'=arg2P2, arg1'=-1+arg1, arg1 > 0, cost: 2+arg1
New rule:
f74_0_main_LE -> f74_0_main_LE : arg2'=arg2P2, arg1'=-n0+arg1, (1-n0+arg1 > 0 /\ -1+n0 >= 0), cost: n0*arg1+5/2*n0-1/2*n0^2
Sub-proof via acceration calculus written to file:///tmp/tmpnam_FaAckI.txt

Applied instantiation
Original rule:
f74_0_main_LE -> f74_0_main_LE : arg2'=arg2P2, arg1'=-n0+arg1, (1-n0+arg1 > 0 /\ -1+n0 >= 0), cost: n0*arg1+5/2*n0-1/2*n0^2
New rule:
f74_0_main_LE -> f74_0_main_LE : arg2'=arg2P2, arg1'=0, (1 > 0 /\ -1+arg1 >= 0), cost: 5/2*arg1+1/2*arg1^2

Applied simplification
Original rule:
f74_0_main_LE -> f74_0_main_LE : arg2'=arg2P2, arg1'=0, (1 > 0 /\ -1+arg1 >= 0), cost: 5/2*arg1+1/2*arg1^2
New rule:
f74_0_main_LE -> f74_0_main_LE : arg2'=arg2P2, arg1'=0, -1+arg1 >= 0, cost: 5/2*arg1+1/2*arg1^2

Applied deletion
Removed the following rules: 12

Accelerated simple loops
Start location: __init
  14: f74_0_main_LE -> f74_0_main_LE : arg2'=arg2P2, arg1'=0, -1+arg1 >= 0, cost: 5/2*arg1+1/2*arg1^2
  11: __init -> f74_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P4 > 0 /\ 1+arg1P0 > 0 /\ arg1P4 > 0), cost: 2


Applied chaining
First rule:
__init -> f74_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P4 > 0 /\ 1+arg1P0 > 0 /\ arg1P4 > 0), cost: 2
Second rule:
f74_0_main_LE -> f74_0_main_LE : arg2'=arg2P2, arg1'=0, -1+arg1 >= 0, cost: 5/2*arg1+1/2*arg1^2
New rule:
__init -> f74_0_main_LE : arg2'=arg2P2, arg1'=0, -1+arg1P0 >= 0, cost: 2+5/2*arg1P0+1/2*arg1P0^2

Applied deletion
Removed the following rules: 14

Chained accelerated rules with incoming rules
Start location: __init
  11: __init -> f74_0_main_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P4 > 0 /\ 1+arg1P0 > 0 /\ arg1P4 > 0), cost: 2
  15: __init -> f74_0_main_LE : arg2'=arg2P2, arg1'=0, -1+arg1P0 >= 0, cost: 2+5/2*arg1P0+1/2*arg1P0^2


Removed unreachable locations and irrelevant leafs
Start location: __init
  <empty>


Computing asymptotic complexity

Proved the following lower bound
Complexity:  Unknown
Cpx degree: ?

Solved cost: 0
Rule cost:   0

