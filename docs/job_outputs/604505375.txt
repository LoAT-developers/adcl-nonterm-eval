NO

Initial ITS
Start location: __init
   0: f1_0_main_Load -> f112_0_loop_GE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P0 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0 /\ -1+arg2 > 0), cost: 1
   1: f112_0_loop_GE -> f112_0_loop_GE : arg2'=arg2P1, arg1'=arg1P1, (1+arg1 > 0 /\ arg2-arg1 > 0 /\ arg2-arg2P1 == 0 /\ 4+arg1-arg1P1 == 0), cost: 1
   2: f112_0_loop_GE -> f112_0_loop_GE : arg2'=arg2P2, arg1'=arg1P2, (1+arg1 > 0 /\ arg2-arg1 <= 0 /\ 1+arg2 > 0 /\ 2+arg1-arg1P2 == 0 /\ 1+arg2-arg2P2 == 0), cost: 1
   3: __init -> f1_0_main_Load : arg2'=arg2P3, arg1'=arg1P3, TRUE, cost: 1


Applied preprocessing
Original rule:
f112_0_loop_GE -> f112_0_loop_GE : arg2'=arg2P1, arg1'=arg1P1, (1+arg1 > 0 /\ arg2-arg1 > 0 /\ arg2-arg2P1 == 0 /\ 4+arg1-arg1P1 == 0), cost: 1
New rule:
f112_0_loop_GE -> f112_0_loop_GE : arg1'=4+arg1, (1+arg1 > 0 /\ arg2-arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f112_0_loop_GE -> f112_0_loop_GE : arg2'=arg2P2, arg1'=arg1P2, (1+arg1 > 0 /\ arg2-arg1 <= 0 /\ 1+arg2 > 0 /\ 2+arg1-arg1P2 == 0 /\ 1+arg2-arg2P2 == 0), cost: 1
New rule:
f112_0_loop_GE -> f112_0_loop_GE : arg2'=1+arg2, arg1'=2+arg1, (arg2-arg1 <= 0 /\ 1+arg2 > 0), cost: 1

Simplified rules
Start location: __init
   0: f1_0_main_Load -> f112_0_loop_GE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P0 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0 /\ -1+arg2 > 0), cost: 1
   4: f112_0_loop_GE -> f112_0_loop_GE : arg1'=4+arg1, (1+arg1 > 0 /\ arg2-arg1 > 0), cost: 1
   5: f112_0_loop_GE -> f112_0_loop_GE : arg2'=1+arg2, arg1'=2+arg1, (arg2-arg1 <= 0 /\ 1+arg2 > 0), cost: 1
   3: __init -> f1_0_main_Load : arg2'=arg2P3, arg1'=arg1P3, TRUE, cost: 1


Applied acceleration
Original rule:
f112_0_loop_GE -> f112_0_loop_GE : arg1'=4+arg1, (1+arg1 > 0 /\ arg2-arg1 > 0), cost: 1
New rule:
f112_0_loop_GE -> f112_0_loop_GE : arg1'=arg1+4*n, (1+arg1 > 0 /\ n >= 0 /\ 4+arg2-arg1-4*n > 0), cost: n
Sub-proof via acceration calculus written to file:///tmp/tmpnam_jNhfGM.txt

Applied nonterm
Original rule:
f112_0_loop_GE -> f112_0_loop_GE : arg2'=1+arg2, arg1'=2+arg1, (arg2-arg1 <= 0 /\ 1+arg2 > 0), cost: 1
New rule:
f112_0_loop_GE -> [3] : (n0 >= 0 /\ 1+arg2 > 0 /\ -arg2+arg1 >= 0), cost: NONTERM
Sub-proof via acceration calculus written to file:///tmp/tmpnam_ofOIfC.txt

Applied deletion
Removed the following rules: 4 5

Accelerated simple loops
Start location: __init
   0: f1_0_main_Load -> f112_0_loop_GE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P0 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0 /\ -1+arg2 > 0), cost: 1
   6: f112_0_loop_GE -> f112_0_loop_GE : arg1'=arg1+4*n, (1+arg1 > 0 /\ n >= 0 /\ 4+arg2-arg1-4*n > 0), cost: n
   7: f112_0_loop_GE -> [3] : (n0 >= 0 /\ 1+arg2 > 0 /\ -arg2+arg1 >= 0), cost: NONTERM
   3: __init -> f1_0_main_Load : arg2'=arg2P3, arg1'=arg1P3, TRUE, cost: 1


Applied chaining
First rule:
f1_0_main_Load -> f112_0_loop_GE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P0 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0 /\ -1+arg2 > 0), cost: 1
Second rule:
f112_0_loop_GE -> f112_0_loop_GE : arg1'=arg1+4*n, (1+arg1 > 0 /\ n >= 0 /\ 4+arg2-arg1-4*n > 0), cost: n
New rule:
f1_0_main_Load -> f112_0_loop_GE : arg2'=arg2P0, arg1'=arg1P0+4*n, (1+arg2P0 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0 /\ n >= 0 /\ -1+arg2 > 0 /\ 4+arg2P0-arg1P0-4*n > 0), cost: 1+n

Applied chaining
First rule:
f1_0_main_Load -> f112_0_loop_GE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P0 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0 /\ -1+arg2 > 0), cost: 1
Second rule:
f112_0_loop_GE -> [3] : (n0 >= 0 /\ 1+arg2 > 0 /\ -arg2+arg1 >= 0), cost: NONTERM
New rule:
f1_0_main_Load -> [3] : (arg1 > 0 /\ -1+arg2 > 0), cost: NONTERM

Applied deletion
Removed the following rules: 6 7

Chained accelerated rules with incoming rules
Start location: __init
   0: f1_0_main_Load -> f112_0_loop_GE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2P0 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0 /\ -1+arg2 > 0), cost: 1
   8: f1_0_main_Load -> f112_0_loop_GE : arg2'=arg2P0, arg1'=arg1P0+4*n, (1+arg2P0 > 0 /\ arg1 > 0 /\ 1+arg1P0 > 0 /\ n >= 0 /\ -1+arg2 > 0 /\ 4+arg2P0-arg1P0-4*n > 0), cost: 1+n
   9: f1_0_main_Load -> [3] : (arg1 > 0 /\ -1+arg2 > 0), cost: NONTERM
   3: __init -> f1_0_main_Load : arg2'=arg2P3, arg1'=arg1P3, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
   9: f1_0_main_Load -> [3] : (arg1 > 0 /\ -1+arg2 > 0), cost: NONTERM
   3: __init -> f1_0_main_Load : arg2'=arg2P3, arg1'=arg1P3, TRUE, cost: 1


Eliminating location f1_0_main_Load by chaining:

Applied chaining
First rule:
__init -> f1_0_main_Load : arg2'=arg2P3, arg1'=arg1P3, TRUE, cost: 1
Second rule:
f1_0_main_Load -> [3] : (arg1 > 0 /\ -1+arg2 > 0), cost: NONTERM
New rule:
__init -> [3] : (-1+arg2P3 > 0 /\ arg1P3 > 0), cost: NONTERM

Applied deletion
Removed the following rules: 3 9

Eliminated locations on linear paths
Start location: __init
  10: __init -> [3] : (-1+arg2P3 > 0 /\ arg1P3 > 0), cost: NONTERM


Computing asymptotic complexity
Proved nontermination of rule 10 via SMT.

Proved the following lower bound
Complexity:  Nonterm
Cpx degree: Nonterm

Solved cost: NONTERM
Rule cost:   NONTERM
Rule guard:  (-1+arg2P3 > 0 /\ arg1P3 > 0)
