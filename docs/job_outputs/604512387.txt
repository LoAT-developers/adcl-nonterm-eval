NO

Initial ITS

Start location: [1]
Program variables: x
   0: [1] -> [2] : x'=nondet, T, cost: 1
   1: [2] -> [3] : x >= 0, cost: 1
   9: [2] -> [9] : x < 0, cost: 1
   2: [3] -> [5] : (nondet1 < 0 \/ nondet1 > 0), cost: 1
   5: [3] -> [7] : (nondet1 <= 0 /\ nondet1 >= 0), cost: 1
   8: [4] -> [2] : T, cost: 1
   3: [5] -> [6] : x'=-1+x, T, cost: 1
   4: [6] -> [4] : T, cost: 1
   6: [7] -> [8] : x'=1+x, T, cost: 1
   7: [8] -> [4] : T, cost: 1

Chained Linear Paths

Start location: [1]
Program variables: x
   0: [1] -> [2] : x'=nondet, T, cost: 1
   1: [2] -> [3] : x >= 0, cost: 1
   9: [2] -> [9] : x < 0, cost: 1
  12: [3] -> [4] : x'=-1+x, (nondet1 < 0 \/ nondet1 > 0), cost: 1
  13: [3] -> [4] : x'=1+x, (nondet1 <= 0 /\ nondet1 >= 0), cost: 1
   8: [4] -> [2] : T, cost: 1

	Eliminating location [5] by chaining:

	Applied chaining

	First rule:
	[3] -> [5] : (nondet1 < 0 \/ nondet1 > 0), cost: 1
	Second rule:
	[5] -> [6] : x'=-1+x, T, cost: 1
	New rule:
	[3] -> [6] : x'=-1+x, (nondet1 < 0 \/ nondet1 > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 2 3
	
	Eliminating location [7] by chaining:

	Applied chaining

	First rule:
	[3] -> [7] : (nondet1 <= 0 /\ nondet1 >= 0), cost: 1
	Second rule:
	[7] -> [8] : x'=1+x, T, cost: 1
	New rule:
	[3] -> [8] : x'=1+x, (nondet1 <= 0 /\ nondet1 >= 0), cost: 1
	
	Applied deletion

	Removed the following rules: 5 6
	
	Eliminating location [6] by chaining:

	Applied chaining

	First rule:
	[3] -> [6] : x'=-1+x, (nondet1 < 0 \/ nondet1 > 0), cost: 1
	Second rule:
	[6] -> [4] : T, cost: 1
	New rule:
	[3] -> [4] : x'=-1+x, (nondet1 < 0 \/ nondet1 > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 4 10
	
	Eliminating location [8] by chaining:

	Applied chaining

	First rule:
	[3] -> [8] : x'=1+x, (nondet1 <= 0 /\ nondet1 >= 0), cost: 1
	Second rule:
	[8] -> [4] : T, cost: 1
	New rule:
	[3] -> [4] : x'=1+x, (nondet1 <= 0 /\ nondet1 >= 0), cost: 1
	
	Applied deletion

	Removed the following rules: 7 11

Simplified Transitions

Start location: [1]
Program variables: x
   0: [1] -> [2] : x'=nondet, T, cost: 1
   1: [2] -> [3] : x >= 0, cost: 1
   9: [2] -> [9] : x < 0, cost: 1
  12: [3] -> [4] : x'=-1+x, (nondet1 < 0 \/ nondet1 > 0), cost: 1
  14: [3] -> [4] : x'=1+x, T, cost: 1
   8: [4] -> [2] : T, cost: 1

	made implied equalities explicit

	Original rule:
	[3] -> [4] : x'=1+x, (nondet1 <= 0 /\ nondet1 >= 0), cost: 1
	New rule:
	[3] -> [4] : x'=1+x, (nondet1 <= 0 /\ nondet1 >= 0 /\ nondet1 == 0), cost: 1
	
	Propagated Equalities

	Original rule:
	[3] -> [4] : x'=1+x, (nondet1 <= 0 /\ nondet1 >= 0 /\ nondet1 == 0), cost: 1
	New rule:
	[3] -> [4] : x'=1+x, (0 <= 0 /\ 0 >= 0 /\ 0 == 0), cost: 1
	
		propagated equality nondet1 = 0
		
	Simplified Guard

	Original rule:
	[3] -> [4] : x'=1+x, (0 <= 0 /\ 0 >= 0 /\ 0 == 0), cost: 1
	New rule:
	[3] -> [4] : x'=1+x, T, cost: 1

Step with 0

	Trace

	0[T]
	
	Blocked

	[{}, {}]

Step with 9

	Trace

	0[T], 9[(x < 0)]
	
	Blocked

	[{}, {}, {}]

Backtrack

	Trace

	0[T]
	
	Blocked

	[{}, {9[T]}]

Step with 1

	Trace

	0[T], 1[(x >= 0)]
	
	Blocked

	[{}, {9[T]}, {}]

Step with 12

	Trace

	0[T], 1[(x >= 0)], 12[(nondet1 > 0)]
	
	Blocked

	[{}, {9[T]}, {}, {}]

Step with 8

	Trace

	0[T], 1[(x >= 0)], 12[(nondet1 > 0)], 8[T]
	
	Blocked

	[{}, {9[T]}, {}, {}, {}]

Accelerate

Start location: [1]
Program variables: x
   0: [1] -> [2] : x'=nondet, T, cost: 1
   1: [2] -> [3] : x >= 0, cost: 1
   9: [2] -> [9] : x < 0, cost: 1
  15: [2] -> [2] : x'=-n+x, (-1+n >= 0 /\ 1-n+x >= 0), cost: 1
  12: [3] -> [4] : x'=-1+x, (nondet1 < 0 \/ nondet1 > 0), cost: 1
  14: [3] -> [4] : x'=1+x, T, cost: 1
   8: [4] -> [2] : T, cost: 1

	Loop Acceleration

	Original rule:
	[2] -> [2] : x'=-1+x, (x >= 0), cost: 1
	New rule:
	[2] -> [2] : x'=-n+x, (-1+n >= 0 /\ 1-n+x >= 0), cost: 1

		x >= 0 [0]: montonic decrease yields 1-n+x >= 0
		
		x >= 0 [1]: eventual increase yields (1 <= 0 /\ x >= 0)
		
		Replacement map: {x >= 0 -> 1-n+x >= 0}

	Trace

	0[T], 15[(-1+n >= 0 /\ 1-n+x >= 0)]
	
	Blocked

	[{}, {9[T]}, {15[T]}]

Step with 9

	Trace

	0[T], 15[(-1+n >= 0 /\ 1-n+x >= 0)], 9[(x < 0)]
	
	Blocked

	[{}, {9[T]}, {15[T]}, {}]

Backtrack

	Trace

	0[T], 15[(-1+n >= 0 /\ 1-n+x >= 0)]
	
	Blocked

	[{}, {9[T]}, {9[T], 15[T]}]

Step with 1

	Trace

	0[T], 15[(-1+n >= 0 /\ 1-n+x >= 0)], 1[(x >= 0)]
	
	Blocked

	[{}, {9[T]}, {9[T], 15[T]}, {}]

Step with 12

	Trace

	0[T], 15[(-1+n >= 0 /\ 1-n+x >= 0)], 1[(x >= 0)], 12[(nondet1 > 0)]
	
	Blocked

	[{}, {9[T]}, {9[T], 15[T]}, {}, {}]

Step with 8

	Trace

	0[T], 15[(-1+n >= 0 /\ 1-n+x >= 0)], 1[(x >= 0)], 12[(nondet1 > 0)], 8[T]
	
	Blocked

	[{}, {9[T]}, {9[T], 15[T]}, {}, {}, {}]

Covered

	Trace

	0[T], 15[(-1+n >= 0 /\ 1-n+x >= 0)], 1[(x >= 0)], 12[(nondet1 > 0)]
	
	Blocked

	[{}, {9[T]}, {9[T], 15[T]}, {}, {8[T]}]

Backtrack

	Trace

	0[T], 15[(-1+n >= 0 /\ 1-n+x >= 0)], 1[(x >= 0)]
	
	Blocked

	[{}, {9[T]}, {9[T], 15[T]}, {12[nondet1 > 0]}]

Step with 12

	Trace

	0[T], 15[(-1+n >= 0 /\ 1-n+x >= 0)], 1[(x >= 0)], 12[(nondet1 < 0)]
	
	Blocked

	[{}, {9[T]}, {9[T], 15[T]}, {12[nondet1 > 0]}, {}]

Step with 8

	Trace

	0[T], 15[(-1+n >= 0 /\ 1-n+x >= 0)], 1[(x >= 0)], 12[(nondet1 < 0)], 8[T]
	
	Blocked

	[{}, {9[T]}, {9[T], 15[T]}, {12[nondet1 > 0]}, {}, {}]

Accelerate

Start location: [1]
Program variables: x
   0: [1] -> [2] : x'=nondet, T, cost: 1
   1: [2] -> [3] : x >= 0, cost: 1
   9: [2] -> [9] : x < 0, cost: 1
  15: [2] -> [2] : x'=-n+x, (-1+n >= 0 /\ 1-n+x >= 0), cost: 1
  16: [2] -> [2] : x'=-n2+x, (-1+n2 >= 0 /\ 1-n2+x >= 0), cost: 1
  12: [3] -> [4] : x'=-1+x, (nondet1 < 0 \/ nondet1 > 0), cost: 1
  14: [3] -> [4] : x'=1+x, T, cost: 1
   8: [4] -> [2] : T, cost: 1

	Loop Acceleration

	Original rule:
	[2] -> [2] : x'=-1+x, (x >= 0), cost: 1
	New rule:
	[2] -> [2] : x'=-n2+x, (-1+n2 >= 0 /\ 1-n2+x >= 0), cost: 1

		x >= 0 [0]: montonic decrease yields 1-n2+x >= 0
		
		x >= 0 [1]: eventual increase yields (1 <= 0 /\ x >= 0)
		
		Replacement map: {x >= 0 -> 1-n2+x >= 0}

	Trace

	0[T], 15[(-1+n >= 0 /\ 1-n+x >= 0)], 16[(-1+n2 >= 0 /\ 1-n2+x >= 0)]
	
	Blocked

	[{}, {9[T]}, {9[T], 15[T]}, {16[T]}]

Accelerate

Start location: [1]
Program variables: x
   0: [1] -> [2] : x'=nondet, T, cost: 1
   1: [2] -> [3] : x >= 0, cost: 1
   9: [2] -> [9] : x < 0, cost: 1
  15: [2] -> [2] : x'=-n+x, (-1+n >= 0 /\ 1-n+x >= 0), cost: 1
  16: [2] -> [2] : x'=-n2+x, (-1+n2 >= 0 /\ 1-n2+x >= 0), cost: 1
  17: [2] -> [2] : x'=-n3*n1-n3*n2+x, (-1+n2 >= 0 /\ 1-n2*(-1+n3)-n2-(-1+n3)*n1-n1+x >= 0 /\ 1-n2-n1+x >= 0 /\ -1+n3 >= 0 /\ -1+n1 >= 0 /\ 1-n2*(-1+n3)-(-1+n3)*n1-n1+x >= 0), cost: 1
  12: [3] -> [4] : x'=-1+x, (nondet1 < 0 \/ nondet1 > 0), cost: 1
  14: [3] -> [4] : x'=1+x, T, cost: 1
   8: [4] -> [2] : T, cost: 1

	Loop Acceleration

	Original rule:
	[2] -> [2] : x'=-n2-n1+x, (-1+n2 >= 0 /\ 1-n1+x >= 0 /\ 1-n2-n1+x >= 0 /\ -1+n1 >= 0), cost: 1
	New rule:
	[2] -> [2] : x'=-n3*n1-n3*n2+x, (-1+n2 >= 0 /\ 1-n2*(-1+n3)-n2-(-1+n3)*n1-n1+x >= 0 /\ 1-n2-n1+x >= 0 /\ -1+n3 >= 0 /\ -1+n1 >= 0 /\ 1-n2*(-1+n3)-(-1+n3)*n1-n1+x >= 0), cost: 1

		-1+n2 >= 0 [0]: monotonic increase yields -1+n2 >= 0
		
		1-n1+x >= 0 [0]: montonic decrease yields 1-n2*(-1+n3)-(-1+n3)*n1-n1+x >= 0, dependencies: -1+n2 >= 0 1-n2-n1+x >= 0
		
		1-n1+x >= 0 [1]: eventual decrease yields (1-n1+x >= 0 /\ 1-n2*(-1+n3)-(-1+n3)*n1-n1+x >= 0), dependencies: -1+n2 >= 0 -1+n1 >= 0
		
		1-n1+x >= 0 [2]: eventual increase yields (1-n1+x >= 0 /\ n2+n1 <= 0), dependencies: -1+n2 >= 0 -1+n1 >= 0
		
		1-n2-n1+x >= 0 [0]: montonic decrease yields 1-n2*(-1+n3)-n2-(-1+n3)*n1-n1+x >= 0, dependencies: 1-n1+x >= 0 -1+n1 >= 0
		
		1-n2-n1+x >= 0 [1]: eventual decrease yields (1-n2*(-1+n3)-n2-(-1+n3)*n1-n1+x >= 0 /\ 1-n2-n1+x >= 0), dependencies: -1+n2 >= 0 -1+n1 >= 0
		
		1-n2-n1+x >= 0 [2]: eventual increase yields (1-n2-n1+x >= 0 /\ n2+n1 <= 0), dependencies: -1+n2 >= 0 -1+n1 >= 0
		
		-1+n1 >= 0 [0]: monotonic increase yields -1+n1 >= 0
		
		Replacement map: {-1+n2 >= 0 -> -1+n2 >= 0, 1-n1+x >= 0 -> 1-n2*(-1+n3)-(-1+n3)*n1-n1+x >= 0, 1-n2-n1+x >= 0 -> (1-n2*(-1+n3)-n2-(-1+n3)*n1-n1+x >= 0 /\ 1-n2-n1+x >= 0), -1+n1 >= 0 -> -1+n1 >= 0}

	Trace

	0[T], 17[(-1+n2 >= 0 /\ 1-n2*(-1+n3)-n2-(-1+n3)*n1-n1+x >= 0 /\ 1-n2-n1+x >= 0 /\ -1+n3 >= 0 /\ -1+n1 >= 0 /\ 1-n2*(-1+n3)-(-1+n3)*n1-n1+x >= 0)]
	
	Blocked

	[{}, {9[T]}, {17[T]}]

Step with 9

	Trace

	0[T], 17[(-1+n2 >= 0 /\ 1-n2*(-1+n3)-n2-(-1+n3)*n1-n1+x >= 0 /\ 1-n2-n1+x >= 0 /\ -1+n3 >= 0 /\ -1+n1 >= 0 /\ 1-n2*(-1+n3)-(-1+n3)*n1-n1+x >= 0)], 9[(x < 0)]
	
	Blocked

	[{}, {9[T]}, {17[T]}, {}]

Backtrack

	Trace

	0[T], 17[(-1+n2 >= 0 /\ 1-n2*(-1+n3)-n2-(-1+n3)*n1-n1+x >= 0 /\ 1-n2-n1+x >= 0 /\ -1+n3 >= 0 /\ -1+n1 >= 0 /\ 1-n2*(-1+n3)-(-1+n3)*n1-n1+x >= 0)]
	
	Blocked

	[{}, {9[T]}, {9[T], 17[T]}]

Step with 1

	Trace

	0[T], 17[(-1+n2 >= 0 /\ 1-n2*(-1+n3)-n2-(-1+n3)*n1-n1+x >= 0 /\ 1-n2-n1+x >= 0 /\ -1+n3 >= 0 /\ -1+n1 >= 0 /\ 1-n2*(-1+n3)-(-1+n3)*n1-n1+x >= 0)], 1[(x >= 0)]
	
	Blocked

	[{}, {9[T]}, {9[T], 17[T]}, {}]

Step with 12

	Trace

	0[T], 17[(-1+n2 >= 0 /\ 1-n2*(-1+n3)-n2-(-1+n3)*n1-n1+x >= 0 /\ 1-n2-n1+x >= 0 /\ -1+n3 >= 0 /\ -1+n1 >= 0 /\ 1-n2*(-1+n3)-(-1+n3)*n1-n1+x >= 0)], 1[(x >= 0)], 12[(nondet1 > 0)]
	
	Blocked

	[{}, {9[T]}, {9[T], 17[T]}, {}, {}]

Step with 8

	Trace

	0[T], 17[(-1+n2 >= 0 /\ 1-n2*(-1+n3)-n2-(-1+n3)*n1-n1+x >= 0 /\ 1-n2-n1+x >= 0 /\ -1+n3 >= 0 /\ -1+n1 >= 0 /\ 1-n2*(-1+n3)-(-1+n3)*n1-n1+x >= 0)], 1[(x >= 0)], 12[(nondet1 > 0)], 8[T]
	
	Blocked

	[{}, {9[T]}, {9[T], 17[T]}, {}, {}, {}]

Covered

	Trace

	0[T], 17[(-1+n2 >= 0 /\ 1-n2*(-1+n3)-n2-(-1+n3)*n1-n1+x >= 0 /\ 1-n2-n1+x >= 0 /\ -1+n3 >= 0 /\ -1+n1 >= 0 /\ 1-n2*(-1+n3)-(-1+n3)*n1-n1+x >= 0)], 1[(x >= 0)], 12[(nondet1 > 0)]
	
	Blocked

	[{}, {9[T]}, {9[T], 17[T]}, {}, {8[T]}]

Backtrack

	Trace

	0[T], 17[(-1+n2 >= 0 /\ 1-n2*(-1+n3)-n2-(-1+n3)*n1-n1+x >= 0 /\ 1-n2-n1+x >= 0 /\ -1+n3 >= 0 /\ -1+n1 >= 0 /\ 1-n2*(-1+n3)-(-1+n3)*n1-n1+x >= 0)], 1[(x >= 0)]
	
	Blocked

	[{}, {9[T]}, {9[T], 17[T]}, {12[nondet1 > 0]}]

Step with 12

	Trace

	0[T], 17[(-1+n2 >= 0 /\ 1-n2*(-1+n3)-n2-(-1+n3)*n1-n1+x >= 0 /\ 1-n2-n1+x >= 0 /\ -1+n3 >= 0 /\ -1+n1 >= 0 /\ 1-n2*(-1+n3)-(-1+n3)*n1-n1+x >= 0)], 1[(x >= 0)], 12[(nondet1 < 0)]
	
	Blocked

	[{}, {9[T]}, {9[T], 17[T]}, {12[nondet1 > 0]}, {}]

Step with 8

	Trace

	0[T], 17[(-1+n2 >= 0 /\ 1-n2*(-1+n3)-n2-(-1+n3)*n1-n1+x >= 0 /\ 1-n2-n1+x >= 0 /\ -1+n3 >= 0 /\ -1+n1 >= 0 /\ 1-n2*(-1+n3)-(-1+n3)*n1-n1+x >= 0)], 1[(x >= 0)], 12[(nondet1 < 0)], 8[T]
	
	Blocked

	[{}, {9[T]}, {9[T], 17[T]}, {12[nondet1 > 0]}, {}, {}]

Covered

	Trace

	0[T], 17[(-1+n2 >= 0 /\ 1-n2*(-1+n3)-n2-(-1+n3)*n1-n1+x >= 0 /\ 1-n2-n1+x >= 0 /\ -1+n3 >= 0 /\ -1+n1 >= 0 /\ 1-n2*(-1+n3)-(-1+n3)*n1-n1+x >= 0)], 1[(x >= 0)], 12[(nondet1 < 0)]
	
	Blocked

	[{}, {9[T]}, {9[T], 17[T]}, {12[nondet1 > 0]}, {8[T]}]

Backtrack

	Trace

	0[T], 17[(-1+n2 >= 0 /\ 1-n2*(-1+n3)-n2-(-1+n3)*n1-n1+x >= 0 /\ 1-n2-n1+x >= 0 /\ -1+n3 >= 0 /\ -1+n1 >= 0 /\ 1-n2*(-1+n3)-(-1+n3)*n1-n1+x >= 0)], 1[(x >= 0)]
	
	Blocked

	[{}, {9[T]}, {9[T], 17[T]}, {12[(nondet1 < 0 /\ nondet1 > 0)]}]

Step with 14

	Trace

	0[T], 17[(-1+n2 >= 0 /\ 1-n2*(-1+n3)-n2-(-1+n3)*n1-n1+x >= 0 /\ 1-n2-n1+x >= 0 /\ -1+n3 >= 0 /\ -1+n1 >= 0 /\ 1-n2*(-1+n3)-(-1+n3)*n1-n1+x >= 0)], 1[(x >= 0)], 14[T]
	
	Blocked

	[{}, {9[T]}, {9[T], 17[T]}, {12[T]}, {}]

Step with 8

	Trace

	0[T], 17[(-1+n2 >= 0 /\ 1-n2*(-1+n3)-n2-(-1+n3)*n1-n1+x >= 0 /\ 1-n2-n1+x >= 0 /\ -1+n3 >= 0 /\ -1+n1 >= 0 /\ 1-n2*(-1+n3)-(-1+n3)*n1-n1+x >= 0)], 1[(x >= 0)], 14[T], 8[T]
	
	Blocked

	[{}, {9[T]}, {9[T], 17[T]}, {12[T]}, {}, {}]

Nonterm

Start location: [1]
Program variables: x
   0: [1] -> [2] : x'=nondet, T, cost: 1
   1: [2] -> [3] : x >= 0, cost: 1
   9: [2] -> [9] : x < 0, cost: 1
  15: [2] -> [2] : x'=-n+x, (-1+n >= 0 /\ 1-n+x >= 0), cost: 1
  16: [2] -> [2] : x'=-n2+x, (-1+n2 >= 0 /\ 1-n2+x >= 0), cost: 1
  17: [2] -> [2] : x'=-n3*n1-n3*n2+x, (-1+n2 >= 0 /\ 1-n2*(-1+n3)-n2-(-1+n3)*n1-n1+x >= 0 /\ 1-n2-n1+x >= 0 /\ -1+n3 >= 0 /\ -1+n1 >= 0 /\ 1-n2*(-1+n3)-(-1+n3)*n1-n1+x >= 0), cost: 1
  18: [2] -> LoAT_sink : (-1+n4 >= 0 /\ x >= 0), cost: NONTERM
  19: [2] -> [2] : x'=n4+x, (-1+n4 >= 0 /\ x >= 0), cost: 1
  12: [3] -> [4] : x'=-1+x, (nondet1 < 0 \/ nondet1 > 0), cost: 1
  14: [3] -> [4] : x'=1+x, T, cost: 1
   8: [4] -> [2] : T, cost: 1

	Certificate of Non-Termination

	Original rule:
	[2] -> [2] : x'=1+x, x >= 0, cost: 1
	New rule:
	[2] -> LoAT_sink : (-1+n4 >= 0 /\ x >= 0), cost: NONTERM

		x >= 0 [0]: monotonic increase yields x >= 0
		
		Replacement map: {x >= 0 -> x >= 0}

	Loop Acceleration

	Original rule:
	[2] -> [2] : x'=1+x, x >= 0, cost: 1
	New rule:
	[2] -> [2] : x'=n4+x, (-1+n4 >= 0 /\ x >= 0), cost: 1

		x >= 0 [0]: monotonic increase yields x >= 0
		
		Replacement map: {x >= 0 -> x >= 0}

Step with 18

	Trace

	0[T], 17[(-1+n2 >= 0 /\ 1-n2*(-1+n3)-n2-(-1+n3)*n1-n1+x >= 0 /\ 1-n2-n1+x >= 0 /\ -1+n3 >= 0 /\ -1+n1 >= 0 /\ 1-n2*(-1+n3)-(-1+n3)*n1-n1+x >= 0)], 18[(-1+n4 >= 0 /\ x >= 0)]
	
	Blocked

	[{}, {9[T]}, {9[T], 17[T]}, {18[T]}]

Refute

	Counterexample

	[ x=2 ] 0 [ x=0 ] 17 [ x=x ] 18
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
