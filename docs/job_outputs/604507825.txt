NO

Initial ITS

Start location: __init
Program variables: arg1 arg2 arg3 arg4
   0: f1_0_main_New -> f230_0_alternate_NONNULL : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, (-3+arg4p1 > 0 /\ -3+arg1p1 > 0 /\ -3+arg2p1 > 0 /\ -3+arg3p1 > 0), cost: 1
   2: f1_0_main_New -> f1096_0_append_NONNULL : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, arg4'=arg4p3, (-4+arg2p3 > 0 /\ 1+arg3p3 > 0 /\ -3+arg1p3 > 0), cost: 1
   4: f1_0_main_New -> f565_0_iter_NULL : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, arg4'=arg4p5, (-1+arg2p5 > 0 /\ -3+arg1p5 > 0), cost: 1
   6: f1_0_main_New -> f717_0_reverseAcc_NONNULL : arg1'=arg1p7, arg2'=arg2p7, arg3'=arg3p7, arg4'=arg4p7, (-1+arg2p7 > 0 /\ -3+arg1p7 > 0), cost: 1
   8: f1_0_main_New -> f845_0_reverse_NONNULL : arg1'=arg1p9, arg2'=arg2p9, arg3'=arg3p9, arg4'=arg4p9, (-1+arg2p9 > 0 /\ -3+arg1p9 > 0), cost: 1
   1: f230_0_alternate_NONNULL -> f230_0_alternate_NONNULL : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, arg4'=arg4p2, (arg2p2-arg3 <= 0 /\ 1+arg3p2 > 0 /\ -1+arg2-arg4p2 >= 0 /\ arg2p2 > 0 /\ arg2 > 0 /\ 1+arg1p2 > 0 /\ 1-arg2+arg1p2 <= 0 /\ arg3 > 0 /\ arg2p2-arg4 <= 0 /\ 1+arg4p2 > 0 /\ -1+arg2-arg3p2 >= 0 /\ arg4 > 0 /\ arg2p2-arg1 <= 0 /\ arg1 > 0), cost: 1
   3: f1096_0_append_NONNULL -> f1096_0_append_NONNULL : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, arg4'=arg4p4, (1+arg3p4 > 0 /\ -2+arg1 > 0 /\ arg2 > 0 /\ arg1p4 > 0 /\ arg3 > 0 /\ arg2p4 > 0 /\ -arg2+arg2p4 <= 0), cost: 1
   5: f565_0_iter_NULL -> f565_0_iter_NULL : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, arg4'=arg4p6, (1-arg2+arg2p6 <= 0 /\ 1+arg2p6 > 0 /\ -2+arg1 > 0 /\ 3-arg1+arg2p6 <= 0 /\ arg2 > 0 /\ 2+arg1p6-arg1 <= 0 /\ arg1p6 > 0 /\ -arg2+arg1p6 <= 0), cost: 1
   7: f717_0_reverseAcc_NONNULL -> f717_0_reverseAcc_NONNULL : arg1'=arg1p8, arg2'=arg2p8, arg3'=arg3p8, arg4'=arg4p8, (1+arg2p8 > 0 /\ arg1p8 > 0 /\ -2+arg1 > 0 /\ arg2 > 0 /\ 1-arg2+arg2p8 <= 0 /\ 3+arg2p8-arg1 <= 0 /\ arg1p8-arg2 <= 0 /\ 2+arg1p8-arg1 <= 0), cost: 1
   9: f845_0_reverse_NONNULL -> f845_0_reverse_NONNULL : arg1'=arg1p10, arg2'=arg2p10, arg3'=arg3p10, arg4'=arg4p10, (2+arg1p10-arg1 <= 0 /\ 1-arg2+arg2p10 <= 0 /\ -2+arg1 > 0 /\ 1+arg2p10 > 0 /\ 3-arg1+arg2p10 <= 0 /\ arg2 > 0 /\ -arg2+arg1p10 <= 0 /\ arg1p10 > 0), cost: 1
  10: f845_0_reverse_NONNULL -> f1096_0_append_NONNULL : arg1'=arg1p11, arg2'=arg2p11, arg3'=arg3p11, arg4'=arg4p11, (-2+arg1 > 0 /\ arg2 > 0 /\ 1-arg1+arg1p11 <= 0 /\ 1+arg2p11-arg1 <= 0 /\ -1-arg2+arg2p11 <= 0 /\ -1+arg2p11 > 0 /\ -1+arg1p11 > 0 /\ 1+arg3p11 > 0 /\ -1-arg2+arg1p11 <= 0), cost: 1
  11: f845_0_reverse_NONNULL -> f1225_0_reverse_InvokeMethod : arg1'=arg1p12, arg2'=arg2p12, arg3'=arg3p12, arg4'=arg4p12, (-2+arg1 > 0 /\ arg2 > 0 /\ -4+arg1p12 > 0), cost: 1
  12: f845_0_reverse_NONNULL -> f1225_0_reverse_InvokeMethod : arg1'=arg1p13, arg2'=arg2p13, arg3'=arg3p13, arg4'=arg4p13, (-2+arg1 > 0 /\ -2+arg1p13 > 0 /\ arg2 > 0), cost: 1
  14: f1225_0_reverse_InvokeMethod -> f1096_0_append_NONNULL : arg1'=arg1p15, arg2'=arg2p15, arg3'=arg3p15, arg4'=arg4p15, (-1+arg2p15 > 0 /\ -2+arg1 > 0 /\ arg1p15-arg1 <= 0 /\ 1+arg3p15 > 0 /\ -2+arg1p15 > 0 /\ 1+arg2p15-arg1 <= 0), cost: 1
  13: f991_0_reverse_Return -> f1225_0_reverse_InvokeMethod : arg1'=arg1p14, arg2'=arg2p14, arg3'=arg3p14, arg4'=arg4p14, (-2+arg1p14 > 0 /\ -2+arg1 > 0 /\ -arg1+arg1p14 <= 0 /\ 4+arg2-arg1 <= 0), cost: 1
  15: __init -> f1_0_main_New : arg1'=arg1p16, arg2'=arg2p16, arg3'=arg3p16, arg4'=arg4p16, T, cost: 1

Step with 15

	Trace

	15[T]
	
	Blocked

	[{}, {}]

Step with 0

	Trace

	15[T], 0[(-3+arg4p1 > 0 /\ -3+arg1p1 > 0 /\ -3+arg2p1 > 0 /\ -3+arg3p1 > 0)]
	
	Blocked

	[{}, {}, {}]

Step with 1

	Trace

	15[T], 0[(-3+arg4p1 > 0 /\ -3+arg1p1 > 0 /\ -3+arg2p1 > 0 /\ -3+arg3p1 > 0)], 1[(arg2p2-arg3 <= 0 /\ 1+arg3p2 > 0 /\ -1+arg2-arg4p2 >= 0 /\ arg2p2 > 0 /\ arg2 > 0 /\ 1+arg1p2 > 0 /\ 1-arg2+arg1p2 <= 0 /\ arg3 > 0 /\ arg2p2-arg4 <= 0 /\ 1+arg4p2 > 0 /\ -1+arg2-arg3p2 >= 0 /\ arg4 > 0 /\ arg2p2-arg1 <= 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 1

	Trace

	15[T], 0[(-3+arg4p1 > 0 /\ -3+arg1p1 > 0 /\ -3+arg2p1 > 0 /\ -3+arg3p1 > 0)], 1[(arg2p2-arg3 <= 0 /\ 1+arg3p2 > 0 /\ -1+arg2-arg4p2 >= 0 /\ arg2p2 > 0 /\ arg2 > 0 /\ 1+arg1p2 > 0 /\ 1-arg2+arg1p2 <= 0 /\ arg3 > 0 /\ arg2p2-arg4 <= 0 /\ 1+arg4p2 > 0 /\ -1+arg2-arg3p2 >= 0 /\ arg4 > 0 /\ arg2p2-arg1 <= 0 /\ arg1 > 0)], 1[(arg2p2-arg3 <= 0 /\ 1+arg3p2 > 0 /\ -1+arg2-arg4p2 >= 0 /\ arg2p2 > 0 /\ arg2 > 0 /\ 1+arg1p2 > 0 /\ 1-arg2+arg1p2 <= 0 /\ arg3 > 0 /\ arg2p2-arg4 <= 0 /\ 1+arg4p2 > 0 /\ -1+arg2-arg3p2 >= 0 /\ arg4 > 0 /\ arg2p2-arg1 <= 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {}, {}, {}]

Covered

	Trace

	15[T], 0[(-3+arg4p1 > 0 /\ -3+arg1p1 > 0 /\ -3+arg2p1 > 0 /\ -3+arg3p1 > 0)], 1[(arg2p2-arg3 <= 0 /\ 1+arg3p2 > 0 /\ -1+arg2-arg4p2 >= 0 /\ arg2p2 > 0 /\ arg2 > 0 /\ 1+arg1p2 > 0 /\ 1-arg2+arg1p2 <= 0 /\ arg3 > 0 /\ arg2p2-arg4 <= 0 /\ 1+arg4p2 > 0 /\ -1+arg2-arg3p2 >= 0 /\ arg4 > 0 /\ arg2p2-arg1 <= 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {}, {1[T]}]

Backtrack

	Trace

	15[T], 0[(-3+arg4p1 > 0 /\ -3+arg1p1 > 0 /\ -3+arg2p1 > 0 /\ -3+arg3p1 > 0)]
	
	Blocked

	[{}, {}, {1[T]}]

Backtrack

	Trace

	15[T]
	
	Blocked

	[{}, {0[T]}]

Step with 2

	Trace

	15[T], 2[(-4+arg2p3 > 0 /\ 1+arg3p3 > 0 /\ -3+arg1p3 > 0)]
	
	Blocked

	[{}, {0[T]}, {}]

Step with 3

	Trace

	15[T], 2[(-4+arg2p3 > 0 /\ 1+arg3p3 > 0 /\ -3+arg1p3 > 0)], 3[(1+arg3p4 > 0 /\ -2+arg1 > 0 /\ arg2 > 0 /\ arg1p4 > 0 /\ arg3 > 0 /\ arg2p4 > 0 /\ -arg2+arg2p4 <= 0)]
	
	Blocked

	[{}, {0[T]}, {}, {}]

Nonterm

Start location: __init
Program variables: arg1 arg2 arg3 arg4
   0: f1_0_main_New -> f230_0_alternate_NONNULL : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, arg4'=arg4p1, (-3+arg4p1 > 0 /\ -3+arg1p1 > 0 /\ -3+arg2p1 > 0 /\ -3+arg3p1 > 0), cost: 1
   2: f1_0_main_New -> f1096_0_append_NONNULL : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, arg4'=arg4p3, (-4+arg2p3 > 0 /\ 1+arg3p3 > 0 /\ -3+arg1p3 > 0), cost: 1
   4: f1_0_main_New -> f565_0_iter_NULL : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, arg4'=arg4p5, (-1+arg2p5 > 0 /\ -3+arg1p5 > 0), cost: 1
   6: f1_0_main_New -> f717_0_reverseAcc_NONNULL : arg1'=arg1p7, arg2'=arg2p7, arg3'=arg3p7, arg4'=arg4p7, (-1+arg2p7 > 0 /\ -3+arg1p7 > 0), cost: 1
   8: f1_0_main_New -> f845_0_reverse_NONNULL : arg1'=arg1p9, arg2'=arg2p9, arg3'=arg3p9, arg4'=arg4p9, (-1+arg2p9 > 0 /\ -3+arg1p9 > 0), cost: 1
   1: f230_0_alternate_NONNULL -> f230_0_alternate_NONNULL : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, arg4'=arg4p2, (arg2p2-arg3 <= 0 /\ 1+arg3p2 > 0 /\ -1+arg2-arg4p2 >= 0 /\ arg2p2 > 0 /\ arg2 > 0 /\ 1+arg1p2 > 0 /\ 1-arg2+arg1p2 <= 0 /\ arg3 > 0 /\ arg2p2-arg4 <= 0 /\ 1+arg4p2 > 0 /\ -1+arg2-arg3p2 >= 0 /\ arg4 > 0 /\ arg2p2-arg1 <= 0 /\ arg1 > 0), cost: 1
   3: f1096_0_append_NONNULL -> f1096_0_append_NONNULL : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, arg4'=arg4p4, (1+arg3p4 > 0 /\ -2+arg1 > 0 /\ arg2 > 0 /\ arg1p4 > 0 /\ arg3 > 0 /\ arg2p4 > 0 /\ -arg2+arg2p4 <= 0), cost: 1
  16: f1096_0_append_NONNULL -> LoAT_sink : (1+arg3p4 > 0 /\ -2+arg1 > 0 /\ arg2 > 0 /\ arg1p4 > 0 /\ arg3 > 0 /\ arg2-arg2p4 <= 0 /\ arg2-arg2p4 >= 0 /\ arg2p4 > 0 /\ arg3-arg3p4 <= 0 /\ -arg1p4+arg1 <= 0), cost: NONTERM
   5: f565_0_iter_NULL -> f565_0_iter_NULL : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, arg4'=arg4p6, (1-arg2+arg2p6 <= 0 /\ 1+arg2p6 > 0 /\ -2+arg1 > 0 /\ 3-arg1+arg2p6 <= 0 /\ arg2 > 0 /\ 2+arg1p6-arg1 <= 0 /\ arg1p6 > 0 /\ -arg2+arg1p6 <= 0), cost: 1
   7: f717_0_reverseAcc_NONNULL -> f717_0_reverseAcc_NONNULL : arg1'=arg1p8, arg2'=arg2p8, arg3'=arg3p8, arg4'=arg4p8, (1+arg2p8 > 0 /\ arg1p8 > 0 /\ -2+arg1 > 0 /\ arg2 > 0 /\ 1-arg2+arg2p8 <= 0 /\ 3+arg2p8-arg1 <= 0 /\ arg1p8-arg2 <= 0 /\ 2+arg1p8-arg1 <= 0), cost: 1
   9: f845_0_reverse_NONNULL -> f845_0_reverse_NONNULL : arg1'=arg1p10, arg2'=arg2p10, arg3'=arg3p10, arg4'=arg4p10, (2+arg1p10-arg1 <= 0 /\ 1-arg2+arg2p10 <= 0 /\ -2+arg1 > 0 /\ 1+arg2p10 > 0 /\ 3-arg1+arg2p10 <= 0 /\ arg2 > 0 /\ -arg2+arg1p10 <= 0 /\ arg1p10 > 0), cost: 1
  10: f845_0_reverse_NONNULL -> f1096_0_append_NONNULL : arg1'=arg1p11, arg2'=arg2p11, arg3'=arg3p11, arg4'=arg4p11, (-2+arg1 > 0 /\ arg2 > 0 /\ 1-arg1+arg1p11 <= 0 /\ 1+arg2p11-arg1 <= 0 /\ -1-arg2+arg2p11 <= 0 /\ -1+arg2p11 > 0 /\ -1+arg1p11 > 0 /\ 1+arg3p11 > 0 /\ -1-arg2+arg1p11 <= 0), cost: 1
  11: f845_0_reverse_NONNULL -> f1225_0_reverse_InvokeMethod : arg1'=arg1p12, arg2'=arg2p12, arg3'=arg3p12, arg4'=arg4p12, (-2+arg1 > 0 /\ arg2 > 0 /\ -4+arg1p12 > 0), cost: 1
  12: f845_0_reverse_NONNULL -> f1225_0_reverse_InvokeMethod : arg1'=arg1p13, arg2'=arg2p13, arg3'=arg3p13, arg4'=arg4p13, (-2+arg1 > 0 /\ -2+arg1p13 > 0 /\ arg2 > 0), cost: 1
  14: f1225_0_reverse_InvokeMethod -> f1096_0_append_NONNULL : arg1'=arg1p15, arg2'=arg2p15, arg3'=arg3p15, arg4'=arg4p15, (-1+arg2p15 > 0 /\ -2+arg1 > 0 /\ arg1p15-arg1 <= 0 /\ 1+arg3p15 > 0 /\ -2+arg1p15 > 0 /\ 1+arg2p15-arg1 <= 0), cost: 1
  13: f991_0_reverse_Return -> f1225_0_reverse_InvokeMethod : arg1'=arg1p14, arg2'=arg2p14, arg3'=arg3p14, arg4'=arg4p14, (-2+arg1p14 > 0 /\ -2+arg1 > 0 /\ -arg1+arg1p14 <= 0 /\ 4+arg2-arg1 <= 0), cost: 1
  15: __init -> f1_0_main_New : arg1'=arg1p16, arg2'=arg2p16, arg3'=arg3p16, arg4'=arg4p16, T, cost: 1

	Certificate of Non-Termination

	Original rule:
	f1096_0_append_NONNULL -> f1096_0_append_NONNULL : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, arg4'=arg4p4, (1+arg3p4 > 0 /\ -2+arg1 > 0 /\ arg2 > 0 /\ arg1p4 > 0 /\ arg3 > 0 /\ arg2p4 > 0 /\ -arg2+arg2p4 <= 0), cost: 1
	New rule:
	f1096_0_append_NONNULL -> LoAT_sink : (1+arg3p4 > 0 /\ -2+arg1 > 0 /\ arg2 > 0 /\ arg1p4 > 0 /\ arg3 > 0 /\ arg2-arg2p4 <= 0 /\ arg2-arg2p4 >= 0 /\ arg2p4 > 0 /\ arg3-arg3p4 <= 0 /\ -arg1p4+arg1 <= 0), cost: NONTERM

		1+arg3p4 > 0 [0]: monotonic increase yields 1+arg3p4 > 0
		
		-2+arg1 > 0 [0]: eventual decrease yields (-2+arg1 > 0 /\ -2+arg1p4 > 0)
		
		-2+arg1 > 0 [1]: eventual increase yields (-2+arg1 > 0 /\ -arg1p4+arg1 <= 0)
		
		arg2 > 0 [0]: montonic decrease yields arg2p4 > 0, dependencies: arg2-arg2p4 >= 0
		
		arg2 > 0 [1]: eventual decrease yields (arg2 > 0 /\ arg2p4 > 0)
		
		arg2 > 0 [2]: eventual increase yields (arg2 > 0 /\ arg2-arg2p4 <= 0)
		
		arg1p4 > 0 [0]: monotonic increase yields arg1p4 > 0
		
		arg3 > 0 [0]: eventual decrease yields (arg3 > 0 /\ arg3p4 > 0)
		
		arg3 > 0 [1]: eventual increase yields (arg3 > 0 /\ arg3-arg3p4 <= 0)
		
		arg2-arg2p4 >= 0 [0]: monotonic increase yields arg2-arg2p4 >= 0
		
		arg2p4 > 0 [0]: monotonic increase yields arg2p4 > 0
		
		Replacement map: {1+arg3p4 > 0 -> 1+arg3p4 > 0, -2+arg1 > 0 -> (-2+arg1 > 0 /\ -arg1p4+arg1 <= 0), arg2 > 0 -> (arg2 > 0 /\ arg2-arg2p4 <= 0), arg1p4 > 0 -> arg1p4 > 0, arg3 > 0 -> (arg3 > 0 /\ arg3-arg3p4 <= 0), arg2-arg2p4 >= 0 -> arg2-arg2p4 >= 0, arg2p4 > 0 -> arg2p4 > 0}

Step with 16

	Trace

	15[T], 2[(-4+arg2p3 > 0 /\ 1+arg3p3 > 0 /\ -3+arg1p3 > 0)], 16[(1+arg3p4 > 0 /\ -2+arg1 > 0 /\ arg2 > 0 /\ arg1p4 > 0 /\ arg3 > 0 /\ arg2-arg2p4 <= 0 /\ arg2-arg2p4 >= 0 /\ arg2p4 > 0 /\ arg3-arg3p4 <= 0 /\ -arg1p4+arg1 <= 0)]
	
	Blocked

	[{}, {0[T]}, {}, {16[T]}]

Refute

	Counterexample

	[ arg1=0 arg2=0 arg3=0 arg4=0 ] 15 [ arg1=4 arg2=5 arg3=1 arg4=0 ] 2 [ arg1=arg1 arg2=arg2 arg3=arg3 arg4=arg4 ] 16
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
