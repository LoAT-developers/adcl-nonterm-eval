NO

Initial ITS
Start location: __init
   0: f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (arg2P0-arg1 <= 0 /\ arg2P0 > 0 /\ 2-arg3P0 == 0 /\ arg1 > 0 /\ -arg1+arg1P0 <= 0 /\ arg1P0 > 0 /\ 2-arg2 == 0), cost: 1
   1: f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg2P1, arg1'=arg1P1, arg3'=arg3P1, (1-arg3P1 == 0 /\ arg2P1 > 0 /\ arg1 > 0 /\ arg1P1 > 0 /\ arg2P1-arg1 <= 0 /\ 1-arg2 == 0 /\ -arg1+arg1P1 <= 0), cost: 1
   2: f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P2, arg1'=arg1P2, arg3'=arg3P2, (arg3-arg3P2 == 0 /\ arg2 > 0 /\ -arg2P2+arg1 >= 0 /\ arg2P2 > 0 /\ arg2-arg2P2 >= 0 /\ -arg2+arg1P2 <= 0 /\ arg1P2 > 0 /\ arg1 > 0 /\ arg1P2-arg1 <= 0), cost: 1
   3: f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P3, arg1'=arg1P3, arg3'=arg3P3, (arg2P3 > 0 /\ arg2 > 0 /\ arg2P3-arg1 <= 0 /\ -arg3P3+arg3 == 0 /\ arg1P3 > 0 /\ arg1P3-arg1 <= 0 /\ arg2P3-arg2 <= 0 /\ -arg2+arg1P3 <= 0 /\ arg1 > 0), cost: 1
   4: __init -> f1_0_main_ConstantStackPush : arg2'=arg2P4, arg1'=arg1P4, arg3'=arg3P4, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg2P0, arg1'=arg1P0, arg3'=arg3P0, (arg2P0-arg1 <= 0 /\ arg2P0 > 0 /\ 2-arg3P0 == 0 /\ arg1 > 0 /\ -arg1+arg1P0 <= 0 /\ arg1P0 > 0 /\ 2-arg2 == 0), cost: 1
New rule:
f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg2P0, arg1'=arg1P0, arg3'=2, (arg2P0-arg1 <= 0 /\ -2+arg2 == 0 /\ arg2P0 > 0 /\ -arg1+arg1P0 <= 0 /\ arg1P0 > 0), cost: 1

Applied preprocessing
Original rule:
f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg2P1, arg1'=arg1P1, arg3'=arg3P1, (1-arg3P1 == 0 /\ arg2P1 > 0 /\ arg1 > 0 /\ arg1P1 > 0 /\ arg2P1-arg1 <= 0 /\ 1-arg2 == 0 /\ -arg1+arg1P1 <= 0), cost: 1
New rule:
f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg2P1, arg1'=arg1P1, arg3'=1, (arg2P1 > 0 /\ arg1P1 > 0 /\ arg2P1-arg1 <= 0 /\ -1+arg2 == 0 /\ -arg1+arg1P1 <= 0), cost: 1

Applied preprocessing
Original rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P2, arg1'=arg1P2, arg3'=arg3P2, (arg3-arg3P2 == 0 /\ arg2 > 0 /\ -arg2P2+arg1 >= 0 /\ arg2P2 > 0 /\ arg2-arg2P2 >= 0 /\ -arg2+arg1P2 <= 0 /\ arg1P2 > 0 /\ arg1 > 0 /\ arg1P2-arg1 <= 0), cost: 1
New rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P2, arg1'=arg1P2, (-arg2P2+arg1 >= 0 /\ arg2P2 > 0 /\ arg2-arg2P2 >= 0 /\ -arg2+arg1P2 <= 0 /\ arg1P2 > 0 /\ arg1P2-arg1 <= 0), cost: 1

Applied preprocessing
Original rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P3, arg1'=arg1P3, arg3'=arg3P3, (arg2P3 > 0 /\ arg2 > 0 /\ arg2P3-arg1 <= 0 /\ -arg3P3+arg3 == 0 /\ arg1P3 > 0 /\ arg1P3-arg1 <= 0 /\ arg2P3-arg2 <= 0 /\ -arg2+arg1P3 <= 0 /\ arg1 > 0), cost: 1
New rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P3, arg1'=arg1P3, (arg2P3 > 0 /\ arg2P3-arg1 <= 0 /\ arg1P3 > 0 /\ arg1P3-arg1 <= 0 /\ arg2P3-arg2 <= 0 /\ -arg2+arg1P3 <= 0), cost: 1

Simplified rules
Start location: __init
   5: f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg2P0, arg1'=arg1P0, arg3'=2, (arg2P0-arg1 <= 0 /\ -2+arg2 == 0 /\ arg2P0 > 0 /\ -arg1+arg1P0 <= 0 /\ arg1P0 > 0), cost: 1
   6: f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg2P1, arg1'=arg1P1, arg3'=1, (arg2P1 > 0 /\ arg1P1 > 0 /\ arg2P1-arg1 <= 0 /\ -1+arg2 == 0 /\ -arg1+arg1P1 <= 0), cost: 1
   7: f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P2, arg1'=arg1P2, (-arg2P2+arg1 >= 0 /\ arg2P2 > 0 /\ arg2-arg2P2 >= 0 /\ -arg2+arg1P2 <= 0 /\ arg1P2 > 0 /\ arg1P2-arg1 <= 0), cost: 1
   8: f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P3, arg1'=arg1P3, (arg2P3 > 0 /\ arg2P3-arg1 <= 0 /\ arg1P3 > 0 /\ arg1P3-arg1 <= 0 /\ arg2P3-arg2 <= 0 /\ -arg2+arg1P3 <= 0), cost: 1
   4: __init -> f1_0_main_ConstantStackPush : arg2'=arg2P4, arg1'=arg1P4, arg3'=arg3P4, TRUE, cost: 1


Applied acceleration
Original rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P2, arg1'=arg1P2, (-arg2P2+arg1 >= 0 /\ arg2P2 > 0 /\ arg2-arg2P2 >= 0 /\ -arg2+arg1P2 <= 0 /\ arg1P2 > 0 /\ arg1P2-arg1 <= 0), cost: 1
New rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P2, arg1'=arg1P2, (arg2P2 > 0 /\ -arg2P2+arg1P2 >= 0 /\ arg2-arg2P2 >= 0 /\ arg2P2-arg1P2 >= 0 /\ arg1P2 > 0 /\ -arg1P2+arg1 >= 0 /\ -1+n >= 0), cost: n
Sub-proof via acceration calculus written to file:///tmp/tmpnam_AJbEOk.txt

Applied nonterm
Original rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P2, arg1'=arg1P2, (-arg2P2+arg1 >= 0 /\ arg2P2 > 0 /\ arg2-arg2P2 >= 0 /\ -arg2+arg1P2 <= 0 /\ arg1P2 > 0 /\ arg1P2-arg1 <= 0), cost: 1
New rule:
f151_0_main_InvokeMethod -> [3] : (arg2-arg1P2 >= 0 /\ -arg2P2+arg1 >= 0 /\ arg2P2 > 0 /\ arg2-arg2P2 <= 0 /\ arg2-arg2P2 >= 0 /\ arg1P2 > 0 /\ -arg1P2+arg1 <= 0 /\ -arg1P2+arg1 >= 0), cost: NONTERM
Sub-proof via acceration calculus written to file:///tmp/tmpnam_hlpPNJ.txt

Applied acceleration
Original rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P3, arg1'=arg1P3, (arg2P3 > 0 /\ arg2P3-arg1 <= 0 /\ arg1P3 > 0 /\ arg1P3-arg1 <= 0 /\ arg2P3-arg2 <= 0 /\ -arg2+arg1P3 <= 0), cost: 1
New rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P3, arg1'=arg1P3, (arg2P3 > 0 /\ -arg1P3+arg1 >= 0 /\ -arg2P3+arg2 >= 0 /\ arg1P3 > 0 /\ -arg2P3+arg1P3 >= 0 /\ -1+n0 >= 0 /\ arg2P3-arg1P3 >= 0), cost: n0
Sub-proof via acceration calculus written to file:///tmp/tmpnam_BHinmP.txt

Applied nonterm
Original rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P3, arg1'=arg1P3, (arg2P3 > 0 /\ arg2P3-arg1 <= 0 /\ arg1P3 > 0 /\ arg1P3-arg1 <= 0 /\ arg2P3-arg2 <= 0 /\ -arg2+arg1P3 <= 0), cost: 1
New rule:
f151_0_main_InvokeMethod -> [3] : (arg2P3 > 0 /\ -arg1P3+arg1 <= 0 /\ -arg1P3+arg1 >= 0 /\ -arg2P3+arg2 <= 0 /\ -arg2P3+arg2 >= 0 /\ arg1P3 > 0 /\ -arg2P3+arg1 >= 0 /\ arg2-arg1P3 >= 0), cost: NONTERM
Sub-proof via acceration calculus written to file:///tmp/tmpnam_KKKelA.txt

Applied chaining
First rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P3, arg1'=arg1P3, (arg2P3 > 0 /\ arg2P3-arg1 <= 0 /\ arg1P3 > 0 /\ arg1P3-arg1 <= 0 /\ arg2P3-arg2 <= 0 /\ -arg2+arg1P3 <= 0), cost: 1
Second rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P2, arg1'=arg1P2, (-arg2P2+arg1 >= 0 /\ arg2P2 > 0 /\ arg2-arg2P2 >= 0 /\ -arg2+arg1P2 <= 0 /\ arg1P2 > 0 /\ arg1P2-arg1 <= 0), cost: 1
New rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P2, arg1'=arg1P2, (-arg2+arg2P2 <= 0 /\ arg2P2 > 0 /\ -arg2+arg1P2 <= 0 /\ arg2P2-arg1 <= 0 /\ arg1P2 > 0 /\ arg1P2-arg1 <= 0), cost: 2

Applied acceleration
Original rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P2, arg1'=arg1P2, (-arg2+arg2P2 <= 0 /\ arg2P2 > 0 /\ -arg2+arg1P2 <= 0 /\ arg2P2-arg1 <= 0 /\ arg1P2 > 0 /\ arg1P2-arg1 <= 0), cost: 2
New rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P2, arg1'=arg1P2, (arg2P2 > 0 /\ -arg2P2+arg1P2 >= 0 /\ -1+n1 >= 0 /\ arg2-arg2P2 >= 0 /\ arg2P2-arg1P2 >= 0 /\ arg1P2 > 0 /\ -arg1P2+arg1 >= 0), cost: 2*n1
Sub-proof via acceration calculus written to file:///tmp/tmpnam_AePGmI.txt

Applied nonterm
Original rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P2, arg1'=arg1P2, (-arg2+arg2P2 <= 0 /\ arg2P2 > 0 /\ -arg2+arg1P2 <= 0 /\ arg2P2-arg1 <= 0 /\ arg1P2 > 0 /\ arg1P2-arg1 <= 0), cost: 2
New rule:
f151_0_main_InvokeMethod -> [3] : (arg2-arg1P2 >= 0 /\ -arg2P2+arg1 >= 0 /\ arg2P2 > 0 /\ arg2-arg2P2 <= 0 /\ arg2-arg2P2 >= 0 /\ arg1P2 > 0 /\ -arg1P2+arg1 <= 0 /\ -arg1P2+arg1 >= 0), cost: NONTERM
Sub-proof via acceration calculus written to file:///tmp/tmpnam_HcdIAb.txt

Applied chaining
First rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P2, arg1'=arg1P2, (-arg2P2+arg1 >= 0 /\ arg2P2 > 0 /\ arg2-arg2P2 >= 0 /\ -arg2+arg1P2 <= 0 /\ arg1P2 > 0 /\ arg1P2-arg1 <= 0), cost: 1
Second rule:
f151_0_main_InvokeMethod -> [3] : (arg2-arg1P2 >= 0 /\ -arg2P2+arg1 >= 0 /\ arg2P2 > 0 /\ arg2-arg2P2 <= 0 /\ arg2-arg2P2 >= 0 /\ arg1P2 > 0 /\ -arg1P2+arg1 <= 0 /\ -arg1P2+arg1 >= 0), cost: NONTERM
New rule:
f151_0_main_InvokeMethod -> [3] : (0 <= 0 /\ 0 >= 0 /\ -arg2P2+arg1 >= 0 /\ arg2P2 > 0 /\ -arg2P2+arg1P2 >= 0 /\ arg2-arg2P2 >= 0 /\ -arg2+arg1P2 <= 0 /\ arg2P2-arg1P2 >= 0 /\ arg1P2 > 0 /\ arg1P2-arg1 <= 0), cost: NONTERM

Applied chaining
First rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P2, arg1'=arg1P2, (-arg2P2+arg1 >= 0 /\ arg2P2 > 0 /\ arg2-arg2P2 >= 0 /\ -arg2+arg1P2 <= 0 /\ arg1P2 > 0 /\ arg1P2-arg1 <= 0), cost: 1
Second rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P3, arg1'=arg1P3, (arg2P3 > 0 /\ arg2P3-arg1 <= 0 /\ arg1P3 > 0 /\ arg1P3-arg1 <= 0 /\ arg2P3-arg2 <= 0 /\ -arg2+arg1P3 <= 0), cost: 1
New rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P3, arg1'=arg1P3, (arg2P3 > 0 /\ arg2P3-arg1 <= 0 /\ arg1P3 > 0 /\ arg1P3-arg1 <= 0 /\ arg2P3-arg2 <= 0 /\ -arg2+arg1P3 <= 0), cost: 2

Applied acceleration
Original rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P3, arg1'=arg1P3, (arg2P3 > 0 /\ arg2P3-arg1 <= 0 /\ arg1P3 > 0 /\ arg1P3-arg1 <= 0 /\ arg2P3-arg2 <= 0 /\ -arg2+arg1P3 <= 0), cost: 2
New rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P3, arg1'=arg1P3, (arg2P3 > 0 /\ -arg1P3+arg1 >= 0 /\ -arg2P3+arg2 >= 0 /\ arg1P3 > 0 /\ -1+n2 >= 0 /\ -arg2P3+arg1P3 >= 0 /\ arg2P3-arg1P3 >= 0), cost: 2*n2
Sub-proof via acceration calculus written to file:///tmp/tmpnam_iiBjGn.txt

Applied nonterm
Original rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P3, arg1'=arg1P3, (arg2P3 > 0 /\ arg2P3-arg1 <= 0 /\ arg1P3 > 0 /\ arg1P3-arg1 <= 0 /\ arg2P3-arg2 <= 0 /\ -arg2+arg1P3 <= 0), cost: 2
New rule:
f151_0_main_InvokeMethod -> [3] : (arg2P3 > 0 /\ -arg1P3+arg1 <= 0 /\ -arg1P3+arg1 >= 0 /\ -arg2P3+arg2 <= 0 /\ -arg2P3+arg2 >= 0 /\ arg1P3 > 0 /\ -arg2P3+arg1 >= 0 /\ arg2-arg1P3 >= 0), cost: NONTERM
Sub-proof via acceration calculus written to file:///tmp/tmpnam_OCgndG.txt

Applied chaining
First rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P3, arg1'=arg1P3, (arg2P3 > 0 /\ arg2P3-arg1 <= 0 /\ arg1P3 > 0 /\ arg1P3-arg1 <= 0 /\ arg2P3-arg2 <= 0 /\ -arg2+arg1P3 <= 0), cost: 1
Second rule:
f151_0_main_InvokeMethod -> [3] : (arg2P3 > 0 /\ -arg1P3+arg1 <= 0 /\ -arg1P3+arg1 >= 0 /\ -arg2P3+arg2 <= 0 /\ -arg2P3+arg2 >= 0 /\ arg1P3 > 0 /\ -arg2P3+arg1 >= 0 /\ arg2-arg1P3 >= 0), cost: NONTERM
New rule:
f151_0_main_InvokeMethod -> [3] : (0 <= 0 /\ 0 >= 0 /\ arg2P3 > 0 /\ arg2P3-arg1 <= 0 /\ arg1P3 > 0 /\ arg1P3-arg1 <= 0 /\ arg2P3-arg2 <= 0 /\ -arg2+arg1P3 <= 0 /\ -arg2P3+arg1P3 >= 0 /\ arg2P3-arg1P3 >= 0), cost: NONTERM

Applied chaining
First rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P3, arg1'=arg1P3, (arg2P3 > 0 /\ arg2P3-arg1 <= 0 /\ arg1P3 > 0 /\ arg1P3-arg1 <= 0 /\ arg2P3-arg2 <= 0 /\ -arg2+arg1P3 <= 0), cost: 1
Second rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P2, arg1'=arg1P2, (arg2P2 > 0 /\ -arg2P2+arg1P2 >= 0 /\ arg2-arg2P2 >= 0 /\ arg2P2-arg1P2 >= 0 /\ arg1P2 > 0 /\ -arg1P2+arg1 >= 0 /\ -1+n >= 0), cost: n
New rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg1P2, arg1'=arg1P2, (-arg2+arg1P2 <= 0 /\ arg1P2 > 0 /\ arg1P2-arg1 <= 0 /\ -1+n >= 0), cost: 1+n

Applied nonterm
Original rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg1P2, arg1'=arg1P2, (-arg2+arg1P2 <= 0 /\ arg1P2 > 0 /\ arg1P2-arg1 <= 0 /\ -1+n >= 0), cost: 1+n
New rule:
f151_0_main_InvokeMethod -> [3] : (arg2-arg1P2 >= 0 /\ arg1P2 > 0 /\ -1+n3 >= 0 /\ -arg1P2+arg1 >= 0 /\ -1+n >= 0), cost: NONTERM
Sub-proof via acceration calculus written to file:///tmp/tmpnam_oDEgfC.txt

Applied chaining
First rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P2, arg1'=arg1P2, (arg2P2 > 0 /\ -arg2P2+arg1P2 >= 0 /\ arg2-arg2P2 >= 0 /\ arg2P2-arg1P2 >= 0 /\ arg1P2 > 0 /\ -arg1P2+arg1 >= 0 /\ -1+n >= 0), cost: n
Second rule:
f151_0_main_InvokeMethod -> [3] : (arg2-arg1P2 >= 0 /\ arg1P2 > 0 /\ -1+n3 >= 0 /\ -arg1P2+arg1 >= 0 /\ -1+n >= 0), cost: NONTERM
New rule:
f151_0_main_InvokeMethod -> [3] : (0 >= 0 /\ arg2P2 > 0 /\ -arg2P2+arg1P2 >= 0 /\ arg2-arg2P2 >= 0 /\ arg2P2-arg1P2 >= 0 /\ arg1P2 > 0 /\ -1+n3 >= 0 /\ -arg1P2+arg1 >= 0 /\ -1+n >= 0), cost: NONTERM

Applied chaining
First rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P2, arg1'=arg1P2, (arg2P2 > 0 /\ -arg2P2+arg1P2 >= 0 /\ arg2-arg2P2 >= 0 /\ arg2P2-arg1P2 >= 0 /\ arg1P2 > 0 /\ -arg1P2+arg1 >= 0 /\ -1+n >= 0), cost: n
Second rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P3, arg1'=arg1P3, (arg2P3 > 0 /\ arg2P3-arg1 <= 0 /\ arg1P3 > 0 /\ arg1P3-arg1 <= 0 /\ arg2P3-arg2 <= 0 /\ -arg2+arg1P3 <= 0), cost: 1
New rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P3, arg1'=arg1P3, (arg2P3 > 0 /\ arg2P3-arg1 <= 0 /\ arg1P3 > 0 /\ arg1P3-arg1 <= 0 /\ arg2P3-arg2 <= 0 /\ -arg2+arg1P3 <= 0 /\ -1+n >= 0), cost: 1+n

Applied acceleration
Original rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P3, arg1'=arg1P3, (arg2P3 > 0 /\ arg2P3-arg1 <= 0 /\ arg1P3 > 0 /\ arg1P3-arg1 <= 0 /\ arg2P3-arg2 <= 0 /\ -arg2+arg1P3 <= 0 /\ -1+n >= 0), cost: 1+n
New rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P3, arg1'=arg1P3, (arg2P3 > 0 /\ -arg1P3+arg1 >= 0 /\ -arg2P3+arg2 >= 0 /\ arg1P3 > 0 /\ -arg2P3+arg1P3 >= 0 /\ -1+n4 >= 0 /\ arg2P3-arg1P3 >= 0 /\ -1+n >= 0), cost: n*n4+n4
Sub-proof via acceration calculus written to file:///tmp/tmpnam_FApbPJ.txt

Applied nonterm
Original rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P3, arg1'=arg1P3, (arg2P3 > 0 /\ arg2P3-arg1 <= 0 /\ arg1P3 > 0 /\ arg1P3-arg1 <= 0 /\ arg2P3-arg2 <= 0 /\ -arg2+arg1P3 <= 0 /\ -1+n >= 0), cost: 1+n
New rule:
f151_0_main_InvokeMethod -> [3] : (arg2P3 > 0 /\ -arg1P3+arg1 <= 0 /\ -arg1P3+arg1 >= 0 /\ -arg2P3+arg2 <= 0 /\ -arg2P3+arg2 >= 0 /\ arg1P3 > 0 /\ -arg2P3+arg1 >= 0 /\ arg2-arg1P3 >= 0 /\ -1+n >= 0), cost: NONTERM
Sub-proof via acceration calculus written to file:///tmp/tmpnam_PHFKnE.txt

Applied chaining
First rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P3, arg1'=arg1P3, (arg2P3 > 0 /\ arg2P3-arg1 <= 0 /\ arg1P3 > 0 /\ arg1P3-arg1 <= 0 /\ arg2P3-arg2 <= 0 /\ -arg2+arg1P3 <= 0), cost: 1
Second rule:
f151_0_main_InvokeMethod -> [3] : (arg2P3 > 0 /\ -arg1P3+arg1 <= 0 /\ -arg1P3+arg1 >= 0 /\ -arg2P3+arg2 <= 0 /\ -arg2P3+arg2 >= 0 /\ arg1P3 > 0 /\ -arg2P3+arg1 >= 0 /\ arg2-arg1P3 >= 0 /\ -1+n >= 0), cost: NONTERM
New rule:
f151_0_main_InvokeMethod -> [3] : (0 <= 0 /\ 0 >= 0 /\ arg2P3 > 0 /\ arg2P3-arg1 <= 0 /\ arg1P3 > 0 /\ arg1P3-arg1 <= 0 /\ arg2P3-arg2 <= 0 /\ -arg2+arg1P3 <= 0 /\ -arg2P3+arg1P3 >= 0 /\ arg2P3-arg1P3 >= 0 /\ -1+n >= 0), cost: NONTERM

Applied chaining
First rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P2, arg1'=arg1P2, (-arg2P2+arg1 >= 0 /\ arg2P2 > 0 /\ arg2-arg2P2 >= 0 /\ -arg2+arg1P2 <= 0 /\ arg1P2 > 0 /\ arg1P2-arg1 <= 0), cost: 1
Second rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P3, arg1'=arg1P3, (arg2P3 > 0 /\ -arg1P3+arg1 >= 0 /\ -arg2P3+arg2 >= 0 /\ arg1P3 > 0 /\ -arg2P3+arg1P3 >= 0 /\ -1+n0 >= 0 /\ arg2P3-arg1P3 >= 0), cost: n0
New rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg1P3, arg1'=arg1P3, (arg1P3 > 0 /\ arg1P3-arg1 <= 0 /\ -arg2+arg1P3 <= 0 /\ -1+n0 >= 0), cost: 1+n0

Applied nonterm
Original rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg1P3, arg1'=arg1P3, (arg1P3 > 0 /\ arg1P3-arg1 <= 0 /\ -arg2+arg1P3 <= 0 /\ -1+n0 >= 0), cost: 1+n0
New rule:
f151_0_main_InvokeMethod -> [3] : (-arg1P3+arg1 >= 0 /\ arg1P3 > 0 /\ -1+n0 >= 0 /\ arg2-arg1P3 >= 0 /\ -1+n5 >= 0), cost: NONTERM
Sub-proof via acceration calculus written to file:///tmp/tmpnam_HlFiCC.txt

Applied chaining
First rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P3, arg1'=arg1P3, (arg2P3 > 0 /\ -arg1P3+arg1 >= 0 /\ -arg2P3+arg2 >= 0 /\ arg1P3 > 0 /\ -arg2P3+arg1P3 >= 0 /\ -1+n0 >= 0 /\ arg2P3-arg1P3 >= 0), cost: n0
Second rule:
f151_0_main_InvokeMethod -> [3] : (-arg1P3+arg1 >= 0 /\ arg1P3 > 0 /\ -1+n0 >= 0 /\ arg2-arg1P3 >= 0 /\ -1+n5 >= 0), cost: NONTERM
New rule:
f151_0_main_InvokeMethod -> [3] : (0 >= 0 /\ arg2P3 > 0 /\ -arg1P3+arg1 >= 0 /\ -arg2P3+arg2 >= 0 /\ arg1P3 > 0 /\ -arg2P3+arg1P3 >= 0 /\ -1+n0 >= 0 /\ arg2P3-arg1P3 >= 0 /\ -1+n5 >= 0), cost: NONTERM

Applied chaining
First rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P3, arg1'=arg1P3, (arg2P3 > 0 /\ -arg1P3+arg1 >= 0 /\ -arg2P3+arg2 >= 0 /\ arg1P3 > 0 /\ -arg2P3+arg1P3 >= 0 /\ -1+n0 >= 0 /\ arg2P3-arg1P3 >= 0), cost: n0
Second rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P2, arg1'=arg1P2, (-arg2P2+arg1 >= 0 /\ arg2P2 > 0 /\ arg2-arg2P2 >= 0 /\ -arg2+arg1P2 <= 0 /\ arg1P2 > 0 /\ arg1P2-arg1 <= 0), cost: 1
New rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P2, arg1'=arg1P2, (-arg2+arg2P2 <= 0 /\ arg2P2 > 0 /\ -arg2+arg1P2 <= 0 /\ arg2P2-arg1 <= 0 /\ arg1P2 > 0 /\ arg1P2-arg1 <= 0 /\ -1+n0 >= 0), cost: 1+n0

Applied acceleration
Original rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P2, arg1'=arg1P2, (-arg2+arg2P2 <= 0 /\ arg2P2 > 0 /\ -arg2+arg1P2 <= 0 /\ arg2P2-arg1 <= 0 /\ arg1P2 > 0 /\ arg1P2-arg1 <= 0 /\ -1+n0 >= 0), cost: 1+n0
New rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P2, arg1'=arg1P2, (-1+n6 >= 0 /\ arg2P2 > 0 /\ -arg2P2+arg1P2 >= 0 /\ arg2-arg2P2 >= 0 /\ arg2P2-arg1P2 >= 0 /\ arg1P2 > 0 /\ -1+n0 >= 0 /\ -arg1P2+arg1 >= 0), cost: n0*n6+n6
Sub-proof via acceration calculus written to file:///tmp/tmpnam_gOmJLd.txt

Applied nonterm
Original rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P2, arg1'=arg1P2, (-arg2+arg2P2 <= 0 /\ arg2P2 > 0 /\ -arg2+arg1P2 <= 0 /\ arg2P2-arg1 <= 0 /\ arg1P2 > 0 /\ arg1P2-arg1 <= 0 /\ -1+n0 >= 0), cost: 1+n0
New rule:
f151_0_main_InvokeMethod -> [3] : (arg2-arg1P2 >= 0 /\ -arg2P2+arg1 >= 0 /\ arg2P2 > 0 /\ arg2-arg2P2 <= 0 /\ arg2-arg2P2 >= 0 /\ arg1P2 > 0 /\ -1+n0 >= 0 /\ -arg1P2+arg1 <= 0 /\ -arg1P2+arg1 >= 0), cost: NONTERM
Sub-proof via acceration calculus written to file:///tmp/tmpnam_mEAnml.txt

Applied chaining
First rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P2, arg1'=arg1P2, (-arg2P2+arg1 >= 0 /\ arg2P2 > 0 /\ arg2-arg2P2 >= 0 /\ -arg2+arg1P2 <= 0 /\ arg1P2 > 0 /\ arg1P2-arg1 <= 0), cost: 1
Second rule:
f151_0_main_InvokeMethod -> [3] : (arg2-arg1P2 >= 0 /\ -arg2P2+arg1 >= 0 /\ arg2P2 > 0 /\ arg2-arg2P2 <= 0 /\ arg2-arg2P2 >= 0 /\ arg1P2 > 0 /\ -1+n0 >= 0 /\ -arg1P2+arg1 <= 0 /\ -arg1P2+arg1 >= 0), cost: NONTERM
New rule:
f151_0_main_InvokeMethod -> [3] : (0 <= 0 /\ 0 >= 0 /\ -arg2P2+arg1 >= 0 /\ arg2P2 > 0 /\ -arg2P2+arg1P2 >= 0 /\ arg2-arg2P2 >= 0 /\ -arg2+arg1P2 <= 0 /\ arg2P2-arg1P2 >= 0 /\ arg1P2 > 0 /\ arg1P2-arg1 <= 0 /\ -1+n0 >= 0), cost: NONTERM

Applied simplification
Original rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P2, arg1'=arg1P2, (arg2P2 > 0 /\ -arg2P2+arg1P2 >= 0 /\ arg2-arg2P2 >= 0 /\ arg2P2-arg1P2 >= 0 /\ arg1P2 > 0 /\ -arg1P2+arg1 >= 0 /\ -1+n >= 0), cost: n
New rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P2, arg1'=arg1P2, (-arg2P2+arg1P2 >= 0 /\ arg2-arg2P2 >= 0 /\ arg2P2-arg1P2 >= 0 /\ arg1P2 > 0 /\ -arg1P2+arg1 >= 0 /\ -1+n >= 0), cost: n

Applied simplification
Original rule:
f151_0_main_InvokeMethod -> [3] : (arg2-arg1P2 >= 0 /\ -arg2P2+arg1 >= 0 /\ arg2P2 > 0 /\ arg2-arg2P2 <= 0 /\ arg2-arg2P2 >= 0 /\ arg1P2 > 0 /\ -arg1P2+arg1 <= 0 /\ -arg1P2+arg1 >= 0), cost: NONTERM
New rule:
f151_0_main_InvokeMethod -> [3] : (arg2-arg1P2 >= 0 /\ -arg2P2+arg1 >= 0 /\ arg2-arg2P2 <= 0 /\ arg1P2 > 0 /\ -arg1P2+arg1 <= 0), cost: NONTERM

Applied simplification
Original rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P3, arg1'=arg1P3, (arg2P3 > 0 /\ -arg1P3+arg1 >= 0 /\ -arg2P3+arg2 >= 0 /\ arg1P3 > 0 /\ -arg2P3+arg1P3 >= 0 /\ -1+n0 >= 0 /\ arg2P3-arg1P3 >= 0), cost: n0
New rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P3, arg1'=arg1P3, (-arg1P3+arg1 >= 0 /\ -arg2P3+arg2 >= 0 /\ arg1P3 > 0 /\ -arg2P3+arg1P3 >= 0 /\ -1+n0 >= 0 /\ arg2P3-arg1P3 >= 0), cost: n0

Applied simplification
Original rule:
f151_0_main_InvokeMethod -> [3] : (arg2P3 > 0 /\ -arg1P3+arg1 <= 0 /\ -arg1P3+arg1 >= 0 /\ -arg2P3+arg2 <= 0 /\ -arg2P3+arg2 >= 0 /\ arg1P3 > 0 /\ -arg2P3+arg1 >= 0 /\ arg2-arg1P3 >= 0), cost: NONTERM
New rule:
f151_0_main_InvokeMethod -> [3] : (-arg1P3+arg1 <= 0 /\ -arg2P3+arg2 <= 0 /\ arg1P3 > 0 /\ -arg2P3+arg1 >= 0 /\ arg2-arg1P3 >= 0), cost: NONTERM

Applied simplification
Original rule:
f151_0_main_InvokeMethod -> [3] : (0 <= 0 /\ 0 >= 0 /\ -arg2P2+arg1 >= 0 /\ arg2P2 > 0 /\ -arg2P2+arg1P2 >= 0 /\ arg2-arg2P2 >= 0 /\ -arg2+arg1P2 <= 0 /\ arg2P2-arg1P2 >= 0 /\ arg1P2 > 0 /\ arg1P2-arg1 <= 0), cost: NONTERM
New rule:
f151_0_main_InvokeMethod -> [3] : (-arg2P2+arg1P2 >= 0 /\ -arg2+arg1P2 <= 0 /\ arg2P2-arg1P2 >= 0 /\ arg1P2 > 0 /\ arg1P2-arg1 <= 0), cost: NONTERM

Applied simplification
Original rule:
f151_0_main_InvokeMethod -> [3] : (0 <= 0 /\ 0 >= 0 /\ arg2P3 > 0 /\ arg2P3-arg1 <= 0 /\ arg1P3 > 0 /\ arg1P3-arg1 <= 0 /\ arg2P3-arg2 <= 0 /\ -arg2+arg1P3 <= 0 /\ -arg2P3+arg1P3 >= 0 /\ arg2P3-arg1P3 >= 0), cost: NONTERM
New rule:
f151_0_main_InvokeMethod -> [3] : (arg1P3 > 0 /\ arg1P3-arg1 <= 0 /\ -arg2+arg1P3 <= 0 /\ -arg2P3+arg1P3 >= 0 /\ arg2P3-arg1P3 >= 0), cost: NONTERM

Applied simplification
Original rule:
f151_0_main_InvokeMethod -> [3] : (0 >= 0 /\ arg2P2 > 0 /\ -arg2P2+arg1P2 >= 0 /\ arg2-arg2P2 >= 0 /\ arg2P2-arg1P2 >= 0 /\ arg1P2 > 0 /\ -1+n3 >= 0 /\ -arg1P2+arg1 >= 0 /\ -1+n >= 0), cost: NONTERM
New rule:
f151_0_main_InvokeMethod -> [3] : (-arg2P2+arg1P2 >= 0 /\ arg2-arg2P2 >= 0 /\ arg2P2-arg1P2 >= 0 /\ arg1P2 > 0 /\ -1+n3 >= 0 /\ -arg1P2+arg1 >= 0 /\ -1+n >= 0), cost: NONTERM

Applied simplification
Original rule:
f151_0_main_InvokeMethod -> [3] : (arg2P3 > 0 /\ -arg1P3+arg1 <= 0 /\ -arg1P3+arg1 >= 0 /\ -arg2P3+arg2 <= 0 /\ -arg2P3+arg2 >= 0 /\ arg1P3 > 0 /\ -arg2P3+arg1 >= 0 /\ arg2-arg1P3 >= 0 /\ -1+n >= 0), cost: NONTERM
New rule:
f151_0_main_InvokeMethod -> [3] : (-arg1P3+arg1 <= 0 /\ -arg2P3+arg2 <= 0 /\ arg1P3 > 0 /\ -arg2P3+arg1 >= 0 /\ arg2-arg1P3 >= 0 /\ -1+n >= 0), cost: NONTERM

Applied simplification
Original rule:
f151_0_main_InvokeMethod -> [3] : (0 <= 0 /\ 0 >= 0 /\ arg2P3 > 0 /\ arg2P3-arg1 <= 0 /\ arg1P3 > 0 /\ arg1P3-arg1 <= 0 /\ arg2P3-arg2 <= 0 /\ -arg2+arg1P3 <= 0 /\ -arg2P3+arg1P3 >= 0 /\ arg2P3-arg1P3 >= 0 /\ -1+n >= 0), cost: NONTERM
New rule:
f151_0_main_InvokeMethod -> [3] : (arg1P3 > 0 /\ arg1P3-arg1 <= 0 /\ -arg2+arg1P3 <= 0 /\ -arg2P3+arg1P3 >= 0 /\ arg2P3-arg1P3 >= 0 /\ -1+n >= 0), cost: NONTERM

Applied simplification
Original rule:
f151_0_main_InvokeMethod -> [3] : (0 >= 0 /\ arg2P3 > 0 /\ -arg1P3+arg1 >= 0 /\ -arg2P3+arg2 >= 0 /\ arg1P3 > 0 /\ -arg2P3+arg1P3 >= 0 /\ -1+n0 >= 0 /\ arg2P3-arg1P3 >= 0 /\ -1+n5 >= 0), cost: NONTERM
New rule:
f151_0_main_InvokeMethod -> [3] : (-arg1P3+arg1 >= 0 /\ -arg2P3+arg2 >= 0 /\ arg1P3 > 0 /\ -arg2P3+arg1P3 >= 0 /\ -1+n0 >= 0 /\ arg2P3-arg1P3 >= 0 /\ -1+n5 >= 0), cost: NONTERM

Applied simplification
Original rule:
f151_0_main_InvokeMethod -> [3] : (arg2-arg1P2 >= 0 /\ -arg2P2+arg1 >= 0 /\ arg2P2 > 0 /\ arg2-arg2P2 <= 0 /\ arg2-arg2P2 >= 0 /\ arg1P2 > 0 /\ -1+n0 >= 0 /\ -arg1P2+arg1 <= 0 /\ -arg1P2+arg1 >= 0), cost: NONTERM
New rule:
f151_0_main_InvokeMethod -> [3] : (arg2-arg1P2 >= 0 /\ -arg2P2+arg1 >= 0 /\ arg2-arg2P2 <= 0 /\ arg1P2 > 0 /\ -1+n0 >= 0 /\ -arg1P2+arg1 <= 0), cost: NONTERM

Applied simplification
Original rule:
f151_0_main_InvokeMethod -> [3] : (0 <= 0 /\ 0 >= 0 /\ -arg2P2+arg1 >= 0 /\ arg2P2 > 0 /\ -arg2P2+arg1P2 >= 0 /\ arg2-arg2P2 >= 0 /\ -arg2+arg1P2 <= 0 /\ arg2P2-arg1P2 >= 0 /\ arg1P2 > 0 /\ arg1P2-arg1 <= 0 /\ -1+n0 >= 0), cost: NONTERM
New rule:
f151_0_main_InvokeMethod -> [3] : (-arg2P2+arg1P2 >= 0 /\ -arg2+arg1P2 <= 0 /\ arg2P2-arg1P2 >= 0 /\ arg1P2 > 0 /\ arg1P2-arg1 <= 0 /\ -1+n0 >= 0), cost: NONTERM

Applied deletion
Removed the following rules: 7 8

Accelerated simple loops
Start location: __init
   5: f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg2P0, arg1'=arg1P0, arg3'=2, (arg2P0-arg1 <= 0 /\ -2+arg2 == 0 /\ arg2P0 > 0 /\ -arg1+arg1P0 <= 0 /\ arg1P0 > 0), cost: 1
   6: f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg2P1, arg1'=arg1P1, arg3'=1, (arg2P1 > 0 /\ arg1P1 > 0 /\ arg2P1-arg1 <= 0 /\ -1+arg2 == 0 /\ -arg1+arg1P1 <= 0), cost: 1
  15: f151_0_main_InvokeMethod -> [3] : (arg2-arg1P2 >= 0 /\ arg1P2 > 0 /\ -1+n3 >= 0 /\ -arg1P2+arg1 >= 0 /\ -1+n >= 0), cost: NONTERM
  19: f151_0_main_InvokeMethod -> [3] : (-arg1P3+arg1 >= 0 /\ arg1P3 > 0 /\ -1+n0 >= 0 /\ arg2-arg1P3 >= 0 /\ -1+n5 >= 0), cost: NONTERM
  23: f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P2, arg1'=arg1P2, (-arg2P2+arg1P2 >= 0 /\ arg2-arg2P2 >= 0 /\ arg2P2-arg1P2 >= 0 /\ arg1P2 > 0 /\ -arg1P2+arg1 >= 0 /\ -1+n >= 0), cost: n
  24: f151_0_main_InvokeMethod -> [3] : (arg2-arg1P2 >= 0 /\ -arg2P2+arg1 >= 0 /\ arg2-arg2P2 <= 0 /\ arg1P2 > 0 /\ -arg1P2+arg1 <= 0), cost: NONTERM
  25: f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P3, arg1'=arg1P3, (-arg1P3+arg1 >= 0 /\ -arg2P3+arg2 >= 0 /\ arg1P3 > 0 /\ -arg2P3+arg1P3 >= 0 /\ -1+n0 >= 0 /\ arg2P3-arg1P3 >= 0), cost: n0
  26: f151_0_main_InvokeMethod -> [3] : (-arg1P3+arg1 <= 0 /\ -arg2P3+arg2 <= 0 /\ arg1P3 > 0 /\ -arg2P3+arg1 >= 0 /\ arg2-arg1P3 >= 0), cost: NONTERM
  27: f151_0_main_InvokeMethod -> [3] : (-arg2P2+arg1P2 >= 0 /\ -arg2+arg1P2 <= 0 /\ arg2P2-arg1P2 >= 0 /\ arg1P2 > 0 /\ arg1P2-arg1 <= 0), cost: NONTERM
  28: f151_0_main_InvokeMethod -> [3] : (arg1P3 > 0 /\ arg1P3-arg1 <= 0 /\ -arg2+arg1P3 <= 0 /\ -arg2P3+arg1P3 >= 0 /\ arg2P3-arg1P3 >= 0), cost: NONTERM
  29: f151_0_main_InvokeMethod -> [3] : (-arg2P2+arg1P2 >= 0 /\ arg2-arg2P2 >= 0 /\ arg2P2-arg1P2 >= 0 /\ arg1P2 > 0 /\ -1+n3 >= 0 /\ -arg1P2+arg1 >= 0 /\ -1+n >= 0), cost: NONTERM
  30: f151_0_main_InvokeMethod -> [3] : (-arg1P3+arg1 <= 0 /\ -arg2P3+arg2 <= 0 /\ arg1P3 > 0 /\ -arg2P3+arg1 >= 0 /\ arg2-arg1P3 >= 0 /\ -1+n >= 0), cost: NONTERM
  31: f151_0_main_InvokeMethod -> [3] : (arg1P3 > 0 /\ arg1P3-arg1 <= 0 /\ -arg2+arg1P3 <= 0 /\ -arg2P3+arg1P3 >= 0 /\ arg2P3-arg1P3 >= 0 /\ -1+n >= 0), cost: NONTERM
  32: f151_0_main_InvokeMethod -> [3] : (-arg1P3+arg1 >= 0 /\ -arg2P3+arg2 >= 0 /\ arg1P3 > 0 /\ -arg2P3+arg1P3 >= 0 /\ -1+n0 >= 0 /\ arg2P3-arg1P3 >= 0 /\ -1+n5 >= 0), cost: NONTERM
  33: f151_0_main_InvokeMethod -> [3] : (arg2-arg1P2 >= 0 /\ -arg2P2+arg1 >= 0 /\ arg2-arg2P2 <= 0 /\ arg1P2 > 0 /\ -1+n0 >= 0 /\ -arg1P2+arg1 <= 0), cost: NONTERM
  34: f151_0_main_InvokeMethod -> [3] : (-arg2P2+arg1P2 >= 0 /\ -arg2+arg1P2 <= 0 /\ arg2P2-arg1P2 >= 0 /\ arg1P2 > 0 /\ arg1P2-arg1 <= 0 /\ -1+n0 >= 0), cost: NONTERM
   4: __init -> f1_0_main_ConstantStackPush : arg2'=arg2P4, arg1'=arg1P4, arg3'=arg3P4, TRUE, cost: 1


Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg2P0, arg1'=arg1P0, arg3'=2, (arg2P0-arg1 <= 0 /\ -2+arg2 == 0 /\ arg2P0 > 0 /\ -arg1+arg1P0 <= 0 /\ arg1P0 > 0), cost: 1
Second rule:
f151_0_main_InvokeMethod -> [3] : (arg2-arg1P2 >= 0 /\ arg1P2 > 0 /\ -1+n3 >= 0 /\ -arg1P2+arg1 >= 0 /\ -1+n >= 0), cost: NONTERM
New rule:
f1_0_main_ConstantStackPush -> [3] : (-2+arg2 == 0 /\ -1+arg1 >= 0), cost: NONTERM

Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg2P1, arg1'=arg1P1, arg3'=1, (arg2P1 > 0 /\ arg1P1 > 0 /\ arg2P1-arg1 <= 0 /\ -1+arg2 == 0 /\ -arg1+arg1P1 <= 0), cost: 1
Second rule:
f151_0_main_InvokeMethod -> [3] : (arg2-arg1P2 >= 0 /\ arg1P2 > 0 /\ -1+n3 >= 0 /\ -arg1P2+arg1 >= 0 /\ -1+n >= 0), cost: NONTERM
New rule:
f1_0_main_ConstantStackPush -> [3] : (-1+arg2 == 0 /\ -1+arg1 >= 0), cost: NONTERM

Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg2P0, arg1'=arg1P0, arg3'=2, (arg2P0-arg1 <= 0 /\ -2+arg2 == 0 /\ arg2P0 > 0 /\ -arg1+arg1P0 <= 0 /\ arg1P0 > 0), cost: 1
Second rule:
f151_0_main_InvokeMethod -> [3] : (-arg1P3+arg1 >= 0 /\ arg1P3 > 0 /\ -1+n0 >= 0 /\ arg2-arg1P3 >= 0 /\ -1+n5 >= 0), cost: NONTERM
New rule:
f1_0_main_ConstantStackPush -> [3] : (-2+arg2 == 0 /\ -1+arg1 >= 0), cost: NONTERM

Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg2P1, arg1'=arg1P1, arg3'=1, (arg2P1 > 0 /\ arg1P1 > 0 /\ arg2P1-arg1 <= 0 /\ -1+arg2 == 0 /\ -arg1+arg1P1 <= 0), cost: 1
Second rule:
f151_0_main_InvokeMethod -> [3] : (-arg1P3+arg1 >= 0 /\ arg1P3 > 0 /\ -1+n0 >= 0 /\ arg2-arg1P3 >= 0 /\ -1+n5 >= 0), cost: NONTERM
New rule:
f1_0_main_ConstantStackPush -> [3] : (-1+arg2 == 0 /\ -1+arg1 >= 0), cost: NONTERM

Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg2P0, arg1'=arg1P0, arg3'=2, (arg2P0-arg1 <= 0 /\ -2+arg2 == 0 /\ arg2P0 > 0 /\ -arg1+arg1P0 <= 0 /\ arg1P0 > 0), cost: 1
Second rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P2, arg1'=arg1P2, (-arg2P2+arg1P2 >= 0 /\ arg2-arg2P2 >= 0 /\ arg2P2-arg1P2 >= 0 /\ arg1P2 > 0 /\ -arg1P2+arg1 >= 0 /\ -1+n >= 0), cost: n
New rule:
f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg1P2, arg1'=arg1P2, arg3'=2, (-2+arg2 == 0 /\ arg1P2 > 0 /\ arg1P2-arg1 <= 0 /\ -1+n >= 0), cost: 1+n

Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg2P1, arg1'=arg1P1, arg3'=1, (arg2P1 > 0 /\ arg1P1 > 0 /\ arg2P1-arg1 <= 0 /\ -1+arg2 == 0 /\ -arg1+arg1P1 <= 0), cost: 1
Second rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P2, arg1'=arg1P2, (-arg2P2+arg1P2 >= 0 /\ arg2-arg2P2 >= 0 /\ arg2P2-arg1P2 >= 0 /\ arg1P2 > 0 /\ -arg1P2+arg1 >= 0 /\ -1+n >= 0), cost: n
New rule:
f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg1P2, arg1'=arg1P2, arg3'=1, (arg1P2 > 0 /\ -1+arg2 == 0 /\ arg1P2-arg1 <= 0 /\ -1+n >= 0), cost: 1+n

Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg2P0, arg1'=arg1P0, arg3'=2, (arg2P0-arg1 <= 0 /\ -2+arg2 == 0 /\ arg2P0 > 0 /\ -arg1+arg1P0 <= 0 /\ arg1P0 > 0), cost: 1
Second rule:
f151_0_main_InvokeMethod -> [3] : (arg2-arg1P2 >= 0 /\ -arg2P2+arg1 >= 0 /\ arg2-arg2P2 <= 0 /\ arg1P2 > 0 /\ -arg1P2+arg1 <= 0), cost: NONTERM
New rule:
f1_0_main_ConstantStackPush -> [3] : (-2+arg2 == 0 /\ -1+arg1 >= 0), cost: NONTERM

Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg2P1, arg1'=arg1P1, arg3'=1, (arg2P1 > 0 /\ arg1P1 > 0 /\ arg2P1-arg1 <= 0 /\ -1+arg2 == 0 /\ -arg1+arg1P1 <= 0), cost: 1
Second rule:
f151_0_main_InvokeMethod -> [3] : (arg2-arg1P2 >= 0 /\ -arg2P2+arg1 >= 0 /\ arg2-arg2P2 <= 0 /\ arg1P2 > 0 /\ -arg1P2+arg1 <= 0), cost: NONTERM
New rule:
f1_0_main_ConstantStackPush -> [3] : (-1+arg2 == 0 /\ -1+arg1 >= 0), cost: NONTERM

Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg2P0, arg1'=arg1P0, arg3'=2, (arg2P0-arg1 <= 0 /\ -2+arg2 == 0 /\ arg2P0 > 0 /\ -arg1+arg1P0 <= 0 /\ arg1P0 > 0), cost: 1
Second rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P3, arg1'=arg1P3, (-arg1P3+arg1 >= 0 /\ -arg2P3+arg2 >= 0 /\ arg1P3 > 0 /\ -arg2P3+arg1P3 >= 0 /\ -1+n0 >= 0 /\ arg2P3-arg1P3 >= 0), cost: n0
New rule:
f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg1P3, arg1'=arg1P3, arg3'=2, (-2+arg2 == 0 /\ arg1P3 > 0 /\ arg1P3-arg1 <= 0 /\ -1+n0 >= 0), cost: 1+n0

Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg2P1, arg1'=arg1P1, arg3'=1, (arg2P1 > 0 /\ arg1P1 > 0 /\ arg2P1-arg1 <= 0 /\ -1+arg2 == 0 /\ -arg1+arg1P1 <= 0), cost: 1
Second rule:
f151_0_main_InvokeMethod -> f151_0_main_InvokeMethod : arg2'=arg2P3, arg1'=arg1P3, (-arg1P3+arg1 >= 0 /\ -arg2P3+arg2 >= 0 /\ arg1P3 > 0 /\ -arg2P3+arg1P3 >= 0 /\ -1+n0 >= 0 /\ arg2P3-arg1P3 >= 0), cost: n0
New rule:
f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg1P3, arg1'=arg1P3, arg3'=1, (arg1P3 > 0 /\ arg1P3-arg1 <= 0 /\ -1+arg2 == 0 /\ -1+n0 >= 0), cost: 1+n0

Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg2P0, arg1'=arg1P0, arg3'=2, (arg2P0-arg1 <= 0 /\ -2+arg2 == 0 /\ arg2P0 > 0 /\ -arg1+arg1P0 <= 0 /\ arg1P0 > 0), cost: 1
Second rule:
f151_0_main_InvokeMethod -> [3] : (-arg1P3+arg1 <= 0 /\ -arg2P3+arg2 <= 0 /\ arg1P3 > 0 /\ -arg2P3+arg1 >= 0 /\ arg2-arg1P3 >= 0), cost: NONTERM
New rule:
f1_0_main_ConstantStackPush -> [3] : (-2+arg2 == 0 /\ -1+arg1 >= 0), cost: NONTERM

Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg2P1, arg1'=arg1P1, arg3'=1, (arg2P1 > 0 /\ arg1P1 > 0 /\ arg2P1-arg1 <= 0 /\ -1+arg2 == 0 /\ -arg1+arg1P1 <= 0), cost: 1
Second rule:
f151_0_main_InvokeMethod -> [3] : (-arg1P3+arg1 <= 0 /\ -arg2P3+arg2 <= 0 /\ arg1P3 > 0 /\ -arg2P3+arg1 >= 0 /\ arg2-arg1P3 >= 0), cost: NONTERM
New rule:
f1_0_main_ConstantStackPush -> [3] : (-1+arg2 == 0 /\ -1+arg1 >= 0), cost: NONTERM

Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg2P0, arg1'=arg1P0, arg3'=2, (arg2P0-arg1 <= 0 /\ -2+arg2 == 0 /\ arg2P0 > 0 /\ -arg1+arg1P0 <= 0 /\ arg1P0 > 0), cost: 1
Second rule:
f151_0_main_InvokeMethod -> [3] : (-arg2P2+arg1P2 >= 0 /\ -arg2+arg1P2 <= 0 /\ arg2P2-arg1P2 >= 0 /\ arg1P2 > 0 /\ arg1P2-arg1 <= 0), cost: NONTERM
New rule:
f1_0_main_ConstantStackPush -> [3] : (-2+arg2 == 0 /\ -1+arg1 >= 0), cost: NONTERM

Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg2P1, arg1'=arg1P1, arg3'=1, (arg2P1 > 0 /\ arg1P1 > 0 /\ arg2P1-arg1 <= 0 /\ -1+arg2 == 0 /\ -arg1+arg1P1 <= 0), cost: 1
Second rule:
f151_0_main_InvokeMethod -> [3] : (-arg2P2+arg1P2 >= 0 /\ -arg2+arg1P2 <= 0 /\ arg2P2-arg1P2 >= 0 /\ arg1P2 > 0 /\ arg1P2-arg1 <= 0), cost: NONTERM
New rule:
f1_0_main_ConstantStackPush -> [3] : (-1+arg2 == 0 /\ -1+arg1 >= 0), cost: NONTERM

Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg2P0, arg1'=arg1P0, arg3'=2, (arg2P0-arg1 <= 0 /\ -2+arg2 == 0 /\ arg2P0 > 0 /\ -arg1+arg1P0 <= 0 /\ arg1P0 > 0), cost: 1
Second rule:
f151_0_main_InvokeMethod -> [3] : (arg1P3 > 0 /\ arg1P3-arg1 <= 0 /\ -arg2+arg1P3 <= 0 /\ -arg2P3+arg1P3 >= 0 /\ arg2P3-arg1P3 >= 0), cost: NONTERM
New rule:
f1_0_main_ConstantStackPush -> [3] : (-2+arg2 == 0 /\ -1+arg1 >= 0), cost: NONTERM

Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg2P1, arg1'=arg1P1, arg3'=1, (arg2P1 > 0 /\ arg1P1 > 0 /\ arg2P1-arg1 <= 0 /\ -1+arg2 == 0 /\ -arg1+arg1P1 <= 0), cost: 1
Second rule:
f151_0_main_InvokeMethod -> [3] : (arg1P3 > 0 /\ arg1P3-arg1 <= 0 /\ -arg2+arg1P3 <= 0 /\ -arg2P3+arg1P3 >= 0 /\ arg2P3-arg1P3 >= 0), cost: NONTERM
New rule:
f1_0_main_ConstantStackPush -> [3] : (-1+arg2 == 0 /\ -1+arg1 >= 0), cost: NONTERM

Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg2P0, arg1'=arg1P0, arg3'=2, (arg2P0-arg1 <= 0 /\ -2+arg2 == 0 /\ arg2P0 > 0 /\ -arg1+arg1P0 <= 0 /\ arg1P0 > 0), cost: 1
Second rule:
f151_0_main_InvokeMethod -> [3] : (-arg2P2+arg1P2 >= 0 /\ arg2-arg2P2 >= 0 /\ arg2P2-arg1P2 >= 0 /\ arg1P2 > 0 /\ -1+n3 >= 0 /\ -arg1P2+arg1 >= 0 /\ -1+n >= 0), cost: NONTERM
New rule:
f1_0_main_ConstantStackPush -> [3] : (-2+arg2 == 0 /\ -1+arg1 >= 0), cost: NONTERM

Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg2P1, arg1'=arg1P1, arg3'=1, (arg2P1 > 0 /\ arg1P1 > 0 /\ arg2P1-arg1 <= 0 /\ -1+arg2 == 0 /\ -arg1+arg1P1 <= 0), cost: 1
Second rule:
f151_0_main_InvokeMethod -> [3] : (-arg2P2+arg1P2 >= 0 /\ arg2-arg2P2 >= 0 /\ arg2P2-arg1P2 >= 0 /\ arg1P2 > 0 /\ -1+n3 >= 0 /\ -arg1P2+arg1 >= 0 /\ -1+n >= 0), cost: NONTERM
New rule:
f1_0_main_ConstantStackPush -> [3] : (-1+arg2 == 0 /\ -1+arg1 >= 0), cost: NONTERM

Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg2P0, arg1'=arg1P0, arg3'=2, (arg2P0-arg1 <= 0 /\ -2+arg2 == 0 /\ arg2P0 > 0 /\ -arg1+arg1P0 <= 0 /\ arg1P0 > 0), cost: 1
Second rule:
f151_0_main_InvokeMethod -> [3] : (-arg1P3+arg1 <= 0 /\ -arg2P3+arg2 <= 0 /\ arg1P3 > 0 /\ -arg2P3+arg1 >= 0 /\ arg2-arg1P3 >= 0 /\ -1+n >= 0), cost: NONTERM
New rule:
f1_0_main_ConstantStackPush -> [3] : (-2+arg2 == 0 /\ -1+arg1 >= 0), cost: NONTERM

Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg2P1, arg1'=arg1P1, arg3'=1, (arg2P1 > 0 /\ arg1P1 > 0 /\ arg2P1-arg1 <= 0 /\ -1+arg2 == 0 /\ -arg1+arg1P1 <= 0), cost: 1
Second rule:
f151_0_main_InvokeMethod -> [3] : (-arg1P3+arg1 <= 0 /\ -arg2P3+arg2 <= 0 /\ arg1P3 > 0 /\ -arg2P3+arg1 >= 0 /\ arg2-arg1P3 >= 0 /\ -1+n >= 0), cost: NONTERM
New rule:
f1_0_main_ConstantStackPush -> [3] : (-1+arg2 == 0 /\ -1+arg1 >= 0), cost: NONTERM

Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg2P0, arg1'=arg1P0, arg3'=2, (arg2P0-arg1 <= 0 /\ -2+arg2 == 0 /\ arg2P0 > 0 /\ -arg1+arg1P0 <= 0 /\ arg1P0 > 0), cost: 1
Second rule:
f151_0_main_InvokeMethod -> [3] : (arg1P3 > 0 /\ arg1P3-arg1 <= 0 /\ -arg2+arg1P3 <= 0 /\ -arg2P3+arg1P3 >= 0 /\ arg2P3-arg1P3 >= 0 /\ -1+n >= 0), cost: NONTERM
New rule:
f1_0_main_ConstantStackPush -> [3] : (-2+arg2 == 0 /\ -1+arg1 >= 0), cost: NONTERM

Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg2P1, arg1'=arg1P1, arg3'=1, (arg2P1 > 0 /\ arg1P1 > 0 /\ arg2P1-arg1 <= 0 /\ -1+arg2 == 0 /\ -arg1+arg1P1 <= 0), cost: 1
Second rule:
f151_0_main_InvokeMethod -> [3] : (arg1P3 > 0 /\ arg1P3-arg1 <= 0 /\ -arg2+arg1P3 <= 0 /\ -arg2P3+arg1P3 >= 0 /\ arg2P3-arg1P3 >= 0 /\ -1+n >= 0), cost: NONTERM
New rule:
f1_0_main_ConstantStackPush -> [3] : (-1+arg2 == 0 /\ -1+arg1 >= 0), cost: NONTERM

Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg2P0, arg1'=arg1P0, arg3'=2, (arg2P0-arg1 <= 0 /\ -2+arg2 == 0 /\ arg2P0 > 0 /\ -arg1+arg1P0 <= 0 /\ arg1P0 > 0), cost: 1
Second rule:
f151_0_main_InvokeMethod -> [3] : (-arg1P3+arg1 >= 0 /\ -arg2P3+arg2 >= 0 /\ arg1P3 > 0 /\ -arg2P3+arg1P3 >= 0 /\ -1+n0 >= 0 /\ arg2P3-arg1P3 >= 0 /\ -1+n5 >= 0), cost: NONTERM
New rule:
f1_0_main_ConstantStackPush -> [3] : (-2+arg2 == 0 /\ -1+arg1 >= 0), cost: NONTERM

Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg2P1, arg1'=arg1P1, arg3'=1, (arg2P1 > 0 /\ arg1P1 > 0 /\ arg2P1-arg1 <= 0 /\ -1+arg2 == 0 /\ -arg1+arg1P1 <= 0), cost: 1
Second rule:
f151_0_main_InvokeMethod -> [3] : (-arg1P3+arg1 >= 0 /\ -arg2P3+arg2 >= 0 /\ arg1P3 > 0 /\ -arg2P3+arg1P3 >= 0 /\ -1+n0 >= 0 /\ arg2P3-arg1P3 >= 0 /\ -1+n5 >= 0), cost: NONTERM
New rule:
f1_0_main_ConstantStackPush -> [3] : (-1+arg2 == 0 /\ -1+arg1 >= 0), cost: NONTERM

Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg2P0, arg1'=arg1P0, arg3'=2, (arg2P0-arg1 <= 0 /\ -2+arg2 == 0 /\ arg2P0 > 0 /\ -arg1+arg1P0 <= 0 /\ arg1P0 > 0), cost: 1
Second rule:
f151_0_main_InvokeMethod -> [3] : (arg2-arg1P2 >= 0 /\ -arg2P2+arg1 >= 0 /\ arg2-arg2P2 <= 0 /\ arg1P2 > 0 /\ -1+n0 >= 0 /\ -arg1P2+arg1 <= 0), cost: NONTERM
New rule:
f1_0_main_ConstantStackPush -> [3] : (-2+arg2 == 0 /\ -1+arg1 >= 0), cost: NONTERM

Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg2P1, arg1'=arg1P1, arg3'=1, (arg2P1 > 0 /\ arg1P1 > 0 /\ arg2P1-arg1 <= 0 /\ -1+arg2 == 0 /\ -arg1+arg1P1 <= 0), cost: 1
Second rule:
f151_0_main_InvokeMethod -> [3] : (arg2-arg1P2 >= 0 /\ -arg2P2+arg1 >= 0 /\ arg2-arg2P2 <= 0 /\ arg1P2 > 0 /\ -1+n0 >= 0 /\ -arg1P2+arg1 <= 0), cost: NONTERM
New rule:
f1_0_main_ConstantStackPush -> [3] : (-1+arg2 == 0 /\ -1+arg1 >= 0), cost: NONTERM

Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg2P0, arg1'=arg1P0, arg3'=2, (arg2P0-arg1 <= 0 /\ -2+arg2 == 0 /\ arg2P0 > 0 /\ -arg1+arg1P0 <= 0 /\ arg1P0 > 0), cost: 1
Second rule:
f151_0_main_InvokeMethod -> [3] : (-arg2P2+arg1P2 >= 0 /\ -arg2+arg1P2 <= 0 /\ arg2P2-arg1P2 >= 0 /\ arg1P2 > 0 /\ arg1P2-arg1 <= 0 /\ -1+n0 >= 0), cost: NONTERM
New rule:
f1_0_main_ConstantStackPush -> [3] : (-2+arg2 == 0 /\ -1+arg1 >= 0), cost: NONTERM

Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg2P1, arg1'=arg1P1, arg3'=1, (arg2P1 > 0 /\ arg1P1 > 0 /\ arg2P1-arg1 <= 0 /\ -1+arg2 == 0 /\ -arg1+arg1P1 <= 0), cost: 1
Second rule:
f151_0_main_InvokeMethod -> [3] : (-arg2P2+arg1P2 >= 0 /\ -arg2+arg1P2 <= 0 /\ arg2P2-arg1P2 >= 0 /\ arg1P2 > 0 /\ arg1P2-arg1 <= 0 /\ -1+n0 >= 0), cost: NONTERM
New rule:
f1_0_main_ConstantStackPush -> [3] : (-1+arg2 == 0 /\ -1+arg1 >= 0), cost: NONTERM

Applied deletion
Removed the following rules: 15 19 23 24 25 26 27 28 29 30 31 32 33 34

Chained accelerated rules with incoming rules
Start location: __init
   5: f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg2P0, arg1'=arg1P0, arg3'=2, (arg2P0-arg1 <= 0 /\ -2+arg2 == 0 /\ arg2P0 > 0 /\ -arg1+arg1P0 <= 0 /\ arg1P0 > 0), cost: 1
   6: f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg2P1, arg1'=arg1P1, arg3'=1, (arg2P1 > 0 /\ arg1P1 > 0 /\ arg2P1-arg1 <= 0 /\ -1+arg2 == 0 /\ -arg1+arg1P1 <= 0), cost: 1
  35: f1_0_main_ConstantStackPush -> [3] : (-2+arg2 == 0 /\ -1+arg1 >= 0), cost: NONTERM
  36: f1_0_main_ConstantStackPush -> [3] : (-1+arg2 == 0 /\ -1+arg1 >= 0), cost: NONTERM
  37: f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg1P2, arg1'=arg1P2, arg3'=2, (-2+arg2 == 0 /\ arg1P2 > 0 /\ arg1P2-arg1 <= 0 /\ -1+n >= 0), cost: 1+n
  38: f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg1P2, arg1'=arg1P2, arg3'=1, (arg1P2 > 0 /\ -1+arg2 == 0 /\ arg1P2-arg1 <= 0 /\ -1+n >= 0), cost: 1+n
  39: f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg1P3, arg1'=arg1P3, arg3'=2, (-2+arg2 == 0 /\ arg1P3 > 0 /\ arg1P3-arg1 <= 0 /\ -1+n0 >= 0), cost: 1+n0
  40: f1_0_main_ConstantStackPush -> f151_0_main_InvokeMethod : arg2'=arg1P3, arg1'=arg1P3, arg3'=1, (arg1P3 > 0 /\ arg1P3-arg1 <= 0 /\ -1+arg2 == 0 /\ -1+n0 >= 0), cost: 1+n0
   4: __init -> f1_0_main_ConstantStackPush : arg2'=arg2P4, arg1'=arg1P4, arg3'=arg3P4, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
  35: f1_0_main_ConstantStackPush -> [3] : (-2+arg2 == 0 /\ -1+arg1 >= 0), cost: NONTERM
  36: f1_0_main_ConstantStackPush -> [3] : (-1+arg2 == 0 /\ -1+arg1 >= 0), cost: NONTERM
   4: __init -> f1_0_main_ConstantStackPush : arg2'=arg2P4, arg1'=arg1P4, arg3'=arg3P4, TRUE, cost: 1


Eliminating location f1_0_main_ConstantStackPush by chaining:

Applied chaining
First rule:
__init -> f1_0_main_ConstantStackPush : arg2'=arg2P4, arg1'=arg1P4, arg3'=arg3P4, TRUE, cost: 1
Second rule:
f1_0_main_ConstantStackPush -> [3] : (-2+arg2 == 0 /\ -1+arg1 >= 0), cost: NONTERM
New rule:
__init -> [3] : (-2+arg2P4 == 0 /\ -1+arg1P4 >= 0), cost: NONTERM

Applied chaining
First rule:
__init -> f1_0_main_ConstantStackPush : arg2'=arg2P4, arg1'=arg1P4, arg3'=arg3P4, TRUE, cost: 1
Second rule:
f1_0_main_ConstantStackPush -> [3] : (-1+arg2 == 0 /\ -1+arg1 >= 0), cost: NONTERM
New rule:
__init -> [3] : (-1+arg1P4 >= 0 /\ -1+arg2P4 == 0), cost: NONTERM

Applied deletion
Removed the following rules: 4 35 36

Eliminated locations on tree-shaped paths
Start location: __init
  41: __init -> [3] : (-2+arg2P4 == 0 /\ -1+arg1P4 >= 0), cost: NONTERM
  42: __init -> [3] : (-1+arg1P4 >= 0 /\ -1+arg2P4 == 0), cost: NONTERM


Computing asymptotic complexity
Proved nontermination of rule 41 via SMT.

Proved the following lower bound
Complexity:  Nonterm
Cpx degree: Nonterm

Solved cost: NONTERM
Rule cost:   NONTERM
Rule guard:  (-2+arg2P4 == 0 /\ -1+arg1P4 >= 0)
