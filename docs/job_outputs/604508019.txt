NO

Initial ITS

Start location: __init
Program variables: arg1 arg2 arg3
   0: f1_0_main_Load -> f181_0_main_LE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (-1+arg2-arg1p1 == 0 /\ -1+arg2p1 > 0 /\ 1+arg2 > 0 /\ arg2-arg3p1 == 0 /\ -1+arg2p1-arg1 <= 0 /\ arg1 > 0), cost: 1
   1: f181_0_main_LE -> f181_0_main_LE : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, (-1-arg1p2+arg1 == 0 /\ arg3 > 0 /\ arg2 > 0 /\ -arg3p2+arg1 == 0 /\ -2+arg2p2-arg2 <= 0 /\ -2+arg2p2 > 0), cost: 1
   2: f181_0_main_LE -> f168_0_visit_NULL : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, (arg2 > 0 /\ -1+arg3 < 0 /\ arg1p3 > 0), cost: 1
   3: f181_0_main_LE -> f168_0_visit_NULL : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, (-1+arg3 < 0 /\ -2+arg1p4 > 0 /\ -1+arg2 > 0 /\ -1-arg2+arg1p4 <= 0), cost: 1
   4: f168_0_visit_NULL -> f168_0_visit_NULL : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, (1+arg1p5 > 0 /\ arg1 > 0), cost: 1
   5: __init -> f1_0_main_Load : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2 arg3
   1: f181_0_main_LE -> f181_0_main_LE : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, (-1-arg1p2+arg1 == 0 /\ arg3 > 0 /\ arg2 > 0 /\ -arg3p2+arg1 == 0 /\ -2+arg2p2-arg2 <= 0 /\ -2+arg2p2 > 0), cost: 1
   2: f181_0_main_LE -> f168_0_visit_NULL : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, (arg2 > 0 /\ -1+arg3 < 0 /\ arg1p3 > 0), cost: 1
   3: f181_0_main_LE -> f168_0_visit_NULL : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, (-1+arg3 < 0 /\ -2+arg1p4 > 0 /\ -1+arg2 > 0 /\ -1-arg2+arg1p4 <= 0), cost: 1
   4: f168_0_visit_NULL -> f168_0_visit_NULL : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, (1+arg1p5 > 0 /\ arg1 > 0), cost: 1
   6: __init -> f181_0_main_LE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (1+arg2p6 > 0 /\ -1+arg2p1-arg1p6 <= 0 /\ -arg3p1+arg2p6 == 0 /\ -1+arg2p1 > 0 /\ -1-arg1p1+arg2p6 == 0 /\ arg1p6 > 0), cost: 1

	Eliminating location f1_0_main_Load by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_Load : arg1'=arg1p6, arg2'=arg2p6, arg3'=arg3p6, T, cost: 1
	Second rule:
	f1_0_main_Load -> f181_0_main_LE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (-1+arg2-arg1p1 == 0 /\ -1+arg2p1 > 0 /\ 1+arg2 > 0 /\ arg2-arg3p1 == 0 /\ -1+arg2p1-arg1 <= 0 /\ arg1 > 0), cost: 1
	New rule:
	__init -> f181_0_main_LE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (1+arg2p6 > 0 /\ -1+arg2p1-arg1p6 <= 0 /\ -arg3p1+arg2p6 == 0 /\ -1+arg2p1 > 0 /\ -1-arg1p1+arg2p6 == 0 /\ arg1p6 > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 5

Simplified Transitions

Start location: __init
Program variables: arg1 arg2 arg3
   2: f181_0_main_LE -> f168_0_visit_NULL : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, (arg2 > 0 /\ -1+arg3 < 0 /\ arg1p3 > 0), cost: 1
   3: f181_0_main_LE -> f168_0_visit_NULL : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, (-1+arg3 < 0 /\ -2+arg1p4 > 0 /\ -1+arg2 > 0 /\ -1-arg2+arg1p4 <= 0), cost: 1
   7: f181_0_main_LE -> f181_0_main_LE : arg1'=-1+arg1, arg2'=arg2p2, arg3'=arg1, (arg3 > 0 /\ arg2 > 0 /\ -2+arg2p2-arg2 <= 0 /\ -2+arg2p2 > 0), cost: 1
   4: f168_0_visit_NULL -> f168_0_visit_NULL : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, (1+arg1p5 > 0 /\ arg1 > 0), cost: 1
   8: __init -> f181_0_main_LE : arg1'=-1+arg2p6, arg2'=arg2p1, arg3'=arg2p6, (1+arg2p6 > 0 /\ -1+arg2p1 > 0), cost: 1

	Propagated Equalities

	Original rule:
	f181_0_main_LE -> f181_0_main_LE : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, (-1-arg1p2+arg1 == 0 /\ arg3 > 0 /\ arg2 > 0 /\ -arg3p2+arg1 == 0 /\ -2+arg2p2-arg2 <= 0 /\ -2+arg2p2 > 0), cost: 1
	New rule:
	f181_0_main_LE -> f181_0_main_LE : arg1'=-1+arg1, arg2'=arg2p2, arg3'=arg1, (0 == 0 /\ arg3 > 0 /\ arg2 > 0 /\ -2+arg2p2-arg2 <= 0 /\ -2+arg2p2 > 0), cost: 1
	
		propagated equality arg1p2 = -1+arg1
		
		propagated equality arg3p2 = arg1
		
	Simplified Guard

	Original rule:
	f181_0_main_LE -> f181_0_main_LE : arg1'=-1+arg1, arg2'=arg2p2, arg3'=arg1, (0 == 0 /\ arg3 > 0 /\ arg2 > 0 /\ -2+arg2p2-arg2 <= 0 /\ -2+arg2p2 > 0), cost: 1
	New rule:
	f181_0_main_LE -> f181_0_main_LE : arg1'=-1+arg1, arg2'=arg2p2, arg3'=arg1, (arg3 > 0 /\ arg2 > 0 /\ -2+arg2p2-arg2 <= 0 /\ -2+arg2p2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	__init -> f181_0_main_LE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (1+arg2p6 > 0 /\ -1+arg2p1-arg1p6 <= 0 /\ -arg3p1+arg2p6 == 0 /\ -1+arg2p1 > 0 /\ -1-arg1p1+arg2p6 == 0 /\ arg1p6 > 0), cost: 1
	New rule:
	__init -> f181_0_main_LE : arg1'=-1+arg2p6, arg2'=arg2p1, arg3'=arg2p6, (0 == 0 /\ 1+arg2p6 > 0 /\ -1+arg2p1-arg1p6 <= 0 /\ -1+arg2p1 > 0 /\ arg1p6 > 0), cost: 1
	
		propagated equality arg3p1 = arg2p6
		
		propagated equality arg1p1 = -1+arg2p6
		
	Simplified Guard

	Original rule:
	__init -> f181_0_main_LE : arg1'=-1+arg2p6, arg2'=arg2p1, arg3'=arg2p6, (0 == 0 /\ 1+arg2p6 > 0 /\ -1+arg2p1-arg1p6 <= 0 /\ -1+arg2p1 > 0 /\ arg1p6 > 0), cost: 1
	New rule:
	__init -> f181_0_main_LE : arg1'=-1+arg2p6, arg2'=arg2p1, arg3'=arg2p6, (1+arg2p6 > 0 /\ -1+arg2p1-arg1p6 <= 0 /\ -1+arg2p1 > 0 /\ arg1p6 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	__init -> f181_0_main_LE : arg1'=-1+arg2p6, arg2'=arg2p1, arg3'=arg2p6, (1+arg2p6 > 0 /\ -1+arg2p1-arg1p6 <= 0 /\ -1+arg2p1 > 0 /\ arg1p6 > 0), cost: 1
	New rule:
	__init -> f181_0_main_LE : arg1'=-1+arg2p6, arg2'=arg2p1, arg3'=arg2p6, (1+arg2p6 > 0 /\ -1+arg2p1 > 0), cost: 1

Step with 8

	Trace

	8[(1+arg2p6 > 0 /\ -1+arg2p1 > 0)]
	
	Blocked

	[{}, {}]

Step with 2

	Trace

	8[(1+arg2p6 > 0 /\ -1+arg2p1 > 0)], 2[(arg2 > 0 /\ -1+arg3 < 0 /\ arg1p3 > 0)]
	
	Blocked

	[{}, {}, {}]

Step with 4

	Trace

	8[(1+arg2p6 > 0 /\ -1+arg2p1 > 0)], 2[(arg2 > 0 /\ -1+arg3 < 0 /\ arg1p3 > 0)], 4[(1+arg1p5 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {}, {}]

Nonterm

Start location: __init
Program variables: arg1 arg2 arg3
   2: f181_0_main_LE -> f168_0_visit_NULL : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, (arg2 > 0 /\ -1+arg3 < 0 /\ arg1p3 > 0), cost: 1
   3: f181_0_main_LE -> f168_0_visit_NULL : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, (-1+arg3 < 0 /\ -2+arg1p4 > 0 /\ -1+arg2 > 0 /\ -1-arg2+arg1p4 <= 0), cost: 1
   7: f181_0_main_LE -> f181_0_main_LE : arg1'=-1+arg1, arg2'=arg2p2, arg3'=arg1, (arg3 > 0 /\ arg2 > 0 /\ -2+arg2p2-arg2 <= 0 /\ -2+arg2p2 > 0), cost: 1
   4: f168_0_visit_NULL -> f168_0_visit_NULL : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, (1+arg1p5 > 0 /\ arg1 > 0), cost: 1
   9: f168_0_visit_NULL -> LoAT_sink : (-arg1p5+arg1 <= 0 /\ 1+arg1p5 > 0 /\ arg1 > 0), cost: NONTERM
   8: __init -> f181_0_main_LE : arg1'=-1+arg2p6, arg2'=arg2p1, arg3'=arg2p6, (1+arg2p6 > 0 /\ -1+arg2p1 > 0), cost: 1

	Certificate of Non-Termination

	Original rule:
	f168_0_visit_NULL -> f168_0_visit_NULL : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, (1+arg1p5 > 0 /\ arg1 > 0), cost: 1
	New rule:
	f168_0_visit_NULL -> LoAT_sink : (-arg1p5+arg1 <= 0 /\ 1+arg1p5 > 0 /\ arg1 > 0), cost: NONTERM

		1+arg1p5 > 0 [0]: monotonic increase yields 1+arg1p5 > 0
		
		arg1 > 0 [0]: eventual decrease yields (arg1p5 > 0 /\ arg1 > 0)
		
		arg1 > 0 [1]: eventual increase yields (-arg1p5+arg1 <= 0 /\ arg1 > 0)
		
		Replacement map: {1+arg1p5 > 0 -> 1+arg1p5 > 0, arg1 > 0 -> (-arg1p5+arg1 <= 0 /\ arg1 > 0)}

Step with 9

	Trace

	8[(1+arg2p6 > 0 /\ -1+arg2p1 > 0)], 2[(arg2 > 0 /\ -1+arg3 < 0 /\ arg1p3 > 0)], 9[(-arg1p5+arg1 <= 0 /\ 1+arg1p5 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {}, {9[T]}]

Refute

	Counterexample

	[ arg1=-1 arg2=2 arg3=0 ] 8 [ arg1=1 arg2=0 arg3=0 ] 2 [ arg1=arg1 arg2=arg2 arg3=arg3 ] 9
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
