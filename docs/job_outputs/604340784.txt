YES

Solver Timeout: 4
Global Timeout: 300
Maximum number of concurrent processes: 900
*******************************************************************************************
*********************** UNPROCESSED TRANSITION SYSTEMS PER FUNCTION ***********************
*******************************************************************************************


List of LLVMGraphs + assumeNodes + staticAssertNodes [1] :

+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++
+                                                                  +
Init Location: 0
Transitions:
<l0, l1, true, seq{main__func_return_ -> 0, main_x -> Â¿functionCall(__VERIFIER_nondet_int), main_y -> Â¿functionCall(__VERIFIER_nondet_int), main_z -> 0, main_i -> main_x}>
<l1, l12, not((main_y > 0))>
<l1, l2, (main_y > 0)>
<l2, l3, (main_x > 0)>
<l2, l12, not((main_x > 0))>
<l3, l4, true>
<l4, l7, not((main_i > 0))>
<l4, l5, (main_i > 0)>
<l5, l6, true, seq{main_i -> (main_i - 1), main_z -> (main_z + 1)}>
<l6, l4, true>
<l7, l8, true>
<l8, l11, not((main_i < main_y))>
<l8, l9, (main_i < main_y)>
<l9, l10, true, seq{main_i -> (main_i + 1), main_z -> (main_z - 1)}>
<l10, l8, true>
<l11, l12, true>
<l12, l13, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:

Accepting locations:

Asserts:

+ Assume Nodes [0]: ++++++++++++++++++++++++++++++++++++++++++++++++
       
+ Static Assert Nodes [0]: +++++++++++++++++++++++++++++++++++++++++
       
+ After preprocess (paralelization): ++++++++++++++++++++++++++++++

Init Location: 0
Transitions:
<l0, l14, true, seq{main__func_return_ -> 0}>
<l14, l15, true, seq{varCall_1 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l15, l16, true, seq{main_x -> varCall_1}>
<l16, l17, true, seq{varCall_2 -> Â¿functionCall(__VERIFIER_nondet_int)}>
<l17, l1, true, seq{main_y -> varCall_2, main_z -> 0, main_i -> main_x}>
<l1, l2, (main_y > 0)>
<l1, l12, not((main_y > 0))>
<l2, l3, (main_x > 0)>
<l2, l12, not((main_x > 0))>
<l3, l4, true>
<l4, l5, (main_i > 0)>
<l4, l7, not((main_i > 0))>
<l5, l6, true, seq{main_i -> (main_i - 1), main_z -> (main_z + 1)}>
<l6, l4, true>
<l7, l8, true>
<l8, l9, (main_i < main_y)>
<l8, l11, not((main_i < main_y))>
<l9, l10, true, seq{main_i -> (main_i + 1), main_z -> (main_z - 1)}>
<l10, l8, true>
<l11, l12, true>
<l12, l13, true, seq{main__func_return_ -> 0}>

Fresh variables:

Undef variables:

Abstraction variables:

Exit nodes:
13, 
Accepting locations:

Asserts:

+                                                                  +
+++++++++++++++++++++++++++++++ main +++++++++++++++++++++++++++++++


Function Return and Parameters Information [2 functions]:
    function name: __VERIFIER_nondet_int [1 return + 0 parameters]        demangled: __VERIFIER_nondet_int
        __VERIFIER_nondet_int__func_return_      [function result] : int
    function name: main [1 return + 0 parameters]        demangled: main
        main__func_return_      [function result] : int


AST Ident Scanner Information [6 idents]:
__VERIFIER_nondet_int | function | [integer, ()] | <line: 12, col: 1> | <line: 16, col: 6> <line: 17, col: 6>
main | function | [integer, ()] | <line: 14, col: 1>
x | local variable | integer | <line: 15, col: 5> | <line: 16, col: 2> <line: 19, col: 6> <line: 20, col: 15>
y | local variable | integer | <line: 15, col: 5> | <line: 17, col: 2> <line: 20, col: 6> <line: 25, col: 17>
z | local variable | integer | <line: 15, col: 5> | <line: 18, col: 2> <line: 23, col: 7> <line: 23, col: 11> <line: 27, col: 7> <line: 27, col: 11>
i | local variable | integer | <line: 15, col: 5> | <line: 19, col: 2> <line: 21, col: 13> <line: 22, col: 7> <line: 22, col: 11> <line: 25, col: 13> <line: 26, col: 7> <line: 26, col: 11>

Main function: main
Preprocessed LLVMGraph
Init Location: 0
Transitions:
<l0, l4, (main_y = undef4) /\ (main_z = 0) /\ (main_i = undef3) /\ (undef4 > 0) /\ (undef3 > 0)>
<l0, l13, (main_y = undef4) /\ (main_z = 0) /\ (main_i = undef3) /\ (undef4 > 0) /\ not((undef3 > 0))>
<l0, l13, (main_y = undef4) /\ (main_z = 0) /\ (main_i = undef3) /\ not((undef4 > 0))>
<l4, l4, (main_i > 0), par{main_z -> (main_z + 1), main_i -> (main_i - 1)}>
<l4, l8, not((main_i > 0))>
<l8, l8, (main_i < main_y), par{main_z -> (main_z - 1), main_i -> (main_i + 1)}>
<l8, l13, not((main_i < main_y))>

Fresh variables:
undef3, undef4, 

Undef variables:
undef3, undef4, 

Abstraction variables:

Exit nodes:
13, 
Accepting locations:

Asserts:

*************************************************************
*******************************************************************************************
***********************       WORKING TRANSITION SYSTEM (DAG)       ***********************
*******************************************************************************************

Init Location: 0
Graph 0:
Transitions:
Variables:

Graph 1:
Transitions:
<l4, l4, 1 <= main_i, {main_z -> 1 + main_z, main_i -> -1 + main_i, rest remain the same}>
Variables:
main_z, main_i

Graph 2:
Transitions:
<l8, l8, 1 + main_i <= main_y, {main_z -> -1 + main_z, main_i -> 1 + main_i, rest remain the same}>
Variables:
main_y, main_z, main_i

Graph 3:
Transitions:
Variables:

Precedence: 
Graph 0

Graph 1
<l0, l4, 1 <= undef3 /\ 1 <= undef4 /\ main_y = undef4 /\ main_z = 0 /\ main_i = undef3, {all remain the same}>

Graph 2
<l4, l8, main_i <= 0, {all remain the same}>

Graph 3
<l0, l13, undef3 <= 0 /\ 1 <= undef4 /\ main_y = undef4 /\ main_z = 0 /\ main_i = undef3, {all remain the same}>
<l0, l13, undef4 <= 0 /\ main_y = undef4 /\ main_z = 0 /\ main_i = undef3, {all remain the same}>
<l8, l13, main_y <= main_i, {all remain the same}>

Map Locations to Subgraph:
( 0 , 0 )
( 4 , 1 )
( 8 , 2 )
( 13 , 3 )

*******************************************************************************************
********************************    CHECKING ASSERTIONS    ********************************
*******************************************************************************************

Proving termination of subgraph 0
Proving termination of subgraph 1
Checking unfeasibility...
Time used: 0.001415

Checking conditional termination of SCC {l4}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000428s
[33mRanking function: [36m-1 + main_i[0m
New Graphs: 
Proving termination of subgraph 2
Checking unfeasibility...
Time used: 0.001377

Checking conditional termination of SCC {l8}...

LOG: CALL solveLinear

LOG: RETURN solveLinear - Elapsed time: 0.000491s
[33mRanking function: [36m-1 + main_y - main_i[0m
New Graphs: 
Proving termination of subgraph 3
Analyzing SCC {l13}...
No cycles found.

[32mProgram Terminates[0m
