NO

Initial ITS

Start location: [1]
Program variables: i j
   0: [1] -> [2] : i'=0, T, cost: 1
   1: [2] -> [3] : -100+i < 0, cost: 1
   9: [2] -> [9] : -100+i >= 0, cost: 1
   2: [3] -> [4] : j'=0, T, cost: 1
   3: [4] -> [5] : -1+j < 0, cost: 1
   6: [4] -> [7] : -1+j >= 0, cost: 1
   4: [5] -> [6] : j'=1+j, T, cost: 1
   5: [6] -> [4] : T, cost: 1
   7: [7] -> [8] : i'=i, T, cost: 1
   8: [8] -> [2] : T, cost: 1

Chained Linear Paths

Start location: [1]
Program variables: i j
   0: [1] -> [2] : i'=0, T, cost: 1
   9: [2] -> [9] : -100+i >= 0, cost: 1
  10: [2] -> [4] : j'=0, -100+i < 0, cost: 1
  13: [4] -> [4] : j'=1+j, -1+j < 0, cost: 1
  14: [4] -> [2] : i'=i, -1+j >= 0, cost: 1

	Eliminating location [3] by chaining:

	Applied chaining

	First rule:
	[2] -> [3] : -100+i < 0, cost: 1
	Second rule:
	[3] -> [4] : j'=0, T, cost: 1
	New rule:
	[2] -> [4] : j'=0, -100+i < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 1 2
	
	Eliminating location [5] by chaining:

	Applied chaining

	First rule:
	[4] -> [5] : -1+j < 0, cost: 1
	Second rule:
	[5] -> [6] : j'=1+j, T, cost: 1
	New rule:
	[4] -> [6] : j'=1+j, -1+j < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 3 4
	
	Eliminating location [7] by chaining:

	Applied chaining

	First rule:
	[4] -> [7] : -1+j >= 0, cost: 1
	Second rule:
	[7] -> [8] : i'=i, T, cost: 1
	New rule:
	[4] -> [8] : i'=i, -1+j >= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 6 7
	
	Eliminating location [6] by chaining:

	Applied chaining

	First rule:
	[4] -> [6] : j'=1+j, -1+j < 0, cost: 1
	Second rule:
	[6] -> [4] : T, cost: 1
	New rule:
	[4] -> [4] : j'=1+j, -1+j < 0, cost: 1
	
	Applied deletion

	Removed the following rules: 5 11
	
	Eliminating location [8] by chaining:

	Applied chaining

	First rule:
	[4] -> [8] : i'=i, -1+j >= 0, cost: 1
	Second rule:
	[8] -> [2] : T, cost: 1
	New rule:
	[4] -> [2] : i'=i, -1+j >= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 8 12

Simplified Transitions

Start location: [1]
Program variables: i j
   0: [1] -> [2] : i'=0, T, cost: 1
   9: [2] -> [9] : -100+i >= 0, cost: 1
  10: [2] -> [4] : j'=0, -100+i < 0, cost: 1
  13: [4] -> [4] : j'=1+j, -1+j < 0, cost: 1
  15: [4] -> [2] : -1+j >= 0, cost: 1

	Removed Trivial Updates

	Original rule:
	[4] -> [2] : i'=i, -1+j >= 0, cost: 1
	New rule:
	[4] -> [2] : -1+j >= 0, cost: 1

Step with 0

	Trace

	0[T]
	
	Blocked

	[{}, {}]

Step with 10

	Trace

	0[T], 10[(-100+i < 0)]
	
	Blocked

	[{}, {9[T]}, {}]

Step with 13

	Trace

	0[T], 10[(-100+i < 0)], 13[(-1+j < 0)]
	
	Blocked

	[{}, {9[T]}, {}, {}]

Accelerate

Start location: [1]
Program variables: i j
   0: [1] -> [2] : i'=0, T, cost: 1
   9: [2] -> [9] : -100+i >= 0, cost: 1
  10: [2] -> [4] : j'=0, -100+i < 0, cost: 1
  13: [4] -> [4] : j'=1+j, -1+j < 0, cost: 1
  15: [4] -> [2] : -1+j >= 0, cost: 1
  16: [4] -> [4] : j'=n+j, (-1+n >= 0 /\ 2-n-j > 0), cost: 1

	Loop Acceleration

	Original rule:
	[4] -> [4] : j'=1+j, (-1+j < 0), cost: 1
	New rule:
	[4] -> [4] : j'=n+j, (-1+n >= 0 /\ 2-n-j > 0), cost: 1

		1-j > 0 [0]: montonic decrease yields 2-n-j > 0
		
		1-j > 0 [1]: eventual increase yields (1 <= 0 /\ 1-j > 0)
		
		Replacement map: {1-j > 0 -> 2-n-j > 0}

	Trace

	0[T], 10[(-100+i < 0)], 16[(-1+n >= 0 /\ 2-n-j > 0)]
	
	Blocked

	[{}, {9[T]}, {}, {13[T], 16[T]}]

Step with 15

	Trace

	0[T], 10[(-100+i < 0)], 16[(-1+n >= 0 /\ 2-n-j > 0)], 15[(-1+j >= 0)]
	
	Blocked

	[{}, {9[T]}, {}, {13[T], 16[T]}, {}]

Nonterm

Start location: [1]
Program variables: i j
   0: [1] -> [2] : i'=0, T, cost: 1
   9: [2] -> [9] : -100+i >= 0, cost: 1
  10: [2] -> [4] : j'=0, -100+i < 0, cost: 1
  17: [2] -> LoAT_sink : (100-i > 0 /\ -1+n2 >= 0), cost: NONTERM
  13: [4] -> [4] : j'=1+j, -1+j < 0, cost: 1
  15: [4] -> [2] : -1+j >= 0, cost: 1
  16: [4] -> [4] : j'=n+j, (-1+n >= 0 /\ 2-n-j > 0), cost: 1

	Certificate of Non-Termination

	Original rule:
	[2] -> [2] : j'=1, -100+i < 0, cost: 1
	New rule:
	[2] -> LoAT_sink : (100-i > 0 /\ -1+n2 >= 0), cost: NONTERM

		100-i > 0 [0]: monotonic increase yields 100-i > 0
		
		Replacement map: {100-i > 0 -> 100-i > 0}

Step with 17

	Trace

	0[T], 17[(100-i > 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {9[T]}, {17[T]}]

Refute

	Counterexample

	[ i=0 j=0 ] 0 [ i=i j=0 ] 17
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
