NO

Initial ITS

Start location: [1]
Program variables: i
   0: [1] -> [2] : i'=3, T, cost: 1
   1: [2] -> [3] : -3+i >= 0, cost: 1
  14: [2] -> [13] : -3+i < 0, cost: 1
   2: [3] -> [5] : -5+i > 0, cost: 1
   5: [3] -> [7] : -5+i <= 0, cost: 1
  13: [4] -> [2] : T, cost: 1
   3: [5] -> [6] : i'=3+i, T, cost: 1
   4: [6] -> [4] : T, cost: 1
   6: [7] -> [9] : -10+i > 0, cost: 1
   9: [7] -> [11] : -10+i <= 0, cost: 1
  12: [8] -> [4] : T, cost: 1
   7: [9] -> [10] : i'=-2+i, T, cost: 1
   8: [10] -> [8] : T, cost: 1
  10: [11] -> [12] : i'=1+i, T, cost: 1
  11: [12] -> [8] : T, cost: 1

Chained Linear Paths

Start location: [1]
Program variables: i
   0: [1] -> [2] : i'=3, T, cost: 1
   1: [2] -> [3] : -3+i >= 0, cost: 1
  14: [2] -> [13] : -3+i < 0, cost: 1
   5: [3] -> [7] : -5+i <= 0, cost: 1
  16: [3] -> [4] : i'=3+i, -5+i > 0, cost: 1
  13: [4] -> [2] : T, cost: 1
  19: [7] -> [8] : i'=-2+i, -10+i > 0, cost: 1
  20: [7] -> [8] : i'=1+i, -10+i <= 0, cost: 1
  12: [8] -> [4] : T, cost: 1

	Eliminating location [5] by chaining:

	Applied chaining

	First rule:
	[3] -> [5] : -5+i > 0, cost: 1
	Second rule:
	[5] -> [6] : i'=3+i, T, cost: 1
	New rule:
	[3] -> [6] : i'=3+i, -5+i > 0, cost: 1
	
	Applied deletion

	Removed the following rules: 2 3
	
	Eliminating location [6] by chaining:

	Applied chaining

	First rule:
	[3] -> [6] : i'=3+i, -5+i > 0, cost: 1
	Second rule:
	[6] -> [4] : T, cost: 1
	New rule:
	[3] -> [4] : i'=3+i, -5+i > 0, cost: 1
	
	Applied deletion

	Removed the following rules: 4 15
	
	Eliminating location [9] by chaining:

	Applied chaining

	First rule:
	[7] -> [9] : -10+i > 0, cost: 1
	Second rule:
	[9] -> [10] : i'=-2+i, T, cost: 1
	New rule:
	[7] -> [10] : i'=-2+i, -10+i > 0, cost: 1
	
	Applied deletion

	Removed the following rules: 6 7
	
	Eliminating location [11] by chaining:

	Applied chaining

	First rule:
	[7] -> [11] : -10+i <= 0, cost: 1
	Second rule:
	[11] -> [12] : i'=1+i, T, cost: 1
	New rule:
	[7] -> [12] : i'=1+i, -10+i <= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 9 10
	
	Eliminating location [10] by chaining:

	Applied chaining

	First rule:
	[7] -> [10] : i'=-2+i, -10+i > 0, cost: 1
	Second rule:
	[10] -> [8] : T, cost: 1
	New rule:
	[7] -> [8] : i'=-2+i, -10+i > 0, cost: 1
	
	Applied deletion

	Removed the following rules: 8 17
	
	Eliminating location [12] by chaining:

	Applied chaining

	First rule:
	[7] -> [12] : i'=1+i, -10+i <= 0, cost: 1
	Second rule:
	[12] -> [8] : T, cost: 1
	New rule:
	[7] -> [8] : i'=1+i, -10+i <= 0, cost: 1
	
	Applied deletion

	Removed the following rules: 11 18

Step with 0

	Trace

	0[T]
	
	Blocked

	[{}, {}]

Step with 1

	Trace

	0[T], 1[(-3+i >= 0)]
	
	Blocked

	[{}, {14[T]}, {}]

Step with 5

	Trace

	0[T], 1[(-3+i >= 0)], 5[(-5+i <= 0)]
	
	Blocked

	[{}, {14[T]}, {}, {}]

Step with 20

	Trace

	0[T], 1[(-3+i >= 0)], 5[(-5+i <= 0)], 20[(-10+i <= 0)]
	
	Blocked

	[{}, {14[T]}, {}, {19[T]}, {}]

Step with 12

	Trace

	0[T], 1[(-3+i >= 0)], 5[(-5+i <= 0)], 20[(-10+i <= 0)], 12[T]
	
	Blocked

	[{}, {14[T]}, {}, {19[T]}, {}, {}]

Step with 13

	Trace

	0[T], 1[(-3+i >= 0)], 5[(-5+i <= 0)], 20[(-10+i <= 0)], 12[T], 13[T]
	
	Blocked

	[{}, {14[T]}, {}, {19[T]}, {}, {}, {}]

Accelerate

Start location: [1]
Program variables: i
   0: [1] -> [2] : i'=3, T, cost: 1
   1: [2] -> [3] : -3+i >= 0, cost: 1
  14: [2] -> [13] : -3+i < 0, cost: 1
  21: [2] -> [2] : i'=i+n, (-1+n >= 0 /\ -3+i >= 0 /\ 6-i-n >= 0 /\ 10-i >= 0), cost: 1
   5: [3] -> [7] : -5+i <= 0, cost: 1
  16: [3] -> [4] : i'=3+i, -5+i > 0, cost: 1
  13: [4] -> [2] : T, cost: 1
  19: [7] -> [8] : i'=-2+i, -10+i > 0, cost: 1
  20: [7] -> [8] : i'=1+i, -10+i <= 0, cost: 1
  12: [8] -> [4] : T, cost: 1

	Loop Acceleration

	Original rule:
	[2] -> [2] : i'=1+i, (-10+i <= 0 /\ -3+i >= 0 /\ -5+i <= 0), cost: 1
	New rule:
	[2] -> [2] : i'=i+n, (-1+n >= 0 /\ -3+i >= 0 /\ 6-i-n >= 0 /\ 10-i >= 0), cost: 1

		-3+i >= 0 [0]: monotonic increase yields -3+i >= 0
		
		10-i >= 0 [0]: monotonic increase yields 10-i >= 0, dependencies: 5-i >= 0
		
		10-i >= 0 [1]: montonic decrease yields 11-i-n >= 0
		
		10-i >= 0 [2]: eventual increase yields (1 <= 0 /\ 10-i >= 0)
		
		5-i >= 0 [0]: montonic decrease yields 6-i-n >= 0
		
		5-i >= 0 [1]: eventual increase yields (1 <= 0 /\ 5-i >= 0)
		
		Replacement map: {-3+i >= 0 -> -3+i >= 0, 10-i >= 0 -> 10-i >= 0, 5-i >= 0 -> 6-i-n >= 0}

	Trace

	0[T], 21[(-1+n >= 0 /\ -3+i >= 0 /\ 6-i-n >= 0 /\ 10-i >= 0)]
	
	Blocked

	[{}, {14[T]}, {21[T]}]

Step with 1

	Trace

	0[T], 21[(-1+n >= 0 /\ -3+i >= 0 /\ 6-i-n >= 0 /\ 10-i >= 0)], 1[(-3+i >= 0)]
	
	Blocked

	[{}, {14[T]}, {14[T], 21[T]}, {}]

Step with 5

	Trace

	0[T], 21[(-1+n >= 0 /\ -3+i >= 0 /\ 6-i-n >= 0 /\ 10-i >= 0)], 1[(-3+i >= 0)], 5[(-5+i <= 0)]
	
	Blocked

	[{}, {14[T]}, {14[T], 21[T]}, {}, {}]

Step with 20

	Trace

	0[T], 21[(-1+n >= 0 /\ -3+i >= 0 /\ 6-i-n >= 0 /\ 10-i >= 0)], 1[(-3+i >= 0)], 5[(-5+i <= 0)], 20[(-10+i <= 0)]
	
	Blocked

	[{}, {14[T]}, {14[T], 21[T]}, {}, {}, {}]

Step with 12

	Trace

	0[T], 21[(-1+n >= 0 /\ -3+i >= 0 /\ 6-i-n >= 0 /\ 10-i >= 0)], 1[(-3+i >= 0)], 5[(-5+i <= 0)], 20[(-10+i <= 0)], 12[T]
	
	Blocked

	[{}, {14[T]}, {14[T], 21[T]}, {}, {}, {}, {}]

Step with 13

	Trace

	0[T], 21[(-1+n >= 0 /\ -3+i >= 0 /\ 6-i-n >= 0 /\ 10-i >= 0)], 1[(-3+i >= 0)], 5[(-5+i <= 0)], 20[(-10+i <= 0)], 12[T], 13[T]
	
	Blocked

	[{}, {14[T]}, {14[T], 21[T]}, {}, {}, {}, {}, {}]

Covered

	Trace

	0[T], 21[(-1+n >= 0 /\ -3+i >= 0 /\ 6-i-n >= 0 /\ 10-i >= 0)], 1[(-3+i >= 0)], 5[(-5+i <= 0)], 20[(-10+i <= 0)], 12[T]
	
	Blocked

	[{}, {14[T]}, {14[T], 21[T]}, {}, {}, {}, {13[T]}]

Backtrack

	Trace

	0[T], 21[(-1+n >= 0 /\ -3+i >= 0 /\ 6-i-n >= 0 /\ 10-i >= 0)], 1[(-3+i >= 0)], 5[(-5+i <= 0)], 20[(-10+i <= 0)]
	
	Blocked

	[{}, {14[T]}, {14[T], 21[T]}, {}, {}, {12[T]}]

Backtrack

	Trace

	0[T], 21[(-1+n >= 0 /\ -3+i >= 0 /\ 6-i-n >= 0 /\ 10-i >= 0)], 1[(-3+i >= 0)], 5[(-5+i <= 0)]
	
	Blocked

	[{}, {14[T]}, {14[T], 21[T]}, {}, {20[T]}]

Backtrack

	Trace

	0[T], 21[(-1+n >= 0 /\ -3+i >= 0 /\ 6-i-n >= 0 /\ 10-i >= 0)], 1[(-3+i >= 0)]
	
	Blocked

	[{}, {14[T]}, {14[T], 21[T]}, {5[T]}]

Step with 16

	Trace

	0[T], 21[(-1+n >= 0 /\ -3+i >= 0 /\ 6-i-n >= 0 /\ 10-i >= 0)], 1[(-3+i >= 0)], 16[(-5+i > 0)]
	
	Blocked

	[{}, {14[T]}, {14[T], 21[T]}, {5[T]}, {}]

Step with 13

	Trace

	0[T], 21[(-1+n >= 0 /\ -3+i >= 0 /\ 6-i-n >= 0 /\ 10-i >= 0)], 1[(-3+i >= 0)], 16[(-5+i > 0)], 13[T]
	
	Blocked

	[{}, {14[T]}, {14[T], 21[T]}, {5[T]}, {}, {}]

Nonterm

Start location: [1]
Program variables: i
   0: [1] -> [2] : i'=3, T, cost: 1
   1: [2] -> [3] : -3+i >= 0, cost: 1
  14: [2] -> [13] : -3+i < 0, cost: 1
  21: [2] -> [2] : i'=i+n, (-1+n >= 0 /\ -3+i >= 0 /\ 6-i-n >= 0 /\ 10-i >= 0), cost: 1
  22: [2] -> LoAT_sink : (-3+i >= 0 /\ -1+n2 >= 0 /\ -5+i > 0), cost: NONTERM
  23: [2] -> [2] : i'=i+3*n2, (-3+i >= 0 /\ -1+n2 >= 0 /\ -5+i > 0), cost: 1
   5: [3] -> [7] : -5+i <= 0, cost: 1
  16: [3] -> [4] : i'=3+i, -5+i > 0, cost: 1
  13: [4] -> [2] : T, cost: 1
  19: [7] -> [8] : i'=-2+i, -10+i > 0, cost: 1
  20: [7] -> [8] : i'=1+i, -10+i <= 0, cost: 1
  12: [8] -> [4] : T, cost: 1

	Certificate of Non-Termination

	Original rule:
	[2] -> [2] : i'=3+i, (-3+i >= 0 /\ -5+i > 0), cost: 1
	New rule:
	[2] -> LoAT_sink : (-3+i >= 0 /\ -1+n2 >= 0 /\ -5+i > 0), cost: NONTERM

		-3+i >= 0 [0]: monotonic increase yields -3+i >= 0
		
		-5+i > 0 [0]: monotonic increase yields -5+i > 0, dependencies: -3+i >= 0
		
		Replacement map: {-3+i >= 0 -> -3+i >= 0, -5+i > 0 -> -5+i > 0}

	Loop Acceleration

	Original rule:
	[2] -> [2] : i'=3+i, (-3+i >= 0 /\ -5+i > 0), cost: 1
	New rule:
	[2] -> [2] : i'=i+3*n2, (-3+i >= 0 /\ -1+n2 >= 0 /\ -5+i > 0), cost: 1

		-3+i >= 0 [0]: monotonic increase yields -3+i >= 0
		
		-5+i > 0 [0]: monotonic increase yields -5+i > 0, dependencies: -3+i >= 0
		
		Replacement map: {-3+i >= 0 -> -3+i >= 0, -5+i > 0 -> -5+i > 0}

Step with 22

	Trace

	0[T], 21[(-1+n >= 0 /\ -3+i >= 0 /\ 6-i-n >= 0 /\ 10-i >= 0)], 22[(-3+i >= 0 /\ -1+n2 >= 0 /\ -5+i > 0)]
	
	Blocked

	[{}, {14[T]}, {14[T], 21[T]}, {22[T]}]

Refute

	Counterexample

	[ i=3 ] 0 [ i=6 ] 21 [ i=i ] 22
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
