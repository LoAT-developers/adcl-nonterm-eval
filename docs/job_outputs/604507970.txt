unknown

Initial ITS

Start location: __init
Program variables: arg1 arg2 arg3
   0: f1_0_main_Load -> f306_0_main_LE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (1+arg2 > 0 /\ 1+arg1p1 > 0 /\ 1+arg2p1 > 0 /\ arg2p1-arg3p1+arg1p1 == 0 /\ arg1 > 0), cost: 1
   1: f306_0_main_LE -> f306_0_main_LE : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, (-1-arg3p2+arg1+arg2 == 0 /\ arg3 > 0 /\ -1+arg1-arg1p2 == 0 /\ -arg2p2+arg2 == 0 /\ -arg1+arg2 < 0), cost: 1
   2: f306_0_main_LE -> f306_0_main_LE : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, (arg3 > 0 /\ -1-arg3p3+arg1+arg2 == 0 /\ -1-arg2p3+arg2 == 0 /\ arg1-arg1p3 == 0 /\ -arg1+arg2 > 0), cost: 1
   3: f306_0_main_LE -> f306_0_main_LE : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, (-arg2p4+arg1 == 0 /\ arg3 > 0 /\ -1+arg1-arg1p4 == 0 /\ -1-arg3p4+2*arg1 == 0 /\ arg1-arg2 == 0), cost: 1
   4: __init -> f1_0_main_Load : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2 arg3
   1: f306_0_main_LE -> f306_0_main_LE : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, (-1-arg3p2+arg1+arg2 == 0 /\ arg3 > 0 /\ -1+arg1-arg1p2 == 0 /\ -arg2p2+arg2 == 0 /\ -arg1+arg2 < 0), cost: 1
   2: f306_0_main_LE -> f306_0_main_LE : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, (arg3 > 0 /\ -1-arg3p3+arg1+arg2 == 0 /\ -1-arg2p3+arg2 == 0 /\ arg1-arg1p3 == 0 /\ -arg1+arg2 > 0), cost: 1
   3: f306_0_main_LE -> f306_0_main_LE : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, (-arg2p4+arg1 == 0 /\ arg3 > 0 /\ -1+arg1-arg1p4 == 0 /\ -1-arg3p4+2*arg1 == 0 /\ arg1-arg2 == 0), cost: 1
   5: __init -> f306_0_main_LE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (1+arg2p5 > 0 /\ 1+arg1p1 > 0 /\ 1+arg2p1 > 0 /\ arg2p1-arg3p1+arg1p1 == 0 /\ arg1p5 > 0), cost: 1

	Eliminating location f1_0_main_Load by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_Load : arg1'=arg1p5, arg2'=arg2p5, arg3'=arg3p5, T, cost: 1
	Second rule:
	f1_0_main_Load -> f306_0_main_LE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (1+arg2 > 0 /\ 1+arg1p1 > 0 /\ 1+arg2p1 > 0 /\ arg2p1-arg3p1+arg1p1 == 0 /\ arg1 > 0), cost: 1
	New rule:
	__init -> f306_0_main_LE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (1+arg2p5 > 0 /\ 1+arg1p1 > 0 /\ 1+arg2p1 > 0 /\ arg2p1-arg3p1+arg1p1 == 0 /\ arg1p5 > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 4

Simplified Transitions

Start location: __init
Program variables: arg1 arg2 arg3
   6: f306_0_main_LE -> f306_0_main_LE : arg1'=-1+arg1, arg3'=-1+arg1+arg2, (arg3 > 0 /\ -arg1+arg2 < 0), cost: 1
   7: f306_0_main_LE -> f306_0_main_LE : arg2'=-1+arg2, arg3'=-1+arg1+arg2, (arg3 > 0 /\ -arg1+arg2 > 0), cost: 1
   8: f306_0_main_LE -> f306_0_main_LE : arg1'=-1+arg1, arg2'=arg1, arg3'=-1+2*arg1, (arg3 > 0 /\ arg1-arg2 == 0), cost: 1
   9: __init -> f306_0_main_LE : arg1'=-arg2p1+arg3p1, arg2'=arg2p1, arg3'=arg3p1, (1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0), cost: 1

	Propagated Equalities

	Original rule:
	f306_0_main_LE -> f306_0_main_LE : arg1'=arg1p2, arg2'=arg2p2, arg3'=arg3p2, (-1-arg3p2+arg1+arg2 == 0 /\ arg3 > 0 /\ -1+arg1-arg1p2 == 0 /\ -arg2p2+arg2 == 0 /\ -arg1+arg2 < 0), cost: 1
	New rule:
	f306_0_main_LE -> f306_0_main_LE : arg1'=-1+arg1, arg2'=arg2, arg3'=-1+arg1+arg2, (0 == 0 /\ arg3 > 0 /\ -arg1+arg2 < 0), cost: 1
	
		propagated equality arg3p2 = -1+arg1+arg2
		
		propagated equality arg1p2 = -1+arg1
		
		propagated equality arg2p2 = arg2
		
	Simplified Guard

	Original rule:
	f306_0_main_LE -> f306_0_main_LE : arg1'=-1+arg1, arg2'=arg2, arg3'=-1+arg1+arg2, (0 == 0 /\ arg3 > 0 /\ -arg1+arg2 < 0), cost: 1
	New rule:
	f306_0_main_LE -> f306_0_main_LE : arg1'=-1+arg1, arg2'=arg2, arg3'=-1+arg1+arg2, (arg3 > 0 /\ -arg1+arg2 < 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f306_0_main_LE -> f306_0_main_LE : arg1'=-1+arg1, arg2'=arg2, arg3'=-1+arg1+arg2, (arg3 > 0 /\ -arg1+arg2 < 0), cost: 1
	New rule:
	f306_0_main_LE -> f306_0_main_LE : arg1'=-1+arg1, arg3'=-1+arg1+arg2, (arg3 > 0 /\ -arg1+arg2 < 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f306_0_main_LE -> f306_0_main_LE : arg1'=arg1p3, arg2'=arg2p3, arg3'=arg3p3, (arg3 > 0 /\ -1-arg3p3+arg1+arg2 == 0 /\ -1-arg2p3+arg2 == 0 /\ arg1-arg1p3 == 0 /\ -arg1+arg2 > 0), cost: 1
	New rule:
	f306_0_main_LE -> f306_0_main_LE : arg1'=arg1, arg2'=-1+arg2, arg3'=-1+arg1+arg2, (0 == 0 /\ arg3 > 0 /\ -arg1+arg2 > 0), cost: 1
	
		propagated equality arg3p3 = -1+arg1+arg2
		
		propagated equality arg2p3 = -1+arg2
		
		propagated equality arg1p3 = arg1
		
	Simplified Guard

	Original rule:
	f306_0_main_LE -> f306_0_main_LE : arg1'=arg1, arg2'=-1+arg2, arg3'=-1+arg1+arg2, (0 == 0 /\ arg3 > 0 /\ -arg1+arg2 > 0), cost: 1
	New rule:
	f306_0_main_LE -> f306_0_main_LE : arg1'=arg1, arg2'=-1+arg2, arg3'=-1+arg1+arg2, (arg3 > 0 /\ -arg1+arg2 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f306_0_main_LE -> f306_0_main_LE : arg1'=arg1, arg2'=-1+arg2, arg3'=-1+arg1+arg2, (arg3 > 0 /\ -arg1+arg2 > 0), cost: 1
	New rule:
	f306_0_main_LE -> f306_0_main_LE : arg2'=-1+arg2, arg3'=-1+arg1+arg2, (arg3 > 0 /\ -arg1+arg2 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f306_0_main_LE -> f306_0_main_LE : arg1'=arg1p4, arg2'=arg2p4, arg3'=arg3p4, (-arg2p4+arg1 == 0 /\ arg3 > 0 /\ -1+arg1-arg1p4 == 0 /\ -1-arg3p4+2*arg1 == 0 /\ arg1-arg2 == 0), cost: 1
	New rule:
	f306_0_main_LE -> f306_0_main_LE : arg1'=-1+arg1, arg2'=arg1, arg3'=-1+2*arg1, (0 == 0 /\ arg3 > 0 /\ arg1-arg2 == 0), cost: 1
	
		propagated equality arg2p4 = arg1
		
		propagated equality arg1p4 = -1+arg1
		
		propagated equality arg3p4 = -1+2*arg1
		
	Simplified Guard

	Original rule:
	f306_0_main_LE -> f306_0_main_LE : arg1'=-1+arg1, arg2'=arg1, arg3'=-1+2*arg1, (0 == 0 /\ arg3 > 0 /\ arg1-arg2 == 0), cost: 1
	New rule:
	f306_0_main_LE -> f306_0_main_LE : arg1'=-1+arg1, arg2'=arg1, arg3'=-1+2*arg1, (arg3 > 0 /\ arg1-arg2 == 0), cost: 1
	
	Propagated Equalities

	Original rule:
	__init -> f306_0_main_LE : arg1'=arg1p1, arg2'=arg2p1, arg3'=arg3p1, (1+arg2p5 > 0 /\ 1+arg1p1 > 0 /\ 1+arg2p1 > 0 /\ arg2p1-arg3p1+arg1p1 == 0 /\ arg1p5 > 0), cost: 1
	New rule:
	__init -> f306_0_main_LE : arg1'=-arg2p1+arg3p1, arg2'=arg2p1, arg3'=arg3p1, (0 == 0 /\ 1+arg2p5 > 0 /\ 1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0 /\ arg1p5 > 0), cost: 1
	
		propagated equality arg1p1 = -arg2p1+arg3p1
		
	Simplified Guard

	Original rule:
	__init -> f306_0_main_LE : arg1'=-arg2p1+arg3p1, arg2'=arg2p1, arg3'=arg3p1, (0 == 0 /\ 1+arg2p5 > 0 /\ 1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0 /\ arg1p5 > 0), cost: 1
	New rule:
	__init -> f306_0_main_LE : arg1'=-arg2p1+arg3p1, arg2'=arg2p1, arg3'=arg3p1, (1+arg2p5 > 0 /\ 1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0 /\ arg1p5 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	__init -> f306_0_main_LE : arg1'=-arg2p1+arg3p1, arg2'=arg2p1, arg3'=arg3p1, (1+arg2p5 > 0 /\ 1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0 /\ arg1p5 > 0), cost: 1
	New rule:
	__init -> f306_0_main_LE : arg1'=-arg2p1+arg3p1, arg2'=arg2p1, arg3'=arg3p1, (1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0), cost: 1

Step with 9

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)]
	
	Blocked

	[{}, {}]

Step with 6

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 6[(arg3 > 0 /\ -arg1+arg2 < 0)]
	
	Blocked

	[{}, {}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2 arg3
   6: f306_0_main_LE -> f306_0_main_LE : arg1'=-1+arg1, arg3'=-1+arg1+arg2, (arg3 > 0 /\ -arg1+arg2 < 0), cost: 1
   7: f306_0_main_LE -> f306_0_main_LE : arg2'=-1+arg2, arg3'=-1+arg1+arg2, (arg3 > 0 /\ -arg1+arg2 > 0), cost: 1
   8: f306_0_main_LE -> f306_0_main_LE : arg1'=-1+arg1, arg2'=arg1, arg3'=-1+2*arg1, (arg3 > 0 /\ arg1-arg2 == 0), cost: 1
  10: f306_0_main_LE -> f306_0_main_LE : arg1'=-n+arg1, arg3'=-n+arg1+arg2, (-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0), cost: 1
   9: __init -> f306_0_main_LE : arg1'=-arg2p1+arg3p1, arg2'=arg2p1, arg3'=arg3p1, (1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0), cost: 1

	Loop Acceleration

	Original rule:
	f306_0_main_LE -> f306_0_main_LE : arg1'=-1+arg1, arg3'=-1+arg1+arg2, (arg3 > 0 /\ -arg1+arg2 < 0), cost: 1
	New rule:
	f306_0_main_LE -> f306_0_main_LE : arg1'=-n+arg1, arg3'=-n+arg1+arg2, (-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0), cost: 1

		arg3 > 0 [0]: eventual decrease yields (arg3 > 0 /\ 1-n+arg1+arg2 > 0)
		
		arg1-arg2 > 0 [0]: montonic decrease yields 1-n+arg1-arg2 > 0
		
		arg1-arg2 > 0 [1]: eventual increase yields (1 <= 0 /\ arg1-arg2 > 0)
		
		Replacement map: {arg3 > 0 -> (arg3 > 0 /\ 1-n+arg1+arg2 > 0), arg1-arg2 > 0 -> 1-n+arg1-arg2 > 0}

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 10[(-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0)]
	
	Blocked

	[{}, {}, {6[T], 10[T]}]

Step with 8

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 10[(-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)]
	
	Blocked

	[{}, {}, {6[T], 7[T], 10[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Acceleration Failed

marked recursive suffix as redundant

Step with 7

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 10[(-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)], 7[(arg3 > 0 /\ -arg1+arg2 > 0)]
	
	Blocked

	[{}, {}, {6[T], 7[T], 10[T]}, {6[T], 8[T], 10[T]}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2 arg3
   6: f306_0_main_LE -> f306_0_main_LE : arg1'=-1+arg1, arg3'=-1+arg1+arg2, (arg3 > 0 /\ -arg1+arg2 < 0), cost: 1
   7: f306_0_main_LE -> f306_0_main_LE : arg2'=-1+arg2, arg3'=-1+arg1+arg2, (arg3 > 0 /\ -arg1+arg2 > 0), cost: 1
   8: f306_0_main_LE -> f306_0_main_LE : arg1'=-1+arg1, arg2'=arg1, arg3'=-1+2*arg1, (arg3 > 0 /\ arg1-arg2 == 0), cost: 1
  10: f306_0_main_LE -> f306_0_main_LE : arg1'=-n+arg1, arg3'=-n+arg1+arg2, (-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0), cost: 1
  11: f306_0_main_LE -> f306_0_main_LE : arg2'=-n2+arg2, arg3'=arg1-n2+arg2, (1-arg1-n2+arg2 > 0 /\ 1+arg1-n2+arg2 > 0 /\ arg3 > 0 /\ -1+n2 >= 0), cost: 1
   9: __init -> f306_0_main_LE : arg1'=-arg2p1+arg3p1, arg2'=arg2p1, arg3'=arg3p1, (1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0), cost: 1

	Loop Acceleration

	Original rule:
	f306_0_main_LE -> f306_0_main_LE : arg2'=-1+arg2, arg3'=-1+arg1+arg2, (arg3 > 0 /\ -arg1+arg2 > 0), cost: 1
	New rule:
	f306_0_main_LE -> f306_0_main_LE : arg2'=-n2+arg2, arg3'=arg1-n2+arg2, (1-arg1-n2+arg2 > 0 /\ 1+arg1-n2+arg2 > 0 /\ arg3 > 0 /\ -1+n2 >= 0), cost: 1

		arg3 > 0 [0]: eventual decrease yields (1+arg1-n2+arg2 > 0 /\ arg3 > 0)
		
		-arg1+arg2 > 0 [0]: montonic decrease yields 1-arg1-n2+arg2 > 0
		
		-arg1+arg2 > 0 [1]: eventual increase yields (1 <= 0 /\ -arg1+arg2 > 0)
		
		Replacement map: {arg3 > 0 -> (1+arg1-n2+arg2 > 0 /\ arg3 > 0), -arg1+arg2 > 0 -> 1-arg1-n2+arg2 > 0}

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 10[(-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)], 11[(1-arg1-n2+arg2 > 0 /\ 1+arg1-n2+arg2 > 0 /\ arg3 > 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {}, {6[T], 7[T], 10[T]}, {6[T], 8[T], 10[T]}, {7[T], 11[T]}]

Accelerate

Start location: __init
Program variables: arg1 arg2 arg3
   6: f306_0_main_LE -> f306_0_main_LE : arg1'=-1+arg1, arg3'=-1+arg1+arg2, (arg3 > 0 /\ -arg1+arg2 < 0), cost: 1
   7: f306_0_main_LE -> f306_0_main_LE : arg2'=-1+arg2, arg3'=-1+arg1+arg2, (arg3 > 0 /\ -arg1+arg2 > 0), cost: 1
   8: f306_0_main_LE -> f306_0_main_LE : arg1'=-1+arg1, arg2'=arg1, arg3'=-1+2*arg1, (arg3 > 0 /\ arg1-arg2 == 0), cost: 1
  10: f306_0_main_LE -> f306_0_main_LE : arg1'=-n+arg1, arg3'=-n+arg1+arg2, (-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0), cost: 1
  11: f306_0_main_LE -> f306_0_main_LE : arg2'=-n2+arg2, arg3'=arg1-n2+arg2, (1-arg1-n2+arg2 > 0 /\ 1+arg1-n2+arg2 > 0 /\ arg3 > 0 /\ -1+n2 >= 0), cost: 1
  12: f306_0_main_LE -> f306_0_main_LE : arg1'=arg1-n3, arg2'=arg1-n3, arg3'=2*arg1-2*n3, (1+2*arg1-2*n3 > 0 /\ arg3 > 0 /\ -1+n3 >= 0 /\ 2+2*arg1-2*n3 > 0 /\ -arg1+arg2 >= 0 /\ arg1-arg2 >= 0), cost: 1
   9: __init -> f306_0_main_LE : arg1'=-arg2p1+arg3p1, arg2'=arg2p1, arg3'=arg3p1, (1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0), cost: 1

	Loop Acceleration

	Original rule:
	f306_0_main_LE -> f306_0_main_LE : arg1'=-1+arg1, arg2'=-1+arg1, arg3'=-2+2*arg1, (arg3 > 0 /\ -1+2*arg1 > 0 /\ arg1-arg2 == 0), cost: 1
	New rule:
	f306_0_main_LE -> f306_0_main_LE : arg1'=arg1-n3, arg2'=arg1-n3, arg3'=2*arg1-2*n3, (1+2*arg1-2*n3 > 0 /\ arg3 > 0 /\ -1+n3 >= 0 /\ 2+2*arg1-2*n3 > 0 /\ -arg1+arg2 >= 0 /\ arg1-arg2 >= 0), cost: 1

		arg3 > 0 [0]: eventual decrease yields (arg3 > 0 /\ 2+2*arg1-2*n3 > 0)
		
		-1+2*arg1 > 0 [0]: montonic decrease yields 1+2*arg1-2*n3 > 0
		
		-1+2*arg1 > 0 [1]: eventual increase yields (-1+2*arg1 > 0 /\ 2 <= 0)
		
		-arg1+arg2 >= 0 [0]: monotonic increase yields -arg1+arg2 >= 0
		
		arg1-arg2 >= 0 [0]: monotonic increase yields arg1-arg2 >= 0
		
		Replacement map: {arg3 > 0 -> (arg3 > 0 /\ 2+2*arg1-2*n3 > 0), -1+2*arg1 > 0 -> 1+2*arg1-2*n3 > 0, -arg1+arg2 >= 0 -> -arg1+arg2 >= 0, arg1-arg2 >= 0 -> arg1-arg2 >= 0}

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 10[(-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0)], 12[(1+2*arg1-2*n3 > 0 /\ arg3 > 0 /\ -1+n3 >= 0 /\ 2+2*arg1-2*n3 > 0 /\ -arg1+arg2 >= 0 /\ arg1-arg2 >= 0)]
	
	Blocked

	[{}, {}, {6[T], 7[T], 10[T]}, {12[T]}]

Acceleration Failed

marked recursive suffix as redundant

Step with 8

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 10[(-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0)], 12[(1+2*arg1-2*n3 > 0 /\ arg3 > 0 /\ -1+n3 >= 0 /\ 2+2*arg1-2*n3 > 0 /\ -arg1+arg2 >= 0 /\ arg1-arg2 >= 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)]
	
	Blocked

	[{}, {}, {6[T], 7[T], 10[T]}, {6[T], 7[T], 12[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Acceleration Failed

marked recursive suffix as redundant

Step with 11

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 10[(-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0)], 12[(1+2*arg1-2*n3 > 0 /\ arg3 > 0 /\ -1+n3 >= 0 /\ 2+2*arg1-2*n3 > 0 /\ -arg1+arg2 >= 0 /\ arg1-arg2 >= 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)], 11[(1-arg1-n2+arg2 > 0 /\ 1+arg1-n2+arg2 > 0 /\ arg3 > 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {}, {6[T], 7[T], 10[T]}, {6[T], 7[T], 12[T]}, {8[T], 10[T]}, {11[T]}]

Covered

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 10[(-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0)], 12[(1+2*arg1-2*n3 > 0 /\ arg3 > 0 /\ -1+n3 >= 0 /\ 2+2*arg1-2*n3 > 0 /\ -arg1+arg2 >= 0 /\ arg1-arg2 >= 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)]
	
	Blocked

	[{}, {}, {6[T], 7[T], 10[T]}, {6[T], 7[T], 12[T]}, {8[T], 10[T], 11[T]}]

Step with 7

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 10[(-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0)], 12[(1+2*arg1-2*n3 > 0 /\ arg3 > 0 /\ -1+n3 >= 0 /\ 2+2*arg1-2*n3 > 0 /\ -arg1+arg2 >= 0 /\ arg1-arg2 >= 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)], 7[(arg3 > 0 /\ -arg1+arg2 > 0)]
	
	Blocked

	[{}, {}, {6[T], 7[T], 10[T]}, {6[T], 7[T], 12[T]}, {6[T], 8[T], 10[T], 11[T], 12[T]}, {}]

Covered

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 10[(-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0)], 12[(1+2*arg1-2*n3 > 0 /\ arg3 > 0 /\ -1+n3 >= 0 /\ 2+2*arg1-2*n3 > 0 /\ -arg1+arg2 >= 0 /\ arg1-arg2 >= 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)]
	
	Blocked

	[{}, {}, {6[T], 7[T], 10[T]}, {6[T], 7[T], 12[T]}, {6[T], 7[T], 8[T], 10[T], 11[T], 12[T]}]

Backtrack

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 10[(-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0)], 12[(1+2*arg1-2*n3 > 0 /\ arg3 > 0 /\ -1+n3 >= 0 /\ 2+2*arg1-2*n3 > 0 /\ -arg1+arg2 >= 0 /\ arg1-arg2 >= 0)]
	
	Blocked

	[{}, {}, {6[T], 7[T], 10[T]}, {6[T], 7[T], 8[T], 12[T]}]

Backtrack

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 10[(-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0)]
	
	Blocked

	[{}, {}, {6[T], 7[T], 10[T], 12[T]}]

Step with 8

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 10[(-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)]
	
	Blocked

	[{}, {}, {6[T], 7[T], 10[T], 12[T]}, {}]

Step with 11

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 10[(-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)], 11[(1-arg1-n2+arg2 > 0 /\ 1+arg1-n2+arg2 > 0 /\ arg3 > 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {}, {6[T], 7[T], 10[T], 12[T]}, {8[T], 10[T]}, {11[T]}]

Covered

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 10[(-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)]
	
	Blocked

	[{}, {}, {6[T], 7[T], 10[T], 12[T]}, {8[T], 10[T], 11[T]}]

Step with 7

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 10[(-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)], 7[(arg3 > 0 /\ -arg1+arg2 > 0)]
	
	Blocked

	[{}, {}, {6[T], 7[T], 10[T], 12[T]}, {6[T], 8[T], 10[T], 11[T], 12[T]}, {}]

Covered

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 10[(-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)]
	
	Blocked

	[{}, {}, {6[T], 7[T], 10[T], 12[T]}, {6[T], 7[T], 8[T], 10[T], 11[T], 12[T]}]

Backtrack

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 10[(-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0)]
	
	Blocked

	[{}, {}, {6[T], 7[T], 8[T], 10[T], 12[T]}]

Backtrack

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)]
	
	Blocked

	[{}, {10[T]}]

Step with 7

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 7[(arg3 > 0 /\ -arg1+arg2 > 0)]
	
	Blocked

	[{}, {10[T]}, {}]

Covered

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)]
	
	Blocked

	[{}, {7[T], 10[T]}]

Step with 8

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)]
	
	Blocked

	[{}, {7[T], 10[T]}, {}]

Step with 11

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)], 11[(1-arg1-n2+arg2 > 0 /\ 1+arg1-n2+arg2 > 0 /\ arg3 > 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {7[T], 10[T]}, {8[T], 10[T]}, {11[T]}]

Covered

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)]
	
	Blocked

	[{}, {7[T], 10[T]}, {8[T], 10[T], 11[T]}]

Step with 7

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)], 7[(arg3 > 0 /\ -arg1+arg2 > 0)]
	
	Blocked

	[{}, {7[T], 10[T]}, {6[T], 8[T], 10[T], 11[T], 12[T]}, {}]

Covered

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)]
	
	Blocked

	[{}, {7[T], 10[T]}, {6[T], 7[T], 8[T], 10[T], 11[T], 12[T]}]

Backtrack

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)]
	
	Blocked

	[{}, {7[T], 8[T], 10[T]}]

Step with 11

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 11[(1-arg1-n2+arg2 > 0 /\ 1+arg1-n2+arg2 > 0 /\ arg3 > 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {7[T], 8[T], 10[T]}, {11[T]}]

Step with 12

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 11[(1-arg1-n2+arg2 > 0 /\ 1+arg1-n2+arg2 > 0 /\ arg3 > 0 /\ -1+n2 >= 0)], 12[(1+2*arg1-2*n3 > 0 /\ arg3 > 0 /\ -1+n3 >= 0 /\ 2+2*arg1-2*n3 > 0 /\ -arg1+arg2 >= 0 /\ arg1-arg2 >= 0)]
	
	Blocked

	[{}, {7[T], 8[T], 10[T]}, {11[T]}, {12[T]}]

Acceleration Failed

marked recursive suffix as redundant

Step with 8

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 11[(1-arg1-n2+arg2 > 0 /\ 1+arg1-n2+arg2 > 0 /\ arg3 > 0 /\ -1+n2 >= 0)], 12[(1+2*arg1-2*n3 > 0 /\ arg3 > 0 /\ -1+n3 >= 0 /\ 2+2*arg1-2*n3 > 0 /\ -arg1+arg2 >= 0 /\ arg1-arg2 >= 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)]
	
	Blocked

	[{}, {7[T], 8[T], 10[T]}, {11[T]}, {6[T], 7[T], 12[T]}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2 arg3
   6: f306_0_main_LE -> f306_0_main_LE : arg1'=-1+arg1, arg3'=-1+arg1+arg2, (arg3 > 0 /\ -arg1+arg2 < 0), cost: 1
   7: f306_0_main_LE -> f306_0_main_LE : arg2'=-1+arg2, arg3'=-1+arg1+arg2, (arg3 > 0 /\ -arg1+arg2 > 0), cost: 1
   8: f306_0_main_LE -> f306_0_main_LE : arg1'=-1+arg1, arg2'=arg1, arg3'=-1+2*arg1, (arg3 > 0 /\ arg1-arg2 == 0), cost: 1
  10: f306_0_main_LE -> f306_0_main_LE : arg1'=-n+arg1, arg3'=-n+arg1+arg2, (-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0), cost: 1
  11: f306_0_main_LE -> f306_0_main_LE : arg2'=-n2+arg2, arg3'=arg1-n2+arg2, (1-arg1-n2+arg2 > 0 /\ 1+arg1-n2+arg2 > 0 /\ arg3 > 0 /\ -1+n2 >= 0), cost: 1
  12: f306_0_main_LE -> f306_0_main_LE : arg1'=arg1-n3, arg2'=arg1-n3, arg3'=2*arg1-2*n3, (1+2*arg1-2*n3 > 0 /\ arg3 > 0 /\ -1+n3 >= 0 /\ 2+2*arg1-2*n3 > 0 /\ -arg1+arg2 >= 0 /\ arg1-arg2 >= 0), cost: 1
  13: f306_0_main_LE -> f306_0_main_LE : arg1'=-n4-n4*n32+arg1, arg2'=1-n4+arg1-(-1+n4)*n32-n32, arg3'=1-2*n4+2*arg1-2*(-1+n4)*n32-2*n32, (-1+n4 >= 0 /\ 2-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0 /\ 3-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0 /\ -1+n32 >= 0 /\ arg3 > 0 /\ 2-2*n4+2*arg1-2*(-1+n4)*n32 > 0 /\ -1-arg1+arg2 >= 0 /\ 1+2*arg1 > 0 /\ 4-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0), cost: 1
   9: __init -> f306_0_main_LE : arg1'=-arg2p1+arg3p1, arg2'=arg2p1, arg3'=arg3p1, (1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0), cost: 1

	Loop Acceleration

	Original rule:
	f306_0_main_LE -> f306_0_main_LE : arg1'=-1+arg1-n32, arg2'=arg1-n32, arg3'=-1+2*arg1-2*n32, (2*arg1-2*n32 > 0 /\ -1+n32 >= 0 /\ arg3 > 0 /\ 1+2*arg1-2*n32 > 0 /\ 2+2*arg1-2*n32 > 0 /\ -1-arg1+arg2 >= 0 /\ 2*arg1 > 0 /\ 1+2*arg1 > 0), cost: 1
	New rule:
	f306_0_main_LE -> f306_0_main_LE : arg1'=-n4-n4*n32+arg1, arg2'=1-n4+arg1-(-1+n4)*n32-n32, arg3'=1-2*n4+2*arg1-2*(-1+n4)*n32-2*n32, (-1+n4 >= 0 /\ 2-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0 /\ 3-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0 /\ -1+n32 >= 0 /\ arg3 > 0 /\ 2-2*n4+2*arg1-2*(-1+n4)*n32 > 0 /\ -1-arg1+arg2 >= 0 /\ 1+2*arg1 > 0 /\ 4-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0), cost: 1

		2*arg1-2*n32 > 0 [0]: montonic decrease yields 2-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0, dependencies: -1+n32 >= 0
		
		2*arg1-2*n32 > 0 [1]: eventual decrease yields (2-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0 /\ 2*arg1-2*n32 > 0), dependencies: -1+n32 >= 0
		
		2*arg1-2*n32 > 0 [2]: eventual increase yields (2*arg1-2*n32 > 0 /\ 2+2*n32 <= 0), dependencies: -1+n32 >= 0
		
		-1+n32 >= 0 [0]: monotonic increase yields -1+n32 >= 0
		
		arg3 > 0 [0]: monotonic increase yields arg3 > 0, dependencies: 2*arg1-2*n32 > 0
		
		1+2*arg1-2*n32 > 0 [0]: montonic decrease yields 3-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0, dependencies: 2*arg1-2*n32 > 0
		
		1+2*arg1-2*n32 > 0 [1]: eventual increase yields (1+2*arg1-2*n32 > 0 /\ 2+2*n32 <= 0), dependencies: -1+n32 >= 0
		
		2+2*arg1-2*n32 > 0 [0]: montonic decrease yields 4-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0, dependencies: 2*arg1-2*n32 > 0
		
		2+2*arg1-2*n32 > 0 [1]: eventual increase yields (2+2*arg1-2*n32 > 0 /\ 2+2*n32 <= 0), dependencies: -1+n32 >= 0
		
		-1-arg1+arg2 >= 0 [0]: monotonic increase yields -1-arg1+arg2 >= 0
		
		2*arg1 > 0 [0]: montonic decrease yields 2-2*n4+2*arg1-2*(-1+n4)*n32 > 0, dependencies: -1+n32 >= 0
		
		2*arg1 > 0 [1]: eventual increase yields (2*arg1 > 0 /\ 2+2*n32 <= 0), dependencies: -1+n32 >= 0
		
		1+2*arg1 > 0 [0]: monotonic increase yields 1+2*arg1 > 0, dependencies: 2*arg1-2*n32 > 0
		
		Replacement map: {2*arg1-2*n32 > 0 -> 2-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0, -1+n32 >= 0 -> -1+n32 >= 0, arg3 > 0 -> arg3 > 0, 1+2*arg1-2*n32 > 0 -> 3-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0, 2+2*arg1-2*n32 > 0 -> 4-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0, -1-arg1+arg2 >= 0 -> -1-arg1+arg2 >= 0, 2*arg1 > 0 -> 2-2*n4+2*arg1-2*(-1+n4)*n32 > 0, 1+2*arg1 > 0 -> 1+2*arg1 > 0}

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 13[(-1+n4 >= 0 /\ 2-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0 /\ 3-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0 /\ -1+n32 >= 0 /\ arg3 > 0 /\ 2-2*n4+2*arg1-2*(-1+n4)*n32 > 0 /\ -1-arg1+arg2 >= 0 /\ 1+2*arg1 > 0 /\ 4-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0)]
	
	Blocked

	[{}, {7[T], 8[T], 10[T]}, {13[T]}]

Restart

Step with 9

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)]
	
	Blocked

	[{}, {}]

Step with 8

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)]
	
	Blocked

	[{}, {}, {}]

Step with 7

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)], 7[(arg3 > 0 /\ -arg1+arg2 > 0)]
	
	Blocked

	[{}, {}, {6[T], 8[T]}, {}]

Covered

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)]
	
	Blocked

	[{}, {}, {6[T], 7[T], 8[T]}]

Step with 11

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)], 11[(1-arg1-n2+arg2 > 0 /\ 1+arg1-n2+arg2 > 0 /\ arg3 > 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {}, {6[T], 7[T], 8[T]}, {11[T]}]

Covered

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)]
	
	Blocked

	[{}, {}, {6[T], 7[T], 8[T], 11[T]}]

Step with 13

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)], 13[(-1+n4 >= 0 /\ 2-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0 /\ 3-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0 /\ -1+n32 >= 0 /\ arg3 > 0 /\ 2-2*n4+2*arg1-2*(-1+n4)*n32 > 0 /\ -1-arg1+arg2 >= 0 /\ 1+2*arg1 > 0 /\ 4-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0)]
	
	Blocked

	[{}, {}, {6[T], 7[T], 8[T], 11[T]}, {13[T]}]

Covered

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)]
	
	Blocked

	[{}, {}, {6[T], 7[T], 8[T], 11[T], 13[T]}]

Backtrack

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)]
	
	Blocked

	[{}, {8[T]}]

Step with 13

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 13[(-1+n4 >= 0 /\ 2-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0 /\ 3-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0 /\ -1+n32 >= 0 /\ arg3 > 0 /\ 2-2*n4+2*arg1-2*(-1+n4)*n32 > 0 /\ -1-arg1+arg2 >= 0 /\ 1+2*arg1 > 0 /\ 4-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0)]
	
	Blocked

	[{}, {8[T]}, {13[T]}]

Step with 7

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 13[(-1+n4 >= 0 /\ 2-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0 /\ 3-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0 /\ -1+n32 >= 0 /\ arg3 > 0 /\ 2-2*n4+2*arg1-2*(-1+n4)*n32 > 0 /\ -1-arg1+arg2 >= 0 /\ 1+2*arg1 > 0 /\ 4-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0)], 7[(arg3 > 0 /\ -arg1+arg2 > 0)]
	
	Blocked

	[{}, {8[T]}, {6[T], 8[T], 10[T], 12[T], 13[T]}, {}]

Covered

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 13[(-1+n4 >= 0 /\ 2-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0 /\ 3-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0 /\ -1+n32 >= 0 /\ arg3 > 0 /\ 2-2*n4+2*arg1-2*(-1+n4)*n32 > 0 /\ -1-arg1+arg2 >= 0 /\ 1+2*arg1 > 0 /\ 4-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0)]
	
	Blocked

	[{}, {8[T]}, {6[T], 7[T], 8[T], 10[T], 12[T], 13[T]}]

Step with 11

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 13[(-1+n4 >= 0 /\ 2-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0 /\ 3-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0 /\ -1+n32 >= 0 /\ arg3 > 0 /\ 2-2*n4+2*arg1-2*(-1+n4)*n32 > 0 /\ -1-arg1+arg2 >= 0 /\ 1+2*arg1 > 0 /\ 4-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0)], 11[(1-arg1-n2+arg2 > 0 /\ 1+arg1-n2+arg2 > 0 /\ arg3 > 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {8[T]}, {6[T], 7[T], 8[T], 10[T], 12[T], 13[T]}, {11[T]}]

Covered

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 13[(-1+n4 >= 0 /\ 2-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0 /\ 3-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0 /\ -1+n32 >= 0 /\ arg3 > 0 /\ 2-2*n4+2*arg1-2*(-1+n4)*n32 > 0 /\ -1-arg1+arg2 >= 0 /\ 1+2*arg1 > 0 /\ 4-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0)]
	
	Blocked

	[{}, {8[T]}, {6[T], 7[T], 8[T], 10[T], 11[T], 12[T], 13[T]}]

Backtrack

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)]
	
	Blocked

	[{}, {8[T], 13[T]}]

Step with 11

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 11[(1-arg1-n2+arg2 > 0 /\ 1+arg1-n2+arg2 > 0 /\ arg3 > 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {8[T], 13[T]}, {11[T]}]

Step with 13

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 11[(1-arg1-n2+arg2 > 0 /\ 1+arg1-n2+arg2 > 0 /\ arg3 > 0 /\ -1+n2 >= 0)], 13[(-1+n4 >= 0 /\ 2-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0 /\ 3-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0 /\ -1+n32 >= 0 /\ arg3 > 0 /\ 2-2*n4+2*arg1-2*(-1+n4)*n32 > 0 /\ -1-arg1+arg2 >= 0 /\ 1+2*arg1 > 0 /\ 4-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0)]
	
	Blocked

	[{}, {8[T], 13[T]}, {11[T]}, {13[T]}]

Covered

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 11[(1-arg1-n2+arg2 > 0 /\ 1+arg1-n2+arg2 > 0 /\ arg3 > 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {8[T], 13[T]}, {11[T], 13[T]}]

Step with 12

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 11[(1-arg1-n2+arg2 > 0 /\ 1+arg1-n2+arg2 > 0 /\ arg3 > 0 /\ -1+n2 >= 0)], 12[(1+2*arg1-2*n3 > 0 /\ arg3 > 0 /\ -1+n3 >= 0 /\ 2+2*arg1-2*n3 > 0 /\ -arg1+arg2 >= 0 /\ arg1-arg2 >= 0)]
	
	Blocked

	[{}, {8[T], 13[T]}, {11[T], 13[T]}, {12[T]}]

Step with 8

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 11[(1-arg1-n2+arg2 > 0 /\ 1+arg1-n2+arg2 > 0 /\ arg3 > 0 /\ -1+n2 >= 0)], 12[(1+2*arg1-2*n3 > 0 /\ arg3 > 0 /\ -1+n3 >= 0 /\ 2+2*arg1-2*n3 > 0 /\ -arg1+arg2 >= 0 /\ arg1-arg2 >= 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)]
	
	Blocked

	[{}, {8[T], 13[T]}, {11[T], 13[T]}, {10[T], 12[T]}, {}]

Covered

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 11[(1-arg1-n2+arg2 > 0 /\ 1+arg1-n2+arg2 > 0 /\ arg3 > 0 /\ -1+n2 >= 0)], 12[(1+2*arg1-2*n3 > 0 /\ arg3 > 0 /\ -1+n3 >= 0 /\ 2+2*arg1-2*n3 > 0 /\ -arg1+arg2 >= 0 /\ arg1-arg2 >= 0)]
	
	Blocked

	[{}, {8[T], 13[T]}, {11[T], 13[T]}, {8[T], 10[T], 12[T]}]

Backtrack

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 11[(1-arg1-n2+arg2 > 0 /\ 1+arg1-n2+arg2 > 0 /\ arg3 > 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {8[T], 13[T]}, {11[T], 12[T], 13[T]}]

Step with 8

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 11[(1-arg1-n2+arg2 > 0 /\ 1+arg1-n2+arg2 > 0 /\ arg3 > 0 /\ -1+n2 >= 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)]
	
	Blocked

	[{}, {8[T], 13[T]}, {11[T], 12[T], 13[T]}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2 arg3
   6: f306_0_main_LE -> f306_0_main_LE : arg1'=-1+arg1, arg3'=-1+arg1+arg2, (arg3 > 0 /\ -arg1+arg2 < 0), cost: 1
   7: f306_0_main_LE -> f306_0_main_LE : arg2'=-1+arg2, arg3'=-1+arg1+arg2, (arg3 > 0 /\ -arg1+arg2 > 0), cost: 1
   8: f306_0_main_LE -> f306_0_main_LE : arg1'=-1+arg1, arg2'=arg1, arg3'=-1+2*arg1, (arg3 > 0 /\ arg1-arg2 == 0), cost: 1
  10: f306_0_main_LE -> f306_0_main_LE : arg1'=-n+arg1, arg3'=-n+arg1+arg2, (-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0), cost: 1
  11: f306_0_main_LE -> f306_0_main_LE : arg2'=-n2+arg2, arg3'=arg1-n2+arg2, (1-arg1-n2+arg2 > 0 /\ 1+arg1-n2+arg2 > 0 /\ arg3 > 0 /\ -1+n2 >= 0), cost: 1
  12: f306_0_main_LE -> f306_0_main_LE : arg1'=arg1-n3, arg2'=arg1-n3, arg3'=2*arg1-2*n3, (1+2*arg1-2*n3 > 0 /\ arg3 > 0 /\ -1+n3 >= 0 /\ 2+2*arg1-2*n3 > 0 /\ -arg1+arg2 >= 0 /\ arg1-arg2 >= 0), cost: 1
  13: f306_0_main_LE -> f306_0_main_LE : arg1'=-n4-n4*n32+arg1, arg2'=1-n4+arg1-(-1+n4)*n32-n32, arg3'=1-2*n4+2*arg1-2*(-1+n4)*n32-2*n32, (-1+n4 >= 0 /\ 2-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0 /\ 3-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0 /\ -1+n32 >= 0 /\ arg3 > 0 /\ 2-2*n4+2*arg1-2*(-1+n4)*n32 > 0 /\ -1-arg1+arg2 >= 0 /\ 1+2*arg1 > 0 /\ 4-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0), cost: 1
  14: f306_0_main_LE -> f306_0_main_LE : arg1'=arg1-n5, arg2'=1+arg1-n5, arg3'=1+2*arg1-2*n5, (arg3 > 0 /\ -1-arg1+arg2 >= 0 /\ -1+n5 >= 0 /\ 1+2*arg1 > 0 /\ 2+2*arg1-2*n5 > 0), cost: 1
   9: __init -> f306_0_main_LE : arg1'=-arg2p1+arg3p1, arg2'=arg2p1, arg3'=arg3p1, (1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0), cost: 1

	Loop Acceleration

	Original rule:
	f306_0_main_LE -> f306_0_main_LE : arg1'=-1+arg1, arg2'=arg1, arg3'=-1+2*arg1, (arg3 > 0 /\ -1-arg1+arg2 >= 0 /\ 2*arg1 > 0 /\ 1+2*arg1 > 0), cost: 1
	New rule:
	f306_0_main_LE -> f306_0_main_LE : arg1'=arg1-n5, arg2'=1+arg1-n5, arg3'=1+2*arg1-2*n5, (arg3 > 0 /\ -1-arg1+arg2 >= 0 /\ -1+n5 >= 0 /\ 1+2*arg1 > 0 /\ 2+2*arg1-2*n5 > 0), cost: 1

		arg3 > 0 [0]: monotonic increase yields arg3 > 0, dependencies: 2*arg1 > 0
		
		arg3 > 0 [1]: eventual decrease yields (arg3 > 0 /\ 3+2*arg1-2*n5 > 0)
		
		-1-arg1+arg2 >= 0 [0]: monotonic increase yields -1-arg1+arg2 >= 0
		
		2*arg1 > 0 [0]: montonic decrease yields 2+2*arg1-2*n5 > 0
		
		2*arg1 > 0 [1]: eventual increase yields (2 <= 0 /\ 2*arg1 > 0)
		
		1+2*arg1 > 0 [0]: monotonic increase yields 1+2*arg1 > 0, dependencies: 2*arg1 > 0
		
		Replacement map: {arg3 > 0 -> arg3 > 0, -1-arg1+arg2 >= 0 -> -1-arg1+arg2 >= 0, 2*arg1 > 0 -> 2+2*arg1-2*n5 > 0, 1+2*arg1 > 0 -> 1+2*arg1 > 0}

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 14[(arg3 > 0 /\ -1-arg1+arg2 >= 0 /\ -1+n5 >= 0 /\ 1+2*arg1 > 0 /\ 2+2*arg1-2*n5 > 0)]
	
	Blocked

	[{}, {8[T], 13[T]}, {14[T]}]

Step with 7

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 14[(arg3 > 0 /\ -1-arg1+arg2 >= 0 /\ -1+n5 >= 0 /\ 1+2*arg1 > 0 /\ 2+2*arg1-2*n5 > 0)], 7[(arg3 > 0 /\ -arg1+arg2 > 0)]
	
	Blocked

	[{}, {8[T], 13[T]}, {6[T], 8[T], 14[T]}, {}]

Covered

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 14[(arg3 > 0 /\ -1-arg1+arg2 >= 0 /\ -1+n5 >= 0 /\ 1+2*arg1 > 0 /\ 2+2*arg1-2*n5 > 0)]
	
	Blocked

	[{}, {8[T], 13[T]}, {6[T], 7[T], 8[T], 14[T]}]

Step with 11

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 14[(arg3 > 0 /\ -1-arg1+arg2 >= 0 /\ -1+n5 >= 0 /\ 1+2*arg1 > 0 /\ 2+2*arg1-2*n5 > 0)], 11[(1-arg1-n2+arg2 > 0 /\ 1+arg1-n2+arg2 > 0 /\ arg3 > 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {8[T], 13[T]}, {6[T], 7[T], 8[T], 14[T]}, {11[T]}]

Covered

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 14[(arg3 > 0 /\ -1-arg1+arg2 >= 0 /\ -1+n5 >= 0 /\ 1+2*arg1 > 0 /\ 2+2*arg1-2*n5 > 0)]
	
	Blocked

	[{}, {8[T], 13[T]}, {6[T], 7[T], 8[T], 11[T], 14[T]}]

Step with 13

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 14[(arg3 > 0 /\ -1-arg1+arg2 >= 0 /\ -1+n5 >= 0 /\ 1+2*arg1 > 0 /\ 2+2*arg1-2*n5 > 0)], 13[(-1+n4 >= 0 /\ 2-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0 /\ 3-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0 /\ -1+n32 >= 0 /\ arg3 > 0 /\ 2-2*n4+2*arg1-2*(-1+n4)*n32 > 0 /\ -1-arg1+arg2 >= 0 /\ 1+2*arg1 > 0 /\ 4-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0)]
	
	Blocked

	[{}, {8[T], 13[T]}, {6[T], 7[T], 8[T], 11[T], 14[T]}, {13[T]}]

Covered

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 14[(arg3 > 0 /\ -1-arg1+arg2 >= 0 /\ -1+n5 >= 0 /\ 1+2*arg1 > 0 /\ 2+2*arg1-2*n5 > 0)]
	
	Blocked

	[{}, {8[T], 13[T]}, {6[T], 7[T], 8[T], 11[T], 13[T], 14[T]}]

Backtrack

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)]
	
	Blocked

	[{}, {8[T], 13[T], 14[T]}]

Step with 12

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 12[(1+2*arg1-2*n3 > 0 /\ arg3 > 0 /\ -1+n3 >= 0 /\ 2+2*arg1-2*n3 > 0 /\ -arg1+arg2 >= 0 /\ arg1-arg2 >= 0)]
	
	Blocked

	[{}, {8[T], 13[T], 14[T]}, {12[T]}]

Step with 8

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 12[(1+2*arg1-2*n3 > 0 /\ arg3 > 0 /\ -1+n3 >= 0 /\ 2+2*arg1-2*n3 > 0 /\ -arg1+arg2 >= 0 /\ arg1-arg2 >= 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)]
	
	Blocked

	[{}, {8[T], 13[T], 14[T]}, {10[T], 12[T], 14[T]}, {}]

Step with 7

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 12[(1+2*arg1-2*n3 > 0 /\ arg3 > 0 /\ -1+n3 >= 0 /\ 2+2*arg1-2*n3 > 0 /\ -arg1+arg2 >= 0 /\ arg1-arg2 >= 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)], 7[(arg3 > 0 /\ -arg1+arg2 > 0)]
	
	Blocked

	[{}, {8[T], 13[T], 14[T]}, {10[T], 12[T], 14[T]}, {6[T], 8[T]}, {}]

Covered

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 12[(1+2*arg1-2*n3 > 0 /\ arg3 > 0 /\ -1+n3 >= 0 /\ 2+2*arg1-2*n3 > 0 /\ -arg1+arg2 >= 0 /\ arg1-arg2 >= 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)]
	
	Blocked

	[{}, {8[T], 13[T], 14[T]}, {10[T], 12[T], 14[T]}, {6[T], 7[T], 8[T]}]

Step with 11

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 12[(1+2*arg1-2*n3 > 0 /\ arg3 > 0 /\ -1+n3 >= 0 /\ 2+2*arg1-2*n3 > 0 /\ -arg1+arg2 >= 0 /\ arg1-arg2 >= 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)], 11[(1-arg1-n2+arg2 > 0 /\ 1+arg1-n2+arg2 > 0 /\ arg3 > 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {8[T], 13[T], 14[T]}, {10[T], 12[T], 14[T]}, {6[T], 7[T], 8[T]}, {11[T]}]

Covered

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 12[(1+2*arg1-2*n3 > 0 /\ arg3 > 0 /\ -1+n3 >= 0 /\ 2+2*arg1-2*n3 > 0 /\ -arg1+arg2 >= 0 /\ arg1-arg2 >= 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)]
	
	Blocked

	[{}, {8[T], 13[T], 14[T]}, {10[T], 12[T], 14[T]}, {6[T], 7[T], 8[T], 11[T]}]

Step with 13

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 12[(1+2*arg1-2*n3 > 0 /\ arg3 > 0 /\ -1+n3 >= 0 /\ 2+2*arg1-2*n3 > 0 /\ -arg1+arg2 >= 0 /\ arg1-arg2 >= 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)], 13[(-1+n4 >= 0 /\ 2-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0 /\ 3-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0 /\ -1+n32 >= 0 /\ arg3 > 0 /\ 2-2*n4+2*arg1-2*(-1+n4)*n32 > 0 /\ -1-arg1+arg2 >= 0 /\ 1+2*arg1 > 0 /\ 4-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0)]
	
	Blocked

	[{}, {8[T], 13[T], 14[T]}, {10[T], 12[T], 14[T]}, {6[T], 7[T], 8[T], 11[T]}, {13[T]}]

Covered

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 12[(1+2*arg1-2*n3 > 0 /\ arg3 > 0 /\ -1+n3 >= 0 /\ 2+2*arg1-2*n3 > 0 /\ -arg1+arg2 >= 0 /\ arg1-arg2 >= 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)]
	
	Blocked

	[{}, {8[T], 13[T], 14[T]}, {10[T], 12[T], 14[T]}, {6[T], 7[T], 8[T], 11[T], 13[T]}]

Step with 14

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 12[(1+2*arg1-2*n3 > 0 /\ arg3 > 0 /\ -1+n3 >= 0 /\ 2+2*arg1-2*n3 > 0 /\ -arg1+arg2 >= 0 /\ arg1-arg2 >= 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)], 14[(arg3 > 0 /\ -1-arg1+arg2 >= 0 /\ -1+n5 >= 0 /\ 1+2*arg1 > 0 /\ 2+2*arg1-2*n5 > 0)]
	
	Blocked

	[{}, {8[T], 13[T], 14[T]}, {10[T], 12[T], 14[T]}, {6[T], 7[T], 8[T], 10[T], 11[T], 12[T], 13[T]}, {14[T]}]

Covered

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 12[(1+2*arg1-2*n3 > 0 /\ arg3 > 0 /\ -1+n3 >= 0 /\ 2+2*arg1-2*n3 > 0 /\ -arg1+arg2 >= 0 /\ arg1-arg2 >= 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)]
	
	Blocked

	[{}, {8[T], 13[T], 14[T]}, {10[T], 12[T], 14[T]}, {6[T], 7[T], 8[T], 10[T], 11[T], 12[T], 13[T], 14[T]}]

Backtrack

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 12[(1+2*arg1-2*n3 > 0 /\ arg3 > 0 /\ -1+n3 >= 0 /\ 2+2*arg1-2*n3 > 0 /\ -arg1+arg2 >= 0 /\ arg1-arg2 >= 0)]
	
	Blocked

	[{}, {8[T], 13[T], 14[T]}, {8[T], 10[T], 12[T], 14[T]}]

Backtrack

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)]
	
	Blocked

	[{}, {8[T], 12[T], 13[T], 14[T]}]

Step with 6

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 6[(arg3 > 0 /\ -arg1+arg2 < 0)]
	
	Blocked

	[{}, {8[T], 12[T], 13[T], 14[T]}, {}]

Covered

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)]
	
	Blocked

	[{}, {6[T], 8[T], 12[T], 13[T], 14[T]}]

Step with 7

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 7[(arg3 > 0 /\ -arg1+arg2 > 0)]
	
	Blocked

	[{}, {6[T], 8[T], 12[T], 13[T], 14[T]}, {}]

Covered

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)]
	
	Blocked

	[{}, {6[T], 7[T], 8[T], 12[T], 13[T], 14[T]}]

Step with 11

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 11[(1-arg1-n2+arg2 > 0 /\ 1+arg1-n2+arg2 > 0 /\ arg3 > 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {6[T], 7[T], 8[T], 12[T], 13[T], 14[T]}, {11[T]}]

Step with 13

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 11[(1-arg1-n2+arg2 > 0 /\ 1+arg1-n2+arg2 > 0 /\ arg3 > 0 /\ -1+n2 >= 0)], 13[(-1+n4 >= 0 /\ 2-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0 /\ 3-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0 /\ -1+n32 >= 0 /\ arg3 > 0 /\ 2-2*n4+2*arg1-2*(-1+n4)*n32 > 0 /\ -1-arg1+arg2 >= 0 /\ 1+2*arg1 > 0 /\ 4-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0)]
	
	Blocked

	[{}, {6[T], 7[T], 8[T], 12[T], 13[T], 14[T]}, {11[T]}, {13[T]}]

Covered

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 11[(1-arg1-n2+arg2 > 0 /\ 1+arg1-n2+arg2 > 0 /\ arg3 > 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {6[T], 7[T], 8[T], 12[T], 13[T], 14[T]}, {11[T], 13[T]}]

Step with 12

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 11[(1-arg1-n2+arg2 > 0 /\ 1+arg1-n2+arg2 > 0 /\ arg3 > 0 /\ -1+n2 >= 0)], 12[(1+2*arg1-2*n3 > 0 /\ arg3 > 0 /\ -1+n3 >= 0 /\ 2+2*arg1-2*n3 > 0 /\ -arg1+arg2 >= 0 /\ arg1-arg2 >= 0)]
	
	Blocked

	[{}, {6[T], 7[T], 8[T], 12[T], 13[T], 14[T]}, {11[T], 13[T]}, {12[T]}]

Step with 8

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 11[(1-arg1-n2+arg2 > 0 /\ 1+arg1-n2+arg2 > 0 /\ arg3 > 0 /\ -1+n2 >= 0)], 12[(1+2*arg1-2*n3 > 0 /\ arg3 > 0 /\ -1+n3 >= 0 /\ 2+2*arg1-2*n3 > 0 /\ -arg1+arg2 >= 0 /\ arg1-arg2 >= 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)]
	
	Blocked

	[{}, {6[T], 7[T], 8[T], 12[T], 13[T], 14[T]}, {11[T], 13[T]}, {10[T], 12[T], 14[T]}, {}]

Covered

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 11[(1-arg1-n2+arg2 > 0 /\ 1+arg1-n2+arg2 > 0 /\ arg3 > 0 /\ -1+n2 >= 0)], 12[(1+2*arg1-2*n3 > 0 /\ arg3 > 0 /\ -1+n3 >= 0 /\ 2+2*arg1-2*n3 > 0 /\ -arg1+arg2 >= 0 /\ arg1-arg2 >= 0)]
	
	Blocked

	[{}, {6[T], 7[T], 8[T], 12[T], 13[T], 14[T]}, {11[T], 13[T]}, {8[T], 10[T], 12[T], 14[T]}]

Backtrack

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 11[(1-arg1-n2+arg2 > 0 /\ 1+arg1-n2+arg2 > 0 /\ arg3 > 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {6[T], 7[T], 8[T], 12[T], 13[T], 14[T]}, {11[T], 12[T], 13[T]}]

Step with 8

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 11[(1-arg1-n2+arg2 > 0 /\ 1+arg1-n2+arg2 > 0 /\ arg3 > 0 /\ -1+n2 >= 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)]
	
	Blocked

	[{}, {6[T], 7[T], 8[T], 12[T], 13[T], 14[T]}, {11[T], 12[T], 13[T]}, {}]

Covered

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 11[(1-arg1-n2+arg2 > 0 /\ 1+arg1-n2+arg2 > 0 /\ arg3 > 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {6[T], 7[T], 8[T], 12[T], 13[T], 14[T]}, {8[T], 11[T], 12[T], 13[T]}]

Step with 7

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 11[(1-arg1-n2+arg2 > 0 /\ 1+arg1-n2+arg2 > 0 /\ arg3 > 0 /\ -1+n2 >= 0)], 7[(arg3 > 0 /\ -arg1+arg2 > 0)]
	
	Blocked

	[{}, {6[T], 7[T], 8[T], 12[T], 13[T], 14[T]}, {6[T], 8[T], 11[T], 12[T], 13[T]}, {}]

Covered

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 11[(1-arg1-n2+arg2 > 0 /\ 1+arg1-n2+arg2 > 0 /\ arg3 > 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {6[T], 7[T], 8[T], 12[T], 13[T], 14[T]}, {6[T], 7[T], 8[T], 11[T], 12[T], 13[T]}]

Step with 14

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 11[(1-arg1-n2+arg2 > 0 /\ 1+arg1-n2+arg2 > 0 /\ arg3 > 0 /\ -1+n2 >= 0)], 14[(arg3 > 0 /\ -1-arg1+arg2 >= 0 /\ -1+n5 >= 0 /\ 1+2*arg1 > 0 /\ 2+2*arg1-2*n5 > 0)]
	
	Blocked

	[{}, {6[T], 7[T], 8[T], 12[T], 13[T], 14[T]}, {6[T], 7[T], 8[T], 10[T], 11[T], 12[T], 13[T]}, {14[T]}]

Covered

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 11[(1-arg1-n2+arg2 > 0 /\ 1+arg1-n2+arg2 > 0 /\ arg3 > 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {6[T], 7[T], 8[T], 12[T], 13[T], 14[T]}, {6[T], 7[T], 8[T], 10[T], 11[T], 12[T], 13[T], 14[T]}]

Backtrack

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)]
	
	Blocked

	[{}, {6[T], 7[T], 8[T], 11[T], 12[T], 13[T], 14[T]}]

Step with 10

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 10[(-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0)]
	
	Blocked

	[{}, {6[T], 7[T], 8[T], 11[T], 12[T], 13[T], 14[T]}, {10[T]}]

Step with 8

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 10[(-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)]
	
	Blocked

	[{}, {6[T], 7[T], 8[T], 11[T], 12[T], 13[T], 14[T]}, {10[T], 14[T]}, {}]

Step with 7

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 10[(-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)], 7[(arg3 > 0 /\ -arg1+arg2 > 0)]
	
	Blocked

	[{}, {6[T], 7[T], 8[T], 11[T], 12[T], 13[T], 14[T]}, {10[T], 14[T]}, {6[T], 8[T]}, {}]

Covered

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 10[(-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)]
	
	Blocked

	[{}, {6[T], 7[T], 8[T], 11[T], 12[T], 13[T], 14[T]}, {10[T], 14[T]}, {6[T], 7[T], 8[T]}]

Step with 11

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 10[(-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)], 11[(1-arg1-n2+arg2 > 0 /\ 1+arg1-n2+arg2 > 0 /\ arg3 > 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {6[T], 7[T], 8[T], 11[T], 12[T], 13[T], 14[T]}, {10[T], 14[T]}, {6[T], 7[T], 8[T]}, {11[T]}]

Covered

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 10[(-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)]
	
	Blocked

	[{}, {6[T], 7[T], 8[T], 11[T], 12[T], 13[T], 14[T]}, {10[T], 14[T]}, {6[T], 7[T], 8[T], 11[T]}]

Step with 13

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 10[(-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)], 13[(-1+n4 >= 0 /\ 2-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0 /\ 3-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0 /\ -1+n32 >= 0 /\ arg3 > 0 /\ 2-2*n4+2*arg1-2*(-1+n4)*n32 > 0 /\ -1-arg1+arg2 >= 0 /\ 1+2*arg1 > 0 /\ 4-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0)]
	
	Blocked

	[{}, {6[T], 7[T], 8[T], 11[T], 12[T], 13[T], 14[T]}, {10[T], 14[T]}, {6[T], 7[T], 8[T], 11[T]}, {13[T]}]

Covered

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 10[(-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)]
	
	Blocked

	[{}, {6[T], 7[T], 8[T], 11[T], 12[T], 13[T], 14[T]}, {10[T], 14[T]}, {6[T], 7[T], 8[T], 11[T], 13[T]}]

Step with 14

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 10[(-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)], 14[(arg3 > 0 /\ -1-arg1+arg2 >= 0 /\ -1+n5 >= 0 /\ 1+2*arg1 > 0 /\ 2+2*arg1-2*n5 > 0)]
	
	Blocked

	[{}, {6[T], 7[T], 8[T], 11[T], 12[T], 13[T], 14[T]}, {10[T], 14[T]}, {6[T], 7[T], 8[T], 10[T], 11[T], 12[T], 13[T]}, {14[T]}]

Covered

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 10[(-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)]
	
	Blocked

	[{}, {6[T], 7[T], 8[T], 11[T], 12[T], 13[T], 14[T]}, {10[T], 14[T]}, {6[T], 7[T], 8[T], 10[T], 11[T], 12[T], 13[T], 14[T]}]

Backtrack

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 10[(-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0)]
	
	Blocked

	[{}, {6[T], 7[T], 8[T], 11[T], 12[T], 13[T], 14[T]}, {8[T], 10[T], 14[T]}]

Step with 6

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 10[(-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0)], 6[(arg3 > 0 /\ -arg1+arg2 < 0)]
	
	Blocked

	[{}, {6[T], 7[T], 8[T], 11[T], 12[T], 13[T], 14[T]}, {8[T], 10[T], 14[T]}, {}]

Covered

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 10[(-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0)]
	
	Blocked

	[{}, {6[T], 7[T], 8[T], 11[T], 12[T], 13[T], 14[T]}, {6[T], 8[T], 10[T], 14[T]}]

Step with 12

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 10[(-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0)], 12[(1+2*arg1-2*n3 > 0 /\ arg3 > 0 /\ -1+n3 >= 0 /\ 2+2*arg1-2*n3 > 0 /\ -arg1+arg2 >= 0 /\ arg1-arg2 >= 0)]
	
	Blocked

	[{}, {6[T], 7[T], 8[T], 11[T], 12[T], 13[T], 14[T]}, {6[T], 7[T], 8[T], 10[T], 11[T], 13[T], 14[T]}, {12[T]}]

Step with 8

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 10[(-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0)], 12[(1+2*arg1-2*n3 > 0 /\ arg3 > 0 /\ -1+n3 >= 0 /\ 2+2*arg1-2*n3 > 0 /\ -arg1+arg2 >= 0 /\ arg1-arg2 >= 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)]
	
	Blocked

	[{}, {6[T], 7[T], 8[T], 11[T], 12[T], 13[T], 14[T]}, {6[T], 7[T], 8[T], 10[T], 11[T], 13[T], 14[T]}, {10[T], 12[T], 14[T]}, {}]

Step with 7

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 10[(-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0)], 12[(1+2*arg1-2*n3 > 0 /\ arg3 > 0 /\ -1+n3 >= 0 /\ 2+2*arg1-2*n3 > 0 /\ -arg1+arg2 >= 0 /\ arg1-arg2 >= 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)], 7[(arg3 > 0 /\ -arg1+arg2 > 0)]
	
	Blocked

	[{}, {6[T], 7[T], 8[T], 11[T], 12[T], 13[T], 14[T]}, {6[T], 7[T], 8[T], 10[T], 11[T], 13[T], 14[T]}, {10[T], 12[T], 14[T]}, {6[T], 8[T]}, {}]

Covered

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 10[(-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0)], 12[(1+2*arg1-2*n3 > 0 /\ arg3 > 0 /\ -1+n3 >= 0 /\ 2+2*arg1-2*n3 > 0 /\ -arg1+arg2 >= 0 /\ arg1-arg2 >= 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)]
	
	Blocked

	[{}, {6[T], 7[T], 8[T], 11[T], 12[T], 13[T], 14[T]}, {6[T], 7[T], 8[T], 10[T], 11[T], 13[T], 14[T]}, {10[T], 12[T], 14[T]}, {6[T], 7[T], 8[T]}]

Step with 11

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 10[(-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0)], 12[(1+2*arg1-2*n3 > 0 /\ arg3 > 0 /\ -1+n3 >= 0 /\ 2+2*arg1-2*n3 > 0 /\ -arg1+arg2 >= 0 /\ arg1-arg2 >= 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)], 11[(1-arg1-n2+arg2 > 0 /\ 1+arg1-n2+arg2 > 0 /\ arg3 > 0 /\ -1+n2 >= 0)]
	
	Blocked

	[{}, {6[T], 7[T], 8[T], 11[T], 12[T], 13[T], 14[T]}, {6[T], 7[T], 8[T], 10[T], 11[T], 13[T], 14[T]}, {10[T], 12[T], 14[T]}, {6[T], 7[T], 8[T]}, {11[T]}]

Covered

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 10[(-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0)], 12[(1+2*arg1-2*n3 > 0 /\ arg3 > 0 /\ -1+n3 >= 0 /\ 2+2*arg1-2*n3 > 0 /\ -arg1+arg2 >= 0 /\ arg1-arg2 >= 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)]
	
	Blocked

	[{}, {6[T], 7[T], 8[T], 11[T], 12[T], 13[T], 14[T]}, {6[T], 7[T], 8[T], 10[T], 11[T], 13[T], 14[T]}, {10[T], 12[T], 14[T]}, {6[T], 7[T], 8[T], 11[T]}]

Step with 13

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 10[(-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0)], 12[(1+2*arg1-2*n3 > 0 /\ arg3 > 0 /\ -1+n3 >= 0 /\ 2+2*arg1-2*n3 > 0 /\ -arg1+arg2 >= 0 /\ arg1-arg2 >= 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)], 13[(-1+n4 >= 0 /\ 2-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0 /\ 3-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0 /\ -1+n32 >= 0 /\ arg3 > 0 /\ 2-2*n4+2*arg1-2*(-1+n4)*n32 > 0 /\ -1-arg1+arg2 >= 0 /\ 1+2*arg1 > 0 /\ 4-2*n4+2*arg1-2*(-1+n4)*n32-2*n32 > 0)]
	
	Blocked

	[{}, {6[T], 7[T], 8[T], 11[T], 12[T], 13[T], 14[T]}, {6[T], 7[T], 8[T], 10[T], 11[T], 13[T], 14[T]}, {10[T], 12[T], 14[T]}, {6[T], 7[T], 8[T], 11[T]}, {13[T]}]

Covered

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 10[(-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0)], 12[(1+2*arg1-2*n3 > 0 /\ arg3 > 0 /\ -1+n3 >= 0 /\ 2+2*arg1-2*n3 > 0 /\ -arg1+arg2 >= 0 /\ arg1-arg2 >= 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)]
	
	Blocked

	[{}, {6[T], 7[T], 8[T], 11[T], 12[T], 13[T], 14[T]}, {6[T], 7[T], 8[T], 10[T], 11[T], 13[T], 14[T]}, {10[T], 12[T], 14[T]}, {6[T], 7[T], 8[T], 11[T], 13[T]}]

Step with 14

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 10[(-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0)], 12[(1+2*arg1-2*n3 > 0 /\ arg3 > 0 /\ -1+n3 >= 0 /\ 2+2*arg1-2*n3 > 0 /\ -arg1+arg2 >= 0 /\ arg1-arg2 >= 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)], 14[(arg3 > 0 /\ -1-arg1+arg2 >= 0 /\ -1+n5 >= 0 /\ 1+2*arg1 > 0 /\ 2+2*arg1-2*n5 > 0)]
	
	Blocked

	[{}, {6[T], 7[T], 8[T], 11[T], 12[T], 13[T], 14[T]}, {6[T], 7[T], 8[T], 10[T], 11[T], 13[T], 14[T]}, {10[T], 12[T], 14[T]}, {6[T], 7[T], 8[T], 10[T], 11[T], 12[T], 13[T]}, {14[T]}]

Covered

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 10[(-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0)], 12[(1+2*arg1-2*n3 > 0 /\ arg3 > 0 /\ -1+n3 >= 0 /\ 2+2*arg1-2*n3 > 0 /\ -arg1+arg2 >= 0 /\ arg1-arg2 >= 0)], 8[(arg3 > 0 /\ arg1-arg2 == 0)]
	
	Blocked

	[{}, {6[T], 7[T], 8[T], 11[T], 12[T], 13[T], 14[T]}, {6[T], 7[T], 8[T], 10[T], 11[T], 13[T], 14[T]}, {10[T], 12[T], 14[T]}, {6[T], 7[T], 8[T], 10[T], 11[T], 12[T], 13[T], 14[T]}]

Backtrack

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 10[(-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0)], 12[(1+2*arg1-2*n3 > 0 /\ arg3 > 0 /\ -1+n3 >= 0 /\ 2+2*arg1-2*n3 > 0 /\ -arg1+arg2 >= 0 /\ arg1-arg2 >= 0)]
	
	Blocked

	[{}, {6[T], 7[T], 8[T], 11[T], 12[T], 13[T], 14[T]}, {6[T], 7[T], 8[T], 10[T], 11[T], 13[T], 14[T]}, {8[T], 10[T], 12[T], 14[T]}]

Backtrack

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)], 10[(-1+n >= 0 /\ arg3 > 0 /\ 1-n+arg1-arg2 > 0 /\ 1-n+arg1+arg2 > 0)]
	
	Blocked

	[{}, {6[T], 7[T], 8[T], 11[T], 12[T], 13[T], 14[T]}, {6[T], 7[T], 8[T], 10[T], 11[T], 12[T], 13[T], 14[T]}]

Backtrack

	Trace

	9[(1-arg2p1+arg3p1 > 0 /\ 1+arg2p1 > 0)]
	
	Blocked

	[{}, {6[T], 7[T], 8[T], 10[T], 11[T], 12[T], 13[T], 14[T]}]

Backtrack

	Trace

	Blocked

	[{9[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
