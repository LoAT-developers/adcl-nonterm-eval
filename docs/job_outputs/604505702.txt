NO

Initial ITS
Start location: __init
   0: f1_0_main_ConstantStackPush -> f39_0_main_GE : arg1'=arg1P0, -arg1P0 == 0, cost: 1
   1: f39_0_main_GE -> f39_0_main_GE : arg1'=arg1P1, (-arg1 == 0 /\ 1-arg1P1 == 0), cost: 1
   2: f39_0_main_GE -> f39_0_main_GE : arg1'=arg1P2, (-arg1P2 == 0 /\ 1-arg1 == 0), cost: 1
   3: __init -> f1_0_main_ConstantStackPush : arg1'=arg1P3, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_ConstantStackPush -> f39_0_main_GE : arg1'=arg1P0, -arg1P0 == 0, cost: 1
New rule:
f1_0_main_ConstantStackPush -> f39_0_main_GE : arg1'=0, TRUE, cost: 1

Applied preprocessing
Original rule:
f39_0_main_GE -> f39_0_main_GE : arg1'=arg1P1, (-arg1 == 0 /\ 1-arg1P1 == 0), cost: 1
New rule:
f39_0_main_GE -> f39_0_main_GE : arg1'=1, arg1 == 0, cost: 1

Applied preprocessing
Original rule:
f39_0_main_GE -> f39_0_main_GE : arg1'=arg1P2, (-arg1P2 == 0 /\ 1-arg1 == 0), cost: 1
New rule:
f39_0_main_GE -> f39_0_main_GE : arg1'=0, -1+arg1 == 0, cost: 1

Simplified rules
Start location: __init
   4: f1_0_main_ConstantStackPush -> f39_0_main_GE : arg1'=0, TRUE, cost: 1
   5: f39_0_main_GE -> f39_0_main_GE : arg1'=1, arg1 == 0, cost: 1
   6: f39_0_main_GE -> f39_0_main_GE : arg1'=0, -1+arg1 == 0, cost: 1
   3: __init -> f1_0_main_ConstantStackPush : arg1'=arg1P3, TRUE, cost: 1


Applied chaining
First rule:
f39_0_main_GE -> f39_0_main_GE : arg1'=0, -1+arg1 == 0, cost: 1
Second rule:
f39_0_main_GE -> f39_0_main_GE : arg1'=1, arg1 == 0, cost: 1
New rule:
f39_0_main_GE -> f39_0_main_GE : arg1'=1, -1+arg1 == 0, cost: 2

Applied nonterm
Original rule:
f39_0_main_GE -> f39_0_main_GE : arg1'=1, -1+arg1 == 0, cost: 2
New rule:
f39_0_main_GE -> [3] : (-1+n1 >= 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0), cost: NONTERM
Sub-proof via acceration calculus written to file:///tmp/tmpnam_jnBhCF.txt

Applied chaining
First rule:
f39_0_main_GE -> f39_0_main_GE : arg1'=1, arg1 == 0, cost: 1
Second rule:
f39_0_main_GE -> [3] : (-1+n1 >= 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0), cost: NONTERM
New rule:
f39_0_main_GE -> [3] : (0 >= 0 /\ arg1 == 0 /\ -1+n1 >= 0), cost: NONTERM

Applied chaining
First rule:
f39_0_main_GE -> f39_0_main_GE : arg1'=1, arg1 == 0, cost: 1
Second rule:
f39_0_main_GE -> f39_0_main_GE : arg1'=0, -1+arg1 == 0, cost: 1
New rule:
f39_0_main_GE -> f39_0_main_GE : arg1'=0, arg1 == 0, cost: 2

Applied nonterm
Original rule:
f39_0_main_GE -> f39_0_main_GE : arg1'=0, arg1 == 0, cost: 2
New rule:
f39_0_main_GE -> [3] : (-1+n2 >= 0 /\ arg1 >= 0 /\ -arg1 >= 0), cost: NONTERM
Sub-proof via acceration calculus written to file:///tmp/tmpnam_hjKAjh.txt

Applied chaining
First rule:
f39_0_main_GE -> f39_0_main_GE : arg1'=0, -1+arg1 == 0, cost: 1
Second rule:
f39_0_main_GE -> [3] : (-1+n2 >= 0 /\ arg1 >= 0 /\ -arg1 >= 0), cost: NONTERM
New rule:
f39_0_main_GE -> [3] : (0 >= 0 /\ -1+n2 >= 0 /\ -1+arg1 == 0), cost: NONTERM

Applied simplification
Original rule:
f39_0_main_GE -> [3] : (-1+n1 >= 0 /\ 1-arg1 >= 0 /\ -1+arg1 >= 0), cost: NONTERM
New rule:
f39_0_main_GE -> [3] : (-1+n1 >= 0 /\ -1+arg1 <= 0 /\ -1+arg1 >= 0), cost: NONTERM

Applied simplification
Original rule:
f39_0_main_GE -> [3] : (0 >= 0 /\ arg1 == 0 /\ -1+n1 >= 0), cost: NONTERM
New rule:
f39_0_main_GE -> [3] : (arg1 == 0 /\ -1+n1 >= 0), cost: NONTERM

Applied simplification
Original rule:
f39_0_main_GE -> [3] : (-1+n2 >= 0 /\ arg1 >= 0 /\ -arg1 >= 0), cost: NONTERM
New rule:
f39_0_main_GE -> [3] : (-1+n2 >= 0 /\ arg1 <= 0 /\ arg1 >= 0), cost: NONTERM

Applied simplification
Original rule:
f39_0_main_GE -> [3] : (0 >= 0 /\ -1+n2 >= 0 /\ -1+arg1 == 0), cost: NONTERM
New rule:
f39_0_main_GE -> [3] : (-1+n2 >= 0 /\ -1+arg1 == 0), cost: NONTERM

Accelerated simple loops
Start location: __init
   4: f1_0_main_ConstantStackPush -> f39_0_main_GE : arg1'=0, TRUE, cost: 1
   5: f39_0_main_GE -> f39_0_main_GE : arg1'=1, arg1 == 0, cost: 1
   6: f39_0_main_GE -> f39_0_main_GE : arg1'=0, -1+arg1 == 0, cost: 1
  11: f39_0_main_GE -> [3] : (-1+n1 >= 0 /\ -1+arg1 <= 0 /\ -1+arg1 >= 0), cost: NONTERM
  12: f39_0_main_GE -> [3] : (arg1 == 0 /\ -1+n1 >= 0), cost: NONTERM
  13: f39_0_main_GE -> [3] : (-1+n2 >= 0 /\ arg1 <= 0 /\ arg1 >= 0), cost: NONTERM
  14: f39_0_main_GE -> [3] : (-1+n2 >= 0 /\ -1+arg1 == 0), cost: NONTERM
   3: __init -> f1_0_main_ConstantStackPush : arg1'=arg1P3, TRUE, cost: 1


Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f39_0_main_GE : arg1'=0, TRUE, cost: 1
Second rule:
f39_0_main_GE -> f39_0_main_GE : arg1'=1, arg1 == 0, cost: 1
New rule:
f1_0_main_ConstantStackPush -> f39_0_main_GE : arg1'=1, 0 == 0, cost: 2

Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f39_0_main_GE : arg1'=0, TRUE, cost: 1
Second rule:
f39_0_main_GE -> [3] : (arg1 == 0 /\ -1+n1 >= 0), cost: NONTERM
New rule:
f1_0_main_ConstantStackPush -> [3] : 0 == 0, cost: NONTERM

Applied chaining
First rule:
f1_0_main_ConstantStackPush -> f39_0_main_GE : arg1'=0, TRUE, cost: 1
Second rule:
f39_0_main_GE -> [3] : (-1+n2 >= 0 /\ arg1 <= 0 /\ arg1 >= 0), cost: NONTERM
New rule:
f1_0_main_ConstantStackPush -> [3] : 0 == 0, cost: NONTERM

Applied deletion
Removed the following rules: 5 6 11 12 13 14

Chained accelerated rules with incoming rules
Start location: __init
   4: f1_0_main_ConstantStackPush -> f39_0_main_GE : arg1'=0, TRUE, cost: 1
  15: f1_0_main_ConstantStackPush -> f39_0_main_GE : arg1'=1, 0 == 0, cost: 2
  16: f1_0_main_ConstantStackPush -> [3] : 0 == 0, cost: NONTERM
   3: __init -> f1_0_main_ConstantStackPush : arg1'=arg1P3, TRUE, cost: 1


Removed unreachable locations and irrelevant leafs
Start location: __init
  16: f1_0_main_ConstantStackPush -> [3] : 0 == 0, cost: NONTERM
   3: __init -> f1_0_main_ConstantStackPush : arg1'=arg1P3, TRUE, cost: 1


Eliminating location f1_0_main_ConstantStackPush by chaining:

Applied chaining
First rule:
__init -> f1_0_main_ConstantStackPush : arg1'=arg1P3, TRUE, cost: 1
Second rule:
f1_0_main_ConstantStackPush -> [3] : 0 == 0, cost: NONTERM
New rule:
__init -> [3] : 0 == 0, cost: NONTERM

Applied deletion
Removed the following rules: 3 16

Eliminated locations on linear paths
Start location: __init
  17: __init -> [3] : 0 == 0, cost: NONTERM


Computing asymptotic complexity
Proved nontermination of rule 17 via SMT.

Proved the following lower bound
Complexity:  Nonterm
Cpx degree: Nonterm

Solved cost: NONTERM
Rule cost:   NONTERM
Rule guard:  0 == 0
