unknown

Initial ITS

Start location: [1]
Program variables: x y z
   0: [1] -> [2] : x'=nondet, T, cost: 1
   1: [2] -> [3] : y'=nondet1, T, cost: 1
   2: [3] -> [4] : z'=nondet2, T, cost: 1
   3: [4] -> [5] : (-z+x <= 0 /\ y+x >= 0), cost: 1
   7: [4] -> [8] : (-z+x > 0 \/ y+x < 0), cost: 1
   4: [5] -> [6] : x'=y+2*x, T, cost: 1
   5: [6] -> [7] : y'=1+y, T, cost: 1
   6: [7] -> [4] : T, cost: 1

Chained Linear Paths

Start location: [1]
Program variables: x y z
   9: [1] -> [4] : x'=nondet, y'=nondet1, z'=nondet2, T, cost: 1
   7: [4] -> [8] : (-z+x > 0 \/ y+x < 0), cost: 1
  12: [4] -> [4] : x'=y+2*x, y'=1+y, (-z+x <= 0 /\ y+x >= 0), cost: 1

	Eliminating location [2] by chaining:

	Applied chaining

	First rule:
	[1] -> [2] : x'=nondet, T, cost: 1
	Second rule:
	[2] -> [3] : y'=nondet1, T, cost: 1
	New rule:
	[1] -> [3] : x'=nondet, y'=nondet1, T, cost: 1
	
	Applied deletion

	Removed the following rules: 0 1
	
	Eliminating location [3] by chaining:

	Applied chaining

	First rule:
	[1] -> [3] : x'=nondet, y'=nondet1, T, cost: 1
	Second rule:
	[3] -> [4] : z'=nondet2, T, cost: 1
	New rule:
	[1] -> [4] : x'=nondet, y'=nondet1, z'=nondet2, T, cost: 1
	
	Applied deletion

	Removed the following rules: 2 8
	
	Eliminating location [5] by chaining:

	Applied chaining

	First rule:
	[4] -> [5] : (-z+x <= 0 /\ y+x >= 0), cost: 1
	Second rule:
	[5] -> [6] : x'=y+2*x, T, cost: 1
	New rule:
	[4] -> [6] : x'=y+2*x, (-z+x <= 0 /\ y+x >= 0), cost: 1
	
	Applied deletion

	Removed the following rules: 3 4
	
	Eliminating location [6] by chaining:

	Applied chaining

	First rule:
	[4] -> [6] : x'=y+2*x, (-z+x <= 0 /\ y+x >= 0), cost: 1
	Second rule:
	[6] -> [7] : y'=1+y, T, cost: 1
	New rule:
	[4] -> [7] : x'=y+2*x, y'=1+y, (-z+x <= 0 /\ y+x >= 0), cost: 1
	
	Applied deletion

	Removed the following rules: 5 10
	
	Eliminating location [7] by chaining:

	Applied chaining

	First rule:
	[4] -> [7] : x'=y+2*x, y'=1+y, (-z+x <= 0 /\ y+x >= 0), cost: 1
	Second rule:
	[7] -> [4] : T, cost: 1
	New rule:
	[4] -> [4] : x'=y+2*x, y'=1+y, (-z+x <= 0 /\ y+x >= 0), cost: 1
	
	Applied deletion

	Removed the following rules: 6 11

Step with 9

	Trace

	9[T]
	
	Blocked

	[{}, {}]

Step with 7

	Trace

	9[T], 7[(y+x < 0)]
	
	Blocked

	[{}, {}, {}]

Backtrack

	Trace

	9[T]
	
	Blocked

	[{}, {7[y+x < 0]}]

Step with 7

	Trace

	9[T], 7[(-z+x > 0)]
	
	Blocked

	[{}, {7[y+x < 0]}, {}]

Backtrack

	Trace

	9[T]
	
	Blocked

	[{}, {7[(-z+x > 0 /\ y+x < 0)]}]

Step with 12

	Trace

	9[T], 12[(-z+x <= 0 /\ y+x >= 0)]
	
	Blocked

	[{}, {7[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 12

	Trace

	9[T], 12[(-z+x <= 0 /\ y+x >= 0)], 12[(-z+x <= 0 /\ y+x >= 0)]
	
	Blocked

	[{}, {7[T]}, {}, {}]

Covered

	Trace

	9[T], 12[(-z+x <= 0 /\ y+x >= 0)]
	
	Blocked

	[{}, {7[T]}, {12[T]}]

Step with 7

	Trace

	9[T], 12[(-z+x <= 0 /\ y+x >= 0)], 7[(-z+x > 0)]
	
	Blocked

	[{}, {7[T]}, {12[T]}, {}]

Backtrack

	Trace

	9[T], 12[(-z+x <= 0 /\ y+x >= 0)]
	
	Blocked

	[{}, {7[T]}, {7[-z+x > 0], 12[T]}]

Backtrack

	Trace

	9[T]
	
	Blocked

	[{}, {7[T], 12[T]}]

Backtrack

	Trace

	Blocked

	[{9[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
