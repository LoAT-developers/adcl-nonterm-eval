unknown

Initial ITS

Start location: __init
Program variables: arg1 arg2
   0: f1_0_main_Load -> f223_0_main_LE : arg1'=arg1p1, arg2'=arg2p1, (-arg1p1 == 0 /\ 1-arg2 == 0 /\ arg1 > 0 /\ 1+arg2p1 > 0), cost: 1
   1: f1_0_main_Load -> f259_0_main_LE : arg1'=arg1p2, arg2'=arg2p2, (1+arg1p2 > 0 /\ 1+arg2p2 > 0 /\ -1+arg2 > 0 /\ arg1 > 0), cost: 1
   2: f223_0_main_LE -> f223_0_main_LE : arg1'=arg1p3, arg2'=arg2p3, (arg2 > 0 /\ -1-arg1p3+arg1 == 0 /\ arg2+arg1-arg2p3 == 0), cost: 1
   3: f259_0_main_LE -> f259_0_main_LE : arg1'=arg1p4, arg2'=arg2p4, (arg2 > 0 /\ arg2-arg2p4+arg1 == 0 /\ -1-arg1p4+arg1 == 0), cost: 1
   4: __init -> f1_0_main_Load : arg1'=arg1p5, arg2'=arg2p5, T, cost: 1

Simplified Transitions

Start location: __init
Program variables: arg1 arg2
   1: f1_0_main_Load -> f259_0_main_LE : arg1'=arg1p2, arg2'=arg2p2, (1+arg1p2 > 0 /\ 1+arg2p2 > 0 /\ -1+arg2 > 0 /\ arg1 > 0), cost: 1
   5: f1_0_main_Load -> f223_0_main_LE : arg1'=0, arg2'=arg2p1, (1-arg2 == 0 /\ arg1 > 0 /\ 1+arg2p1 > 0), cost: 1
   6: f223_0_main_LE -> f223_0_main_LE : arg1'=-1+arg1, arg2'=arg2+arg1, arg2 > 0, cost: 1
   7: f259_0_main_LE -> f259_0_main_LE : arg1'=-1+arg1, arg2'=arg2+arg1, arg2 > 0, cost: 1
   4: __init -> f1_0_main_Load : arg1'=arg1p5, arg2'=arg2p5, T, cost: 1

	Propagated Equalities

	Original rule:
	f1_0_main_Load -> f223_0_main_LE : arg1'=arg1p1, arg2'=arg2p1, (-arg1p1 == 0 /\ 1-arg2 == 0 /\ arg1 > 0 /\ 1+arg2p1 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f223_0_main_LE : arg1'=0, arg2'=arg2p1, (0 == 0 /\ 1-arg2 == 0 /\ arg1 > 0 /\ 1+arg2p1 > 0), cost: 1
	
		propagated equality arg1p1 = 0
		
	Simplified Guard

	Original rule:
	f1_0_main_Load -> f223_0_main_LE : arg1'=0, arg2'=arg2p1, (0 == 0 /\ 1-arg2 == 0 /\ arg1 > 0 /\ 1+arg2p1 > 0), cost: 1
	New rule:
	f1_0_main_Load -> f223_0_main_LE : arg1'=0, arg2'=arg2p1, (1-arg2 == 0 /\ arg1 > 0 /\ 1+arg2p1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f223_0_main_LE -> f223_0_main_LE : arg1'=arg1p3, arg2'=arg2p3, (arg2 > 0 /\ -1-arg1p3+arg1 == 0 /\ arg2+arg1-arg2p3 == 0), cost: 1
	New rule:
	f223_0_main_LE -> f223_0_main_LE : arg1'=-1+arg1, arg2'=arg2+arg1, (0 == 0 /\ arg2 > 0), cost: 1
	
		propagated equality arg1p3 = -1+arg1
		
		propagated equality arg2p3 = arg2+arg1
		
	Simplified Guard

	Original rule:
	f223_0_main_LE -> f223_0_main_LE : arg1'=-1+arg1, arg2'=arg2+arg1, (0 == 0 /\ arg2 > 0), cost: 1
	New rule:
	f223_0_main_LE -> f223_0_main_LE : arg1'=-1+arg1, arg2'=arg2+arg1, arg2 > 0, cost: 1
	
	Propagated Equalities

	Original rule:
	f259_0_main_LE -> f259_0_main_LE : arg1'=arg1p4, arg2'=arg2p4, (arg2 > 0 /\ arg2-arg2p4+arg1 == 0 /\ -1-arg1p4+arg1 == 0), cost: 1
	New rule:
	f259_0_main_LE -> f259_0_main_LE : arg1'=-1+arg1, arg2'=arg2+arg1, (0 == 0 /\ arg2 > 0), cost: 1
	
		propagated equality arg2p4 = arg2+arg1
		
		propagated equality arg1p4 = -1+arg1
		
	Simplified Guard

	Original rule:
	f259_0_main_LE -> f259_0_main_LE : arg1'=-1+arg1, arg2'=arg2+arg1, (0 == 0 /\ arg2 > 0), cost: 1
	New rule:
	f259_0_main_LE -> f259_0_main_LE : arg1'=-1+arg1, arg2'=arg2+arg1, arg2 > 0, cost: 1

Step with 4

	Trace

	4[T]
	
	Blocked

	[{}, {}]

Step with 1

	Trace

	4[T], 1[(1+arg1p2 > 0 /\ 1+arg2p2 > 0 /\ -1+arg2 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {}]

Step with 7

	Trace

	4[T], 1[(1+arg1p2 > 0 /\ 1+arg2p2 > 0 /\ -1+arg2 > 0 /\ arg1 > 0)], 7[(arg2 > 0)]
	
	Blocked

	[{}, {}, {}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2
   1: f1_0_main_Load -> f259_0_main_LE : arg1'=arg1p2, arg2'=arg2p2, (1+arg1p2 > 0 /\ 1+arg2p2 > 0 /\ -1+arg2 > 0 /\ arg1 > 0), cost: 1
   5: f1_0_main_Load -> f223_0_main_LE : arg1'=0, arg2'=arg2p1, (1-arg2 == 0 /\ arg1 > 0 /\ 1+arg2p1 > 0), cost: 1
   6: f223_0_main_LE -> f223_0_main_LE : arg1'=-1+arg1, arg2'=arg2+arg1, arg2 > 0, cost: 1
   7: f259_0_main_LE -> f259_0_main_LE : arg1'=-1+arg1, arg2'=arg2+arg1, arg2 > 0, cost: 1
   8: f259_0_main_LE -> f259_0_main_LE : arg1'=-n+arg1, arg2'=n*arg1+1/2*n+arg2-1/2*n^2, (arg2 > 0 /\ -1+n >= 0 /\ -1/2+(-1+n)*arg1-1/2*(-1+n)^2+1/2*n+arg2 > 0), cost: 1
   4: __init -> f1_0_main_Load : arg1'=arg1p5, arg2'=arg2p5, T, cost: 1

	Loop Acceleration

	Original rule:
	f259_0_main_LE -> f259_0_main_LE : arg1'=-1+arg1, arg2'=arg2+arg1, (arg2 > 0), cost: 1
	New rule:
	f259_0_main_LE -> f259_0_main_LE : arg1'=-n+arg1, arg2'=n*arg1+1/2*n+arg2-1/2*n^2, (arg2 > 0 /\ -1+n >= 0 /\ -1/2+(-1+n)*arg1-1/2*(-1+n)^2+1/2*n+arg2 > 0), cost: 1

		arg2 > 0 [0]: eventual decrease yields (arg2 > 0 /\ -1/2+(-1+n)*arg1-1/2*(-1+n)^2+1/2*n+arg2 > 0)
		
		Replacement map: {arg2 > 0 -> (arg2 > 0 /\ -1/2+(-1+n)*arg1-1/2*(-1+n)^2+1/2*n+arg2 > 0)}

	Trace

	4[T], 1[(1+arg1p2 > 0 /\ 1+arg2p2 > 0 /\ -1+arg2 > 0 /\ arg1 > 0)], 8[(arg2 > 0 /\ -1+n >= 0 /\ -1/2+(-1+n)*arg1-1/2*(-1+n)^2+1/2*n+arg2 > 0)]
	
	Blocked

	[{}, {}, {}, {7[T], 8[T]}]

Backtrack

	Trace

	4[T], 1[(1+arg1p2 > 0 /\ 1+arg2p2 > 0 /\ -1+arg2 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {8[T]}]

Step with 7

	Trace

	4[T], 1[(1+arg1p2 > 0 /\ 1+arg2p2 > 0 /\ -1+arg2 > 0 /\ arg1 > 0)], 7[(arg2 > 0)]
	
	Blocked

	[{}, {}, {8[T]}, {}]

Covered

	Trace

	4[T], 1[(1+arg1p2 > 0 /\ 1+arg2p2 > 0 /\ -1+arg2 > 0 /\ arg1 > 0)]
	
	Blocked

	[{}, {}, {7[T], 8[T]}]

Backtrack

	Trace

	4[T]
	
	Blocked

	[{}, {1[T]}]

Step with 5

	Trace

	4[T], 5[(1-arg2 == 0 /\ arg1 > 0 /\ 1+arg2p1 > 0)]
	
	Blocked

	[{}, {1[T]}, {}]

Step with 6

	Trace

	4[T], 5[(1-arg2 == 0 /\ arg1 > 0 /\ 1+arg2p1 > 0)], 6[(arg2 > 0)]
	
	Blocked

	[{}, {1[T]}, {}, {}]

Accelerate

Start location: __init
Program variables: arg1 arg2
   1: f1_0_main_Load -> f259_0_main_LE : arg1'=arg1p2, arg2'=arg2p2, (1+arg1p2 > 0 /\ 1+arg2p2 > 0 /\ -1+arg2 > 0 /\ arg1 > 0), cost: 1
   5: f1_0_main_Load -> f223_0_main_LE : arg1'=0, arg2'=arg2p1, (1-arg2 == 0 /\ arg1 > 0 /\ 1+arg2p1 > 0), cost: 1
   6: f223_0_main_LE -> f223_0_main_LE : arg1'=-1+arg1, arg2'=arg2+arg1, arg2 > 0, cost: 1
   9: f223_0_main_LE -> f223_0_main_LE : arg1'=arg1-n2, arg2'=arg2-1/2*n2^2+arg1*n2+1/2*n2, (arg2 > 0 /\ -1+n2 >= 0 /\ -1/2+arg2+(-1+n2)*arg1+1/2*n2-1/2*(-1+n2)^2 > 0), cost: 1
   7: f259_0_main_LE -> f259_0_main_LE : arg1'=-1+arg1, arg2'=arg2+arg1, arg2 > 0, cost: 1
   8: f259_0_main_LE -> f259_0_main_LE : arg1'=-n+arg1, arg2'=n*arg1+1/2*n+arg2-1/2*n^2, (arg2 > 0 /\ -1+n >= 0 /\ -1/2+(-1+n)*arg1-1/2*(-1+n)^2+1/2*n+arg2 > 0), cost: 1
   4: __init -> f1_0_main_Load : arg1'=arg1p5, arg2'=arg2p5, T, cost: 1

	Loop Acceleration

	Original rule:
	f223_0_main_LE -> f223_0_main_LE : arg1'=-1+arg1, arg2'=arg2+arg1, (arg2 > 0), cost: 1
	New rule:
	f223_0_main_LE -> f223_0_main_LE : arg1'=arg1-n2, arg2'=arg2-1/2*n2^2+arg1*n2+1/2*n2, (arg2 > 0 /\ -1+n2 >= 0 /\ -1/2+arg2+(-1+n2)*arg1+1/2*n2-1/2*(-1+n2)^2 > 0), cost: 1

		arg2 > 0 [0]: eventual decrease yields (arg2 > 0 /\ -1/2+arg2+(-1+n2)*arg1+1/2*n2-1/2*(-1+n2)^2 > 0)
		
		Replacement map: {arg2 > 0 -> (arg2 > 0 /\ -1/2+arg2+(-1+n2)*arg1+1/2*n2-1/2*(-1+n2)^2 > 0)}

	Trace

	4[T], 5[(1-arg2 == 0 /\ arg1 > 0 /\ 1+arg2p1 > 0)], 9[(arg2 > 0 /\ -1+n2 >= 0 /\ -1/2+arg2+(-1+n2)*arg1+1/2*n2-1/2*(-1+n2)^2 > 0)]
	
	Blocked

	[{}, {1[T]}, {}, {6[T], 9[T]}]

Backtrack

	Trace

	4[T], 5[(1-arg2 == 0 /\ arg1 > 0 /\ 1+arg2p1 > 0)]
	
	Blocked

	[{}, {1[T]}, {9[T]}]

Step with 6

	Trace

	4[T], 5[(1-arg2 == 0 /\ arg1 > 0 /\ 1+arg2p1 > 0)], 6[(arg2 > 0)]
	
	Blocked

	[{}, {1[T]}, {9[T]}, {}]

Covered

	Trace

	4[T], 5[(1-arg2 == 0 /\ arg1 > 0 /\ 1+arg2p1 > 0)]
	
	Blocked

	[{}, {1[T]}, {6[T], 9[T]}]

Backtrack

	Trace

	4[T]
	
	Blocked

	[{}, {1[T], 5[T]}]

Backtrack

	Trace

	Blocked

	[{4[T]}]

Accept

unknown

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
