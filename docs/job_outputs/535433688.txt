NO

Initial ITS
Start location: __init
   0: f1_0_main_Load -> f89_0_loop_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2 > 0 /\ arg1 > 0 /\ arg2-arg1P0 == 0), cost: 1
   1: f89_0_loop_LE -> f131_0_loop_LE : arg2'=arg2P1, arg1'=arg1P1, (arg1-arg1P1 == 0 /\ -50+arg1 < 0 /\ -19+arg1 > 0), cost: 1
   2: f89_0_loop_LE -> f131_0_loop_LE : arg2'=arg2P2, arg1'=arg1P2, (-1+arg1-arg1P2 == 0 /\ -20+arg1 < 0 /\ arg1 > 0 /\ -50+arg1 < 0), cost: 1
   3: f131_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P3, arg1'=arg1P3, (-11+arg1 < 0 /\ -30+arg1 < 0 /\ -arg1P3+arg1 == 0), cost: 1
   4: f131_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P4, arg1'=arg1P4, (-29+arg1 < 0 /\ 1+arg1-arg1P4 == 0 /\ -10+arg1 > 0), cost: 1
   5: f131_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P5, arg1'=arg1P5, (-39+arg1 > 0 /\ 1-arg1P5+arg1 == 0), cost: 1
   6: f131_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P6, arg1'=arg1P6, (-40+arg1 < 0 /\ -arg1P6+arg1 == 0 /\ -28+arg1 > 0), cost: 1
   7: __init -> f1_0_main_Load : arg2'=arg2P7, arg1'=arg1P7, TRUE, cost: 1


Applied preprocessing
Original rule:
f1_0_main_Load -> f89_0_loop_LE : arg2'=arg2P0, arg1'=arg1P0, (1+arg2 > 0 /\ arg1 > 0 /\ arg2-arg1P0 == 0), cost: 1
New rule:
f1_0_main_Load -> f89_0_loop_LE : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f89_0_loop_LE -> f131_0_loop_LE : arg2'=arg2P1, arg1'=arg1P1, (arg1-arg1P1 == 0 /\ -50+arg1 < 0 /\ -19+arg1 > 0), cost: 1
New rule:
f89_0_loop_LE -> f131_0_loop_LE : arg2'=arg2P1, (50-arg1 > 0 /\ -19+arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f89_0_loop_LE -> f131_0_loop_LE : arg2'=arg2P2, arg1'=arg1P2, (-1+arg1-arg1P2 == 0 /\ -20+arg1 < 0 /\ arg1 > 0 /\ -50+arg1 < 0), cost: 1
New rule:
f89_0_loop_LE -> f131_0_loop_LE : arg2'=arg2P2, arg1'=-1+arg1, (arg1 > 0 /\ 20-arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f131_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P3, arg1'=arg1P3, (-11+arg1 < 0 /\ -30+arg1 < 0 /\ -arg1P3+arg1 == 0), cost: 1
New rule:
f131_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P3, 11-arg1 > 0, cost: 1

Applied preprocessing
Original rule:
f131_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P4, arg1'=arg1P4, (-29+arg1 < 0 /\ 1+arg1-arg1P4 == 0 /\ -10+arg1 > 0), cost: 1
New rule:
f131_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P4, arg1'=1+arg1, (-10+arg1 > 0 /\ 29-arg1 > 0), cost: 1

Applied preprocessing
Original rule:
f131_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P5, arg1'=arg1P5, (-39+arg1 > 0 /\ 1-arg1P5+arg1 == 0), cost: 1
New rule:
f131_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P5, arg1'=1+arg1, -39+arg1 > 0, cost: 1

Applied preprocessing
Original rule:
f131_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P6, arg1'=arg1P6, (-40+arg1 < 0 /\ -arg1P6+arg1 == 0 /\ -28+arg1 > 0), cost: 1
New rule:
f131_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P6, (40-arg1 > 0 /\ -28+arg1 > 0), cost: 1

Simplified rules
Start location: __init
   8: f1_0_main_Load -> f89_0_loop_LE : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
   9: f89_0_loop_LE -> f131_0_loop_LE : arg2'=arg2P1, (50-arg1 > 0 /\ -19+arg1 > 0), cost: 1
  10: f89_0_loop_LE -> f131_0_loop_LE : arg2'=arg2P2, arg1'=-1+arg1, (arg1 > 0 /\ 20-arg1 > 0), cost: 1
  11: f131_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P3, 11-arg1 > 0, cost: 1
  12: f131_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P4, arg1'=1+arg1, (-10+arg1 > 0 /\ 29-arg1 > 0), cost: 1
  13: f131_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P5, arg1'=1+arg1, -39+arg1 > 0, cost: 1
  14: f131_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P6, (40-arg1 > 0 /\ -28+arg1 > 0), cost: 1
   7: __init -> f1_0_main_Load : arg2'=arg2P7, arg1'=arg1P7, TRUE, cost: 1


Eliminating location f1_0_main_Load by chaining:

Applied chaining
First rule:
__init -> f1_0_main_Load : arg2'=arg2P7, arg1'=arg1P7, TRUE, cost: 1
Second rule:
f1_0_main_Load -> f89_0_loop_LE : arg2'=arg2P0, arg1'=arg2, (1+arg2 > 0 /\ arg1 > 0), cost: 1
New rule:
__init -> f89_0_loop_LE : arg2'=arg2P0, arg1'=arg2P7, (arg1P7 > 0 /\ 1+arg2P7 > 0), cost: 2

Applied deletion
Removed the following rules: 7 8

Eliminated locations on linear paths
Start location: __init
   9: f89_0_loop_LE -> f131_0_loop_LE : arg2'=arg2P1, (50-arg1 > 0 /\ -19+arg1 > 0), cost: 1
  10: f89_0_loop_LE -> f131_0_loop_LE : arg2'=arg2P2, arg1'=-1+arg1, (arg1 > 0 /\ 20-arg1 > 0), cost: 1
  11: f131_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P3, 11-arg1 > 0, cost: 1
  12: f131_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P4, arg1'=1+arg1, (-10+arg1 > 0 /\ 29-arg1 > 0), cost: 1
  13: f131_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P5, arg1'=1+arg1, -39+arg1 > 0, cost: 1
  14: f131_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P6, (40-arg1 > 0 /\ -28+arg1 > 0), cost: 1
  15: __init -> f89_0_loop_LE : arg2'=arg2P0, arg1'=arg2P7, (arg1P7 > 0 /\ 1+arg2P7 > 0), cost: 2


Eliminating location f131_0_loop_LE by chaining:

Applied chaining
First rule:
f89_0_loop_LE -> f131_0_loop_LE : arg2'=arg2P1, (50-arg1 > 0 /\ -19+arg1 > 0), cost: 1
Second rule:
f131_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P4, arg1'=1+arg1, (-10+arg1 > 0 /\ 29-arg1 > 0), cost: 1
New rule:
f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P4, arg1'=1+arg1, (50-arg1 > 0 /\ -10+arg1 > 0 /\ 29-arg1 > 0 /\ -19+arg1 > 0), cost: 2

Applied simplification
Original rule:
f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P4, arg1'=1+arg1, (50-arg1 > 0 /\ -10+arg1 > 0 /\ 29-arg1 > 0 /\ -19+arg1 > 0), cost: 2
New rule:
f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P4, arg1'=1+arg1, (29-arg1 > 0 /\ -19+arg1 > 0), cost: 2

Applied chaining
First rule:
f89_0_loop_LE -> f131_0_loop_LE : arg2'=arg2P1, (50-arg1 > 0 /\ -19+arg1 > 0), cost: 1
Second rule:
f131_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P5, arg1'=1+arg1, -39+arg1 > 0, cost: 1
New rule:
f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P5, arg1'=1+arg1, (50-arg1 > 0 /\ -39+arg1 > 0 /\ -19+arg1 > 0), cost: 2

Applied simplification
Original rule:
f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P5, arg1'=1+arg1, (50-arg1 > 0 /\ -39+arg1 > 0 /\ -19+arg1 > 0), cost: 2
New rule:
f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P5, arg1'=1+arg1, (50-arg1 > 0 /\ -39+arg1 > 0), cost: 2

Applied chaining
First rule:
f89_0_loop_LE -> f131_0_loop_LE : arg2'=arg2P1, (50-arg1 > 0 /\ -19+arg1 > 0), cost: 1
Second rule:
f131_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P6, (40-arg1 > 0 /\ -28+arg1 > 0), cost: 1
New rule:
f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P6, (50-arg1 > 0 /\ 40-arg1 > 0 /\ -28+arg1 > 0 /\ -19+arg1 > 0), cost: 2

Applied simplification
Original rule:
f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P6, (50-arg1 > 0 /\ 40-arg1 > 0 /\ -28+arg1 > 0 /\ -19+arg1 > 0), cost: 2
New rule:
f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P6, (40-arg1 > 0 /\ -28+arg1 > 0), cost: 2

Applied chaining
First rule:
f89_0_loop_LE -> f131_0_loop_LE : arg2'=arg2P2, arg1'=-1+arg1, (arg1 > 0 /\ 20-arg1 > 0), cost: 1
Second rule:
f131_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P3, 11-arg1 > 0, cost: 1
New rule:
f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P3, arg1'=-1+arg1, (12-arg1 > 0 /\ arg1 > 0 /\ 20-arg1 > 0), cost: 2

Applied simplification
Original rule:
f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P3, arg1'=-1+arg1, (12-arg1 > 0 /\ arg1 > 0 /\ 20-arg1 > 0), cost: 2
New rule:
f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P3, arg1'=-1+arg1, (12-arg1 > 0 /\ arg1 > 0), cost: 2

Applied chaining
First rule:
f89_0_loop_LE -> f131_0_loop_LE : arg2'=arg2P2, arg1'=-1+arg1, (arg1 > 0 /\ 20-arg1 > 0), cost: 1
Second rule:
f131_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P4, arg1'=1+arg1, (-10+arg1 > 0 /\ 29-arg1 > 0), cost: 1
New rule:
f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P4, arg1'=arg1, (-11+arg1 > 0 /\ 30-arg1 > 0 /\ arg1 > 0 /\ 20-arg1 > 0), cost: 2

Applied simplification
Original rule:
f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P4, arg1'=arg1, (-11+arg1 > 0 /\ 30-arg1 > 0 /\ arg1 > 0 /\ 20-arg1 > 0), cost: 2
New rule:
f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P4, arg1'=arg1, (-11+arg1 > 0 /\ 20-arg1 > 0), cost: 2

Applied deletion
Removed the following rules: 9 10 11 12 13 14

Eliminated locations on tree-shaped paths
Start location: __init
  16: f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P4, arg1'=1+arg1, (29-arg1 > 0 /\ -19+arg1 > 0), cost: 2
  17: f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P5, arg1'=1+arg1, (50-arg1 > 0 /\ -39+arg1 > 0), cost: 2
  18: f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P6, (40-arg1 > 0 /\ -28+arg1 > 0), cost: 2
  19: f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P3, arg1'=-1+arg1, (12-arg1 > 0 /\ arg1 > 0), cost: 2
  20: f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P4, arg1'=arg1, (-11+arg1 > 0 /\ 20-arg1 > 0), cost: 2
  15: __init -> f89_0_loop_LE : arg2'=arg2P0, arg1'=arg2P7, (arg1P7 > 0 /\ 1+arg2P7 > 0), cost: 2


Applied simplification
Original rule:
f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P4, arg1'=arg1, (-11+arg1 > 0 /\ 20-arg1 > 0), cost: 2
New rule:
f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P4, (-11+arg1 > 0 /\ 20-arg1 > 0), cost: 2

Simplified simple loops
Start location: __init
  16: f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P4, arg1'=1+arg1, (29-arg1 > 0 /\ -19+arg1 > 0), cost: 2
  17: f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P5, arg1'=1+arg1, (50-arg1 > 0 /\ -39+arg1 > 0), cost: 2
  18: f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P6, (40-arg1 > 0 /\ -28+arg1 > 0), cost: 2
  19: f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P3, arg1'=-1+arg1, (12-arg1 > 0 /\ arg1 > 0), cost: 2
  21: f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P4, (-11+arg1 > 0 /\ 20-arg1 > 0), cost: 2
  15: __init -> f89_0_loop_LE : arg2'=arg2P0, arg1'=arg2P7, (arg1P7 > 0 /\ 1+arg2P7 > 0), cost: 2


Applied acceleration
Original rule:
f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P4, arg1'=1+arg1, (29-arg1 > 0 /\ -19+arg1 > 0), cost: 2
New rule:
f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P4, arg1'=n+arg1, (-1+n >= 0 /\ 30-n-arg1 > 0 /\ -19+arg1 > 0), cost: 2*n
Sub-proof via acceration calculus written to file:///tmp/tmpnam_OmOkAG.txt

Applied instantiation
Original rule:
f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P4, arg1'=n+arg1, (-1+n >= 0 /\ 30-n-arg1 > 0 /\ -19+arg1 > 0), cost: 2*n
New rule:
f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P4, arg1'=29, (1 > 0 /\ 28-arg1 >= 0 /\ -19+arg1 > 0), cost: 58-2*arg1

Applied acceleration
Original rule:
f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P5, arg1'=1+arg1, (50-arg1 > 0 /\ -39+arg1 > 0), cost: 2
New rule:
f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P5, arg1'=n0+arg1, (51-n0-arg1 > 0 /\ -1+n0 >= 0 /\ -39+arg1 > 0), cost: 2*n0
Sub-proof via acceration calculus written to file:///tmp/tmpnam_hHeifa.txt

Applied instantiation
Original rule:
f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P5, arg1'=n0+arg1, (51-n0-arg1 > 0 /\ -1+n0 >= 0 /\ -39+arg1 > 0), cost: 2*n0
New rule:
f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P5, arg1'=50, (1 > 0 /\ -39+arg1 > 0 /\ 49-arg1 >= 0), cost: 100-2*arg1

Applied nonterm
Original rule:
f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P6, (40-arg1 > 0 /\ -28+arg1 > 0), cost: 2
New rule:
f89_0_loop_LE -> [4] : (-1+n1 >= 0 /\ 40-arg1 > 0 /\ -28+arg1 > 0), cost: NONTERM
Sub-proof via acceration calculus written to file:///tmp/tmpnam_bnLEAI.txt

Applied acceleration
Original rule:
f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P3, arg1'=-1+arg1, (12-arg1 > 0 /\ arg1 > 0), cost: 2
New rule:
f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P3, arg1'=arg1-n2, (12-arg1 > 0 /\ -1+n2 >= 0 /\ 1+arg1-n2 > 0), cost: 2*n2
Sub-proof via acceration calculus written to file:///tmp/tmpnam_PcjfCF.txt

Applied instantiation
Original rule:
f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P3, arg1'=arg1-n2, (12-arg1 > 0 /\ -1+n2 >= 0 /\ 1+arg1-n2 > 0), cost: 2*n2
New rule:
f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P3, arg1'=0, (12-arg1 > 0 /\ 1 > 0 /\ -1+arg1 >= 0), cost: 2*arg1

Applied nonterm
Original rule:
f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P4, (-11+arg1 > 0 /\ 20-arg1 > 0), cost: 2
New rule:
f89_0_loop_LE -> [4] : (-11+arg1 > 0 /\ 20-arg1 > 0 /\ -1+n3 >= 0), cost: NONTERM
Sub-proof via acceration calculus written to file:///tmp/tmpnam_DPJfLF.txt

Applied simplification
Original rule:
f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P4, arg1'=29, (1 > 0 /\ 28-arg1 >= 0 /\ -19+arg1 > 0), cost: 58-2*arg1
New rule:
f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P4, arg1'=29, (-28+arg1 <= 0 /\ -19+arg1 > 0), cost: 58-2*arg1

Applied simplification
Original rule:
f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P5, arg1'=50, (1 > 0 /\ -39+arg1 > 0 /\ 49-arg1 >= 0), cost: 100-2*arg1
New rule:
f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P5, arg1'=50, (-39+arg1 > 0 /\ -49+arg1 <= 0), cost: 100-2*arg1

Applied simplification
Original rule:
f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P3, arg1'=0, (12-arg1 > 0 /\ 1 > 0 /\ -1+arg1 >= 0), cost: 2*arg1
New rule:
f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P3, arg1'=0, (12-arg1 > 0 /\ -1+arg1 >= 0), cost: 2*arg1

Applied deletion
Removed the following rules: 16 17 18 19 21

Accelerated simple loops
Start location: __init
  24: f89_0_loop_LE -> [4] : (-1+n1 >= 0 /\ 40-arg1 > 0 /\ -28+arg1 > 0), cost: NONTERM
  26: f89_0_loop_LE -> [4] : (-11+arg1 > 0 /\ 20-arg1 > 0 /\ -1+n3 >= 0), cost: NONTERM
  27: f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P4, arg1'=29, (-28+arg1 <= 0 /\ -19+arg1 > 0), cost: 58-2*arg1
  28: f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P5, arg1'=50, (-39+arg1 > 0 /\ -49+arg1 <= 0), cost: 100-2*arg1
  29: f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P3, arg1'=0, (12-arg1 > 0 /\ -1+arg1 >= 0), cost: 2*arg1
  15: __init -> f89_0_loop_LE : arg2'=arg2P0, arg1'=arg2P7, (arg1P7 > 0 /\ 1+arg2P7 > 0), cost: 2


Applied chaining
First rule:
__init -> f89_0_loop_LE : arg2'=arg2P0, arg1'=arg2P7, (arg1P7 > 0 /\ 1+arg2P7 > 0), cost: 2
Second rule:
f89_0_loop_LE -> [4] : (-1+n1 >= 0 /\ 40-arg1 > 0 /\ -28+arg1 > 0), cost: NONTERM
New rule:
__init -> [4] : (-39 <= 0 /\ -10 <= 0), cost: NONTERM

Applied chaining
First rule:
__init -> f89_0_loop_LE : arg2'=arg2P0, arg1'=arg2P7, (arg1P7 > 0 /\ 1+arg2P7 > 0), cost: 2
Second rule:
f89_0_loop_LE -> [4] : (-11+arg1 > 0 /\ 20-arg1 > 0 /\ -1+n3 >= 0), cost: NONTERM
New rule:
__init -> [4] : (-7 <= 0 /\ -19 <= 0), cost: NONTERM

Applied chaining
First rule:
__init -> f89_0_loop_LE : arg2'=arg2P0, arg1'=arg2P7, (arg1P7 > 0 /\ 1+arg2P7 > 0), cost: 2
Second rule:
f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P4, arg1'=29, (-28+arg1 <= 0 /\ -19+arg1 > 0), cost: 58-2*arg1
New rule:
__init -> f89_0_loop_LE : arg2'=arg2P4, arg1'=29, (-19+arg2P7 > 0 /\ -28+arg2P7 <= 0), cost: 60-2*arg2P7

Applied chaining
First rule:
__init -> f89_0_loop_LE : arg2'=arg2P0, arg1'=arg2P7, (arg1P7 > 0 /\ 1+arg2P7 > 0), cost: 2
Second rule:
f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P5, arg1'=50, (-39+arg1 > 0 /\ -49+arg1 <= 0), cost: 100-2*arg1
New rule:
__init -> f89_0_loop_LE : arg2'=arg2P5, arg1'=50, (-49+arg2P7 <= 0 /\ -39+arg2P7 > 0), cost: 102-2*arg2P7

Applied chaining
First rule:
__init -> f89_0_loop_LE : arg2'=arg2P0, arg1'=arg2P7, (arg1P7 > 0 /\ 1+arg2P7 > 0), cost: 2
Second rule:
f89_0_loop_LE -> f89_0_loop_LE : arg2'=arg2P3, arg1'=0, (12-arg1 > 0 /\ -1+arg1 >= 0), cost: 2*arg1
New rule:
__init -> f89_0_loop_LE : arg2'=arg2P3, arg1'=0, (-1+arg2P7 >= 0 /\ 12-arg2P7 > 0), cost: 2+2*arg2P7

Applied deletion
Removed the following rules: 24 26 27 28 29

Chained accelerated rules with incoming rules
Start location: __init
  15: __init -> f89_0_loop_LE : arg2'=arg2P0, arg1'=arg2P7, (arg1P7 > 0 /\ 1+arg2P7 > 0), cost: 2
  30: __init -> [4] : (-39 <= 0 /\ -10 <= 0), cost: NONTERM
  31: __init -> [4] : (-7 <= 0 /\ -19 <= 0), cost: NONTERM
  32: __init -> f89_0_loop_LE : arg2'=arg2P4, arg1'=29, (-19+arg2P7 > 0 /\ -28+arg2P7 <= 0), cost: 60-2*arg2P7
  33: __init -> f89_0_loop_LE : arg2'=arg2P5, arg1'=50, (-49+arg2P7 <= 0 /\ -39+arg2P7 > 0), cost: 102-2*arg2P7
  34: __init -> f89_0_loop_LE : arg2'=arg2P3, arg1'=0, (-1+arg2P7 >= 0 /\ 12-arg2P7 > 0), cost: 2+2*arg2P7


Removed unreachable locations and irrelevant leafs
Start location: __init
  30: __init -> [4] : (-39 <= 0 /\ -10 <= 0), cost: NONTERM
  31: __init -> [4] : (-7 <= 0 /\ -19 <= 0), cost: NONTERM


Computing asymptotic complexity
Proved nontermination of rule 30 via SMT.

Proved the following lower bound
Complexity:  Nonterm
Cpx degree: Nonterm

Solved cost: NONTERM
Rule cost:   NONTERM
Rule guard:  (-39 <= 0 /\ -10 <= 0)
