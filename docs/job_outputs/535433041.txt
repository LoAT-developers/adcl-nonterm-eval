WORST_CASE(Omega(0),?)

Initial ITS
Start location: l4
   0: l0 -> l1 : y^0'=y^post0, x^0'=x^post0, (-x^post0+x^0 == 0 /\ 1-y^0 <= 0 /\ 1+y^post0-y^0 == 0), cost: 1
   2: l0 -> l2 : y^0'=y^post2, x^0'=x^post2, (y^0 <= 0 /\ x^0-x^post2 == 0 /\ y^0-y^post2 == 0), cost: 1
   1: l1 -> l0 : y^0'=y^post1, x^0'=x^post1, (x^0-x^post1 == 0 /\ y^0-y^post1 == 0), cost: 1
   3: l2 -> l0 : y^0'=y^post3, x^0'=x^post3, (0 == 0 /\ 1+x^post3-x^0 == 0 /\ 1-x^0 <= 0), cost: 1
   4: l3 -> l2 : y^0'=y^post4, x^0'=x^post4, (y^0-y^post4 == 0 /\ x^0-x^post4 == 0), cost: 1
   5: l4 -> l3 : y^0'=y^post5, x^0'=x^post5, (y^0-y^post5 == 0 /\ -x^post5+x^0 == 0), cost: 1


Applied preprocessing
Original rule:
l0 -> l1 : y^0'=y^post0, x^0'=x^post0, (-x^post0+x^0 == 0 /\ 1-y^0 <= 0 /\ 1+y^post0-y^0 == 0), cost: 1
New rule:
l0 -> l1 : y^0'=-1+y^0, -1+y^0 >= 0, cost: 1

Applied preprocessing
Original rule:
l1 -> l0 : y^0'=y^post1, x^0'=x^post1, (x^0-x^post1 == 0 /\ y^0-y^post1 == 0), cost: 1
New rule:
l1 -> l0 : TRUE, cost: 1

Applied preprocessing
Original rule:
l0 -> l2 : y^0'=y^post2, x^0'=x^post2, (y^0 <= 0 /\ x^0-x^post2 == 0 /\ y^0-y^post2 == 0), cost: 1
New rule:
l0 -> l2 : y^0 <= 0, cost: 1

Applied preprocessing
Original rule:
l2 -> l0 : y^0'=y^post3, x^0'=x^post3, (0 == 0 /\ 1+x^post3-x^0 == 0 /\ 1-x^0 <= 0), cost: 1
New rule:
l2 -> l0 : y^0'=y^post3, x^0'=-1+x^0, -1+x^0 >= 0, cost: 1

Applied preprocessing
Original rule:
l3 -> l2 : y^0'=y^post4, x^0'=x^post4, (y^0-y^post4 == 0 /\ x^0-x^post4 == 0), cost: 1
New rule:
l3 -> l2 : TRUE, cost: 1

Applied preprocessing
Original rule:
l4 -> l3 : y^0'=y^post5, x^0'=x^post5, (y^0-y^post5 == 0 /\ -x^post5+x^0 == 0), cost: 1
New rule:
l4 -> l3 : TRUE, cost: 1

Simplified rules
Start location: l4
   6: l0 -> l1 : y^0'=-1+y^0, -1+y^0 >= 0, cost: 1
   8: l0 -> l2 : y^0 <= 0, cost: 1
   7: l1 -> l0 : TRUE, cost: 1
   9: l2 -> l0 : y^0'=y^post3, x^0'=-1+x^0, -1+x^0 >= 0, cost: 1
  10: l3 -> l2 : TRUE, cost: 1
  11: l4 -> l3 : TRUE, cost: 1


Eliminating location l3 by chaining:

Applied chaining
First rule:
l4 -> l3 : TRUE, cost: 1
Second rule:
l3 -> l2 : TRUE, cost: 1
New rule:
l4 -> l2 : TRUE, cost: 2

Applied deletion
Removed the following rules: 10 11

Eliminating location l1 by chaining:

Applied chaining
First rule:
l0 -> l1 : y^0'=-1+y^0, -1+y^0 >= 0, cost: 1
Second rule:
l1 -> l0 : TRUE, cost: 1
New rule:
l0 -> l0 : y^0'=-1+y^0, -1+y^0 >= 0, cost: 2

Applied deletion
Removed the following rules: 6 7

Eliminated locations on linear paths
Start location: l4
   8: l0 -> l2 : y^0 <= 0, cost: 1
  13: l0 -> l0 : y^0'=-1+y^0, -1+y^0 >= 0, cost: 2
   9: l2 -> l0 : y^0'=y^post3, x^0'=-1+x^0, -1+x^0 >= 0, cost: 1
  12: l4 -> l2 : TRUE, cost: 2


Applied acceleration
Original rule:
l0 -> l0 : y^0'=-1+y^0, -1+y^0 >= 0, cost: 2
New rule:
l0 -> l0 : y^0'=y^0-n, (y^0-n >= 0 /\ n >= 0), cost: 2*n
Sub-proof via acceration calculus written to file:///tmp/tmpnam_cBhfOA.txt

Applied instantiation
Original rule:
l0 -> l0 : y^0'=y^0-n, (y^0-n >= 0 /\ n >= 0), cost: 2*n
New rule:
l0 -> l0 : y^0'=0, (0 >= 0 /\ y^0 >= 0), cost: 2*y^0

Applied simplification
Original rule:
l0 -> l0 : y^0'=0, (0 >= 0 /\ y^0 >= 0), cost: 2*y^0
New rule:
l0 -> l0 : y^0'=0, y^0 >= 0, cost: 2*y^0

Applied deletion
Removed the following rules: 13

Accelerated simple loops
Start location: l4
   8: l0 -> l2 : y^0 <= 0, cost: 1
  15: l0 -> l0 : y^0'=0, y^0 >= 0, cost: 2*y^0
   9: l2 -> l0 : y^0'=y^post3, x^0'=-1+x^0, -1+x^0 >= 0, cost: 1
  12: l4 -> l2 : TRUE, cost: 2


Applied chaining
First rule:
l2 -> l0 : y^0'=y^post3, x^0'=-1+x^0, -1+x^0 >= 0, cost: 1
Second rule:
l0 -> l0 : y^0'=0, y^0 >= 0, cost: 2*y^0
New rule:
l2 -> l0 : y^0'=0, x^0'=-1+x^0, (-1+x^0 >= 0 /\ y^post3 >= 0), cost: 1+2*y^post3

Applied deletion
Removed the following rules: 15

Chained accelerated rules with incoming rules
Start location: l4
   8: l0 -> l2 : y^0 <= 0, cost: 1
   9: l2 -> l0 : y^0'=y^post3, x^0'=-1+x^0, -1+x^0 >= 0, cost: 1
  16: l2 -> l0 : y^0'=0, x^0'=-1+x^0, (-1+x^0 >= 0 /\ y^post3 >= 0), cost: 1+2*y^post3
  12: l4 -> l2 : TRUE, cost: 2


Eliminating location l0 by chaining:

Applied chaining
First rule:
l2 -> l0 : y^0'=y^post3, x^0'=-1+x^0, -1+x^0 >= 0, cost: 1
Second rule:
l0 -> l2 : y^0 <= 0, cost: 1
New rule:
l2 -> l2 : y^0'=y^post3, x^0'=-1+x^0, (-1+x^0 >= 0 /\ y^post3 <= 0), cost: 2

Applied chaining
First rule:
l2 -> l0 : y^0'=0, x^0'=-1+x^0, (-1+x^0 >= 0 /\ y^post3 >= 0), cost: 1+2*y^post3
Second rule:
l0 -> l2 : y^0 <= 0, cost: 1
New rule:
l2 -> l2 : y^0'=0, x^0'=-1+x^0, (0 <= 0 /\ -1+x^0 >= 0 /\ y^post3 >= 0), cost: 2+2*y^post3

Applied simplification
Original rule:
l2 -> l2 : y^0'=0, x^0'=-1+x^0, (0 <= 0 /\ -1+x^0 >= 0 /\ y^post3 >= 0), cost: 2+2*y^post3
New rule:
l2 -> l2 : y^0'=0, x^0'=-1+x^0, (-1+x^0 >= 0 /\ y^post3 >= 0), cost: 2+2*y^post3

Applied deletion
Removed the following rules: 8 9 16

Eliminated locations on tree-shaped paths
Start location: l4
  17: l2 -> l2 : y^0'=y^post3, x^0'=-1+x^0, (-1+x^0 >= 0 /\ y^post3 <= 0), cost: 2
  18: l2 -> l2 : y^0'=0, x^0'=-1+x^0, (-1+x^0 >= 0 /\ y^post3 >= 0), cost: 2+2*y^post3
  12: l4 -> l2 : TRUE, cost: 2


Applied acceleration
Original rule:
l2 -> l2 : y^0'=y^post3, x^0'=-1+x^0, (-1+x^0 >= 0 /\ y^post3 <= 0), cost: 2
New rule:
l2 -> l2 : y^0'=y^post3, x^0'=x^0-n0, (-y^post3 >= 0 /\ x^0-n0 >= 0 /\ -1+n0 >= 0), cost: 2*n0
Sub-proof via acceration calculus written to file:///tmp/tmpnam_dFeflK.txt

Applied instantiation
Original rule:
l2 -> l2 : y^0'=y^post3, x^0'=x^0-n0, (-y^post3 >= 0 /\ x^0-n0 >= 0 /\ -1+n0 >= 0), cost: 2*n0
New rule:
l2 -> l2 : y^0'=y^post3, x^0'=0, (0 >= 0 /\ -y^post3 >= 0 /\ -1+x^0 >= 0), cost: 2*x^0

Applied acceleration
Original rule:
l2 -> l2 : y^0'=0, x^0'=-1+x^0, (-1+x^0 >= 0 /\ y^post3 >= 0), cost: 2+2*y^post3
New rule:
l2 -> l2 : y^0'=0, x^0'=x^0-n1, (-1+n1 >= 0 /\ x^0-n1 >= 0 /\ y^post3 >= 0), cost: 2*n1*y^post3+2*n1
Sub-proof via acceration calculus written to file:///tmp/tmpnam_kbJbgd.txt

Applied instantiation
Original rule:
l2 -> l2 : y^0'=0, x^0'=x^0-n1, (-1+n1 >= 0 /\ x^0-n1 >= 0 /\ y^post3 >= 0), cost: 2*n1*y^post3+2*n1
New rule:
l2 -> l2 : y^0'=0, x^0'=0, (0 >= 0 /\ -1+x^0 >= 0 /\ y^post3 >= 0), cost: 2*x^0+2*x^0*y^post3

Applied simplification
Original rule:
l2 -> l2 : y^0'=y^post3, x^0'=0, (0 >= 0 /\ -y^post3 >= 0 /\ -1+x^0 >= 0), cost: 2*x^0
New rule:
l2 -> l2 : y^0'=y^post3, x^0'=0, (-1+x^0 >= 0 /\ y^post3 <= 0), cost: 2*x^0

Applied simplification
Original rule:
l2 -> l2 : y^0'=0, x^0'=0, (0 >= 0 /\ -1+x^0 >= 0 /\ y^post3 >= 0), cost: 2*x^0+2*x^0*y^post3
New rule:
l2 -> l2 : y^0'=0, x^0'=0, (-1+x^0 >= 0 /\ y^post3 >= 0), cost: 2*x^0+2*x^0*y^post3

Applied deletion
Removed the following rules: 17 18

Accelerated simple loops
Start location: l4
  21: l2 -> l2 : y^0'=y^post3, x^0'=0, (-1+x^0 >= 0 /\ y^post3 <= 0), cost: 2*x^0
  22: l2 -> l2 : y^0'=0, x^0'=0, (-1+x^0 >= 0 /\ y^post3 >= 0), cost: 2*x^0+2*x^0*y^post3
  12: l4 -> l2 : TRUE, cost: 2


Applied chaining
First rule:
l4 -> l2 : TRUE, cost: 2
Second rule:
l2 -> l2 : y^0'=y^post3, x^0'=0, (-1+x^0 >= 0 /\ y^post3 <= 0), cost: 2*x^0
New rule:
l4 -> l2 : y^0'=y^post3, x^0'=0, (-1+x^0 >= 0 /\ y^post3 <= 0), cost: 2+2*x^0

Applied chaining
First rule:
l4 -> l2 : TRUE, cost: 2
Second rule:
l2 -> l2 : y^0'=0, x^0'=0, (-1+x^0 >= 0 /\ y^post3 >= 0), cost: 2*x^0+2*x^0*y^post3
New rule:
l4 -> l2 : y^0'=0, x^0'=0, (-1+x^0 >= 0 /\ y^post3 >= 0), cost: 2+2*x^0+2*x^0*y^post3

Applied deletion
Removed the following rules: 21 22

Chained accelerated rules with incoming rules
Start location: l4
  12: l4 -> l2 : TRUE, cost: 2
  23: l4 -> l2 : y^0'=y^post3, x^0'=0, (-1+x^0 >= 0 /\ y^post3 <= 0), cost: 2+2*x^0
  24: l4 -> l2 : y^0'=0, x^0'=0, (-1+x^0 >= 0 /\ y^post3 >= 0), cost: 2+2*x^0+2*x^0*y^post3


Removed unreachable locations and irrelevant leafs
Start location: l4
  <empty>


Computing asymptotic complexity

Proved the following lower bound
Complexity:  Unknown
Cpx degree: ?

Solved cost: 0
Rule cost:   0

