NO

Initial ITS

Start location: __init
Program variables: arg1 arg2
   0: f1_0_main_Load -> f104_0_loop_EQ : arg1'=arg1p1, arg2'=arg2p1, (-arg1p1+arg2 == 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 1
   1: f104_0_loop_EQ -> f104_0_loop_EQ : arg1'=arg1p2, arg2'=arg2p2, (arg1 < 0 /\ -5+arg1 < 0 /\ 1-arg1-arg1p2 == 0), cost: 1
   2: f104_0_loop_EQ -> f104_0_loop_EQ : arg1'=arg1p3, arg2'=arg2p3, (1-arg1p3-arg1 == 0 /\ arg1 > 0 /\ -5+arg1 < 0), cost: 1
   3: f104_0_loop_EQ -> f104_0_loop_EQ : arg1'=arg1p4, arg2'=arg2p4, (-1-arg1p4-arg1 == 0 /\ 2+arg1 > 0 /\ -4+arg1 > 0), cost: 1
   4: __init -> f1_0_main_Load : arg1'=arg1p5, arg2'=arg2p5, T, cost: 1

Chained Linear Paths

Start location: __init
Program variables: arg1 arg2
   1: f104_0_loop_EQ -> f104_0_loop_EQ : arg1'=arg1p2, arg2'=arg2p2, (arg1 < 0 /\ -5+arg1 < 0 /\ 1-arg1-arg1p2 == 0), cost: 1
   2: f104_0_loop_EQ -> f104_0_loop_EQ : arg1'=arg1p3, arg2'=arg2p3, (1-arg1p3-arg1 == 0 /\ arg1 > 0 /\ -5+arg1 < 0), cost: 1
   3: f104_0_loop_EQ -> f104_0_loop_EQ : arg1'=arg1p4, arg2'=arg2p4, (-1-arg1p4-arg1 == 0 /\ 2+arg1 > 0 /\ -4+arg1 > 0), cost: 1
   5: __init -> f104_0_loop_EQ : arg1'=arg1p1, arg2'=arg2p1, (arg2p5-arg1p1 == 0 /\ arg1p5 > 0 /\ 1+arg2p5 > 0), cost: 1

	Eliminating location f1_0_main_Load by chaining:

	Applied chaining

	First rule:
	__init -> f1_0_main_Load : arg1'=arg1p5, arg2'=arg2p5, T, cost: 1
	Second rule:
	f1_0_main_Load -> f104_0_loop_EQ : arg1'=arg1p1, arg2'=arg2p1, (-arg1p1+arg2 == 0 /\ 1+arg2 > 0 /\ arg1 > 0), cost: 1
	New rule:
	__init -> f104_0_loop_EQ : arg1'=arg1p1, arg2'=arg2p1, (arg2p5-arg1p1 == 0 /\ arg1p5 > 0 /\ 1+arg2p5 > 0), cost: 1
	
	Applied deletion

	Removed the following rules: 0 4

Simplified Transitions

Start location: __init
Program variables: arg1 arg2
   6: f104_0_loop_EQ -> f104_0_loop_EQ : arg1'=1-arg1, arg2'=arg2p2, (arg1 < 0 /\ -5+arg1 < 0), cost: 1
   7: f104_0_loop_EQ -> f104_0_loop_EQ : arg1'=1-arg1, arg2'=arg2p3, (arg1 > 0 /\ -5+arg1 < 0), cost: 1
   8: f104_0_loop_EQ -> f104_0_loop_EQ : arg1'=-1-arg1, arg2'=arg2p4, (2+arg1 > 0 /\ -4+arg1 > 0), cost: 1
   9: __init -> f104_0_loop_EQ : arg1'=arg2p5, arg2'=arg2p1, (1+arg2p5 > 0), cost: 1

	Propagated Equalities

	Original rule:
	f104_0_loop_EQ -> f104_0_loop_EQ : arg1'=arg1p2, arg2'=arg2p2, (arg1 < 0 /\ -5+arg1 < 0 /\ 1-arg1-arg1p2 == 0), cost: 1
	New rule:
	f104_0_loop_EQ -> f104_0_loop_EQ : arg1'=1-arg1, arg2'=arg2p2, (0 == 0 /\ arg1 < 0 /\ -5+arg1 < 0), cost: 1
	
		propagated equality arg1p2 = 1-arg1
		
	Simplified Guard

	Original rule:
	f104_0_loop_EQ -> f104_0_loop_EQ : arg1'=1-arg1, arg2'=arg2p2, (0 == 0 /\ arg1 < 0 /\ -5+arg1 < 0), cost: 1
	New rule:
	f104_0_loop_EQ -> f104_0_loop_EQ : arg1'=1-arg1, arg2'=arg2p2, (arg1 < 0 /\ -5+arg1 < 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f104_0_loop_EQ -> f104_0_loop_EQ : arg1'=arg1p3, arg2'=arg2p3, (1-arg1p3-arg1 == 0 /\ arg1 > 0 /\ -5+arg1 < 0), cost: 1
	New rule:
	f104_0_loop_EQ -> f104_0_loop_EQ : arg1'=1-arg1, arg2'=arg2p3, (0 == 0 /\ arg1 > 0 /\ -5+arg1 < 0), cost: 1
	
		propagated equality arg1p3 = 1-arg1
		
	Simplified Guard

	Original rule:
	f104_0_loop_EQ -> f104_0_loop_EQ : arg1'=1-arg1, arg2'=arg2p3, (0 == 0 /\ arg1 > 0 /\ -5+arg1 < 0), cost: 1
	New rule:
	f104_0_loop_EQ -> f104_0_loop_EQ : arg1'=1-arg1, arg2'=arg2p3, (arg1 > 0 /\ -5+arg1 < 0), cost: 1
	
	Propagated Equalities

	Original rule:
	f104_0_loop_EQ -> f104_0_loop_EQ : arg1'=arg1p4, arg2'=arg2p4, (-1-arg1p4-arg1 == 0 /\ 2+arg1 > 0 /\ -4+arg1 > 0), cost: 1
	New rule:
	f104_0_loop_EQ -> f104_0_loop_EQ : arg1'=-1-arg1, arg2'=arg2p4, (0 == 0 /\ 2+arg1 > 0 /\ -4+arg1 > 0), cost: 1
	
		propagated equality arg1p4 = -1-arg1
		
	Simplified Guard

	Original rule:
	f104_0_loop_EQ -> f104_0_loop_EQ : arg1'=-1-arg1, arg2'=arg2p4, (0 == 0 /\ 2+arg1 > 0 /\ -4+arg1 > 0), cost: 1
	New rule:
	f104_0_loop_EQ -> f104_0_loop_EQ : arg1'=-1-arg1, arg2'=arg2p4, (2+arg1 > 0 /\ -4+arg1 > 0), cost: 1
	
	Propagated Equalities

	Original rule:
	__init -> f104_0_loop_EQ : arg1'=arg1p1, arg2'=arg2p1, (arg2p5-arg1p1 == 0 /\ arg1p5 > 0 /\ 1+arg2p5 > 0), cost: 1
	New rule:
	__init -> f104_0_loop_EQ : arg1'=arg2p5, arg2'=arg2p1, (0 == 0 /\ arg1p5 > 0 /\ 1+arg2p5 > 0), cost: 1
	
		propagated equality arg1p1 = arg2p5
		
	Simplified Guard

	Original rule:
	__init -> f104_0_loop_EQ : arg1'=arg2p5, arg2'=arg2p1, (0 == 0 /\ arg1p5 > 0 /\ 1+arg2p5 > 0), cost: 1
	New rule:
	__init -> f104_0_loop_EQ : arg1'=arg2p5, arg2'=arg2p1, (arg1p5 > 0 /\ 1+arg2p5 > 0), cost: 1
	
	Eliminated Temporary Variables via Transitive Closure

	Original rule:
	__init -> f104_0_loop_EQ : arg1'=arg2p5, arg2'=arg2p1, (arg1p5 > 0 /\ 1+arg2p5 > 0), cost: 1
	New rule:
	__init -> f104_0_loop_EQ : arg1'=arg2p5, arg2'=arg2p1, (1+arg2p5 > 0), cost: 1

Unrolled Loops

Start location: __init
Program variables: arg1 arg2
   6: f104_0_loop_EQ -> f104_0_loop_EQ : arg1'=1-arg1, arg2'=arg2p2, (arg1 < 0 /\ -5+arg1 < 0), cost: 1
   7: f104_0_loop_EQ -> f104_0_loop_EQ : arg1'=1-arg1, arg2'=arg2p3, (arg1 > 0 /\ -5+arg1 < 0), cost: 1
   8: f104_0_loop_EQ -> f104_0_loop_EQ : arg1'=-1-arg1, arg2'=arg2p4, (2+arg1 > 0 /\ -4+arg1 > 0), cost: 1
  10: f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2p21, (-4-arg1 < 0 /\ 1-arg1 < 0 /\ arg1 < 0 /\ -5+arg1 < 0), cost: 1
  11: f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2p31, (-4-arg1 < 0 /\ 1-arg1 > 0 /\ arg1 > 0 /\ -5+arg1 < 0), cost: 1
  12: f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2p41, (-5-arg1 > 0 /\ 1-arg1 > 0 /\ 2+arg1 > 0 /\ -4+arg1 > 0), cost: 1
   9: __init -> f104_0_loop_EQ : arg1'=arg2p5, arg2'=arg2p1, (1+arg2p5 > 0), cost: 1

	Unrolling

	Original rule:
	f104_0_loop_EQ -> f104_0_loop_EQ : arg1'=1-arg1, arg2'=arg2p2, (arg1 < 0 /\ -5+arg1 < 0), cost: 1
	New rule:
	f104_0_loop_EQ -> f104_0_loop_EQ : arg1'=arg1, arg2'=arg2p21, (-4-arg1 < 0 /\ 1-arg1 < 0 /\ arg1 < 0 /\ -5+arg1 < 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f104_0_loop_EQ -> f104_0_loop_EQ : arg1'=arg1, arg2'=arg2p21, (-4-arg1 < 0 /\ 1-arg1 < 0 /\ arg1 < 0 /\ -5+arg1 < 0), cost: 1
	New rule:
	f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2p21, (-4-arg1 < 0 /\ 1-arg1 < 0 /\ arg1 < 0 /\ -5+arg1 < 0), cost: 1
	
	Unrolling

	Original rule:
	f104_0_loop_EQ -> f104_0_loop_EQ : arg1'=1-arg1, arg2'=arg2p3, (arg1 > 0 /\ -5+arg1 < 0), cost: 1
	New rule:
	f104_0_loop_EQ -> f104_0_loop_EQ : arg1'=arg1, arg2'=arg2p31, (-4-arg1 < 0 /\ 1-arg1 > 0 /\ arg1 > 0 /\ -5+arg1 < 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f104_0_loop_EQ -> f104_0_loop_EQ : arg1'=arg1, arg2'=arg2p31, (-4-arg1 < 0 /\ 1-arg1 > 0 /\ arg1 > 0 /\ -5+arg1 < 0), cost: 1
	New rule:
	f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2p31, (-4-arg1 < 0 /\ 1-arg1 > 0 /\ arg1 > 0 /\ -5+arg1 < 0), cost: 1
	
	Unrolling

	Original rule:
	f104_0_loop_EQ -> f104_0_loop_EQ : arg1'=-1-arg1, arg2'=arg2p4, (2+arg1 > 0 /\ -4+arg1 > 0), cost: 1
	New rule:
	f104_0_loop_EQ -> f104_0_loop_EQ : arg1'=arg1, arg2'=arg2p41, (-5-arg1 > 0 /\ 1-arg1 > 0 /\ 2+arg1 > 0 /\ -4+arg1 > 0), cost: 1
	
	Removed Trivial Updates

	Original rule:
	f104_0_loop_EQ -> f104_0_loop_EQ : arg1'=arg1, arg2'=arg2p41, (-5-arg1 > 0 /\ 1-arg1 > 0 /\ 2+arg1 > 0 /\ -4+arg1 > 0), cost: 1
	New rule:
	f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2p41, (-5-arg1 > 0 /\ 1-arg1 > 0 /\ 2+arg1 > 0 /\ -4+arg1 > 0), cost: 1

Step with 9

	Trace

	9[(1+arg2p5 > 0)]
	
	Blocked

	[{}, {}]

Step with 7

	Trace

	9[(1+arg2p5 > 0)], 7[(arg1 > 0 /\ -5+arg1 < 0)]
	
	Blocked

	[{}, {6[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Step with 6

	Trace

	9[(1+arg2p5 > 0)], 7[(arg1 > 0 /\ -5+arg1 < 0)], 6[(arg1 < 0 /\ -5+arg1 < 0)]
	
	Blocked

	[{}, {6[T]}, {7[T], 8[T], 10[T], 11[T], 12[T]}, {}]

Acceleration Failed

marked recursive suffix as redundant

Nonterm

Start location: __init
Program variables: arg1 arg2
   6: f104_0_loop_EQ -> f104_0_loop_EQ : arg1'=1-arg1, arg2'=arg2p2, (arg1 < 0 /\ -5+arg1 < 0), cost: 1
   7: f104_0_loop_EQ -> f104_0_loop_EQ : arg1'=1-arg1, arg2'=arg2p3, (arg1 > 0 /\ -5+arg1 < 0), cost: 1
   8: f104_0_loop_EQ -> f104_0_loop_EQ : arg1'=-1-arg1, arg2'=arg2p4, (2+arg1 > 0 /\ -4+arg1 > 0), cost: 1
  10: f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2p21, (-4-arg1 < 0 /\ 1-arg1 < 0 /\ arg1 < 0 /\ -5+arg1 < 0), cost: 1
  11: f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2p31, (-4-arg1 < 0 /\ 1-arg1 > 0 /\ arg1 > 0 /\ -5+arg1 < 0), cost: 1
  12: f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2p41, (-5-arg1 > 0 /\ 1-arg1 > 0 /\ 2+arg1 > 0 /\ -4+arg1 > 0), cost: 1
  13: f104_0_loop_EQ -> LoAT_sink : (4+arg1 > 0 /\ -1+arg1 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ 5-arg1 > 0), cost: NONTERM
   9: __init -> f104_0_loop_EQ : arg1'=arg2p5, arg2'=arg2p1, (1+arg2p5 > 0), cost: 1

	Certificate of Non-Termination

	Original rule:
	f104_0_loop_EQ -> f104_0_loop_EQ : arg2'=arg2p2, (-4-arg1 < 0 /\ 1-arg1 < 0 /\ arg1 > 0 /\ -5+arg1 < 0), cost: 1
	New rule:
	f104_0_loop_EQ -> LoAT_sink : (4+arg1 > 0 /\ -1+arg1 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ 5-arg1 > 0), cost: NONTERM

		4+arg1 > 0 [0]: monotonic increase yields 4+arg1 > 0
		
		-1+arg1 > 0 [0]: monotonic increase yields -1+arg1 > 0
		
		arg1 > 0 [0]: monotonic increase yields arg1 > 0, dependencies: -1+arg1 > 0
		
		5-arg1 > 0 [0]: monotonic increase yields 5-arg1 > 0
		
		Replacement map: {4+arg1 > 0 -> 4+arg1 > 0, -1+arg1 > 0 -> -1+arg1 > 0, arg1 > 0 -> arg1 > 0, 5-arg1 > 0 -> 5-arg1 > 0}

Step with 13

	Trace

	9[(1+arg2p5 > 0)], 13[(4+arg1 > 0 /\ -1+arg1 > 0 /\ arg1 > 0 /\ -1+n >= 0 /\ 5-arg1 > 0)]
	
	Blocked

	[{}, {6[T]}, {13[T]}]

Refute

	Counterexample

	[ arg1=2 arg2=0 ] 9 [ arg1=arg1 arg2=arg2 ] 13
	
NO

Build SHA: a05f16bf13df659c382799650051f91bf6828c7b
